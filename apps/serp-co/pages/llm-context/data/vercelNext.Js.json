[
  {
    "owner": "vercel",
    "repo": "next.js",
    "content": "TITLE: Implementing Server Actions in Server Components using inline directive in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a Server Action in a Next.js Server Component by adding the 'use server' directive at the beginning of an async function body in JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n    // Mutate data\n  }\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Container in Next.js _app.js (After)\nDESCRIPTION: This code snippet shows the corrected implementation of the custom <App> component in Next.js. It removes the import and usage of the deprecated <Container> component from `next/app`, resolving the \"App Container Deprecated\" error.  The `MyApp` class extends `App` and renders the `Component` directly, without the wrapping `Container`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-container-deprecated.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport App from 'next/app'\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props\n    return <Component {...pageProps} />\n  }\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Getting User with Session Verification in DAL (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to retrieve user information in a Data Access Layer after session verification. It uses `verifySession` to ensure the user is authenticated and authorized. If the session is valid, user ID from session is used for further data fetching. The code emphasizes performing auth checks within the DAL to ensure consistency and prevent developers from forgetting authorization checks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  // Get user ID from session and fetch data\n})\n```\n\n----------------------------------------\n\nTITLE: Signup with Session Creation & Redirect - JavaScript\nDESCRIPTION: This snippet shows how to integrate the `createSession` function in a signup process. After validating the form, preparing the data, and inserting the user into the database, it calls `createSession` with the new user's ID and redirects the user to their profile page using `redirect('/profile')`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSession } from '@/app/lib/session'\n\nexport async function signup(state, formData) {\n  // Previous steps:\n  // 1. Validate form fields\n  // 2. Prepare data for insertion into database\n  // 3. Insert the user into the database or call an Library API\n\n  // Current steps:\n  // 4. Create user session\n  await createSession(user.id)\n  // 5. Redirect user\n  redirect('/profile')\n}\n```\n\n----------------------------------------\n\nTITLE: Logout with Session Deletion & Redirect - TypeScript\nDESCRIPTION: This snippet demonstrates a logout function that deletes the session using `deleteSession()` and then redirects the user to the login page using `redirect('/login')`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { deleteSession } from '@/app/lib/session'\n\nexport async function logout() {\n  deleteSession()\n  redirect('/login')\n}\n```\n\n----------------------------------------\n\nTITLE: Role-Based Access Control in Server Component (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates role-based access control within a Next.js Server Component. It uses the `verifySession` function from a DAL to check the user's session and determine their role. Based on the role ('admin', 'user'), it conditionally renders different dashboard components (AdminDashboard, UserDashboard). If no valid session or role is found, it redirects the user to the login page, ensuring only authorized users can access specific areas of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\n\nexport default function Dashboard() {\n  const session = await verifySession()\n  const userRole = session?.user?.role // Assuming 'role' is part of the session object\n\n  if (userRole === 'admin') {\n    return <AdminDashboard />\n  } else if (userRole === 'user') {\n    return <UserDashboard />\n  } else {\n    redirect('/login')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Cache Entries in Next.js Fetch Requests\nDESCRIPTION: Applies tags to cache entries when fetching data. These tags can later be used with revalidateTag to selectively purge cache entries associated with specific tags.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// Cache data with a tag\nfetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })\n```\n\n----------------------------------------\n\nTITLE: Role-Based Access Control in Server Component (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates role-based access control within a Next.js Server Component.  It calls the `verifySession` function to retrieve the user's session and extracts the user role.  Based on the role ('admin' or 'user'), it conditionally renders either the `AdminDashboard` or `UserDashboard` component. If the user is not authenticated or does not have a recognized role, they are redirected to the '/login' page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\n\nexport default function Dashboard() {\n  const session = await verifySession()\n  const userRole = session.role // Assuming 'role' is part of the session object\n\n  if (userRole === 'admin') {\n    return <AdminDashboard />\n  } else if (userRole === 'user') {\n    return <UserDashboard />\n  } else {\n    redirect('/login')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Inter Font in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to import the Inter font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It defines a variable font and assigns it to the `className` of the `html` element, ensuring the font is applied globally.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CORS in Next.js Middleware (JS)\nDESCRIPTION: This snippet illustrates how to implement CORS (Cross-Origin Resource Sharing) handling in Next.js middleware. It checks the origin of the request, determines if it's allowed based on a predefined list, and sets the appropriate CORS headers for both preflight and simple requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n\nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n\nexport function middleware(request) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n\n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n\n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n\n  // Handle simple requests\n  const response = NextResponse.next()\n\n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n\n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n\n  return response\n}\n\nexport const config = {\n  matcher: '/api/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing New Routing Hooks in Next.js App Directory - JSX\nDESCRIPTION: This JavaScript snippet demonstrates the usage of new routing hooks 'useRouter', 'usePathname', and 'useSearchParams' in Next.js client components. These hooks are imported from 'next/navigation' and are meant to replace older routing hooks in the 'app' directory. The hooks are intended for client components only and handle routing by interacting with the navigation system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\"\\n\\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\\n\\nexport default function ExampleClientComponent() {\\n  const router = useRouter()\\n  const pathname = usePathname()\\n  const searchParams = useSearchParams()\\n\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect with Server Action in Next.js (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `redirect` function within a Server Action in Next.js using TypeScript. It defines a `navigate` function that takes form data and redirects the user to a specific post based on the provided ID. This demonstrates how to use redirect within server actions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function navigate(data: FormData) {\n  redirect(`/posts/${data.get('id')}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Using cacheTag in Next.js with TypeScript\nDESCRIPTION: Demonstrates tagging a cache entry using cacheTag in a TypeScript file. It requires dynamicIO enabled and assigns 'my-data' as a cache tag in the getData function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_cacheTag as cacheTag } from 'next/cache'\n\nexport async function getData() {\n  'use cache'\n  cacheTag('my-data')\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Fonts in Next.js App Router with TypeScript\nDESCRIPTION: Demonstrates how to import and use local font files in a Next.js application using the App Router with TypeScript. The example shows how to load a local font file and apply it to the entire application through the RootLayout component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running ESLint on Staged Files with lint-staged (js)\nDESCRIPTION: This snippet demonstrates how to configure lint-staged to run `next lint` on staged files. It defines a `buildEslintCommand` function that constructs the command to run ESLint with the `--file` flag for each staged file. This is useful for ensuring that only changed files are linted before committing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path')\n\nconst buildEslintCommand = (filenames) =>\n  `next lint --fix --file ${filenames\n    .map((f) => path.relative(process.cwd(), f))\n    .join(' --file ')}`\n\nmodule.exports = {\n  '*.{js,jsx,ts,tsx}': [buildEslintCommand],\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil in Next.js Middleware (TS)\nDESCRIPTION: This snippet shows how to use the `waitUntil` method in Next.js middleware to perform background tasks that extend the lifetime of the middleware function. It fetches data from an analytics platform to log page views.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextFetchEvent, NextRequest } from 'next/server'\n\nexport function middleware(req: NextRequest, event: NextFetchEvent) {\n  event.waitUntil(\n    fetch('https://my-analytics-platform.com', {\n      method: 'POST',\n      body: JSON.stringify({ pathname: req.nextUrl.pathname }),\n    })\n  )\n\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage in Next.js App Router (TypeScript)\nDESCRIPTION: Example of importing and using the Next.js Link component in the App Router with TypeScript. The Link component enables client-side navigation between routes with prefetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Metadata Generation (JSX)\nDESCRIPTION: This snippet demonstrates the use of the `generateMetadata` function in a JavaScript Next.js application to generate dynamic metadata based on route parameters and fetched data.  It fetches product data based on the `id` parameter and extends parent metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateMetadata({ params, searchParams }, parent) {\n  // read route params\n  const { id } = await params\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Server Action using Next.js API\nDESCRIPTION: This example illustrates how to get, set, and delete cookies inside a Server Action using the cookies API from Next.js. It demonstrates basic cookie operations in a server-side context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function exampleAction() {\n  const cookieStore = await cookies()\n\n  // Get cookie\n  cookieStore.get('name')?.value\n\n  // Set cookie\n  cookieStore.set('name', 'Delba')\n\n  // Delete cookie\n  cookieStore.delete('name')\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function exampleAction() {\n  // Get cookie\n  const cookieStore = await cookies()\n\n  // Get cookie\n  cookieStore.get('name')?.value\n\n  // Set cookie\n  cookieStore.set('name', 'Delba')\n\n  // Delete cookie\n  cookieStore.delete('name')\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting after mutation with `redirect` in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `redirect` function from `next/navigation` within a server action in the App Router to redirect a user after creating a post. It imports `redirect` and `revalidatePath`, calls a database function (placeholder), revalidates the path, and then redirects the user to the new post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\"\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Lifetime with Next.js Fetch - JavaScript\nDESCRIPTION: This snippet demonstrates how to set a timed revalidation interval using Next.js fetch options, by specifying the cache lifetime in seconds. The revalidate option is used to ensure that data is refreshed from the data source after a specified period, and stale data is returned during revalidation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Revalidate at most every hour\nfetch('https://...', { next: { revalidate: 3600 } })\n```\n\n----------------------------------------\n\nTITLE: Creating a separate file for Server Actions in JavaScript\nDESCRIPTION: This snippet shows how to create a separate file with the 'use server' directive at the top to mark all exported functions as Server Actions in JavaScript, making them reusable in both Client and Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nexport async function create() {}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing a Component with SSR Disabled (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use `next/dynamic` to import a component dynamically and disable server-side rendering (SSR). This is useful for components that rely on browser-specific APIs and should only be rendered on the client-side. The `ssr: false` option ensures that the component is not rendered during the initial server-side rendering process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst ClientOnlyComponent = dynamic(() => import('./component'), {\n  ssr: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Server-Side Post Creation and Redirection in Next.js TypeScript\nDESCRIPTION: This TypeScript code describes how to handle post creation on the server side using Next.js. The 'createPost' function processes the form data and uses 'redirect' to navigate to the new post immediately after creation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use server'\nimport { redirect } from 'next/navigation'\n\nexport async function createPost(formData: FormData) {\n  // Create a new post\n  // ...\n\n  // Redirect to the new post\n  redirect(`/posts/${data.id}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Data Fetching with Custom Function in Next.js App Directory - TSX\nDESCRIPTION: This TypeScript snippet demonstrates colocating server-side data fetching inside a React component using a custom function in a Next.js 'app' directory. The 'fetch' API is used with 'no-store' cache setting to ensure fresh data on every request. This approach aligns with the transition towards server components, reducing JavaScript payloads to the client.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// `app` directory\\n\\n// This function can be named anything\\nasync function getProjects() {\\n  const res = await fetch(`https://...`, { cache: 'no-store' })\\n  const projects = await res.json()\\n\\n  return projects\\n}\\n\\nexport default async function Dashboard() {\\n  const projects = await getProjects()\\n\\n  return (\\n    <ul>\\n      {projects.map((project) => (\\n        <li key={project.id}>{project.name}</li>\\n      ))}\\n    </ul>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Count with Server Action and useEffect in React\nDESCRIPTION: This snippet shows how to use a Server Action within useEffect to update a view count when a component mounts. It demonstrates integrating Server Actions with React lifecycle methods.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n\nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n\n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n\n    updateViews()\n  }, [])\n\n  return <p>Total Views: {views}</p>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n\nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n\n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n\n    updateViews()\n  }, [])\n\n  return <p>Total Views: {views}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Pending State Management with useFormStatus in Next.js\nDESCRIPTION: Shows how to implement loading states in form submissions using the useFormStatus hook.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useFormStatus } from 'react-dom'\n\nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button disabled={pending} type=\"submit\">\n      Sign Up\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using sizes Property with Next.js Image Component\nDESCRIPTION: Example of setting the sizes property on a Next.js Image component to optimize loading based on viewport size. The sizes attribute helps browsers determine which image size to download from the srcset based on different breakpoints.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <div className=\"grid-element\">\n      <Image\n        fill\n        src=\"/example.png\"\n        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control in getServerSideProps (TypeScript)\nDESCRIPTION: This code demonstrates setting the `Cache-Control` header in `getServerSideProps` using TypeScript. It configures the cache with `s-maxage=10` and `stale-while-revalidate=59`, meaning the response is considered fresh for 10 seconds and will serve stale content while revalidating for 59 seconds. The `context.res.setHeader` method is used to set the header.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'\n\n// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport const getServerSideProps = (async (context) => {\n  context.res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n\n  return {\n    props: {},\n  }\n}) satisfies GetServerSideProps\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Headers in Next.js - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set CORS headers for a GET route. It ensures that the response allows cross-origin requests by specifying allowed origins and methods.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Cookie - JavaScript\nDESCRIPTION: This snippet creates a session cookie using the `next/headers` cookies API. It encrypts the user ID and expiration date into a session token, then sets the 'session' cookie with HttpOnly, Secure, Expires, SameSite, and Path attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport async function createSession(userId) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  const session = await encrypt({ userId, expiresAt })\n  const cookieStore = await cookies()\n\n  cookieStore.set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FormData in Next.js - JavaScript\nDESCRIPTION: This JavaScript example shows how to extract FormData from a POST request, read specific field values, and return them in a JSON response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST(request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers and Cookies in Next.js App Directory - TSX\nDESCRIPTION: This TypeScript snippet demonstrates accessing request headers and cookies in server components within the Next.js 'app' directory. The 'headers' and 'cookies' APIs are utilized to fetch request-specific data directly in server components, enabling scenarios such as authentication and personalized data retrieval.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// `app` directory\\nimport { cookies, headers } from 'next/headers'\\n\\nasync function getData() {\\n  const authHeader = (await headers()).get('authorization')\\n\\n  return '...'\\n}\\n\\nexport default async function Page() {\\n  // You can use `cookies` or `headers` inside Server Components\\n  // directly or in your data fetching function\\n  const theme = (await cookies()).get('theme')\\n  const data = await getData()\\n  return '...'\\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidate Path in Next.js Route Handler (TypeScript)\nDESCRIPTION: This code snippet shows how to use `revalidatePath` within a Next.js Route Handler in TypeScript. It retrieves the 'path' parameter from the request's search parameters, and if present, calls `revalidatePath` to invalidate the cache for that path.  It then returns a JSON response indicating whether the revalidation was successful.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nimport type { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const path = request.nextUrl.searchParams.get('path')\n\n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n\n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Cypress Example\nDESCRIPTION: Uses `create-next-app` to generate a new Next.js project pre-configured with Cypress for testing.  It leverages the `with-cypress` example. Requires `npx` to be available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example with-cypress with-cypress-app\n```\n\n----------------------------------------\n\nTITLE: Creating ImageResponse in Next.js with JSX\nDESCRIPTION: This code snippet shows how to create an `ImageResponse` in Next.js using JSX. It demonstrates the available options for configuring the image, including width, height, emoji style, fonts, and debug mode. Additionally, it covers HTTP response options such as status, statusText, and headers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/image-response.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nnew ImageResponse(\n  element: ReactElement,\n  options: {\n    width?: number = 1200\n    height?: number = 630\n    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',\n    fonts?: {\n      name: string,\n      data: ArrayBuffer,\n      weight: number,\n      style: 'normal' | 'italic'\n    }[]\n    debug?: boolean = false\n\n    // Options that will be passed to the HTTP response\n    status?: number = 200\n    statusText?: string\n    headers?: Record<string, string>\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache for Fetch Requests in Next.js\nDESCRIPTION: Opts an individual fetch request into caching by setting the cache option to 'force-cache'. This allows the response to be stored in the Data Cache.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Opt into caching\nfetch(`https://...`, { cache: 'force-cache' })\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Next.js Image Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Next.js Image component in a React component. It shows the basic usage with required props like src, width, height, and alt.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"/profile.png\"\n      width={500}\n      height={500}\n      alt=\"Picture of the author\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Server Actions as props to Client Components in JavaScript\nDESCRIPTION: This example shows how to accept a Server Action as a prop in a Client Component with JavaScript, which can then be used with a form's action attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport default function ClientComponent({ updateItemAction }) {\n  return <form action={updateItemAction}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions in Server Components using inline directive in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a Server Action in a Next.js Server Component by adding the 'use server' directive at the beginning of an async function body in TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n    // Mutate data\n  }\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Signup with Session Creation & Redirect - TypeScript\nDESCRIPTION: This snippet shows how to integrate the `createSession` function in a signup process. After validating the form, preparing the data, and inserting the user into the database, it calls `createSession` with the new user's ID and redirects the user to their profile page using `redirect('/profile')`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSession } from '@/app/lib/session'\n\nexport async function signup(state: FormState, formData: FormData) {\n  // Previous steps:\n  // 1. Validate form fields\n  // 2. Prepare data for insertion into database\n  // 3. Insert the user into the database or call an Library API\n\n  // Current steps:\n  // 4. Create user session\n  await createSession(user.id)\n  // 5. Redirect user\n  redirect('/profile')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating robots.txt Dynamically in JavaScript\nDESCRIPTION: A JavaScript implementation that dynamically generates a robots.txt file in Next.js. It returns an object with rules for all user agents and references a sitemap URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function robots() {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closures with Server Actions in Next.js TSX\nDESCRIPTION: This example demonstrates how to create a Server Action inside a React component using a closure. The action captures a snapshot of data at render time and uses it when the action is invoked, with Next.js automatically encrypting the closed-over variables for security.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const publishVersion = await getLatestVersion();\n\n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n\n  return (\n    <form>\n      <button formAction={publish}>Publish</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Sitemap Programmatically in JavaScript\nDESCRIPTION: JavaScript implementation for programmatically generating a sitemap by exporting a default function that returns an array of URLs with lastModified, changeFrequency, and priority properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function sitemap() {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Session with Cookies (App Router) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a session in the database, encrypt the session ID, and store it in cookies for optimistic authentication checks within a Next.js application using the App Router. It imports necessary modules like `cookies` from `next/headers`, database connection (`db`), and an encryption function (`encrypt`). The `createSession` function accepts a user ID, creates a session record in the database with an expiration date, encrypts the session ID, and sets a cookie containing the encrypted session data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookies from 'next/headers'\nimport { db } from '@/app/lib/db'\nimport { encrypt } from '@/app/lib/session'\n\nexport async function createSession(id: number) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n\n  // 1. Create a session in the database\n  const data = await db\n    .insert(sessions)\n    .values({\n      userId: id,\n      expiresAt,\n    })\n    // Return the session ID\n    .returning({ id: sessions.id })\n\n  const sessionId = data[0].id\n\n  // 2. Encrypt the session ID\n  const session = await encrypt({ sessionId, expiresAt })\n\n  // 3. Store the session in cookies for optimistic auth checks\n  const cookieStore = await cookies()\n  cookieStore.set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Caching with Fetch - JavaScript\nDESCRIPTION: This snippet shows how to opt out of caching when performing a fetch request. By setting the cache option to 'no-store', responses will not be cached, ensuring that the requested data is always fresh and retrieved directly from the source.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with Pages Router in Next.js (TypeScript)\nDESCRIPTION: This example demonstrates Incremental Static Regeneration using the Pages Router in Next.js with TypeScript. It includes static path generation, static props fetching, and revalidation settings for a blog post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetStaticPaths, GetStaticProps } from 'next'\n\ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n\ninterface Props {\n  post: Post\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const posts = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n  const paths = posts.map((post: Post) => ({\n    params: { id: String(post.id) },\n  }))\n\n  // We'll prerender only these paths at build time.\n  // { fallback: 'blocking' } will server-render pages\n  // on-demand if the path doesn't exist.\n  return { paths, fallback: false }\n}\n\nexport const getStaticProps: GetStaticProps<Props> = async ({\n  params,\n}: {\n  params: { id: string }\n}) => {\n  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(\n    (res) => res.json()\n  )\n\n  return {\n    props: { post },\n    // Next.js will invalidate the cache when a\n    // request comes in, at most once every 60 seconds.\n    revalidate: 60,\n  }\n}\n\nexport default function Page({ post }: Props) {\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie in API Route - TypeScript\nDESCRIPTION: This snippet sets a session cookie within a Next.js API route. It encrypts the session data, serializes it into a cookie string using the `cookie` library, and sets the 'Set-Cookie' header in the response. The cookie is configured with HttpOnly, Secure (only in production), MaxAge, and Path attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serialize } from 'cookie'\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { encrypt } from '@/app/lib/session'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n\n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Handling in Next.js\nDESCRIPTION: Implementation of a global error boundary that handles root-level errors and provides a complete HTML document structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using revalidateTag in a Server Action - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the revalidateTag function within a server action in Next.js. It imports the revalidateTag function from the next/cache module and calls it after adding a new post to invalidate the associated cache tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouter for Navigation in Next.js - TSX\nDESCRIPTION: This snippet demonstrates how to use the useRouter hook from Next.js to programmatically navigate to the '/dashboard' route when a button is clicked. It imports useRouter from 'next/navigation' and creates a button that uses the router's push method to navigate.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard/')}> \n      Dashboard\n    </button>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Decrypting Session Data (Jose Library) - TypeScript\nDESCRIPTION: This snippet decrypts a session using the jose library.  It verifies the session token against the encoded secret key and returns the payload if valid.  It also handles potential errors during verification.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function decrypt(session: string | undefined = '') {\n  try {\n    const { payload } = await jwtVerify(session, encodedKey, {\n      algorithms: ['HS256'],\n    })\n    return payload\n  } catch (error) {\n    console.log('Failed to verify session')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data to API Route - JavaScript\nDESCRIPTION: This code snippet demonstrates how to submit form data to an API route in Next.js using JavaScript. It prevents the default form submission, creates a FormData object from the form, sends a POST request to the API route, and handles the response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  async function onSubmit(event) {\n    event.preventDefault()\n\n    const formData = new FormData(event.target)\n    const response = await fetch('/api/submit', {\n      method: 'POST',\n      body: formData,\n    })\n\n    // Handle response if necessary\n    const data = await response.json()\n    // ...\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Functions with 'use server' Directive in TypeScript\nDESCRIPTION: Defines asynchronous Server Functions for creating and deleting posts using the 'use server' directive within individual functions. Each function receives FormData and extracts relevant information for data operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function createPost(formData: FormData) {\n  'use server'\n  const title = formData.get('title')\n  const content = formData.get('content')\n\n  // Update data\n  // Revalidate cache\n}\n\nexport async function deletePost(formData: FormData) {\n  'use server'\n  const id = formData.get('id')\n\n  // Update data\n  // Revalidate cache\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Server Functions with JavaScript\nDESCRIPTION: Example of implementing authentication and authorization in a server function using the 'use server' directive. This demonstrates how to secure server-side operations by verifying user credentials before performing database operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n'use server'\n\nimport { db } from '@/lib/db' // Your database client\nimport { authenticate } from '@/lib/auth' // Your authentication library\n\nexport async function createUser(data, token) {\n  const user = authenticate(token)\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  const newUser = await db.user.create({ data })\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server External Packages in Next.js with JavaScript\nDESCRIPTION: This code snippet shows how to customize the Next.js configuration to exclude certain Node.js dependencies from being bundled in Server Components, using the `serverExternalPackages` option. The configuration is set using a CommonJS export in the `next.config.js` file, requiring Next.js v15.0.0 or later due to changes from experimental to stable feature status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverExternalPackages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  serverExternalPackages: ['@acme/ui'],\\n}\\n\\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Handling form submissions with Server Actions in JavaScript\nDESCRIPTION: This example shows how to create a form that submits data to a Server Action, which processes the FormData object to extract field values in JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  async function createInvoice(formData) {\n    'use server'\n\n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n\n    // mutate data\n    // revalidate cache\n  }\n\n  return <form action={createInvoice}>...</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Action with Form and Event Handler in React\nDESCRIPTION: This example shows how to use a Server Action with a form and an onChange event handler. It demonstrates saving a draft on input change and publishing a post on form submission.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { publishPost, saveDraft } from './actions'\n\nexport default function EditPost() {\n  return (\n    <form action={publishPost}>\n      <textarea\n        name=\"content\"\n        onChange={async (e) => {\n          await saveDraft(e.target.value)\n        }}\n      />\n      <button type=\"submit\">Publish</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Data in Next.js Component with TypeScript\nDESCRIPTION: Provides an example of tagging data within a component function using cacheTag in TypeScript. This code allows tagging 'bookings-data' for cache entries with an optional tag from fetched data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_cacheTag as cacheTag } from 'next/cache'\n\ninterface BookingsProps {\n  type: string\n}\n\nexport async function Bookings({ type = 'haircut' }: BookingsProps) {\n  'use cache'\n  cacheTag('bookings-data')\n\n  async function getBookingsData() {\n    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)\n    return data\n  }\n\n  return //...\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect in Next.js Client Component (TypeScript)\nDESCRIPTION: This example shows how to use the `redirect` function in a Next.js Client Component using TypeScript. It checks if the current pathname starts with `/admin` and doesn't include `/login`. If both conditions are met, it redirects the user to `/admin/login`. When using `redirect` in a Client Component on initial page load during SSR, it will perform a server-side redirect.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { redirect, usePathname } from 'next/navigation'\n\nexport function ClientRedirect() {\n  const pathname = usePathname()\n\n  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {\n    redirect('/admin/login')\n  }\n\n  return <div>Login Page</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Logout with Session Deletion & Redirect - JavaScript\nDESCRIPTION: This snippet demonstrates a logout function that deletes the session using `deleteSession()` and then redirects the user to the login page using `redirect('/login')`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { deleteSession } from '@/app/lib/session'\n\nexport async function logout() {\n  deleteSession()\n  redirect('/login')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in Next.js with TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to import and use next/server in a middleware.ts file. It shows how to define a middleware function that takes NextRequest and NextFetchEvent as parameters and returns a Response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-server-import-in-page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextFetchEvent, NextRequest } from 'next/server'\n\nexport function middleware(req: NextRequest, ev: NextFetchEvent) {\n  return new Response('Hello, world!')\n}\n```\n\n----------------------------------------\n\nTITLE: Define Signup Server Action in Next.js (TS)\nDESCRIPTION: This code snippet defines a Server Action named `signup` which is meant to handle the form submission. This particular snippet contains an empty function body, representing a placeholder for future implementation. It accepts `formData` as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport async function signup(formData: FormData) {}\n```\n\n----------------------------------------\n\nTITLE: Async Layout Implementation in Next.js 15\nDESCRIPTION: Examples of implementing both async and sync layouts with params handling in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype Params = Promise<{ slug: string }>\n\nexport async function generateMetadata({ params }: { params: Params }) {\n  const { slug } = await params\n}\n\nexport default async function Layout({\n  children,\n  params,\n}: {\n  children: React.ReactNode\n  params: Params\n}) {\n  const { slug } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Passing additional arguments to Server Actions using bind in TypeScript\nDESCRIPTION: This example demonstrates how to use JavaScript's bind method to pass additional arguments to a Server Action when it's invoked from a form in a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { updateUser } from './actions'\n\nexport function UserProfile({ userId }: { userId: string }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n\n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Server Functions in Event Handlers with TypeScript\nDESCRIPTION: Shows how to invoke a Server Function from an onClick event handler in a TypeScript Client Component. It updates the local state with the returned value from the Server Function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }: { initialLikes: number }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Script Component (App Router, TSX)\nDESCRIPTION: This code snippet demonstrates importing the `Script` component from `next/script` and using it to load an external script in a Next.js application within the `app` directory.  It shows the basic usage of the `Script` component with the required `src` prop. The `Dashboard` function is a simple functional component that renders the script.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Session Verification (TypeScript)\nDESCRIPTION: This TypeScript code defines a `getUser` function within a Next.js DAL that retrieves user data from a database after verifying the user's session. It utilizes the `verifySession` function to ensure the user is authenticated, fetches user data based on the user ID from the session, and returns a subset of user columns (id, name, email). Error handling is included to catch and log failures during data retrieval.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  try {\n    const data = await db.query.users.findMany({\n      where: eq(users.id, session.userId),\n      // Explicitly return the columns you need rather than the whole user object\n      columns: {\n        id: true,\n        name: true,\n        email: true,\n      },\n    })\n\n    const user = data[0]\n\n    return user\n  } catch (error) {\n    console.log('Failed to fetch user')\n    return null\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Sequential Data Fetching - Next.js with TypeScript\nDESCRIPTION: This snippet illustrates a sequential data fetching pattern using async/await, where an artist's information is fetched first before loading playlists that depend on that information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ username: string }>\n}) {\n  const { username } = await params\n  // Get artist information\n  const artist = await getArtist(username)\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      {/* Show fallback UI while the Playlists component is loading */}\n      <Suspense fallback={<div>Loading...</div>}>\n        {/* Pass the artist ID to the Playlists component */}\n        <Playlists artistID={artist.id} />\n      </Suspense>\n    </>\n  )\n}\n\nasync function Playlists({ artistID }: { artistID: string }) {\n  // Use the artist ID to fetch playlists\n  const playlists = await getArtistPlaylists(artistID)\n\n  return (\n    <ul>\n      {playlists.map((playlist) => (\n        <li key={playlist.id}>{playlist.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Dynamic Post Page with getStaticProps and getStaticPaths\nDESCRIPTION: Implementation of a dynamic post page that uses both getStaticPaths to determine which routes to pre-render and getStaticProps to fetch data for each specific post based on its ID parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Post({ post }) {\n  // Render post...\n}\n\nexport async function getStaticPaths() {\n  // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API rewrites in next.config.ts\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure API rewrites in `next.config.ts` to proxy requests to a backend server. It uses the `rewrites` async function to define a rewrite rule that forwards requests to `/api/:path*` to `https://your-backend.com/:path*`. Requires the `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  async rewrites() {\n    return [\n      {\n        source: '/api/:path*',\n        destination: 'https://your-backend.com/:path*',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Functions with 'use server' Directive in JavaScript\nDESCRIPTION: JavaScript version of Server Functions for creating and deleting posts using the 'use server' directive within individual functions. Each function extracts data from FormData for backend operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function createPost(formData) {\n  'use server'\n  const title = formData.get('title')\n  const content = formData.get('content')\n\n  // Update data\n  // Revalidate cache\n}\n\nexport async function deletePost(formData) {\n  'use server'\n  const id = formData.get('id')\n\n  // Update data\n  // Revalidate cache\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for Optimistic Auth Checks - JavaScript\nDESCRIPTION: This JavaScript code provides middleware implementation for optimistic authentication checks in a Next.js application. It imports `NextResponse` from `next/server`, `decrypt` function for session decryption, and `cookies` from `next/headers`.  The middleware function checks if the requested path is protected or public, decrypts the session from the cookie, and redirects users to `/login` if they are not authenticated on a protected route, or to `/dashboard` if they are authenticated on a public route. The `config.matcher` defines the routes where the middleware should be executed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { decrypt } from '@/app/lib/session'\nimport { cookies } from 'next/headers'\n\n// 1. Specify protected and public routes\nconst protectedRoutes = ['/dashboard']\nconst publicRoutes = ['/login', '/signup', '/']\n\nexport default async function middleware(req) {\n  // 2. Check if the current route is protected or public\n  const path = req.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.includes(path)\n  const isPublicRoute = publicRoutes.includes(path)\n\n  // 3. Decrypt the session from the cookie\n  const cookie = (await cookies()).get('session')?.value\n  const session = await decrypt(cookie)\n\n  // 5. Redirect to /login if the user is not authenticated\n  if (isProtectedRoute && !session?.userId) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl))\n  }\n\n  // 6. Redirect to /dashboard if the user is authenticated\n  if (\n    isPublicRoute &&\n    session?.userId &&\n    !req.nextUrl.pathname.startsWith('/dashboard')\n  ) {\n    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))\n  }\n\n  return NextResponse.next()\n}\n\n// Routes Middleware should not run on\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Images with Fill in Next.js\nDESCRIPTION: This snippet shows how to use the `fill` prop to render a responsive image without knowing the aspect ratio. It requires the parent to have a relative position and allows for object-fit styles to adjust the image display.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page({ photoUrl }) {\n  return (\n    <div style={{ position: 'relative', width: '300px', height: '500px' }}>\n      <Image\n        src={photoUrl}\n        alt=\"Picture of the author\"\n        sizes=\"300px\"\n        fill\n        style={{\n          objectFit: 'contain',\n        }}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Login API Route in Next.js Pages Router (TypeScript)\nDESCRIPTION: This code snippet demonstrates an API route for handling login requests in Next.js pages directory using TypeScript. It extracts email and password from the request body, attempts to sign in the user using an authentication provider, and returns a success response upon successful authentication. It also handles potential authentication errors and returns appropriate error responses. It uses TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { signIn } from '@/auth'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const { email, password } = req.body\n    await signIn('credentials', { email, password })\n\n    res.status(200).json({ success: true })\n  } catch (error) {\n    if (error.type === 'CredentialsSignin') {\n      res.status(401).json({ error: 'Invalid credentials.' })\n    } else {\n      res.status(500).json({ error: 'Something went wrong.' })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Custom Headers in Next.js\nDESCRIPTION: This code snippet demonstrates how to set custom HTTP headers for specific paths in a Next.js application using the `headers` function in `next.config.js`. It defines a `source` path and an array of header objects with `key` and `value` properties. The `headers` function is asynchronous and returns an array of header configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/about',\n        headers: [\n          {\n            key: 'x-custom-header',\n            value: 'my custom header value',\n          },\n          {\n            key: 'x-another-custom-header',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Web Request API with User Agent in Next.js using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a middleware function in Next.js that utilizes a user agent helper to determine the device type (e.g., mobile, desktop) from the request. It modifies the request URL parameters based on the device type and uses NextResponse to rewrite the URL. Dependencies include 'next/server' for accessing NextRequest, NextResponse, and the userAgent function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/userAgent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n\n  // device.type can be: 'mobile', 'tablet', 'console', 'smarttv',\n  // 'wearable', 'embedded', or undefined (for desktop browsers)\n  const viewport = device.type || 'desktop'\n\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling form submissions with Server Actions in TypeScript\nDESCRIPTION: This example shows how to create a form that submits data to a Server Action, which processes the FormData object to extract field values in TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  async function createInvoice(formData: FormData) {\n    'use server'\n\n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n\n    // mutate data\n    // revalidate cache\n  }\n\n  return <form action={createInvoice}>...</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Zod - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use Zod for form validation in a Next.js API route using JavaScript. It defines a schema for validating the request body and parses the incoming data using the schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from 'zod'\n\nconst schema = z.object({\n  // ...\n})\n\nexport default async function handler(req, res) {\n  const parsed = schema.parse(req.body)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Inter Font in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to import the Inter font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It defines a variable font and assigns it to the `className` of the `html` element, ensuring the font is applied globally.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Request Handling in Next.js Middleware\nDESCRIPTION: This snippet demonstrates conditional request handling in middleware, applying different rewrites based on the request path. The example shows TypeScript implementation with type definitions for the request object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Background Image Using next/image in JavaScript\nDESCRIPTION: This example illustrates how to use the 'next/image' component to set an image as a background. The 'Background' component imports an image and sets it to fill the viewport with a 'cover' object fit style. This setup includes image quality settings and requires a layout supporting the 'fill' prop for correct display.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Background() {\n  return (\n    <Image\n      alt=\"Mountains\"\n      src={mountains}\n      placeholder=\"blur\"\n      quality={100}\n      fill\n      sizes=\"100vw\"\n      style={{\n        objectFit: 'cover',\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Check and Display Draft Mode Status in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to check and display the current Draft Mode status within a Next.js Server Component using TypeScript. It retrieves the status using `draftMode()` and renders a paragraph indicating whether Draft Mode is currently enabled or disabled.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport default async function Page() {\n  const { isEnabled } = await draftMode()\n  return (\n    <main>\n      <h1>My Blog Post</h1>\n      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Form Data in Server Action using Zod (JS)\nDESCRIPTION: This code snippet shows how to validate form fields within a Server Action using the Zod schema defined earlier. It parses the form data using `SignupFormSchema.safeParse`. If validation fails, it returns early with error messages; otherwise, it proceeds to call the authentication provider.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { SignupFormSchema } from '@/app/lib/definitions'\n\nexport async function signup(state, formData) {\n  // Validate form fields\n  const validatedFields = SignupFormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n\n  // If any form fields are invalid, return early\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Call the provider or db to create a user...\n}\n```\n\n----------------------------------------\n\nTITLE: Cached Data Fetching Utility with Server-Only Protection\nDESCRIPTION: Implementation of a data fetching utility using React cache and server-only package for optimized server-side data loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id: string) => {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id: string) => {\n  // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id) => {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for Server Actions in Next.js\nDESCRIPTION: This configuration example shows how to specify allowed origins for Server Actions in the Next.js config file. This is useful for applications with reverse proxies or multi-layered architectures to prevent CSRF attacks by explicitly defining trusted origins.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Web Vitals to External Systems\nDESCRIPTION: This example demonstrates sending web vital results to an external analytics endpoint using the useReportWebVitals hook. It utilizes navigator.sendBeacon or fetch for sending the data. Dependencies include network access to the specified endpoint.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a separate file for Server Actions in TypeScript\nDESCRIPTION: This snippet shows how to create a separate file with the 'use server' directive at the top to mark all exported functions as Server Actions in TypeScript, making them reusable in both Client and Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\n\nexport async function create() {}\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching in Next.js App Directory - TSX\nDESCRIPTION: This TypeScript snippet showcases asynchronous data fetching using the 'fetch' API in a Next.js 'app' directory. It fetches data with different caching strategies, illustrating replacements for 'getServerSideProps' and 'getStaticProps'. The caching options 'no-store' and 'force-cache' manage how responses are cached, enhancing performance and data freshness.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\\n  // This request should be cached until manually invalidated.\\n  // Similar to `getStaticProps`.\\n  // `force-cache` is the default and can be omitted.\\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\\n\\n  // This request should be refetched on every request.\\n  // Similar to `getServerSideProps`.\\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\\n\\n  // This request should be cached with a lifetime of 10 seconds.\\n  // Similar to `getStaticProps` with the `revalidate` option.\\n  const revalidatedData = await fetch(`https://...`, {\\n    next: { revalidate: 10 },\\n  })\\n\\n  return <div>...</div>\\n}\n```\n\n----------------------------------------\n\nTITLE: Using unstable_noStore in a Next.js Server Component\nDESCRIPTION: This JavaScript snippet demonstrates how to use the unstable_noStore function in a Next.js server component to prevent the component from being statically rendered and cached. The function is imported from the next/cache module, and it's used at the start of an async function, ServerComponent. This function requires the next package and a setup that involves database querying. No specific inputs are required, and the output depends on the database query results.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_noStore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default async function ServerComponent() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Fonts in Next.js App Router with JavaScript\nDESCRIPTION: Shows how to use local fonts in a Next.js application with the App Router using JavaScript. The font is loaded from a local file and applied to the entire application through the className property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects in Next.js using JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up URL redirects in Next.js using `next.config.js`. Redirects are defined in an async function using an array of objects with `source`, `destination`, and `permanent` properties. Additional properties such as `basePath`, `locale`, `has`, and `missing` can be used for more advanced redirect behaviors. Redirects are processed before other paths like pages and public files. Dependencies include a proper Next.js setup with the correct version supporting these configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Params in React Client Components - TypeScript\nDESCRIPTION: In a TypeScript React Client Component, utilize React's `use` function to read parameters which are provided as a promise. This is suitable for components that cannot be asynchronous. This code expects a promise resolving to an object containing a `slug` string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n\"use strict\";\n\nimport { use } from 'react';\n\nexport default function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = use(params);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Server-side Data Fetching with Custom Function in Next.js App Directory - JSX\nDESCRIPTION: This JavaScript snippet demonstrates colocating server-side data fetching inside a React component using a custom function in a Next.js 'app' directory. The 'fetch' API is used with 'no-store' cache setting to ensure fresh data on every request. This approach aligns with the transition towards server components, reducing JavaScript payloads to the client.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\\n\\n// This function can be named anything\\nasync function getProjects() {\\n  const res = await fetch(`https://...`, { cache: 'no-store' })\\n  const projects = await res.json()\\n\\n  return projects\\n}\\n\\nexport default async function Dashboard() {\\n  const projects = await getProjects()\\n\\n  return (\\n    <ul>\\n      {projects.map((project) => (\\n        <li key={project.id}>{project.name}</li>\\n      ))}\\n    </ul>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with Styled Components Registry in TypeScript\nDESCRIPTION: Demonstrates how to wrap the entire root layout of a Next.js application with the StyledComponentsRegistry to manage global styles efficiently.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Next.js Middleware with JavaScript\nDESCRIPTION: A JavaScript example of implementing middleware in Next.js that redirects requests to the '/home' path. The config object uses a matcher to apply the middleware only to paths matching '/about/:path*'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic MDX Import - TypeScript\nDESCRIPTION: This snippet shows how to dynamically import MDX files in a Next.js App Router page component using TypeScript.  It uses the `params` prop to determine which MDX file to load and then uses `import()` to dynamically load the MDX file. `generateStaticParams` is used for pre-rendering specific routes and `dynamicParams` is set to false to ensure that only routes defined in `generateStaticParams` are accessible.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const { default: Post } = await import(`@/content/${slug}.mdx`)\n\n  return <Post />\n}\n\nexport function generateStaticParams() {\n  return [{ slug: 'welcome' }, { slug: 'about' }]\n}\n\nexport const dynamicParams = false\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js configuration file\nDESCRIPTION: This code snippet shows how to create a `next.config.ts` file at the root of your project. It sets the output to 'export' for a Single-Page Application (SPA) and changes the build output directory to `build`. Removing `output: 'export'` will enable Next.js server features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_1\n\nLANGUAGE: next.config.ts\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA)\n  distDir: 'build', // Changes the build output directory to `build`\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Generating a Dynamic Web Manifest with JavaScript in Next.js\nDESCRIPTION: Demonstrates how to create a dynamic manifest.js file that generates a Web Manifest programmatically. This JavaScript implementation returns the same manifest object structure as the TypeScript version but without type definitions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/manifest.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function manifest() {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Parameters for Dynamic Routes in Next.js\nDESCRIPTION: Implements generateStaticParams to specify which dynamic routes should be statically generated at build time. This example fetches posts and maps them to route parameters for blog pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie in API Route - JavaScript\nDESCRIPTION: This snippet sets a session cookie within a Next.js API route. It encrypts the session data, serializes it into a cookie string using the `cookie` library, and sets the 'Set-Cookie' header in the response. The cookie is configured with HttpOnly, Secure (only in production), MaxAge, and Path attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serialize } from 'cookie'\nimport { encrypt } from '@/app/lib/session'\n\nexport default function handler(req, res) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n\n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with ORM - Next.js with JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch a post using an ORM (e.g., Drizzle ORM) wrapped in a cache function to optimize data retrieval, while also handling not found errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cache } from 'react'\nimport { db, posts, eq } from '@/lib/db' // Example with Drizzle ORM\nimport { notFound } from 'next/navigation'\n\nexport const getPost = cache(async (id) => {\n  const post = await db.query.posts.findFirst({\n    where: eq(posts.id, parseInt(id)),\n  })\n\n  if (!post) notFound()\n  return post\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Next.js Metrics\nDESCRIPTION: This code snippet demonstrates how to handle custom Next.js metrics such as hydration time, route change to render time, and render time using a switch statement. It uses the `reportWebVitals` function to access the metrics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'Next.js-hydration':\n      // handle hydration results\n      break\n    case 'Next.js-route-change-to-render':\n      // handle route-change to render results\n      break\n    case 'Next.js-render':\n      // handle render results\n      break\n    default:\n      break\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeInteractive Strategy (App Router, JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `beforeInteractive` strategy with the `Script` component in a Next.js application using the App Router. It loads a script before any Next.js code is executed and before page hydration. This strategy is suitable for critical scripts needed by the entire site and should be placed inside the root layout (`app/layout.js`).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Define Zod Schema for Signup Form Validation (TS)\nDESCRIPTION: This code snippet defines a Zod schema for validating signup form fields. It enforces constraints on name, email, and password, including minimum lengths, email format, and password complexity. The schema includes custom error messages for each validation rule.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { z } from 'zod'\n\nexport const SignupFormSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name must be at least 2 characters long.' })\n    .trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  password: z\n    .string()\n    .min(8, { message: 'Be at least 8 characters long' })\n    .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n    .regex(/[0-9]/, { message: 'Contain at least one number.' })\n    .regex(/[^a-zA-Z0-9]/, {\n      message: 'Contain at least one special character.',\n    })\n    .trim(),\n})\n\nexport type FormState =\n  | {\n      errors?: {\n        name?: string[]\n        email?: string[]\n        password?: string[]\n      }\n      message?: string\n    }\n  | undefined\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects with Middleware in Next.js using JavaScript\nDESCRIPTION: This code snippet demonstrates redirect handling in Next.js using JavaScript, where middleware reads redirect data from a database and performs the necessary redirections based on the request path. It utilizes the `NextResponse.redirect` method to perform redirections. Required dependencies include Next.js and a database client. The expected behavior is to dynamically redirect users based on predefined redirect entries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { get } from '@vercel/edge-config'\n\nexport async function middleware(request) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n\n  if (redirectData) {\n    const redirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n\n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with App Router in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement Incremental Static Regeneration using the App Router in Next.js. It includes revalidation settings, dynamic parameters handling, and static path generation for a blog post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n\n// Next.js will invalidate the cache when a\n// request comes in, at most once every 60 seconds.\nexport const revalidate = 60\n\n// We'll prerender only the params from `generateStaticParams` at build time.\n// If a request comes in for a path that hasn't been generated,\n// Next.js will server-render the page on-demand.\nexport const dynamicParams = true // or false, to 404 on unknown paths\n\nexport async function generateStaticParams() {\n  const posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n  return posts.map((post) => ({\n    id: String(post.id),\n  }))\n}\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const post: Post = await fetch(`https://api.vercel.app/blog/${id}`).then(\n    (res) => res.json()\n  )\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect in Next.js Client Component (JavaScript)\nDESCRIPTION: This example shows how to use the `redirect` function in a Next.js Client Component using JavaScript. It checks if the current pathname starts with `/admin` and doesn't include `/login`. If both conditions are met, it redirects the user to `/admin/login`. When using `redirect` in a Client Component on initial page load during SSR, it will perform a server-side redirect.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { redirect, usePathname } from 'next/navigation'\n\nexport function ClientRedirect() {\n  const pathname = usePathname()\n\n  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {\n    redirect('/admin/login')\n  }\n\n  return <div>Login Page</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using router.prefetch() to Programmatically Prefetch Routes in Next.js\nDESCRIPTION: This snippet shows how to use the router.prefetch() method from the useRouter hook to programmatically prefetch routes, which can improve performance by loading data before the user navigates to the route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from 'next/router';\n\nconst router = useRouter();\nrouter.prefetch('/route');\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Roboto Font with Weight Specification (App Router)\nDESCRIPTION: This code snippet demonstrates how to import the Roboto font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It specifies the font weight since it's not a variable font and assigns it to the `className` of the `html` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidate Path in Next.js Server Action\nDESCRIPTION: This code snippet demonstrates using `revalidatePath` inside a Next.js Server Action. It imports `revalidatePath` from `next/cache`, defines an asynchronous function `submit`, and calls `revalidatePath('/')` after a form submission. This ensures the cache is cleared after the `submitForm` promise resolves.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport default async function submit() {\n  await submitForm()\n  revalidatePath('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Open Graph Image using TypeScript in Next.js\nDESCRIPTION: This snippet shows how to dynamically generate an Open Graph image using TypeScript and the ImageResponse API in Next.js. It includes image metadata and font loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { readFile } from 'node:fs/promises'\nimport { join } from 'node:path'\n\n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image() {\n  // Font loading, process.cwd() is Next.js project directory\n  const interSemiBold = await readFile(\n    join(process.cwd(), 'assets/Inter-SemiBold.ttf')\n  )\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Preview Data in getStaticProps - JavaScript\nDESCRIPTION: This code snippet shows how to conditionally fetch data based on the preview mode. It checks `context.preview` and modifies the API endpoint URL accordingly.  The example shows a fetch call to an external API. It's a simplified demonstration; the actual implementation depends on the specific headless CMS or data source. The `context` object is provided by Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  // If context.preview is true, append \"/preview\" to the API endpoint\n  // to request draft data instead of published data. This will vary\n  // based on which headless CMS you're using.\n  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect with Server Action in Next.js (JavaScript)\nDESCRIPTION: This example demonstrates how to use the `redirect` function within a Server Action in Next.js using JavaScript. It defines a `navigate` function that takes form data and redirects the user to a specific post based on the provided ID. This demonstrates how to use redirect within server actions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function navigate(data) {\n  redirect(`/posts/${data.get('id')}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control in Next.js API Route (TypeScript)\nDESCRIPTION: This code demonstrates setting the `Cache-Control` header in a Next.js API route using TypeScript. The `setHeader` method is used on the `res` object to set the `Cache-Control` header to `s-maxage=86400`, which caches the response for one day. The handler function takes `NextApiRequest` and `NextApiResponse` as arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in App Router\nDESCRIPTION: This TypeScript/JavaScript snippet shows how to access environment variables within a Next.js Server Component using the App Router.  It demonstrates reading a value from `process.env` and assumes a `connection` function is defined.  Accessing environment variables this way ensures that the values are evaluated at runtime, allowing for different values in different environments when using Docker.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Component() {\n  await connection()\n  // cookies, headers, and other Dynamic APIs\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Script Component\nDESCRIPTION: This code snippet demonstrates how to use the `next/script` component to load a third-party script in a Next.js application. It imports the `Script` component from `next/script` and uses it to load a script from a specified URL. This approach is recommended for optimal performance and compatibility with React Suspense and streaming server-rendering. The `src` prop is required to specify the script's URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-tags-in-head-component.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect in Next.js Server Component (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `redirect` function within a Next.js Server Component written in TypeScript. It fetches team data and redirects to the login page if the data is not found. The `redirect` function terminates the rendering of the route segment by throwing a `NEXT_REDIRECT` error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({\n  params,\n}: {  params: Promise<{ id: string }>}) {\n  const { id } = await params\n  const team = await fetchTeam(id)\n\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Icons using ImageResponse in Next.js (TypeScript)\nDESCRIPTION: Demonstrates how to programmatically generate an icon using the ImageResponse API in TypeScript. The example creates a simple icon with the letter 'A' on a black background, including proper metadata configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\n// Image metadata\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n\n// Image generation\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported icons size metadata\n      // config to also set the ImageResponse's width and height.\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions-Policy header (JavaScript)\nDESCRIPTION: This code shows how to configure the `Permissions-Policy` header, which allows you to control which features and APIs can be used in the browser.  This example disables camera, microphone, geolocation, and browsing topics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'Permissions-Policy',\n  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'\n}\n```\n\n----------------------------------------\n\nTITLE: Signup Action in Next.js App Router (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a new user account within a Next.js application router. It includes steps for validating form fields, preparing data for database insertion, hashing the password using bcrypt, inserting the user data into a database, and handling potential errors. It uses TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function signup(state: FormState, formData: FormData) {\n  // 1. Validate form fields\n  // ...\n\n  // 2. Prepare data for insertion into database\n  const { name, email, password } = validatedFields.data\n  // e.g. Hash the user's password before storing it\n  const hashedPassword = await bcrypt.hash(password, 10)\n\n  // 3. Insert the user into the database or call an Auth Library's API\n  const data = await db\n    .insert(users)\n    .values({\n      name,\n      email,\n      password: hashedPassword,\n    })\n    .returning({ id: users.id })\n\n  const user = data[0]\n\n  if (!user) {\n    return {\n      message: 'An error occurred while creating your account.',\n    }\n  }\n\n  // TODO:\n  // 4. Create user session\n  // 5. Redirect user\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Asynchronous Request Access in Next.js Route Handler\nDESCRIPTION: Example showing correct implementation using await connection() before accessing request headers in a Next.js GET route handler\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function GET(request) {\n  await connection()\n  const requestHeaders = request.headers\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry NodeSDK (JavaScript)\nDESCRIPTION: Initializes the OpenTelemetry `NodeSDK` in `instrumentation.node.js`. This code configures the SDK with a resource containing the service name ('next-app') and a simple span processor that exports traces using OTLP over HTTP. The SDK is then started to begin collecting telemetry data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\nimport { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [ATTR_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Display Validation Errors with useActionState (JSX)\nDESCRIPTION: This code snippet demonstrates how to use React's `useActionState` hook to display validation errors in a signup form. It integrates with the `signup` Server Action and shows error messages for each invalid field.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { signup } from '@/app/actions/auth'\nimport { useActionState } from 'react'\n\nexport default function SignupForm() {\n  const [state, action, pending] = useActionState(signup, undefined)\n\n  return (\n    <form action={action}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      {state?.errors?.name && <p>{state.errors.name}</p>}\n\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\n      </div>\n      {state?.errors?.email && <p>{state.errors.email}</p>}\n\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      {state?.errors?.password && (\n        <div>\n          <p>Password must:</p>\n          <ul>\n            {state.errors.password.map((error) => (\n              <li key={error}>- {error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <button disabled={pending} type=\"submit\">\n        Sign Up\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Database Queries with unstable_cache in Next.js\nDESCRIPTION: Demonstrates using unstable_cache to cache database queries with tags for revalidation. Includes cache duration and tag configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_cache } from 'next/cache'\nimport { db, posts } from '@/lib/db'\n\nconst getCachedPosts = unstable_cache(\n  async () => {\n    return await db.select().from(posts)\n  },\n  ['posts'],\n  { revalidate: 3600, tags: ['posts'] }\n)\n\nexport default async function Page() {\n  const posts = getCachedPosts()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic Form Submission in Next.js\nDESCRIPTION: Shows how to handle programmatic form submission using keyboard shortcuts (Cmd/Ctrl + Enter) in a React component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport function Entry() {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n\n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting in getStaticProps - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `redirect` object within `getStaticProps` to redirect users to a different page if data fetching fails. It shows setting the `destination` and `permanent` properties. The `statusCode` property is an alternative to `permanent` for older HTTP clients.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n        // statusCode: 301\n      },\n    }\n  }\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for Optimistic Auth Checks - TypeScript\nDESCRIPTION: This TypeScript code implements middleware in Next.js for optimistic authentication checks.  It imports `NextRequest` and `NextResponse` from `next/server`, `decrypt` function for session decryption, and `cookies` from `next/headers`. The middleware function checks if the requested path is protected or public, decrypts the session from the cookie, and redirects users to `/login` if they are not authenticated on a protected route or to `/dashboard` if they are authenticated on a public route. The `config.matcher` defines the routes the middleware should run on.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\nimport { decrypt } from '@/app/lib/session'\nimport { cookies } from 'next/headers'\n\n// 1. Specify protected and public routes\nconst protectedRoutes = ['/dashboard']\nconst publicRoutes = ['/login', '/signup', '/']\n\nexport default async function middleware(req: NextRequest) {\n  // 2. Check if the current route is protected or public\n  const path = req.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.includes(path)\n  const isPublicRoute = publicRoutes.includes(path)\n\n  // 3. Decrypt the session from the cookie\n  const cookie = (await cookies()).get('session')?.value\n  const session = await decrypt(cookie)\n\n  // 4. Redirect to /login if the user is not authenticated\n  if (isProtectedRoute && !session?.userId) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl))\n  }\n\n  // 5. Redirect to /dashboard if the user is authenticated\n  if (\n    isPublicRoute &&\n    session?.userId &&\n    !req.nextUrl.pathname.startsWith('/dashboard')\n  ) {\n    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))\n  }\n\n  return NextResponse.next()\n}\n\n// Routes Middleware should not run on\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Roboto Font with Weight Specification (App Router)\nDESCRIPTION: This code snippet demonstrates how to import the Roboto font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It specifies the font weight since it's not a variable font and assigns it to the `className` of the `html` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie - TSX\nDESCRIPTION: This snippet demonstrates how to set a cookie in a Next.js application using the `cookies` function within a Server Action or Route Handler. It shows different methods to specify cookie attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function create(data) {\n  const cookieStore = await cookies()\n\n  cookieStore.set('name', 'lee')\n  // or\n  cookieStore.set('name', 'lee', { secure: true })\n  // or\n  cookieStore.set({\n    name: 'name',\n    value: 'lee',\n    httpOnly: true,\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component for Video Embedding - JSX\nDESCRIPTION: This Server Component demonstrates fetching a video source URL and rendering an iframe to embed the video. It's designed to be used within a Next.js application and leverages asynchronous functions to retrieve the video source.  The example highlights the use of Server Components in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function VideoComponent() {\n  const src = await getVideoSrc()\n\n  return <iframe src={src} allowFullScreen />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Client-side State in TypeScript\nDESCRIPTION: Example of a Client Component using useState hook for managing click count state. The component demonstrates the use of the 'use client' directive and client-side interactivity.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/02-client-components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Groups Layout in Javascript\nDESCRIPTION: This code snippet demonstrates how to create tab groups using Parallel Routes and a layout within a slot. It defines a layout component with navigation links to different subpages within the `@analytics` slot.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Meta Tags in Next.js _app.js\nDESCRIPTION: Demonstrates the correct implementation of viewport meta tags using next/head in the Next.js _app.js file. This approach ensures proper deduplication of meta tags and prevents unexpected behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-document-viewport-meta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <meta name=\"viewport\" content=\"viewport-fit=cover\" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Cookies in Next.js Middleware (JS)\nDESCRIPTION: This snippet demonstrates how to access, modify, and set cookies in a Next.js middleware function using the `NextRequest` and `NextResponse` objects. It shows how to get, set, delete, and check for the existence of cookies on both incoming requests and outgoing responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request\n  // Getting cookies from the request using the `RequestCookies` API\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]\n\n  request.cookies.has('nextjs') // => true\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs') // => false\n\n  // Setting cookies on the response using the `ResponseCookies` API\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }\n  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component with SWR for Data Fetching\nDESCRIPTION: This code illustrates using a Client Component with SWR for client-side data fetching. It imports `useSWR` and defines a `fetcher` function. The `useSWR` hook fetches data from an API endpoint and handles loading and error states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport useSWR from 'swr'\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json())\n\nexport default function Page() {\n  const { data, error } = useSWR(\n    `https://jsonplaceholder.typicode.com/posts/1`,\n    fetcher\n  )\n  if (error) return 'Failed to load'\n  if (!data) return 'Loading...'\n\n  return data.title\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout in Next.js\nDESCRIPTION: Implements a root layout component that wraps child pages. Root layouts are required and must contain html and body tags to define the document structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Unauthorized Page - Alternative TSX\nDESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It serves as an alternative implementation using TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Login from '@/app/components/Login'\n\nexport default function UnauthorizedPage() {\n  return (\n    <main>\n      <h1>401 - Unauthorized</h1>\n      <p>Please log in to access this page.</p>\n      <Login />\n    </main>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Next.js API Route (TypeScript)\nDESCRIPTION: This code snippet demonstrates deleting a cookie within a Next.js API route using TypeScript.  It sets the 'Set-Cookie' header on the response object using the `setHeader` method. Setting `Max-Age=0` effectively deletes the cookie. It also sets the HTTP status to 200 and sends a message confirming the deletion. Requires Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')\n  res.status(200).send('Cookie has been deleted.')\n}\n```\n\n----------------------------------------\n\nTITLE: NextJS Page Component with Preload Implementation\nDESCRIPTION: Page component demonstrating the usage of preload pattern with conditional rendering based on availability check.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  preload(id)\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? <Item id={id} /> : null\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({ params }) {\n  const { id } = await params\n  preload(id)\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? <Item id={id} /> : null\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Component with ErrorBoundary in Next.js\nDESCRIPTION: This snippet shows how to integrate the ErrorBoundary component in a Next.js application by wrapping the main `Component` prop in the `pages/_app.js` file. Prior import of the ErrorBoundary is necessary. This setup ensures that any unexpected errors in the app are caught and handled gracefully, preventing the entire app from crashing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/06-configuring/12-error-handling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import the ErrorBoundary component\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    // Wrap the Component prop with ErrorBoundary component\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos with Next.js\nDESCRIPTION: This snippet shows how to embed a YouTube video in a Next.js page. It uses the `YouTubeEmbed` component from `@next/third-parties/google`, which utilizes `lite-youtube-embed` for faster loading. The `videoid` prop is required, and additional parameters like height and video player parameters can be specified.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter App Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures Twitter app metadata for a Next.js application, including the card type, title, description, site ID, creator, creator ID, image with alt text, and app details (name, ID, and URL) for iPhone, iPad, and Google Play. It showcases how to create a complex structure for twitter metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  twitter: {\n    card: 'app',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: {\n      url: 'https://nextjs.org/og.png',\n      alt: 'Next.js Logo',\n    },\n    app: {\n      name: 'twitter_app',\n      id: {\n        iphone: 'twitter_app://iphone',\n        ipad: 'twitter_app://ipad',\n        googleplay: 'twitter_app://googleplay',\n      },\n      url: {\n        iphone: 'https://iphone_url',\n        ipad: 'https://ipad_url',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Loader in next.config.js\nDESCRIPTION: This example shows how to define a custom image loader in next.config.js for using a cloud provider outside of Next.js's built-in optimization API. This custom loader must export a default function that returns a formatted URL for the image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n\n```\n\nLANGUAGE: js\nCODE:\n```\n'use client'\n\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Blog Post Page in Next.js\nDESCRIPTION: Implements a page component for individual blog posts using dynamic routing. The [slug] folder creates a dynamic route segment that can handle different blog post URLs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction generateStaticParams() {}\n\nexport default function Page() {\n  return <h1>Hello, Blog Post Page!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction generateStaticParams() {}\n\nexport default function Page() {\n  return <h1>Hello, Blog Post Page!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with next/font (App Router)\nDESCRIPTION: This code snippet demonstrates how to use CSS variables with `next/font` in a Next.js application using the app router. It defines CSS variables for both the Inter and Roboto Mono fonts and applies them to the `html` element for global styling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Third-Party Components in Client Components\nDESCRIPTION: Example showing how to properly use third-party components that rely on client-side features within a Client Component marked with the 'use client' directive.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n\nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n\nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n\n      {/*  Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Next.js Metrics Handling in Pages\nDESCRIPTION: This snippet demonstrates handling custom Next.js metrics such as hydration and render times. Handlers for each metric type are included using a switch statement. Metrics are processed with the useReportWebVitals hook. These metrics require browsers supporting the User Timing API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'Next.js-hydration':\n        // handle hydration results\n        break\n      case 'Next.js-route-change-to-render':\n        // handle route-change to render results\n        break\n      case 'Next.js-render':\n        // handle render results\n        break\n      default:\n        break\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in API Route - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set a cookie in a Next.js API route using TypeScript. It uses the setHeader method on the response object to set the Set-Cookie header.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')\n  res.status(200).send('Cookie has been set.')\n}\n```\n\n----------------------------------------\n\nTITLE: Server Action for Cache Revalidation in Next.js\nDESCRIPTION: Server action implementation showing how to invalidate cached data using revalidateTag function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost() {\n  // Invalidate all data tagged with 'posts' in the cache\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Data Fetching - Next.js with JavaScript\nDESCRIPTION: Similar to its TypeScript counterpart, this JavaScript snippet fetches artist and album data in parallel, using Promise.all to reduce the loading time for both.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport Albums from './albums'\n\nasync function getArtist(username) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n\nasync function getAlbums(username) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n\nexport default async function Page({ params }) {\n  const { username } = await params\n  const artistData = getArtist(username)\n  const albumsData = getAlbums(username)\n\n  // Initiate both requests in parallel\n  const [artist, albums] = await Promise.all([artistData, albumsData])\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Albums list={albums} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 with CSS Variables for Next.js Fonts\nDESCRIPTION: Shows how to configure Tailwind CSS v4 to use font CSS variables defined by Next.js fonts. Uses a global CSS file with inline theme configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n@import \"tailwindcss\";\n\n@theme inline {\n  --font-sans: var(--font-inter);\n  --font-mono: var(--font-roboto-mono);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Metrics with useReportWebVitals Hook\nDESCRIPTION: This code snippet shows how to handle different types of performance metrics using the useReportWebVitals hook in Next.js pages. It includes conditional handling for specific web vital metrics like FCP and LCP. The snippet demonstrates using switch-case to manage the metrics. Requires next/web-vitals.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Bundle All Packages in next.config.js (Pages Router)\nDESCRIPTION: Configures the `bundlePagesRouterDependencies` option in `next.config.js` to automatically bundle all packages, which is the default behavior in the App Router. This is applicable for the Pages Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  bundlePagesRouterDependencies: true,\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Generating a Sitemap Programmatically in TypeScript\nDESCRIPTION: TypeScript implementation for programmatically generating a sitemap by exporting a default function that returns an array of URLs. Uses the MetadataRoute.Sitemap type from Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Layouts in Next.js (Javascript)\nDESCRIPTION: This code defines a nested layout component for the `/dashboard` route using JavaScript. It exports a functional component that accepts a `children` prop, which will be populated with content from the route segments inside the `dashboard` directory. The layout wraps its children within a `<section>` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unauthorized Redirect in Dashboard (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to redirect unauthorized users by using the unauthorized function in a Dashboard page component. It involves verifying user session using verifySession, and when not authenticated, invoking unauthorized to render a 401 error page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\n\nexport default async function DashboardPage() {\n  const session = await verifySession()\n\n  if (!session) {\n    unauthorized()\n  }\n\n  return (\n    <main>\n      <h1>Welcome to the Dashboard</h1>\n      <p>Hi, {session.user.name}.</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration (TypeScript)\nDESCRIPTION: TypeScript example of configuring metadata for SEO in the root layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in TypeScript\nDESCRIPTION: This code creates a root layout file (`layout.tsx`) within the `app` directory, essential for Next.js App Router applications. It wraps all pages. It includes the basic HTML structure, meta tags, and a root div where the page content is rendered.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_2\n\nLANGUAGE: app/layout.tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters with useRouter in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to access dynamic route parameters in a Next.js page component. It imports the useRouter hook from next/router, then retrieves and displays the 'slug' parameter from the URL query object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/02-dynamic-routes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n  return <p>Post: {router.query.slug}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side navigation with `useRouter` hook in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `useRouter` hook from `next/navigation` in a Client Component to navigate to a different route.  It imports `useRouter`, initializes it, and uses the `push` method to navigate to `/dashboard` when a button is clicked.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Responsive Image using next/image in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and render a responsive image using the 'next/image' component in a Next.js application. The 'Responsive' component contains an image that automatically sets its width and height by importing, and it uses inline styles to ensure full-width display. This example requires Next.js and the next/image component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Responsive() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <Image\n        alt=\"Mountains\"\n        // Importing an image will\n        // automatically set the width and height\n        src={mountains}\n        sizes=\"100vw\"\n        // Make the image display full width\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Props from getStaticProps (JavaScript)\nDESCRIPTION: This code snippet shows how to return a `props` object from `getStaticProps`. The `props` object contains data that will be passed to the page component. In this example, a simple message is passed as a prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getStaticProps(context) {\n  return {\n    props: { message: `Next.js is awesome` }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 with Next.js Font Variables\nDESCRIPTION: Demonstrates how to configure Tailwind CSS v3 to use font CSS variables from Next.js. The configuration extends the theme to use the font variables for sans and mono font families.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_29\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-inter)'],\n        mono: ['var(--font-roboto-mono)'],\n      },\n    },\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFormStatus for Search Button in Next.js TypeScript\nDESCRIPTION: Utilizing the 'useFormStatus' hook in TypeScript, this snippet defines a 'SearchButton' component to provide immediate feedback on the form's pending state during search queries in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use client'\nimport { useFormStatus } from 'react-dom'\n\nexport default function SearchButton() {\n  const status = useFormStatus()\n  return (\n    <button type=\"submit\">{status.pending ? 'Searching...' : 'Search'}</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side navigation with `useRouter` hook in Next.js (Pages Router)\nDESCRIPTION: This code snippet demonstrates how to use the `useRouter` hook from `next/router` in a component to navigate to a different route. It imports `useRouter`, initializes it, and uses the `push` method to navigate to `/dashboard` when a button is clicked. This example is for the Pages Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Time Updates in Next.js Client Components\nDESCRIPTION: Demonstrates how to implement reactive time updates using Client Components with useState and useLayoutEffect hooks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Timestamp() {\n  return 'current time: ' + new Date().toString()\n}\n\nexport default async function Page() {\n  return (\n    <main>\n      ...\n      <Timestamp />\n    </main>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState, useLayoutEffect } from 'react'\n\nexport function Timestamp() {\n  const [time, setTime] = useState(null)\n  useLayoutEffect(() => {\n    // You can determine when and how often to update\n    // the time here. In this example we update it only once\n    setTime(new Date().toString())\n  }, [])\n  if (time) {\n    return 'current time: ' + time\n  }\n  return null\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Timestamp } from './client-components'\n\nexport default async function Page() {\n  return (\n    <main>\n      ...\n      <Timestamp />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom App with TypeScript for Layouts in Next.js\nDESCRIPTION: TypeScript configuration for a custom App component that supports per-page layouts. It defines custom types for pages with layouts and extends the AppProps type to support the getLayout function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactElement, ReactNode } from 'react'\nimport type { NextPage } from 'next'\nimport type { AppProps } from 'next/app'\n\nexport type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {\n  getLayout?: (page: ReactElement) => ReactNode\n}\n\ntype AppPropsWithLayout = AppProps & {\n  Component: NextPageWithLayout\n}\n\nexport default function MyApp({ Component, pageProps }: AppPropsWithLayout) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n\n  return getLayout(<Component {...pageProps} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally importing NodeSDK for OpenTelemetry (TypeScript)\nDESCRIPTION: Conditionally imports the `instrumentation.node.ts` file based on the `NEXT_RUNTIME` environment variable. This ensures that `NodeSDK`, which is not compatible with the edge runtime, is only imported when the application is running in a Node.js environment. This approach is used in `instrumentation.ts`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.ts')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Route Segments in Next.js Route Handlers\nDESCRIPTION: Example of handling dynamic route segments in a Route Handler. This demonstrates how to access dynamic parameters in both TypeScript and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ slug: string }> }\n) {\n  const { slug } = await params // 'a', 'b', or 'c'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request, { params }) {\n  const { slug } = await params // 'a', 'b', or 'c'\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeInteractive Strategy (Pages Router, JSX)\nDESCRIPTION: This code snippet demonstrates using the `beforeInteractive` strategy with the `Script` component in a Next.js application using the Pages Router. It loads a script before any Next.js code is executed and before page hydration. This strategy is suitable for critical scripts needed by the entire site and should be placed inside the `Document` Component (`pages/_document.js`).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\nimport Script from 'next/script'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Post Data with Memoized Cache - Next.js with TypeScript\nDESCRIPTION: This snippet fetches a blog post by its ID using the fetch API and memoizes the request using cache: 'force-cache'. It also handles cases where the post does not exist by triggering a not found error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { notFound } from 'next/navigation'\n\ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n\nasync function getPost(id: string) {\n  const res = await fetch(`https://api.vercel.app/blog/${id}`, {\n    cache: 'force-cache',\n  })\n  const post: Post = await res.json()\n  if (!post) notFound()\n  return post\n}\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://api.vercel.app/blog', {\n    cache: 'force-cache',\n  }).then((res) => res.json())\n\n  return posts.map((post: Post) => ({\n    id: String(post.id),\n  }))\n}\n\nexport async function generateMetadata({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const post = await getPost(id)\n\n  return {\n    title: post.title,\n  }\n}\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const post = await getPost(id)\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </article>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Definition (JavaScript)\nDESCRIPTION: This code snippet defines a root layout component in JavaScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Utility Function (App Router)\nDESCRIPTION: This code snippet demonstrates how to import and apply a font defined in a utility function to the root layout in a Next.js application using the app router. It imports the `inter` font and assigns its `className` to the `html` element for global application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inter } from './fonts'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closures with Server Actions in Next.js JSX\nDESCRIPTION: This example shows the JavaScript version of creating a Server Action inside a React component using a closure. It captures the publishVersion variable at render time and makes it available when the action is called, with Next.js handling the encryption of this data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const publishVersion = await getLatestVersion();\n\n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n\n  return (\n    <form>\n      <button formAction={publish}>Publish</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Resources with ReactDOM in React Client Component (TSX)\nDESCRIPTION: This code snippet shows how to use ReactDOM to preload, preconnect, and prefetch DNS resources in a React client component. It imports ReactDOM from 'react-dom' and uses the preload, preconnect, and prefetchDNS methods to hint to the browser that these resources are needed. This should improve initial page load performance by loading resources early.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_68\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport ReactDOM from 'react-dom'\n\nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Server Functions in Server Components with TypeScript\nDESCRIPTION: Demonstrates how to define an inline Server Function directly within a Server Component in TypeScript. The function is marked with the 'use server' directive inside the component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Page() {\n  // Server Action\n  async function createPost(formData: FormData) {\n    'use server'\n    // ...\n  }\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component with Navigation Blocking in Next.js\nDESCRIPTION: This snippet defines a form component that uses the NavigationBlocker context to set the blocking state when the form is changed or submitted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useNavigationBlocker } from '../contexts/navigation-blocker'\n\nexport default function Form() {\n  const { setIsBlocked } = useNavigationBlocker()\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault()\n        setIsBlocked(false)\n      }}\n      onChange={() => setIsBlocked(true)}\n    >\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Save</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useNavigationBlocker } from '../contexts/navigation-blocker'\n\nexport default function Form() {\n  const { setIsBlocked } = useNavigationBlocker()\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault()\n        setIsBlocked(false)\n      }}\n      onChange={() => setIsBlocked(true)}\n    >\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Save</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Image with Next.js Image Component\nDESCRIPTION: This code snippet demonstrates how to display a static image served from the `public` directory using the `next/image` component. It defines two React components, `Avatar` and `AvatarOfMe`, to illustrate how to reference images within the `public/avatars` directory and set attributes such as `alt`, `width`, and `height`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/11-static-assets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport function Avatar({ id, alt }) {\n  return <Image src={`/avatars/${id}.png`} alt={alt} width=\"64\" height=\"64\" />\n}\n\nexport function AvatarOfMe() {\n  return <Avatar id=\"me\" alt=\"A portrait of me\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking notFound() in Next.js\nDESCRIPTION: This snippet demonstrates how to use the notFound function to handle user fetching errors in a Next.js application. If the user is not found, it calls the notFound() function to trigger a 404 error response. The fetchUser function handles fetching user data from an external API, and the Profile component orchestrates the logic and error handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/not-found.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { notFound } from 'next/navigation'\n\nasync function fetchUser(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const { id } = await params\n  const user = await fetchUser(id)\n\n  if (!user) {\n    notFound()\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies - TSX\nDESCRIPTION: This snippet demonstrates how to read a specific cookie in a Next.js page component using the `cookies` function. The cookie is retrieved asynchronously, showing the current theme from the cookie store.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side navigation with `useRouter` hook in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `useRouter` hook from `next/navigation` in a Client Component to navigate to a different route.  It imports `useRouter`, initializes it, and uses the `push` method to navigate to `/dashboard` when a button is clicked.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie - JS\nDESCRIPTION: This snippet shows how to set a cookie in a Next.js application through a Server Action or Route Handler using the `cookies` function. Various ways to define cookie parameters are provided.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function create(data) {\n  const cookieStore = await cookies()\n\n  cookieStore.set('name', 'lee')\n  // or\n  cookieStore.set('name', 'lee', { secure: true })\n  // or\n  cookieStore.set({\n    name: 'name',\n    value: 'lee',\n    httpOnly: true,\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Suspense Implementation for Content Streaming in TypeScript\nDESCRIPTION: Example of manually implementing Suspense boundaries for components in a Next.js page. Demonstrates how to wrap components that perform asynchronous actions with fallback UI to enable streaming.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n\nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in NextResponse - TypeScript\nDESCRIPTION: Sets a cookie with the specified name and value in the response. It retrieves the incoming request context to determine the appropriate response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// Set a cookie to hide the banner\nresponse.cookies.set('show-banner', 'false')\n// Response will have a `Set-Cookie:show-banner=false;path=/home` header\nreturn response\n```\n\n----------------------------------------\n\nTITLE: Generating a Dynamic Web Manifest with TypeScript in Next.js\nDESCRIPTION: Shows how to create a dynamic manifest.ts file that generates a Web Manifest programmatically. This approach allows for dynamic generation of the manifest data using TypeScript with proper type checking via the MetadataRoute.Manifest type.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/manifest.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function manifest(): MetadataRoute.Manifest {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe API Routes with TypeScript\nDESCRIPTION: Demonstrates how to add TypeScript type safety to API routes using NextApiRequest and NextApiResponse types, including response data typing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Parallel Routes\nDESCRIPTION: Configures the main layout to render parallel routes (auth slot) alongside main content, enabling modal integration\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next\\/link'\n\nexport default function Layout({\n  auth,\n  children,\n}: {\n  auth: React.ReactNode\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <nav>\n        <Link href=\"\\/login\">Open modal<\\/Link>\n      <\\/nav>\n      <div>{auth}<\\/div>\n      <div>{children}<\\/div>\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next\\/link'\n\nexport default function Layout({ auth, children }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"\\/login\">Open modal<\\/Link>\n      <\\/nav>\n      <div>{auth}<\\/div>\n      <div>{children}<\\/div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Layout - TypeScript\nDESCRIPTION: This code snippet demonstrates how to load a third-party script within a Next.js layout component using TypeScript.  The `Script` component from `next/script` is used to embed the script. The script will be loaded once when the layout is accessed. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes (App Router - TSX)\nDESCRIPTION: This TypeScript code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"export default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\"\n```\n\n----------------------------------------\n\nTITLE: Next.js Client Component with Server Action (TSX)\nDESCRIPTION: This snippet defines a simple Client Component in Next.js that receives a Server Action as a prop and triggers it on a button click. It showcases how a client-side event can invoke a server-side function, enabling interactive features with server-side logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nexport default function ClientComponent({\n  action,\n}: {\n  action: () => Promise<void>\n}) {\n  return <button onClick={action}>Update</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with SWR in Next.js\nDESCRIPTION: This snippet illustrates how to use the SWR data-fetching library in a Next.js page. It manages loading and error states simply, providing a cleaner approach to client-side data fetching while improving performance through caching and revalidation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/05-client-side-rendering.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nexport function Page() {\n  const { data, error, isLoading } = useSWR(\n    'https://api.example.com/data',\n    fetcher\n  )\n\n  if (error) return <p>Failed to load.</p>\n  if (isLoading) return <p>Loading...</p>\n\n  return <p>Your Data: {data}</p>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Clearing Preview Mode Cookies - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to clear the preview mode cookies using the `clearPreviewData` function in a Next.js API route. It defines an API route handler that calls `res.clearPreviewData({})` to remove the preview cookies.  This is often accessed through an API route. This ensures the user exits preview mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.clearPreviewData({})\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in Next.js\nDESCRIPTION: Demonstrates how to access URL search parameters in a Next.js page component. The searchParams prop is a promise containing key-value pairs from the URL's query string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const filters = (await searchParams).filters\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ searchParams }) {\n  const filters = (await searchParams).filters\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - TSX\nDESCRIPTION: This snippet demonstrates how to retrieve all cookies with a matching name in a Next.js page component. If no name is specified, it returns all available cookies from the cookie store.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  return cookieStore.getAll().map((cookie) => (\n    <div key={cookie.name}>\n      <p>Name: {cookie.name}</p>\n      <p>Value: {cookie.value}</p>\n    </div>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRouter with TypeScript in Next.js (TSX)\nDESCRIPTION: This snippet demonstrates how to use `withRouter` with a class component in TypeScript. It defines interfaces for the component's props, including a `router` prop of type `NextRouter`, ensuring type safety when accessing the router object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { withRouter, NextRouter } from 'next/router'\n\ninterface WithRouterProps {\n  router: NextRouter\n}\n\ninterface MyComponentProps extends WithRouterProps {}\n\nclass MyComponent extends React.Component<MyComponentProps> {\n  render() {\n    return <p>{this.props.router.pathname}</p>\n  }\n}\n\nexport default withRouter(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Advanced URL Redirection in NextResponse - TypeScript\nDESCRIPTION: Demonstrates how to build a redirect URL from an incoming request, appending query parameters based on request context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// Given an incoming request...\nconst loginUrl = new URL('/login', request.url)\n// Add ?from=/incoming-url to the /login URL\nloginUrl.searchParams.set('from', request.nextUrl.pathname)\n// And redirect to the new URL\nreturn NextResponse.redirect(loginUrl)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document for Stylesheet Inclusion in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a custom Document component in Next.js to properly include stylesheet links. It uses the functional component syntax, which is preferred for future compatibility with React Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-stylesheets-in-head-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head>\n        <link rel=\"stylesheet\" href=\"...\" />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Production Browser Source Maps in Next.js Configuration\nDESCRIPTION: This code snippet shows how to enable browser source map generation for production builds in Next.js by setting the 'productionBrowserSourceMaps' option to true in the next.config.js file. When enabled, source maps will be output in the same directory as the JavaScript files and automatically served by Next.js when requested.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/productionBrowserSourceMaps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  productionBrowserSourceMaps: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage in Next.js App Router (JavaScript)\nDESCRIPTION: Example of importing and using the Next.js Link component in the App Router with JavaScript. The Link component enables client-side navigation between routes with prefetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Web Vitals Handling in TypeScript for Next.js\nDESCRIPTION: A TypeScript implementation of the WebVitals component, utilizing the useReportWebVitals hook to handle core web vital metrics. The use of TypeScript necessitates familiarity with tsx syntax and requires the next/web-vitals package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie in NextResponse - TypeScript\nDESCRIPTION: Removes a cookie from the response based on the provided cookie name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// Returns true for deleted, false is nothing is deleted\nresponse.cookies.delete('experiments')\n```\n\n----------------------------------------\n\nTITLE: Database Querying with ORM in Next.js\nDESCRIPTION: Shows how to fetch data using a database ORM in a server component. Demonstrates direct database access pattern without caching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db, posts } from '@/lib/db'\n\nexport default async function Page() {\n  const allPosts = await db.select().from(posts)\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { db, posts } from '@/lib/db'\n\nexport default async function Page() {\n  const allPosts = await db.select().from(posts)\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSON-LD to a Next.js Page (TSX)\nDESCRIPTION: This code snippet shows how to add JSON-LD structured data to a Next.js page using a `<script>` tag with `dangerouslySetInnerHTML`. It defines a JSON-LD object representing a product and injects it into the page, which helps search engines understand the content. This example is written in Typescript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { id } = await params\n  const product = await getProduct(id)\n\n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n\n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a dynamic route segment in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access a dynamic route segment (slug) within a Next.js page component using TypeScript. It retrieves the slug from the params prop and renders it within a div element. The params prop is typed as a Promise resolving to an object with a slug property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  return <div>My Post: {slug}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FormData in Next.js - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to read FormData from a request in a POST route. It retrieves specific fields from the FormData and returns them as a JSON response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses in Next.js - TypeScript\nDESCRIPTION: This snippet shows how to implement a streaming response using OpenAI's API in a POST request. It demonstrates building a stream from messages passed in the request body.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from '@ai-sdk/openai'\nimport { StreamingTextResponse, streamText } from 'ai'\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json()\n  const result = await streamText({\n    model: openai('gpt-4-turbo'),\n    messages,\n  })\n\n  return new StreamingTextResponse(result.toAIStream())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions for Push Notifications - TypeScript\nDESCRIPTION: This code defines server actions for subscribing and unsubscribing users, and sending push notifications using the web-push library. It uses environment variables for VAPID keys. In a production environment, the subscription data should be stored in a database.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\n\nimport webpush from 'web-push'\n\nwebpush.setVapidDetails(\n  '<mailto:your-email@example.com>',\n  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,\n  process.env.VAPID_PRIVATE_KEY!\n)\n\nlet subscription: PushSubscription | null = null\n\nexport async function subscribeUser(sub: PushSubscription) {\n  subscription = sub\n  // In a production environment, you would want to store the subscription in a database\n  // For example: await db.subscriptions.create({ data: sub })\n  return { success: true }\n}\n\nexport async function unsubscribeUser() {\n  subscription = null\n  // In a production environment, you would want to remove the subscription from the database\n  // For example: await db.subscriptions.delete({ where: { ... } })\n  return { success: true }\n}\n\nexport async function sendNotification(message: string) {\n  if (!subscription) {\n    throw new Error('No subscription available')\n  }\n\n  try {\n    await webpush.sendNotification(\n      subscription,\n      JSON.stringify({\n        title: 'Test Notification',\n        body: message,\n        icon: '/icon.png',\n      })\n    )\n    return { success: true }\n  } catch (error) {\n    console.error('Error sending push notification:', error)\n    return { success: false, error: 'Failed to send notification' }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing MDX into a page - JavaScript\nDESCRIPTION: This snippet demonstrates how to import and render an MDX file within a Next.js page component, written in JavaScript. It imports the MDX file (Welcome) and renders it within the page's return statement. This allows the MDX content to be displayed on the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Welcome from '@/markdown/welcome.mdx'\n\nexport default function Page() {\n  return <Welcome />\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Tagged Cache Entries in Next.js\nDESCRIPTION: Uses the revalidateTag function to purge cache entries associated with a specific tag. This can be used in Route Handlers or Server Actions to selectively invalidate cached data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Revalidate entries with a specific tag\nrevalidateTag('a')\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Maps with onReady in Next.js (App Router) - JSX\nDESCRIPTION: This code demonstrates how to initialize a Google Maps embed using the `onReady` property of the `next/script` component within a Next.js application using the App Router. It uses a ref to target a div element for the map and re-instantiates the map on every component mount.  The `onReady` function is called after the script has loaded.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auth Interrupts in Next.js - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to enable the experimental authInterrupts option in a Next.js application. By setting authInterrupts to true in the experimental section of next.config.ts, developers can utilize the forbidden and unauthorized APIs. This snippet requires the presence of a Next.js application and modifies the NextConfig object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/authInterrupts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { NextConfig } from 'next'\\n\\nconst nextConfig: NextConfig = {\\n  experimental: {\\n    authInterrupts: true,\\n  },\\n}\\n\\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Updating Search Parameters in Next.js Client Components (TypeScript)\nDESCRIPTION: A TypeScript client component that demonstrates how to update URL search parameters using both the useRouter hook and Link component. It includes a utility function to merge existing search parameters with new ones, preserving previous query parameters while updating or adding new ones.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams.toString())\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage in Next.js Pages Router (TypeScript)\nDESCRIPTION: Example of importing and using the Next.js Link component in the Pages Router with TypeScript. The Link component enables client-side navigation between routes with prefetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static/Dynamic Metadata (JSX)\nDESCRIPTION: This snippet demonstrates how to define static metadata using the `metadata` object and dynamic metadata using the `generateMetadata` function in a JavaScript Next.js application.  It shows the basic structure for exporting either a static `metadata` object or an asynchronous `generateMetadata` function that accepts parameters. The function's return value is an object that defines the page's metadata, such as the title.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// either Static metadata\nexport const metadata = {\n  title: '...',\n}\n\n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Paths with getStaticPaths in Next.js\nDESCRIPTION: This code snippet implements the getStaticPaths function to specify which dynamic paths should be pre-rendered at build time based on the available data, allowing for SEO-friendly routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n\nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n\nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  return { props: { post } }\n}\n\nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Strict Mode in Next.js\nDESCRIPTION: This code snippet shows how to enable React's Strict Mode in a Next.js application by adding the reactStrictMode configuration to next.config.js. This helps identify potential problems during development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactStrictMode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reactStrictMode: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Dashboard Layout Definition (JavaScript)\nDESCRIPTION: This code snippet defines a dashboard layout component in JavaScript. It accepts a `children` prop, which represents the content to be rendered within the layout. The layout is a simple section element that wraps the children.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a global script in App Router with next/script\nDESCRIPTION: This code snippet demonstrates how to correctly add a global script with the `beforeInteractive` strategy using the `next/script` component within the `app/layout.jsx` file when using the App Router in Next.js. It ensures the script is loaded before the page becomes interactive. It imports the `Script` component from `next/script` and places it within the `RootLayout` component. The `src` attribute specifies the script URL and `strategy` attribute is set to `beforeInteractive`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-before-interactive-script-outside-document.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script\n        src=\"https://example.com/script.js\"\n        strategy=\"beforeInteractive\"\n      />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Metadata in Next.js Layout File (JavaScript)\nDESCRIPTION: Shows how to define static metadata in a Next.js layout file using JavaScript. This adds a title and description to a blog route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'My Blog',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Maps with Next.js\nDESCRIPTION: The GoogleMapsEmbed component enables the embedding of Google Maps in a Next.js application page. It uses the apiKey for authentication and supports parameters such as height, width, mode, and query (q) for specifying the location to display. By default, it employs lazy loading via the loading attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/third-parties/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\\n\\nexport default function Page() {\\n  return (\\n    <GoogleMapsEmbed\\n      apiKey=\\\"XYZ\\\"\\n      height={200}\\n      width=\\\"100%\\\"\\n      mode=\\\"place\\\"\\n      q=\\\"Brooklyn+Bridge,New+York,NY\\\"\\n    />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Data Fetching in Draft Mode\nDESCRIPTION: This code snippet demonstrates how to conditionally fetch data based on whether Draft Mode is enabled. It imports `draftMode` from `next/headers` and fetches data from a draft or production endpoint based on the `isEnabled` property. This allows previewing draft content without affecting the live site.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// page that fetches data\nimport { draftMode } from 'next/headers'\n\nasync function getData() {\n  const { isEnabled } = await draftMode()\n\n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n\n  const res = await fetch(url)\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const { title, desc } = await getData()\n\n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Fallback with SWRConfig in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure SWR's fallback data using the SWRConfig component in a Next.js application. The getUser() function, assumed to be a server-side function, is used to pre-populate the SWR cache with user data for the '/api/user' key. This allows client components to immediately access the data without an initial loading state.  The component reading this data will suspend.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SWRConfig } from 'swr'\nimport { getUser } from './user' // some server-side function\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <SWRConfig\n      value={{\n        fallback: {\n          // We do NOT await getUser() here\n          // Only components that read this data will suspend\n          '/api/user': getUser(),\n        },\n      }}\n    >\n      {children}\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Cookie with NextRequest\nDESCRIPTION: This snippet shows how to retrieve the value of a cookie using the `get` method of the `request.cookies` object in Next.js. It retrieves the value of the cookie named 'show-banner'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\n// { name: 'show-banner', value: 'false', Path: '/home' }\nrequest.cookies.get('show-banner')\n```\n\n----------------------------------------\n\nTITLE: Login Form in Next.js Pages Router (JavaScript)\nDESCRIPTION: This code snippet shows a login form implemented in the Next.js pages directory using JavaScript. It handles form submission, retrieves email and password from the form data, and sends a POST request to an API route for authentication. Upon successful authentication, it redirects the user to the profile page. It uses JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function LoginPage() {\n  const router = useRouter()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email')\n    const password = formData.get('password')\n\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (response.ok) {\n      router.push('/profile')\n    } else {\n      // Handle errors\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Data Fetching in Draft Mode\nDESCRIPTION: This code snippet demonstrates how to conditionally fetch data based on whether Draft Mode is enabled. It imports `draftMode` from `next/headers` and fetches data from a draft or production endpoint based on the `isEnabled` property. This allows previewing draft content without affecting the live site.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// page that fetches data\nimport { draftMode } from 'next/headers'\n\nasync function getData() {\n  const { isEnabled } = await draftMode()\n\n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n\n  const res = await fetch(url)\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const { title, desc } = await getData()\n\n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Session Data (Jose Library) - TypeScript\nDESCRIPTION: This snippet encrypts session data using the Jose library. It imports necessary modules from 'jose' and 'server-only'. It defines a secret key from the environment variable, encodes it and uses it to sign the payload with a JWT. It also defines the SessionPayload interface.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\nimport { SignJWT, jwtVerify } from 'jose'\nimport { SessionPayload } from '@/app/lib/definitions'\n\nconst secretKey = process.env.SESSION_SECRET\nconst encodedKey = new TextEncoder().encode(secretKey)\n\nexport async function encrypt(payload: SessionPayload) {\n  return new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing permanentRedirect in Server Component\nDESCRIPTION: Example of using permanentRedirect to redirect users when a resource is not found, specifically in a team profile page server component with dynamic routing\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/permanentRedirect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { permanentRedirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const { id } = await params\n  const team = await fetchTeam(id)\n  if (!team) {\n    permanentRedirect('/login')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Title Template Object (JSX)\nDESCRIPTION: This snippet shows how to define a title using a template object in a JavaScript Next.js application.  It allows for specifying a default title, a template for child segments, and an absolute title.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    default: '...', // Changed from ... to '...' to adhere to valid JSON. Should be a string.\n    template: '...', // Changed from ... to '...' to adhere to valid JSON. Should be a string.\n    absolute: '...', // Changed from ... to '...' to adhere to valid JSON. Should be a string.\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining permanentRedirect Function Parameters\nDESCRIPTION: Function signature for permanentRedirect with path and type parameters, used to perform permanent redirects in Next.js applications across different contexts\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/permanentRedirect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npermanentRedirect(path, type)\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Redirect Implementation in JavaScript\nDESCRIPTION: This snippet shows the JavaScript version of the middleware implementation that redirects requests to '/home' and specifies which paths the middleware applies to using the matcher configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Route Module Configuration\nDESCRIPTION: Configures and instantiates the AppRouteRouteModule with route definition parameters and userland code\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        filename: 'VAR_DEFINITION_FILENAME',\n        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'\n    },\n    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n    nextConfigOutput,\n    userland\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos using Next.js\nDESCRIPTION: The YouTubeEmbed component from '@next/third-parties/google' is used to load and display YouTube videos efficiently. It leverages lite-youtube-embed for faster loading and requires the videoid parameter to specify the YouTube video. The component supports custom height specifications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/third-parties/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { YouTubeEmbed } from '@next/third-parties/google'\\n\\nexport default function Page() {\\n  return <YouTubeEmbed videoid=\\\"ogfYd705cRs\\\" height={400} />\\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidate All Data with Next.js\nDESCRIPTION: This example demonstrates how to revalidate all data by calling `revalidatePath` with the root path ('/') and the 'layout' type. This approach purges the Client-side Router Cache and triggers revalidation of the Data Cache on the subsequent page visit.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\n\nrevalidatePath('/', 'layout')\n```\n\n----------------------------------------\n\nTITLE: Sending Google Tag Manager events (App Router - JSX)\nDESCRIPTION: This code snippet illustrates how to send events to Google Tag Manager using the `sendGTMEvent` function from `@next/third-parties/google` within an App Router component. It defines a button that, when clicked, dispatches a custom event 'buttonClicked' with the value 'xyz'. The `'use client'` directive indicates that this is a client-side component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { sendGTMEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Not Found Component Implementation in Next.js (TypeScript)\nDESCRIPTION: A basic implementation of the not-found.js component in TypeScript that renders a custom 404 Not Found page with a link to return to the home page. Next.js will return a 200 HTTP status code for streamed responses and 404 for non-streamed responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Secret and Enabling Draft Mode\nDESCRIPTION: This route handler validates the provided secret token and slug, fetches the corresponding post from the headless CMS, enables Draft Mode, and redirects to the fetched post's slug. It uses `next/headers` for `draftMode` and `next/navigation` for `redirect`. Error handling is included to return a 401 status for invalid tokens or slugs.  Assumes the existence of a `getPostBySlug` function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n\n  // Check the secret and next parameters\n  // This secret should only be known to this Route Handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  const draft = await draftMode()\n  draft.enable()\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'use server' Directive Inline with TypeScript\nDESCRIPTION: Example of using the 'use server' directive inline at the top of a function to mark it as a Server Function. This demonstrates defining a server function directly within a page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { db } from '@/lib/db' // Your database client\n\nexport default function UserList() {\n  async function fetchUsers() {\n    'use server'\n    const users = await db.user.findMany()\n    return users\n  }\n\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses in Next.js - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the handling of a streaming response with OpenAI's API, processing messages sent in a POST request and returning a stream response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openai } from '@ai-sdk/openai'\nimport { StreamingTextResponse, streamText } from 'ai'\n\nexport async function POST(req) {\n  const { messages } = await req.json()\n  const result = await streamText({\n    model: openai('gpt-4-turbo'),\n    messages,\n  })\n\n  return new StreamingTextResponse(result.toAIStream())\n}\n```\n\n----------------------------------------\n\nTITLE: On-demand Revalidation with revalidatePath in Next.js (JavaScript)\nDESCRIPTION: This example shows on-demand revalidation using the revalidatePath function in a Server Action with JavaScript. It invalidates the cache for the /posts route when a new post is created.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  // Invalidate the /posts route in the cache\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Processing FormData in Server Functions with TypeScript\nDESCRIPTION: Shows how to process FormData in a TypeScript Server Function. This example extracts title and content fields from the FormData object for database operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nexport async function createPost(formData: FormData) {\n  const title = formData.get('title')\n  const content = formData.get('content')\n\n  // Update data\n  // Revalidate cache\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps with TypeScript in Next.js\nDESCRIPTION: This example demonstrates how to fetch data from GitHub API using getServerSideProps in a TypeScript Next.js page. It defines type interfaces and uses them to properly type the props and response data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Path Matcher Configuration for Next.js Middleware\nDESCRIPTION: This snippet demonstrates how to configure middleware to match multiple paths using array syntax in the config object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Document with renderPage in Next.js\nDESCRIPTION: An advanced implementation of a custom Document that uses getInitialProps and customizes the renderPage method. This pattern is useful for CSS-in-JS libraries that need server-side rendering support.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/06-custom-document.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Document, {\n  Html,\n  Head,\n  Main,\n  NextScript,\n  DocumentContext,\n  DocumentInitialProps,\n} from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(\n    ctx: DocumentContext\n  ): Promise<DocumentInitialProps> {\n    const originalRenderPage = ctx.renderPage\n\n    // Run the React rendering logic synchronously\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // Useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // Useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n\n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const originalRenderPage = ctx.renderPage\n\n    // Run the React rendering logic synchronously\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // Useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // Useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n\n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\n----------------------------------------\n\nTITLE: Defining Static Metadata (TSX)\nDESCRIPTION: This snippet shows how to define static metadata, specifically the title and description, using the `metadata` object in a TypeScript Next.js application. It demonstrates exporting a `Metadata` object from a `layout.tsx` or `page.tsx` file to configure static metadata for the route segment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring maxDuration in Next.js (JS)\nDESCRIPTION: This code snippet demonstrates how to configure the `maxDuration` option in a Next.js layout, page, or route using JavaScript. The `maxDuration` configuration sets the maximum execution time for server-side logic within the route segment, preventing long-running processes and improving resource management. It requires Next.js version 13.4.10 or higher.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport const maxDuration = 5\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Routing using window.history.pushState (JavaScript)\nDESCRIPTION: This snippet shows how to implement shallow routing in a Next.js application using `window.history.pushState` with JavaScript. It uses the `useSearchParams` hook to get the current search parameters, updates the 'sort' parameter with the specified `sortOrder`, and then uses `window.history.pushState` to update the URL without triggering a full page reload.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder) {\n    const urlSearchParams = new URLSearchParams(searchParams.toString())\n    urlSearchParams.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${urlSearchParams.toString()}`)\n  }\n\n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies - JS\nDESCRIPTION: This snippet illustrates reading a specific cookie in a Next.js page component using the `cookies` function. The asynchronous operation retrieves the theme from the cookie store.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Route Parameters in Next.js Route Handlers\nDESCRIPTION: Shows how to access dynamic route parameters in a Route Handler using the context.params object. The example demonstrates how to extract the 'team' parameter from a dynamic route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ team: string }> }\n) {\n  const { team } = await params\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request, { params }) {\n  const { team } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme Provider Component in TypeScript\nDESCRIPTION: This snippet defines a ThemeProvider component that utilizes the createContext function to provide the theme context. The component is marked as a Client Component with the 'use client' directive, enabling it to be used in Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { createContext } from 'react'\n\nexport const ThemeContext = createContext({})\n\nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic API Route in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a simple API route that returns a JSON response with a status code of 200. It uses TypeScript for type safety.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Analytics in Pages Router (JSX)\nDESCRIPTION: This code snippet shows how to integrate Google Analytics into a Next.js application using the Pages Router. It uses the `GoogleAnalytics` component from `@next/third-parties/google` and includes it within the custom `_app.js` component. The Google Analytics measurement ID is passed via the `gaId` prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using revalidateTag in a Server Action - JavaScript\nDESCRIPTION: This snippet illustrates the usage of revalidateTag within a server action in Next.js using JavaScript. It serves the same purpose as its TypeScript counterpart by invoking the revalidateTag function after a new post is added.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Filtering with Search Parameters in Next.js\nDESCRIPTION: Demonstrates how to implement filtering, pagination, and sorting using the searchParams prop in a Next.js page component. The example extracts and provides default values for query parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const { page = '1', sort = 'asc', query = '' } = await searchParams\n\n  return (\n    <div>\n      <h1>Product Listing</h1>\n      <p>Search query: {query}</p>\n      <p>Current page: {page}</p>\n      <p>Sort order: {sort}</p>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ searchParams }) {\n  const { page = '1', sort = 'asc', query = '' } = await searchParams\n\n  return (\n    <div>\n      <h1>Product Listing</h1>\n      <p>Search query: {query}</p>\n      <p>Current page: {page}</p>\n      <p>Sort order: {sort}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Environment Variable - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to access environment variables at runtime in a Next.js App Router component. Accessing env variables during dynamic rendering opts into dynamic rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Component() {\n  await connection()\n  // cookies, headers, and other Dynamic APIs\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Back and Forward Navigation in Next.js\nDESCRIPTION: This snippet illustrates the default behavior of maintaining scroll position and reusing route segments during back and forward navigation in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const handleScroll = () => {\n    // Logic to remember and maintain scroll position\n  };\n  window.addEventListener('scroll', handleScroll);\n  return () => {\n    window.removeEventListener('scroll', handleScroll);\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Form Submission - JavaScript\nDESCRIPTION: This code snippet demonstrates how to redirect the user to a different route after a successful form submission in a Next.js API route using JavaScript. It calls an addPost function, and redirects to a specific post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  const id = await addPost()\n  res.redirect(307, `/post/${id}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sitemaps in TypeScript with Next.js\nDESCRIPTION: This TypeScript snippet demonstrates how to use the generateSitemaps function to generate multiple sitemaps based on product ID ranges. The snippet fetches products and returns sitemap data with URLs and last modification dates. Dependencies include a function to fetch product details and a constant for base URL definitions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-sitemaps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission Errors - TypeScript\nDESCRIPTION: This code snippet demonstrates how to handle form submission errors in a Next.js component using TypeScript. It uses React state to track loading and error states and displays an error message to the user if the submission fails.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState, FormEvent } from 'react'\n\nexport default function Page() {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setIsLoading(true)\n    setError(null) // Clear previous errors when a new request starts\n\n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to submit the data. Please try again.')\n      }\n\n      // Handle response if necessary\n      const data = await response.json()\n      // ...\n    } catch (error) {\n      // Capture the error message to display to the user\n      setError(error.message)\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" name=\"name\" />\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission Errors - JavaScript\nDESCRIPTION: This code snippet demonstrates how to handle form submission errors in a Next.js component using JavaScript. It uses React state to track loading and error states and displays an error message to the user if the submission fails.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react'\n\nexport default function Page() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  async function onSubmit(event) {\n    event.preventDefault()\n    setIsLoading(true)\n    setError(null) // Clear previous errors when a new request starts\n\n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to submit the data. Please try again.')\n      }\n\n      // Handle response if necessary\n      const data = await response.json()\n      // ...\n    } catch (error) {\n      // Capture the error message to display to the user\n      setError(error.message)\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" name=\"name\" />\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Button Component in TypeScript with CSS Module\nDESCRIPTION: This TypeScript snippet defines a 'BaseButton' component that imports styles from 'base-button.module.css'. The component uses the imported styles to apply a primary button class.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from './base-button.module.css'\n\nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Typing JSON-LD with TypeScript in Next.js\nDESCRIPTION: This code snippet demonstrates how to use the `schema-dts` package to type your JSON-LD data in a Next.js application using TypeScript. It defines a `Product` type from `schema-dts` and uses it to ensure the JSON-LD object conforms to the expected schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Product, WithContext } from 'schema-dts'\n\nconst jsonLd: WithContext<Product> = {\n  '@context': 'https://schema.org',\n  '@type': 'Product',\n  name: 'Next.js Sticker',\n  image: 'https://nextjs.org/imgs/sticker.png',\n  description: 'Dynamic at the speed of static.',\n}\n```\n\n----------------------------------------\n\nTITLE: Using server-only Package to Mark Server-Only Code\nDESCRIPTION: Example of importing the server-only package in a module to mark it as server-only code, which will generate build-time errors if imported in client components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\n\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Loading Component with next/dynamic\nDESCRIPTION: This code snippet demonstrates how to add a custom loading component while a dynamically imported component is loading.  The `loading` property in `next/dynamic` accepts a function that returns a React component to be displayed while the module is loading. This improves the user experience by providing visual feedback during loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport dynamic from 'next/dynamic'\n\nconst WithCustomLoading = dynamic(\n  () => import('../components/WithCustomLoading'),\n  {\n    loading: () => <p>Loading...</p>,\n  }\n)\n\nexport default function Page() {\n  return (\n    <div>\n      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}\n      <WithCustomLoading />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching in Next.js App Directory - JSX\nDESCRIPTION: This JavaScript snippet showcases asynchronous data fetching using the 'fetch' API in a Next.js 'app' directory. It fetches data with different caching strategies, illustrating replacements for 'getServerSideProps' and 'getStaticProps'. The caching options 'no-store' and 'force-cache' manage how responses are cached, enhancing performance and data freshness.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\\n  // This request should be cached until manually invalidated.\\n  // Similar to `getStaticProps`.\\n  // `force-cache` is the default and can be omitted.\\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\\n\\n  // This request should be refetched on every request.\\n  // Similar to `getServerSideProps`.\\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\\n\\n  // This request should be cached with a lifetime of 10 seconds.\\n  // Similar to `getStaticProps` with the `revalidate` option.\\n  const revalidatedData = await fetch(`https://...`, {\\n    next: { revalidate: 10 },\\n  })\\n\\n  return <div>...</div>\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a global script in Pages Router with next/script\nDESCRIPTION: This code snippet shows how to add a global script using the `next/script` component with the `beforeInteractive` strategy within the `pages/_document.js` file when using the Pages Router in Next.js. It ensures the script is loaded before the page becomes interactive. It imports necessary components from `next/document` and `next/script`, and places the `Script` component within the `Document` component's render method, specifically before the closing `</body>` tag. The `src` attribute specifies the script URL and `strategy` attribute is set to `beforeInteractive`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-before-interactive-script-outside-document.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\nimport Script from 'next/script'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        ></Script>\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Form State Management with useActionState in Next.js\nDESCRIPTION: Implementation of form state management using useActionState hook for handling form submissions and displaying error messages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction, pending] = useActionState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\">{state?.message}</p>\n      <button disabled={pending}>Sign up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cache Configuration in JSX Component\nDESCRIPTION: This JSX snippet demonstrates the use of a custom cache profile, 'blog', within a Next.js component, employing the unstable_cacheLife function from 'next/cache'. It uses the 'use cache' directive and fetch API to load data, highlighting the integration of custom cache settings in runtime components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport async function getCachedData() {\n  'use cache'\n  cacheLife('blog')\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader (JavaScript)\nDESCRIPTION: This code defines a custom image loader function for Next.js. It constructs a URL for Cloudinary based on the provided image source, width, and quality parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n```\n\n----------------------------------------\n\nTITLE: Template Title Metadata (TSX)\nDESCRIPTION: This snippet illustrates using `title.template` to add a prefix or suffix to titles defined in child route segments in a TypeScript Next.js application. It requires a `title.default` to be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n    default: 'Acme', // a default is required when creating a template\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'About',\n}\n\n// Output: <title>About | Acme</title>\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Root Layout - JavaScript\nDESCRIPTION: This code snippet shows how to load a third-party script in the root layout of a Next.js application using JavaScript. The script will load on every route. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Time-based Revalidation with App Router in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates time-based revalidation for a blog posts list page using the App Router in Next.js. It sets a revalidation time of 1 hour and fetches the latest blog posts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n\nexport const revalidate = 3600 // invalidate every hour\n\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts: Post[] = await data.json()\n  return (\n    <main>\n      <h1>Blog Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Options in Next.js - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to configure the fetch function with specific options such as cache control. It provides an example of setting the cache policy with the 'force-cache' or 'no-store' options, enabling customization of the caching behavior for resources fetched from a server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfetch(`https://...`, { cache: 'force-cache' | 'no-store' })\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Environment Variable - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to access environment variables at runtime within a Next.js App Router component. Accessing env variables during dynamic rendering opts into dynamic rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Component() {\n  await connection()\n  // cookies, headers, and other Dynamic APIs\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component with overrideSrc Prop in JSX\nDESCRIPTION: This code snippet shows how to override the generated src attribute of the <Image> component using the overrideSrc prop, allowing for control over the src attribute for SEO purposes. The expected input is the custom source path for overriding, and the output is an <img> tag reflecting the overridden src.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"/me.jpg\" overrideSrc=\"/override.jpg\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<img\n  srcset=\n    \"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/override.jpg\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Handling CORS in Next.js Middleware (TS)\nDESCRIPTION: This snippet illustrates how to implement CORS (Cross-Origin Resource Sharing) handling in Next.js middleware. It checks the origin of the request, determines if it's allowed based on a predefined list, and sets the appropriate CORS headers for both preflight and simple requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n\nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n\nexport function middleware(request: NextRequest) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n\n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n\n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n\n  // Handle simple requests\n  const response = NextResponse.next()\n\n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n\n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n\n  return response\n}\n\nexport const config = {\n  matcher: '/api/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Next.js Middleware with TypeScript\nDESCRIPTION: A TypeScript example of implementing middleware in Next.js that redirects requests to the '/home' path. The config object uses a matcher to apply the middleware only to paths matching '/about/:path*'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in API Route - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set a cookie in a Next.js API route using JavaScript. It uses the setHeader method on the response object to set the Set-Cookie header.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')\n  res.status(200).send('Cookie has been set.')\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Weights and Styles for Roboto Font\nDESCRIPTION: This code snippet demonstrates how to specify multiple weights and styles for the Roboto font when importing it from `next/font/google`. It uses an array to define multiple weights and styles, allowing for more flexible font usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst roboto = Roboto({\n  weight: ['400', '700'],\n  style: ['normal', 'italic'],\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n----------------------------------------\n\nTITLE: React Form Component with Error State\nDESCRIPTION: Client-side form component using useActionState hook to handle and display server action errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createPost } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Form() {\n  const [state, formAction, pending] = useActionState(createPost, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"title\">Title</label>\n      <input type=\"text\" id=\"title\" name=\"title\" required />\n      <label htmlFor=\"content\">Content</label>\n      <textarea id=\"content\" name=\"content\" required />\n      {state?.message && <p aria-live=\"polite\">{state.message}</p>}\n      <button disabled={pending}>Create Post</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createPost } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Form() {\n  const [state, formAction, pending] = useActionState(createPost, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"title\">Title</label>\n      <input type=\"text\" id=\"title\" name=\"title\" required />\n      <label htmlFor=\"content\">Content</label>\n      <textarea id=\"content\" name=\"content\" required />\n      {state?.message && <p aria-live=\"polite\">{state.message}</p>}\n      <button disabled={pending}>Create Post</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Import Button with path alias - TypeScript\nDESCRIPTION: This snippet demonstrates importing a component using a custom module alias defined in `tsconfig.json` or `jsconfig.json`. The `paths` option allows creating aliases, making imports more readable and abstracting away the underlying file structure. It assumes an alias `@` is defined to represent a specific directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Button from \"@/components/button\";\n```\n\n----------------------------------------\n\nTITLE: Sending Web Vitals Results to External Systems\nDESCRIPTION: This code snippet shows how to send Web Vitals results to an external analytics endpoint using `navigator.sendBeacon` (if available) or `fetch` with the `keepalive` option. It stringifies the metric data as JSON and sends it as a POST request.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout with Nav Links - JavaScript\nDESCRIPTION: This JavaScript snippet represents the same layout component as the TypeScript version. It also incorporates the NavLinks component and renders the provided children within the main tag, structured in an HTML layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavLinks } from '@/app/ui/nav-links'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavLinks />\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Keep-Alive in Next.js Configuration\nDESCRIPTION: This code snippet shows how to disable HTTP Keep-Alive for all server-side fetch() calls in a Next.js application by setting the httpAgentOptions in the next.config.js file. It requires Node.js version compatibility and aims to prevent persistent connections, which is useful in certain scenarios such as optimizing resource usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/httpAgentOptions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  httpAgentOptions: {\n    keepAlive: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Path Matching in Next.js Redirects\nDESCRIPTION: This snippet demonstrates how to apply regex to paths for redirects in Next.js, allowing paths to be matched based on specific patterns. The use of regex enables more control over which paths trigger the redirect.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/post/:slug(\\\\d{1,})',\n        destination: '/news/:slug',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching data with getStaticProps (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `getStaticProps` in a Next.js page component to fetch data from an external API (GitHub) during build time. It uses TypeScript for type safety. The fetched data, specifically the repository information, is passed as props to the page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Opt-out Packages from Bundling (Pages Router)\nDESCRIPTION: Configures the `serverExternalPackages` option in `next.config.js` to prevent specific packages from being automatically bundled when `bundlePagesRouterDependencies` is enabled. This allows for excluding certain packages in Pages Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Automatically bundle external packages in the Pages Router:\n  bundlePagesRouterDependencies: true,\n  // Opt specific packages out of bundling for both App and Pages Router:\n  serverExternalPackages: ['package-name'],\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Loading External Libraries Dynamically\nDESCRIPTION: This code snippet demonstrates how to dynamically load an external library (fuse.js) using the `import()` function. The library is only loaded when the user interacts with the search input. This approach reduces the initial bundle size.  The code uses `useState` to manage the search results.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n\nexport default function Page() {\n  const [results, setResults] = useState()\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n\n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: API Route for On-demand Revalidation in Next.js Pages\nDESCRIPTION: API route implementation for secure on-demand page revalidation with token authentication and error handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  try {\n    await res.revalidate('/posts/1')\n    return res.json({ revalidated: true })\n  } catch (err) {\n    return res.status(500).send('Error revalidating')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom App (_app.tsx) in Next.js Pages Router with Typescript\nDESCRIPTION: This TypeScript code defines a custom App component in a Next.js application using the Pages Router.  It allows you to wrap the entire application with a global layout or provider. It receives `Component` and `pageProps` as props, which are then passed to the rendered component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icons Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures the icons metadata for a Next.js application, including the main icon, shortcut icon, Apple touch icon, and other custom icons. It shows how to specify the URLs for different icon types within the `icons` property of the `metadata` export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  icons: {\n    icon: '/icon.png',\n    shortcut: '/shortcut-icon.png',\n    apple: '/apple-icon.png',\n    other: {\n      rel: 'apple-touch-icon-precomposed',\n      url: '/apple-touch-icon-precomposed.png',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Server Action in a Client Component (TypeScript)\nDESCRIPTION: This snippet shows how to import and use a Server Action within a client component in Next.js using TypeScript. The `create` function, which is defined as a Server Action, is imported and called when the button is clicked. This allows client components to trigger server-side logic directly without the need for explicit API calls.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { create } from './actions'\n\nexport function Button() {\n  return <button onClick={() => create()}>Create</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PPR in a JavaScript Page Component\nDESCRIPTION: Example of a JavaScript page that uses Partial Prerendering by enabling the experimental_ppr flag and wrapping dynamic content with Suspense boundaries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent, Fallback } from \"@/app/ui\"\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Router Promises and ESLint in Next.js (JSX)\nDESCRIPTION: This snippet demonstrates how to handle Promises returned by `router.push` within a `useEffect` hook, specifically addressing the `no-floating-promises` ESLint rule. It presents three solutions: disabling the rule for a line, using `void` to ignore the Promise, and using an `async` function with `await`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n\nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n\n  useEffect(() => {\n    // disable the linting on the next line - This is the cleanest solution\n    // eslint-disable-next-line no-floating-promises\n    router.push('/login')\n\n    // void the Promise returned by router.push\n    if (!(user || loading)) {\n      void router.push('/login')\n    }\n    // or use an async function, await the Promise, then void the function call\n    async function handleRouteChange() {\n      if (!(user || loading)) {\n        await router.push('/login')\n      }\n    }\n    void handleRouteChange()\n  }, [user, loading])\n\n  return <p>Redirecting...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Interoperable PostCSS Configuration (JavaScript)\nDESCRIPTION: This JavaScript configuration file for PostCSS uses the interoperable object-based format. This allows it to be used by other tools that aren't Next.js. It includes `postcss-flexbugs-fixes` and `postcss-preset-env` with Autoprefixer settings.  Requires `postcss-flexbugs-fixes` and `postcss-preset-env` as installed dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    'postcss-flexbugs-fixes': {},\n    'postcss-preset-env': {\n      autoprefixer: {\n        flexbox: 'no-2009',\n      },\n      stage: 3,\n      features: {\n        'custom-properties': false,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Metadata with TypeScript - Next.js\nDESCRIPTION: This snippet demonstrates how to export a static `Metadata` object from a Next.js layout or page file using TypeScript. This allows developers to set static metadata such as title and description.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Nested Dynamic Params Generation Using Parent Segment (TypeScript)\nDESCRIPTION: Generate child segment params using the parent segment's category parameter to fetch filtered products\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function generateStaticParams({\n  params: { category },\n}: {\n  params: { category: string }\n}) {\n  const products = await fetch(\n    `https://.../products?category=${category}`\n  ).then((res) => res.json())\n\n  return products.map((product) => ({\n    product: product.id,\n  }))\n}\n\nexport default function Page({\n  params,\n}: {\n  params: Promise<{ category: string; product: string }>\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Handler in Next.js\nDESCRIPTION: This snippet shows how to configure a custom cache handler in the next.config.js file. It sets the path to the custom cache handler and disables the default in-memory caching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/incrementalCacheHandlerPath.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Functions with Forms in React Components (JavaScript)\nDESCRIPTION: Demonstrates using a Server Function with an HTML form in JavaScript. The form passes all input values as FormData to the Server Function when the form is submitted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPost } from '@/app/actions'\n\nexport function Form() {\n  return (\n    <form action={createPost}>\n      <input type=\"text\" name=\"title\" />\n      <input type=\"text\" name=\"content\" />\n      <button type=\"submit\">Create</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-Aware CSS for Image Display in Next.js\nDESCRIPTION: This CSS snippet defines styles for displaying different images based on the user's color scheme preference. It uses media queries to show/hide images for light and dark modes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.imgDark {\n  display: none;\n}\n\n@media (prefers-color-scheme: dark) {\n  .imgLight {\n    display: none;\n  }\n  .imgDark {\n    display: unset;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sharp with bun\nDESCRIPTION: This snippet demonstrates how to install the `sharp` package using bun. It is an alternative solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add sharp\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Implementation in Next.js\nDESCRIPTION: Client-side error boundary component that handles uncaught exceptions and provides error recovery functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User with Session Verification in DAL (JavaScript)\nDESCRIPTION: This JavaScript code presents a function, `getUser`, designed to retrieve user information following session verification within a Data Access Layer. It leverages `verifySession` to ensure that the user is both authenticated and authorized to access the data.  If `verifySession` returns a valid session, the user ID from the session is intended to be used for subsequent data fetching.  The code highlights the importance of performing authentication and authorization within the DAL for application-wide consistency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  // Get user ID from session and fetch data\n})\n```\n\n----------------------------------------\n\nTITLE: Revalidate Page Path with Next.js\nDESCRIPTION: This code snippet shows how to revalidate a page path using `revalidatePath`.  It imports the function and calls it with the page path and the `'page'` type. This invalidates any URL matching the page file, revalidating on the next visit.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'page')\n// or with route groups\nrevalidatePath('/(main)/blog/[slug]', 'page')\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry NodeSDK (TypeScript)\nDESCRIPTION: Initializes the OpenTelemetry `NodeSDK` in `instrumentation.node.ts`. This code configures the SDK with a resource containing the service name ('next-app') and a simple span processor that exports traces using OTLP over HTTP. The SDK is then started to begin collecting telemetry data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\nimport { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [ATTR_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry with Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize OpenTelemetry in a Next.js application using the `@vercel/otel` package. It imports the `registerOTel` function and calls it within the `register` function exported from `instrumentation.js`. This function is executed once when the Next.js server starts. The `registerOTel` function takes a service name as input. Requires the `@vercel/otel` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image Metadata Array (TSX)\nDESCRIPTION: This example demonstrates how to use `generateImageMetadata` to return an array of objects, each containing metadata for a different image version. It includes properties like `contentType`, `size`, and a required `id`, which is later passed as props to the image generating function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n\nexport default function Icon({ id }: { id: string }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Data in Server Action using Next.js Cache API\nDESCRIPTION: This example demonstrates how to revalidate the Next.js Cache inside a Server Action using the revalidatePath API. It shows error handling and cache invalidation after a post creation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidatePath('/posts')\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration in next.config.ts\nDESCRIPTION: Shows how to configure Next.js using TypeScript with proper type definitions and config options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Generating Open Graph Image using JavaScript in Next.js\nDESCRIPTION: This snippet demonstrates how to dynamically generate an Open Graph image using JavaScript and the ImageResponse API in Next.js. It includes image metadata and font loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { readFile } from 'node:fs/promises'\nimport { join } from 'node:path'\n\n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image() {\n  // Font loading, process.cwd() is Next.js project directory\n  const interSemiBold = await readFile(\n    join(process.cwd(), 'assets/Inter-SemiBold.ttf')\n  )\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Font Utility Functions\nDESCRIPTION: This code snippet demonstrates creating utility functions to export font imports.  This allows for importing and applying the font's `className` where needed, ensuring preloading only when rendered. This example imports `Inter` and `Roboto_Mono` fonts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence with NextRequest\nDESCRIPTION: This snippet demonstrates how to check if a cookie exists using the `has` method of the `request.cookies` object in Next.js. It checks if the cookie named 'experiments' exists.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns true if cookie exists, false if it does not\nrequest.cookies.has('experiments')\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Next.js Route Handlers\nDESCRIPTION: Demonstrates how to handle cookies in a Route Handler using the cookies() function from next/headers. Shows how to get, set, and delete cookies within a handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function GET(request: NextRequest) {\n  const cookieStore = await cookies()\n\n  const a = cookieStore.get('a')\n  const b = cookieStore.set('b', '1')\n  const c = cookieStore.delete('c')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function GET(request) {\n  const cookieStore = await cookies()\n\n  const a = cookieStore.get('a')\n  const b = cookieStore.set('b', '1')\n  const c = cookieStore.delete('c')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme-Aware Image Component in Next.js (TypeScript)\nDESCRIPTION: This TypeScript React component wraps two Next.js Image components to display different images based on the user's theme preference. It uses the CSS module from the previous snippet.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './theme-image.module.css'\nimport Image, { ImageProps } from 'next/image'\n\ntype Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {\n  srcLight: string\n  srcDark: string\n}\n\nconst ThemeImage = (props: Props) => {\n  const { srcLight, srcDark, ...rest } = props\n\n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout: Removing Link Tags (TSX)\nDESCRIPTION: This code updates the root layout in Next.js (TSX) by removing `<link>` tags for favicon and other metadata files.  Next.js automatically adds metadata files placed in the top level of the `app` directory to the application's `<head>`, so the corresponding `<link>` tags in `layout.tsx` can be removed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 'use cache' at File, Component, and Function Levels\nDESCRIPTION: Demonstrates the three ways to implement the 'use cache' directive: at the file level to cache all exports, at the component level to cache a specific component, or at the function level to cache just one function's output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// File level\n'use cache'\n\nexport default async function Page() {\n  // ...\n}\n\n// Component level\nexport async function MyComponent() {\n  'use cache'\n  return <></>\n}\n\n// Function level\nexport async function getData() {\n  'use cache'\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Server and Client Components in TypeScript\nDESCRIPTION: Example showing how to nest client components within server components, demonstrating proper component composition patterns.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Header from './header'\nimport Counter from './counter' // This is a Client Component\n\nexport default function Page() {\n  return (\n    <div>\n      <Header />\n      <Counter />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font in <head> using JSX Global Styles\nDESCRIPTION: This code snippet demonstrates how to apply a font within the `<head>` section of a Next.js application using JSX global styles. It injects a `<style jsx global>` tag to set the `font-family` property for the `html` element using the imported font's `fontFamily` property.  This approach does not require a wrapper element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <style jsx global>{`\n        html {\n          font-family: ${inter.style.fontFamily};\n        }\n      `}</style>\n      <Component {...pageProps} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode in Next.js Route Handler (JavaScript)\nDESCRIPTION: This code snippet shows how to enable Draft Mode in a Next.js Route Handler using JavaScript. It imports `draftMode` from `next/headers`, calls `draft.enable()` to enable Draft Mode, and returns a response indicating that Draft Mode is enabled. It requires the `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  const draft = await draftMode()\n  draft.enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Roboto Font with Weight Specification (_app.js - Pages Router)\nDESCRIPTION: This code snippet demonstrates how to import the Roboto font from `next/font/google` and apply it to the `_app.js` file within the `/pages` directory in a Next.js application. It specifies the font weight since it's not a variable font. The font is applied to the main component, affecting all pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n})\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={roboto.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Next.js API Route (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to read cookies within a Next.js API route using TypeScript. It imports necessary types from 'next', defines an asynchronous handler function, accesses the 'authorization' cookie from the request's cookies object, and uses it. The handler function takes a NextApiRequest and NextApiResponse as arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const auth = req.cookies.authorization\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Function to Fetch Users in TypeScript\nDESCRIPTION: Implementation of a Server Function that fetches users from a database. This example uses the 'use server' directive at the file level in TypeScript to mark the function for server-side execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component with Routing Interaction\nDESCRIPTION: Implements a client-side modal component with navigation and closing functionality using Next.js router\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next\\/navigation'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      <\\/button>\n      <div>{children}<\\/div>\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next\\/navigation'\n\nexport function Modal({ children }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      <\\/button>\n      <div>{children}<\\/div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Web App Manifest with Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a web app manifest file (`app/manifest.ts`) in a Next.js application using TypeScript.  The manifest provides metadata about the PWA, such as its name, short name, description, and icons. The `MetadataRoute` type is imported from 'next'.  The function returns an object conforming to the `MetadataRoute.Manifest` interface, defining the PWA's properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function manifest(): MetadataRoute.Manifest {\n  return {\n    name: 'Next.js PWA',\n    short_name: 'NextPWA',\n    description: 'A Progressive Web App built with Next.js',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#ffffff',\n    theme_color: '#000000',\n    icons: [\n      {\n        src: '/icon-192x192.png',\n        sizes: '192x192',\n        type: 'image/png',\n      },\n      {\n        src: '/icon-512x512.png',\n        sizes: '512x512',\n        type: 'image/png',\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using next/head in Next.js\nDESCRIPTION: This code snippet demonstrates how to import and use the `next/head` component in a Next.js page. It shows how to add a title and viewport meta tag to the page's head. Using `next/head` ensures proper metadata management within the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-head-element.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nfunction Index() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n    </>\n  )\n}\n\nexport default Index\n```\n\n----------------------------------------\n\nTITLE: Open Graph Metadata HTML Output\nDESCRIPTION: This code snippet shows the HTML output generated from the Open Graph metadata configuration in Next.js. It includes meta tags for title, description, URL, site name, locale, images (with width, height, and alt attributes), video (with width and height attributes), audio, and type.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:url\" content=\"https://nextjs.org/\" />\n<meta property=\"og:site_name\" content=\"Next.js\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta property=\"og:image\" content=\"https://nextjs.org/og.png\" />\n<meta property=\"og:image:width\" content=\"800\" />\n<meta property=\"og:image:height\" content=\"600\" />\n<meta property=\"og:image\" content=\"https://nextjs.org/og-alt.png\" />\n<meta property=\"og:image:width\" content=\"1800\" />\n<meta property=\"og:image:height\" content=\"1600\" />\n<meta property=\"og:image:alt\" content=\"My custom alt\" />\n<meta property=\"og:video\" content=\"https://nextjs.org/video.mp4\" />\n<meta property=\"og:video:width\" content=\"800\" />\n<meta property=\"og:video:height\" content=\"600\" />\n<meta property=\"og:audio\" content=\"https://nextjs.org/audio.mp3\" />\n<meta property=\"og:type\" content=\"website\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Client Components with next/dynamic\nDESCRIPTION: This code snippet demonstrates how to lazy load Client Components in a Next.js application using `next/dynamic`. It imports three components (A, B, and C) dynamically, with Component A loaded immediately, Component B loaded on demand based on a condition, and Component C loaded only on the client side using `ssr: false`.  `next/dynamic` is a wrapper around `React.lazy()` and `Suspense`. The code uses `useState` to control the conditional rendering of Component B.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\nimport dynamic from 'next/dynamic'\n\n// Client Components:\nconst ComponentA = dynamic(() => import('../components/A'))\nconst ComponentB = dynamic(() => import('../components/B'))\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\n\nexport default function ClientComponentExample() {\n  const [showMore, setShowMore] = useState(false)\n\n  return (\n    <div>\n      {/* Load immediately, but in a separate client bundle */}\n      <ComponentA />\n\n      {/* Load on demand, only when/if the condition is met */}\n      {showMore && <ComponentB />}\n      <button onClick={() => setShowMore(!showMore)}>Toggle</button>\n\n      {/* Load only on the client side */}\n      <ComponentC />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sitemaps with generateSitemaps in Next.js (TS)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `generateSitemaps` function in Next.js to create multiple sitemaps. It defines the `generateSitemaps` function that returns an array of objects, each representing a sitemap ID.  It then utilizes an asynchronous `sitemap` function to fetch products based on the calculated `start` and `end` indices derived from the sitemap `id`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: User Provider with Context (JavaScript)\nDESCRIPTION: This code implements a React Context Provider for managing user data in a Next.js application using JavaScript.  It creates a `UserContext` and a custom hook `useUser` for accessing the context. The `UserProvider` component accepts a `userPromise` prop (a Promise of user data) and makes it available to its children through the context. This pattern enables easier access to the user data from Client Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { createContext, useContext, ReactNode } from 'react'\n\nconst UserContext = createContext(null)\n\nexport function useUser() {\n  let context = useContext(UserContext)\n  if (context === null) {\n    throw new Error('useUser must be used within a UserProvider')\n  }\n  return context\n}\n\nexport function UserProvider({ children, userPromise }) {\n  return (\n    <UserContext.Provider value={{ userPromise }}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Install @next/bundle-analyzer\nDESCRIPTION: Installs the @next/bundle-analyzer plugin, which helps visualize and manage the size of application bundles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @next/bundle-analyzer\n# or\nyarn add @next/bundle-analyzer\n# or\npnpm add @next/bundle-analyzer\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures the manifest metadata for a Next.js application, specifying the URL of the web application manifest file. It demonstrates how to set the `manifest` property within the `metadata` export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  manifest: 'https://nextjs.org/manifest.json',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Loader in Next.js (Pages Router)\nDESCRIPTION: This example demonstrates how to create and use a custom loader function with the Next.js Image component in the Pages Router. The loader function generates a custom URL based on the provided src, width, and quality parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Image from 'next/image'\n\nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rewriting URL in NextResponse - TypeScript\nDESCRIPTION: Proxies a request to a new URL while keeping the original URL displayed in the browser. Useful for handling internal redirections.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// Incoming request: /about, browser shows /about\n// Rewritten request: /proxy, browser shows /about\nreturn NextResponse.rewrite(new URL('/proxy', request.url))\n```\n\n----------------------------------------\n\nTITLE: Using 'use server' Directive Inline with JavaScript\nDESCRIPTION: Example of using the 'use server' directive inline at the top of a function to mark it as a Server Function. This demonstrates defining a server function directly within a page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { db } from '@/lib/db' // Your database client\n\nexport default function UserList() {\n  async function fetchUsers() {\n    'use server'\n    const users = await db.user.findMany()\n    return users\n  }\n\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Layouts in Next.js (Typescript)\nDESCRIPTION: This code defines a nested layout component for the `/dashboard` route using TypeScript. It exports a functional component that accepts a `children` prop, which will be populated with content from the route segments inside the `dashboard` directory. The layout wraps its children within a `<section>` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bookmarks Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure a bookmarks link using the `bookmarks` property within the `metadata` export in a Next.js layout or page file. It sets the URL for the bookmark.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  bookmarks: ['https://nextjs.org/13'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring remotePatterns in next.config.js\nDESCRIPTION: This snippet illustrates how to set up remotePatterns in next.config.js to specify allowed external image sources for safety against malicious users. The configuration ensures that only authorized external images can be loaded.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [new URL('https://example.com/account123/**')],\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Component with Suspense in TypeScript\nDESCRIPTION: Shows how to properly wrap a search component using useSearchParams within a Suspense boundary to prevent client-side rendering issues. The example demonstrates the correct implementation pattern for TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\nimport { Suspense } from 'react'\n\nfunction Search() {\n  const searchParams = useSearchParams()\n\n  return <input placeholder=\"Search...\" />\n}\n\nexport function Searchbar() {\n  return (\n    // You could have a loading skeleton as the `fallback` too\n    <Suspense>\n      <Search />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Post with Server Action in Next.js JavaScript\nDESCRIPTION: In this JavaScript snippet, a form in Next.js is configured to use a server action for post creation. The 'createPost' function is triggered to handle form data on submission.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from 'next/form'\nimport { createPost } from '@/posts/actions'\n\nexport default function Page() {\n  return (\n    <Form action={createPost}>\n      <input name=\"title\" />\n      {/* ... */}\n      <button type=\"submit\">Create Post</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server Component Error Handling in Next.js\nDESCRIPTION: Implementation of error handling in a Server Component, demonstrating how to handle fetch errors and conditionally render error messages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!res.ok) {\n    return 'There was an error.'\n  }\n\n  return '...'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Page() {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!res.ok) {\n    return 'There was an error.'\n  }\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Layout in Next.js (Typescript)\nDESCRIPTION: This code defines a layout component for the `/dashboard` route using TypeScript. It exports a functional component that accepts a `children` prop, which will be a page or nested layout. The layout includes shared UI elements like a header or sidebar within a `<section>` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n\n      {children}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Functions with Forms in React Components (TypeScript)\nDESCRIPTION: Shows how to invoke a Server Function using the HTML form action attribute in TypeScript. The form automatically passes FormData to the Server Function when submitted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPost } from '@/app/actions'\n\nexport function Form() {\n  return (\n    <form action={createPost}>\n      <input type=\"text\" name=\"title\" />\n      <input type=\"text\" name=\"content\" />\n      <button type=\"submit\">Create</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling SSR for a Component in Next.js (JSX)\nDESCRIPTION: This code snippet showcases how to disable server-side rendering (SSR) for a specific component in Next.js using `next/dynamic`. By setting `ssr: false` in the dynamic import options, the component will only be rendered on the client-side, thus preventing hydration mismatches that can occur when server and client environments differ.  This is useful for components that rely on browser-specific APIs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst NoSSR = dynamic(() => import('../components/no-ssr'), { ssr: false })\n\nexport default function Page() {\n  return (\n    <div>\n      <NoSSR />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Form Validation with Zod in Next.js\nDESCRIPTION: Demonstrates server-side form validation using Zod schema validation in a Server Action.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n\nexport default async function createUser(formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Mutate data\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous and Asynchronous Pages in React Components using TypeScript\nDESCRIPTION: This snippet demonstrates the migration of synchronous React component handling to asynchronous by leveraging `use` from React to handle promise-based data. It involves transforming `Params` and `SearchParams` to promise-based structures to fetch data asynchronously, simplifying the logic for data fetching in component rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\\n\\n// Before\\ntype Params = { slug: string }\\ntype SearchParams = { [key: string]: string | string[] | undefined }\\n\\nexport default function Page({\\n  params,\\n  searchParams,\\n}: {\\n  params: Params\\n  searchParams: SearchParams\\n}) {\\n  const { slug } = params\\n  const { query } = searchParams\\n}\\n\\n// After\\nimport { use } from 'react'\\n\\ntype Params = Promise<{ slug: string }>\\ntype SearchParams = Promise<{ [key: string]: string | string[] | undefined }>\\n\\nexport default function Page(props: {\\n  params: Params\\n  searchParams: SearchParams\\n}) {\\n  const params = use(props.params)\\n  const searchParams = use(props.searchParams)\\n  const slug = params.slug\\n  const query = searchParams.query\\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Database Queries with React Cache in JavaScript\nDESCRIPTION: Implements React's cache function to memoize database queries in JavaScript. This ensures that repeated calls to the same function with the same parameters only execute the database query once.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { cache } from 'react'\nimport db from '@/lib/db'\n\nexport const getItem = cache(async (id) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cache After Server Function Updates with TypeScript\nDESCRIPTION: Shows how to revalidate the Next.js cache after data updates in a TypeScript Server Function. Uses the revalidatePath function to refresh cached data on the posts path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(formData: FormData) {\n  'use server'\n  // Update data\n  // ...\n\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Stylesheet in Root Layout (App Router - TSX)\nDESCRIPTION: This TypeScript code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application. It defines the root layout component with metadata and imports the globals.css file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import type { Metadata } from 'next'\n\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Server Components with next/dynamic\nDESCRIPTION: This code snippet demonstrates how to dynamically import a Server Component using `next/dynamic`. When a Server Component is dynamically imported, only its Client Component children are lazy-loaded, not the Server Component itself. This approach also helps preload static assets like CSS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\n// Server Component:\nconst ServerComponent = dynamic(() => import('../components/ServerComponent'))\n\nexport default function ServerComponentExample() {\n  return (\n    <div>\n      <ServerComponent />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Draft Mode API Route (TypeScript)\nDESCRIPTION: This TypeScript code defines a basic API route that enables Draft Mode and sends a response message. This serves as a manual test to verify that the `__prerender_bypass` cookie is being set correctly when visiting `/api/draft` in the browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// simple example for testing it manually from your browser.\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: true })\n  res.end('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation (TypeScript)\nDESCRIPTION: TypeScript implementation of the required root layout component in the app directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling TypeScript Errors in Production Builds with Next.js Configuration\nDESCRIPTION: This configuration allows Next.js to complete production builds even when TypeScript errors are present in the project. It sets the 'ignoreBuildErrors' flag to true in the TypeScript configuration section of next.config.ts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Clear Draft Mode Cookie (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to disable Draft Mode by setting the `enable` property to `false` in `res.setDraftMode`. This clears the Draft Mode cookie.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: false })\n}\n```\n\n----------------------------------------\n\nTITLE: Top-Down Dynamic Params Generation for Category Segment (TypeScript)\nDESCRIPTION: Generate static params for category segments by fetching products data and mapping to route params\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n  }))\n}\n\nexport default function Layout({\n  params,\n}: {\n  params: Promise<{ category: string }>\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Session Verification (JavaScript)\nDESCRIPTION: This JavaScript code defines a `getUser` function, which retrieves user data after verifying the user's session. It calls `verifySession` to ensure the user is authenticated. If the session is valid, it fetches user data using `db.query.users.findMany` with the user ID obtained from the session. The query returns a subset of user data (id, name, email). A try-catch block handles potential errors during the data fetching process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  try {\n    const data = await db.query.users.findMany({\n      where: eq(users.id, session.userId),\n      // Explicitly return the columns you need rather than the whole user object\n      columns: {\n        id: true,\n        name: true,\n        email: true,\n      },\n    })\n\n    const user = data[0]\n\n    return user\n  } catch (error) {\n    console.log('Failed to fetch user')\n    return null\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Page Layouts with TypeScript in Next.js\nDESCRIPTION: A TypeScript implementation of a page component with a custom layout. It defines the getLayout function that wraps the page content in multiple layout components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactElement } from 'react'\nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\nimport type { NextPageWithLayout } from './_app'\n\nconst Page: NextPageWithLayout = () => {\n  return <p>hello world</p>\n}\n\nPage.getLayout = function getLayout(page: ReactElement) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in a Dynamic Table Component in TypeScript\nDESCRIPTION: Example of a TypeScript Table component that accesses searchParams data, making it run dynamically when used with PPR.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function Table({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  const sort = (await searchParams).sort === 'true'\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Metadata with Function in Next.js (TSX)\nDESCRIPTION: This example shows how to define a function that returns a metadata object in Next.js using TypeScript. It imports the `Metadata` type and defines a function `generateMetadata` that returns an object with the `title` property. This function enables dynamic metadata generation based on runtime parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_71\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport function generateMetadata(): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Rendering for Browser-Only Components in Next.js\nDESCRIPTION: Shows how to use dynamic imports to disable server-side rendering for components that rely on browser-only APIs. It uses the dynamic function from next/dynamic with the ssr option set to false.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithNoSSR = dynamic(\n  () => import('../components/BrowserOnlyComponent'),\n  { ssr: false }\n)\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>My page</h1>\n      <DynamicComponentWithNoSSR />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document Component in Next.js\nDESCRIPTION: Demonstrates the correct way to import and extend the Document component from next/document within pages/_document.js. This is the only valid location for Document imports in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-document-import-in-page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  //...\n}\n\nexport default MyDocument\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command creates a new Next.js application using the `with-sitemap` example. It leverages `create-next-app` via pnpm. The created app will be named `with-sitemap-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-sitemap with-sitemap-app\n```\n\n----------------------------------------\n\nTITLE: Configuring staleTimes in Next.js Config\nDESCRIPTION: Configuration example for setting up staleTimes in next.config.js. This allows specifying custom cache invalidation times for both dynamic and static content in the client-side router cache.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/staleTimes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    staleTimes: {\n      dynamic: 30,\n      static: 180,\n    },\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Basic usePathname Usage in Next.js Client Component\nDESCRIPTION: Demonstrates the basic implementation of usePathname hook to display the current pathname in a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-pathname.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode in Next.js Route Handler (TypeScript)\nDESCRIPTION: This code snippet shows how to enable Draft Mode in a Next.js Route Handler using TypeScript. It imports `draftMode` from `next/headers`, calls `draft.enable()` to enable Draft Mode, and returns a response indicating that Draft Mode is enabled. It requires the `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const draft = await draftMode()\n  draft.enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Display Validation Errors with useActionState (TSX)\nDESCRIPTION: This code snippet demonstrates how to use React's `useActionState` hook to display validation errors in a signup form. It integrates with the `signup` Server Action and shows error messages for each invalid field.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { signup } from '@/app/actions/auth'\nimport { useActionState } from 'react'\n\nexport default function SignupForm() {\n  const [state, action, pending] = useActionState(signup, undefined)\n\n  return (\n    <form action={action}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      {state?.errors?.name && <p>{state.errors.name}</p>}\n\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\n      </div>\n      {state?.errors?.email && <p>{state.errors.email}</p>}\n\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      {state?.errors?.password && (\n        <div>\n          <p>Password must:</p>\n          <ul>\n            {state.errors.password.map((error) => (\n              <li key={error}>- {error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <button disabled={pending} type=\"submit\">\n        Sign Up\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rendering Example (JSX)\nDESCRIPTION: This code demonstrates how to force dynamic rendering in a Next.js page. Setting the `dynamic` export to `'force-dynamic'` ensures that the page is rendered dynamically on each request, allowing `useSearchParams` to be available on the server during initial render.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport SearchBar from './search-bar'\\n\\nexport const dynamic = 'force-dynamic'\\n\\nexport default function Page() {\\n  return (\\n    <>\\n      <nav>\\n        <SearchBar />\\n      </nav>\\n      <h1>Dashboard</h1>\\n    </>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying REST API URL to home URL in WordPress (PHP)\nDESCRIPTION: This code snippet modifies the REST API URL to use the home URL as the base URL instead of the site URL. This ensures consistency between the WordPress backend and the Next.js frontend when making API requests.  It uses the `rest_url` filter to replace the `site_url` with the `home_url` in the REST API URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Changes the REST API root URL to use the home URL as the base.\n *\n * @param string $url The complete URL including scheme and path.\n * @return string The REST API root URL.\n */\nadd_filter('rest_url', 'home_url_as_api_url');\nfunction home_url_as_api_url($url)\n{\n  $url = str_replace(home_url(), site_url(), $url);\n  return $url;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Analytics in App Router (JSX)\nDESCRIPTION: This code snippet shows how to integrate Google Analytics into a Next.js application using the App Router and JavaScript. It uses the `GoogleAnalytics` component from `@next/third-parties/google` and includes it within the root layout component. The Google Analytics measurement ID is passed via the `gaId` prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Path Matching with Parameters in Next.js\nDESCRIPTION: This example shows how to use path matching with parameters in Next.js headers configuration.  The `source` path `/blog/:slug` captures the `slug` parameter, which can then be used in the header `key` or `value`. This allows for dynamic header values based on the matched route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Fonts in Next.js Pages Router\nDESCRIPTION: Demonstrates how to implement local fonts in a Next.js application using the Pages Router. The font is imported and applied to the main component wrapper in the custom App component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `pages`\nconst myFont = localFont({ src: './my-font.woff2' })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={myFont.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Property on Next.js Image Component\nDESCRIPTION: Example of setting the placeholder property on a Next.js Image component. This property determines what to display while the image is loading, with options for blur, empty space, or a data URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nplaceholder = 'empty' // \"empty\" | \"blur\" | \"data:image/...\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Server Functions with TypeScript\nDESCRIPTION: Example of implementing authentication and authorization in a server function using the 'use server' directive. This demonstrates how to secure server-side operations by verifying user credentials before performing database operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\n\nimport { db } from '@/lib/db' // Your database client\nimport { authenticate } from '@/lib/auth' // Your authentication library\n\nexport async function createUser(\n  data: { name: string; email: string },\n  token: string\n) {\n  const user = authenticate(token)\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  const newUser = await db.user.create({ data })\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Web Vitals with useReportWebVitals (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `useReportWebVitals` hook in a component within the App Router in Next.js to report web vitals. A separate client component `WebVitals` is created to use the hook and is then imported into the layout file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebVitals } from './_components/web-vitals'\n\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Metadata with Data Fetching (TypeScript)\nDESCRIPTION: Illustrates how to dynamically generate metadata based on fetched data using TypeScript in Next.js. This example fetches post information based on the slug parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: Promise<{ id: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  const slug = (await params).slug\n\n  // fetch post information\n  const post = await fetch(`https://api.vercel.app/blog/${slug}`).then((res) =>\n    res.json()\n  )\n\n  return {\n    title: post.title,\n    description: post.description,\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Post Creation and Redirection in Next.js JavaScript\nDESCRIPTION: In this JavaScript snippet, the server-side 'createPost' function for handling form data is illustrated, including redirection to the newly created post using 'redirect'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use server'\nimport { redirect } from 'next/navigation'\n\nexport async function createPost(formData) {\n  // Create a new post\n  // ...\n\n  // Redirect to the new post\n  redirect(`/posts/${data.id}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Disposition Type in Next.js\nDESCRIPTION: This snippet sets the `Content-Disposition` header for images served by the Next.js Image Optimization API. Developers can choose between forcing a download or rendering the image inline.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    contentDispositionType: 'inline',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Public Environment Variable - Bash\nDESCRIPTION: This bash command defines a public environment variable `NEXT_PUBLIC_ANALYTICS_ID`.  Variables prefixed with `NEXT_PUBLIC_` are made available to the browser during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n```\n\n----------------------------------------\n\nTITLE: Configuring assetPrefix in Next.js Configuration\nDESCRIPTION: Example configuration for setting up CDN asset prefix in Next.js based on development or production environment. Uses the PHASE_DEVELOPMENT_SERVER constant to determine the environment and sets the appropriate CDN domain.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/assetPrefix.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\nimport { PHASE_DEVELOPMENT_SERVER } from 'next/constants'\n\nexport default (phase) => {\n  const isDev = phase === PHASE_DEVELOPMENT_SERVER\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    assetPrefix: isDev ? undefined : 'https://cdn.mydomain.com',\n  }\n  return nextConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Valid `href` Interpolation with Next.js Link\nDESCRIPTION: This code snippet demonstrates a valid `href` interpolation using the `next/link` component in Next.js. The `href` property is an object with a `pathname` that defines dynamic route parameters `/blog/[post]/[comment]`, and the `query` provides values for both `post` and `comment`. This ensures that all dynamic route parameters are properly interpolated, preventing the error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/href-interpolation-failed.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function BlogLink() {\n  return (\n    <Link\n      href={{\n        pathname: '/blog/[post]/[comment]',\n        query: { post: 'post-1', comment: 'comment-1' },\n      }}\n    >\n      <a>Valid link</a>\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Open Graph Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures the Open Graph metadata for a Next.js application, including title, description, URL, site name, images, videos, audio, locale, and type. It demonstrates how to define these properties within the `metadata` export in a `layout.js` or `page.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    url: 'https://nextjs.org',\n    siteName: 'Next.js',\n    images: [\n      {\n        url: 'https://nextjs.org/og.png', // Must be an absolute URL\n        width: 800,\n        height: 600,\n      },\n      {\n        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL\n        width: 1800,\n        height: 1600,\n        alt: 'My custom alt',\n      },\n    ],\n    videos: [\n      {\n        url: 'https://nextjs.org/video.mp4', // Must be an absolute URL\n        width: 800,\n        height: 600,\n      },\n    ],\n    audio: [\n      {\n        url: 'https://nextjs.org/audio.mp3', // Must be an absolute URL\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Headers with basePath Support\nDESCRIPTION: This example illustrates how Next.js's `basePath` configuration interacts with the `headers` option. By default, the `basePath` is automatically prefixed to the `source` path. To disable this behavior, set `basePath: false` in the header configuration object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n\n  async headers() {\n    return [\n      {\n        source: '/with-basePath', // becomes /docs/with-basePath\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        source: '/without-basePath', // is not modified since basePath: false is set\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n        basePath: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Transpile Packages in next.config.js\nDESCRIPTION: Configures the `transpilePackages` option in `next.config.js` to bundle specific packages that are not pre-bundled, such as those in a monorepo or from `node_modules`. This is specifically for Pages Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['package-name'],\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Redirects in Next.js using JavaScript\nDESCRIPTION: This snippet defines redirects in a Next.js application utilizing JavaScript. It outlines the source and target paths for redirection along with the option to set permanent status for the redirects. Required dependencies include the Next.js framework. The configuration will facilitate routing users to the defined paths.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      // Basic redirect\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      // Wildcard path matching\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in TypeScript React\nDESCRIPTION: Demonstrates how to use the Next.js Form component to create a simple search form that appends the query parameter to the URL on submission. This example shows the TypeScript implementation in app directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from 'next/form'\n\nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      {/* On submission, the input value will be appended to\n          the URL, e.g. /search?query=abc */}\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Permanent redirect after mutation with `permanentRedirect` in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `permanentRedirect` function from `next/navigation` within a server action in the App Router to permanently redirect a user after updating their username. It imports `permanentRedirect` and `revalidateTag`, calls a database function (placeholder), revalidates the username tag, and then permanently redirects the user to the new profile page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\"\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n```\n\n----------------------------------------\n\nTITLE: Create Signup Form with Server Action in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to create a signup form in a Next.js application using React's `<form>` element. The form utilizes a Server Action called `signup` to handle the form submission. It captures user's name, email, and password.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  return (\n    <form action={signup}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Body Size Limit for Next.js Server Actions\nDESCRIPTION: Configuration to modify the maximum allowed request body size for Server Actions. Default is 1MB, but can be customized using bytes notation like '500kb' or '3mb'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverActions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '2mb',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Segment Configuration Options in Next.js - JavaScript\nDESCRIPTION: This JavaScript snippet sets up segment configuration options for routing in Next.js, allowing for dynamic routing and caching settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n```\n\n----------------------------------------\n\nTITLE: Reading Nonce in a Server Component (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to read the nonce value (set by the middleware) in a Next.js Server Component using the `headers` function from `next/headers`. The nonce is then passed to the `nonce` prop of the `<Script>` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n\nexport default async function Page() {\n  const nonce = (await headers()).get('x-nonce')\n\n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Images with Manual Dimensions\nDESCRIPTION: This snippet showcases how to use a remote image with the `next/image` component, requiring manual entry of dimensions due to Next.js's inability to access remote files during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Applying Font Variables\nDESCRIPTION: This CSS snippet demonstrates how to apply font variables defined in JavaScript/TypeScript within a CSS file. It sets the `font-family` property for the `html` and `h1` elements using the defined CSS variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_20\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  font-family: var(--font-inter);\n}\n\nh1 {\n  font-family: var(--font-roboto-mono);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSelectedLayoutSegment in Javascript\nDESCRIPTION: This code snippet demonstrates how to use `useSelectedLayoutSegment` hook to read the active route segment within a specific slot. The `parallelRoutesKey` parameter ('auth' in this case) is used to specify the slot for which the active segment is being retrieved.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function Layout({ auth }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Fetching Function with Server-Side API Key\nDESCRIPTION: An example of a data fetching function that uses server-side environment variables for API authorization. This demonstrates code that should only be executed on the server to protect sensitive information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data to API Route - TypeScript\nDESCRIPTION: This code snippet demonstrates how to submit form data to an API route in Next.js using TypeScript. It prevents the default form submission, creates a FormData object from the form, sends a POST request to the API route, and handles the response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormEvent } from 'react'\n\nexport default function Page() {\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const response = await fetch('/api/submit', {\n      method: 'POST',\n      body: formData,\n    })\n\n    // Handle response if necessary\n    const data = await response.json()\n    // ...\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Next.js Image Component\nDESCRIPTION: Demonstrates how to import and use the Next.js Image component for basic image rendering. This snippet shows the minimal setup required to use the Image component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image src=\"\" alt=\"\" />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image src=\"\" alt=\"\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - All paths at build time (JSX)\nDESCRIPTION: This code snippet demonstrates how to statically render all paths at build time using `generateStaticParams` in Next.js. It fetches a list of posts from an API and returns an array of objects, where each object contains the `slug` parameter for a dynamic route segment, ensuring all posts are rendered during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Disable Static Analysis (ESLint & TypeScript) in Next.js\nDESCRIPTION: This snippet demonstrates how to disable ESLint and TypeScript checks during Next.js builds.  This can reduce memory usage, especially in large projects.  Warning: Disabling these checks can lead to faulty deployments if type errors or linting issues exist.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Statically Generate Routes with generateStaticParams in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` in a Next.js application to statically generate routes for blog posts at build time. It fetches a list of posts from an API and returns an array of objects, where each object contains the `slug` parameter for a dynamic route segment. The `Page` component then uses the `slug` parameter to render the content of each post.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\n// Return a list of `params` to populate the [slug] dynamic segment\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n\n// Multiple versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\nexport default async function Page({ params }) {\n  const { slug } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager in App Router (JSX)\nDESCRIPTION: This code snippet demonstrates how to include the `GoogleTagManager` component within the root layout of a Next.js application using the App Router with JavaScript.  It imports the component from `@next/third-parties/google` and passes the GTM container ID via the `gtmId` prop. This ensures GTM is loaded on all routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using shared data fetching function with getStaticProps (JavaScript)\nDESCRIPTION: This snippet shows how to use a shared function (`loadPosts`) to fetch data in `getStaticProps`. This is helpful for re-using the data-fetching logic between `getStaticProps` and API routes, keeping the code DRY and maintainable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/blog.js\nimport { loadPosts } from '../lib/load-posts'\n\n// This function runs only on the server side\nexport async function getStaticProps() {\n  // Instead of fetching your `/api` route you can call the same\n  // function directly in `getStaticProps`\n  const posts = await loadPosts()\n\n  // Props returned will be passed to the page component\n  return { props: { posts } }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Tagged Cache in TypeScript\nDESCRIPTION: Describes using revalidateTag within a TypeScript function to clear cache entries tagged with 'bookings-data'. This snippet is part of a server-side updateBookings function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateBookings() {\n  await updateBookingData()\n  revalidateTag('bookings-data')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static `getInitialProps` in Class Component\nDESCRIPTION: Demonstrates how to implement `getInitialProps` as a static method within a React class component in Next.js, ensuring proper data fetching and initialization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/get-initial-props-as-an-instance-method.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class YourEntryComponent extends React.Component {\n  static getInitialProps() {\n    return {}\n  }\n\n  render() {\n    return 'foo'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Dependency\nDESCRIPTION: This command installs the `sass` package as a development dependency using npm.  It's a prerequisite for using Sass in a Next.js project, allowing you to write `.scss` or `.sass` files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev sass\n```\n\n----------------------------------------\n\nTITLE: Conditionally importing NodeSDK for OpenTelemetry (JavaScript)\nDESCRIPTION: Conditionally imports the `instrumentation.node.js` file based on the `NEXT_RUNTIME` environment variable. This ensures that `NodeSDK`, which is not compatible with the edge runtime, is only imported when the application is running in a Node.js environment. This approach is used in `instrumentation.js`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.js')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Maps with onReady in Next.js (App Router) - TSX\nDESCRIPTION: This code demonstrates how to initialize a Google Maps embed using the `onReady` property of the `next/script` component within a Next.js application using the App Router. It uses a ref to target a div element for the map and re-instantiates the map on every component mount. The `onReady` function is called after the script has loaded.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion Support in Next.js Compiler\nDESCRIPTION: This snippet provides the setup for @emotion/babel-plugin in the Next.js Compiler. This configuration allows developers to leverage Emotion's styling library within their applications efficiently.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    emotion: boolean | {\n      // default is true. It will be disabled when build type is production.\n      sourceMap?: boolean,\n      // default is 'dev-only'.\n      autoLabel?: 'never' | 'dev-only' | 'always',\n      // default is '[local]'.\n      // Allowed values: `[local]` `[filename]` and `[dirname]`\n      // This option only works when autoLabel is set to 'dev-only' or 'always'.\n      // It allows you to define the format of the resulting label.\n      // The format is defined via string where variable parts are enclosed in square brackets [].\n      // For example labelFormat: \"my-classname--[local]\", where [local] will be replaced with the name of the variable the result is assigned to.\n      labelFormat?: string,\n      // default is undefined.\n      // This option allows you to tell the compiler what imports it should\n      // look at to determine what it should transform so if you re-export\n      // Emotion's exports, you can still use transforms.\n      importMap?: {\n        [packageName: string]: {\n          [exportName: string]: {\n            canonicalImport?: [string, string],\n            styledBaseImport?: [string, string],\n          }\n        }\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots Metadata in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to configure robots metadata in a Next.js application to control indexing and crawling behavior. It includes settings for `index`, `follow`, `nocache`, and Google-specific directives like `noimageindex`, `max-video-preview`, `max-image-preview`, and `max-snippet`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      noimageindex: false,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Counter Component in TypeScript\nDESCRIPTION: Example of a client component using the 'use client' directive with React useState hook. Shows implementation of a basic counter with increment functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates in Next.js Forms\nDESCRIPTION: Demonstrates implementing optimistic updates using the useOptimistic hook for immediate UI feedback during form submissions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n\ntype Message = {\n  message: string\n}\n\nexport function Thread({ messages }: { messages: Message[] }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic<\n    Message[],\n    string\n  >(messages, (state, newMessage) => [...state, { message: newMessage }])\n\n  const formAction = async (formData: FormData) => {\n    const message = formData.get('message') as string\n    addOptimisticMessage(message)\n    await send(message)\n  }\n\n  return (\n    <div>\n      {optimisticMessages.map((m, i) => (\n        <div key={i}>{m.message}</div>\n      ))}\n      <form action={formAction}>\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Actions for Multi-Zones in Next.js\nDESCRIPTION: This configuration in next.config.js sets up allowed origins for Server Actions when using Multi-Zones. It's necessary to explicitly allow the user-facing domain for security reasons.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['your-production-domain.com'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for GitLab CI sets up caching for node_modules and the Next.js cache directory, using the commit reference slug as the cache key.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - node_modules/\n    - .next/cache/\n```\n\n----------------------------------------\n\nTITLE: Initializing useSelectedLayoutSegment in Client Component\nDESCRIPTION: Demonstrates basic usage of useSelectedLayoutSegment hook to display the current active route segment\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segment = useSelectedLayoutSegment()\n\n  return <p>Active segment: {segment}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Component in TypeScript\nDESCRIPTION: Example of a loading.tsx file that creates a loading state for a dashboard route. This component will be automatically nested inside layout.js and wrapped in a Suspense boundary.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing `@next/font` Imports in JavaScript Applications\nDESCRIPTION: This simple code change focuses on updating import paths from the deprecated `@next/font` to the new `next/font`, reflecting changes in the Next.js framework. This ensures continued functionality and access to the latest features provided by Next.js without breaking existing imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// Before\\nimport { Inter } from '@next/font/google'\\n\\n// After\\nimport { Inter } from 'next/font/google'\n```\n\n----------------------------------------\n\nTITLE: JavaScript WebVitals Component for Next.js with Client Usage\nDESCRIPTION: This JavaScript variant of the WebVitals component reports core web vital metrics in client-side Next.js applications. It employs the 'use client' directive to limit client rendering. This example requires 'next/web-vitals'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using revalidateTag in a Route Handler - TypeScript\nDESCRIPTION: This code snippet shows how to incorporate the revalidateTag function within a route handler. It extracts a cache tag from the incoming request's URL parameters and uses it to invalidate the cache before returning a JSON response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { revalidateTag } from 'next/cache'\n\nexport async function GET(request: NextRequest) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching CMS data with getStaticProps (JavaScript)\nDESCRIPTION: This snippet shows an example of fetching data from a CMS using `getStaticProps` in a Next.js page. It fetches a list of blog posts and passes them as props to the `Blog` component. This is a typical use case for static site generation with data from a headless CMS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Post Data by ID in Next.js TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to create a Next.js page that fetches and displays post data using a dynamic route parameter. The 'getPost' function retrieves post details based on the ID extracted from 'params'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getPost } from '@/posts/data'\n\nexport default async function PostPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const data = await getPost(id)\n\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      {/* ... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Headers with getServerSideProps in Next.js\nDESCRIPTION: This example demonstrates how to add caching headers to getServerSideProps responses, using stale-while-revalidate to improve performance while keeping content fresh. The response will be cached for 10 seconds with a 59-second stale period.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport async function getServerSideProps({ req, res }) {\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n\n  return {\n    props: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Server Functions in Event Handlers with JavaScript\nDESCRIPTION: Demonstrates calling a Server Function from an onClick event handler in a JavaScript Client Component. The component updates local state with the value returned from the Server Function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths with TypeScript\nDESCRIPTION: Example of implementing getStaticPaths and getStaticProps in a Next.js dynamic route using TypeScript. Shows how to fetch and type GitHub repository data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  InferGetStaticPropsType,\n  GetStaticProps,\n  GetStaticPaths,\n} from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticPaths = (async () => {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      },\n    ],\n    fallback: true,\n  }\n}) satisfies GetStaticPaths\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Maps with Next.js\nDESCRIPTION: This code snippet demonstrates how to embed a Google Maps component in a Next.js page using the `@next/third-parties/google` package. It requires an API key and specifies the map mode, height, width, and query parameters. The `GoogleMapsEmbed` component is imported and rendered with the specified props.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Button Component in JavaScript with CSS Module\nDESCRIPTION: This JavaScript snippet defines a 'BaseButton' component that imports styles from 'base-button.module.css'. The component utilizes these styles to set a primary button class.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from './base-button.module.css'\n\nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Detection with Picture Element in Next.js\nDESCRIPTION: This snippet demonstrates how to use the getImageProps function from Next.js to create a theme-aware image using the HTML picture element. It provides different sources for light and dark modes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getImageProps } from 'next/image'\n\nexport default function Page() {\n  const common = { alt: 'Theme Example', width: 800, height: 400 }\n  const {\n    props: { srcSet: dark },\n  } = getImageProps({ ...common, src: '/dark.png' })\n  const {\n    props: { srcSet: light, ...rest },\n  } = getImageProps({ ...common, src: '/light.png' })\n\n  return (\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcSet={dark} />\n      <source media=\"(prefers-color-scheme: light)\" srcSet={light} />\n      <img {...rest} />\n    </picture>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @vercel/otel and OpenTelemetry dependencies\nDESCRIPTION: Installs the necessary npm packages for using `@vercel/otel` to instrument a Next.js application with OpenTelemetry. This includes `@vercel/otel`, `@opentelemetry/sdk-logs`, `@opentelemetry/api-logs` and `@opentelemetry/instrumentation`. These packages provide the core functionalities for OpenTelemetry integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers in next.config.js\nDESCRIPTION: This JavaScript code configures security headers in the next.config.js file to enhance the application's security. It sets headers for all routes and specific headers for the service worker to prevent caching and enforce a strict Content Security Policy. It helps prevent common web vulnerabilities like clickjacking and MIME sniffing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'strict-origin-when-cross-origin',\n          },\n        ],\n      },\n      {\n        source: '/sw.js',\n        headers: [\n          {\n            key: 'Content-Type',\n            value: 'application/javascript; charset=utf-8',\n          },\n          {\n            key: 'Cache-Control',\n            value: 'no-cache, no-store, must-revalidate',\n          },\n          {\n            key: 'Content-Security-Policy',\n            value: \"default-src 'self'; script-src 'self'\",\n          },\n        ],\n      },\n    ]\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading External Library Dynamically (Pages Router)\nDESCRIPTION: This code snippet showcases how to dynamically load an external library (`fuse.js`) using `import()` within the `pages` router. This allows for loading libraries only when they are needed, improving initial page load times.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\n\nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n\nexport default function Page() {\n  const [results, setResults] = useState()\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n\n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Metadata (JSX)\nDESCRIPTION: This snippet shows how to define static metadata, specifically the title and description, using the `metadata` object in a JavaScript Next.js application. It demonstrates exporting a `metadata` object from a `layout.js` or `page.js` file to configure static metadata for the route segment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Google Analytics Integration with Web Vitals\nDESCRIPTION: Integrates Google Analytics with the useReportWebVitals hook for tracking web metrics. Uses 'window.gtag' for event reporting. Assumes a prior setup of Google Analytics in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nuseReportWebVitals(metric => {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics\n  window.gtag('event', metric.name, {\n    value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers\n    event_label: metric.id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Incremental Static Regeneration with getStaticProps\nDESCRIPTION: This snippet illustrates how to enable incremental static regeneration in Next.js by adding a revalidate property to getStaticProps. This allows the static page to regenerate at specified intervals for updated content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\nexport async function getStaticProps() {\n  const res = await fetch(`https://.../posts`)\n  const posts = await res.json()\n\n  return {\n    props: { posts },\n    revalidate: 60,\n  }\n}\n\nexport default function Index({ posts }) {\n  return (\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Data Fetching in App Directory\nDESCRIPTION: Example of migrating page components and data fetching to the new app directory structure using Server Components\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nexport default function HomePage({ recentPosts }) {\n  return (\n    <div>\n      {recentPosts.map((post) => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport HomePage from './home-page'\n\nasync function getPosts() {\n  const res = await fetch('https://...')\n  const posts = await res.json()\n  return posts\n}\n\nexport default async function Page() {\n  const recentPosts = await getPosts()\n  return <HomePage recentPosts={recentPosts} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths with JavaScript\nDESCRIPTION: JavaScript version of implementing getStaticPaths and getStaticProps in a Next.js dynamic route to fetch GitHub repository data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      },\n    ],\n    fallback: true,\n  }\n}\n\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Image Generation\nDESCRIPTION: This snippet shows how to access dynamic route parameters when generating Open Graph images in Next.js using TypeScript and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Image({ params }: { params: { slug: string } }) {\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Image({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidate Path in Next.js Route Handler (JavaScript)\nDESCRIPTION: This code snippet shows how to use `revalidatePath` within a Next.js Route Handler in JavaScript. It retrieves the 'path' parameter from the request's search parameters, and if present, calls `revalidatePath` to invalidate the cache for that path. It then returns a JSON response indicating whether the revalidation was successful.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\n\nexport async function GET(request) {\n  const path = request.nextUrl.searchParams.get('path')\n\n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n\n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Registry - TypeScript\nDESCRIPTION: This snippet creates a StyledComponentsRegistry in TypeScript for managing styles in a Next.js application, ensuring styles are correctly handled on both server and client sides.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Route Rendering in Javascript\nDESCRIPTION: This code snippet shows how to conditionally render routes based on user role using Parallel Routes. The `checkUserRole` function determines the user's role, and the layout renders either the `admin` or `user` slot accordingly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkUserRole } from '@/lib/auth'\n\nexport default function Layout({ user, admin }) {\n  const role = checkUserRole()\n  return role === 'admin' ? admin : user\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalized Routing in Next.js Middleware\nDESCRIPTION: This code snippet shows how to implement internationalized routing using Next.js middleware. It checks for supported locales in the pathname and redirects to the appropriate localized route if necessary.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nlet locales = ['en-US', 'nl-NL', 'nl']\n\n// Get the preferred locale, similar to the above or using a library\nfunction getLocale(request) { ... }\n\nexport function middleware(request) {\n  // Check if there is any supported locale in the pathname\n  const { pathname } = request.nextUrl\n  const pathnameHasLocale = locales.some(\n    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n\n  if (pathnameHasLocale) return\n\n  // Redirect if there is no locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // e.g. incoming request is /products\n  // The new URL is now /en-US/products\n  return NextResponse.redirect(request.nextUrl)\n}\n\nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Font Utility Functions\nDESCRIPTION: This code snippet demonstrates creating utility functions to export font imports.  This allows for importing and applying the font's `className` where needed, ensuring preloading only when rendered. This example imports `Inter` and `Roboto_Mono` fonts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transition API in Next.js config\nDESCRIPTION: This code snippet demonstrates how to enable the experimental View Transition API by setting the `viewTransition` property to `true` within the `experimental` object of the `next.config.js` file. This configuration allows the application to leverage the View Transitions API for UI transitions. It's crucial to understand that this API is experimental and not recommended for production use.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/viewTransition.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    viewTransition: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component in JavaScript that Uses BaseButton\nDESCRIPTION: This JavaScript snippet defines a 'Page' component that imports the 'BaseButton' and styles from 'page.module.css'. The button is rendered within the page component, applying the primary CSS styling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n\nexport default function Page() {\n  return <BaseButton className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Securely Enabling Preview Mode with Redirection in Next.js\nDESCRIPTION: This JavaScript snippet shows a secure implementation of the preview API route, including secret validation and slug verification to prevent unauthorized access and open redirect vulnerabilities. It validates the provided secret, fetches the corresponding post by slug, and redirects the browser to the correct preview path using `res.redirect` after setting preview cookies. The function depends on `getPostBySlug` to retrieve post data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n\n  // If the slug doesn't exist prevent preview mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n\n  // Enable Preview Mode by setting the cookies\n  res.setPreviewData({})\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Authentication Middleware (After)\nDESCRIPTION: Updated middleware implementation for authentication using redirects instead of direct responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n\nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n\n  const loginUrl = new URL('/login', request.url)\n  loginUrl.searchParams.set('from', request.nextUrl.pathname)\n\n  return NextResponse.redirect(loginUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Page with Posts in Next.js\nDESCRIPTION: Implements a blog page component that fetches and renders a list of posts. This demonstrates how to create a nested route by placing it in a blog folder.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n\nexport default async function Page() {\n  const posts = await getPosts()\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n\nexport default async function Page() {\n  const posts = await getPosts()\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - dynamicParams configuration (JSX)\nDESCRIPTION: This code snippet configures the `dynamicParams` option to `false` in Next.js, which results in a 404 error if a route is visited that was not generated by `generateStaticParams`. It fetches a list of posts from an API and statically renders only the top 10 posts at build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\n// All posts besides the top 10 will be a 404\nexport const dynamicParams = false\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n  const topPosts = posts.slice(0, 10)\n\n  return topPosts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles in Next.js App Layout\nDESCRIPTION: This snippet demonstrates how to import global styles in the main layout of a Next.js app, ensuring consistent styling across the application by including the styles in the RootLayout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles/globals.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for CSP with Nonce in Next.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to add a Content Security Policy (CSP) header using middleware in Next.js, incorporating a dynamically generated nonce for enhanced security. It generates a unique nonce, constructs the CSP header string, and then applies it to both the request and the response. Dynamic rendering is required for nonce generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths with TypeScript in Next.js Dynamic Routes\nDESCRIPTION: Example showing implementation of getStaticPaths and getStaticProps in a TypeScript Next.js page with dynamic routes. This demonstrates defining paths to be statically generated, fetching data for each path, and rendering the component with the fetched data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {\n  InferGetStaticPropsType,\n  GetStaticProps,\n  GetStaticPaths,\n} from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticPaths = (async () => {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      }, // See the \"paths\" section below\n    ],\n    fallback: true, // false or \"blocking\"\n  }\n}) satisfies GetStaticPaths\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Type Declarations in Next.js TypeScript Project\nDESCRIPTION: This tsconfig.json configuration shows how to properly include custom type declaration files in a Next.js project. Instead of modifying the auto-generated next-env.d.ts file, it includes a separate custom type declaration file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n    //...truncated...\n  },\n  \"include\": [\n    \"new-types.d.ts\",\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Google Tag Manager events (Pages Router - JSX)\nDESCRIPTION: This code snippet illustrates how to send events to Google Tag Manager using the `sendGTMEvent` function from `@next/third-parties/google` within a Pages Router component. It defines a button that, when clicked, dispatches a custom event 'buttonClicked' with the value 'xyz'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sendGTMEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: NextJS Configuration for Taint API\nDESCRIPTION: Configuration setup to enable React's taint APIs in NextJS application for data security.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    taint: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Behavior with Link Component in App Router (JavaScript)\nDESCRIPTION: Example of disabling default scroll behavior with the Next.js Link component in App Router. Setting scroll to false prevents Next.js from scrolling to the top of the page after navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Events in Next.js - JSX\nDESCRIPTION: This snippet shows how to utilize the usePathname and useSearchParams hooks to listen for changes in the navigation state within a React component. It logs the current URL structure whenever the pathname or search parameters change.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  useEffect(() => {\n    const url = `${pathname}?${searchParams}`\n    console.log(url)\n    // You can now use the current URL\n    // ...\n  }, [pathname, searchParams])\n\n  return '...'\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS directives in Global Stylesheet (Pages Router)\nDESCRIPTION: This CSS file imports the Tailwind CSS directives, which are used to inject Tailwind's generated styles. This file needs to be imported in the custom app file to apply the styles globally in the application when using the Pages router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n\"@import 'tailwindcss';\"\n```\n\n----------------------------------------\n\nTITLE: Push Notification Manager Component - TypeScript\nDESCRIPTION: This React component manages push notification subscriptions. It checks for service worker and PushManager support, registers a service worker, handles subscribing and unsubscribing, and sends test notifications.  It uses React's useState and useEffect hooks to manage the component's state and side effects. It also utilizes server actions to handle the actual subscribing, unsubscribing, and notification sending logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction PushNotificationManager() {\n  const [isSupported, setIsSupported] = useState(false)\n  const [subscription, setSubscription] = useState<PushSubscription | null>(\n    null\n  )\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      setIsSupported(true)\n      registerServiceWorker()\n    }\n  }, [])\n\n  async function registerServiceWorker() {\n    const registration = await navigator.serviceWorker.register('/sw.js', {\n      scope: '/',\n      updateViaCache: 'none',\n    })\n    const sub = await registration.pushManager.getSubscription()\n    setSubscription(sub)\n  }\n\n  async function subscribeToPush() {\n    const registration = await navigator.serviceWorker.ready\n    const sub = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(\n        process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!\n      ),\n    })\n    setSubscription(sub)\n    const serializedSub = JSON.parse(JSON.stringify(sub))\n    await subscribeUser(serializedSub)\n  }\n\n  async function unsubscribeFromPush() {\n    await subscription?.unsubscribe()\n    setSubscription(null)\n    await unsubscribeUser()\n  }\n\n  async function sendTestNotification() {\n    if (subscription) {\n      await sendNotification(message)\n      setMessage('')\n    }\n  }\n\n  if (!isSupported) {\n    return <p>Push notifications are not supported in this browser.</p>\n  }\n\n  return (\n    <div>\n      <h3>Push Notifications</h3>\n      {subscription ? (\n        <>\n          <p>You are subscribed to push notifications.</p>\n          <button onClick={unsubscribeFromPush}>Unsubscribe</button>\n          <input\n            type=\"text\"\n            placeholder=\"Enter notification message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <button onClick={sendTestNotification}>Send Test</button>\n        </>\n      ) : (\n        <>\n          <p>You are not subscribed to push notifications.</p>\n          <button onClick={subscribeToPush}>Subscribe</button>\n        </>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Define Zod Schema for Signup Form Validation (JS)\nDESCRIPTION: This code snippet defines a Zod schema for validating signup form fields. It enforces constraints on name, email, and password, including minimum lengths, email format, and password complexity. The schema includes custom error messages for each validation rule.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { z } from 'zod'\n\nexport const SignupFormSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name must be at least 2 characters long.' })\n    .trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  password: z\n    .string()\n    .min(8, { message: 'Be at least 8 characters long' })\n    .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n    .regex(/[0-9]/, { message: 'Contain at least one number.' })\n    .regex(/[^a-zA-Z0-9]/, {\n      message: 'Contain at least one special character.',\n    })\n    .trim(),\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Next.js Rewrite Configuration with Multiple Phases\nDESCRIPTION: Shows how to configure rewrites with beforeFiles, afterFiles, and fallback phases for fine-grained control over routing behavior\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return {\n      beforeFiles: [\n        {\n          source: '/some-page',\n          destination: '/somewhere-else',\n          has: [{ type: 'query', key: 'overrideMe' }],\n        },\n      ],\n      afterFiles: [\n        {\n          source: '/non-existent',\n          destination: '/somewhere-else',\n        },\n      ],\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://my-old-site.com/:path*`,\n        },\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unstable_allowDynamic in Next.js Middleware\nDESCRIPTION: This code snippet demonstrates how to configure the `unstable_allowDynamic` option in a Next.js middleware file.  This allows specific files or modules that contain dynamic code evaluation to be used in the Edge Runtime. It defines an array of glob patterns that match files or directories to be excluded from the dynamic code check. Requires a `middleware.ts` file in the project root.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/07-edge.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {\n  unstable_allowDynamic: [\n    // allows a single file\n    '/lib/utilities.js',\n    // use a glob to allow anything in the function-bind 3rd party module\n    '**/node_modules/function-bind/**',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Next.js Version Using Codemod\nDESCRIPTION: Uses the Next.js codemod tool to automatically upgrade your application to the latest version. This is the recommended approach as it handles necessary code changes automatically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-upgrading.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod@canary upgrade latest\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Data Fetching in Next.js\nDESCRIPTION: Demonstrates basic server-side data fetching using fetch API in an async React Server Component. Returns a list of blog posts rendered as list items.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for CSP with Nonce in Next.js (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to add a Content Security Policy (CSP) header using middleware in Next.js, incorporating a dynamically generated nonce for enhanced security. It generates a unique nonce, constructs the CSP header string, and then applies it to both the request and the response. Dynamic rendering is required for nonce generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n\n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Project in Development Mode - Bash\nDESCRIPTION: This snippet details the commands required to install any new dependencies and then launch the Next.js app in development mode using either npm or yarn. Basic environment preparation with installed dependencies is required. The snippet helps verify that the local development setup is functioning correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n\n# or\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing ViewTransition Component from React\nDESCRIPTION: This code snippet showcases how to import the `unstable_ViewTransition` component from the `react` library.  This import is necessary to utilize the View Transition API within React components. The component is currently unstable and subject to change in future React releases.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/viewTransition.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { unstable_ViewTransition as ViewTransition } from 'react'\n```\n\n----------------------------------------\n\nTITLE: Creating Image Sitemaps in TypeScript\nDESCRIPTION: Implementation of image sitemaps using the images property in TypeScript. This approach follows Google's image sitemap protocol to help with image indexing by search engines.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://example.com',\n      lastModified: '2021-01-01',\n      changeFrequency: 'weekly',\n      priority: 0.5,\n      images: ['https://example.com/image.jpg'],\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for Next.js Development Server\nDESCRIPTION: These snippets describe enabling HTTPS for the Next.js development server using self-signed certificates. The `--experimental-https` flag generates a self-signed certificate, allowing secure local development, which is useful for webhooks and testing authentication. Custom certificates can be supplied using `--experimental-https-key` and `--experimental-https-cert` options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --experimental-https\n```\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useEffect in Next.js\nDESCRIPTION: This snippet demonstrates how to use React's 'useEffect' to perform data fetching on a Next.js page. It shows how to handle asynchronous API requests and manage loading states. Ensure you handle errors gracefully to enhance user experience.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/05-client-side-rendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react'\n\nexport function Page() {\n  const [data, setData] = useState(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('https://api.example.com/data')\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      const result = await response.json()\n      setData(result)\n    }\n\n    fetchData().catch((e) => {\n      // handle the error as needed\n      console.error('An error occurred while fetching the data: ', e)\n    })\n  }, [])\n\n  return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Tigris - TypeScript\nDESCRIPTION: This snippet outlines the functionality to load environment variables and configure the Tigris client in a TypeScript module. This is essential for establishing a connection to Tigris with the parameters specified in the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/tigris.ts\n// Loads the environment variables you specified previously in creating a Vercel project section and uses them to configure the Tigris client.\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Request Headers with Next.js in JavaScript\nDESCRIPTION: This snippet demonstrates reading HTTP request headers asynchronously in a JavaScript-based Next.js server component. Utilizing the `headers` function, it retrieves a read-only Web Headers object and uses the `get` method to access the 'user-agent' header. The `headers` function is asynchronous, requiring the use of async/await.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/headers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport default async function Page() {\n  const headersList = await headers()\n  const userAgent = headersList.get('user-agent')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport default async function Page() {\n  const authorization = (await headers()).get('authorization')\n  const res = await fetch('...', {\n    headers: { authorization }, // Forward the authorization header\n  })\n  const user = await res.json()\n\n  return <h1>{user.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cache and Re-rendering Routes in Next.js\nDESCRIPTION: Uses revalidatePath to manually revalidate data and re-render route segments below a specific path. This function revalidates the Data Cache and invalidates the Full Route Cache.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nrevalidatePath('/')\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Login Page in Middleware (After - Correct)\nDESCRIPTION: This code snippet shows the correct approach for handling authorization in Next.js Middleware v12.2+ by redirecting the user to a login page if they are not authenticated. It sets a 'from' query parameter to retain the original intended destination.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n\nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n\n  request.nextUrl.searchParams.set('from', request.nextUrl.pathname)\n  request.nextUrl.pathname = '/login'\n\n  return NextResponse.redirect(request.nextUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Data with use Hook in Client Component (Next.js)\nDESCRIPTION: This snippet demonstrates how to stream data from a Server Component to a Client Component using React's use hook in Next.js. It fetches blog posts and passes them as a promise to a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Posts from '@/app/ui/posts\nimport { Suspense } from 'react'\n\nexport default function Page() {\n  // Don't await the data fetching function\n  const posts = getPosts()\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Posts posts={posts} />\n    </Suspense>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Posts from '@/app/ui/posts\nimport { Suspense } from 'react'\n\nexport default function Page() {\n  // Don't await the data fetching function\n  const posts = getPosts()\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Posts posts={posts} />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Routing in Next.js\nDESCRIPTION: This snippet shows how to implement shallow routing in Next.js using the useRouter hook. It demonstrates updating the URL without triggering data fetching methods, and how to watch for URL changes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\n// Current URL is '/'\nfunction Page() {\n  const router = useRouter()\n\n  useEffect(() => {\n    // Always do navigations after the first render\n    router.push('/?counter=10', undefined, { shallow: true })\n  }, [])\n\n  useEffect(() => {\n    // The counter changed!\n  }, [router.query.counter])\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Function to Fetch Users in JavaScript\nDESCRIPTION: Implementation of a Server Function that fetches users from a database. This example uses the 'use server' directive at the file level in JavaScript to mark the function for server-side execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using npm\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js application based on the `with-context-api` example. The new application will be named `with-context-api-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-context-api with-context-api-app\n```\n\n----------------------------------------\n\nTITLE: Importing Global Stylesheet in Root Layout (App Router - JSX)\nDESCRIPTION: This JSX code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application. It defines the root layout component with metadata and imports the globals.css file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating an API Session (Pages Router) - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to create a session within a Next.js API route using the Pages Router. It imports the database connection (`db`). The `handler` function takes a request and response object, extracts user data from the request body, generates a session ID, inserts a session record into the database, and returns the session ID in the response. Error handling is included to return a 500 status code for internal server errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport db from '../../lib/db'\n\nexport default async function handler(req, res) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n\n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Component in JavaScript\nDESCRIPTION: Example of a loading.js file that creates a loading state for a dashboard route. This component will be automatically nested inside layout.js and wrapped in a Suspense boundary.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Session Expiration - TypeScript\nDESCRIPTION: This snippet retrieves the session cookie, decrypts it to get the payload, and then sets a new session cookie with an updated expiration time. If no session is found or the payload is invalid, it returns null. It uses `next/headers` to access and modify cookies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport async function updateSession() {\n  const session = (await cookies()).get('session')?.value\n  const payload = await decrypt(session)\n\n  if (!session || !payload) {\n    return null\n  }\n\n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n\n  const cookieStore = await cookies()\n  cookieStore.set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expires,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies Using maxAge\nDESCRIPTION: Illustrates how to delete a cookie by setting its maxAge to 0, which causes immediate expiration of the cookie in Next.js server actions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function delete(data) {\n  (await cookies()).set('name', 'value', { maxAge: 0 })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function delete(data) {\n  (await cookies()).set('name', 'value', { maxAge: 0 })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subtitles to a Video in Next.js\nDESCRIPTION: This code snippet shows how to add subtitles to a video displayed in a Next.js application, where the video and subtitle files are hosted on Vercel Blob. It fetches both the video URL and the subtitle file URL using `list` from `@vercel/blob` and includes a `<track>` element within the `<video>` tag to display the subtitles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nasync function VideoComponent({ fileName }) {\n  const { blobs } = await list({\n    prefix: fileName,\n    limit: 2,\n  })\n  const { url } = blobs[0]\n  const { url: captionsUrl } = blobs[1]\n\n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      <track src={captionsUrl} kind=\"subtitles\" srcLang=\"en\" label=\"English\" />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Nano ID Generator Function in JavaScript\nDESCRIPTION: Defines a 'nanoid' generator function to create unique identifiers of specified size using a predefined alphabet and a pool of random bytes. It relies on functions to fill the pool with random bytes. Inputs include the identifier size, with the default being 21 characters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { f as fillPool } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -4\\n};\\nimport { c as poolOffset } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -6\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 2\\n};\\nimport { urlAlphabet } from './url-alphabet/index.js';\\nimport { d as pool } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -5\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 7\\n};\\nlet nanoid = (size = 21)=>{\\n    fillPool((size -= 0));\\n    let id = '';\\n    for(let i = poolOffset - size; i < poolOffset; i++){\\n        id += urlAlphabet[pool[i] & 63];\\n    }\\n    return id;\\n};\\nexport { nanoid as j } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites for Multi-Zone Routing in Next.js\nDESCRIPTION: This snippet demonstrates how to set up rewrites in next.config.js to route requests to the correct zone. It uses environment variables to specify the domain for the blog zone.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync rewrites() {\n    return [\n        {\n            source: '/blog',\n            destination: `${process.env.BLOG_DOMAIN}/blog`,\n        },\n        {\n            source: '/blog/:path+',\n            destination: `${process.env.BLOG_DOMAIN}/blog/:path+`,\n        }\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures the Twitter metadata for a Next.js application, including the card type, title, description, site ID, creator, creator ID, and image. It demonstrates how to set these properties within the `twitter` property of the `metadata` export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: ['https://nextjs.org/og.png'], // Must be an absolute URL\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Profiles in Next.js TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up a cache profile in Next.js using the cacheLife option in the next.config.ts file. It defines a 'blog' profile with attributes such as 'stale', 'revalidate', and 'expire'. The configuration requires enabling the 'dynamicIO' flag under the 'experimental' section.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    dynamicIO: true,\n    cacheLife: {\n      blog: {\n        stale: 3600, // 1 hour\n        revalidate: 900, // 15 minutes\n        expire: 86400, // 1 day\n      },\n    },\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Checking if a Cookie Exists - TSX\nDESCRIPTION: This snippet demonstrates the use of the `has` method to check for the existence of a specific cookie in a Next.js page component. It asynchronously retrieves the cookie store to perform the check.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  const hasCookie = cookieStore.has('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Tagged Cache in JavaScript\nDESCRIPTION: Shows the use of revalidateTag in JavaScript for clearing pieces of cache. The operation takes place in the updateBookings function to handle cache invalidation for 'bookings-data'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateBookings() {\n  await updateBookingData()\n  revalidateTag('bookings-data')\n}\n```\n\n----------------------------------------\n\nTITLE: Robots Metadata HTML Output\nDESCRIPTION: This code shows the HTML output generated from the robots metadata configuration. It includes meta tags for `robots` and `googlebot` with the specified directives for controlling indexing and crawling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"robots\" content=\"index, follow\" />\n<meta\n  name=\"googlebot\"\n  content=\"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1\" />\n```\n\n----------------------------------------\n\nTITLE: Executing name-default-component Codemod in Next.js\nDESCRIPTION: This codemod transforms anonymous components into named components to ensure compatibility with Fast Refresh. It works for both function and arrow function components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod name-default-component\n```\n\n----------------------------------------\n\nTITLE: Configure Bundle Analyzer in next.config.js\nDESCRIPTION: Configures the @next/bundle-analyzer plugin in the `next.config.js` file. It checks the `ANALYZE` environment variable to enable the analyzer.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n\nmodule.exports = withBundleAnalyzer(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with auth example using Yarn\nDESCRIPTION: This command uses `create next-app` with Yarn to create a new Next.js application named `auth-app` based on the `auth` example.  It assumes that Yarn is installed globally.  The command initializes a Next.js project configured for authentication.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example auth auth-app\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage in Next.js Pages Router (JavaScript)\nDESCRIPTION: Example of importing and using the Next.js Link component in the Pages Router with JavaScript. The Link component enables client-side navigation between routes with prefetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Designing Loading UI in Next.js TypeScript\nDESCRIPTION: This TypeScript snippet defines a loading component to provide visual feedback while data is being fetched. This component can be used to show users that a response is pending during form submission.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function Loading() {\n  return <div>Loading...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading UI with loading.js (Next.js)\nDESCRIPTION: This example shows how to create a loading UI for a Next.js page using the loading.js file. It defines a simple loading state that will be displayed while the page content is being fetched.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Loading() {\n  // Define the Loading UI here\n  return <div>Loading...</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Loading() {\n  // Define the Loading UI here\n  return <div>Loading...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Loader with babel-loader in Webpack (JS)\nDESCRIPTION: This snippet demonstrates how to add a custom loader to the webpack configuration in Next.js. It shows how to add a rule for `.mdx` files, using the default babel-loader and the `@mdx-js/loader`. It requires the `@mdx-js/loader` to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/webpack.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example config for adding a loader that depends on babel-loader\n// This source was taken from the @next/mdx plugin source:\n// https://github.com/vercel/next.js/tree/canary/packages/next-mdx\nmodule.exports = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options,\n        },\n      ],\n    })\n\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSON-LD to a Next.js Page (JSX)\nDESCRIPTION: This code snippet shows how to add JSON-LD structured data to a Next.js page using a `<script>` tag with `dangerouslySetInnerHTML`. It defines a JSON-LD object representing a product and injects it into the page, which helps search engines understand the content.  This example is written in Javascript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { id } = await params\n  const product = await getProduct(id)\n\n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n\n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Dynamic Handling in Next.js\nDESCRIPTION: This snippet demonstrates how to utilize the dynamic export feature in Next.js to enforce static or dynamic rendering for a page. By using 'export const dynamic = 'force-static'', the page will be statically rendered, while 'export const dynamic = 'force-dynamic'' allows the page to be dynamically generated regardless of content. This ensures clarity in rendering behavior and prevents runtime errors associated with static versus dynamic content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-static-to-dynamic-error.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-static';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-dynamic';\n```\n\n----------------------------------------\n\nTITLE: Correct Custom Route Configuration in Next.js\nDESCRIPTION: This snippet demonstrates the correct way to define custom routes in Next.js, where the rewrite rule is properly wrapped in an array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/routes-must-be-array.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/feedback',\n        destination: '/feedback/general',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Next.js ESLint Plugin (js)\nDESCRIPTION: This snippet illustrates how to extend directly from the Next.js ESLint plugin. This is recommended if you have existing ESLint configurations with potentially conflicting settings for plugins like react, react-hooks, jsx-a11y, and import. By extending the plugin, you avoid collisions and ensure consistent behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\n    //...\n    'plugin:@next/next/recommended',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a home page (page.js) in Next.js App Router with JavaScript\nDESCRIPTION: This JavaScript code defines a simple home page component for a Next.js application using the App Router. It renders a heading that says \"Hello, Next.js!\". This is the basic setup for creating the main page within the app directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Disable SSR with next/dynamic (Pages Router)\nDESCRIPTION: This code snippet demonstrates how to disable server-side rendering (SSR) using the `ssr` option with `next/dynamic` in the `pages` router. This is useful for components that rely on browser-specific APIs and cannot be rendered on the server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport dynamic from 'next/dynamic'\n\nconst DynamicHeader = dynamic(() => import('../components/header'), {\n  ssr: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Install Prompt Component - JavaScript\nDESCRIPTION: This React component provides a prompt for iOS users to install the app to their home screen. It checks if the device is iOS and if the app is already running in standalone mode. If the app is not already installed on an iOS device, it displays instructions on how to add it to the home screen.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction InstallPrompt() {\n  const [isIOS, setIsIOS] = useState(false);\n  const [isStandalone, setIsStandalone] = useState(false);\n\n  useEffect(() => {\n    setIsIOS(\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream\n    );\n\n    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches);\n  }, []);\n\n  if (isStandalone) {\n    return null; // Don't show install button if already installed\n  }\n\n  return (\n    <div>\n      <h3>Install App</h3>\n      <button>Add to Home Screen</button>\n      {isIOS && (\n        <p>\n          To install this app on your iOS device, tap the share button\n          <span role=\"img\" aria-label=\"share icon\">\n            {' '}\n            ⎋{' '}\n          </span>\n          and then \"Add to Home Screen\"\n          <span role=\"img\" aria-label=\"plus icon\">\n            {' '}\n            ➕{' '}\n          </span>\n          .\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default function Page() {\n  return (\n    <div>\n      <PushNotificationManager />\n      <InstallPrompt />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Web App Manifest with Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a web app manifest file (`app/manifest.js`) in a Next.js application using JavaScript.  The manifest provides metadata about the PWA, such as its name, short name, description, and icons. The function returns an object that defines the PWA's properties including name, description, icons, and display settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function manifest() {\n  return {\n    name: 'Next.js PWA',\n    short_name: 'NextPWA',\n    description: 'A Progressive Web App built with Next.js',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#ffffff',\n    theme_color: '#000000',\n    icons: [\n      {\n        src: '/icon-192x192.png',\n        sizes: '192x192',\n        type: 'image/png',\n      },\n      {\n        src: '/icon-512x512.png',\n        sizes: '512x512',\n        type: 'image/png',\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Clerk using pnpm\nDESCRIPTION: This command uses `create-next-app` with `pnpm` to bootstrap a Next.js application pre-configured with Clerk. The `--example with-clerk` flag specifies the Clerk example to use, and `with-clerk-app` is the name of the new application directory. Requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-clerk with-clerk-app\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scheme in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a viewport object in TypeScript that sets the color scheme for the application using the color-scheme meta tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  colorScheme: 'dark',\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Authenticated Mutations with Server Actions (TypeScript)\nDESCRIPTION: This snippet illustrates enforcing authentication for performing mutations using server actions in TypeScript. It verifies user session and invokes unauthorized for failed authentications, ensuring only authenticated users can proceed with actions like updating profiles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use server'\n\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\nimport db from '@/app/lib/db'\n\nexport async function updateProfile(data: FormData) {\n  const session = await verifySession()\n\n  // If the user is not authenticated, return a 401\n  if (!session) {\n    unauthorized()\n  }\n\n  // Proceed with mutation\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected AMP Bind Attribute Syntax\nDESCRIPTION: Recommended alternative syntax using data-amp-bind-prop for compatibility with JSX and AMP specifications\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/amp-bind-jsx-alt.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ndata-amp-bind-prop='something'\n```\n\n----------------------------------------\n\nTITLE: Replacing Options with noStore Function\nDESCRIPTION: This JavaScript snippet shows a similar implementation of the unstable_noStore function for usage in situations where passing cache-related options to fetch is not desirable. The function prevents server components from being cached and statically rendered in a Next.js application. Dependencies include the next package, and this code is useful when db.query operations are involved. It expects setup for async operations and no specific input parameters are required.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_noStore.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default async function ServerComponent() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component Form (TypeScript)\nDESCRIPTION: This example shows a client component with a form, written in TypeScript, which triggers a server action to handle form submission and redirect.  The action is called `navigate` and imported from `./actions`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { navigate } from './actions'\n\nexport function ClientRedirect() {\n  return (\n    <form action={navigate}>\n      <input type=\"text\" name=\"id\" />\n      <button>Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Prefetching pages with router.prefetch\nDESCRIPTION: This code snippet demonstrates how to use `router.prefetch` to prefetch a page, enhancing client-side transitions after a login. It uses `useCallback` for the form submission handler and `useEffect` to prefetch the dashboard page after the component mounts. This improves the user experience by reducing navigation latency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function Login() {\n  const router = useRouter()\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault()\n\n    fetch('/api/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        /* Form data */\n      }),\n    }).then((res) => {\n      // Do a fast client-side transition to the already prefetched dashboard page\n      if (res.ok) router.push('/dashboard')\n    })\n  }, [])\n\n  useEffect(() => {\n    // Prefetch the dashboard page\n    router.prefetch('/dashboard')\n  }, [router])\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields */}\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Fonts with Tailwind CSS in Next.js Pages Router\nDESCRIPTION: Demonstrates using Google Fonts with Tailwind CSS in a Next.js application using the Pages Router. The fonts are loaded with CSS variables and applied to the main application wrapper.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={`${inter.variable} ${roboto_mono.variable} font-sans`}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps for Data Fetching in Next.js\nDESCRIPTION: Example showing how to implement getStaticProps to fetch external data at build time. This function fetches posts from an API and passes them as props to the Blog component during pre-rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Blog({ posts }) {\n  // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes (Pages Router - TSX)\nDESCRIPTION: This TypeScript code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes within the Pages router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"export default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example for Page Component\nDESCRIPTION: Illustrates a basic page component in Next.js using TypeScript, highlighting the structure for incorporating dynamic parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Session Cookie - JavaScript\nDESCRIPTION: This snippet deletes the 'session' cookie using the `next/headers` cookies API, effectively logging out the user. It imports 'server-only' and the `cookies` function from `next/headers`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport async function deleteSession() {\n  const cookieStore = await cookies()\n  cookieStore.delete('session')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens with Next.js using PNPM\nDESCRIPTION: Command to bootstrap a Next.js application with SuperTokens authentication using PNPM create next-app with the with-supertokens example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-supertokens with-supertokens-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with JavaScript\nDESCRIPTION: This JavaScript configuration file (`vitest.config.js`) defines the Vitest testing environment. It imports necessary modules, specifies plugins including `@vitejs/plugin-react`, and sets the test environment to `jsdom` for simulating a browser environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Metadata API usage - TSX\nDESCRIPTION: This code defines metadata using the Next.js Metadata API in a TypeScript file. It exports a `metadata` object with `title` and `description` properties.  The `RootLayout` component then renders the HTML structure, placing the provided `children` inside the body.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Redis example using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named 'roadmap' based on the 'with-redis' example. This bootstraps the project with the necessary dependencies and configuration for using Redis with Upstash.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-redis roadmap\n```\n\n----------------------------------------\n\nTITLE: Conditional Route Rendering in Typescript\nDESCRIPTION: This code snippet shows how to conditionally render routes based on user role using Parallel Routes. The `checkUserRole` function determines the user's role, and the layout renders either the `admin` or `user` slot accordingly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { checkUserRole } from '@/lib/auth'\n\nexport default function Layout({\n  user,\n  admin,\n}: {\n  user: React.ReactNode\n  admin: React.ReactNode\n}) {\n  const role = checkUserRole()\n  return role === 'admin' ? admin : user\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme Provider Component in JavaScript\nDESCRIPTION: This JavaScript snippet defines a ThemeProvider similar to the TypeScript example, effectively providing the theme context for children components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { createContext } from 'react'\n\nexport const ThemeContext = createContext({})\n\nexport default function ThemeProvider({ children }) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Removing node-sass with Yarn\nDESCRIPTION: This code snippet illustrates how to remove the 'node-sass' package from your project dependencies using Yarn. It aims to ensure that only the 'sass' package remains, which is the current standard.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/duplicate-sass.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove node-sass\n```\n\n----------------------------------------\n\nTITLE: Customizing Webpack Configuration in next.config.ts\nDESCRIPTION: This TypeScript code snippet shows how to customize the Webpack configuration in `next.config.ts`. It defines a `webpack` function that takes the current configuration and an options object, allowing modifications to the webpack config. It returns the modified config. Requires `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  webpack: (config, { isServer }) => {\n    // Modify the webpack config here\n    return config\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: getServerSideProps data fetching - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `getServerSideProps` in a Next.js page to fetch data from an external API (GitHub in this case) on each request and pass it as props to the page component. It includes type definitions for the fetched data and uses `InferGetServerSidePropsType` to infer the type of the props passed to the page component. The code utilizes the `fetch` API to retrieve data and `res.json()` to parse the response. The fetched data is then passed to the page component via the `props` object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Image Imports from External URLs\nDESCRIPTION: This code shows how to import and use an image from an external URL in a Next.js component with the specialized `<Image>` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\nimport logo from 'https://example.com/assets/logo.png'\n\nexport default () => (\n  <div>\n    <Image src={logo} placeholder=\"blur\" />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in JavaScript React\nDESCRIPTION: Demonstrates how to use the Next.js Form component to create a simple search form that appends the query parameter to the URL on submission. This example shows the JavaScript implementation in app directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Form from 'next/form'\n\nexport default function Search() {\n  return (\n    <Form action=\"/search\">\n      {/* On submission, the input value will be appended to\n          the URL, e.g. /search?query=abc */}\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Patterns in Next.js 12.3.0-15.2.0\nDESCRIPTION: Configuration for next/image component using object notation for remotePatterns. This allows specifying protocol, hostname, port, pathname and search parameters individually.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'assets.example.com',\n        port: '',\n        pathname: '/account123/**',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Options in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure Sass options within the `next.config.ts` file. Specifically, it shows how to define `additionalData` to inject a Sass variable into every Sass file. Requires the `NextConfig` type from 'next'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  sassOptions: {\n    additionalData: `$var: red;`,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler for Opt-in Mode (JavaScript)\nDESCRIPTION: Configuration in next.config.js to set the React Compiler to 'annotation' compilation mode for opt-in usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    reactCompiler: {\n      compilationMode: 'annotation',\n    },\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Navigation with Loading Indicator\nDESCRIPTION: Demonstrates integrating useLinkStatus hook in a navigation menu with loading feedback. Shows how to conditionally render loading state across multiple links.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport LoadingIndicator from './components/loading-indicator'\n\nconst links = [\n  { href: '/shop/electronics', label: 'Electronics' },\n  { href: '/shop/clothing', label: 'Clothing' },\n  { href: '/shop/books', label: 'Books' },\n]\n\nfunction Menubar() {\n  return (\n    <div>\n      {links.map((link) => (\n        <Link key={link.label} href={link.href}>\n          {link.label} <LoadingIndicator />\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring fetchCache in Next.js (JS)\nDESCRIPTION: This code snippet demonstrates how to configure the `fetchCache` option in a Next.js layout, page, or route using JavaScript. The `fetchCache` configuration controls the caching behavior of `fetch` requests within the route segment, allowing developers to choose between automatic caching, forcing caching, or forcing no caching. It overrides the default caching behavior of Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport const fetchCache = 'auto'\n// 'auto' | 'default-cache' | 'only-cache'\n// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Next.js Server in TypeScript\nDESCRIPTION: This code snippet initializes a custom Next.js server using TypeScript. It imports necessary modules like http, url, and next. It then creates a server instance, prepares the Next.js application, and sets up a request handler to process incoming requests.  The server listens on a specified port, defaulting to 3000, and logs a message indicating its status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { parse } from 'url'\nimport next from 'next'\n\nconst port = parseInt(process.env.PORT || '3000', 10)\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\napp.prepare().then(() => {\n  createServer((req, res) => {\n    const parsedUrl = parse(req.url!, true)\n    handle(req, res, parsedUrl)\n  }).listen(port)\n\n  console.log(\n    `> Server listening at http://localhost:${port} as ${\n      dev ? 'development' : process.env.NODE_ENV\n    }`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Channel with useChannel\nDESCRIPTION: This snippet demonstrates how to use the useChannel hook from @ably-labs/react-hooks to subscribe to an Ably channel and receive messages.  Every time a message is sent to the channel, a callback function logs it to the console.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from \"react\";\nimport { useChannel } from \"@ably-labs/react-hooks\";\n\nexport default function Home() {\n  const [channel] = useChannel(\"your-channel\", async (message) => {\n    console.log(\"Received Ably message\", message);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Producing a Response in Next.js Middleware (TS)\nDESCRIPTION: This snippet demonstrates how to return a direct response from a Next.js middleware function. It checks if a user is authenticated and, if not, returns a JSON response with an error message and a 401 status code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { isAuthenticated } from '@lib/auth'\n\n// Limit the middleware to paths starting with `/api/`\nexport const config = {\n  matcher: '/api/:function*',\n}\n\nexport function middleware(request: NextRequest) {\n  // Call our authentication function to check the request\n  if (!isAuthenticated(request)) {\n    // Respond with JSON indicating an error message\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Suspense Implementation for Content Streaming in JavaScript\nDESCRIPTION: Example of manually implementing Suspense boundaries for components in a Next.js page. Demonstrates how to wrap components that perform asynchronous actions with fallback UI to enable streaming.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n\nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for Next.js Server Actions\nDESCRIPTION: Configuration to specify additional safe origin domains that can invoke Server Actions. This helps prevent CSRF attacks by controlling which domains can make Server Action requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverActions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Matching Redirect Paths in Next.js\nDESCRIPTION: This snippet shows how to use path matching in redirects. The `source` can include patterns like `:slug` to match specific paths and append them into the `destination`. It supports both simple path segments and more complex path structures using wildcards (`*`) and regex.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-blog/:path*',\n        destination: '/blog/:path*',\n        permanent: false\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Record a Heap Profile with Node.js\nDESCRIPTION: This snippet shows how to record a heap profile from Node.js during a Next.js build process.  The `--heap-prof` flag passed to Node.js enables heap profiling, creating a `.heapprofile` file that can be loaded into Chrome DevTools to analyze memory usage and identify potential memory leaks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode --heap-prof node_modules/next/dist/bin/next build\n```\n\n----------------------------------------\n\nTITLE: Specifying a Subset for Google Fonts\nDESCRIPTION: This code snippet shows how to specify a subset when importing a Google Font using `next/font/google`.  Subsetting reduces the font file size, improving performance. This example sets the subset to 'latin'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n----------------------------------------\n\nTITLE: Updating Internal Navigation to Use Next.js Link Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to replace an `<a>` element with the `Link` component from Next.js to enable client-side navigation within a Next.js application, thereby preventing full-page refreshes. The updated component ensures seamless transitions between pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Home() {\n  return (\n    <div>\n      <Link href=\"/about\">About Us</Link>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Form Submission - TypeScript\nDESCRIPTION: This code snippet demonstrates how to redirect the user to a different route after a successful form submission in a Next.js API route using TypeScript. It calls an addPost function, and redirects to a specific post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const id = await addPost()\n  res.redirect(307, `/post/${id}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout with Nav Links - TypeScript\nDESCRIPTION: This snippet showcases a layout component that includes the NavLinks component created previously. It accepts children as props and renders the NavLinks within a standard HTML structure, supporting a page layout in a TypeScript file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLinks } from '@/app/ui/nav-links'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavLinks />\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Prismic Example (npm)\nDESCRIPTION: This command uses the `create-next-app` tool with npm to bootstrap a new Next.js application using the `cms-prismic` example. It creates a new directory named `cms-prismic-app` for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-prismic cms-prismic-app\n```\n\n----------------------------------------\n\nTITLE: Rendering Optimized Images with Next.js Image Component\nDESCRIPTION: Renders photos using the Next.js Image component with proper attributes including source path, alt text, dimensions, priority loading, and custom class name. Each image has an accompanying Unsplash attribution link.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/photos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/images/photo2.jpg\"\n  alt=\"Photo\"\n  width={1125}\n  height={750}\n  priority\n  className=\"next-image\"\n/>\n[Unsplash ↗ ](https://unsplash.com/photos/WeYamle9fDM)\n\n<Image\n  src=\"/images/photo.jpg\"\n  alt=\"Photo\"\n  width={1125}\n  height={750}\n  priority\n  className=\"next-image\"\n/>\n[Unsplash ↗ ](https://unsplash.com/photos/ndN00KmbJ1c)\n```\n\n----------------------------------------\n\nTITLE: Updating Session Expiration - JavaScript\nDESCRIPTION: This snippet retrieves the session cookie, decrypts it to get the payload, and then sets a new session cookie with an updated expiration time. If no session is found or the payload is invalid, it returns null. It uses `next/headers` to access and modify cookies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport async function updateSession() {\n  const session = (await cookies()).get('session')?.value\n  const payload = await decrypt(session)\n\n  if (!session || !payload) {\n    return null\n  }\n\n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)(\n    await cookies()\n  ).set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expires,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Right Arrow SVG Component in React\nDESCRIPTION: This React functional component renders an SVG graphic to be used as a right arrow icon, commonly for navigation purposes in UI components. The SVG is styled to be inline and adaptable to current color contexts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const RightArrow = () => (\n  <svg\n    viewBox=\"0 0 14 14\"\n    width=\"8px\"\n    height=\"14px\"\n    style={{\n      marginLeft: \"4px\",\n      display: \"inline-block\",\n      shapeRendering: \"inherit\",\n      verticalAlign: \"middle\",\n      fill: \"currentColor\",\n      \"path fill\": \"currentColor\",\n    }}\n  >\n    <path d=\"m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z\" />\n  </svg>\n);\n```\n\n----------------------------------------\n\nTITLE: Using beforeInteractive Strategy (App Router, TSX)\nDESCRIPTION: This code snippet illustrates how to use the `beforeInteractive` strategy with the `Script` component in a Next.js application using the App Router. It loads a script before any Next.js code is executed and before page hydration. This strategy is suitable for critical scripts needed by the entire site and should be placed inside the root layout (`app/layout.tsx`).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Button with Server Action in React\nDESCRIPTION: This snippet demonstrates how to create a like button component using a Server Action to increment likes. It uses useState for local state management and calls the Server Action on button click.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }: { initialLikes: number }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TypeScript Import/Export Errors in Next.js (JavaScript)\nDESCRIPTION: This example demonstrates the correct way to export and import TypeScript types in a Next.js project to avoid the 'Attempted import error' caused by improper type handling. The code snippet is related to the issue [vercel/next.js#7882](https://github.com/vercel/next.js/issues/7882).\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-types/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\nAttempted import error: 'TypeA' is not exported from './package-1'.\n```\n```\n\n----------------------------------------\n\nTITLE: Showing a Pending State During Server Function Execution with JavaScript\nDESCRIPTION: Shows how to use React's useActionState hook in JavaScript to display a loading indicator while a Server Function is executing. The button content changes based on the pending state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createPost } from '@/app/actions'\nimport { LoadingSpinner } from '@/app/ui/loading-spinner'\n\nexport function Button() {\n  const [state, action, pending] = useActionState(createPost, false)\n\n  return (\n    <button onClick={async () => action()}>\n      {pending ? <LoadingSpinner /> : 'Create Post'}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Open Graph Image Alt Text\nDESCRIPTION: This snippet shows how to set alt text for an Open Graph image using a separate .txt file and the resulting HTML output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nAbout Acme\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a root layout file (layout.tsx) in Next.js App Router with Typescript\nDESCRIPTION: This TypeScript code defines the root layout component for a Next.js application using the App Router. The root layout is required and must contain the `<html>` and `<body>` tags. The `children` prop represents the content of the application that will be rendered within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Content Based on Params (JavaScript)\nDESCRIPTION: This JavaScript example demonstrates how to display content based on dynamic route parameters. It accesses the `team` parameter from the `params` prop and uses it to personalize the header of the dashboard layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function DashboardLayout({ children, params }) {\n  const { team } = await params\n\n  return (\n    <section>\n      <header>\n        <h1>Welcome to {team}'s Dashboard</h1>\n      </header>\n      <main>{children}</main>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Headers with NextResponse.next() - TypeScript\nDESCRIPTION: Demonstrates how to forward modified headers in a response using NextResponse.next(). This allows you to enrich the request with additional metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// Given an incoming request...\nconst newHeaders = new Headers(request.headers)\n// Add a new header\nnewHeaders.set('x-version', '123')\n// And produce a response with the new headers\nreturn NextResponse.next({\n  request: {\n    // New request headers\n    headers: newHeaders,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookie Values in NextResponse - TypeScript\nDESCRIPTION: Retrieves all values of a specified cookie name or all cookies present in the response if no name is provided.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nresponse.cookies.getAll('experiments')\n// Alternatively, get all cookies for the response\nresponse.cookies.getAll()\n```\n\n----------------------------------------\n\nTITLE: Add Google Analytics to Root Layout (JSX)\nDESCRIPTION: This code snippet shows how to integrate Google Analytics into the root layout of a Next.js application using JSX and the `@next/third-parties/google` library.  The `GoogleAnalytics` component is imported and rendered within the `RootLayout`, with the Google Analytics measurement ID provided through the `gaId` prop. This implementation ensures Google Analytics is present across all routes within the app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Component with Custom Links in Next.js\nDESCRIPTION: This snippet defines a navigation component that uses the custom Link component to create navigation links with blocking functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { CustomLink as Link } from './custom-link'\n\nexport default function Nav() {\n  return (\n    <nav>\n      <Link href=\"/\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </nav>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { CustomLink as Link } from './custom-link'\n\nexport default function Nav() {\n  return (\n    <nav>\n      <Link href=\"/\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js development server\nDESCRIPTION: This bash command starts the Next.js development server using npm.  It utilizes the 'dev' script defined in `package.json`, which in this case is configured to use Turbopack for faster builds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Global MDX Components with Next.js (JS)\nDESCRIPTION: This JavaScript code defines global MDX components within a Next.js application. It imports the `Image` component from `next/image`, enabling custom styling and overriding default MDX elements. The `useMDXComponents` function allows customizing built-in components such as `h1` and `img`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport Image from 'next/image'\n\n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n\nexport function useMDXComponents(components) {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...props}\n      />\n    ),\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Server Functions in Client Components with JavaScript\nDESCRIPTION: Demonstrates importing and using Server Functions in a Client Component with JavaScript. The Server Function is imported from a separate file and used as a form action.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { createPost } from '@/app/actions'\n\nexport function Button() {\n  return <button formAction={createPost}>Create</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Sass Implementation (JavaScript)\nDESCRIPTION: This code snippet shows how to specify a Sass implementation (sass-embedded) in `next.config.js`. This allows you to use a specific Sass compiler other than the default one, potentially offering performance benefits or access to specific features. Uses JSDoc to define the type of NextConfig.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nconst nextConfig = {\n  sassOptions: {\n    implementation: 'sass-embedded',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: getServerSideProps data fetching - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates fetching data using `getServerSideProps` from an external API and passing it to the page component. It uses `fetch` to get data from the GitHub API and `res.json()` to parse it.  The fetched `repo` data, specifically `stargazers_count`, is then rendered in the `Page` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Data Requests with React Cache in TypeScript\nDESCRIPTION: Demonstrates how to use React's cache function to memoize data fetches for both metadata and page rendering in TypeScript. Prevents duplicate requests when the same data is needed in multiple places.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cache } from 'react'\nimport { db } from '@/app/lib/db'\n\n// getPost will be used twice, but execute only once\nexport const getPost = cache(async (slug: string) => {\n  const res = await db.query.posts.findFirst({ where: eq(posts.slug, slug) })\n  return res\n})\n```\n\n----------------------------------------\n\nTITLE: Using replace Prop with Link Component in App Router (TypeScript)\nDESCRIPTION: Example of using the replace prop with the Next.js Link component in App Router. When replace is set to true, the component will replace the current history state instead of adding a new URL to the browser's history stack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies Using delete() Method\nDESCRIPTION: Demonstrates how to delete a cookie using the cookies().delete() method in Next.js server actions. This directly removes the cookie with the specified name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function delete(data) {\n  (await cookies()).delete('name')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function delete(data) {\n  (await cookies()).delete('name')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Protection with React Taint APIs\nDESCRIPTION: Implementation of data protection using React's taint APIs to prevent sensitive data exposure to the client.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Access with Cache in Next.js\nDESCRIPTION: Demonstrates how to properly implement data access using cache directives for prerendering pages. Shows the transformation from uncached to cached data fetching with revalidation options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getRecentArticles() {\n  return db.query(...)\n}\n\nexport default async function Page() {\n  const articles = await getRecentArticles(token);\n  return <ArticleList articles={articles}>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getRecentArticles() {\n  \"use cache\"\n  // This cache can be revalidated by webhook or server action\n  // when you call revalidateTag(\"articles\")\n  cacheTag(\"articles\")\n  // This cache will revalidate after an hour even if no explicit\n  // revalidate instruction was received\n  cacheLife('hours')\n  return db.query(...)\n}\n\nexport default async function Page() {\n  const articles = await getRecentArticles(token);\n  return <ArticleList articles={articles}>\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing the Built-in Error Component in Next.js\nDESCRIPTION: This code shows how to reuse the built-in `Error` component from `next/error` in a Next.js page.  It fetches data using `getServerSideProps`, and if an error occurs (indicated by `res.ok`), it renders the built-in `Error` component with the corresponding `statusCode`. Otherwise, it displays the fetched data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Error from 'next/error'\n\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const errorCode = res.ok ? false : res.status\n  const json = await res.json()\n\n  return {\n    props: { errorCode, stars: json.stargazers_count },\n  }\n}\n\nexport default function Page({ errorCode, stars }) {\n  if (errorCode) {\n    return <Error statusCode={errorCode} />\n  }\n\n  return <div>Next stars: {stars}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @next/third-parties package\nDESCRIPTION: This command installs the `@next/third-parties` package along with the latest version of Next.js using npm.  It's recommended to use the latest or canary versions for experimental features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/third-parties@latest next@latest\n```\n\n----------------------------------------\n\nTITLE: Next.js Public Directory Structure (After)\nDESCRIPTION: This code snippet shows the updated directory structure after migrating to the `public` directory. The `static` directory is moved inside the `public` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/static-dir-deprecated.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\n  .\n  ├── pages/\n  │   └── index.js\n  └── public/\n      └── static/\n          └── my-image.jpg\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ably in Next.js App\nDESCRIPTION: This code snippet configures the Ably SDK using the @ably-labs/react-hooks library within a Next.js application. It sets the authentication URL and client ID, utilizing environment variables for dynamic configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureAbly } from \"@ably-labs/react-hooks\";\n\nconst prefix = process.env.API_ROOT || \"\";\nconst clientId =\n  Math.random().toString(36).substring(2, 15) +\n  Math.random().toString(36).substring(2, 15);\n\nconfigureAbly({\n  authUrl: `${prefix}/api/createTokenRequest?clientId=${clientId}`,\n  clientId: clientId,\n});\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Inspect Memory Usage during Next.js Build/Dev\nDESCRIPTION: This snippet demonstrates how to use the Node.js inspector to analyze memory usage. Adding `NODE_OPTIONS=--inspect` (or `--inspect-brk`) to the `next build` or `next dev` command exposes the inspector agent, allowing you to connect with tools like Chrome DevTools to record and analyze heap snapshots. Sending a `SIGUSR2` signal to the process when running with `--experimental-debug-memory-usage` creates a heap snapshot.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configure Next.js for MDX - JavaScript\nDESCRIPTION: This snippet configures the `next.config.mjs` file to enable MDX support in a Next.js application. It imports `createMDX` from `@next/mdx`, configures `pageExtensions` to include `.md` and `.mdx` files, and merges the MDX configuration with the Next.js configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions` to include markdown and MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n\nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n})\n\n// Merge MDX config with Next.js config\nexport default withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Generating robots.txt Dynamically in TypeScript\nDESCRIPTION: A TypeScript implementation that dynamically generates a robots.txt file in Next.js. It returns a Robots object with rules for all user agents and references a sitemap URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Rspack using pnpm\nDESCRIPTION: This command creates a new Next.js application named 'with-rspack-app' using the 'with-rspack' example. It utilizes pnpm to execute the create next-app command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-rspack with-rspack-app\n```\n\n----------------------------------------\n\nTITLE: Initializing a Route Handler\nDESCRIPTION: This code snippet initializes a basic route handler in Next.js using the App Router. It exports an async function `GET` that responds with an empty string. This is the first step in setting up Draft Mode, providing a basic endpoint to build upon.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  return new Response('')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Images with External Data in TypeScript\nDESCRIPTION: Generates an image in TypeScript using parameters and external data. It utilizes the `ImageResponse` class from Next.js to fetch post data dynamically and embed it in the image. The process requires asynchronous data fetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n\nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Login API Route in Next.js Pages Router (JavaScript)\nDESCRIPTION: This code snippet demonstrates an API route for handling login requests in Next.js pages directory using JavaScript. It extracts email and password from the request body, attempts to sign in the user using an authentication provider, and returns a success response upon successful authentication. It also handles potential authentication errors and returns appropriate error responses. It uses JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signIn } from '@/auth'\n\nexport default async function handler(req, res) {\n  try {\n    const { email, password } = req.body\n    await signIn('credentials', { email, password })\n\n    res.status(200).json({ success: true })\n  } catch (error) {\n    if (error.type === 'CredentialsSignin') {\n      res.status(401).json({ error: 'Invalid credentials.' })\n    } else {\n      res.status(500).json({ error: 'Something went wrong.' })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching an Entire Route with 'use cache' in Layout File (TypeScript)\nDESCRIPTION: Shows how to implement 'use cache' at the top of a layout file to prerender and cache the entire layout. This is part of the pattern for caching entire routes in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use cache'\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Sizes for srcset Generation in Next.js\nDESCRIPTION: This code snippet demonstrates how to configure image sizes in Next.js.  These sizes are concatenated with the device sizes to form the full array of sizes used to generate image `srcset` attributes. The image sizes should be smaller than the device sizes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Define WordPress Constants in PHP\nDESCRIPTION: These constants need to be defined in WordPress' wp-config.php file. HEADLESS_SECRET is used for public exchanges between frontend and backend. HEADLESS_URL is the URL for local development. GRAPHQL_JWT_AUTH_SECRET_KEY is the secret key for WPGraphQL JWT Authentication, and GRAPHQL_JWT_AUTH_CORS_ENABLE enables CORS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndefine('HEADLESS_SECRET', 'INSERT_RANDOM_SECRET_KEY');\n   define('HEADLESS_URL', 'INSERT_LOCAL_DEVELOPMENT_URL'); // http://localhost:3000 for local development\n   define('GRAPHQL_JWT_AUTH_SECRET_KEY', 'INSERT_RANDOM_SECRET_KEY');\n   define('GRAPHQL_JWT_AUTH_CORS_ENABLE', true);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Icon Imports in React\nDESCRIPTION: This snippet demonstrates how to optimize icon imports in React applications to reduce compilation and bundling time. Instead of importing all icons from a library, import only the specific icons that are needed.  It requires the `react-icons` library installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Instead of this:\nimport { Icon1, Icon2 } from 'react-icons/md'\n\n// Do this:\nimport Icon1 from 'react-icons/md/Icon1'\nimport Icon2 from 'react-icons/md/Icon2'\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies with NextRequest\nDESCRIPTION: This snippet demonstrates how to clear all cookies using the `clear` method of the `request.cookies` object in Next.js.  It removes the `Set-Cookie` header from the request.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.cookies.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component with Client and Server Components in JavaScript\nDESCRIPTION: This JavaScript snippet defines a Layout component similar to the TypeScript example, merging static and interactive elements for optimal rendering strategy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n\n// Layout is a Server Component by default\nexport default function Layout({ children }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Headers, Cookies, and Queries in Next.js\nDESCRIPTION: This example showcases how to conditionally apply headers based on the presence or absence of specific headers, cookies, or query parameters. The `has` and `missing` arrays are used to define matching criteria based on `type` (header, cookie, host, or query), `key`, and optional `value`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      // if the header `x-add-header` is present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-add-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the header `x-no-header` is not present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-no-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the source, query, and cookie are matched,\n      // the `x-authorized` header will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // header key/values since value is provided and\n            // doesn't use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-authorized',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, the `x-another-header` will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the host is `example.com`,\n      // this header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Bug Report Template with NPX\nDESCRIPTION: Command to create a new Next.js bug report template project using NPX package runner.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example reproduction-template-pages reproduction-app\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll to Top on Route Change in Next.js - TSX\nDESCRIPTION: This example demonstrates how to use the useRouter hook to navigate without resetting the scroll position to the top of the page by passing a second argument with scroll set to false.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes (Pages Router - JSX)\nDESCRIPTION: This JSX code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes within the Pages router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n\"export default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\"\n```\n\n----------------------------------------\n\nTITLE: Mutations with Server Actions (typescript)\nDESCRIPTION: This snippet demonstrates how to use the `forbidden` function to protect mutations in a Server Action based on user roles. It verifies the user's session, checks if they have the 'admin' role, and calls `forbidden()` if they don't, preventing unauthorized data updates. It assumes that `verifySession` retrieves the user's session and role information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\nimport db from '@/app/lib/db'\n\nexport async function updateRole(formData: FormData) {\n  const session = await verifySession()\n\n  // Ensure only admins can update roles\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n\n  // Perform the role update for authorized users\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Page component test (App Router)\nDESCRIPTION: This test checks if the `<Page />` component, located in `app/page.js`, renders a heading element. It utilizes `@testing-library/react` for rendering and querying the component and `@testing-library/jest-dom` for enhanced Jest matchers. The test renders the component, retrieves the heading, and asserts that it is present in the document.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ndescribe('Page', () => {\n  it('renders a heading', () => {\n    render(<Page />)\n\n    const heading = screen.getByRole('heading', { level: 1 })\n\n    expect(heading).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Layout in Next.js (Javascript)\nDESCRIPTION: This code defines a layout component for the `/dashboard` route using JavaScript. It exports a functional component that accepts a `children` prop, which will be a page or nested layout. The layout includes shared UI elements like a header or sidebar within a `<section>` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n\n      {children}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Links with Next.js Link in JavaScript\nDESCRIPTION: Shows how to create links dynamically in a Next.js setup using JavaScript. Similar to the TypeScript example, it involves linking to dynamic routes. It depends on the 'next' package for the Link component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n----------------------------------------\n\nTITLE: Creating a Static robots.txt File in Next.js\nDESCRIPTION: A static robots.txt file placed in the root of the app directory that follows the Robots Exclusion Standard. It specifies rules for all user agents, allowing access to the root path while disallowing access to private directories, and references a sitemap.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-Agent: *\nAllow: /\nDisallow: /private/\n\nSitemap: https://acme.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS directives in Global Stylesheet (App Router)\nDESCRIPTION: This CSS file imports the Tailwind CSS directives, which are used to inject Tailwind's generated styles. This file needs to be imported in the root layout to apply the styles globally in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n\"@import 'tailwindcss';\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Components in Next.js Compiler\nDESCRIPTION: This snippet demonstrates how to enable the styled-components configuration in the Next.js Compiler. It outlines basic and advanced configurations, allowing developers to customize how styled-components are handled in their application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    // see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.\n    styledComponents: {\n      // Enabled by default in development, disabled in production to reduce file size,\n      // setting this will override the default for all environments.\n      displayName?: boolean,\n      // Enabled by default.\n      ssr?: boolean,\n      // Enabled by default.\n      fileName?: boolean,\n      // Empty by default.\n      topLevelImportPaths?: string[],\n      // Defaults to [\"index\"].\n      meaninglessFileNames?: string[],\n      // Enabled by default.\n      minify?: boolean,\n      // Enabled by default.\n      transpileTemplateLiterals?: boolean,\n      // Empty by default.\n      namespace?: string,\n      // Disabled by default.\n      pure?: boolean,\n      // Enabled by default.\n      cssProp?: boolean,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component Usage in Pages Directory (TypeScript)\nDESCRIPTION: Shows how to implement the Next.js Form component in the pages directory structure using TypeScript. The form redirects to a search page with query parameters on submission.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from 'next/form'\n\nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      {/* On submission, the input value will be appended to\n          the URL, e.g. /search?query=abc */}\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unoptimized Image Component with Next.js\nDESCRIPTION: Example of creating a reusable unoptimized image component using Next.js Image. When the unoptimized property is set to true, the source image is served as-is without quality, size, or format changes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport Image from 'next/image'\n\nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cached Component with Non-serializable Children (TypeScript)\nDESCRIPTION: Shows how to create a cached component that accepts children as props. The children prop is non-serializable and will be passed through without inspection, allowing uncached content to be nested inside a cached component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CachedComponent({ children }: { children: ReactNode }) {\n  'use cache'\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Rendering in Next.js\nDESCRIPTION: This entry explains how Next.js supports partial rendering for improved performance by ensuring that only the segments of a page that need to change are re-rendered when navigating between routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Image\n  alt=\"How partial rendering works\"\n  srcLight=\"/docs/light/partial-rendering.png\"\n  srcDark=\"/docs/dark/partial-rendering.png\"\n  width=\"1600\"\n  height=\"945\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Size in TypeScript\nDESCRIPTION: Defines the image size in TypeScript for use in Open Graph and Twitter images, specifying width and height. Used to ensure consistent image dimensions across various platforms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const size = { width: 1200, height: 630 }\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing HTML/Body Tags in Next.js Root Layout\nDESCRIPTION: Demonstrates how to properly structure a Next.js Root Layout component by adding the required HTML and body tags. The diff shows the transformation from an incorrect implementation that directly returns children to the correct implementation that wraps content in proper HTML structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-root-layout-tags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nexport default function Layout({ children }: { children: React.ReactNode }) {\n-  return children\n+  return (\n+    <html>\n+      <body>\n+        {children}\n+      </body>\n+    </html>\n+  )\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Subset for Google Fonts\nDESCRIPTION: This code snippet shows how to specify a subset when importing a Google Font using `next/font/google`.  Subsetting reduces the font file size, improving performance. This example sets the subset to 'latin'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n----------------------------------------\n\nTITLE: Redirects with basePath Support in Next.js\nDESCRIPTION: Demonstrates how to manage redirects with `basePath` support in `next.config.js`. By default, `source` and `destination` are prefixed with `basePath`, but this can be disabled using the `basePath: false` property in the redirect configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n  async redirects() {\n    return [\n      {\n        source: '/with-basePath',\n        destination: '/another',\n        permanent: false,\n      },\n      {\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing cache revalidation on post updates (PHP)\nDESCRIPTION: This code implements cache revalidation for a headless WordPress setup. Whenever a post is updated (or its status changes), it sends a PUT request to the Next.js frontend's `/api/revalidate` endpoint. This endpoint revalidates the cache associated with the `wordpress` tag, ensuring that the Next.js site displays the most up-to-date content. Requires `HEADLESS_URL` and `HEADLESS_SECRET` constants to be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Adds the headless_revalidate function to the save_post action hook.\n * This function makes a PUT request to the headless site' api/revalidate endpoint with JSON body: paths = ['/path/to/page', '/path/to/another/page']\n * Requires HEADLESS_URL and HEADLESS_SECRET to be defined in wp-config.php\n *\n * @param int $post_ID The ID of the post being saved.\n * @return void\n */\nadd_action('transition_post_status', 'headless_revalidate', 10, 3);\nfunction headless_revalidate(string $new_status, string $old_status, object $post ): void\n{\n  if ( ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) || ( defined( 'DOING_CRON' ) && DOING_CRON ) ) {\n    return;\n  }\n\n  // Ignore drafts and inherited posts.\n  if ( ( 'draft' === $new_status && 'draft' === $old_status ) || 'inherit' === $new_status ) {\n    return;\n  }\n\n  $frontendUrl = HEADLESS_URL;\n  $headlessSecret = HEADLESS_SECRET;\n\n  $data = json_encode([\n    'tags'  => ['wordpress'],\n  ]);\n\n  $response = wp_remote_request(\"$frontendUrl/api/revalidate/\", [\n    'method'  => 'PUT',\n    'body'    => $data,\n    'headers' => [\n      'X-Headless-Secret-Key' => $headlessSecret,\n      'Content-Type'  => 'application/json',\n    ],\n  ]);\n\n  // Check if the request was successful\n  if (is_wp_error($response)) {\n    // Handle error\n    error_log($response->get_error_message());\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Methods in Next.js Route Handlers\nDESCRIPTION: Shows how to implement all supported HTTP methods (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS) in a Next.js route handler. Each method receives a Request object parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {}\n\nexport async function HEAD(request: Request) {}\n\nexport async function POST(request: Request) {}\n\nexport async function PUT(request: Request) {}\n\nexport async function DELETE(request: Request) {}\n\nexport async function PATCH(request: Request) {}\n\n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.\nexport async function OPTIONS(request: Request) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {}\n\nexport async function HEAD(request) {}\n\nexport async function POST(request) {}\n\nexport async function PUT(request) {}\n\nexport async function DELETE(request) {}\n\nexport async function PATCH(request) {}\n\n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.\nexport async function OPTIONS(request) {}\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperTokens with Next.js using create-supertokens-app (Yarn)\nDESCRIPTION: Command to create a Next.js application with SuperTokens authentication using the official SuperTokens CLI tool with Yarn, allowing further customization during setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn create-supertokens-app@latest --frontend=next\n```\n\n----------------------------------------\n\nTITLE: MSW Initialization using pnpm\nDESCRIPTION: This command initializes Mock Service Worker in the public directory. It's used to generate the `mockServiceWorker.js` file, which is essential for MSW to intercept requests in the browser. This uses the pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm msw init public/\n```\n\n----------------------------------------\n\nTITLE: Route Announcer Implementation in Next.js\nDESCRIPTION: Automatically announces page transitions for screen readers using document title, H1 element, or URL pathname\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/accessibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Route announcer checks:\n// 1. document.title\n// 2. <h1> element\n// 3. URL pathname\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route for Redirects in Next.js Pages Router\nDESCRIPTION: API Route implementation for the Pages Router that handles redirect requests and returns redirect information from a JSON file. Includes validation and error handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport redirects from '@/app/redirects/redirects.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n\n  // Return the redirect entry\n  return res.json(redirect)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport redirects from '@/app/redirects/redirects.json'\n\nexport default function handler(req, res) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = redirects[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n\n  // Return the redirect entry\n  return res.json(redirect)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Convex Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application using the Convex example. It bootstraps the project with the necessary configurations for Convex integration. This requires npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example convex convex-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions for Push Notifications - JavaScript\nDESCRIPTION: This code defines server actions for subscribing and unsubscribing users, and sending push notifications using the web-push library. It uses environment variables for VAPID keys. In a production environment, the subscription data should be stored in a database.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n'use server';\n\nimport webpush from 'web-push';\n\nwebpush.setVapidDetails(\n  '<mailto:your-email@example.com>',\n  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,\n  process.env.VAPID_PRIVATE_KEY!\n);\n\nlet subscription= null;\n\nexport async function subscribeUser(sub) {\n  subscription = sub;\n  // In a production environment, you would want to store the subscription in a database\n  // For example: await db.subscriptions.create({ data: sub })\n  return { success: true };\n}\n\nexport async function unsubscribeUser() {\n  subscription = null;\n  // In a production environment, you would want to remove the subscription from the database\n  // For example: await db.subscriptions.delete({ where: { ... } })\n  return { success: true };\n}\n\nexport async function sendNotification(message) {\n  if (!subscription) {\n    throw new Error('No subscription available');\n  }\n\n  try {\n    await webpush.sendNotification(\n      subscription,\n      JSON.stringify({\n        title: 'Test Notification',\n        body: message,\n        icon: '/icon.png',\n      })\n    );\n    return { success: true };\n  } catch (error) {\n    console.error('Error sending push notification:', error);\n    return { success: false, error: 'Failed to send notification' };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yoga Design System using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the Yoga Design System example. It initializes a project named `with-yoga-app` using the `with-yoga` example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-yoga with-yoga-app\n```\n\n----------------------------------------\n\nTITLE: Configure Sanity API Read Token\nDESCRIPTION: This code snippet shows how to add a SANITY_API_READ_TOKEN to a local environment file. It is used for authenticating live previews. Requires access to manage.sanity.io to generate the token. The setup ensures secure access to Sanity API features in development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSANITY_API_READ_TOKEN=\"<paste your token here>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running in Development Mode (npm)\nDESCRIPTION: These commands install the necessary dependencies for the Next.js application using npm and then start the development server. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Article Open Graph Metadata in Next.js (JSX)\nDESCRIPTION: This code configures the Open Graph metadata for an article, including title, description, type, published time, and authors. It shows how to set the `type` to 'article' and include article-specific properties like `publishedTime` and `authors` in the `metadata` export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    type: 'article',\n    publishedTime: '2023-01-01T00:00:00.000Z',\n    authors: ['Seb', 'Josh'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Metadata with JavaScript - Next.js\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `generateMetadata` function to obtain and return dynamic metadata, utilizing fetch to gather necessary data based on route parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function generateMetadata({ params, searchParams }, parent) {\n  // read route params\n  const { id } = await params\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Optimized Background Images with CSS image-set in Next.js\nDESCRIPTION: This example demonstrates how to use getImageProps to generate an optimized background image using the CSS image-set function, converting the srcSet string to the appropriate CSS syntax.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getImageProps } from 'next/image'\n\nfunction getBackgroundImage(srcSet = '') {\n  const imageSet = srcSet\n    .split(', ')\n    .map((str) => {\n      const [url, dpi] = str.split(' ')\n      return `url(\"${url}\") ${dpi}`\n    })\n    .join(', ')\n  return `image-set(${imageSet})`\n}\n\nexport default function Home() {\n  const {\n    props: { srcSet },\n  } = getImageProps({ alt: '', width: 128, height: 128, src: '/img.png' })\n  const backgroundImage = getBackgroundImage(srcSet)\n  const style = { height: '100vh', width: '100vw', backgroundImage }\n\n  return (\n    <main style={style}>\n      <h1>Hello World</h1>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths with JavaScript in Next.js Dynamic Routes\nDESCRIPTION: JavaScript implementation of getStaticPaths and getStaticProps for Next.js dynamic routes. Shows how to define static paths, fetch data from an external API, and render the page with the fetched data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      }, // See the \"paths\" section below\n    ],\n    fallback: true, // false or \"blocking\"\n  }\n}\n\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with getStaticProps (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use `getStaticProps` in a Next.js page to fetch data from an API and pass it as props to the page component. It fetches repository data from the GitHub API and returns it as props. The component then renders the number of stargazers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect PostCSS Configuration (instantiated)\nDESCRIPTION: This code snippet demonstrates an incorrect PostCSS configuration where a plugin is instantiated with configuration directly within the plugins array. The corrected example shows the proper way to include plugin configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    require('postcss-plugin')({\n      optionA: '...',\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Cache Profiles\nDESCRIPTION: Use inline cache profiles directly within a component to set custom caching behavior\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use cache'\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport default async function Page() {\n  cacheLife({\n    stale: 3600, // 1 hour\n    revalidate: 900, // 15 minutes\n    expire: 86400, // 1 day\n  })\n\n  return <div>Page</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use cache'\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport default async function Page() {\n  cacheLife({\n    stale: 3600, // 1 hour\n    revalidate: 900, // 15 minutes\n    expire: 86400, // 1 day\n  })\n\n  return <div>Page</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler for Static JSON Response (TypeScript)\nDESCRIPTION: This code demonstrates a Route Handler that returns a static JSON response.  It exports an asynchronous `GET` function that returns a `Response` object with a JSON payload. This will render a static JSON file during `next build` when using static export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function GET() {\n  return Response.json({ name: 'Lee' })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object-Based href with Query Parameters in App Router (JavaScript)\nDESCRIPTION: Example of using an object-based href with query parameters in the Next.js Link component for App Router. This approach allows structured navigation to routes with query parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Navigate to /about?name=test\nexport default function Page() {\n  return (\n    <Link\n      href={{\n        pathname: '/about',\n        query: { name: 'test' },\n      }}\n    >\n      About\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Attaching getStaticProps to Page Component in Next.js\nDESCRIPTION: This code snippet demonstrates the incorrect way of attaching `getStaticProps` to a Next.js page component. `getStaticProps` should not be a property of the component but rather a separate exported function. This example will cause an error because Next.js expects `getStaticProps` to be a named export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-component-member.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page(props) {\n  return <p>hello world</p>\n}\n\nPage.getStaticProps = () => ({\n  props: {\n    hello: 'world',\n  },\n})\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Using useRouter for Navigation in Next.js - JSX\nDESCRIPTION: This snippet demonstrates how to use the useRouter hook from Next.js to programmatically navigate to the '/dashboard' route when a button is clicked. It imports useRouter from 'next/navigation' and creates a button that uses the router's push method to navigate.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard/')}> \n      Dashboard\n    </button>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing files with side effects (TypeScript)\nDESCRIPTION: This code snippet shows how to import a file with side effects inside the `register` function in `instrumentation.ts`. The `import` statement is awaited to ensure the side effects are applied before other code executes. This approach colocates all side effects in one place, preventing unintended global side effects. It imports a hypothetical package named 'package-with-side-effect'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function register() {\n  await import('package-with-side-effect')\n}\n```\n\n----------------------------------------\n\nTITLE: Async Headers API Usage in Next.js 15\nDESCRIPTION: Example showing both recommended async and temporary sync usage of the headers API in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { headers } from 'next/headers'\n\n// Before\nconst headersList = headers()\nconst userAgent = headersList.get('user-agent')\n\n// After\nconst headersList = await headers()\nconst userAgent = headersList.get('user-agent')\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { headers, type UnsafeUnwrappedHeaders } from 'next/headers'\n\n// Before\nconst headersList = headers()\nconst userAgent = headersList.get('user-agent')\n\n// After\nconst headersList = headers() as unknown as UnsafeUnwrappedHeaders\n// will log a warning in dev\nconst userAgent = headersList.get('user-agent')\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Next.js API Route\nDESCRIPTION: Shows how to handle form submissions and redirect clients to a specified path using Next.js API routes. Includes error handling for failed operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { name, message } = req.body\n\n  try {\n    await handleFormInputAsync({ name, message })\n    res.redirect(307, '/')\n  } catch (err) {\n    res.status(500).send({ error: 'Failed to fetch data' })\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  const { name, message } = req.body\n\n  try {\n    await handleFormInputAsync({ name, message })\n    res.redirect(307, '/')\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts in Next.js Application - TSX\nDESCRIPTION: This TypeScript code snippet demonstrates how to fetch blog posts from an API using async/await in a Next.js Page Component. It handles the fetching of data and rendering of posts dynamically. The resulting list is wrapped in a React component for display.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Font to a Specific Page (App Router)\nDESCRIPTION: This code snippet demonstrates applying a font to a specific page in a Next.js application using the app router. It imports the `roboto_mono` font from a utility function and applies its `className` to an `h1` element within the `Page` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { roboto_mono } from './fonts'\n\nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Caching a Page with Nested Components (TypeScript)\nDESCRIPTION: Shows how 'use cache' at the page level affects nested components. When a page is cached, all components imported and nested within it inherit the caching behavior automatically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'use cache'\n\nasync function Users() {\n  const users = await fetch('/api/users')\n  // loop through users\n}\n\nexport default function Page() {\n  return (\n    <main>\n      <Users />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Function-based Configuration\nDESCRIPTION: Shows how to use a function to create dynamic Next.js configuration based on build phase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nexport default (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Convex Database with TypeScript\nDESCRIPTION: This snippet defines a query function using Convex's API. It retrieves documents from the database based on the provided arguments, which are validated using the `convex/values` module. The function is then utilized in a React component to fetch data asynchronously.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n    console.log(args.first, args.second);\n    return documents;\n  },\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Removing React Properties in Next.js Compiler\nDESCRIPTION: This snippet details how to utilize the Next.js Compiler to remove specific JSX properties, primarily for testing purposes. It includes options for default regex matches as well as custom property removals.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    reactRemoveProperties: true,\n  },\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    // The regexes defined here are processed in Rust so the syntax is different from\n    // JavaScript `RegExp`s. See https://docs.rs/regex.\n    reactRemoveProperties: { properties: ['^data-custom$'] },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Incoming Request Logging\nDESCRIPTION: Disables logging of all incoming requests during Next.js development by setting `logging.incomingRequests` to `false` in `next.config.js`. This affects logging only in the development environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  logging: {\n    incomingRequests: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Subset for Google Fonts\nDESCRIPTION: This code snippet shows how to specify a subset when importing a Google Font using `next/font/google`.  Subsetting reduces the font file size, improving performance. This example sets the subset to 'latin'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n----------------------------------------\n\nTITLE: Configure Optimize Package Imports in Next.js\nDESCRIPTION: This snippet shows how to configure Next.js to automatically optimize imports for certain packages, particularly those that use barrel files. This configuration is added to the `next.config.js` file. Turbopack does this automatically and does not need this configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    optimizePackageImports: ['package-name'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Content-Type-Options header (JavaScript)\nDESCRIPTION: This code shows how to configure the `X-Content-Type-Options` header, which prevents the browser from attempting to guess the type of content. The only valid value is `nosniff`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'X-Content-Type-Options',\n  value: 'nosniff'\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Dynamic Import Options - After\nDESCRIPTION: This code demonstrates the correct way to pass options to the `next/dynamic` function in Next.js. The options are passed directly as an object literal. This fixes the error related to invalid options type.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-dynamic-options-type.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponent = dynamic(() => import('../components/hello'), {\n  loading: () => <p>...</p>,\n  ssr: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Babel Plugins in Next.js\nDESCRIPTION: This code snippet demonstrates how to add a Babel plugin to a Next.js project using the `.babelrc` file.  It extends the basic configuration by including the `@babel/plugin-proposal-do-expressions` plugin, while still utilizing the `next/babel` preset. This enables the use of do-expressions in the project, while maintaining compatibility with Next.js's default Babel settings. Additional plugins can be added similarly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [\"@babel/plugin-proposal-do-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Locales Using next/router in Next.js\nDESCRIPTION: This example shows how to use the next/router methods to programmatically transition between locales in a Next.js application. It demonstrates specifying the locale in the transition options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function IndexPage(props) {\n  const router = useRouter()\n\n  return (\n    <div\n      onClick={() => {\n        router.push('/another', '/another', { locale: 'fr' })\n      }}\n    >\n      to /fr/another\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring basePath in next.config.mjs\nDESCRIPTION: This code snippet demonstrates how to configure the `basePath` in the `next.config.mjs` file in Next.js.  It accesses the environment variable `NEXT_PUBLIC_BASE_PATH` to set the base path for the application. This is useful for deploying the application to a sub-path on a domain.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Fetching Post Data - Next.js with JavaScript\nDESCRIPTION: This snippet fetches a blog post by its ID using the fetch API without caching. It ensures that the post exists, or triggers a not found error if it does not.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { notFound } from 'next/navigation'\n\nasync function getPost(id) {\n  const res = await fetch(`https://api.vercel.app/blog/${id}`)\n  const post = await res.json()\n  if (!post) notFound()\n  return post\n}\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n\n  return posts.map((post) => ({\n    id: String(post.id),\n  }))\n}\n\nexport async function generateMetadata({ params }) {\n  const { id } = await params\n  const post = await getPost(id)\n\n  return {\n    title: post.title,\n  }\n}\n\nexport default async function Page({ params }) {\n  const { id } = await params\n  const post = await getPost(id)\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </article>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Dynamic Scope in Next.js (JavaScript)\nDESCRIPTION: This function, `markCurrentScopeAsDynamic`, handles scenarios where a route needs to be dynamically rendered due to the use of specific expressions. It checks for various conditions such as `isUnstableCacheCallback`, `dynamicShouldError`, and `prerenderState` to determine the appropriate action, which may include throwing an error, postponing rendering, or setting the revalidation time to 0. If the route is being statically generated and a dynamic expression is encountered, it throws a `DynamicServerError`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 2\n};\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 6\n};\nimport { getPathname } from '../../lib/url';\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 4\n};\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nimport { f as postponeWithTracking } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: -8\n};\nfunction markCurrentScopeAsDynamic(store, expression) {\n    const pathname = getPathname(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        return;\n    } else if (store.dynamicShouldError) {\n        throw new StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \\\"error\\\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (store.prerenderState) {\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\nexport { markCurrentScopeAsDynamic };\nexport { markCurrentScopeAsDynamic as i } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using useSWR hook for data fetching in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the `useSWR` hook to fetch data in a React component. It defines a fetcher function that fetches data from the specified URL and parses the response as JSON. The `useSWR` hook is then used with the '/api/user' key and the fetcher function.  The returned `data` and `error` values can be used to render the component based on the fetching state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport useSWR from 'swr'\n\nexport function Profile() {\n  const fetcher = (url) => fetch(url).then((res) => res.json())\n  // The same SWR pattern you already know\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Facebook Pixel Example (npm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-facebook-pixel` example from the Next.js repository. It utilizes `create-next-app` via `npx` to bootstrap the project. The resulting application, `with-facebook-pixel-app`, includes the necessary configuration for Facebook Pixel integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-facebook-pixel with-facebook-pixel-app\n```\n\n----------------------------------------\n\nTITLE: Importing EdgeQL query builder - TypeScript\nDESCRIPTION: This is an example of how to import the generated EdgeQL query builder in a TypeScript file. It imports the default export from the `dbschema/edgeql-js` directory, aliasing it to `e`. This allows you to use the query builder in your application code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport e from \"./dbschema/edgeql-js\";\n```\n\n----------------------------------------\n\nTITLE: NextJS Page with Protected Data Handling\nDESCRIPTION: Example of a NextJS page component showing how tainted data triggers errors when passed to client components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = await getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Function Output with 'use cache' (JavaScript)\nDESCRIPTION: Demonstrates applying 'use cache' to an asynchronous JavaScript function that fetches data. This caches the function's output for reuse, improving performance for expensive operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getData() {\n  'use cache'\n\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MDX Components with useMDXComponents in JavaScript\nDESCRIPTION: This JavaScript code snippet defines a function `useMDXComponents` that accepts an object of MDX components and returns a new object with the provided components merged with the existing ones. The function is exported for use in a Next.js application. No explicit type definitions are used here.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Element to Order Array in JavaScript\nDESCRIPTION: This code adds an element 'a' to the previously initialized array 'order'. It requires the 'order' array to be declared. This is a side-effect as it modifies the order array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\norder.push(\"a\");\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cache Configuration in TSX Component\nDESCRIPTION: This TSX snippet shows how to utilize a custom cache profile, 'blog', in a Next.js component using the unstable_cacheLife from 'next/cache'. The function incorporates the 'use cache' directive and employs the fetch API to retrieve data. It requires setting up a cache profile in Next.js configuration and using the directive correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport async function getCachedData() {\n  'use cache'\n  cacheLife('blog')\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Using next/compat/router for compatibility\nDESCRIPTION: This code snippet shows how to use `next/compat/router` to create components that work in both the `app` and `pages` directories.  It checks if the router instance is ready and uses `useSearchParams` to access search parameters.  This is beneficial when transitioning applications to the `app` router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/compat/router'\nimport { useSearchParams } from 'next/navigation'\nconst MyComponent = () => {\n  const router = useRouter() // may be null or a NextRouter instance\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    if (router && !router.isReady) {\n      return\n    }\n    // In `app/`, searchParams will be ready immediately with the values, in\n    // `pages/` it will be available after the router is ready.\n    const search = searchParams.get('search')\n    // ...\n  }, [router, searchParams])\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cache Tag in Next.js JavaScript\nDESCRIPTION: Demonstrates how to use the revalidateTag function in JavaScript to revalidate cached data tagged with 'my-data'. It is part of the server-side submit function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('my-data')\n}\n```\n\n----------------------------------------\n\nTITLE: Template Component Layout Usage Example\nDESCRIPTION: Demonstrates how a template is automatically given a unique key within a layout, enabling component remounting and state reset on navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/template.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  {/* Note that the template is automatically given a unique key. */}\n  <Template key={routeParam}>{children}</Template>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Playwright Example (pnpm)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with a pre-configured Playwright setup. It utilizes the `--example` flag to specify the `with-playwright` example. It requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-playwright with-playwright-app\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote MDX in Next.js App Router (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to fetch and render remote MDX content in a Next.js application using the App Router. It utilizes `next-mdx-remote/rsc` to render MDX fetched from an external source.  The `MDXRemote` component is used to render the fetched markdown string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n\nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Form in Next.js JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a search form that redirects to a results page in a Next.js application. It makes use of the 'next/form' import and the form is configured to use '/search' as its action. Upon submission, the search query is appended to the URL as parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from 'next/form'\n\nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build with Memory Usage Debugging\nDESCRIPTION: This snippet shows how to run the Next.js build command with the `--experimental-debug-memory-usage` flag. This mode prints out continuous information about memory usage during the build process, including heap usage and garbage collection statistics. Heap snapshots are automatically taken when memory usage approaches the configured limit.  Available starting in `14.2.0`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Managing Configuration Changes in Next.js with JavaScript\nDESCRIPTION: This snippet covers the adjustment of Next.js config files to accommodate changes in features such as `bundlePagesExternals` and `serverComponentsExternalPackages`, showing their transition to stable releases as `bundlePagesRouterDependencies` and `serverExternalPackages`. This maintenance is vital for managing build and deployment aspects efficiently.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  // Before\\n  experimental: {\\n    bundlePagesExternals: true,\\n  },\\n\\n  // After\\n  bundlePagesRouterDependencies: true,\\n}\\n\\nmodule.exports = nextConfig\n```\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  // Before\\n  experimental: {\\n    serverComponentsExternalPackages: ['package-name'],\\n  },\\n\\n  // After\\n  serverExternalPackages: ['package-name'],\\n}\\n\\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control in getServerSideProps (JavaScript)\nDESCRIPTION: This code demonstrates setting the `Cache-Control` header in `getServerSideProps` using JavaScript. It configures the cache with `s-maxage=10` and `stale-while-revalidate=59`, meaning the response is considered fresh for 10 seconds and will serve stale content while revalidating for 59 seconds. The `res.setHeader` method is used to set the header.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport async function getServerSideProps({ req, res }) {\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n\n  return {\n    props: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for GitHub Actions uses the actions/cache action to cache npm packages and the Next.js cache. It generates a new cache when packages or source files change and can restore from a prior cache if only source files changed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuses: actions/cache@v4\nwith:\n  # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node\n  path: |\n    ~/.npm\n    ${{ github.workspace }}/.next/cache\n  # Generate a new cache whenever packages or source files change.\n  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}\n  # If source files changed but packages didn't, rebuild from a prior cache.\n  restore-keys: |\n    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Turso Databases\nDESCRIPTION: This snippet shows how to create a database using Turso CLI and manage it via shell commands. It covers creating a database, connecting to it, and adding a `todos` table with specific columns.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nturso db create [database-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nturso db shell <database-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nCREATE TABLE todos(id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document in Next.js\nDESCRIPTION: This code snippet demonstrates how to implement a custom `Document` in Next.js that includes a single instance of the `<Head />` component, adhering to best practices to prevent duplicate usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-duplicate-head.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    //...\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with Next.js Image Component\nDESCRIPTION: Shows how to use locally stored images with the Next.js Image component. This example demonstrates automatic width and height detection for local images.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting headless REST preview link in WordPress (PHP)\nDESCRIPTION: This code configures the REST API response to provide a preview link for draft and published posts, directing to the Next.js frontend. It uses the `rest_prepare_page` and `rest_prepare_post` filters to modify the 'link' field in the REST API response. The `HEADLESS_URL` constant must be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nadd_filter( 'rest_prepare_page', 'set_headless_rest_preview_link', 10, 2 );\nadd_filter( 'rest_prepare_post', 'set_headless_rest_preview_link' , 10, 2 );\nfunction set_headless_rest_preview_link( WP_REST_Response $response, WP_Post $post ): WP_REST_Response {\n  // Check if the post status is 'draft' and set the preview link accordingly.\n  if ( 'draft' === $post->post_status ) {\n    $response->data['link'] = get_preview_post_link( $post );\n    return $response;\n  }\n\n  // For published posts, modify the permalink to point to the frontend.\n  if ( 'publish' === $post->post_status ) {\n\n    // Get the post permalink.\n    $permalink = get_permalink( $post );\n\n    // Check if the permalink contains the site URL.\n    if ( false !== stristr( $permalink, get_site_url() ) ) {\n\n      $frontendUrl = HEADLESS_URL;\n\n      // Replace the site URL with the frontend URL.\n      $response->data['link'] = str_ireplace(\n        get_site_url(),\n        $frontendUrl,\n        $permalink\n      );\n    }\n  }\n\n  return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Async Context Usage with cookies in Next.js\nDESCRIPTION: This code demonstrates the correct way to handle async context when using the `cookies` function from `next/headers`. By calling `cookies().getAll()` before the `setTimeout` and storing the result, the cookie data is accessed within the initial async context, avoiding the DynamicServerError in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/dynamic-server-error.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nasync function getCookieData() {\n  const cookieData = cookies().getAll()\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      resolve(cookieData)\n    }, 1000)\n  )\n}\n\nexport default async function Page() {\n  const cookieData = await getCookieData()\n  return <div>Hello World</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Functions in a Separate File with JavaScript\nDESCRIPTION: Shows how to create Server Functions in a dedicated JavaScript file by placing the 'use server' directive at the top of the file, making all exports Server Functions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nexport async function createPost() {}\n```\n\n----------------------------------------\n\nTITLE: Increasing Minimum Cache TTL for Images in Next.js\nDESCRIPTION: This snippet shows how to increase the minimum cache TTL for optimized images in Next.js. Increasing the TTL reduces revalidations and can lower cost. This configuration is helpful when upstream images have missing or low `Cache-Control` headers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 2678400, // 31 days\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Unauthorized Page - Alternative JSX\nDESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It serves as an alternative implementation using JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Login from '@/app/components/Login'\n\nexport default function UnauthorizedPage() {\n  return (\n    <main>\n      <h1>401 - Unauthorized</h1>\n      <p>Please log in to access this page.</p>\n      <Login />\n    </main>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Image Meta Tags in HTML\nDESCRIPTION: Includes HTML meta tags to define the width and height of an Open Graph image, which assists in correctly rendering images on social media platforms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```\n\n----------------------------------------\n\nTITLE: Data Fetching in Not Found Component with Next.js (TypeScript)\nDESCRIPTION: An async implementation of the not-found.js component in TypeScript that fetches data from the server using the headers API. It demonstrates how to customize the Not Found page with dynamic data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n\nexport default async function NotFound() {\n  const headersList = await headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing yarn dependencies - Bash\nDESCRIPTION: This command installs the yarn dependencies for the project. It uses the `yarn` command to install all the dependencies listed in the `package.json` or `yarn.lock` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$  yarn\n```\n\n----------------------------------------\n\nTITLE: Signup Action in Next.js App Router (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a new user account within a Next.js application router. It includes steps for validating form fields, preparing data for database insertion, hashing the password using bcrypt, inserting the user data into a database, and handling potential errors. It uses JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function signup(state, formData) {\n  // 1. Validate form fields\n  // ...\n\n  // 2. Prepare data for insertion into database\n  const { name, email, password } = validatedFields.data\n  // e.g. Hash the user's password before storing it\n  const hashedPassword = await bcrypt.hash(password, 10)\n\n  // 3. Insert the user into the database or call an Library API\n  const data = await db\n    .insert(users)\n    .values({\n      name,\n      email,\n      password: hashedPassword,\n    })\n    .returning({ id: users.id })\n\n  const user = data[0]\n\n  if (!user) {\n    return {\n      message: 'An error occurred while creating your account.',\n    }\n  }\n\n  // TODO:\n  // 4. Create user session\n  // 5. Redirect user\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Attributes to Script Tag in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to add additional attributes, such as `id`, `nonce`, and custom data attributes, to the `<script>` tag using the `next/script` component. It is designed to be used within a client component, as indicated by the `'use client'` directive. The additional attributes are directly passed to the `Script` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with fetch() in Next.js App Directory\nDESCRIPTION: This snippet showcases data fetching using the fetch() API in the app directory with caching options. It demonstrates a way to obtain project data asynchronously and render it within a component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Index() {\n  const projects = await getProjects()\n\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Next.js Compiler\nDESCRIPTION: This snippet provides the configuration needed to set up Jest with Next.js. It utilizes the nextJest function to ensure Jest can access Next.js application settings, thereby simplifying the testing process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nextJest = require('next/jest')\n\n// Providing the path to your Next.js app which will enable loading next.config.js and .env files\nconst createJestConfig = nextJest({ dir: './' })\n\n// Any custom config you want to pass to Jest\nconst customJestConfig = {\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n}\n\n// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async\nmodule.exports = createJestConfig(customJestConfig)\n```\n\n----------------------------------------\n\nTITLE: Building Temporal Worker in Watch Mode\nDESCRIPTION: Command to build the Temporal worker with watch mode enabled for development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-worker.watch\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry with @vercel/otel (TypeScript)\nDESCRIPTION: Registers OpenTelemetry using the `@vercel/otel` package within the `instrumentation.ts` file. This function configures the service name for the OpenTelemetry instance, allowing for easy identification of the application within observability tools. The service name is set to 'next-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n```\n\n----------------------------------------\n\nTITLE: Catch-All Route for Auth Slot\nDESCRIPTION: Creates a catch-all route to ensure the modal closes when navigating to routes outside the current context\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function CatchAll() {\n  return null\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function CatchAll() {\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Script with onLoad handler in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `next/script` component with the `onLoad` event handler to execute code after the script has finished loading. It is designed to be used within a client component, as indicated by the `'use client'` directive. The script tag is included from a provided URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the mdx-remote example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example mdx-remote mdx-remote-app\n```\n\n----------------------------------------\n\nTITLE: Handling Script Loading Errors with onError in Next.js (App Router) - JSX\nDESCRIPTION: This code shows how to use the `onError` property of the `next/script` component to handle script loading errors within a Next.js application using the App Router. It logs the error to the console when the script fails to load.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a dynamic route segment in Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access a dynamic route segment (slug) within a Next.js page component using JavaScript. It retrieves the slug from the params prop and renders it within a div element. The params prop is destructured to extract the slug.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Page({ params }) {\n  const { slug } = await params\n  return <div>My Post: {slug}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SWC Trace Profiling in Next.js Configuration\nDESCRIPTION: This snippet shows how to enable SWC trace profiling in the Next.js configuration file. When enabled, SWC will generate trace files that can be visualized using various tools.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    swcTraceProfiling: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Search Parameters in Next.js Client Components (JavaScript)\nDESCRIPTION: A JavaScript client component that demonstrates how to update URL search parameters using both the useRouter hook and Link component. It includes a utility function to merge existing search parameters with new ones, working with the same functionality as the TypeScript version but without type annotations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name, value) => {\n      const params = new URLSearchParams(searchParams)\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Matcher Options in Next.js Middleware\nDESCRIPTION: Example of a complex middleware configuration using advanced matcher options. This demonstrates how to specify conditions for middleware execution based on path patterns, headers, query parameters, and cookies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    {\n      source: '/api/*',\n      regexp: '^/api/(.*)',\n      locale: false,\n      has: [\n        { type: 'header', key: 'Authorization', value: 'Bearer Token' },\n        { type: 'query', key: 'userId', value: '123' },\n      ],\n      missing: [{ type: 'cookie', key: 'session', value: 'active' }],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of cookies() with Cached Function\nDESCRIPTION: Proper implementation where cookies are accessed outside the cached function and passed as an argument, making the value part of the cache key.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nasync function getExampleData(isLoggedIn) {\n  \"use cache\"\n  ...\n}\n\nexport default async function Page() {\n  const isLoggedIn = (await cookies()).has('token')\n  const data = await getExampleData(isLoggedIn)\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sass in Next.js\nDESCRIPTION: This command installs the Sass package as a development dependency, enabling the use of Sass stylesheets with .scss and .sass extensions in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev sass\n```\n\n----------------------------------------\n\nTITLE: Connection Function Signature\nDESCRIPTION: The `connection` function is designed to hold rendering until a user request is observed, returning a `void` Promise that is only necessary for dynamic rendering when common APIs are not employed. It requires no parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/connection.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction connection(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Running Experimental Image Codemod in Next.js\nDESCRIPTION: Command to run the experimental next-image-experimental codemod which helps upgrade next/legacy/image to the new next/image format. Note: only works for static usage patterns.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-upgrade-to-13.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod next-image-experimental .\n```\n\n----------------------------------------\n\nTITLE: Creating a new Next.js app with TypeScript and GraphQL\nDESCRIPTION: This code snippet shows how to create a new Next.js application using `create-next-app` with the `with-typescript-graphql` example. It shows the usage with npm, yarn, and pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-typescript-graphql with-typescript-graphql-app\n```\n\n----------------------------------------\n\nTITLE: Using Object-Based href with Query Parameters in App Router (TypeScript)\nDESCRIPTION: Example of using an object-based href with query parameters in the Next.js Link component for App Router. This approach allows structured navigation to routes with query parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Navigate to /about?name=test\nexport default function Page() {\n  return (\n    <Link\n      href={{\n        pathname: '/about',\n        query: { name: 'test' },\n      }}\n    >\n      About\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Session Secret in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to access the session secret key from the environment variables using process.env.SESSION_SECRET. This allows the application to securely use the secret key for session management operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst secretKey = process.env.SESSION_SECRET\n```\n\n----------------------------------------\n\nTITLE: Using replace Prop with Link Component in Pages Router (TypeScript)\nDESCRIPTION: Example of using the replace prop with the Next.js Link component in Pages Router. When replace is set to true, the component will replace the current history state instead of adding a new URL to the browser's history stack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Web Worker - TypeScript\nDESCRIPTION: This code snippet demonstrates how to load a third-party script into a web worker using the `worker` strategy in Next.js with TypeScript. This offloads the script execution to a web worker, improving main thread performance. Requires `nextScriptWorkers` to be enabled. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Core Web Vitals ESLint Rules (mjs)\nDESCRIPTION: This snippet shows how to enable the `next/core-web-vitals` rule set in your ESLint configuration.  This rule set updates `eslint-plugin-next` to error on rules that affect Core Web Vitals. It uses `FlatCompat` for configuration and extends the `next/core-web-vitals` configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_5\n\nLANGUAGE: mjs\nCODE:\n```\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat({\n  // import.meta.dirname is available after Node.js v20.11.0\n  baseDirectory: import.meta.dirname,\n})\n\nconst eslintConfig = [\n  ...compat.config({\n    extends: ['next/core-web-vitals'],\n  }),\n]\n\nexport default eslintConfig\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Dynamic Route with useRouter (JSX)\nDESCRIPTION: This example illustrates how to navigate to a dynamic route using router.push. It demonstrates navigating to '/post/abc', where 'abc' represents the dynamic route parameter.  The useRouter hook is used to get the router instance, and router.push is called with the dynamic route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/post/abc')}>\n      Click me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Taxonomy API URLs for Sitemap (PHP)\nDESCRIPTION: This function generates an array of taxonomy URLs (categories or tags) for sitemap generation. It uses user input from `wsra_get_user_inputs()` to determine which taxonomy to retrieve and generate URLs for.  It constructs an array of urls that are relative to the homepage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction wsra_generate_taxonomy_api()\n{\n  [$args,, $taxonomy] = wsra_get_user_inputs();\n  $taxonomy_urls = array();\n  $taxonomys = $taxonomy == 'tag' ? get_tags($args) : get_categories($args);\n  foreach ($taxonomys as $taxonomy) {\n    $fullUrl = esc_url(get_category_link($taxonomy->term_id));\n    $url = str_replace(home_url(), '', $fullUrl);\n    $tempArray = [\n      'url' => $url,\n    ];\n    array_push($taxonomy_urls, $tempArray);\n  }\n  return array_merge($taxonomy_urls);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Navigating back with router.back\nDESCRIPTION: This code snippet illustrates how to use `router.back` to programmatically navigate back in the browser's history, simulating the browser's back button functionality. It utilizes the `useRouter` hook to access the router instance and calls the `back()` method on a button click.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.back()}>\n      Click here to go back\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize Package Imports in next.config.js\nDESCRIPTION: Configures the `optimizePackageImports` option in `next.config.js` to optimize how specific packages are imported, loading only the necessary modules. This enhances performance by reducing the bundle size.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    optimizePackageImports: ['icon-library'],\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with cms-payload example using yarn\nDESCRIPTION: This command uses `yarn` to create a new Next.js application using the `cms-payload` example.  It initializes the project in a directory named `cms-payload-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-payload cms-payload-app\n```\n\n----------------------------------------\n\nTITLE: Server Component Data Fetching\nDESCRIPTION: This code demonstrates data fetching within a Next.js Server Component during the build process for static export.  The `fetch` call executes on the server during `next build`, and the resulting data is used to render static HTML for the initial page load.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  // This fetch will run on the server during `next build`\n  const res = await fetch('https://api.example.com/...')\n  const data = await res.json()\n\n  return <main>...</main>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Unoptimized Images in Next.js\nDESCRIPTION: Configuration example for setting all images to be unoptimized in a Next.js application by modifying the next.config.js file. This is useful when optimization isn't needed for most images in a project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Playwright tests with next.onFetch\nDESCRIPTION: This snippet demonstrates how to use `next.onFetch` within a Playwright test to intercept and mock `fetch` requests. It checks if the request URL matches a specific endpoint and returns a mock response with a JSON payload, or aborts if the URL doesn't match.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Place this file in the `app` directory and name it with `.spec.ts`.\n// To customize where to put tests, add `testMatch` to `playwright.config.ts`.\n\nimport { test, expect } from 'next/experimental/testmode/playwright'\n\ntest('/product/shoe', async ({ page, next }) => {\n  // NOTE: `next.onFetch` only intercepts external `fetch` requests (for both client and server).\n  // For example, if you `fetch` a relative URL (e.g. `/api/hello`) from the client\n  // that's handled by a Next.js route handler (e.g. `app/api/hello/route.ts`),\n  // it won't be intercepted.\n  next.onFetch((request) => {\n    if (request.url === 'http://my-db/product/shoe') {\n      return new Response(\n        JSON.stringify({\n          title: 'A shoe',\n        }),\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n    }\n    return 'abort'\n  })\n\n  await page.goto('/product/shoe')\n\n  await expect(page.locator('body')).toHaveText(/Shoe/)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action in Next.js (TypeScript)\nDESCRIPTION: This snippet defines a simple Server Action in Next.js using TypeScript. The `'use server'` directive indicates that the function should be executed on the server. This allows you to perform server-side operations directly from client components without creating separate API routes. The defined create function is an example, that doesn't have any implementation. \nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nexport async function create() {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Unauthorized Page - TSX\nDESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It is designed for TypeScript environments using Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Login from '@/app/components/Login'\n\nexport default function Unauthorized() {\n  return (\n    <main>\n      <h1>401 - Unauthorized</h1>\n      <p>Please log in to access this page.</p>\n      <Login />\n    </main>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Cache TTL for Images in Next.js\nDESCRIPTION: This code snippet shows how to configure the minimum cache TTL (Time To Live) for optimized images in Next.js. This value defines how long optimized images are cached. The max age of the optimized image is defined by either `minimumCacheTTL` or the upstream image `Cache-Control` header, whichever is larger.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60, // 1 minute\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with EdgeDB example - Bash\nDESCRIPTION: This command creates a new Next.js application using the `with-edgedb` example. It uses `create next-app` via `yarn` to bootstrap the project with the specified example and project name. The resulting project will be located in the `with-edgedb-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-edgedb with-edgedb-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app using Yarn\nDESCRIPTION: This command initializes a new Next.js application named `github-pages-app` using the `github-pages` example from the `create-next-app` tool. The command uses Yarn to execute the create-next-app package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example github-pages github-pages-app\n```\n\n----------------------------------------\n\nTITLE: Using Client Component in Page - JSX\nDESCRIPTION: This code imports the `ClientOnly` component and renders it inside the `Page` component. The `generateStaticParams` function ensures static pre-rendering. The `Page` component is now a server component that renders a client component.  The slug is set to [''] to catch all routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Next.js API Route (JavaScript)\nDESCRIPTION: This code snippet shows how to read cookies within a Next.js API route using JavaScript. It defines an asynchronous handler function that takes a request (req) and response (res) object as arguments, and accesses the 'authorization' cookie from the request's cookies object. The accessed cookie value can then be used within the handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  const auth = req.cookies.authorization\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Profile Component using use Hook (JavaScript)\nDESCRIPTION: This code shows how to use React's `use` hook to unwrap a Promise within a Client Component in Next.js using JavaScript. The `Profile` component uses the custom `useUser` hook to retrieve the `userPromise` from the context and then uses the `use` hook to suspend rendering until the Promise resolves. The resolved user data is then used in the component. This example demonstrates partial hydration and the use of React's `use` hook for data fetching in Client Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { use } from 'react'\nimport { useUser } from './user-provider'\n\nexport function Profile() {\n  const { userPromise } = useUser()\n  const user = use(userPromise)\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Disposition Type in Next.js\nDESCRIPTION: This code snippet shows how to configure the `contentDispositionType` option in `next.config.js` to control how the browser handles images served by the Next.js Image Optimization API. Setting it to `inline` allows the browser to render the image directly instead of downloading it.  This setting affects how the browser displays the image when visited directly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  images: {\n    contentDispositionType: 'inline',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Draft API Route with Secret (JavaScript)\nDESCRIPTION: This JavaScript code secures the draft API route by verifying a secret token and the presence of a slug parameter. It fetches data from a headless CMS, enables Draft Mode, and redirects the user to the specified slug if the validation passes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  res.setDraftMode({ enable: true })\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Instances from External Sources\nDESCRIPTION: This snippet shows how to create a URL object for an external asset and log its pathname in JavaScript, demonstrating integration with `import.meta.url`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logo = new URL('https://example.com/assets/file.txt', import.meta.url)\n\nconsole.log(logo.pathname)\n\n// prints \"/_next/static/media/file.a9727b5d.txt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware with Path Matching\nDESCRIPTION: Example of configuring a root middleware file with path matching using the new API. Shows how to rewrite URLs for specific paths using a matcher configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  return NextResponse.rewrite(new URL('/about-2', request.url))\n}\n\n// Supports both a single string value or an array of matchers\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Components file - TypeScript\nDESCRIPTION: This snippet creates an `mdx-components.tsx` file to define global MDX components. It imports the `MDXComponents` type from `mdx/types` and exports a `useMDXComponents` function that returns the provided components. This file is required when using `@next/mdx` with the App Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Server Functions in Server Components with JavaScript\nDESCRIPTION: Shows how to create an inline Server Function directly within a Server Component in JavaScript. The function is marked with the 'use server' directive at the top of the function body.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  // Server Action\n  async function createPost(formData: FormData) {\n    'use server'\n    // ...\n  }\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing to Git\nDESCRIPTION: These commands commit the changes to the local Git repository and push them to the remote GitHub repository. This triggers a deployment in Vercel, if the repository is linked to a Vercel project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Initial commit\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Configuring devIndicators in Next.js (Typescript)\nDESCRIPTION: This code snippet shows the Typescript type definition for the `devIndicators` configuration option in Next.js. It allows you to either disable the indicators entirely or configure their position on the screen. The position can be one of 'bottom-right', 'bottom-left', 'top-right', or 'top-left'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/devIndicators.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  devIndicators: false | {\n    position?: 'bottom-right'\n    | 'bottom-left'\n    | 'top-right'\n    | 'top-left', // defaults to 'bottom-left',\n  },\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress as a dev dependency\nDESCRIPTION: Installs Cypress as a development dependency using npm, yarn, or pnpm.  This allows Cypress to be used for testing without being included in the production build.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D cypress\n# or\nyarn add -D cypress\n# or\npnpm install -D cypress\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for URL Imports\nDESCRIPTION: This code snippet shows how to configure Next.js to allow importing modules from specified external URL prefixes by modifying the `next.config.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Icons using ImageResponse in Next.js (JavaScript)\nDESCRIPTION: JavaScript version of the icon generation code using the ImageResponse API. Creates a simple icon with the letter 'A' on a black background, with proper metadata configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\n// Image metadata\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n\n// Image generation\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported icons size metadata\n      // config to also set the ImageResponse's width and height.\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouter Hook for Active Link Styling (JSX)\nDESCRIPTION: This example demonstrates how to use the useRouter hook to dynamically style an active link based on the current route. It imports the useRouter hook from 'next/router' and uses it to access the router object. The style of the link is then updated based on whether the current path matches the link's href.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nfunction ActiveLink({ children, href }) {\n  const router = useRouter()\n  const style = {\n    marginRight: 10,\n    color: router.asPath === href ? 'red' : 'black',\n  }\n\n  const handleClick = (e) => {\n    e.preventDefault()\n    router.push(href)\n  }\n\n  return (\n    <a href={href} onClick={handleClick} style={style}>\n      {children}\n    </a>\n  )\n}\n\nexport default ActiveLink\n```\n\n----------------------------------------\n\nTITLE: Resetting State Using useEffect after Navigation (JSX)\nDESCRIPTION: This example demonstrates resetting the component's state using the useEffect hook after navigation occurs. The useEffect hook is configured to run when the router.query.slug changes, effectively resetting the count state to 0 when navigating to a different page. This prevents state persistence between routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect(() => {\n    setCount(0)\n  }, [router.query.slug])\n```\n\n----------------------------------------\n\nTITLE: Linking and Pulling Environment Variables with Vercel\nDESCRIPTION: This snippet links your local project to Vercel and pulls environment variables from the Vercel project. Requires npx and an existing Vercel deployment. Input involves executing the commands, producing a local environment setup synchronized with the Vercel deployment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx vercel link\nnpx vercel env pull\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Next.js Debugging\nDESCRIPTION: This snippet provides a configuration file (launch.json) for VS Code, enabling debugging for Next.js applications on both the client and server sides. It includes configurations for Chrome, Firefox, and full-stack debugging, allowing developers to step through code and inspect variables during runtime. The configurations specify the debug type, request type, URL, and command to run the development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Next.js: debug server-side\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side (Firefox)\",\n      \"type\": \"firefox\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"reAttach\": true,\n      \"pathMappings\": [\n        {\n          \"url\": \"webpack://_N_E\",\n          \"path\": \"${workspaceFolder}\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Next.js: debug full stack\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/next/dist/bin/next\",\n      \"runtimeArgs\": [\"--inspect\"],\n      \"skipFiles\": [\"<node_internals>/**\"],\n      \"serverReadyAction\": {\n        \"action\": \"debugWithEdge\",\n        \"killOnServerStop\": true,\n        \"pattern\": \"- Local:.+(https?://.+)\",\n        \"uriFormat\": \"%s\",\n        \"webRoot\": \"${workspaceFolder}\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode (Yarn)\nDESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode using Yarn. `yarn install` installs dependencies and `yarn dev` starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Client Component with SWR for Data Fetching (JavaScript)\nDESCRIPTION: This code illustrates using a Client Component with SWR for client-side data fetching. It imports `useSWR` and defines a `fetcher` function. The `useSWR` hook fetches data from an API endpoint and handles loading and error states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport useSWR from 'swr'\n\nconst fetcher = (url) => fetch(url).then((r) => r.json())\n\nexport default function Page() {\n  const { data, error } = useSWR(\n    `https://jsonplaceholder.typicode.com/posts/1`,\n    fetcher\n  )\n  if (error) return 'Failed to load'\n  if (!data) return 'Loading...'\n\n  return data.title\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env.local\nDESCRIPTION: This shows the expected format of the `.env.local` file.  The values for `COSMIC_BUCKET_SLUG`, `COSMIC_READ_KEY`, and `COSMIC_PREVIEW_SECRET` are specific to your Cosmic CMS setup. `COSMIC_PREVIEW_SECRET` is used for Next.js Preview Mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCOSMIC_BUCKET_SLUG=...\nCOSMIC_READ_KEY=...\nCOSMIC_PREVIEW_SECRET=...\n```\n\n----------------------------------------\n\nTITLE: Transpiling Modules in Next.js Compiler\nDESCRIPTION: This snippet illustrates how to configure the Next.js Compiler to automatically transpile local packages or external dependencies, simplifying the development of applications using monorepos.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  transpilePackages: ['@acme/ui', 'lodash-es'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using next/image with Custom Loader (JavaScript)\nDESCRIPTION: This code demonstrates how to use the `next/image` component with a custom image loader.  It imports the `Image` component and renders an image with specified `alt`, `src`, `width`, and `height` attributes, utilizing the custom loader defined elsewhere.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\n```\n\n----------------------------------------\n\nTITLE: Cached Database Queries with unstable_cache in Next.js\nDESCRIPTION: Demonstrates using unstable_cache API to cache database query results. Implements caching with revalidation period and cache tags for selective invalidation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_cache } from 'next/cache'\nimport { db, posts } from '@/lib/db'\n\nconst getPosts = unstable_cache(\n  async () => {\n    return await db.select().from(posts)\n  },\n  ['posts'],\n  { revalidate: 3600, tags: ['posts'] }\n)\n\nexport default async function Page() {\n  const allPosts = await getPosts()\n\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_cache } from 'next/cache'\nimport { db, posts } from '@/lib/db'\n\nconst getPosts = unstable_cache(\n  async () => {\n    return await db.select().from(posts)\n  },\n  ['posts'],\n  { revalidate: 3600, tags: ['posts'] }\n)\n\nexport default async function Page() {\n  const allPosts = await getPosts()\n\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Response Size Limit in API Routes on Next.js\nDESCRIPTION: This snippet demonstrates how to set a custom response size limit for an API Route in Next.js. By using the responseLimit key, developers can define their own size threshold in bytes or string format, allowing more control over the API response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/api-routes-response-size-limit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  api: {\n    responseLimit: '8mb',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Tags from External Data in TypeScript\nDESCRIPTION: Details using fetched data to create dynamic cache tags in a TypeScript class. It demonstrates associating 'bookings-data' and data properties as cache tags.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_cacheTag as cacheTag } from 'next/cache'\n\ninterface BookingsProps {\n  type: string\n}\n\nexport async function Bookings({ type = 'haircut' }: BookingsProps) {\n  async function getBookingsData() {\n    'use cache'\n    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)\n    cacheTag('bookings-data', data.id)\n    return data\n  }\n  return //...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Locale-Specific Content in getStaticProps for Next.js\nDESCRIPTION: This example shows how to handle locale-specific content in getStaticProps for a Next.js application. It demonstrates fetching posts based on the locale and returning notFound if no posts are available for that locale.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport async function getStaticProps({ locale }) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch(`https://.../posts?locale=${locale}`)\n  const posts = await res.json()\n\n  if (posts.length === 0) {\n    return {\n      notFound: true,\n    }\n  }\n\n  // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Title with Absolute Value (JSX)\nDESCRIPTION: This code snippet demonstrates how to override the title template with an absolute title in a Next.js page using JavaScript. The 'absolute' property is set to 'About', which will be used as the title regardless of the parent layout's template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n\n// Output: <title>About</title>\n```\n\n----------------------------------------\n\nTITLE: Caching an Entire Route with 'use cache' in Page File (JavaScript)\nDESCRIPTION: Demonstrates implementing 'use cache' in a page file to prerender and cache that page. When combined with a cached layout, this enables caching the entire route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'use cache'\n\nexport default function Layout({ children }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing runtime-specific code (JavaScript)\nDESCRIPTION: This code snippet demonstrates conditionally importing code based on the Next.js runtime environment (Node.js or Edge). It uses the `NEXT_RUNTIME` environment variable to determine the current runtime and imports the corresponding instrumentation file. The files 'instrumentation-node' and 'instrumentation-edge' are assumed to contain runtime-specific instrumentation logic. This is done within the `register` function in `instrumentation.js`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Mode with setPreviewData in Next.js (Simple Test)\nDESCRIPTION: This JavaScript code demonstrates a simple API route in Next.js for manually testing preview mode. Visiting `/api/preview` using this code will set preview cookies and display the message 'Preview mode enabled' in the browser. It's useful for verifying that `setPreviewData` functions as expected.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// simple example for testing it manually from your browser.\nexport default function handler(req, res) {\n  res.setPreviewData({})\n  res.end('Preview mode enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image with Local Assets in JavaScript\nDESCRIPTION: Demonstrates the process of generating an image using local assets in JavaScript, employing Node.js modules to read and handle image data as an `ArrayBuffer`. File path resolution is also covered.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { join } from 'node:path'\nimport { readFile } from 'node:fs/promises'\n\nexport default async function Image() {\n  const logoData = await readFile(join(process.cwd(), 'logo.png'))\n  const logoSrc = Uint8Array.from(logoData).buffer\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Electron App with Next.js Using npm\nDESCRIPTION: The snippet demonstrates using npx with create-next-app to generate a new Next.js project pre-configured for use with Electron. It sets up the initial project structure quickly without manual configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-electron with-electron-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with auth example using pnpm\nDESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application named `auth-app` based on the `auth` example.  It assumes that pnpm is installed globally.  The command initializes a Next.js project configured for authentication.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example auth auth-app\n```\n\n----------------------------------------\n\nTITLE: Next.js Server Action Interleaving (TSX)\nDESCRIPTION: This snippet shows how to pass a Server Action through cached components to a Client Component in Next.js, without directly invoking the action inside the cacheable function. This approach allows for UI updates triggered from the client to interact with server-side logic while still leveraging caching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport ClientComponent from './ClientComponent'\n\nexport default async function Page() {\n  const performUpdate = async () => {\n    'use server'\n    // Perform some server-side update\n    await db.update(...)\n  }\n\n  return <CacheComponent performUpdate={performUpdate} />\n}\n\nasync function CachedComponent({\n  performUpdate,\n}: {\n  performUpdate: () => Promise<void>\n}) {\n  'use cache'\n  // Do not call performUpdate here\n  return <ClientComponent action={performUpdate} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Template in Next.js (Typescript)\nDESCRIPTION: This code defines a template component in Next.js using TypeScript. Templates are similar to layouts, but create a new instance for each child route, resetting state and re-synchronizing effects on navigation. This template accepts a `children` prop and renders it within a `<div>` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Draft Mode in API Routes (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to access the `draftMode` flag in an API route via `req.draftMode`. This allows you to conditionally retrieve draft data within the API route handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function myApiRoute(req, res) {\n  if (req.draftMode) {\n    // get draft data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Environment Variable Prefix Example\nDESCRIPTION: Demonstrates the required prefix for client-side environment variables in Next.js applications. Variables must be prefixed with NEXT_PUBLIC_ to be accessible on the client side.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-env-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Sitemaps in JavaScript\nDESCRIPTION: JavaScript implementation for creating localized sitemaps with language alternates. Uses the alternates.languages property to specify URLs for different language versions of each page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function sitemap() {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es',\n          de: 'https://acme.com/de',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/about',\n          de: 'https://acme.com/de/about',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/blog',\n          de: 'https://acme.com/de/blog',\n        },\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Vitals Attribution in Next.js\nDESCRIPTION: This code snippet shows how to enable Web Vitals attribution in a Next.js application by adding configuration to next.config.js. The example enables attribution for Cumulative Layout Shift (CLS) and Largest Contentful Paint (LCP) metrics through the experimental webVitalsAttribution option.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/webVitalsAttribution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    webVitalsAttribution: ['CLS', 'LCP'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Ably Example (pnpm)\nDESCRIPTION: This command uses the create-next-app tool with pnpm to bootstrap a new Next.js application using the 'with-ably' example.  It sets up a basic project structure with Ably integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-ably with-ably-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Patterns in Next.js 15.3.0+\nDESCRIPTION: Configuration using URL pattern for next/image component in modern Next.js versions. This approach uses the new URL constructor to define allowed remote image patterns.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [new URL('https://assets.example.com/account123/**')],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRouter in Next.js (JSX)\nDESCRIPTION: This snippet shows how to use the `withRouter` higher-order component to inject the `router` object into a functional component. The `router` object is then accessed via props to display the current pathname.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withRouter } from 'next/router'\n\nfunction Page({ router }) {\n  return <p>{router.pathname}</p>\n}\n\nexport default withRouter(Page)\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Sitemaps in TypeScript\nDESCRIPTION: TypeScript implementation for creating localized sitemaps with language alternates. Uses the alternates.languages property to specify URLs for different language versions of each page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es',\n          de: 'https://acme.com/de',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/about',\n          de: 'https://acme.com/de/about',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/blog',\n          de: 'https://acme.com/de/blog',\n        },\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the api-routes-middleware example. It initializes the project with the specified example and names the new application api-routes-middleware-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example api-routes-middleware api-routes-middleware-app\n```\n\n----------------------------------------\n\nTITLE: Correcting Headers Initialization in Next.js API Route\nDESCRIPTION: This snippet illustrates the correct way to obtain headers within an API route in Next.js. By calling the 'headers()' function inside an asynchronous function, it ensures that the headers are accessible within the request context, avoiding potential errors associated with global scope usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { headers } from 'next/headers'\n\n- const headersList = await headers()\nexport async function GET() {\n+ const headersList = await headers()\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'use memo' Directive in React Component (TypeScript)\nDESCRIPTION: Example of using the 'use memo' directive in a React component to opt-in for compilation when in annotation mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Page() {\n  'use memo'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Description in Metadata (JSX)\nDESCRIPTION: This code snippet shows how to set the description metadata for a Next.js route (layout or page). The description provides a brief summary of the page's content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  description: 'The React Framework for the Web',\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Time Operations in Next.js\nDESCRIPTION: Shows how to handle time operations in cached components using the 'use cache' directive to ensure consistent timestamp handling during page builds and revalidation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nasync function InformationTable() {\n  const data = await fetch(...)\n  return (\n    <section>\n      <h1>Latest Info...</h1>\n      <table>{renderData(data)}</table>\n    </section>\n  )\n}\n\nexport default async function Page() {\n  return (\n    <main>\n      <InformationTable />\n      Last Refresh: {new Date().toString()}\n    </main>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nasync function InformationTable() {\n  \"use cache\"\n  const data = await fetch(...)\n  return (\n    <>\n      <section>\n        <h1>Latest Info...</h1>\n        <table>{renderData(data)}</table>\n      </section>\n      Last Refresh: {new Date().toString()}\n    </>\n  )\n}\n\nexport default async function Page() {\n  return (\n    <main>\n      <InformationTable />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp via bun\nDESCRIPTION: This command installs the Sharp library using bun, which is required for image optimization in Next.js projects during production.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add sharp\n```\n\n----------------------------------------\n\nTITLE: Using useSearchParams in a Next.js Client Component (JSX)\nDESCRIPTION: This code demonstrates how to use the `useSearchParams` hook in a Next.js Client Component to extract a specific query parameter from the URL. It imports the hook from `next/navigation` and uses the `get` method to retrieve the value of the `search` parameter. It is intended for use within the `app` directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client'\\n\\nimport { useSearchParams } from 'next/navigation'\\n\\nexport default function SearchBar() {\\n  const searchParams = useSearchParams()\\n\\n  const search = searchParams.get('search')\\n\\n  // URL -> `/dashboard?search=my-project`\\n  // `search` -> 'my-project'\\n  return <>Search: {search}</>\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Next.js About Page Component (App Router)\nDESCRIPTION: Defines a Next.js about page component within the `app` directory using the App Router. It renders a heading and a link to the home page. Requires Next.js and `next/link`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Default Title Metadata (TSX)\nDESCRIPTION: This snippet demonstrates setting a default title for child route segments using the `title.default` property in a TypeScript Next.js application's `metadata` object. This ensures a fallback title is always present.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    default: 'Acme',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {}\n\n// Output: <title>Acme</title>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Optimization in next.config.js\nDESCRIPTION: This JavaScript configuration block in `next.config.js` is used to configure image optimization for Next.js. It defines allowed remote image URL patterns for Storyblok and Unsplash, which Next.js uses to securely optimize images from these sources. It sets allowed protocols, hostnames, port (empty string), and pathname (wildcard).\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    images: {\n      remotePatterns: [\n        {\n          protocol: 'https',\n          hostname: 'a.storyblok.com',\n          port: '',\n          pathname: '**',\n          search: '',\n        },\n        {\n          protocol: 'https',\n          hostname: 'images.unsplash.com',\n          port: '',\n          pathname: '**',\n          search: '',\n        },\n       ],\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Enabling Styled Components in Next.js Configuration\nDESCRIPTION: Configures the Next.js compiler to enable the use of styled-components, which allows for styled-components to function correctly in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Video using Vercel Blob URL in Next.js\nDESCRIPTION: This code snippet demonstrates how to display a video in a Next.js application using the video's URL from Vercel Blob. It uses React Suspense to handle the loading state while fetching the video URL. The `VideoComponent` asynchronously fetches the Blob URL and renders a `<video>` tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { list } from '@vercel/blob'\n\nexport default function Page() {\n  return (\n    <Suspense fallback={<p>Loading video...</p>}>\n      <VideoComponent fileName=\"my-video.mp4\" />\n    </Suspense>\n  )\n}\n\nasync function VideoComponent({ fileName }) {\n  const { blobs } = await list({\n    prefix: fileName,\n    limit: 1,\n  })\n  const { url } = blobs[0]\n\n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Image Imports in Next.js\nDESCRIPTION: This snippet demonstrates how to disable the import of static images in Next.js. This is particularly useful when integrating other plugins that may conflict with static imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata API usage - JSX\nDESCRIPTION: This code defines metadata using the Next.js Metadata API in a JavaScript (JSX) file. It exports a `metadata` object with `title` and `description` properties. The `RootLayout` component then renders the HTML structure, placing the provided `children` inside the body.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Reflexjs using npx\nDESCRIPTION: This command uses npx to execute create-next-app with the with-reflexjs example. It creates a new Next.js application named with-reflexjs-app with Reflexjs pre-configured. This requires Node.js and npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-reflexjs with-reflexjs-app\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeBuild Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for AWS CodeBuild specifies paths to be cached, including node_modules for faster package installation and the Next.js cache for faster application rebuilds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  paths:\n    - 'node_modules/**/*' # Cache `node_modules` for faster `yarn` or `npm i`\n    - '.next/cache/**/*' # Cache Next.js for faster application rebuilds\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Next.js in TypeScript\nDESCRIPTION: This TypeScript configuration file updates Jest to use `next/jest`.  It defines a `createJestConfig` function which is then used to configure Jest for Next.js, including setting the test environment to `jsdom`, coverage provider to `v8` and specifying the directory to load Next.js configuration files from. This allows Jest to work seamlessly with Next.js projects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Config } from 'jest'\nimport nextJest from 'next/jest.js'\n\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n\n// Add any custom config to be passed to Jest\nconst config: Config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nexport default createJestConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Configuring imageSizes in next.config.js\nDESCRIPTION: This snippet shows how to define imageSizes in next.config.js, which specifies the list of image widths for images that use the sizes prop. The sizes must be smaller than the smallest deviceSizes to work correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Next.js Link Component Example (TypeScript)\nDESCRIPTION: This code shows how to use the `Link` component from `next/link` to create navigation links within a Next.js application. This particular example focuses on linking to different posts within a blog.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <>\n      <h1>Index Page</h1>\n      <hr />\n      <ul>\n        <li>\n          <Link href=\"/post/1\">Post 1</Link>\n        </li>\n        <li>\n          <Link href=\"/post/2\">Post 2</Link>\n        </li>\n      </ul>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Loading Property on Next.js Image Component\nDESCRIPTION: Example of setting the loading property on a Next.js Image component. This property determines the loading behavior, with options for lazy (default, deferred loading) or eager (immediate loading).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nloading = 'lazy' // {lazy} | {eager}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in next.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure environment variables in the `next.config.js` file. The `env` object is added to the `module.exports` object, allowing you to define custom environment variables that will be available during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/env.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  env: {\n    customKey: 'my-value',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Direct server-side data fetching with getStaticProps (JavaScript)\nDESCRIPTION: This snippet illustrates how to load posts directly from a server-side function (`loadPosts`) within `getStaticProps` in a Next.js application. This avoids the need for an API route and improves performance by directly accessing the data source.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// The following function is shared\n// with getStaticProps and API routes\n// from a `lib/` directory\nexport async function loadPosts() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts/')\n  const data = await res.json()\n\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Using useParams in JavaScript with Next.js\nDESCRIPTION: The example demonstrates how to use the useParams hook in a JavaScript context. It retrieves dynamic parameters from the current URL and logs them. This component is designed as a Client Component and requires Next.js version that supports Client Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-params.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const params = useParams()\n\n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n\n  return '...'\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using NextResponse.next() for Middleware - TypeScript\nDESCRIPTION: Utilizes the next() method for middleware to allow early routing. Optionally forwards modified headers in the response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nreturn NextResponse.next()\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Firebase Example (npm)\nDESCRIPTION: This command initializes a new Next.js application named `with-firebase-app` using the `with-firebase` example. It leverages the `create-next-app` tool with the npm package manager. This is a client-side Firebase setup using React Context API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-firebase with-firebase-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with TypeScript (pnpm)\nDESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the TypeScript example. It leverages pnpm to create a project named `with-typescript-app` based on the specified example.  This command is executed in the terminal.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-typescript with-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Reading Params in React Client Components - JavaScript\nDESCRIPTION: In a JavaScript React Client Component, React's `use` function is used to extract a `slug` from a promise-based `params` object. This example demonstrates accessing parameters asynchronously in a non-async function, which aligns with typical client component restrictions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n\"use strict\";\n\nimport { use } from 'react';\n\nexport default function Page({ params }) {\n  const { slug } = use(params);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Image Content Type in JavaScript\nDESCRIPTION: Specifies the content type for images in JavaScript to define the format as PNG, facilitating correct image processing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const contentType = 'image/png'\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Image Loader in Next.js\nDESCRIPTION: Configure a custom image loader in next.config.js to use an external image optimization service or cloud provider. The loader file must export a function that generates image URLs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/images.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Userbase App ID Environment Variable\nDESCRIPTION: This command sets the `NEXT_PUBLIC_USERBASE_APP_ID` environment variable in the `.env.local` file.  This variable stores the unique identifier for the Userbase application, which is essential for authenticating the Next.js application with Userbase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_USERBASE_APP_ID=...\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Web Manifest File in Next.js\nDESCRIPTION: Demonstrates how to create a static manifest.json or manifest.webmanifest file in the root of the app directory. This file provides basic information about the web application including name, short name, description, and start URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/manifest.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My Next.js Application\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"An application built with Next.js\",\n  \"start_url\": \"/\"\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create AMP-Only Page in Next.js (JSX)\nDESCRIPTION: This code snippet shows a complete AMP-only page example in Next.js.  The `config` object with `amp: true` enables AMP mode.  The page will be optimized with AMP Optimizer and won't include the React runtime.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-amp.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = { amp: true }\n\nfunction About(props) {\n  return <h3>My AMP About Page!</h3>\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Using useParams in TypeScript with Next.js\nDESCRIPTION: The example demonstrates how to use the useParams hook in a TypeScript context. It retrieves dynamic parameters from the current URL and logs them. This component is designed as a Client Component and requires Next.js version that supports Client Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-params.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const params = useParams<{ tag: string; item: string }>()\n\n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n\n  return '...'\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Movie and Person Nodes with Relationships in Neo4j\nDESCRIPTION: This Cypher script snippet creates nodes representing movies and people, and establishes relationships such as ACTED_IN, DIRECTED, WROTE, and PRODUCED to represent the connections between them. The script defines properties for each node, such as 'title', 'released', and 'tagline' for movies and 'name' and 'born' for people. These relationships are essential for constructing a knowledge graph representing the movie domain.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})\nCREATE (Keanu:Person {name:'Keanu Reeves', born:1964})\nCREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})\nCREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})\nCREATE (Hugo:Person {name:'Hugo Weaving', born:1960})\nCREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})\nCREATE (LanaW:Person {name:'Lana Wachowski', born:1965})\nCREATE (JoelS:Person {name:'Joel Silver', born:1952})\nCREATE\n(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),\n(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),\n(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),\n(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),\n(LillyW)-[:DIRECTED]->(TheMatrix),\n(LanaW)-[:DIRECTED]->(TheMatrix),\n(JoelS)-[:PRODUCED]->(TheMatrix)\n\nCREATE (Emil:Person {name:\"Emil Eifrem\", born:1978})\nCREATE (Emil)-[:ACTED_IN {roles:[\"Emil\"]}]->(TheMatrix)\n\nCREATE (TheMatrixReloaded:Movie {title:'The Matrix Reloaded', released:2003, tagline:'Free your mind'})\nCREATE\n(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixReloaded),\n(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixReloaded),\n(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixReloaded),\n(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixReloaded),\n(LillyW)-[:DIRECTED]->(TheMatrixReloaded),\n(LanaW)-[:DIRECTED]->(TheMatrixReloaded),\n(JoelS)-[:PRODUCED]->(TheMatrixReloaded)\n\nCREATE (TheMatrixRevolutions:Movie {title:'The Matrix Revolutions', released:2003, tagline:'Everything that has a beginning has an end'})\nCREATE\n(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixRevolutions),\n(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixRevolutions),\n(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixRevolutions),\n(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixRevolutions),\n(LillyW)-[:DIRECTED]->(TheMatrixRevolutions),\n(LanaW)-[:DIRECTED]->(TheMatrixRevolutions),\n(JoelS)-[:PRODUCED]->(TheMatrixRevolutions)\n\nCREATE (TheDevilsAdvocate:Movie {title:\"The Devil's Advocate\", released:1997, tagline:'Evil has its winning ways'})\nCREATE (Charlize:Person {name:'Charlize Theron', born:1975})\nCREATE (Al:Person {name:'Al Pacino', born:1940})\nCREATE (Taylor:Person {name:'Taylor Hackford', born:1944})\nCREATE\n(Keanu)-[:ACTED_IN {roles:['Kevin Lomax']}]->(TheDevilsAdvocate),\n(Charlize)-[:ACTED_IN {roles:['Mary Ann Lomax']}]->(TheDevilsAdvocate),\n(Al)-[:ACTED_IN {roles:['John Milton']}]->(TheDevilsAdvocate),\n(Taylor)-[:DIRECTED]->(TheDevilsAdvocate)\n\nCREATE (AFewGoodMen:Movie {title:\"A Few Good Men\", released:1992, tagline:\"In the heart of the nation's capital, in a courthouse of the U.S. government, one man will stop at nothing to keep his honor, and one will stop at nothing to find the truth.\"})\nCREATE (TomC:Person {name:'Tom Cruise', born:1962})\nCREATE (JackN:Person {name:'Jack Nicholson', born:1937})\nCREATE (DemiM:Person {name:'Demi Moore', born:1962})\nCREATE (KevinB:Person {name:'Kevin Bacon', born:1958})\nCREATE (KieferS:Person {name:'Kiefer Sutherland', born:1966})\nCREATE (NoahW:Person {name:'Noah Wyle', born:1971})\nCREATE (CubaG:Person {name:'Cuba Gooding Jr.', born:1968})\nCREATE (KevinP:Person {name:'Kevin Pollak', born:1957})\nCREATE (JTW:Person {name:'J.T. Walsh', born:1943})\nCREATE (JamesM:Person {name:'James Marshall', born:1967})\nCREATE (ChristopherG:Person {name:'Christopher Guest', born:1948})\nCREATE (RobR:Person {name:'Rob Reiner', born:1947})\nCREATE (AaronS:Person {name:'Aaron Sorkin', born:1961})\nCREATE\n(TomC)-[:ACTED_IN {roles:['Lt. Daniel Kaffee']}]->(AFewGoodMen),\n(JackN)-[:ACTED_IN {roles:['Col. Nathan R. Jessup']}]->(AFewGoodMen),\n(DemiM)-[:ACTED_IN {roles:['Lt. Cdr. JoAnne Galloway']}]->(AFewGoodMen),\n(KevinB)-[:ACTED_IN {roles:['Capt. Jack Ross']}]->(AFewGoodMen),\n(KieferS)-[:ACTED_IN {roles:['Lt. Jonathan Kendrick']}]->(AFewGoodMen),\n(NoahW)-[:ACTED_IN {roles:['Cpl. Jeffrey Barnes']}]->(AFewGoodMen),\n(CubaG)-[:ACTED_IN {roles:['Cpl. Carl Hammaker']}]->(AFewGoodMen),\n(KevinP)-[:ACTED_IN {roles:['Lt. Sam Weinberg']}]->(AFewGoodMen),\n(JTW)-[:ACTED_IN {roles:['Lt. Col. Matthew Andrew Markinson']}]->(AFewGoodMen),\n(JamesM)-[:ACTED_IN {roles:['Pfc. Louden Downey']}]->(AFewGoodMen),\n(ChristopherG)-[:ACTED_IN {roles:['Dr. Stone']}]->(AFewGoodMen),\n(AaronS)-[:ACTED_IN {roles:['Man in Bar']}]->(AFewGoodMen),\n(RobR)-[:DIRECTED]->(AFewGoodMen),\n(AaronS)-[:WROTE]->(AFewGoodMen)\n\nCREATE (TopGun:Movie {title:\"Top Gun\", released:1986, tagline:'I feel the need, the need for speed.'})\nCREATE (KellyM:Person {name:'Kelly McGillis', born:1957})\nCREATE (ValK:Person {name:'Val Kilmer', born:1959})\nCREATE (AnthonyE:Person {name:'Anthony Edwards', born:1962})\nCREATE (TomS:Person {name:'Tom Skerritt', born:1933})\nCREATE (MegR:Person {name:'Meg Ryan', born:1961})\nCREATE (TonyS:Person {name:'Tony Scott', born:1944})\nCREATE (JimC:Person {name:'Jim Cash', born:1941})\nCREATE\n(TomC)-[:ACTED_IN {roles:['Maverick']}]->(TopGun),\n(KellyM)-[:ACTED_IN {roles:['Charlie']}]->(TopGun),\n(ValK)-[:ACTED_IN {roles:['Iceman']}]->(TopGun),\n(AnthonyE)-[:ACTED_IN {roles:['Goose']}]->(TopGun),\n(TomS)-[:ACTED_IN {roles:['Viper']}]->(TopGun),\n(MegR)-[:ACTED_IN {roles:['Carole']}]->(TopGun),\n(TonyS)-[:DIRECTED]->(TopGun),\n(JimC)-[:WROTE]->(TopGun)\n\nCREATE (JerryMaguire:Movie {title:'Jerry Maguire', released:2000, tagline:'The rest of his life begins now.'})\nCREATE (ReneeZ:Person {name:'Renee Zellweger', born:1969})\nCREATE (KellyP:Person {name:'Kelly Preston', born:1962})\nCREATE (JerryO:Person {name:\"Jerry O'Connell\", born:1974})\nCREATE (JayM:Person {name:'Jay Mohr', born:1970})\nCREATE (BonnieH:Person {name:'Bonnie Hunt', born:1961})\nCREATE (ReginaK:Person {name:'Regina King', born:1971})\nCREATE (JonathanL:Person {name:'Jonathan Lipnicki', born:1996})\nCREATE (CameronC:Person {name:'Cameron Crowe', born:1957})\nCREATE\n(TomC)-[:ACTED_IN {roles:['Jerry Maguire']}]->(JerryMaguire),\n(CubaG)-[:ACTED_IN {roles:['Rod Tidwell']}]->(JerryMaguire),\n(ReneeZ)-[:ACTED_IN {roles:['Dorothy Boyd']}]->(JerryMaguire),\n(KellyP)-[:ACTED_IN {roles:['Avery Bishop']}]->(JerryMaguire),\n(JerryO)-[:ACTED_IN {roles:['Frank Cushman']}]->(JerryMaguire),\n(JayM)-[:ACTED_IN {roles:['Bob Sugar']}]->(JerryMaguire),\n(BonnieH)-[:ACTED_IN {roles:['Laurel Boyd']}]->(JerryMaguire),\n(ReginaK)-[:ACTED_IN {roles:['Marcee Tidwell']}]->(JerryMaguire),\n(JonathanL)-[:ACTED_IN {roles:['Ray Boyd']}]->(JerryMaguire),\n(CameronC)-[:DIRECTED]->(JerryMaguire),\n(CameronC)-[:PRODUCED]->(JerryMaguire),\n(CameronC)-[:WROTE]->(JerryMaguire)\n\nCREATE (StandByMe:Movie {title:\"Stand By Me\", released:1986, tagline:\"For some, it's the last real taste of innocence, and the first real taste of life. But for everyone, it's the time that memories are made of.\"})\nCREATE (RiverP:Person {name:'River Phoenix', born:1970})\nCREATE (CoreyF:Person {name:'Corey Feldman', born:1971})\nCREATE (WilW:Person {name:'Wil Wheaton', born:1972})\nCREATE (JohnC:Person {name:'John Cusack', born:1966})\nCREATE (MarshallB:Person {name:'Marshall Bell', born:1942})\nCREATE\n(WilW)-[:ACTED_IN {roles:['Gordie Lachance']}]->(StandByMe),\n(RiverP)-[:ACTED_IN {roles:['Chris Chambers']}]->(StandByMe),\n(JerryO)-[:ACTED_IN {roles:['Vern Tessio']}]->(StandByMe),\n(CoreyF)-[:ACTED_IN {roles:['Teddy Duchamp']}]->(StandByMe),\n(JohnC)-[:ACTED_IN {roles:['Denny Lachance']}]->(StandByMe),\n(KieferS)-[:ACTED_IN {roles:['Ace Merrill']}]->(StandByMe),\n(MarshallB)-[:ACTED_IN {roles:['Mr. Lachance']}]->(StandByMe),\n(RobR)-[:DIRECTED]->(StandByMe)\n\nCREATE (AsGoodAsItGets:Movie {title:'As Good as It Gets', released:1997, tagline:'A comedy from the heart that goes for the throat.'})\nCREATE (HelenH:Person {name:'Helen Hunt', born:1963})\nCREATE (GregK:Person {name:'Greg Kinnear', born:1963})\nCREATE (JamesB:Person {name:'James L. Brooks', born:1940})\nCREATE\n(JackN)-[:ACTED_IN {roles:['Melvin Udall']}]->(AsGoodAsItGets),\n(HelenH)-[:ACTED_IN {roles:['Carol Connelly']}]->(AsGoodAsItGets),\n(GregK)-[:ACTED_IN {roles:['Simon Bishop']}]->(AsGoodAsItGets),\n(CubaG)-[:ACTED_IN {roles:['Frank Sachs']}]->(AsGoodAsItGets),\n(JamesB)-[:DIRECTED]->(AsGoodAsItGets)\n\nCREATE (WhatDreamsMayCome:Movie {title:'What Dreams May Come', released:1998, tagline:'After life there is more. The end is just the beginning.'})\nCREATE (AnnabellaS:Person {name:'Annabella Sciorra', born:1960})\nCREATE (MaxS:Person {name:'Max von Sydow', born:1929})\nCREATE (WernerH:Person {name:'Werner Herzog', born:1942})\nCREATE (Robin:Person {name:'Robin Williams', born:1951})\nCREATE (VincentW:Person {name:'Vincent Ward', born:1956})\nCREATE\n(Robin)-[:ACTED_IN {roles:['Chris Nielsen']}]->(WhatDreamsMayCome),\n(CubaG)-[:ACTED_IN {roles:['Albert Lewis']}]->(WhatDreamsMayCome),\n(AnnabellaS)-[:ACTED_IN {roles:['Annie Collins-Nielsen']}]->(WhatDreamsMayCome),\n(MaxS)-[:ACTED_IN {roles:['The Tracker']}]->(WhatDreamsMayCome),\n(WernerH)-[:ACTED_IN {roles:['The Face']}]->(WhatDreamsMayCome),\n(VincentW)-[:DIRECTED]->(WhatDreamsMayCome)\n\nCREATE (SnowFallingonCedars:Movie {title:'Snow Falling on Cedars', released:1999, tagline:'First loves last. Forever.'})\nCREATE (EthanH:Person {name:'Ethan Hawke', born:1970})\nCREATE (RickY:Person {name:'Rick Yune', born:1971})\nCREATE (JamesC:Person {name:'James Cromwell', born:1940})\nCREATE (ScottH:Person {name:'Scott Hicks', born:1953})\nCREATE\n(EthanH)-[:ACTED_IN {roles:['Ishmael Chambers']}]->(SnowFallingonCedars),\n(RickY)-[:ACTED_IN {roles:['Kazuo Miyamoto']}]->(SnowFallingonCedars),\n(MaxS)-[:ACTED_IN {roles:['Nels Gudmundsson']}]->(SnowFallingonCedars),\n(JamesC)-[:ACTED_IN {roles:['Judge Fielding']}]->(SnowFallingonCedars),\n(ScottH)-[:DIRECTED]->(SnowFallingonCedars)\n\nCREATE (YouveGotMail:Movie {title:\"You've Got Mail\", released:1998, tagline:'At odds in life... in love on-line.'})\nCREATE (ParkerP:Person {name:'Parker Posey', born:1968})\nCREATE (DaveC:Person {name:'Dave Chappelle', born:1973})\nCREATE (SteveZ:Person {name:'Steve Zahn', born:1967})\nCREATE (TomH:Person {name:'Tom Hanks', born:1956})\nCREATE (NoraE:Person {name:'Nora Ephron', born:1941})\nCREATE\n```\n\n----------------------------------------\n\nTITLE: Using Memoized Data for Both Metadata and Page Rendering (TypeScript)\nDESCRIPTION: Shows how to use a memoized data fetch function for both metadata generation and page rendering in TypeScript, ensuring the data is fetched only once.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getPost } from '@/app/lib/data'\n\nexport async function generateMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  const post = await getPost(params.slug)\n  return {\n    title: post.title,\n    description: post.description,\n  }\n}\n\nexport default async function Page({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n  return <div>{post.title}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Token Caching Implementation in Next.js\nDESCRIPTION: Example showing problematic implementation where random UUID generation occurs outside the cache scope.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getCachedDate(token: string) {\n  \"use cache\"\n  return db.query(token, ...)\n}\n\nexport default async function Page() {\n  const token = crypto.getRandomUUID()\n  const data = await getCachedData(token);\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Catch-all Dynamic Segment with generateStaticParams (TSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` with a catch-all dynamic segment `[...slug]` in Next.js. It returns an array of objects, where each object contains a `slug` parameter, which is an array of strings.  The `Page` component receives the `slug` array as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/product/[...slug]/page.tsx\" switcher\nexport function generateStaticParams() {\n  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/a/1\n// - /product/b/2\n// - /product/c/3\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string[] }>\n}) {\n  const { slug } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Linking local project to Vercel using CLI\nDESCRIPTION: This command links a local Next.js project to a Vercel project. It is used after the project has been imported to Vercel from a Git repository. The command must be run in the project's root directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"npx vercel link\"\n```\n\n----------------------------------------\n\nTITLE: Extending Web Request API with User Agent in Next.js using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to implement a middleware function in Next.js that uses a user agent helper to assess the device type from an incoming request and update the URL parameters accordingly. It applies NextResponse for URL rewriting. Importing 'next/server' is required for accessing NextResponse and the userAgent utility.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/userAgent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n\n  // device.type can be: 'mobile', 'tablet', 'console', 'smarttv',\n  // 'wearable', 'embedded', or undefined (for desktop browsers)\n  const viewport = device.type || 'desktop'\n\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Turbopack using Yarn\nDESCRIPTION: Command to create a new Next.js application with Turbopack using Yarn's create-next-app utility. This bootstraps a project based on the with-turbopack example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-turbopack with-turbopack-app\n```\n\n----------------------------------------\n\nTITLE: Building and starting a Next.js app with pnpm\nDESCRIPTION: These commands build and start the Next.js application in production using pnpm. `pnpm build` compiles the app for deployment, and `pnpm start` initiates the production server. A pre-existing Next.js project setup is expected.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement in Next.js Components\nDESCRIPTION: Demonstrates how to properly measure execution time in Next.js components by replacing Date.now() with performance.now() for more accurate timing measurements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const start = Date.now();\n  const data = computeDataSlowly(...);\n  const end = Date.now();\n  console.log(`somethingSlow took ${end - start} milliseconds to complete`)\n\n  return ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const start = performance.now();\n  const data = computeDataSlowly(...);\n  const end = performance.now();\n  console.log(`somethingSlow took ${end - start} milliseconds to complete`)\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Files in getStaticProps - JSX\nDESCRIPTION: This code snippet demonstrates how to read files from the file system within `getStaticProps` using `process.cwd()` to construct the correct file path. It fetches a list of posts from the 'posts' directory, reads their content, and passes the data as props to the `Blog` component. It uses `fs.promises` for asynchronous file operations and `path` module for path manipulation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { promises as fs } from 'fs'\nimport path from 'path'\n\n// posts will be populated at build time by getStaticProps()\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>\n          <h3>{post.filename}</h3>\n          <p>{post.content}</p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  const postsDirectory = path.join(process.cwd(), 'posts')\n  const filenames = await fs.readdir(postsDirectory)\n\n  const posts = filenames.map(async (filename) => {\n    const filePath = path.join(postsDirectory, filename)\n    const fileContents = await fs.readFile(filePath, 'utf8')\n\n    // Generally you would parse/transform the contents\n    // For example you can transform markdown to HTML here\n\n    return {\n      filename,\n      content: fileContents,\n    }\n  })\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts: await Promise.all(posts),\n    },\n  }\n}\n\nexport default Blog\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Document in Next.js\nDESCRIPTION: A minimal implementation of a custom Document component that extends the default HTML document markup. It includes the required Html, Head, Main, and NextScript components from next/document.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/06-custom-document.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with NextRequest\nDESCRIPTION: This snippet demonstrates how to set a cookie using the `set` method of the `request.cookies` object in Next.js. It sets a cookie named 'show-banner' with a value of 'false' and a path of '/home'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\n// Set a cookie to hide the banner\n// request will have a `Set-Cookie:show-banner=false;path=/home` header\nrequest.cookies.set('show-banner', 'false')\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Metadata (JSX - App Router)\nDESCRIPTION: This JavaScript code imports an MDX file and its exported metadata in a Next.js application using the App Router. It logs the metadata to the console and then renders the MDX content within the page component. This allows accessing and using data defined within the MDX file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Next.js App Creation\nDESCRIPTION: These commands demonstrate how to start the interactive project creation process using `create-next-app`.  The user is prompted to answer questions about project settings, such as whether to use TypeScript. The commands use different package managers: npm, yarn, pnpm and bun.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n# or\nyarn create next-app\n# or\npnpm create next-app\n# or\nbunx create-next-app\n```\n\n----------------------------------------\n\nTITLE: Using useFormStatus for Search Button in Next.js JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the 'useFormStatus' hook to create a 'SearchButton' component providing feedback on form submission state in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use client'\nimport { useFormStatus } from 'react-dom'\n\nexport default function SearchButton() {\n  const status = useFormStatus()\n  return (\n    <button type=\"submit\">{status.pending ? 'Searching...' : 'Search'}</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Connection in Next.js Page (JavaScript)\nDESCRIPTION: This snippet shows how to utilize the `connection` function within a JavaScript file in a Next.js application, enabling dynamic content changes upon user requests and leveraging APIs like `Math.random()` for different rendering outputs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/connection.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connection } from 'next/server'\\n\\nexport default async function Page() {\\n  await connection()\\n  // Everything below will be excluded from prerendering\\n  const rand = Math.random()\\n  return <span>{rand}</span>\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Metadata (appId) - JSX\nDESCRIPTION: This code snippet demonstrates how to configure Facebook metadata with the `appId` using the `facebook` property within the `metadata` export in a Next.js layout or page file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_56\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  facebook: {\n    appId: '12345678',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes (App Router - JSX)\nDESCRIPTION: This JSX code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n\"export default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Component in TypeScript for Next.js\nDESCRIPTION: This snippet demonstrates how to create a loading component in TypeScript for Next.js. It exports a default function that returns a simple loading message, which can be customized to display a loading skeleton component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/loading.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidate Specific URL with Next.js\nDESCRIPTION: This code snippet demonstrates how to revalidate a specific URL using the `revalidatePath` function from the `next/cache` module.  It imports the function and then calls it with the desired path. This will revalidate the given URL on the next page visit.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/post-1')\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Profiles in Next.js JavaScript\nDESCRIPTION: This JavaScript snippet illustrates adding a cache profile configuration in Next.js's next.config.js file. It defines cache settings for a 'blog' profile with 'stale', 'revalidate', and 'expire' properties, utilizing the 'dynamicIO' flag in the experimental section.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    dynamicIO: true,\n    cacheLife: {\n      blog: {\n        stale: 3600, // 1 hour\n        revalidate: 900, // 15 minutes\n        expire: 86400, // 1 day\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Codemod for Async Request API\nDESCRIPTION: This command runs the Next.js codemod to automatically fix many cases of synchronous dynamic API access in your project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @next/codemod@canary next-async-request-api .\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Loader and Path in Next.js\nDESCRIPTION: This code snippet shows how to configure a custom image loader and path prefix in `next.config.js`.  This allows using a cloud provider to optimize images and relative URLs for the image `src` property. It defines the `loader` (e.g., 'imgix') and the base `path` for the images.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'imgix',\n    path: 'https://example.com/myaccount/',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: createContext Usage in Client Component (After)\nDESCRIPTION: This code snippet demonstrates the correct way to use `createContext` in Next.js by marking the component as a Client Component with the `'use client'` directive.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport { createContext } from 'react'\n\nconst Context = createContext()\n```\n\n----------------------------------------\n\nTITLE: Importing runtime-specific code (TypeScript)\nDESCRIPTION: This code snippet demonstrates conditionally importing code based on the Next.js runtime environment (Node.js or Edge). It uses the `NEXT_RUNTIME` environment variable to determine the current runtime and imports the corresponding instrumentation file. The files 'instrumentation-node' and 'instrumentation-edge' are assumed to contain runtime-specific instrumentation logic.  This is done within the `register` function in `instrumentation.ts`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Preview Mode Cookies with Path - JavaScript\nDESCRIPTION: This JavaScript code shows how to clear preview mode cookies for a specific path. If a path was set using `setPreviewData`, the same path must be passed to `clearPreviewData` when clearing the cookies.  It retrieves the path from the request query parameters and passes it to `res.clearPreviewData`.  Requires setting up an API endpoint.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const { path } = req.query\n\n  res.clearPreviewData({ path })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Configuration Setup\nDESCRIPTION: Shows the basic structure of a Next.js configuration file using CommonJS module exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with TypeScript (Yarn)\nDESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the TypeScript example. It leverages Yarn to create a project named `with-typescript-app` based on the specified example. This command is executed in the terminal.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-typescript with-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-apollo-and-redux-app' based on the 'with-apollo-and-redux' example. It uses pnpm's create command to set up the project using the given example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-apollo-and-redux with-apollo-and-redux-app\n```\n\n----------------------------------------\n\nTITLE: Disabling x-powered-by Header in Next.js Configuration\nDESCRIPTION: This code snippet shows how to modify the next.config.js file to disable the default x-powered-by header in a Next.js application. By setting poweredByHeader to false, the header will not be included in the server responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/poweredByHeader.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  poweredByHeader: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styles Using style Object in React Components\nDESCRIPTION: Example of applying font styles by using the style object returned from a font loader. This approach provides access to the fontFamily property and fallback fonts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<p style={inter.style}>Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Panda CSS using Yarn\nDESCRIPTION: This command uses Yarn to execute create next app, setting up a new Next.js project with the panda-css example. It bootstraps the application with the necessary configurations for Panda CSS integration and creates a project named 'panda-css-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example panda-css panda-css-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Blog Layout in Next.js\nDESCRIPTION: Implements a layout component specifically for the blog section. This nested layout wraps all pages under the /blog route, providing shared UI elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function BlogLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function BlogLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Node.js Module Usage - Next.js\nDESCRIPTION: Example of correctly implementing Node.js-specific code (Redis) using getStaticProps in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Redis from 'ioredis'\n\nconst redis = new Redis(process.env.REDIS_URL)\n\nexport default redis\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport redis from '../lib/redis'\n\nexport async function getStaticProps() {\n  const message = await redis.get('message')\n  return {\n    message,\n  }\n}\n\nexport default function Home({ message }) {\n  return <h1>{message}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component with Dynamic Import - JSX\nDESCRIPTION: This code defines a client-side component using the `dynamic` import from `next/dynamic`. It imports the `App` component from a relative path and disables server-side rendering using `ssr: false`. The `'use client'` directive designates this file as a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Next.js Server in JavaScript\nDESCRIPTION: This code snippet initializes a custom Next.js server using JavaScript. It imports the necessary modules like http, url, and next.  The code creates a server instance, prepares the Next.js application, and sets up a request handler to process incoming requests. The server listens on a specified port, defaulting to 3000, and logs a message indicating its status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'http'\nimport { parse } from 'url'\nimport next from 'next'\n\nconst port = parseInt(process.env.PORT || '3000', 10)\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\napp.prepare().then(() => {\n  createServer((req, res) => {\n    const parsedUrl = parse(req.url, true)\n    handle(req, res, parsedUrl)\n  }).listen(port)\n\n  console.log(\n    `> Server listening at http://localhost:${port} as ${\n      dev ? 'development' : process.env.NODE_ENV\n    }`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Extensions\nDESCRIPTION: Example of configuring custom file extensions for module resolution in Turbopack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  turbopack: {\n    resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.mjs', '.json'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Headers Length in next.config.js\nDESCRIPTION: Configuration snippet showing how to set the maximum length for React-emitted headers in Next.js. This setting helps control header size when dealing with preloaded resources like fonts, scripts, and stylesheets. Default value is 6000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactMaxHeadersLength.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reactMaxHeadersLength: 1000,\n}\n```\n\n----------------------------------------\n\nTITLE: Bottom-Up Dynamic Params Generation for Multiple Segments (JavaScript)\nDESCRIPTION: Generate static params for both category and product segments by fetching products data and mapping to route params\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n\nexport default function Page({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Turbotrace\nDESCRIPTION: Configuration options for enabling and customizing the experimental Rust-based Turbotrace feature for faster dependency tracing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    turbotrace: {\n      // control the log level of the turbotrace, default is `error`\n      logLevel?:\n      | 'bug'\n      | 'fatal'\n      | 'error'\n      | 'warning'\n      | 'hint'\n      | 'note'\n      | 'suggestions'\n      | 'info',\n      // control if the log of turbotrace should contain the details of the analysis, default is `false`\n      logDetail?: boolean\n      // show all log messages without limit\n      // turbotrace only show 1 log message for each categories by default\n      logAll?: boolean\n      // control the context directory of the turbotrace\n      // files outside of the context directory will not be traced\n      // set the `outputFileTracingRoot` has the same effect\n      // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used\n      contextDirectory?: string\n      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.\n      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')\n      processCwd?: string\n      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.\n      memoryLimit?: number\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring optimizePackageImports in Next.js\nDESCRIPTION: Configuration example showing how to add packages to the optimizePackageImports experimental feature in next.config.js. This optimization ensures only used modules are loaded from large packages while maintaining the convenience of named exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/optimizePackageImports.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    optimizePackageImports: ['package-name'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: getServerSideProps with props return - JavaScript\nDESCRIPTION: This example demonstrates the basic usage of `getServerSideProps` to pass static props to a page component.  It returns an object with a `props` key, which contains the data to be passed to the page. The `message` prop is then accessible within the `Page` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getServerSideProps(context) {\n  return {\n    props: { message: `Next.js is awesome` }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Error Handling\nDESCRIPTION: Defines a structuredError function that formats error objects with name, message, and parsed stack traces for better error reporting.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { parse as parseStackTrace } from \"../compiled/stacktrace-parser\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getProperError } from \"./error\";\nfunction structuredError(e) {\n    e = getProperError(e);\n    return {\n        name: e.name,\n        message: e.message,\n        stack: typeof e.stack === \"string\" ? parseStackTrace(e.stack) : []\n    };\n}\nexport { structuredError as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Configuration with Plugins\nDESCRIPTION: Next.js MDX configuration demonstrating how to include remark and rehype plugins for advanced MDX processing\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst withMDX = require('@next/mdx')({\n  options: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n})\nmodule.exports = withMDX()\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to a Channel\nDESCRIPTION: This example shows how to publish a message to an Ably channel using the channel instance returned by the useChannel hook. It uses the Ably JavaScript SDK's channel.publish method.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.publish(\"test-message\", { text: \"message text\" });\n```\n\n----------------------------------------\n\nTITLE: Caching Function Output with 'use cache' (TypeScript)\nDESCRIPTION: Shows how to apply 'use cache' to an asynchronous function that fetches data. This allows caching the function's output independently from components, useful for network requests or database queries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getData() {\n  'use cache'\n\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to router events\nDESCRIPTION: This code snippet shows how to subscribe to Next.js router events using `router.events.on`. It uses `useEffect` to register an event handler for `routeChangeStart` and logs information about the route change. The handler is unsubscribed in the effect's cleanup function to prevent memory leaks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n\n  useEffect(() => {\n    const handleRouteChange = (url, { shallow }) => {\n      console.log(\n        `App is changing to ${url} ${\n          shallow ? 'with' : 'without'\n        } shallow routing`\n      )\n    }\n\n    router.events.on('routeChangeStart', handleRouteChange)\n\n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChange)\n    }\n  }, [router])\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Storybook example (pnpm)\nDESCRIPTION: This command uses `create next-app` via pnpm to generate a new Next.js application pre-configured with Storybook. It utilizes an example template to include the necessary Storybook setup and configurations. The `with-storybook-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-storybook with-storybook-app\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables file\nDESCRIPTION: This command copies the example environment variable file `.env.local.example` to `.env.local`. The `.env.local` file is intended to hold environment-specific configurations, and is often ignored by Git to avoid accidentally committing sensitive information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Building and starting a Next.js app with npm\nDESCRIPTION: These commands build and start the Next.js application in production mode using npm.  `npm run build` compiles the application for production, and `npm run start` starts the production server. Requires a properly configured Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Graph Representation of Dependencies with Mermaid\nDESCRIPTION: Uses Mermaid syntax to graphically represent dependency relationships between items, showing the export process and links between item nodes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item3[\"export a\"];\n    Item4;\n    Item4[\"export b\"];\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item3[\"export a\"];\n    Item4;\n    Item4[\"export b\"];\n    Item3 --> Item1;\n    Item4 --> Item2;\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Application\nDESCRIPTION: These commands install dependencies and start the Next.js development server. The `npm install` and `yarn install` commands install dependencies, and `npm run dev` and `yarn dev` start the development server.  Choose the set of commands appropriate for the package manager you are using.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Xata using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application pre-configured to work with Xata. It bootstraps the project using the `with-xata` example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn create next-app --example with-xata with-xata-app\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Variables at Build-Time in Next.js Compiler\nDESCRIPTION: This snippet demonstrates how to use the define option in the Next.js Compiler configuration to statically replace variables within the code during the build process, facilitating the customization of environment-specific values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    define: {\n      MY_STRING_VARIABLE: JSON.stringify('my-string'),\n      MY_NUMBER_VARIABLE: '42',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with StyledJsxRegistry in TypeScript\nDESCRIPTION: This snippet demonstrates how to wrap a root layout component in Next.js with the StyledJsxRegistry to apply CSS-in-JS styles globally. This is necessary to ensure that styles are applied correctly during server-side rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport StyledJsxRegistry from './registry'\\n\\nexport default function RootLayout({\\n  children,\\n}: {\\n  children: React.ReactNode\\n}) {\\n  return (\\n    <html>\\n      <body>\\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\\n      </body>\\n    </html>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Images in Pages Router\nDESCRIPTION: This snippet illustrates the usage of a local image within the Pages Router, automatically deriving its intrinsic dimensions from the imported image file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting State Using a React Key in _app.js (JSX)\nDESCRIPTION: This demonstrates how to reset the state of a component upon navigation by using a React key. By assigning `router.asPath` as the key to the `Component` in `_app.js`, React will remount the component when the route changes, effectively resetting the state. This provides a way to reset state for all pages in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n  return <Component key={router.asPath} {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Other Variables in .env File\nDESCRIPTION: This snippet demonstrates how to reference other environment variables within a `.env` file using the `$` syntax. In this example, `TWITTER_URL` is set to a value that includes the value of `TWITTER_USER`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nTWITTER_USER=nextjs\nTWITTER_URL=https://x.com/$TWITTER_USER\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream from an Iterator - TypeScript\nDESCRIPTION: This TypeScript snippet defines a function that converts an async iterator into a ReadableStream. It includes a helper function to simulate data production using an iterator.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator: any) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Static Generation with Environment-based Conditions in Next.js\nDESCRIPTION: Implementation of getStaticPaths that conditionally generates pages based on environment variables. This pattern allows for faster builds in preview environments while ensuring full pre-rendering in production for optimal SEO and performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticPaths() {\n  // When this is true (in preview environments) don't\n  // prerender any static pages\n  // (faster builds, but slower initial page load)\n  if (process.env.SKIP_BUILD_STATIC_GENERATION) {\n    return {\n      paths: [],\n      fallback: 'blocking',\n    }\n  }\n\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to prerender based on posts\n  // In production environments, prerender all pages\n  // (slower builds, but faster initial page load)\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // { fallback: false } means other routes should 404\n  return { paths, fallback: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tailwind CSS in Next.js\nDESCRIPTION: These examples show how to import Tailwind directives in a global CSS file, set up the root layout, and use Tailwind utility classes in a Next.js component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode\nDESCRIPTION: These commands install the necessary Node.js packages and start the Next.js development server.  `npm install` or `yarn install` downloads dependencies specified in the `package.json` file. `npm run dev` or `yarn dev` then starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Staging Environment\nDESCRIPTION: This snippet details the commands for building and starting the application in a staging environment suitable for user acceptance testing (UAT). It uses the Makefile for execution and the application runs on a designated localhost port.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build-staging\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake start-staging\n```\n\n----------------------------------------\n\nTITLE: Using Sass Variables in Next.js Pages Router (JSX)\nDESCRIPTION: This code snippet shows how to use a Sass variable exported from a CSS Module in a Next.js component using the Pages Router. It imports the styles from `variables.module.scss` and passes the `primaryColor` variable as a prop to a `Layout` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport variables from '../styles/variables.module.scss'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout color={variables.primaryColor}>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Images with Dynamic URLs in Next.js\nDESCRIPTION: This snippet illustrates how to render responsive images when using dynamic or remote URLs in Next.js. The user must provide width and height to maintain the correct aspect ratio for the image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page({ photoUrl }) {\n  return (\n    <Image\n      src={photoUrl}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n      width={500}\n      height={300}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Dynamic Data Access in Next.js (JavaScript)\nDESCRIPTION: The `trackDynamicDataAccessed` function is used to track when dynamic data is accessed within a Next.js route. It checks if the access occurs within an `unstable_cache` scope, and if so, throws an error. If not, it handles the access based on the store's properties such as `dynamicShouldError`, `prerenderState`, and `isStaticGeneration`, potentially throwing errors, postponing rendering, or setting the revalidation time to 0.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 2\n};\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 6\n};\nimport { getPathname } from '../../lib/url';\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 4\n};\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nimport { f as postponeWithTracking } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: -8\n};\nfunction trackDynamicDataAccessed(store, expression) {\n    const pathname = getPathname(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        throw new Error(`Route ${pathname} used \\\"${expression}\\\" inside a function cached with \\\"unstable_cache(...)\\\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \\\"${expression}\\\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`);\n    } else if (store.dynamicShouldError) {\n        throw new StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \\\"error\\\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (store.prerenderState) {\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\nexport { trackDynamicDataAccessed };\nexport { trackDynamicDataAccessed as j } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Abort Fetch Requests with AbortController - JavaScript\nDESCRIPTION: This example illustrates how to manage individual `fetch` requests using the `AbortController` in JavaScript. While this approach allows aborting in-flight requests, it does not impact the memoization functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { signal } = new AbortController()\nfetch(url, { signal })\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Output in Next.js\nDESCRIPTION: Basic Next.js configuration to enable standalone output mode for optimized production deployments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: 'standalone',\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Ably Example (npm)\nDESCRIPTION: This command uses the create-next-app tool with npm to bootstrap a new Next.js application using the 'with-ably' example.  It sets up a basic project structure with Ably integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-ably with-ably-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with TinaCMS example\nDESCRIPTION: This command initializes a new Next.js application using the `cms-tina` example. It leverages `create-next-app` with npm to bootstrap the project, setting up the necessary files and dependencies for the TinaCMS integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npx create-next-app --example cms-tina cms-tina-app\"\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Salesforce Commerce Cloud template using pnpm\nDESCRIPTION: Command to bootstrap a Next.js application with Salesforce Commerce Cloud integration using pnpm create next-app with the with-sfcc example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-sfcc nextjs-sfcc-app\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Mode Duration - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to set the duration for the preview mode session using the `setPreviewData` function in Next.js. It uses the `maxAge` option to specify the expiration time in seconds (e.g., 1 hour) and the `path` option to restrict the preview mode to specific routes. It assumes that the `setPreviewData` function is available in the current scope, generally within an API route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetPreviewData(data, {\n  maxAge: 60 * 60, // The preview mode cookies expire in 1 hour\n  path: '/about', // The preview mode cookies apply to paths with /about\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Title to a Page using Next.js Head - JSX\nDESCRIPTION: This code snippet demonstrates how to add a title to a page using the `next/head` component in Next.js. It imports the `Head` component and uses it to define the `<title>` tag within a functional component. This will set the title of the HTML document for the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/head.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Firebase Example (pnpm)\nDESCRIPTION: This command initializes a new Next.js application named `with-firebase-app` using the `with-firebase` example. It leverages the `create next-app` tool with the pnpm package manager. This command assumes pnpm is installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-firebase with-firebase-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses `create next-app` with pnpm to bootstrap a new Next.js project based on the `with-graphql-gateway` example. It will create a directory named `with-graphql-gateway-app` with the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-graphql-gateway with-graphql-gateway-app\n```\n\n----------------------------------------\n\nTITLE: Fix: Re-exporting default and getServerSideProps in Next.js\nDESCRIPTION: This shows how to selectively re-export the default component and `getServerSideProps` if the target page uses server-side rendering. This is a safe way to expose only the necessary parts of the module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport { default, getServerSideProps } from './example-b'\n// or\nexport { default, getStaticProps } from './example-b'\n// or\nexport { default, getStaticProps, getStaticPaths } from './example-b/[dynamic]'\n```\n\n----------------------------------------\n\nTITLE: Configuring basePath in next.config.ts\nDESCRIPTION: This TypeScript code snippet shows how to configure the `basePath` in `next.config.ts` to serve the Next.js application under a specific subpath.  It imports `NextConfig` and sets the `basePath` property to `/my-subpath`. This requires the `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  basePath: '/my-subpath',\n  // ...\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Gap Property for CSS Grid in JavaScript\nDESCRIPTION: A module that implements the 'gap' CSS grid property. It handles responsive breakpoints, transforms values using theme spacing, and includes PropType validation for development environments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { createUnaryUnit } from './spacing';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getValue } from './spacing';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport { handleBreakpoints } from './breakpoints';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nconst gap = (props)=>{\n    if (props.gap !== undefined && props.gap !== null) {\n        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');\n        const styleFromPropValue = (propValue)=>({\n                gap: getValue(transformer, propValue)\n            });\n        return handleBreakpoints(props, props.gap, styleFromPropValue);\n    }\n    return null;\n};\nexport { gap as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -11\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nimport responsivePropType from './responsivePropType';\ngap.propTypes = process.env.NODE_ENV !== 'production' ? {\n    gap: responsivePropType\n} : {};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -11\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 12\n};\ngap.filterProps = [\n    'gap'\n];\nexport { gap };\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in ORM Config - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates using an environment variable (`DATABASE_URL`) in an ORM configuration. It imports the `envConfig.js` module to load environment variables and then uses `process.env.DATABASE_URL` to configure the database connection string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport './envConfig.js'\n\nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Understanding Next.js Apple Icon HTML Output\nDESCRIPTION: Shows the HTML head output generated by Next.js when using the apple-icon file convention. The link element includes the apple-touch-icon relation type with dynamically generated attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Error Boundary in Next.js with TypeScript\nDESCRIPTION: TypeScript implementation of an error boundary component for handling runtime errors in Next.js route segments. Uses React's error boundary pattern with client-side components to display fallback UI and provide error recovery options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client' // Error boundaries must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js ISR Version History Table\nDESCRIPTION: Markdown table showing the version history of ISR-related features in Next.js, including when features like custom cacheHandler, App Router, and On-Demand ISR were introduced or became stable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Version   | Changes                                                                             |\n| --------- | ----------------------------------------------------------------------------------- |\n| `v14.1.0` | Custom `cacheHandler` is stable.                                                    |\n| `v13.0.0` | App Router is introduced.                                                           |\n| `v12.2.0` | Pages Router: On-Demand ISR is stable                                               |\n| `v12.0.0` | Pages Router: [Bot-aware ISR fallback](/blog/next-12#bot-aware-isr-fallback) added. |\n| `v9.5.0`  | Pages Router: [Stable ISR introduced](/blog/next-9-5).                              |\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with next-sitemap example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-next-sitemap example. It automates the setup process, including installing necessary dependencies and configuring the project structure. The target directory is specified as with-next-sitemap-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-next-sitemap with-next-sitemap-app\n```\n\n----------------------------------------\n\nTITLE: Copying Environment File\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This allows local environment variables to be configured without committing them to Git.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Makeswift Example\nDESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `cms-makeswift` example. It demonstrates using npm, yarn, and pnpm to bootstrap the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-makeswift cms-makeswift-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-makeswift cms-makeswift-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-makeswift cms-makeswift-app\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies for Next.js\nDESCRIPTION: This snippet shows a diff of the package.json file, demonstrating the upgrade of Next.js to version 15.0.4 and React to version 19.0.0. It also includes changes to the TypeScript type definitions for React, ensuring compatibility with the new versions. The use of pnpm for managing package overrides is also depicted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/next-14-installed/README.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json\nindex 5ec4c37f0b..131f5b9f4a 100644\n--- a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json\n+++ b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json\n@@ -4,10 +4,16 @@\n     \"dev\": \"next dev\"\n   },\n   \"dependencies\": {\n-    \"next\": \"14.3.0-canary.44\",\n-    \"react\": \"18.2.0\",\n-    \"react-dom\": \"18.2.0\",\n-    \"@types/react\": \"^18.2.0\",\n-    \"@types/react-dom\": \"^18.2.0\"\n+    \"next\": \"15.0.4-canary.43\",\n+    \"react\": \"19.0.0\",\n+    \"react-dom\": \"19.0.0\",\n+    \"@types/react\": \"19.0.0\",\n+    \"@types/react-dom\": \"19.0.0\"\n+  },\n+  \"pnpm\": {\n+    \"overrides\": {\n+      \"@types/react\": \"19.0.0\",\n+      \"@types/react-dom\": \"19.0.0\"\n+    }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring preferredRegion in Next.js (JS)\nDESCRIPTION: This code snippet demonstrates how to configure the `preferredRegion` option in a Next.js layout, page, or route using JavaScript. The `preferredRegion` configuration specifies the geographical region where the route segment should be deployed, influencing latency and data locality. It supports values like 'auto', 'global', 'home', or an array of region codes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n```\n\n----------------------------------------\n\nTITLE: Re-exporting all exports leading to error in Next.js\nDESCRIPTION: This code snippet demonstrates how re-exporting all exports from `example-a.js` in `example-b.js` triggers the 'Module not found' error. This is because `fs` is a Node.js module and is not available in the browser environment, causing a build failure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport * from './example-a'\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Registry in JavaScript\nDESCRIPTION: Similar to the TypeScript version, this JavaScript function captures and manages styled-components styles, maintaining efficient style usage during server rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({ children }) {\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Apollo using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-apollo-app' using the 'with-apollo' example. It bootstraps the project with the necessary dependencies and configuration for Apollo integration. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-apollo with-apollo-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Rematch using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-rematch' example. It sets up a project named 'with-rematch-app' in the current directory. This assumes pnpm is installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-rematch with-rematch-app\n```\n\n----------------------------------------\n\nTITLE: Using onLoad Callback (App Router, TSX)\nDESCRIPTION: This code snippet demonstrates how to use the `onLoad` property with the `Script` component to execute code after the script has loaded in a Next.js application using the App Router. This is useful for initializing content or calling a function from the loaded script.  `onLoad` can only be used in Client Components and with `afterInteractive` or `lazyOnload` strategies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Next.js\nDESCRIPTION: Shows how to access dynamic route parameters using the params prop in a Next.js page component. The params object is a promise that contains route segment parameters defined in the file path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { slug } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Page Layouts in Next.js Pages\nDESCRIPTION: Adding a getLayout property to a page component to define page-specific layouts. This approach allows for complex nested layouts and is defined at the page level rather than globally.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\n\nexport default function Page() {\n  return (\n    /** Your content */\n  )\n}\n\nPage.getLayout = function getLayout(page) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Generation Options in Next.js JavaScript\nDESCRIPTION: JavaScript configuration for Next.js static generation settings including retry count, max concurrency, and minimum pages per worker. Uses the experimental configuration options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/staticGeneration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  experimental: {\n    staticGenerationRetryCount: 1,\n    staticGenerationMaxConcurrency: 8,\n    staticGenerationMinPagesPerWorker: 25,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for testProxy\nDESCRIPTION: This snippet configures the `next.config.js` file to enable the experimental `testProxy` feature, which is required to use Playwright's experimental test mode in Next.js. This setting allows Next.js to work with Playwright for testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    testProxy: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Modules in Next.js\nDESCRIPTION: CSS Modules locally scope CSS by generating unique class names. This example shows how to create and import a CSS Module file and apply the styles to a component in the app directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.blog {\n  padding: 24px;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function Page({ children }: { children: React.ReactNode }) {\n  return <main className={styles.blog}>{children}</main>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function Page({ children }) {\n  return <main className={styles.blog}>{children}</main>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Trailing Slashes in Next.js Configuration\nDESCRIPTION: This code snippet shows how to enable trailing slashes for exported pages in the next.config.js file. This configuration changes the export behavior to use index.html files for each route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/exportPathMap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Behavior with Link Component in Pages Router (TypeScript)\nDESCRIPTION: Example of disabling default scroll behavior with the Next.js Link component in Pages Router. Setting scroll to false prevents Next.js from scrolling to the top of the page after navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PPR in a TypeScript Page Component\nDESCRIPTION: Example of a TypeScript page that uses Partial Prerendering by enabling the experimental_ppr flag and wrapping dynamic content with Suspense boundaries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { StaticComponent, DynamicComponent, Fallback } from '@/app/ui'\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return (\n    <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Provider in Layout with JavaScript\nDESCRIPTION: This snippet shows how to implement the ThemeProvider in the RootLayout component in JavaScript, allowing all nested components to access the theme context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport ThemeProvider from './theme-provider'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Metadata with Parent Metadata in Next.js (TSX)\nDESCRIPTION: This snippet demonstrates how to define a `generateMetadata` function that accepts segment props and the parent metadata in Next.js using TypeScript. It imports `ResolvingMetadata` and uses it as a type for the `parent` argument. This allows merging metadata from parent layouts or pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_74\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata, ResolvingMetadata } from 'next'\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the server-only Package\nDESCRIPTION: Command to install the server-only package which helps prevent server-only code from being used in the client environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install server-only\n```\n\n----------------------------------------\n\nTITLE: Using Client Component in Page - TSX\nDESCRIPTION: This code imports the `ClientOnly` component and renders it inside the `Page` component. The `generateStaticParams` function ensures static pre-rendering. The `Page` component is now a server component that renders a client component.  The slug is set to [''] to catch all routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Other Metadata (array value) - JSX\nDESCRIPTION: This code snippet demonstrates how to configure multiple custom metadata tags with the same key, using an array value within the `other` property.  Each element of the array generates a new meta tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_66\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  other: {\n    custom: ['meta1', 'meta2'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (Yarn)\nDESCRIPTION: This command creates a new Next.js application using the `with-apivideo` example. It uses Yarn to execute the `create-next-app` command, scaffolding the project with the specified example and naming the new application `with-apivideo-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-apivideo with-apivideo-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js MDX app with yarn\nDESCRIPTION: This command utilizes yarn to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example mdx mdx-app\n```\n\n----------------------------------------\n\nTITLE: Disabling All Logging in Development\nDESCRIPTION: Disables all development logging by setting `logging` to `false` in `next.config.js`. This configuration ensures no logs are recorded during development sessions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  logging: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styles Using className in React Components\nDESCRIPTION: Example of applying optimized font styles by using the className property returned from a font loader. This approach is commonly used to style elements with the loaded font.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<p className={inter.className}>Hello, Next.js!</p>\n```\n\n----------------------------------------\n\nTITLE: Generating Open Graph Image Metadata in HTML\nDESCRIPTION: This snippet shows the HTML output for the Open Graph image metadata. It includes the image URL, type, width, and height.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:type\" content=\"<generated>\" />\n<meta property=\"og:image:width\" content=\"<generated>\" />\n<meta property=\"og:image:height\" content=\"<generated>\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling React Compiler in Next.js Configuration (JavaScript)\nDESCRIPTION: Configuration to enable the React Compiler in next.config.js file. This sets the experimental.reactCompiler option to true.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    reactCompiler: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Next.js Middleware (JS)\nDESCRIPTION: This snippet shows how to set both request and response headers within a Next.js middleware function. It demonstrates cloning request headers, setting new headers, and applying these headers using `NextResponse.next`. It also covers setting response headers directly on the `NextResponse` object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  // Clone the request headers and set a new header `x-hello-from-middleware1`\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n\n  // You can also set request headers in NextResponse.next\n  const response = NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  })\n\n  // Set a new response header `x-hello-from-middleware2`\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Next.js Middleware Using URLPattern\nDESCRIPTION: Modern implementation using URLPattern API to handle URL parameter extraction and redirection. Includes pattern matching for locale and slug parameters with a more flexible approach.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-request-page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nconst PATTERNS = [\n  [\n    new URLPattern({ pathname: '/:locale/:slug' }),\n    ({ pathname }) => pathname.groups,\n  ],\n]\n\nconst params = (url) => {\n  const input = url.split('?')[0]\n  let result = {}\n\n  for (const [pattern, handler] of PATTERNS) {\n    const patternResult = pattern.exec(input)\n    if (patternResult !== null && 'pathname' in patternResult) {\n      result = handler(patternResult)\n      break\n    }\n  }\n  return result\n}\n\nexport function middleware(request: NextRequest) {\n  const { locale, slug } = params(request.url)\n\n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next App with styled-components using yarn\nDESCRIPTION: This command initializes a new Next.js application using the with-styled-components example. It uses yarn to execute create next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-styled-components with-styled-components-app\n```\n\n----------------------------------------\n\nTITLE: Generating Sitemaps in JavaScript with Next.js\nDESCRIPTION: This JavaScript snippet mirrors the TypeScript version to generate multiple sitemaps for product entries. It also uses a generateSitemaps function to handle sitemap ID generation and fetches products to build a detailed sitemap object. Key aspects include URL construction and adherence to a URL count per sitemap limit.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-sitemaps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({ id }) {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (Bun)\nDESCRIPTION: This command uses Bun to create a new Next.js application based on the with-algolia-react-instantsearch example.  It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps with JavaScript in Next.js\nDESCRIPTION: This example shows how to fetch data from GitHub API using getServerSideProps in a JavaScript Next.js page. The function fetches repository data and passes it as props to the page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Orbit-components using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application bootstrapped with the Orbit-components example. It leverages the create-next-app tool for project setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-orbit-components with-orbit-components-app\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Image Component\nDESCRIPTION: Example of implementing the Next.js Image component for optimized image loading. The component includes essential properties like src, alt, width, and height for proper image rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nfunction Home() {\n  return (\n    <Image\n      src=\"https://example.com/hero.jpg\"\n      alt=\"Landscape picture\"\n      width={800}\n      height={500}\n    />\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Using useSearchParams in a Next.js Client Component (TSX)\nDESCRIPTION: This code demonstrates how to use the `useSearchParams` hook in a Next.js Client Component to extract a specific query parameter from the URL. It imports the hook from `next/navigation` and uses the `get` method to retrieve the value of the `search` parameter. It is intended for use within the `app` directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client'\\n\\nimport { useSearchParams } from 'next/navigation'\\n\\nexport default function SearchBar() {\\n  const searchParams = useSearchParams()\\n\\n  const search = searchParams.get('search')\\n\\n  // URL -> `/dashboard?search=my-project`\\n  // `search` -> 'my-project'\\n  return <>Search: {search}</>\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline CSS in Next.js Configuration - TypeScript\nDESCRIPTION: This TypeScript snippet configures a Next.js application to enable inline CSS by setting the 'inlineCss' flag to true within the 'experimental' configuration. The configuration ensures all CSS is inlined within <style> tags instead of using <link> tags, which optimizes loading times under certain conditions. This setup requires a Next.js environment where 'experimental.inlineCss' is an available option.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/inlineCss.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    inlineCss: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Exporting Default from a Part in JavaScript\nDESCRIPTION: This snippet exports the default export from a designated part based on the specified assertion. This is crucial for managing module exports effectively, allowing for optimized code loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default } from '__TURBOPACK_PART__' assert { __turbopack_part__: 'export default' };\n```\n\n----------------------------------------\n\nTITLE: Global Error Handler\nDESCRIPTION: Root-level error boundary component for handling application-wide errors, including custom HTML structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheets - TypeScript\nDESCRIPTION: This snippet demonstrates how to import external stylesheets, like Bootstrap CSS, directly into the root layout of a Next.js application, using TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Preload Pattern in NextJS Components\nDESCRIPTION: Implementation of preload pattern for data fetching optimization in a NextJS Item component. Uses void operator to initiate data fetching without blocking rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id: string) => {\n  void getItem(id)\n}\nexport default async function Item({ id }: { id: string }) {\n  const result = await getItem(id)\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id) => {\n  void getItem(id)\n}\nexport default async function Item({ id }) {\n  const result = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Limited Bots in next.config.js\nDESCRIPTION: This snippet shows how to configure the `htmlLimitedBots` option in `next.config.js` to customize which user agents receive blocking metadata. It defines a regex string that matches specific bot user agents. It provides a JavaScript version of the configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_77\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',\n}\n```\n\n----------------------------------------\n\nTITLE: Running Contentful setup script\nDESCRIPTION: This command executes the setup script to automatically create the content model within Contentful. It requires the CONTENTFUL_SPACE_ID and CONTENTFUL_MANAGEMENT_TOKEN environment variables to be set.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cross-env CONTENTFUL_SPACE_ID=YOUR_SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN=XXX npm run setup\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command utilizes Yarn to bootstrap a new Next.js application called 'with-polyfills-app' using the 'with-polyfills' example. It configures the application with the required polyfills for older browser support.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-polyfills with-polyfills-app\n```\n\n----------------------------------------\n\nTITLE: Rewriting URL in Next.js Middleware (TS)\nDESCRIPTION: This code snippet demonstrates how to rewrite the URL in a Next.js middleware. It imports `NextRequest` and `NextResponse` from `next/server`, accesses the `nextUrl` property of the request, modifies the pathname using `nextUrl.pathname = '/dest'`, and then rewrites the request to the modified URL. This ensures a redirect to the specified destination.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/deleting-query-params-in-middlewares.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { NextResponse } from 'next/server'\n\nexport default function middleware(request: NextRequest) {\n  const nextUrl = request.nextUrl\n  nextUrl.pathname = '/dest'\n  return NextResponse.rewrite(nextUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Multiple User Agents in JavaScript\nDESCRIPTION: A JavaScript implementation for creating custom rules for different search engine bots. It defines specific crawling rules for Googlebot and blocks Applebot and Bingbot from crawling the site.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function robots() {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: ['/private/'],\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named `i18n-routing-pages-app` based on the `i18n-routing-pages` example.  It bootstraps the project with the specified template, setting up the necessary files and dependencies for an internationalized routing application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example i18n-routing-pages i18n-routing-pages-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GSAP using PNPM\nDESCRIPTION: This command initializes a new Next.js application using the `with-gsap` example. It utilizes `create-next-app` via pnpm. The resulting application will be named `with-gsap-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-gsap with-gsap-app\n```\n\n----------------------------------------\n\nTITLE: Handling Web Vitals Metrics by Name (App Router, JSX)\nDESCRIPTION: This JavaScript code snippet shows how to handle specific web vital metrics by their `name` property using a switch statement inside the `useReportWebVitals` hook within the App Router in Next.js. It handles First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics as examples.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout in Next.js (Javascript)\nDESCRIPTION: This code defines the root layout component in Next.js using JavaScript. It is a required layout that wraps all routes in the application. It includes the `html` and `body` tags, allowing modification of the initial HTML returned from the server and rendering of nested components through the `children` prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Alias in Next.js\nDESCRIPTION: This code snippet demonstrates how to correctly extend the webpack alias configuration in `next.config.js` instead of replacing it. This ensures that Next.js' internal aliases, such as 'private-next-pages', are not inadvertently removed, preventing the 'Invalid webpack resolve alias' error.  It takes the existing `config` object as input and modifies its `resolve.alias` property by merging the existing aliases with the new custom aliases.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/config-resolve-alias.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"webpack(config) {\\n  config.resolve.alias = {\\n    ...config.resolve.alias,\\n    // your aliases\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Response in Next.js API Route\nDESCRIPTION: Demonstrates handling async operations and sending HTTP responses with status codes in a Next.js API route. Includes error handling with appropriate status codes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).send({ result })\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).send({ result })\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Imperative Routing with useRouter Hook in Next.js\nDESCRIPTION: This example demonstrates how to perform imperative routing in Next.js using the useRouter hook. It shows how to programmatically navigate to a different page when a button is clicked.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function ReadMore() {\n  const router = useRouter()\n\n  return (\n    <button onClick={() => router.push('/about')}>\n      Click here to read more\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry with Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize OpenTelemetry in a Next.js application using the `@vercel/otel` package.  It imports the `registerOTel` function and calls it within the `register` function exported from `instrumentation.ts`. This function is executed once when the Next.js server starts.  The `registerOTel` function takes a service name as input. Requires the `@vercel/otel` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Params and SearchParams in Next.js\nDESCRIPTION: Shows how to properly handle URL parameters by passing them as promises and awaiting them closer to where they're needed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Map({ lat, lng }) {\n  const mapData = await fetch(`https://...?lat=${lat}&lng=${lng}`)\n  return drawMap(mapData)\n}\n\nexport default async function Page({ searchParams }) {\n  const { lat, lng } = await searchParams;\n  return (\n    <Suspense fallback=\"loading your inbox...\">\n      <Map lat={lat} lng={lng}>\n    </Suspense>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Map({ coords }) {\n  const { lat, lng } = await coords\n  const mapData = await fetch(`https://...?lat=${lat}&lng=${lng}`)\n  return drawMap(mapData)\n}\n\nexport default async function Page({ searchParams }) {\n  const coords = searchParams.then(sp => ({ lat: sp.lat, lng: sp.lng }))\n  return (\n    <Suspense fallback=\"loading your inbox...\">\n      <Map coord={coords}>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Unauthorized Page with Login UI (TypeScript)\nDESCRIPTION: This snippet defines a TypeScript component for rendering a 401 error page with a login UI, aiming to guide unauthorized users to authenticate themselves. It utilizes a Login component to facilitate user login.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Login from '@/app/components/Login'\n\nexport default function UnauthorizedPage() {\n  return (\n    <main>\n      <h1>401 - Unauthorized</h1>\n      <p>Please log in to access this page.</p>\n      <Login />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component with Children Prop in JavaScript\nDESCRIPTION: This JavaScript example demonstrates creating a Client Component that accepts a children prop. The component maintains count state using useState while providing a slot for child components to render, allowing parent components to inject Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({ children }) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Images with Static Imports in Next.js\nDESCRIPTION: This snippet demonstrates how to render a responsive image using a static import in a Next.js component. It is particularly useful for non-dynamic images and allows the developer to specify sizes and styles conveniently.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport me from '../photos/me.jpg'\n\nexport default function Author() {\n  return (\n    <Image\n      src={me}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring maxDuration in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to configure the `maxDuration` option in a Next.js layout, page, or route using TypeScript. The `maxDuration` configuration sets the maximum execution time for server-side logic within the route segment, preventing long-running processes and improving resource management. It requires Next.js version 13.4.10 or higher.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const maxDuration = 5\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme-Aware Image Component in Next.js (JavaScript)\nDESCRIPTION: This JavaScript React component is similar to the TypeScript version, wrapping two Next.js Image components to display different images based on the user's theme preference.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './theme-image.module.css'\nimport Image from 'next/image'\n\nconst ThemeImage = (props) => {\n  const { srcLight, srcDark, ...rest } = props\n\n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-algolia-react-instantsearch example. It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Bun\nDESCRIPTION: This command uses Bun to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example cms-wordpress cms-wordpress-app\n```\n\n----------------------------------------\n\nTITLE: Including Non-Page Files in Pages Directory (Pages Router)\nDESCRIPTION: This code snippet demonstrates how to configure `pageExtensions` in `next.config.js` to allow colocating non-page files, like test files, in the `pages` directory in the Pages Router.  It requires renaming pages to include `.page` in the extension (e.g., `MyPage.tsx` becomes `MyPage.page.tsx`).  All relevant Next.js pages need to be renamed accordingly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/pageExtensions.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Handler - Next.js\nDESCRIPTION: This JavaScript code implements a custom cache handler for Next.js applications, providing `get`, `set`, and `revalidateTag` methods. It uses a simple `Map` for storage but can be adapted to use durable storage solutions like Redis or AWS S3. The handler allows for retrieving, storing, and invalidating cached data based on tags, ensuring consistency across multiple instances of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst cache = new Map()\n\nmodule.exports = class CacheHandler {\n  constructor(options) {\n    this.options = options\n  }\n\n  async get(key) {\n    // This could be stored anywhere, like durable storage\n    return cache.get(key)\n  }\n\n  async set(key, data, ctx) {\n    // This could be stored anywhere, like durable storage\n    cache.set(key, {\n      value: data,\n      lastModified: Date.now(),\n      tags: ctx.tags,\n    })\n  }\n\n  async revalidateTag(tags) {\n    // tags is either a string or an array of strings\n    tags = [tags].flat()\n    // Iterate over all entries in the cache\n    for (let [key, value] of cache) {\n      // If the value's tags include the specified tag, delete this entry\n      if (value.tags.some((tag) => tags.includes(tag))) {\n        cache.delete(key)\n      }\n    }\n  }\n\n  // If you want to have temporary in memory cache for a single request that is reset\n  // before the next request you can leverage this method\n  resetRequestCache() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Facebook Pixel Example (pnpm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-facebook-pixel` example from the Next.js repository. It utilizes `create-next-app` via `pnpm` to bootstrap the project. The resulting application, `with-facebook-pixel-app`, includes the necessary configuration for Facebook Pixel integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-facebook-pixel with-facebook-pixel-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npx to create a new Next.js application based on the with-portals example. It specifies the example and the application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-portals with-portals-app\n```\n\n----------------------------------------\n\nTITLE: Configuring PPR in Next.js TypeScript Config\nDESCRIPTION: TypeScript configuration for enabling incremental Partial Prerendering in next.config.ts\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Setting Image Content Type Meta Tag in HTML\nDESCRIPTION: Includes an HTML meta tag to define the type of an Open Graph image as PNG, ensuring accurate type recognition.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:type\" content=\"image/png\" />\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in JavaScript\nDESCRIPTION: This snippet logs the current value of 'foobarCopy' to the console. It has side effects in the sense of producing console output for monitoring purposes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(foobarCopy);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with React Hook Form Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the 'with-react-hook-form' example. It bootstraps the project with the necessary dependencies and configurations for integrating React Hook Form.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-hook-form with-react-hook-form-app\n```\n\n----------------------------------------\n\nTITLE: Module Part 8: Prerendering Logic\nDESCRIPTION: This JavaScript snippet implements functions related to postponing and tracking during prerendering.  It uses React's unstable_postpone API to signal when prerendering should be skipped due to dynamic data access and includes utility functions for handling and asserting the availability of the `unstable_postpone` API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 3\n};\nconst hasPostpone = typeof React.unstable_postpone === 'function';\nfunction postponeWithTracking(prerenderState, expression, pathname) {\n    assertPostpone();\n    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;\n    prerenderState.dynamicAccesses.push({\n        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,\n        expression\n    });\n    React.unstable_postpone(reason);\n}\nfunction assertPostpone() {\n    if (!hasPostpone) {\n        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);\n    }\n}\nexport { hasPostpone as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { postponeWithTracking as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { assertPostpone as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Allowing SVG Images in Next.js\nDESCRIPTION: This snippet allows the serving of SVG images through the default Image Optimization API in Next.js, while also configuring content security settings to protect against vulnerabilities. It sets security policies and specifies the content disposition type for SVG images.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Origin in Next.js using JavaScript\nDESCRIPTION: This code snippet shows how to set the `crossOrigin` option in the Next.js configuration file `next.config.js`. This configuration step is necessary for controlling cross-origin requests, replacing the deprecated practice of setting the `crossOrigin` attribute directly in `Head` or `NextScript`. The code sets `crossOrigin` to 'anonymous'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/doc-crossorigin-deprecated.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\n```\n\n----------------------------------------\n\nTITLE: Module Evaluation and IPC Setup in Next.js (Turbopack)\nDESCRIPTION: This JavaScript snippet initializes an IPC (Inter-Process Communication) channel, manages a queue for module evaluations, and defines an asynchronous `run` function. The `run` function dynamically loads and evaluates a module, communicates with the parent process using IPC, and handles both successful results and errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 0\\n};\nimport { IPC } from \\\"./index\\\";\nconst ipc = IPC;\nconst queue = [];\nconst run = async (moduleFactory)=>{\n    let nextId = 1;\n    const requests = new Map();\n    const internalIpc = {\n        sendInfo: (message)=>ipc.send({\n                type: \\\"info\\\",\n                data: message\n            }),\n        sendRequest: (message)=>{\n            const id = nextId++;\n            let resolve, reject;\n            const promise = new Promise((res, rej)=>{\n                resolve = res;\n                reject = rej;\n            });\n            requests.set(id, {\n                resolve,\n                reject\n            });\n            return ipc.send({\n                type: \\\"request\\\",\n                id,\n                data: message\n            }).then(()=>promise);\n        },\n        sendError: (error)=>{\n            return ipc.sendError(error);\n        }\n    };\n    let getValue;\n    try {\n        const module = await moduleFactory();\n        if (typeof module.init === \\\"function\\\") {\n            await module.init();\n        }\n        getValue = module.default;\n        await ipc.sendReady();\n    } catch (err) {\n        await ipc.sendReady();\n        await ipc.sendError(err);\n    }\n    let isRunning = false;\n    const run = async ()=>{\n        while(queue.length > 0){\n            const args = queue.shift();\n            try {\n                const value = await getValue(internalIpc, ...args);\n                await ipc.send({\n                    type: \\\"end\\\",\n                    data: value === undefined ? undefined : JSON.stringify(value, null, 2),\n                    duration: 0\n                });\n            } catch (e) {\n                await ipc.sendError(e);\n            }\n        }\n        isRunning = false;\n    };\n    while(true){\n        const msg = await ipc.recv();\n        switch(msg.type){\n            case \\\"evaluate\\\":\n                {\n                    queue.push(msg.args);\n                    if (!isRunning) {\n                        isRunning = true;\n                        run();\n                    }\n                    break;\n                }\n            case \\\"result\\\":\n                {\n                    const request = requests.get(msg.id);\n                    if (request) {\n                        requests.delete(msg.id);\n                        if (msg.error) {\n                            request.reject(new Error(msg.error));\n                        } else {\n                            request.resolve(msg.data);\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    console.error(\\\"unexpected message type\\\", msg.type);\n                    process.exit(1);\n                }\n        }\n    }\n};\nexport { run };\nexport { ipc as b } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\nexport { queue as c } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\nexport { run as d } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Context Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a ThemeContext using React's createContext. It is important to note that createContext cannot be used directly within Server Components. The ThemeProvider function wraps children in a context provider with a default value of 'dark'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createContext } from 'react'\n\n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component Usage in Pages Directory (JavaScript)\nDESCRIPTION: Shows how to implement the Next.js Form component in the pages directory structure using JavaScript. The form redirects to a search page with query parameters on submission.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Form from 'next/form'\n\nexport default function Search() {\n  return (\n    <Form action=\"/search\">\n      {/* On submission, the input value will be appended to\n          the URL, e.g. /search?query=abc */}\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles in a Next.js Application\nDESCRIPTION: This snippet illustrates how to import a global CSS file into the main application layout for applying styles across all pages and components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Inngest example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named \"inngest-app\" using the \"inngest\" example. It utilizes create-next-app to set up the project with the required dependencies and configurations to integrate with Inngest.  pnpm is required to be installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example inngest inngest-app\n```\n\n----------------------------------------\n\nTITLE: Generating Twitter Image Metadata in HTML\nDESCRIPTION: This snippet demonstrates the HTML output for Twitter image metadata. It includes the image URL, type, width, and height.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:image\" content=\"<generated>\" />\n<meta name=\"twitter:image:type\" content=\"<generated>\" />\n<meta name=\"twitter:image:width\" content=\"<generated>\" />\n<meta name=\"twitter:image:height\" content=\"<generated>\" />\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Ably Example (Yarn)\nDESCRIPTION: This command uses the create-next-app tool with Yarn to bootstrap a new Next.js application using the 'with-ably' example.  It sets up a basic project structure with Ably integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-ably with-ably-app\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in next.config.js for Internationalization\nDESCRIPTION: This code snippet demonstrates the correct structure for configuring internationalization (i18n) within the `next.config.js` file in a Next.js application. It defines supported locales, the default locale, and optional domain-specific configurations for routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-i18n-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    // These are all the locales you want to support in\n    // your application\n    locales: ['en-US', 'es', 'fr', 'nl-NL'],\n    // This is the default locale you want to be used when visiting\n    // a non-locale prefixed path e.g. `/hello`\n    defaultLocale: 'en-US',\n    // This is a list of locale domains and the default locale they\n    // should handle (these are only required when setting up domain routing)\n    domains: [\n      {\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n        // other locales that should be handled on this domain\n        locales: ['es'],\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Script Loading Errors with onError in Next.js (Pages Router) - JSX\nDESCRIPTION: This code demonstrates how to use the `onError` property of the `next/script` component to handle script loading errors within a Next.js application using the Pages Router. It logs the error to the console when the script fails to load.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheets - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import external stylesheets like Bootstrap CSS into the root layout of a Next.js application, allowing the app to utilize external styling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Script Loading Errors with onError in Next.js (App Router) - TSX\nDESCRIPTION: This code shows how to use the `onError` property of the `next/script` component to handle script loading errors within a Next.js application using the App Router.  It logs the error to the console when the script fails to load.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: This command duplicates the example environment configuration file `.env.local.example` to `.env.local`. This allows for local configuration settings, such as the Facebook Pixel ID, to be applied without committing them to the repository (as `.env.local` is typically ignored by Git).\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Setting Up External URL Rewrites in Next.js\nDESCRIPTION: This configuration shows how to rewrite routes in Next.js to external URLs. This approach is useful for incrementally adopting Next.js by redirecting specific routes to external sites while keeping others within the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog',\n        destination: 'https://example.com/blog',\n      },\n      {\n        source: '/blog/:slug',\n        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DatoCMS API Token and Preview Secret in .env.local\nDESCRIPTION: This example shows the required format for setting the environment variables in the .env.local file, which includes the DatoCMS API token and the preview secret. These values are necessary to properly connect the application to DatoCMS and enable preview mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDATOCMS_API_TOKEN=...\nDATOCMS_PREVIEW_SECRET=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental App Directory in Next.js\nDESCRIPTION: This snippet illustrates how to enable the experimental app directory feature in Next.js by adding 'appDir: true' to the configuration object in 'next.config.js'. The configuration is typed using TypeScript for better IDE support. Ensure you have Next.js installed as a dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/experimental-app-dir-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    appDir: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Using XState Inspect in Next.js\nDESCRIPTION: This code snippet shows how to use the `inspect` method from `@xstate/inspect` within a Next.js application. The `typeof window !== \"undefined\"` check ensures that the inspector code only runs on the client side, preventing server-side errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== \"undefined\") {\n  inspect({\n    /* options */\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout: Using Metadata API (TSX)\nDESCRIPTION: This code demonstrates how to use the Next.js Metadata API to manage metadata information in the root layout (TSX).  It imports the `Metadata` type from 'next' and exports a `metadata` object containing the title and description of the application. The `<head>` tags are then simplified in the RootLayout component, relying on the Metadata API to inject the metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting toNodeOutgoingHttpHeaders Function\nDESCRIPTION: Imports the toNodeOutgoingHttpHeaders function from the utils module and re-exports it with a named export. Uses TurboPack module assertion syntax for part declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { toNodeOutgoingHttpHeaders } from '../utils';\nexport { toNodeOutgoingHttpHeaders as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using revalidate in getStaticProps (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `revalidate` property in `getStaticProps` to enable Incremental Static Regeneration (ISR). It fetches posts from an API and sets `revalidate` to 10 seconds, meaning Next.js will attempt to re-generate the page at most once every 10 seconds when a request comes in.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation is enabled and a new request comes in\nexport async function getStaticProps() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  return {\n    props: {\n      posts,\n    },\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 10 seconds\n    revalidate: 10, // In seconds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring exportPathMap in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to set up a custom exportPathMap in the next.config.js file. It maps specific routes to pages and includes query parameters for dynamic content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/exportPathMap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  exportPathMap: async function (\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependency (pnpm)\nDESCRIPTION: This command installs TypeScript as a development dependency using pnpm. It is essential for adding TypeScript support to a project. The `--save-dev` flag ensures it's added to `devDependencies` in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Tab Groups Layout in Typescript\nDESCRIPTION: This code snippet demonstrates how to create tab groups using Parallel Routes and a layout within a slot. It defines a layout component with navigation links to different subpages within the `@analytics` slot.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using replace Prop with Link Component in Pages Router (JavaScript)\nDESCRIPTION: Example of using the replace prop with the Next.js Link component in Pages Router. When replace is set to true, the component will replace the current history state instead of adding a new URL to the browser's history stack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Web Vitals Metrics by Name (App Router, TSX)\nDESCRIPTION: This TypeScript code snippet shows how to handle specific web vital metrics by their `name` property using a switch statement inside the `useReportWebVitals` hook within the App Router in Next.js. It handles First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics as examples.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Loading State - TypeScript\nDESCRIPTION: This code snippet demonstrates how to display a loading state during form submission in a Next.js component using TypeScript. It uses React state to track the loading state and disables the submit button while loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState, FormEvent } from 'react'\n\nexport default function Page() {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setIsLoading(true) // Set loading to true when the request starts\n\n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n\n      // Handle response if necessary\n      const data = await response.json()\n      // ...\n    } catch (error) {\n      // Handle error if necessary\n      console.error(error)\n    } finally {\n      setIsLoading(false) // Set loading to false when the request completes\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Loading...' : 'Submit'}\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Styles with CSS\nDESCRIPTION: This snippet contains CSS rules for styling components within a Next.js application. Styles include layout definitions, flex and grid settings, padding, margin adjustments, and media queries for responsive design. No external CSS dependencies are needed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.sb-container {\n  margin-bottom: 48px;\n}\n\n.sb-section {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n}\n\nimg {\n  object-fit: cover;\n}\n\n.sb-section-title {\n  margin-bottom: 32px;\n}\n\n.sb-section a:not(h1 a, h2 a, h3 a) {\n  font-size: 14px;\n}\n\n.sb-section-item, .sb-grid-item {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.sb-section-item-heading {\n  padding-top: 20px !important;\n  padding-bottom: 5px !important;\n  margin: 0 !important;\n}\n.sb-section-item-paragraph {\n  margin: 0;\n  padding-bottom: 10px;\n}\n\n.sb-chevron {\n  margin-left: 5px;\n}\n\n.sb-features-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 32px 20px;\n}\n\n.sb-socials {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n}\n\n.sb-socials p {\n  margin-bottom: 10px;\n}\n\n.sb-explore-image {\n  max-height: 32px;\n  align-self: flex-start;\n}\n\n.sb-addon {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  background-color: #EEF3F8;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  background: #EEF3F8;\n  height: 180px;\n  margin-bottom: 48px;\n  overflow: hidden;\n}\n\n.sb-addon-text {\n  padding-left: 48px;\n  max-width: 240px;\n}\n\n.sb-addon-text h4 {\n  padding-top: 0px;\n}\n\n.sb-addon-img {\n  position: absolute;\n  left: 345px;\n  top: 0;\n  height: 100%;\n  width: 200%;\n  overflow: hidden;\n}\n\n.sb-addon-img img {\n  width: 650px;\n  transform: rotate(-15deg);\n  margin-left: 40px;\n  margin-top: -72px;\n  box-shadow: 0 0 1px rgba(255, 255, 255, 0);\n  backface-visibility: hidden;\n}\n\n@media screen and (max-width: 800px) {\n  .sb-addon-img {\n    left: 300px;\n  }\n}\n\n@media screen and (max-width: 600px) {\n  .sb-section {\n    flex-direction: column;\n  }\n\n  .sb-features-grid {\n    grid-template-columns: repeat(1, 1fr);\n  }\n\n  .sb-socials {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .sb-addon {\n    height: 280px;\n    align-items: flex-start;\n    padding-top: 32px;\n    overflow: hidden;\n  }\n\n  .sb-addon-text {\n    padding-left: 24px;\n  }\n\n  .sb-addon-img {\n    right: 0;\n    left: 0;\n    top: 130px;\n    bottom: 0;\n    overflow: hidden;\n    height: auto;\n    width: 124%;\n  }\n\n  .sb-addon-img img {\n    width: 1200px;\n    transform: rotate(-12deg);\n    margin-left: 0;\n    margin-top: 48px;\n    margin-bottom: -40px;\n    margin-left: -24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Next.js API Route (JavaScript)\nDESCRIPTION: This code snippet illustrates how to delete a cookie within a Next.js API route using JavaScript.  It uses the `setHeader` method on the response object to set the 'Set-Cookie' header, effectively deleting the cookie by setting `Max-Age=0`. Additionally, it sets the HTTP status to 200 and provides a confirmation message. Requires Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')\n  res.status(200).send('Cookie has been deleted.')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout with Parallel Routes in Javascript\nDESCRIPTION: This code snippet shows how to define a layout component that accepts parallel routes as props in Javascript. The layout component receives `children`, `team`, and `analytics` props, each representing a different slot, and renders them in parallel.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Layout({ children, team, analytics }) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a static asset in Next.js (app/page.tsx) with Typescript\nDESCRIPTION: This TypeScript code shows how to import the Image component from Next.js and use it to display a static image from the public directory. The `src` attribute points to the image file in the public directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with npx\nDESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the `with-service-worker` example. It uses npm's `npx` to execute the command. The `with-service-worker-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-service-worker with-service-worker-app\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File\nDESCRIPTION: This command copies the example environment variables file (`env.local.example`) to `.env.local`.  This allows you to configure environment-specific settings for the Next.js application, such as the Cosmos DB connection string, database name, and container name. The `.env.local` file is typically ignored by Git to prevent sensitive information from being committed to the repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Ignoring Incoming Requests from Logging\nDESCRIPTION: Configures Next.js to ignore certain incoming requests from being logged in development mode. Specify URL patterns to ignore using `logging.incomingRequests.ignore`. The snippet includes ignoring health checks in API v1.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  logging: {\n    incomingRequests: {\n      ignore: [/\\api\\/v1\\/health/],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Definitions (Yarn)\nDESCRIPTION: This command installs type definitions for React, React DOM, and Node.js as development dependencies using Yarn. These definitions provide type checking and autocompletion for these libraries when using TypeScript. The `--save-dev` flag ensures they're added to `devDependencies` in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn install --save-dev @types/react @types/react-dom @types/node\n```\n\n----------------------------------------\n\nTITLE: Fetching Draft Data Based on Draft Mode (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to modify data fetching in `getStaticProps` based on the `context.draftMode` flag. It switches between different API endpoints for draft and production content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getStaticProps(context) {\n  const url = context.draftMode\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n  const res = await fetch(url)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Apollo GraphQL in JavaScript\nDESCRIPTION: This JavaScript snippet configures the Apollo GraphQL extension for VS Code to provide auto-completion for GraphQL queries. It specifies the local schema file for the WordPress GraphQL endpoint.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: {\n    service: {\n      name: \"WordPress\",\n      localSchemaFile: \"./src/gql/schema.gql\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding MDX Components Locally (TSX - App Router)\nDESCRIPTION: This TypeScript code snippet demonstrates how to override MDX components locally within a Next.js application using the App Router.  It defines a custom `h1` component (`CustomH1`) and an `overrideComponents` object that maps the `h1` element to the custom component.  This allows specific pages to have unique styling or functionality for MDX elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with next/dynamic (Pages Router)\nDESCRIPTION: This code snippet demonstrates lazy loading in the `pages` directory using `next/dynamic`. It shows how to import a component dynamically and display a fallback UI using the `loading` option of `next/dynamic`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst DynamicHeader = dynamic(() => import('../components/header'), {\n  loading: () => <p>Loading...</p>,\n})\n\nexport default function Home() {\n  return <DynamicHeader />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document Components in Next.js with TypeScript\nDESCRIPTION: Demonstrates the correct implementation of a custom Document class in Next.js, showing proper usage of all required components: Html, Head, Main, and NextScript. This example shows the minimum required structure for a working custom document component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-document-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @next/env Package - Bash\nDESCRIPTION: This bash command installs the `@next/env` package, which can be used to load environment variables outside of the Next.js runtime. This is useful for configurations such as ORM setups or test runners.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/env\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the react-remove-properties example. It clones the example and sets up a new project directory called react-remove-properties-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example react-remove-properties react-remove-properties-app\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Properties with NextRequest\nDESCRIPTION: This snippet shows how to access the `pathname` and `searchParams` properties of the `request.nextUrl` object in Next.js. It provides examples of retrieving the pathname and search parameters from a request URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Given a request to /home, pathname is /home\nrequest.nextUrl.pathname\n// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }\nrequest.nextUrl.searchParams\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Client Component\nDESCRIPTION: Client component that uses the blog context and React's use hook to render blog posts data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { use } from 'react'\nimport { useBlogContext } from './context'\n\nexport function BlogPosts() {\n  const blogPromise = useBlogContext()\n  const posts = use(blogPromise)\n\n  return <div>{posts.length} blog posts</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Config Matcher in Next.js (TypeScript)\nDESCRIPTION: This TypeScript code defines a matcher configuration for Next.js middleware. It specifies the paths on which the middleware should run, excluding API routes, static files, image optimization files, and the favicon. It also excludes prefetch requests to improve performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Graph for Next.js Project Phase 2\nDESCRIPTION: This Mermaid graph diagram illustrates the dependency relationships between 30 items in Phase 2 of a Next.js project. It shows direct dependencies with solid lines and indirect dependencies with dotted lines. Two items, 'export structuredError' and 'export IPC', are specifically highlighted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item4;\n    Item2;\n    Item5;\n    Item3;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item29[\"export structuredError\"];\n    Item30;\n    Item30[\"export IPC\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item9 --> Item3;\n    Item9 -.-> Item6;\n    Item9 -.-> Item5;\n    Item9 -.-> Item4;\n    Item9 -.-> Item7;\n    Item10 --> Item8;\n    Item10 --> Item9;\n    Item10 -.-> Item6;\n    Item10 -.-> Item5;\n    Item10 -.-> Item4;\n    Item10 -.-> Item7;\n    Item11 --> Item10;\n    Item11 -.-> Item6;\n    Item11 -.-> Item5;\n    Item11 -.-> Item4;\n    Item11 -.-> Item7;\n    Item12 --> Item11;\n    Item12 -.-> Item6;\n    Item12 -.-> Item5;\n    Item12 -.-> Item4;\n    Item12 -.-> Item7;\n    Item13 --> Item12;\n    Item13 -.-> Item6;\n    Item13 -.-> Item5;\n    Item13 -.-> Item4;\n    Item13 -.-> Item7;\n    Item14 --> Item12;\n    Item14 --> Item13;\n    Item14 -.-> Item6;\n    Item14 -.-> Item5;\n    Item14 -.-> Item4;\n    Item14 -.-> Item7;\n    Item15 --> Item12;\n    Item15 --> Item14;\n    Item15 -.-> Item6;\n    Item15 -.-> Item5;\n    Item15 -.-> Item4;\n    Item15 -.-> Item7;\n    Item16 --> Item12;\n    Item16 --> Item15;\n    Item16 -.-> Item6;\n    Item16 -.-> Item5;\n    Item16 -.-> Item4;\n    Item16 -.-> Item7;\n    Item17 --> Item12;\n    Item17 --> Item16;\n    Item17 -.-> Item6;\n    Item17 -.-> Item5;\n    Item17 -.-> Item4;\n    Item17 -.-> Item7;\n    Item18 --> Item12;\n    Item18 --> Item17;\n    Item18 -.-> Item6;\n    Item18 -.-> Item5;\n    Item18 -.-> Item4;\n    Item18 -.-> Item7;\n    Item19 --> Item12;\n    Item19 --> Item18;\n    Item19 -.-> Item6;\n    Item19 -.-> Item5;\n    Item19 -.-> Item4;\n    Item19 -.-> Item7;\n    Item20 --> Item12;\n    Item20 --> Item19;\n    Item20 -.-> Item6;\n    Item20 -.-> Item5;\n    Item20 -.-> Item4;\n    Item20 -.-> Item7;\n    Item21 --> Item12;\n    Item21 --> Item20;\n    Item21 -.-> Item6;\n    Item21 -.-> Item5;\n    Item21 -.-> Item4;\n    Item21 -.-> Item7;\n    Item22 --> Item12;\n    Item22 --> Item21;\n    Item22 -.-> Item6;\n    Item22 -.-> Item5;\n    Item22 -.-> Item4;\n    Item22 -.-> Item7;\n    Item23 --> Item12;\n    Item23 --> Item22;\n    Item23 -.-> Item6;\n    Item23 -.-> Item5;\n    Item23 -.-> Item4;\n    Item23 -.-> Item7;\n    Item24 --> Item12;\n    Item24 --> Item23;\n    Item24 -.-> Item6;\n    Item24 -.-> Item5;\n    Item24 -.-> Item4;\n    Item24 -.-> Item7;\n    Item25 --> Item12;\n    Item25 --> Item24;\n    Item25 -.-> Item6;\n    Item25 -.-> Item5;\n    Item25 -.-> Item4;\n    Item25 -.-> Item7;\n    Item26 --> Item12;\n    Item26 --> Item25;\n    Item26 -.-> Item6;\n    Item26 -.-> Item5;\n    Item26 -.-> Item4;\n    Item26 -.-> Item7;\n    Item27 --> Item12;\n    Item27 --> Item26;\n    Item27 -.-> Item6;\n    Item27 -.-> Item5;\n    Item27 -.-> Item4;\n    Item27 -.-> Item7;\n    Item28 --> Item12;\n    Item28 --> Item27;\n    Item28 -.-> Item6;\n    Item28 -.-> Item5;\n    Item28 -.-> Item4;\n    Item28 -.-> Item7;\n    Item29 --> Item7;\n    Item30 --> Item11;\n    Item30 --> Item10;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables - Bash\nDESCRIPTION: This snippet shows how to copy a sample environment configuration file to a new `.env.local` file, which is controlled by Git. No special prerequisites are needed except standard Bash access. The command helps set up environment variables necessary for the project’s operation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Application using Bash\nDESCRIPTION: This snippet demonstrates the Bash command to create a new Next.js application using the `npx create-next-app` command. The terminal icon helps indicate where users should run the command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app\n```\n\n----------------------------------------\n\nTITLE: Setting Title Template in Layout (TSX)\nDESCRIPTION: This code snippet demonstrates how to set a title template in a Next.js layout using TypeScript. The template is defined using the '%s' placeholder, which will be replaced by the title defined in child segments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with auth example using Bun\nDESCRIPTION: This command uses `create-next-app` with Bun to create a new Next.js application named `auth-app` based on the `auth` example.  It leverages the `bunx` command to execute the package directly from the Bun registry.  The command initializes a Next.js project configured for authentication.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example auth auth-app\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Presence Events with usePresence\nDESCRIPTION: This code demonstrates how to use the usePresence hook to subscribe to presence events on an Ably channel.  It displays a list of clients currently present on the channel, updating the UI when presence changes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from \"react\";\nimport { usePresence } from \"@ably-labs/react-hooks\";\n\nexport default function Home() {\n  const [presenceData, updateStatus] = usePresence(\"your-channel-name\");\n\n  const presentClients = presenceData.map((msg, index) => (\n    <li key={index}>\n      {msg.clientId}: {msg.data}\n    </li>\n  ));\n\n  return <ul>{presentClients}</ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using unstable_cache in a Next.js page (JSX)\nDESCRIPTION: This snippet demonstrates the usage of `unstable_cache` within a Next.js page component using JSX. It caches an object containing the user ID. The cache configuration includes tags for invalidation and a revalidation period of 60 seconds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_cache } from 'next/cache';\n\nexport default async function Page({ params } }) {\n  const { userId } = await params\n  const getCachedUser = unstable_cache(\n    async () => {\n      return { id: userId };\n    },\n    [userId], // add the user ID to the cache key\n    {\n      tags: [\"users\"],\n      revalidate: 60,\n    }\n  );\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Recoil Example using NPX\nDESCRIPTION: This command uses npx to create a new Next.js application based on the with-recoil example. It clones the example into a new directory named with-recoil-app. It requires npx to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-recoil with-recoil-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Google Analytics using Yarn\nDESCRIPTION: This command creates a new Next.js application with the Google Analytics example using Yarn. It initializes a new project named 'with-google-analytics-app' using the specified example from the Next.js repository. Requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-google-analytics with-google-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GraphQL-React example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the `with-graphql-react` example. It initializes a project named `with-graphql-react-app` with all necessary dependencies and configurations for GraphQL-React integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-graphql-react with-graphql-react-app\n```\n\n----------------------------------------\n\nTITLE: Installing MSW\nDESCRIPTION: This command installs MSW (Mock Service Worker) as a development dependency. MSW is a library that allows mocking network requests directly in the browser, which is useful for isolating tests and controlling the data returned by APIs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D msw\n```\n\n----------------------------------------\n\nTITLE: Installing FCM Example with Yarn\nDESCRIPTION: Command to create a new Next.js application with Firebase Cloud Messaging example using Yarn package manager\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Couchbase example\nDESCRIPTION: These commands demonstrate how to create a new Next.js application using the Couchbase example. It provides instructions for using npm, yarn, and pnpm to bootstrap the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-couchbase with-couchbase-app\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control in Next.js API Route (JavaScript)\nDESCRIPTION: This code demonstrates setting the `Cache-Control` header in a Next.js API route using JavaScript. The `setHeader` method is used on the `res` object to set the `Cache-Control` header to `s-maxage=86400`, which caches the response for one day. The handler function takes `req` and `res` as arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VAPID keys in .env file\nDESCRIPTION: This shows how to set the VAPID public and private keys in the .env file, which will then be available via `process.env`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_VAPID_PUBLIC_KEY=your_public_key_here\nVAPID_PRIVATE_KEY=your_private_key_here\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in App Router (JavaScript)\nDESCRIPTION: This TypeScript/JavaScript snippet shows how to access environment variables within a Next.js Server Component using the App Router.  It demonstrates reading a value from `process.env` and assumes a `connection` function is defined.  Accessing environment variables this way ensures that the values are evaluated at runtime, allowing for different values in different environments when using Docker.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Component() {\n  await connection()\n  // cookies, headers, and other Dynamic APIs\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Path-Based Middleware Logic\nDESCRIPTION: Example of implementing middleware with conditional path-based execution, allowing explicit ordering of middleware execution for different routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    // This logic is only applied to /about\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    // This logic is only applied to /dashboard\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static sitemap.xml File in Next.js\nDESCRIPTION: Example of a static sitemap.xml file placed in the root of the app directory, following the Sitemaps XML format. It contains three URLs with their respective lastmod, changefreq, and priority attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Producing a Response in Next.js Middleware (JS)\nDESCRIPTION: This snippet demonstrates how to return a direct response from a Next.js middleware function. It checks if a user is authenticated and, if not, returns a JSON response with an error message and a 401 status code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isAuthenticated } from '@lib/auth'\n\n// Limit the middleware to paths starting with `/api/`\nexport const config = {\n  matcher: '/api/:function*',\n}\n\nexport function middleware(request) {\n  // Call our authentication function to check the request\n  if (!isAuthenticated(request)) {\n    // Respond with JSON indicating an error message\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 13 with npm\nDESCRIPTION: Command to upgrade Next.js to version 13 using npm package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Page Component in Next.js\nDESCRIPTION: Example showing how to define a basic page component in Next.js using the page.js file. The component receives params and searchParams as props, which are promises containing route parameters and URL query parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ slug: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  return <h1>My Page</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({ params, searchParams }) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct UUID Generation with Connection in Next.js\nDESCRIPTION: Improved implementation using connection() to ensure per-request unique values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Page() {\n  await connection()\n  const uuid = crypto.randomUUID()\n  return <RequestId id={uuid}>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Plausible using npx\nDESCRIPTION: This command initializes a new Next.js application with the Plausible analytics example. It uses `create-next-app` via `npx` to bootstrap the project with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-plausible with-plausible-app\n```\n\n----------------------------------------\n\nTITLE: Using next/link with basePath\nDESCRIPTION: Demonstrates how Next.js automatically applies basePath to links, transforming '/about' to '/docs/about' when basePath is set to '/docs'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function HomePage() {\n  return (\n    <>\n      <Link href=\"/about\">About Page</Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Paths for Multiple Locales in Next.js\nDESCRIPTION: This snippet demonstrates how to use getStaticPaths to generate static paths for multiple locales in a Next.js application with dynamic routes. It shows how to specify the locale for each path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getStaticPaths = ({ locales }) => {\n  return {\n    paths: [\n      // if no `locale` is provided only the defaultLocale will be generated\n      { params: { slug: 'post-1' }, locale: 'en-US' },\n      { params: { slug: 'post-1' }, locale: 'fr' },\n    ],\n    fallback: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Title with Absolute Value (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the title template with an absolute title in a Next.js page using TypeScript. The 'absolute' property is set to 'About', which will be used as the title regardless of the parent layout's template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n\n// Output: <title>About</title>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Inter Font in Next.js (_app.js - Pages Router)\nDESCRIPTION: This code snippet demonstrates how to import the Inter font from `next/font/google` and apply it to the `_app.js` file within the `/pages` directory in a Next.js application. It uses the Pages Router. The font is applied to the main component, affecting all pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={inter.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with MSW example using pnpm\nDESCRIPTION: This command creates a new Next.js application using the `with-msw` example. It bootstraps a project with Mock Service Worker already configured for API mocking using pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-msw with-msw-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Webiny Example (pnpm)\nDESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cms-webiny` example. They use `create-next-app` with npm, yarn, and pnpm package managers. This will create a new project directory named `cms-webiny-app` with the specified template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-webiny cms-webiny-app\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes in Next.js\nDESCRIPTION: In this snippet, API routes are implemented in the app directory using the Web Request and Response APIs. This approach allows for customized request handling for various endpoints within the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport async function GET(request) {}\n```\n\n----------------------------------------\n\nTITLE: Replacing analyticsId with useReportWebVitals in Next.js\nDESCRIPTION: This snippet instructs developers to replace the deprecated analyticsId tracking method in their Next.js application with the useReportWebVitals hook, which allows for customizable tracking of Core Web Vitals metrics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/deprecated-analyticsid.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseReportWebVitals((metric) => {\n  // Implement sending metric to your backend\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Yarn\nDESCRIPTION: This snippet shows how to create a new Next.js application using Yarn with the 'hello-world' example. The user must have Yarn installed. The command initializes a new Next.js project in the specified directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example hello-world hello-world-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Rebass using pnpm\nDESCRIPTION: This command utilizes pnpm to create a new Next.js application integrated with Rebass. It specifies the \"with-rebass\" example and names the new application \"with-rebass-app\".\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-rebass with-rebass-app\n```\n\n----------------------------------------\n\nTITLE: Next.js TypeScript Configuration\nDESCRIPTION: Demonstrates how to use TypeScript for Next.js configuration with type checking.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in .env file\nDESCRIPTION: This code snippet shows how to add a custom environment variable to the `.env` file in Next.js. Environment variables can be accessed during build time or runtime to configure the application's behavior.  In this case, it's setting `NEXT_PUBLIC_BASE_PATH`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# ...\nNEXT_PUBLIC_BASE_PATH=\"/some-base-path\"\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Document (_document.js) in Next.js Pages Router with JavaScript\nDESCRIPTION: This JavaScript code defines a custom Document component in a Next.js application using the Pages Router. It allows you to control the initial HTML document returned from the server.  It's often used for adding elements to `<head>`, customizing `<html>` attributes, or adding server-side rendering logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Module in Javascript\nDESCRIPTION: Imports a module using a relative path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./index\";\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with particles example (pnpm)\nDESCRIPTION: This command utilizes pnpm to create a new Next.js application using the 'with-particles' example. It initializes a project named 'with-particles-app' with the pre-configured particle animation setup. The extra '--' is needed to pass arguments correctly to create-next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app -- --example with-particles with-particles-app\n```\n\n----------------------------------------\n\nTITLE: Define Asynchronous Run Function in Javascript\nDESCRIPTION: This code defines an asynchronous function `run` that accepts a `moduleFactory` function as an argument. The `run` function initializes inter-process communication, loads a module, processes messages from a queue, and handles errors. It manages the lifecycle of a dynamically loaded module, enabling asynchronous execution and error handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const run = async (moduleFactory)=>{\n    let nextId = 1;\n    const requests = new Map();\n    const internalIpc = {\n        sendInfo: (message)=>ipc.send({\n                type: \"info\",\n                data: message\n            }),\n        sendRequest: (message)=>{\n            const id = nextId++;\n            let resolve, reject;\n            const promise = new Promise((res, rej)=>{\n                resolve = res;\n                reject = rej;\n            });\n            requests.set(id, {\n                resolve,\n                reject\n            });\n            return ipc.send({\n                type: \"request\",\n                id,\n                data: message\n            }).then(()=>promise);\n        },\n        sendError: (error)=>{\n            return ipc.sendError(error);\n        }\n    };\n    let getValue;\n    try {\n        const module = await moduleFactory();\n        if (typeof module.init === \"function\") {\n            await module.init();\n        }\n        getValue = module.default;\n        await ipc.sendReady();\n    } catch (err) {\n        await ipc.sendReady();\n        await ipc.sendError(err);\n    }\n    let isRunning = false;\n    const run = async ()=>{\n        while(queue.length > 0){\n            const args = queue.shift();\n            try {\n                const value = await getValue(internalIpc, ...args);\n                await ipc.send({\n                    type: \"end\",\n                    data: value === undefined ? undefined : JSON.stringify(value, null, 2),\n                    duration: 0\n                });\n            } catch (e) {\n                await ipc.sendError(e);\n            }\n        }\n        isRunning = false;\n    };\n    while(true){\n        const msg = await ipc.recv();\n        switch(msg.type){\n            case \"evaluate\":\n                {\n                    queue.push(msg.args);\n                    if (!isRunning) {\n                        isRunning = true;\n                        run();\n                    }\n                    break;\n                }\n            case \"result\":\n                {\n                    const request = requests.get(msg.id);\n                    if (request) {\n                        requests.delete(msg.id);\n                        if (msg.error) {\n                            request.reject(new Error(msg.error));\n                        } else {\n                            request.resolve(msg.data);\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    console.error(\"unexpected message type\", msg.type);\n                    process.exit(1);\n                }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using afterInteractive Strategy (App Router, JSX)\nDESCRIPTION: This code snippet shows how to use the `afterInteractive` strategy with the `Script` component in a Next.js application using the App Router.  It loads the script after some hydration has occurred. This is the default strategy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"afterInteractive\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Stripe TypeScript example (npm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-stripe-typescript` example from the Next.js repository. It uses `create-next-app` via `npx` to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-stripe-typescript with-stripe-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Forwarding Search Parameters to a Table Component in TypeScript\nDESCRIPTION: Example of a TypeScript page that passes searchParams to a child component, allowing the dynamic behavior to be isolated in the child component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table } from './table'\n\nexport default function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Table searchParams={searchParams} />\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Realm-Web Example using npx\nDESCRIPTION: This command uses `create-next-app` with `npx` to bootstrap a new Next.js application using the `with-realm-web` example. It creates a new directory named `with-realm-web-app` containing the initialized project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-realm-web with-realm-web-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with NextUI using pnpm\nDESCRIPTION: This command uses the pnpm package manager to create a new Next.js application pre-configured to use NextUI. It utilizes the `create-next-app` tool with the `with-next-ui` example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-next-ui with-next-ui-app\n```\n\n----------------------------------------\n\nTITLE: Restricting Quality Settings in next.config.js\nDESCRIPTION: This code snippet illustrates how to restrict image quality settings in next.config.js by providing a list of allowed qualities. Only the specified qualities will be accepted by the Image Optimizer.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    qualities: [25, 50, 75],\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Middleware in Next.js using TypeScript\nDESCRIPTION: This snippet implements a middleware function in Next.js to handle user authentication and redirect to a login page if not authenticated. The `authenticate` function checks user status, and `NextResponse.redirect` is used for the actual redirection. Dependencies include Next.js and an authentication provider. The expected behavior is a redirect based on the user's authentication status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\nimport { authenticate } from 'auth-provider'\n\nexport function middleware(request: NextRequest) {\n  const isAuthenticated = authenticate(request)\n\n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n\n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n\nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Root Example (React Component)\nDESCRIPTION: This example shows how to use the `lazyRoot` prop with a React component that forwards a ref to its underlying DOM element. This is necessary when the scrollable parent is a custom React component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/legacy/image'\nimport React from 'react'\n\nconst Container = React.forwardRef((props, ref) => {\n  return (\n    <div ref={ref} style={{ overflowX: 'scroll', width: '500px' }}>\n      {props.children}\n    </div>\n  )\n})\n\nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n\n  return (\n    <Container ref={lazyRoot}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Transfer Object (DTO) for User Profile (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates creating a Data Transfer Object (DTO) for a user profile in a Next.js application. It defines functions to determine visibility of specific user data (username, phonenumber) based on viewer roles or team affiliation. The `getProfileDTO` function retrieves user data by slug, fetches the current user using `getUser`, and returns a DTO containing only the visible username and phonenumber based on the defined visibility rules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\nimport { getUser } from '@/app/lib/dal'\n\nfunction canSeeUsername(viewer: User) {\n  return true\n}\n\nfunction canSeePhoneNumber(viewer: User, team: string) {\n  return viewer.isAdmin || team === viewer.team\n}\n\nexport async function getProfileDTO(slug: string) {\n  const data = await db.query.users.findMany({\n    where: eq(users.slug, slug),\n    // Return specific columns here\n  })\n  const user = data[0]\n\n  const currentUser = await getUser(user.id)\n\n  // Or return only what's specific to the query here\n  return {\n    username: canSeeUsername(currentUser) ? user.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, user.team)\n      ? user.phonenumber\n      : null,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode\nDESCRIPTION: Commands to start the Next.js development server using npm or yarn, allowing local testing at `http://localhost:3000`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the specified ReactMD and Typescript example. It bootstraps the project with the necessary files and configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-md-typescript with-react-md-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Root Layout Definition (JavaScript)\nDESCRIPTION: This code snippet defines a root layout component in JavaScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Route Change Detection with usePathname in Next.js\nDESCRIPTION: Shows how to use usePathname along with useSearchParams and useEffect to respond to route changes in a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-pathname.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Decorators in Next.js Compiler\nDESCRIPTION: This snippet allows you to set legacy decorators as an experimental feature for compatibility with older libraries in Next.js. This option is included to aid in the transition of existing applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Page Font Usage in Next.js (Pages Router)\nDESCRIPTION: This code snippet demonstrates how to use a font on a single page in a Next.js application using the Pages Router. It imports the Inter font and applies its class name to a div element within the `Home` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function Home() {\n  return (\n    <div className={inter.className}>\n      <p>Hello World</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps in Next.js with TypeScript\nDESCRIPTION: This code snippet demonstrates the correct structure for the return value of the `getStaticProps` function in a Next.js page component.  It ensures that the function returns an object with a `props` property, which itself is an object containing the data to be passed as props to the page. The context object `ctx` provides information about the current request, such as parameters and preview mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getstaticprops-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function getStaticProps(ctx: {\n    params?: ParsedUrlQuery;\n    preview?: boolean;\n    previewData?: PreviewData;\n}) {\n    return {\n        props: { [key: string]: any }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles in a CSS Module\nDESCRIPTION: This snippet defines a CSS class for error styling in a CSS Module, demonstrating how class names are scoped to avoid conflicts with other styles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.error {\n  color: white;\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Webpack Cache in Next.js Configuration\nDESCRIPTION: This snippet shows how to disable the Webpack cache in your Next.js application. By modifying the Webpack configuration within your `next.config.mjs` file, you can set the cache type to 'memory' to reduce disk usage.  The example explicitly sets `config.cache` to an empty object effectively disabling it.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    if (config.cache && !dev) {\n      config.cache = Object.freeze({\n        type: 'memory',\n      })\n    }\n    // Important: return the modified config\n    return config\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation with Next.js Connection and Suspense\nDESCRIPTION: Fixed implementation that properly handles random value generation using connection() function and Suspense boundary to defer randomization until runtime.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-random.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { connection } from 'next/server'\n\nasync function ProductsSkeleton() {\n  ...\n}\n\nexport default async function Page() {\n  const products = await getCachedProducts();\n  return <Suspense fallback={<ProductsSkeleton />}>\n    <DynamicProductsView products={products} />\n  </Suspense>\n}\n\nasync function DynamicProductsView() {\n  await connection();\n  const randomSeed = Math.random()\n  const randomizedProducts = randomize(products, randomSeed)\n  return <ProductsView products={randomizedProducts} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application with the mdx-remote example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example mdx-remote mdx-remote-app\n```\n\n----------------------------------------\n\nTITLE: Setting MetadataBase and Alternates/OpenGraph (JSX)\nDESCRIPTION: This code snippet demonstrates how to set the metadataBase and alternates/openGraph properties in a Next.js application.  metadataBase defines the base URL for relative URLs, while alternates and openGraph are used for SEO and social sharing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n  alternates: {\n    canonical: '/',\n    languages: {\n      'en-US': '/en-US',\n      'de-DE': '/de-DE',\n    },\n  },\n  openGraph: {\n    images: '/og-image.png',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - force-static dynamic config (JSX)\nDESCRIPTION: This code snippet uses `export const dynamic = 'force-static'` to force static rendering of the route.  When used, `generateStaticParams` is not needed.  This approach renders the route at build time if possible and otherwise renders it on the first request.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/changelog/[slug]/page.js\"\nexport const dynamic = 'force-static'\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using WASM in Next.js Middleware\nDESCRIPTION: This snippet demonstrates how to import and use WebAssembly (WASM) binaries in a Next.js Middleware. The code imports a WASM module and uses it to perform computations, with results added to response headers. Dependencies include the Next.js framework and the relevant WASM module. Key parameters involve importing and using the WASM functions, with the Middleware expected to compute and pass the result via response headers. Inputs are the WASM binary, and outputs are the HTTP response with custom headers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/edge-dynamic-code-evaluation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\\nimport squareWasm from './square.wasm?module'\\n\\nexport default async function middleware() {\\n  const m = await WebAssembly.instantiate(squareWasm)\\n  const answer = m.exports.square(9)\\n\\n  const response = NextResponse.next()\\n  response.headers.set('x-square', answer.toString())\\n  return response\\n}\n```\n\n----------------------------------------\n\nTITLE: API Routes for Tigris Access - TypeScript\nDESCRIPTION: This section describes the API routes defined in a Next.js application for interacting with the Tigris collection. It includes file references and endpoint details for performing CRUD operations on the 'items' collection.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/items/index.ts\n// - GET /api/items to get an array of to-do items as Array<TodoItem>\n// - POST /api/items to add an item to the list\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/items/search.ts\n// - GET /api/items/search?q=query to find and return items matching the given query\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/item/[id].ts\n// - GET /api/item/{id} to fetch an item\n// - PUT /api/item/{id} to update the given item\n// - DELETE /api/item/[id] to delete an item\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component with Children Prop in TypeScript\nDESCRIPTION: This TypeScript example shows how to create a Client Component that accepts a children prop. The component maintains its own state with useState while rendering children passed from the parent component. This pattern enables the separation of client-side interactivity from server-rendered content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the image-secure-compute example. It downloads the example and sets up a new project with the specified name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example image-secure-compute image-secure-compute-app\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader (TypeScript)\nDESCRIPTION: This code defines a custom image loader function for Next.js. It constructs a URL for Cloudinary based on the provided image source, width, and quality parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function cloudinaryLoader({\n  src,\n  width,\n  quality,\n}: {\n  src: string\n  width: number\n  quality?: number\n}) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sitemaps with generateSitemaps in Next.js (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `generateSitemaps` function in Next.js to create multiple sitemaps. It defines the `generateSitemaps` function that returns an array of objects, each representing a sitemap ID. It then utilizes an asynchronous `sitemap` function to fetch products based on the calculated `start` and `end` indices derived from the sitemap `id`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({ id }) {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Next.js ESLint Plugin Package\nDESCRIPTION: The code snippet shows the package name reference for the Next.js ESLint plugin. This plugin provides lint rules specific to Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/eslint-plugin-next/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@next/eslint-plugin-next\n```\n\n----------------------------------------\n\nTITLE: Creating a Cached Component with Non-serializable Children (JavaScript)\nDESCRIPTION: Demonstrates a cached component in JavaScript that accepts children as props. The component is marked with 'use cache' to enable caching while allowing dynamic children to be passed through.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CachedComponent({ children }) {\n  'use cache'\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Catch-All Route - Bash\nDESCRIPTION: This code shows how to create a directory structure in Next.js to implement an optional catch-all route. The `[[...slug]]` directory inside the `app` directory will catch all routes.  This is a bash command to create the directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\napp\n ┣ [[...slug]]\n ┃ ┗ page.tsx\n ┣ layout.tsx\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Contentlayer example using npm\nDESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `with-contentlayer` example. It sets up a project named `with-contentlayer-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-contentlayer with-contentlayer-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page in Next.js\nDESCRIPTION: A simple example of creating a page in Next.js. This code exports a React component from a file in the pages directory, which makes it accessible at the corresponding route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function About() {\n  return <div>About</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with Jest using pnpm\nDESCRIPTION: This snippet provides the command to create a new Next.js application set up with Jest using pnpm. It follows the same example 'with-jest-babel' for consistency. The output will be a new application folder ready for development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-jest-babel with-jest-babel-app\n```\n\n----------------------------------------\n\nTITLE: Applying Font Variables in React Components\nDESCRIPTION: Example of how to apply the font variable to a component. The parent container gets the font variable className while child elements use styles from the external CSS module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuration of Preview URL in Headless CMS\nDESCRIPTION: The bash code shows the URL structure that should be used when configuring custom preview URLs in a headless CMS. It contains placeholders for site URL, secret token, and the slug of the content being previewed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-site>/api/preview?secret=<token>&slug=<path>\n```\n\n----------------------------------------\n\nTITLE: Implementing NextResponse Class for Next.js Edge Runtime\nDESCRIPTION: Defines a NextResponse class that extends the standard Response object with Next.js specific functionality including cookie handling, redirections, rewrites, and middleware capabilities. It includes specialized static methods and internal symbol-based state management.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validateURL } from '../utils';\nimport { NextURL } from '../next-url';\nimport { toNodeOutgoingHttpHeaders } from '../utils';\nimport { ResponseCookies } from './cookies';\nimport { stringifyCookie } from '../../web/spec-extension/cookies';\nimport { ReflectAdapter } from './adapters/reflect';\nimport '../../web/spec-extension/cookies';\nimport '../next-url';\nimport '../utils';\nimport './adapters/reflect';\nimport './cookies';\nconst INTERNALS = Symbol('internal response');\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error('request.headers must be an instance of Headers');\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set('x-middleware-request-' + key, value);\n            keys.push(key);\n        }\n        headers.set('x-middleware-override-headers', keys.join(','));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        const headers = this.headers;\n        const cookies = new ResponseCookies(headers);\n        const cookiesProxy = new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case 'delete':\n                    case 'set':\n                        {\n                            return (...args)=>{\n                                const result = Reflect.apply(target[prop], target, args);\n                                const newHeaders = new Headers(headers);\n                                if (result instanceof ResponseCookies) {\n                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));\n                                }\n                                handleMiddlewareField(init, newHeaders);\n                                return result;\n                            };\n                        }\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n        this[INTERNALS] = {\n            cookies: cookiesProxy,\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeOutgoingHttpHeaders(headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for('edge-runtime.inspect.custom')]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === 'object' ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set('Location', validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-rewrite', validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-next', '1');\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\nexport { NextResponse };\nexport { INTERNALS as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { REDIRECTS as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { handleMiddlewareField as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { NextResponse as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure an assets link using the `assets` property within the `metadata` export in a Next.js layout or page file. It sets the URL for the assets.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  assets: ['https://nextjs.org/assets'],\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Require and Import in Node.js\nDESCRIPTION: This snippet identifies the use of dynamic `require` and `import` statements, which can lead to linting issues due to their unpredictable nature. It calls `require` with 'unknown' arguments and suggests reviewing the structure for potential errors in dynamic imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(unknown);\nimport(unknown);\n```\n\n----------------------------------------\n\nTITLE: Configure baseUrl in tsconfig/jsconfig.json\nDESCRIPTION: Configures the `baseUrl` in `tsconfig.json` or `jsconfig.json` to specify the base directory for resolving non-relative module names.  Sets the root directory to `src/`.  All subsequent paths are relative to this base URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with npm\nDESCRIPTION: This command uses `create-next-app` via `npx` to create a new Next.js application based on the `blog-starter` example.  It downloads the specified example and creates a new project named `blog-starter-app` in the current directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example blog-starter blog-starter-app\n```\n\n----------------------------------------\n\nTITLE: Using useSelectedLayoutSegment in Typescript\nDESCRIPTION: This code snippet demonstrates how to use `useSelectedLayoutSegment` hook to read the active route segment within a specific slot. The `parallelRoutesKey` parameter ('auth' in this case) is used to specify the slot for which the active segment is being retrieved.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function Layout({ auth }: { auth: React.ReactNode }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWR hook for data fetching in React Component (JavaScript)\nDESCRIPTION: This snippet shows how to use the `useSWR` hook to fetch data in a React component using JavaScript. It defines a fetcher function that fetches data from the specified URL and parses the response as JSON. The `useSWR` hook is then used with the '/api/user' key and the fetcher function.  The returned `data` and `error` values can be used to render the component based on the fetching state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport useSWR from 'swr'\n\nexport function Profile() {\n  const fetcher = (url) => fetch(url).then((res) => res.json())\n  // The same SWR pattern you already know\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with static export (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the 'with-static-export' example. It simplifies the process of starting a project with pre-configured static export settings. The app will be named 'with-static-export-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npnpm create next-app --example with-static-export with-static-export-app\n```\n\n----------------------------------------\n\nTITLE: Navigating with router.replace (JSX)\nDESCRIPTION: This code illustrates how to use router.replace to navigate to a new page without adding a new entry to the browser's history. When the button is clicked, router.replace('/home') is called, replacing the current URL in the history stack with '/home'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.replace('/home')}>\n      Click me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with ESLint using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-eslint-app' with ESLint pre-configured. It uses the 'with-eslint' example from the create-next-app tool.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-eslint with-eslint-app\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables file\nDESCRIPTION: This command copies the example environment variables file (`.env.local.example`) to `.env.local`. The `.env.local` file will be used to configure the MQTT connection details and is ignored by Git, preventing sensitive information from being committed to the repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with react-bootstrap using npx\nDESCRIPTION: This command uses npx to execute create-next-app with the with-react-bootstrap example. It creates a new Next.js application named 'with-react-bootstrap-app' with the react-bootstrap setup. The command requires Node.js and npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-bootstrap with-react-bootstrap-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Cache for Next.js Builds\nDESCRIPTION: This JavaScript configuration for Heroku uses custom caching by adding a cacheDirectories array to the top-level package.json, including the Next.js cache directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"cacheDirectories\": [\".next/cache\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Static Metadata with JavaScript - Next.js\nDESCRIPTION: This snippet shows how to define a static metadata object in a Next.js layout or page file using JavaScript. It helps in setting static page metadata like title and description.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Rules in Next.js (mjs)\nDESCRIPTION: This snippet demonstrates how to disable specific ESLint rules within a Next.js project using the `rules` property in the `.eslintrc.mjs` file. It imports `FlatCompat` to handle the configuration and extends the 'next' ESLint configuration. The snippet shows disabling the `react/no-unescaped-entities` and `@next/next/no-page-custom-font` rules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_4\n\nLANGUAGE: mjs\nCODE:\n```\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat({\n  // import.meta.dirname is available after Node.js v20.11.0\n  baseDirectory: import.meta.dirname,\n})\n\nconst eslintConfig = [\n  ...compat.config({\n    extends: ['next'],\n    rules: {\n      'react/no-unescaped-entities': 'off',\n      '@next/next/no-page-custom-font': 'off',\n    },\n  }),\n]\n\nexport default eslintConfig\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with getInitialProps in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `getInitialProps` within a Next.js page component written in TypeScript to fetch data from an API and pass it as props to the component. It fetches the number of stars for the Next.js repository from GitHub.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-initial-props.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextPageContext } from 'next'\n\nPage.getInitialProps = async (ctx: NextPageContext) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default function Page({ stars }: { stars: number }) {\n  return stars\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Definitions (npm)\nDESCRIPTION: This command installs type definitions for React, React DOM, and Node.js as development dependencies using npm. These definitions provide type checking and autocompletion for these libraries when using TypeScript.  The `--save-dev` flag ensures they're added to `devDependencies` in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @types/react @types/react-dom @types/node\n```\n\n----------------------------------------\n\nTITLE: Loading movie graph model into Neo4j database\nDESCRIPTION: This Cypher command loads the movie graph model into the Neo4j database, which is a prerequisite for running the example application. It populates the database with data related to movies and actors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n:play movie-graph\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with npm\nDESCRIPTION: This snippet shows the commands to install dependencies and start the Next.js development server using npm. `npm install` installs the required packages, while `npm run dev` starts the development server, typically on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Unauthorized Function in Dashboard Page - TSX\nDESCRIPTION: This code snippet demonstrates how to use the unauthorized function within a dashboard page to check user authentication and render the Unauthorized component if the session is invalid. It's tailored for TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\n\nexport default async function DashboardPage() {\n  const session = await verifySession()\n\n  if (!session) {\n    unauthorized()\n  }\n\n  return <div>Dashboard</div>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Static Generation without data in Next.js\nDESCRIPTION: A simple example of a statically generated page without data fetching. This component will be rendered to HTML at build time without requiring any external data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction About() {\n  return <div>About</div>\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Timeout in Next.js\nDESCRIPTION: This snippet shows how to configure keep-alive timeout for the production Next.js server using the `--keepAliveTimeout` option. This setting is necessary to prevent proxy errors when Next.js is deployed behind a downstream proxy, ensuring that server timeouts exceed those of the proxy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnext start --keepAliveTimeout 70000\n```\n\n----------------------------------------\n\nTITLE: Setting MetadataBase (TSX)\nDESCRIPTION: This code snippet shows how to set the `metadataBase` option in a Next.js layout.  It configures the base URL used for resolving relative URLs in other metadata fields.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  metadataBase: new URL('https://acme.com'),\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different HTTP Methods in Next.js API Routes\nDESCRIPTION: This example demonstrates how to handle different HTTP methods (like POST) in an API route using req.method. It provides a template for method-specific logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    // Process a POST request\n  } else {\n    // Handle any other HTTP method\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding the Error Component in Next.js\nDESCRIPTION: This example demonstrates how to override the default `Error` component in Next.js by defining a custom component in `pages/_error.js`. The custom `Error` component receives a `statusCode` prop and displays an error message based on whether the error occurred on the server or client. The `getInitialProps` method is used to determine the status code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Error({ statusCode }) {\n  return (\n    <p>\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : 'An error occurred on client'}\n    </p>\n  )\n}\n\nError.getInitialProps = ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n\nexport default Error\n```\n\n----------------------------------------\n\nTITLE: Setting Ably API Key and API Root in .env\nDESCRIPTION: This example demonstrates how to store the Ably API key and API root URL in a .env file. This configuration is used for authentication and connecting to the Ably service during development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nABLY_API_KEY=your-ably-api-key:goes-here\nAPI_ROOT=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for Next.js\nDESCRIPTION: This code snippet updates the `package.json` scripts to use Next.js commands for development, building, and starting the application. It defines the `dev`, `build`, and `start` scripts using `next dev`, `next build`, and `npx serve@latest ./build` respectively.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"npx serve@latest ./build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode\nDESCRIPTION: This snippet shows the commands to install dependencies and run the Next.js application in development mode using npm, yarn, and pnpm. This allows developers to test their application locally before deploying it.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application using the DatoCMS example. It clones the example project into a new directory named cms-datocms-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-datocms cms-datocms-app\n```\n\n----------------------------------------\n\nTITLE: getStaticPaths Return Values Example\nDESCRIPTION: Example showing the structure of paths return object from getStaticPaths including locale configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  paths: [\n    { params: { id: '1' }},\n    {\n      params: { id: '2' },\n      locale: \"en\",\n    },\n  ],\n  fallback: ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-joi example.  It initializes a new project named 'with-joi-app' with the specified example template. The command relies on the create-next-app package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-joi with-joi-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-route-as-modal example. It clones the example project into a new directory specified by 'with-route-as-modal-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-route-as-modal with-route-as-modal-app\n```\n\n----------------------------------------\n\nTITLE: Importing Global Stylesheet in Custom App (Pages Router - JSX)\nDESCRIPTION: This JSX code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application within the Pages router. It defines the custom App component and imports the globals.css file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n\"// These styles apply to every route in the application\nimport '@/styles/globals.css'\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Font Preloading in Next.js\nDESCRIPTION: This snippet demonstrates how to disable preloading for the Noto Sans Japanese font in Next.js. It is necessary when specific font subsets cannot be preloaded. The key parameter 'preload' is set to false, indicating that the font should not be preloaded. This snippet works with 'next/font/google' and the Noto_Sans_JP font.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-fonts-missing-subsets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst notoSansJapanese = Noto_Sans_JP({\n  weight: '400',\n  preload: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Vanilla Extract using PNPM\nDESCRIPTION: This command uses PNPM to create a new Next.js application based on the Vanilla Extract example.  It bootstraps a project named 'with-vanilla-extract-app' using the provided example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-vanilla-extract with-vanilla-extract-app\n```\n\n----------------------------------------\n\nTITLE: Using Object-Based href with Query Parameters in Pages Router (TypeScript)\nDESCRIPTION: Example of using an object-based href with query parameters in the Next.js Link component for Pages Router. This approach allows structured navigation to routes with query parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Navigate to /about?name=test\nexport default function Home() {\n  return (\n    <Link\n      href={{\n        pathname: '/about',\n        query: { name: 'test' },\n      }}\n    >\n      About\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Turbopack Default Benchmark\nDESCRIPTION: Command to run the default Turbopack benchmark suite with 1,000 modules, tracking performance over time\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench -p turbopack-bench\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Cache TTL for Images in Next.js\nDESCRIPTION: This snippet sets the minimum Time to Live (TTL) for cached optimized images in Next.js. It allows developers to specify the cache duration to optimize performance and potentially reduce costs associated with image revalidations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60, // 1 minute\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 2678400, // 31 days\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Segment Analytics using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the with-segment-analytics example.  It bootstraps the project, setting up the basic structure and dependencies for integrating Segment Analytics.  The new application will be named 'with-segment-analytics-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-segment-analytics with-segment-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with auth example using npm\nDESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application named `auth-app` based on the `auth` example.  It leverages the `npx` command to execute the package directly from the npm registry without requiring a global installation.  The command initializes a Next.js project configured for authentication.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example auth auth-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Agility CMS Example\nDESCRIPTION: This snippet demonstrates how to create a new Next.js application using the `create-next-app` command and the `cms-agilitycms` example. It provides three different package managers (npm, Yarn, pnpm) for the command. The example assumes the user has a working installation of Node.js and a package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-agilitycms cms-agilitycms-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-agilitycms cms-agilitycms-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-agilitycms cms-agilitycms-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Redux (pnpm)\nDESCRIPTION: This command uses `create-next-app` with pnpm to bootstrap a new Next.js application that integrates with Redux. It specifies the `with-redux` example to create a pre-configured application. The new application will be created in a directory named `with-redux-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-redux with-redux-app\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js development server using yarn\nDESCRIPTION: This command starts the Next.js development server using yarn. It executes the \"dev\" script defined in the package.json file, usually starting the server on localhost:3000. Yarn must be installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Declaring Order Array - JavaScript\nDESCRIPTION: This snippet declares a constant array named 'order', which will be used to store string values. This is the foundation for managing the state throughout this module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const order = []; \n```\n\n----------------------------------------\n\nTITLE: Simple Title Metadata (JSX)\nDESCRIPTION: This snippet shows how to set a simple string title for the document's metadata in a JavaScript Next.js application using the static `metadata` object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'Next.js',\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<title>Next.js</title>\n```\n\n----------------------------------------\n\nTITLE: Disabling File-System Routing in Next.js\nDESCRIPTION: This JavaScript snippet shows how to disable file-system routing in Next.js by modifying the `next.config.js` file. Setting `useFileSystemPublicRoutes` to `false` prevents Next.js from automatically creating routes based on files in the `pages` directory, allowing for more control over routing when using a custom server. This helps avoid serving the same content from multiple paths, which can affect SEO and UX.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  useFileSystemPublicRoutes: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Caching a Component with Props-based Cache Keys (TypeScript)\nDESCRIPTION: Demonstrates implementing 'use cache' in a component that accepts props. The cache key includes the serialized props, so the cached value is reused when props produce the same values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function Bookings({ type = 'haircut' }: BookingsProps) {\n  'use cache'\n  async function getBookingsData() {\n    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)\n    return data\n  }\n  return //...\n}\n\ninterface BookingsProps {\n  type: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Compiled using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application configured with the Compiled CSS-in-JS library. It executes the create-next-app package with the 'with-compiled-css' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-compiled-css with-compiled-css-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). After running any of these commands, the development server will be available at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component with Client and Server Components in TypeScript\nDESCRIPTION: This snippet combines Client and Server Components by defining a Layout component that includes a Server Component (Logo) and a Client Component (SearchBar). This structure optimizes the overall performance by reducing the Client JavaScript bundle size.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n\n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring transpilePackages in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to configure Next.js to automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies in node_modules. It uses the transpilePackages option in next.config.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/transpilePackages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['package-name'],\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Memoizing Database Queries with React Cache in TypeScript\nDESCRIPTION: Utilizes React's cache function to memoize database queries. This optimizes performance by ensuring the same function with the same inputs is only executed once, useful for database clients that don't use the fetch API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { cache } from 'react'\nimport db from '@/lib/db'\n\nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Compiled using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application configured with the Compiled CSS-in-JS library. It executes the create-next-app package with the 'with-compiled-css' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-compiled-css with-compiled-css-app\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Parameter in Next.js Page Component\nDESCRIPTION: This snippet demonstrates how to access the current locale parameter in a Next.js page component using TypeScript and JavaScript versions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ lang: string }>\n}) {\n  const { lang } = await params\n  return ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Page({ params }) {\n  const { lang } = await params\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Client-Side Navigation in Next.js\nDESCRIPTION: This snippet demonstrates how to use the Link component from next/link to create client-side route transitions between pages in a Next.js application. It shows linking to static and dynamic routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Creating Client Component (TSX)\nDESCRIPTION: This code creates a client component in Next.js (TSX) that dynamically imports the main `App` component using `next/dynamic`. The `'use client'` directive marks this as a Client Component, and `ssr: false` disables server-side rendering for the imported `App` component.  The `ClientOnly` function then renders the dynamically imported App component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugins in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to configure experimental SWC plugins in the Next.js configuration file. Plugins are specified as an array of tuples, each containing the plugin path and its options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    swcPlugins: [\n      [\n        'plugin',\n        {\n          ...pluginOptions,\n        },\n      ],\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading the current URL with router.reload\nDESCRIPTION: This code snippet demonstrates how to use `router.reload` to refresh the current page, similar to clicking the browser's refresh button. It utilizes the `useRouter` hook to access the router instance and calls the `reload()` method on a button click.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.reload()}>\n      Click here to reload\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dashboard Layout Definition (TypeScript)\nDESCRIPTION: This code snippet defines a dashboard layout component in TypeScript. It accepts a `children` prop, which represents the content to be rendered within the layout. The layout is a simple section element that wraps the children.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a home page (page.tsx) in Next.js App Router with Typescript\nDESCRIPTION: This TypeScript code defines a simple home page component for a Next.js application using the App Router. It renders a heading that says \"Hello, Next.js!\". This is the basic setup for creating the main page within the app directory structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header, Cookie, and Query Matching Rewrites in Next.js\nDESCRIPTION: This configuration demonstrates how to set up rewrites in Next.js based on headers, cookies, queries, and host values. It shows various matching conditions with 'has' and 'missing' fields to conditionally apply rewrites based on request properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      // if the header `x-rewrite-me` is present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the header `x-rewrite-me` is not present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this rewrite will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        destination: '/:path*/home',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Analyze Turbopack Trace File with Next.js\nDESCRIPTION: These commands show how to analyze a Turbopack trace file using the Next.js internal trace tool. The trace tool provides detailed information about the time taken for each module to compile. Replace `.next/trace-turbopack` with the actual path to the generated trace file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnext internal trace .next/trace-turbopack\n```\n\nLANGUAGE: bash\nCODE:\n```\nnext internal turbo-trace-server .next/trace-turbopack\n```\n\n----------------------------------------\n\nTITLE: Convert Base64 to Uint8Array - JavaScript\nDESCRIPTION: This function converts a base64 string to a Uint8Array, which is required for the applicationServerKey when subscribing to push notifications. It handles padding and replaces URL-safe characters before decoding the base64 string using the window.atob() method. The resulting raw data is then converted to a Uint8Array and returned.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/')\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n```\n\n----------------------------------------\n\nTITLE: Segment Configuration Options in Next.js - TypeScript\nDESCRIPTION: This TypeScript snippet defines configuration options for a route segment, setting dynamic behavior and caching strategies for Next.js routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a Next.js application using the `with-linaria` example. The new application will be named `with-linaria-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-linaria with-linaria-app\n```\n\n----------------------------------------\n\nTITLE: Enabling Lightning CSS in Next.js with JavaScript\nDESCRIPTION: Configuration for enabling Lightning CSS in a Next.js project using JavaScript. This snippet demonstrates how to set the useLightningcss experimental flag to true in the Next.js configuration file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/useLightningcss.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    useLightningcss: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating a root layout file (layout.js) in Next.js App Router with JavaScript\nDESCRIPTION: This JavaScript code defines the root layout component for a Next.js application using the App Router. The root layout is required and must contain the `<html>` and `<body>` tags. The `children` prop represents the content of the application that will be rendered within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Revalidation Timeframes in Next.js Routes\nDESCRIPTION: Configure the default revalidation time for a layout or page. This option determines how frequently the route should be regenerated, with different values controlling static vs dynamic rendering behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const revalidate = false\n// false | 0 | number\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const revalidate = false\n// false | 0 | number\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js and Sanity Blog with create-next-app\nDESCRIPTION: This snippet demonstrates how to initialize a Next.js blog project with Sanity using different package managers. It requires npm, Yarn, or pnpm to be installed. The commands set up a skeleton for a blog using the cms-sanity template. No specific inputs other than command execution, and it results in a ready-to-configure blog project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-sanity next-sanity-blog\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-sanity next-sanity-blog\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-sanity next-sanity-blog\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites with basePath Support in Next.js\nDESCRIPTION: This configuration demonstrates how to use rewrites with basePath support. The basePath is automatically applied to source and destination paths unless explicitly disabled with basePath: false for a specific rewrite rule.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n      },\n      {\n        // does not add /docs to /without-basePath since basePath: false is set\n        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in getStaticProps - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to access environment variables within the `getStaticProps` function in Next.js pages.  It connects to a database using the `DB_HOST`, `DB_USER`, and `DB_PASS` variables loaded from the `.env` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MDX pages using pnpm\nDESCRIPTION: This command uses `create-next-app` with pnpm to initialize a new Next.js project with the `mdx-pages` example. It creates a directory named `mdx-pages-app` for the new project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example mdx-pages mdx-pages-app\n```\n\n----------------------------------------\n\nTITLE: Implementing unstable_noStore for Safe Dynamic Rendering in Next.js\nDESCRIPTION: This code snippet demonstrates how to use the unstable_noStore function from Next.js to opt out of static generation before a try/catch block. This approach ensures that dynamic rendering APIs can be safely used without causing build failures.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/ppr-caught-error.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_noStore } from 'next/cache'\n\nasync function fetchData() {\n  unstable_noStore() // opt out before we even get to the try/catch\n  try {\n    const response = await fetch(url);\n    ...\n  } catch (x) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Link (JSX)\nDESCRIPTION: This code snippet shows how Next.js automatically include a link to the HTML page in the AMP version of your page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<link rel=\"canonical\" href=\"/about\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Color with Media Queries in JavaScript\nDESCRIPTION: This snippet illustrates how to create a viewport object in JavaScript that includes dynamic theme colors based on media queries for responsive design.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with filbert-js example using npx\nDESCRIPTION: This command utilizes npx to create a new Next.js application based on the filbert-js example. It downloads and executes the create-next-app package with the specified example and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-filbert with-filbert-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Components in Next.js - TypeScript\nDESCRIPTION: This snippet shows how to configure styled-components in a Next.js application by modifying the next.config.js file to enable styled-components compiler options using TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n\nexport default nextConfig\n\n```\n\n----------------------------------------\n\nTITLE: create-next-app Command-Line Options\nDESCRIPTION: This section displays the usage and options available for the `create-next-app` command. It allows for non-interactive project setup with various configurations such as TypeScript, JavaScript, Tailwind CSS, ESLint, and more, using command-line arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: create-next-app [project-directory] [options]\n\nOptions:\n  -V, --version                        output the version number\n  --ts, --typescript\n\n    Initialize as a TypeScript project. (default)\n\n  --js, --javascript\n\n    Initialize as a JavaScript project.\n\n  --tailwind\n\n    Initialize with Tailwind CSS config. (default)\n\n  --eslint\n\n    Initialize with ESLint config.\n\n  --app\n\n    Initialize as an App Router project.\n\n  --src-dir\n\n    Initialize inside a `src/` directory.\n\n  --turbopack\n\n    Enable Turbopack by default for development.\n\n  --import-alias <alias-to-configure>\n\n    Specify import alias to use (default \"@/*\").\n\n  --empty\n\n    Initialize an empty project.\n\n  --use-npm\n\n    Explicitly tell the CLI to bootstrap the application using npm\n\n  --use-pnpm\n\n    Explicitly tell the CLI to bootstrap the application using pnpm\n\n  --use-yarn\n\n    Explicitly tell the CLI to bootstrap the application using Yarn\n\n  --use-bun\n\n    Explicitly tell the CLI to bootstrap the application using Bun\n\n  -e, --example [name]|[github-url]\n\n    An example to bootstrap the app with. You can use an example name\n    from the official Next.js repo or a GitHub URL. The URL can use\n    any branch and/or subdirectory\n\n  --example-path <path-to-example>\n\n    In a rare case, your GitHub URL might contain a branch name with\n    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).\n    In this case, you must specify the path to the example separately:\n    --example-path foo/bar\n\n  --reset-preferences\n\n    Explicitly tell the CLI to reset any stored preferences\n\n  --skip-install\n\n    Explicitly tell the CLI to skip installing packages\n\n  --disable-git\n\n    Explicitly tell the CLI to skip initializing a git repository.\n\n  --yes\n\n    Use previous preferences or defaults for all options that were not\n    explicitly specified, without prompting.\n\n  -h, --help                           display help for command\n```\n\n----------------------------------------\n\nTITLE: Defining Function d3 in JavaScript\nDESCRIPTION: This snippet defines a function named `d3` which is yet another hoisted function declaration with no parameters or implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction d3() {}\n```\n\n----------------------------------------\n\nTITLE: Next.js Component Caching with Children (JSX)\nDESCRIPTION: This snippet demonstrates how to pass non-serializable arguments to a cacheable function by using the `children` prop in a Next.js component. The `CacheComponent` utilizes the 'use cache' directive to cache its output, while allowing a `DynamicComponent` to be passed as a child with potentially uncached data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const uncachedData = await getData()\n  return (\n    <CacheComponent>\n      <DynamicComponent data={uncachedData} />\n    </CacheComponent>\n  )\n}\n\nasync function CacheComponent({ children }) {\n  'use cache'\n  const cachedData = await fetch('/api/cached-data')\n  return (\n    <div>\n      <PrerenderedComponent data={cachedData} />\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Functional Components with JavaScript\nDESCRIPTION: Illustrates forwarding refs in a functional component in JavaScript using React.forwardRef. Ensures 'onClick', 'href', and 'ref' properties are handled properly. This example uses 'react' and 'next/link'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\nimport React from 'react'\n\n// `onClick`, `href`, and `ref` need to be passed to the DOM element\n// for proper handling\nconst MyButton = React.forwardRef(({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n})\n\n// Add a display name for the component (useful for debugging)\nMyButton.displayName = 'MyButton'\n\nexport default function Page() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <MyButton />\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Secret and Enabling Draft Mode\nDESCRIPTION: This route handler validates the provided secret token and slug, fetches the corresponding post from the headless CMS, enables Draft Mode, and redirects to the fetched post's slug. It uses `next/headers` for `draftMode` and `next/navigation` for `redirect`. Error handling is included to return a 401 status for invalid tokens or slugs. Assumes the existence of a `getPostBySlug` function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n\n  // Check the secret and next parameters\n  // This secret should only be known to this Route Handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  const draft = await draftMode()\n  draft.enable()\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IPC Connection Between Node.js and Rust\nDESCRIPTION: Creates a TCP socket connection for inter-process communication with binary protocol implementation. The module handles packet buffering, parsing JSON messages, and provides send/receive methods for communication between Node.js and Rust processes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { createConnection } from \"node:net\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nfunction createIpc(port) {\n    const socket = createConnection(port, \"127.0.0.1\");\n    const packetQueue = [];\n    const recvPromiseResolveQueue = [];\n    function pushPacket(packet) {\n        const recvPromiseResolve = recvPromiseResolveQueue.shift();\n        if (recvPromiseResolve != null) {\n            recvPromiseResolve(JSON.parse(packet.toString(\"utf8\")));\n        } else {\n            packetQueue.push(packet);\n        }\n    }\n    let state = {\n        type: \"waiting\"\n    };\n    let buffer = Buffer.alloc(0);\n    socket.once(\"connect\", ()=>{\n        socket.on(\"data\", (chunk)=>{\n            buffer = Buffer.concat([\n                buffer,\n                chunk\n            ]);\n            loop: while(true){\n                switch(state.type){\n                    case \"waiting\":\n                        {\n                            if (buffer.length >= 4) {\n                                const length = buffer.readUInt32BE(0);\n                                buffer = buffer.subarray(4);\n                                state = {\n                                    type: \"packet\",\n                                    length\n                                };\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                    case \"packet\":\n                        {\n                            if (buffer.length >= state.length) {\n                                const packet = buffer.subarray(0, state.length);\n                                buffer = buffer.subarray(state.length);\n                                state = {\n                                    type: \"waiting\"\n                                };\n                                pushPacket(packet);\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    });\n    socket.once(\"close\", ()=>{\n        process.exit(0);\n    });\n    function send(message) {\n        const packet = Buffer.from(JSON.stringify(message), \"utf8\");\n        const length = Buffer.alloc(4);\n        length.writeUInt32BE(packet.length);\n        socket.write(length);\n        return new Promise((resolve, reject)=>{\n            socket.write(packet, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    function sendReady() {\n        const length = Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return new Promise((resolve, reject)=>{\n            socket.write(length, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    return {\n        async recv () {\n            const packet = packetQueue.shift();\n            if (packet != null) {\n                return JSON.parse(packet.toString(\"utf8\"));\n            }\n            const result = await new Promise((resolve)=>{\n                recvPromiseResolveQueue.push((result)=>{\n                    resolve(result);\n                });\n            });\n            return result;\n        },\n        send (message) {\n            return send(message);\n        },\n        sendReady,\n        async sendError (error) {\n            try {\n                await send({\n                    type: \"error\",\n                    ...structuredError(error)\n                });\n            } catch (err) {\n                console.error(\"failed to send error back to rust:\", err);\n                process.exit(1);\n            }\n            process.exit(0);\n        }\n    };\n}\nconst PORT = process.argv[2];\nconst IPC = createIpc(parseInt(PORT, 10));\nexport { createIpc as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { PORT as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { IPC as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a new Next.js app with TypeScript and GraphQL\nDESCRIPTION: This code snippet shows how to create a new Next.js application using `create-next-app` with the `with-typescript-graphql` example. It shows the usage with npm, yarn, and pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-typescript-graphql with-typescript-graphql-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Rematch using npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-rematch' example.  It sets up a project named 'with-rematch-app' in the current directory.  This assumes npm is installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-rematch with-rematch-app\n```\n\n----------------------------------------\n\nTITLE: Configuring localPatterns in next.config.js\nDESCRIPTION: This snippet demonstrates how to configure localPatterns in your next.config.js file to allow specific paths for image optimization. Only paths matching the specified patterns will be optimized, and any other path will respond with a 400 Bad Request.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    localPatterns: [\n      {\n        pathname: '/assets/images/**',\n        search: '',\n      },\n    ],\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Rebass using Yarn\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application integrated with Rebass. It specifies the \"with-rebass\" example and names the new application \"with-rebass-app\".\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-rebass with-rebass-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with Yarn\nDESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application using the create-next-app command with Yarn. It sets up the app with the Docker Compose example provided.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-docker-compose with-docker-compose-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with rehype-katex Plugin for Turbopack\nDESCRIPTION: This snippet demonstrates how to configure a Next.js application using Turbopack with the `rehype-katex` plugin. It shows the configuration within `next.config.mjs`, specifying the `rehypePlugins` option as a string. The `createMDX` function from `@next/mdx` is used to combine the MDX configuration with the Next.js configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n}\n\nconst withMDX = createMDX({\n  options: {\n    remarkPlugins: [],\n    rehypePlugins: [['rehype-katex', { strict: true, throwOnError: true }]],\n  },\n})\n\nexport default withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Specifying Next.js SWC Package for Apple Silicon\nDESCRIPTION: This code snippet shows the package name for the Next.js SWC binary specifically compiled for aarch64-apple-darwin (Apple Silicon ARM64) architecture.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/darwin-arm64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@next/swc-darwin-arm64`\n```\n\n----------------------------------------\n\nTITLE: Initialize Next.js App with Plasmic Example (pnpm)\nDESCRIPTION: This command uses the `create next-app` tool with pnpm to bootstrap a new Next.js application using the `cms-plasmic` example. It creates a new directory named `cms-plasmic-app` containing the project files. Requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-plasmic cms-plasmic-app\n```\n\n----------------------------------------\n\nTITLE: Set Up Sanity Project with npm/Yarn/pnpm\nDESCRIPTION: These commands set up a Sanity project, creating necessary datasets and environment variables. They require Sanity CLI tools and a pre-configured package manager. Questions answered during execution lead to project configuration, resulting in a ready-to-use Sanity setup within a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run setup\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn setup\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Checking Draft Mode in getStaticProps (JavaScript)\nDESCRIPTION: This JavaScript code shows how to check if Draft Mode is enabled within the `getStaticProps` function using `context.draftMode`. When Draft Mode is active, `getStaticProps` is called at request time, and `context.draftMode` is set to `true`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getStaticProps(context) {\n  if (context.draftMode) {\n    // dynamic data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Link with URL Object in TypeScript\nDESCRIPTION: Demonstrates passing a URL object to the Link component in TypeScript, with properties for pathname and query. This generates a URL string automatically. It requires Next.js and the Link usage supports complex URL structures.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link\n          href={{\n            pathname: '/about',\n            query: { name: 'test' },\n          }}\n        >\n          About us\n        </Link>\n      </li>\n      <li>\n        <Link\n          href={{\n            pathname: '/blog/[slug]',\n            query: { slug: 'my-post' },\n          }}\n        >\n          Blog Post\n        </Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Handling Fallback State in Next.js Dynamic Routes\nDESCRIPTION: Demonstrates how to handle the loading state when using fallback: true or fallback: 'blocking' in getStaticPaths. It uses the useRouter hook to check if the page is in a fallback state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nfunction Post({ post }) {\n  const router = useRouter()\n\n  if (router.isFallback) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </article>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Ghost CMS Environment Variables\nDESCRIPTION: This snippet shows the environment variables required to connect the Next.js application to a Ghost CMS instance. `GHOST_API_URL` specifies the URL of the Ghost API, and `GHOST_API_KEY` provides the necessary authentication key.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_API_URL=...\nGHOST_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Upgrading React and React DOM using Yarn\nDESCRIPTION: This command adds the latest versions of React and React DOM to your project using Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-version.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js MDX app with pnpm\nDESCRIPTION: This command utilizes pnpm to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example mdx mdx-app\n```\n\n----------------------------------------\n\nTITLE: Streaming Video Component with React Suspense - JSX\nDESCRIPTION: This snippet illustrates how to stream a video component using React Suspense within a Next.js page. It imports the `VideoComponent` and wraps it with `<Suspense>`, providing a fallback UI (loading message) while the video is loading. This approach prevents page blocking and improves user experience.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\n\nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading video...</p>}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building Stencil Component for Production\nDESCRIPTION: Command to build the Stencil component for production use.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (pnpm)\nDESCRIPTION: These commands use pnpm to install project dependencies with pnpm install and then launch the Next.js development server using pnpm dev. This enables local development of the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Font Files for a Single Family\nDESCRIPTION: Illustrates how to configure multiple font files for a single font family using the next/font/local module. This example shows setting up different weights and styles for the Roboto font.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst roboto = localFont({\n  src: [\n    {\n      path: './Roboto-Regular.woff2',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-Italic.woff2',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: './Roboto-Bold.woff2',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-BoldItalic.woff2',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration for Next.js\nDESCRIPTION: This code snippet shows a basic `.babelrc` file for Next.js. It defines the `next/babel` preset, which includes all necessary configurations for compiling React applications and server-side code within a Next.js project. No plugins are added in this minimal configuration. It is essential to include the `next/babel` preset when defining your own `.babelrc` file to ensure proper compilation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic IO in Next.js Configuration\nDESCRIPTION: Configure Next.js to enable experimental dynamic IO feature, which is required for using cacheLife function\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextConfig: NextConfig = {\n  experimental: {\n    dynamicIO: true,\n  },\n}\n\nexport default nextConfig\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  experimental: {\n    dynamicIO: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating a home page (index.js) in Next.js Pages Router with JavaScript\nDESCRIPTION: This JavaScript code defines a simple home page component for a Next.js application using the Pages Router. It renders a heading that says \"Hello, Next.js!\". This component is placed inside the `pages` directory and acts as the root route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Metadata (admins array) - JSX\nDESCRIPTION: This code snippet demonstrates how to configure Facebook metadata with an array of `admins` using the `facebook` property within the `metadata` export in a Next.js layout or page file.  This will create multiple meta tags for each admin.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_60\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  facebook: {\n    admins: ['12345678', '87654321'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component with Navigation and Form in Next.js\nDESCRIPTION: This snippet demonstrates how to use the Nav and Form components in a Next.js page, implementing the navigation blocking functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport Nav from './components/nav'\nimport Form from './components/form'\n\nexport default function Page() {\n  return (\n    <div>\n      <Nav />\n      <main>\n        <h1>Welcome to the Dashboard</h1>\n        <Form />\n      </main>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Nav from './components/nav'\nimport Form from './components/form'\n\nexport default function Page() {\n  return (\n    <div>\n      <Nav />\n      <main>\n        <h1>Welcome to the Dashboard</h1>\n        <Form />\n      </main>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application based on the cms-dotcms example. It initializes the project in a directory named cms-dotcms-app. It requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-dotcms cms-dotcms-app\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Package Manager\nDESCRIPTION: This snippet demonstrates how to start a Next.js development server using various package managers like npm, yarn, pnpm, and bun. These commands set up the local server to run at http://localhost:3000. Dependencies include having a Node.js environment and the Next.js framework installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the cms-dotcms example. It initializes the project in a directory named cms-dotcms-app. It requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-dotcms cms-dotcms-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Quill.js Example using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the 'with-quill-js' example from the Next.js repository. It utilizes pnpm to execute the create-next-app tool and creates a new directory named 'with-quill-js-app' to house the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-quill-js with-quill-js-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode using yarn\nDESCRIPTION: These commands start the Next.js development server. It can be run using npm, yarn, or pnpm. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Example Preview API Route URL - Bash\nDESCRIPTION: This is an example URL to access the preview API route in Next.js. It includes parameters for `secret` (token) and `slug` (path), enabling the preview mode for a specific page. This needs to be configured in your headless CMS or accessed manually.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-site>/api/preview?secret=<token>&slug=<path>\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Debugging with --inspect Flag\nDESCRIPTION: This snippet demonstrates how to enable server-side debugging in Next.js by using the `--inspect` flag. It shows how to pass this flag to the Node.js process using the `NODE_OPTIONS` environment variable. It also describes how to update the `dev` script in `package.json` to include the `--inspect` flag for consistent debugging. Requires Node.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nNODE_OPTIONS='--inspect' next dev\n```\n\n----------------------------------------\n\nTITLE: Defining getStaticPaths with paths and fallback\nDESCRIPTION: This code snippet demonstrates the correct structure for the return value of the `getStaticPaths` function in Next.js. It includes the required `paths` array, which contains either strings representing paths or objects with a `params` property, and the `fallback` boolean property. The `paths` property specifies which paths to pre-render and the `fallback` property determines how Next.js handles requests for paths that are not pre-rendered.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getstaticpaths-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: Array<string | { params: { [key: string]: string } }>,\n    fallback: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NextTracerImpl for Next.js Tracing\nDESCRIPTION: Implements a comprehensive tracing system for Next.js with context management, span creation, tracing functions, and utilities for handling promises and root span attributes. It includes methods for propagating context and managing spans throughout the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as context } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport { c as api } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport { j as closeSpanWithError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { LogSpanAllowList } from './constants';\nimport { NextVanillaSpanAllowlist } from './constants';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nconst isPromise = (p)=>{\n    return p !== null && typeof p === 'object' && typeof p.then === 'function';\n};\nconst rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId');\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nconst clientTraceDataSetter = {\n    set (carrier, key, value) {\n        carrier.push({\n            key,\n            value\n        });\n    }\n};\nclass NextTracerImpl {\n    getTracerInstance() {\n        return trace.getTracer('next.js', '0.0.1');\n    }\n    getContext() {\n        return context;\n    }\n    getTracePropagationData() {\n        const activeContext = context.active();\n        const entries = [];\n        propagation.inject(activeContext, entries, clientTraceDataSetter);\n        return entries;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        const { fn, options } = typeof fnOrOptions === 'function' ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        const spanName = options.spanName ?? type;\n        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {\n            return fn();\n        }\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            'next.span_name': spanName,\n            'next.span_type': type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {\n                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {\n                            start: startTime,\n                            end: performance.now()\n                        });\n                    }\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        return result.then((res)=>{\n                            span.end();\n                            return res;\n                        }).catch((err)=>{\n                            closeSpanWithError(span, err);\n                            throw err;\n                        }).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === 'function' && typeof fn === 'function') {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === 'function') {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\nexport { getTracer };\nexport { isPromise as k } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { rootSpanAttributesStore as l } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { rootSpanIdKey as m } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { lastSpanId as n } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { getSpanId as o } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { clientTraceDataSetter as p } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { NextTracerImpl as q } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { getTracer as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n headers in next.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure headers in `next.config.js` to handle internationalization (i18n). It shows how to set headers for specific routes, including handling locales automatically and manually. The i18n configuration specifies available locales and a default locale. The `headers` function returns an array of header configurations. Routes can be matched with or without locale prefixes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async headers() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Components file - JavaScript\nDESCRIPTION: This snippet creates an `mdx-components.js` file to define global MDX components. It exports a `useMDXComponents` function that returns the provided components. This file is required when using `@next/mdx` with the App Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-hls-js' example.  It utilizes the create-next-app tool and specifies the example and the application name.  The application will be created in a directory named 'with-hls-js-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-hls-js with-hls-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Session with Cookies (App Router) - JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates the creation of a database session and storage in cookies for optimistic authentication checks in a Next.js application using the App Router.  It imports necessary modules like `cookies` from `next/headers`, database connection (`db`), and an encryption function (`encrypt`). The `createSession` function accepts a user ID, creates a session record in the database with an expiration date, encrypts the session ID, and sets a cookie containing the encrypted session data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport cookies from 'next/headers'\nimport { db } from '@/app/lib/db'\nimport { encrypt } from '@/app/lib/session'\n\nexport async function createSession(id) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n\n  // 1. Create a session in the database\n  const data = await db\n    .insert(sessions)\n    .values({\n      userId: id,\n      expiresAt,\n    })\n    // Return the session ID\n    .returning({ id: sessions.id })\n\n  const sessionId = data[0].id\n\n  // 2. Encrypt the session ID\n  const session = await encrypt({ sessionId, expiresAt })\n\n  // 3. Store the session in cookies for optimistic auth checks\n  const cookieStore = await cookies()\n  cookieStore.set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Tracer Implementation with OpenTelemetry Integration (JS)\nDESCRIPTION: The complete implementation of the Next.js tracing system using OpenTelemetry. Provides functionality for creating spans, propagating context, and handling errors in both synchronous and asynchronous code paths.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { NextVanillaSpanAllowlist } from './constants';\nimport { c as api } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport { i as ROOT_CONTEXT } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport { j as closeSpanWithError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nimport { LogSpanAllowList } from './constants';\nimport { k as rootSpanAttributesStore } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -13\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nconst isPromise = (p)=>{\n    return p !== null && typeof p === 'object' && typeof p.then === 'function';\n};\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId');\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nconst clientTraceDataSetter = {\n    set (carrier, key, value) {\n        carrier.push({\n            key,\n            value\n        });\n    }\n};\nclass NextTracerImpl {\n    getTracerInstance() {\n        return trace.getTracer('next.js', '0.0.1');\n    }\n    getContext() {\n        return context;\n    }\n    getTracePropagationData() {\n        const activeContext = context.active();\n        const entries = [];\n        propagation.inject(activeContext, entries, clientTraceDataSetter);\n        return entries;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        const { fn, options } = typeof fnOrOptions === 'function' ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        const spanName = options.spanName ?? type;\n        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {\n            return fn();\n        }\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            'next.span_name': spanName,\n            'next.span_type': type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {\n                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {\n                            start: startTime,\n                            end: performance.now()\n                        });\n                    }\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        return result.then((res)=>{\n                            span.end();\n                            return res;\n                        }).catch((err)=>{\n                            closeSpanWithError(span, err);\n                            throw err;\n                        }).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === 'function' && typeof fn === 'function') {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === 'function') {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\nexport { getTracer };\nexport { isPromise as l } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { rootSpanIdKey as m } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { lastSpanId as n } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { getSpanId as o } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { clientTraceDataSetter as p } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { NextTracerImpl as q } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { getTracer as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist in package.json (JSON)\nDESCRIPTION: This code snippet shows how to configure Browserslist in the `package.json` file to specify target browsers for Next.js. It defines an array of browser versions that the application should support. This configuration informs Next.js about the necessary polyfills and transformations to apply during the build process to ensure compatibility with the specified browsers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/supported-browsers.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\n    \"chrome 64\",\n    \"edge 79\",\n    \"firefox 67\",\n    \"opera 51\",\n    \"safari 12\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Sass example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-sass example. It configures the project with Sass support and installs all required packages. The with-sass-app argument defines the name of the directory for the new application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-sass with-sass-app\n```\n\n----------------------------------------\n\nTITLE: Server-side Data Fetching in Next.js Pages Directory - JSX\nDESCRIPTION: This JavaScript snippet demonstrates the use of 'getServerSideProps' in the 'pages' directory to perform server-side data fetching in Next.js. The function fetches data, which is then passed as props to the component, allowing the page to be rendered server-side with the data initialized. This approach ensures that the initial HTML contains the data, aiding SEO and performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\\n\\nexport async function getServerSideProps() {\\n  const res = await fetch(`https://...`)\\n  const projects = await res.json()\\n\\n  return { props: { projects } }\\n}\\n\\nexport default function Dashboard({ projects }) {\\n  return (\\n    <ul>\\n      {projects.map((project) => (\\n        <li key={project.id}>{project.name}</li>\\n      ))}\\n    </ul>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with React-GA4 Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-react-ga4 example. It's a bootstrapping method for quickly setting up a project with pre-configured analytics.  The 'with-react-ga-app' argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-ga4 with-react-ga-app\n```\n\n----------------------------------------\n\nTITLE: Sequential Data Fetching - Next.js with JavaScript\nDESCRIPTION: This snippet shows the same logic as before but implemented in JavaScript, fetching artist details and playlists using the sequential pattern where the artist's ID is passed to the Playlists component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { username } = await params\n  // Get artist information\n  const artist = await getArtist(username)\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      {/* Show fallback UI while the Playlists component is loading */}\n      <Suspense fallback={<div>Loading...</div>}>\n        {/* Pass the artist ID to the Playlists component */}\n        <Playlists artistID={artist.id} />\n      </Suspense>\n    </>\n  )\n}\n\nasync function Playlists({ artistID }) {\n  // Use the artist ID to fetch playlists\n  const playlists = await getArtistPlaylists(artistID)\n\n  return (\n    <ul>\n      {playlists.map((playlist) => (\n        <li key={playlist.id}>{playlist.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-youtube-embed' example. It uses the create next app command to scaffold a new app. The resulting application will be named 'with-youtube-embed-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-youtube-embed with-youtube-embed-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Generation Options in Next.js TypeScript\nDESCRIPTION: TypeScript configuration for Next.js static generation settings including retry count, max concurrency, and minimum pages per worker. Requires Next.js and uses the experimental configuration options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/staticGeneration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    staticGenerationRetryCount: 1,\n    staticGenerationMaxConcurrency: 8,\n    staticGenerationMinPagesPerWorker: 25,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Next.js Example with Electron\nDESCRIPTION: This code shows how to bootstrap a Next.js application configured for use with Electron using different package managers such as npm, Yarn, and pnpm. These commands set up a new project that incorporates the example of Next.js with Electron support.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app --example with-electron-typescript with-electron-typescript-app\n```\n\nLANGUAGE: Bash\nCODE:\n```\nyarn create next-app --example with-electron-typescript with-electron-typescript-app\n```\n\nLANGUAGE: Bash\nCODE:\n```\npnpm create next-app --example with-electron-typescript with-electron-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Install MDX dependencies - Bash\nDESCRIPTION: This command installs the necessary packages for rendering MDX in a Next.js application. It includes `@next/mdx` for Next.js integration, `@mdx-js/loader` for MDX loading, `@mdx-js/react` for React component support, and `@types/mdx` for TypeScript type definitions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Operations in Next.js API Routes\nDESCRIPTION: This example shows how to handle asynchronous operations in an API route, including error handling and sending appropriate responses based on the operation's result.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).json({ result })\n  } catch (err) {\n    res.status(500).json({ error: 'failed to load data' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Fetch Requests in Next.js - JavaScript\nDESCRIPTION: Illustrates the automatic memoization mechanism in Next.js for `fetch` calls with the same URL and configuration within a JavaScript React component tree, to minimize network requests. No additional dependencies are required beyond the basic JavaScript ecosystem in a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n\n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n\n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the with-next-page-transitions example. It downloads and executes the create-next-app package to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-next-page-transitions with-next-page-transitions-app\n```\n\n----------------------------------------\n\nTITLE: Applying Package Modifications to Project\nDESCRIPTION: Command to automatically apply modifications to package.json in a specified project directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next --project ~/shadcn-ui/apps/www/\n```\n\n----------------------------------------\n\nTITLE: Adding Git Remote\nDESCRIPTION: This command adds a remote origin to the local Git repository, connecting it to a remote GitHub repository. This allows for pushing the local code to the remote repository for deployment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin https://github.com/<org>/<repo>.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Magic Example using Yarn\nDESCRIPTION: These commands use create-next-app to bootstrap a new Next.js project using the with-magic example. It demonstrates how to initialize the project with npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-magic with-magic-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Next.js in JavaScript\nDESCRIPTION: This JavaScript configuration file sets up Jest to use the `next/jest` preset for Next.js applications.  It configures Jest with the necessary options to work with Next.js, specifying the test environment as 'jsdom', the coverage provider as 'v8' and setting the root directory for loading Next.js configuration files. The configuration enables Jest to understand and correctly test Next.js components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nextJest = require('next/jest')\n\n/** @type {import('jest').Config} */\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n\n// Add any custom config to be passed to Jest\nconst config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nmodule.exports = createJestConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Component with Navigation Blocking in Next.js\nDESCRIPTION: This snippet defines a custom Link component that uses the NavigationBlocker context to prevent navigation when isBlocked is true, prompting the user for confirmation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport Link from 'next/link'\nimport { useNavigationBlocker } from '../contexts/navigation-blocker'\n\ninterface CustomLinkProps extends React.ComponentProps<typeof Link> {\n  children: React.ReactNode\n}\n\nexport function CustomLink({ children, ...props }: CustomLinkProps) {\n  const { isBlocked } = useNavigationBlocker()\n\n  return (\n    <Link\n      onNavigate={(e) => {\n        if (\n          isBlocked &&\n          !window.confirm('You have unsaved changes. Leave anyway?')\n        ) {\n          e.preventDefault()\n        }\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport Link from 'next/link'\nimport { useNavigationBlocker } from '../contexts/navigation-blocker'\n\nexport function CustomLink({ children, ...props }) {\n  const { isBlocked } = useNavigationBlocker()\n\n  return (\n    <Link\n      onNavigate={(e) => {\n        if (\n          isBlocked &&\n          !window.confirm('You have unsaved changes. Leave anyway?')\n        ) {\n          e.preventDefault()\n        }\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Response Limit in API Routes on Next.js\nDESCRIPTION: This snippet shows how to disable the response limit for an API Route in Next.js by setting the responseLimit to false. This is useful if you require larger data responses but should be used with caution due to performance implications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/api-routes-response-size-limit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  api: {\n    responseLimit: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with FingerprintJS Pro Example (npm)\nDESCRIPTION: This command uses `create-next-app` with npm to generate a new Next.js project pre-configured with the FingerprintJS Pro example.  It requires npm to be installed. The project will be created in a directory named `with-fingerprintjs-pro-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Salesforce Commerce Cloud template using Yarn\nDESCRIPTION: Command to bootstrap a Next.js application with Salesforce Commerce Cloud integration using Yarn create next-app with the with-sfcc example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-sfcc nextjs-sfcc-app\n```\n\n----------------------------------------\n\nTITLE: JSX Import Example\nDESCRIPTION: Demonstrates the difference between relative and absolute import statements in a JSX file within a Next.js project. It showcases how `baseUrl` and `paths` configurations can simplify imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_17\n\nLANGUAGE: JSX\nCODE:\n```\n// Before\nimport { Button } from '../../../components/button'\n\n// After\nimport { Button } from '@/components/button'\n```\n\n----------------------------------------\n\nTITLE: Typed Routes Configuration in Next.js\nDESCRIPTION: Configuration example for enabling typed routes in Next.js with experimental features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Using Object-Based href with Query Parameters in Pages Router (JavaScript)\nDESCRIPTION: Example of using an object-based href with query parameters in the Next.js Link component for Pages Router. This approach allows structured navigation to routes with query parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Navigate to /about?name=test\nexport default function Home() {\n  return (\n    <Link\n      href={{\n        pathname: '/about',\n        query: { name: 'test' },\n      }}\n    >\n      About\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects with i18n Support in Next.js - JavaScript\nDESCRIPTION: Defines the `i18n` configuration for locales in a Next.js application, allowing automatic prefixing of sources and destinations in redirect rules. It establishes how the application should handle locales, either by setting them automatically or defining them explicitly when `locale: false` is used. Supports matching specific locale paths even when prefixing is not automatic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async redirects() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n        permanent: false,\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n        permanent: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n        permanent: false,\n      },\n      // it's possible to match all locales even when locale: false is set\n      {\n        source: '/:locale/page',\n        destination: '/en/newpage',\n        permanent: false,\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Image Imports (Before) - TSX\nDESCRIPTION: This code snippet demonstrates how image imports are handled in CRA (Create React App), where importing an image file returns its public URL as a string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport image from './img.png'\n\nexport default function App() {\n  return <img src={image} />\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts in Next.js Application - JSX\nDESCRIPTION: This JavaScript code snippet demonstrates the same functionality as the TypeScript example, fetching blog posts from an API and rendering them in a Next.js Page Component. It illustrates the use of async/await in JavaScript for handling asynchronous data retrieval.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - Subset of paths at build time (JSX)\nDESCRIPTION: This code snippet demonstrates how to statically render a subset of paths at build time using `generateStaticParams` in Next.js. It fetches a list of posts from an API, renders only the first 10 posts at build time, and renders the remaining posts on demand when they are first visited.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  // Render the first 10 posts at build time\n  return posts.slice(0, 10).map((post) => ({\\n    slug: post.slug,\n  }))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for Next.js testmode\nDESCRIPTION: This snippet configures the `playwright.config.ts` file to integrate with Next.js's experimental test mode.  It defines a webServer to run the Next.js development server during tests, specifying the command to start the server and the URL where it will be accessible.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'next/experimental/testmode/playwright'\n\nexport default defineConfig({\n  webServer: {\n    command: 'npm run dev',\n    url: 'http://localhost:3000',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Copying the .env.local.example File\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  This is necessary to set up environment variables for connecting to the Cosmic CMS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Layout with Dynamic Route Parameters (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to access dynamic route parameters within a layout component using the `params` prop. It utilizes `async/await` to resolve the promise containing the parameters, and extracts the `team` parameter for use within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Layout({ params }) {\n  const { team } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Metadata (TSX - Pages Router)\nDESCRIPTION: This TypeScript code demonstrates how to import an MDX file and its associated metadata in a Next.js application using the Pages Router. It logs the metadata to the console and renders the MDX content within the page component, showcasing how to access and use data stored in the MDX file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading React and React DOM using npm\nDESCRIPTION: This command upgrades React and React DOM to their latest versions using npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-version.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm upgrade react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with NextUI using npm\nDESCRIPTION: This command uses the npm package manager to create a new Next.js application pre-configured to use NextUI. It utilizes the `create-next-app` tool with the `with-next-ui` example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-next-ui with-next-ui-app\n```\n\n----------------------------------------\n\nTITLE: Server-Side Data Fetching Example\nDESCRIPTION: Recommended approach using server-side data fetching in a Server Component to fetch and render blog posts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Definition (TypeScript)\nDESCRIPTION: This code snippet defines a root layout component in TypeScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Redirects in Next.js\nDESCRIPTION: This code shows how to conditionally apply redirects based on headers, cookies, or query parameters using `has` and `missing` fields. It ensures that all specified conditions in `has` match and none in `missing` are present for the redirect to take effect.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-redirect-me',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Prefix and Rewrites for Next.js Zone (Legacy)\nDESCRIPTION: This configuration is for versions older than Next.js 15. It sets up the assetPrefix and adds a rewrite rule to handle static assets, which is no longer necessary in Next.js 15 and later.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  assetPrefix: '/blog-static',\n  async rewrites() {\n    return {\n      beforeFiles: [\n        {\n          source: '/blog-static/_next/:path+',\n          destination: '/_next/:path+',\n        },\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Session Operations with devlow-bench (JavaScript)\nDESCRIPTION: This snippet provides a guide to performing browser operations using devlow-bench's helper functions, including navigation and session handling. Useful for emulating user actions in a benchmarking scenario.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { newBrowserSession } from \"devlow-bench/browser\";\n\nconst session = await newBrowserSession({\n  // options\n});\nawait session.hardNavigation(\"metric name\", \"https://example.com\");\nawait session.reload(\"metric name\");\nawait session.softNavigationByClick(\"metric name\", \".selector-to-click\");\nawait session.close();\n\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scheme in JavaScript\nDESCRIPTION: This code snippet shows how to set the color scheme meta tag in a viewport object using JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const viewport = {\n  colorScheme: 'dark',\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for development and testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Dynamic MDX Import - JavaScript\nDESCRIPTION: This snippet shows how to dynamically import MDX files in a Next.js App Router page component using JavaScript. It uses the `params` prop to determine which MDX file to load and then uses `import()` to dynamically load the MDX file. `generateStaticParams` is used for pre-rendering specific routes and `dynamicParams` is set to false to ensure that only routes defined in `generateStaticParams` are accessible.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { slug } = await params\n  const { default: Post } = await import(`@/content/${slug}.mdx`)\n\n  return <Post />\n}\n\nexport function generateStaticParams() {\n  return [{ slug: 'welcome' }, { slug: 'about' }]\n}\n\nexport const dynamicParams = false\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: These commands install the necessary Node.js dependencies and then start the Next.js development server. The server typically runs on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with urql example (pnpm)\nDESCRIPTION: This command utilizes pnpm to create a new Next.js application named 'with-urql-app' based on the 'with-urql' example.  The create-next-app package is used to initialize the project structure and install dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-urql with-urql-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-lingui example.  It bootstraps a project with Lingui i18n pre-configured. The command should be executed in the terminal. Make sure you have Node.js and npm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-lingui with-lingui-app\n```\n\n----------------------------------------\n\nTITLE: Complete Blog Post Example with getStaticPaths\nDESCRIPTION: Full example of implementing getStaticPaths and getStaticProps for a blog post page, including fetching posts from an API and generating static paths.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Post({ post }) {\n  // Render post...\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with TakeShape Example (npx)\nDESCRIPTION: This command uses npx to create a new Next.js application based on the cms-takeshape example. It bootstraps the project with the necessary files and dependencies to connect to TakeShape.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-takeshape cms-takeshape-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Realm-Web Example using yarn\nDESCRIPTION: This command uses `create next-app` with `yarn` to bootstrap a new Next.js application using the `with-realm-web` example. It creates a new directory named `with-realm-web-app` containing the initialized project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-realm-web with-realm-web-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Neo4j example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the `with-neo4j` example. It automates the setup process, pulling the necessary files and configurations to get started with a Next.js and Neo4j integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-neo4j with-neo4j-app\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Both Turbopack and Webpack\nDESCRIPTION: Command to run tests against both Turbopack and Webpack configurations using Jest's '--projects' flag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm test-dev test/e2e/app-dir/app/ --projects jest.config.*\n```\n\n----------------------------------------\n\nTITLE: Running Mocha tests with pnpm\nDESCRIPTION: This command executes the Mocha test suite using pnpm. It assumes a 'test' script is defined in the `package.json` file to run the tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Update Next.js and enable Turbopack\nDESCRIPTION: This command updates Next.js to the latest version and then runs the development server with Turbopack enabled. Turbopack is a bundler that can significantly improve local development performance. Requires npm and a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\nnpm run dev --turbopack\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamicIO in Next.js Config\nDESCRIPTION: Example configuration for enabling the dynamicIO experimental flag in a Next.js application's config file. This setting makes data fetching operations run at runtime by default unless explicitly cached.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/dynamicIO.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    dynamicIO: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Run Relay compiler (npm)\nDESCRIPTION: This command uses npm to execute the 'relay' script defined in the project's package.json. The purpose is to perform Relay ahead-of-time compilation, which is required after any edits to components that query data with Relay. It ensures optimal performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run relay\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Plausible using Yarn\nDESCRIPTION: This command initializes a new Next.js application with the Plausible analytics example. It uses `create next-app` via `yarn` to bootstrap the project with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-plausible with-plausible-app\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware for Authentication Routing\nDESCRIPTION: Implements middleware logic to handle authentication-based routing by checking auth tokens and redirecting users to appropriate dashboard views.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request: Request) {\n  const nextUrl = request.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (request.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', request.url))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Next.js _app.js\nDESCRIPTION: This JSX snippet demonstrates how to import a global CSS file (`styles.css`) within the `_app.js` file in a Next.js application. This ensures that the styles are applied globally across the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/css-global.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles.css'\\n\\nexport default function MyApp({ Component, pageProps }) {\\n  return <Component {...pageProps} />\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command bootstraps a new Next.js application using create-next-app with the `with-next-seo` example. It utilizes pnpm as the package manager, creating a project named `next-seo-app`. pnpm is a package manager that can be used as an alternative to npm and yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-next-seo next-seo-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with HTTP2 Example using npx\nDESCRIPTION: This command initializes a new Next.js application using the HTTP2 example template. Requires npx, part of the npm package, to execute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-http2 with-http2-app\n```\n\n----------------------------------------\n\nTITLE: Using getStaticProps for Data Fetching in Next.js\nDESCRIPTION: An implementation of a Blog page that uses getStaticProps to fetch data at build time. This function retrieves posts from an external API and passes them as props to the page component for pre-rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Blog({ posts }) {\n  // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts\n    }\n  }\n}\n\nexport default Blog\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-rbx-bulma-pro example. It initializes a project named with-rbx-bulma-pro-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinterest Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure Pinterest metadata using the `pinterest` property within the `metadata` export in a Next.js layout or page file. It enables or disables Pinterest Rich Pins.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_62\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  pinterest: {\n    richPin: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Document (_document.tsx) in Next.js Pages Router with Typescript\nDESCRIPTION: This TypeScript code defines a custom Document component in a Next.js application using the Pages Router. It allows you to control the initial HTML document returned from the server.  It's often used for adding elements to `<head>`, customizing `<html>` attributes, or adding server-side rendering logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing New Routing Hooks in Next.js App Directory - TSX\nDESCRIPTION: This TypeScript snippet demonstrates the usage of new routing hooks 'useRouter', 'usePathname', and 'useSearchParams' in Next.js client components. These hooks are imported from 'next/navigation' and are meant to replace older routing hooks in the 'app' directory. The hooks are intended for client components only and handle routing by interacting with the navigation system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\\n\\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\\n\\nexport default function ExampleClientComponent() {\\n  const router = useRouter()\\n  const pathname = usePathname()\\n  const searchParams = useSearchParams()\\n\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Async Configuration Setup\nDESCRIPTION: Demonstrates how to use an async function for Next.js configuration, available since Next.js 12.1.0.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nmodule.exports = async (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming React Component with add-missing-react-import Codemod\nDESCRIPTION: This example shows how the add-missing-react-import codemod transforms a React component by adding the missing React import. It ensures compatibility with the new React JSX transform.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example (Bash)\nDESCRIPTION: This snippet shows an example of how environment variables should be structured in the `.env.local` file. It shows the variable names and indicates that the actual values should be provided for each variable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAGILITY_CMS_GUID=...\nAGILITY_CMS_API_FETCH_KEY=...\nAGILITY_CMS_API_PREVIEW_KEY=...\nAGILITY_CMS_SECURITY_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Rendering Unauthorized Page - JSX\nDESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It is designed for JavaScript environments using Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Login from '@/app/components/Login'\n\nexport default function Unauthorized() {\n  return (\n    <main>\n      <h1>401 - Unauthorized</h1>\n      <p>Please log in to access this page.</p>\n      <Login />\n    </main>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server for Source Mapping Test\nDESCRIPTION: Command to start the Next.js development server for the source mapping test application. This command is used in both Server Components and Server Actions testing procedures.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/development/app-dir/source-mapping/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm next dev test/development/app-dir/source-mapping\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Zones using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named `with-zones-app` based on the `with-zones` example. It sets up the project with the appropriate structure and dependencies for a multi-zone environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-zones with-zones-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode (npm)\nDESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode using npm.  `npm install` installs dependencies and `npm run dev` starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example of Scenario Execution (JavaScript)\nDESCRIPTION: Demonstrates executing a scenario by defining properties and printing them using describe(). This illustrates iteration over property values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe } from \"devlow-bench\";\n\ndescribe(\n  \"my scenario\",\n  {\n    myProperty: [1, 2, 3],\n    myOtherProperty: true,\n  },\n  async ({ myProperty, myOtherProperty }) => {\n    console.log(myProperty, myOtherProperty);\n  }\n);\n\n// will print:\n// 1 true\n// 2 true\n// 3 true\n// 1 false\n// 2 false\n// 3 false\n\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: These commands are used to start the Next.js development server. The user can choose to use npm, yarn, pnpm, or bun as the package manager to run the dev script, which starts the server for local development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Params Access in Next.js Component (Correct Implementation)\nDESCRIPTION: Example showing the correct way to handle params and searchParams asynchronously in a Next.js component\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// This component ends up being the Page component even though it is defined outside of\n// page.js due to how it is reexported in page.js\nexport default async function ComponentThatWillBeExportedAsPage({ params, searchParams }) {\n  const { slug } = await params;\n  const { page } = await searchParams\n  return <RenderList slug={slug} page={page}>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Tracer Class in JavaScript\nDESCRIPTION: Implementation of NextTracerImpl class that provides tracing functionality for Next.js applications. It includes methods for creating spans, managing context, propagating trace data, and wrapping functions with trace spans.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { NextVanillaSpanAllowlist } from './constants';\nimport { c as api } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport { i as ROOT_CONTEXT } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport { j as closeSpanWithError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { LogSpanAllowList } from './constants';\nimport { k as rootSpanAttributesStore } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -13\n};\nimport { f as trace } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport { d as context } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport { e as propagation } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nconst isPromise = (p)=>{\n    return p !== null && typeof p === 'object' && typeof p.then === 'function';\n};\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId');\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nconst clientTraceDataSetter = {\n    set (carrier, key, value) {\n        carrier.push({\n            key,\n            value\n        });\n    }\n};\nclass NextTracerImpl {\n    getTracerInstance() {\n        return trace.getTracer('next.js', '0.0.1');\n    }\n    getContext() {\n        return context;\n    }\n    getTracePropagationData() {\n        const activeContext = context.active();\n        const entries = [];\n        propagation.inject(activeContext, entries, clientTraceDataSetter);\n        return entries;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        const { fn, options } = typeof fnOrOptions === 'function' ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        const spanName = options.spanName ?? type;\n        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {\n            return fn();\n        }\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            'next.span_name': spanName,\n            'next.span_type': type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {\n                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {\n                            start: startTime,\n                            end: performance.now()\n                        });\n                    }\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        return result.then((res)=>{\n                            span.end();\n                            return res;\n                        }).catch((err)=>{\n                            closeSpanWithError(span, err);\n                            throw err;\n                        }).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === 'function' && typeof fn === 'function') {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === 'function') {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\nexport { getTracer };\nexport { isPromise as l } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { rootSpanIdKey as m } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { lastSpanId as n } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { getSpanId as o } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { clientTraceDataSetter as p } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { NextTracerImpl as q } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { getTracer as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Phase 3 Diagram\nDESCRIPTION: This Mermaid diagram represents the data flow and dependencies in Phase 3 of the prerendering process. It visualizes the relationships between different items and exports involved in creating and managing the prerendering state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item5;\n    Item2;\n    Item6;\n    Item3;\n    Item7;\n    Item4;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item20[\"export createPrerenderState\"];\n    Item21;\n    Item21[\"export markCurrentScopeAsDynamic\"];\n    Item22;\n    Item22[\"export trackDynamicDataAccessed\"];\n    Item23;\n    Item23[\"export Postpone\"];\n    Item24;\n    Item24[\"export trackDynamicFetch\"];\n    Item25;\n    Item25[\"export usedDynamicAPIs\"];\n    Item26;\n    Item26[\"export formatDynamicAPIAccesses\"];\n    Item27;\n    Item27[\"export createPostponedAbortSignal\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item9 --> Item5;\n    Item9 --> Item4;\n    Item9 -.-> Item8;\n    Item9 -.-> Item7;\n    Item9 -.-> Item15;\n    Item9 -.-> Item6;\n    Item9 -.-> Item18;\n    Item20 --> Item10;\n    Item21 --> Item11;\n    Item22 --> Item12;\n    Item23 --> Item13;\n    Item24 --> Item14;\n    Item25 --> Item16;\n    Item26 --> Item17;\n    Item27 --> Item19;\n    Item11 --> Item8;\n    Item11 --> Item7;\n    Item11 --> Item15;\n    Item11 --> Item6;\n    Item12 --> Item8;\n    Item12 --> Item7;\n    Item12 --> Item15;\n    Item12 --> Item6;\n    Item13 --> Item15;\n    Item14 --> Item15;\n    Item15 --> Item18;\n    Item15 --> Item9;\n    Item15 --> Item5;\n    Item18 --> Item9;\n    Item19 --> Item18;\n    Item19 --> Item9;\n    Item19 --> Item5;\n```\n\n----------------------------------------\n\nTITLE: Phase 4 Diagram\nDESCRIPTION: This Mermaid diagram represents the data flow and dependencies in Phase 4 of the prerendering process. It visualizes the relationships between different items and exports involved in creating and managing the prerendering state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item5;\n    Item2;\n    Item6;\n    Item3;\n    Item7;\n    Item4;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item20[\"export createPrerenderState\"];\n    Item21;\n    Item21[\"export markCurrentScopeAsDynamic\"];\n    Item22;\n    Item22[\"export trackDynamicDataAccessed\"];\n    Item23;\n    Item23[\"export Postpone\"];\n    Item24;\n    Item24[\"export trackDynamicFetch\"];\n    Item25;\n    Item25[\"export usedDynamicAPIs\"];\n    Item26;\n    Item26[\"export formatDynamicAPIAccesses\"];\n    Item27;\n    Item27[\"export createPostponedAbortSignal\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item9 --> Item5;\n    Item9 --> Item4;\n    Item9 -.-> Item8;\n    Item9 -.-> Item7;\n    Item9 -.-> Item15;\n    Item9 -.-> Item6;\n    Item9 -.-> Item18;\n    Item20 --> Item10;\n    Item21 --> Item11;\n    Item22 --> Item12;\n    Item23 --> Item13;\n    Item24 --> Item14;\n    Item25 --> Item16;\n    Item26 --> Item17;\n    Item27 --> Item19;\n    Item11 --> Item8;\n    Item11 --> Item7;\n    Item11 --> Item15;\n    Item11 --> Item6;\n    Item12 --> Item8;\n    Item12 --> Item7;\n    Item12 --> Item15;\n    Item12 --> Item6;\n    Item13 --> Item15;\n    Item14 --> Item15;\n    Item15 --> Item18;\n    Item15 --> Item9;\n    Item15 --> Item5;\n    Item18 --> Item9;\n    Item19 --> Item18;\n    Item19 --> Item9;\n    Item19 --> Item5;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Module Dependencies using Mermaid\nDESCRIPTION: A mermaid diagram that visualizes the dependency relationships between different module items in the codebase, showing imports, exports, and their connections.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, ImportOfModule)]\"];\n    N1[\"Items: [ItemId(0, ImportBinding(0))]\"];\n    N2[\"Items: [ItemId(1, ImportOfModule)]\"];\n    N3[\"Items: [ItemId(1, ImportBinding(0))]\"];\n    N4[\"Items: [ItemId(2, ImportOfModule)]\"];\n    N5[\"Items: [ItemId(2, ImportBinding(0))]\"];\n    N6[\"Items: [ItemId(3, Normal)]\"];\n    N7[\"Items: [ItemId(4, Normal), ItemId(5, VarDeclarator(0)), ItemId(6, VarDeclarator(0))]\"];\n    N8[\"Items: [ItemId(7, Normal)]\"];\n    N9[\"Items: [ItemId(8, VarDeclarator(0)), ItemId(9, Normal), ItemId(10, Normal), ItemId(11, Normal), ItemId(12, Normal), ItemId(13, Normal), ItemId(14, Normal), ItemId(15, Normal), ItemId(16, Normal), ItemId(17, Normal), ItemId(18, Normal), ItemId(19, Normal), ItemId(20, Normal), ItemId(21, Normal), ItemId(22, Normal), ItemId(23, Normal), ItemId(24, Normal)]\"];\n    N10[\"Items: [ItemId(Export((&quot;IPC&quot;, #2), &quot;IPC&quot;))]\"];\n    N11[\"Items: [ItemId(Export((&quot;structuredError&quot;, #2), &quot;structuredError&quot;))]\"];\n    N2 --> N0;\n    N4 --> N2;\n    N9 -.-> N5;\n    N9 -.-> N3;\n    N11 --> N6;\n    N10 --> N7;\n    N6 --> N5;\n    N3 --> N2;\n    N5 --> N4;\n    N7 -.-> N5;\n    N7 -.-> N3;\n    N7 --> N1;\n    N7 --> N6;\n    N8 --> N7;\n    N8 -.-> N5;\n    N8 -.-> N3;\n    N8 -.-> N1;\n    N8 -.-> N6;\n    N9 -.-> N1;\n    N9 -.-> N6;\n    N7 --> N4;\n    N10 --> N8;\n    N9 --> N8;\n    N6 --> N3;\n    N1 --> N0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Export in Next.js\nDESCRIPTION: This snippet configures Next.js to generate a static export of the application. By setting `output: 'export'` in `next.config.js`, Next.js will create an `out` directory containing the HTML, CSS, and JavaScript assets for the application after running `next build`. Note that server features are not supported with static exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  output: 'export',\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with WindiCSS Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the WindiCSS example. It initializes a project named 'with-windicss-app' based on the 'with-windicss' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-windicss with-windicss-app\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Next.js Middleware (TS)\nDESCRIPTION: This snippet shows how to set both request and response headers within a Next.js middleware function. It demonstrates cloning request headers, setting new headers, and applying these headers using `NextResponse.next`. It also covers setting response headers directly on the `NextResponse` object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Clone the request headers and set a new header `x-hello-from-middleware1`\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n\n  // You can also set request headers in NextResponse.next\n  const response = NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  })\n\n  // Set a new response header `x-hello-from-middleware2`\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App using create-next-app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application named 'custom-server-app' based on the 'custom-server' example. It bootstraps the project with the necessary files and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example custom-server custom-server-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Swc Minification in Next.js Compiler\nDESCRIPTION: This snippet highlights the default minification support in Next.js using swc since version 13. It emphasizes the performance improvement over Terser and notes the inability to customize minification from version 15 onward.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with cxs using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the with-cxs example. It utilizes pnpm to execute the create next-app package and sets up the project with the necessary dependencies and configurations for using cxs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-cxs with-cxs-app\n```\n\n----------------------------------------\n\nTITLE: Understanding Next.js Icon HTML Output\nDESCRIPTION: Shows the HTML head output generated by Next.js when using the icon file convention. The icon link element includes dynamically generated attributes based on the image properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"icon\"\n  href=\"/icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Apollo Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application pre-configured with the Apollo Server and Client example. It bootstraps the project with the necessary dependencies and configuration files. The new application will be located in the directory named 'api-routes-apollo-server-and-client-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app\n```\n\n----------------------------------------\n\nTITLE: Using Video Skeleton as Suspense Fallback - JSX\nDESCRIPTION: This code demonstrates using a video skeleton component as the fallback UI within React Suspense, enhancing the loading experience.  It imports both `VideoComponent` and `VideoSkeleton` components and renders the `VideoSkeleton` while the `VideoComponent` is loading. This provides a more visually appealing and informative loading state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\nimport VideoSkeleton from '../ui/VideoSkeleton.jsx'\n\nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<VideoSkeleton />}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Behavior in Next.js Link Component\nDESCRIPTION: Demonstrates how to disable automatic scrolling to the top when navigating using the Next.js Link component. Uses the scroll={false} prop to maintain the current scroll position.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/#hashid\" scroll={false}>\n      Disables scrolling to the top\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a static asset in Next.js (app/page.js) with JavaScript\nDESCRIPTION: This JavaScript code shows how to import the Image component from Next.js and use it to display a static image from the public directory. The `src` attribute points to the image file in the public directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js CLI Usage Example in Bash\nDESCRIPTION: Shows the basic command syntax for using the Next.js CLI. This pattern is used to run any Next.js command with optional parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx next [command] [options]\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in Next.js Pages Directory - JSX\nDESCRIPTION: This JavaScript snippet depicts retrieving request-based data in a Next.js 'pages' directory using the 'getServerSideProps' function. This example demonstrates how to access request headers and cookies to customize data retrieval based on user requests, enhancing personalization capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\\n\\nexport async function getServerSideProps({ req, query }) {\\n  const authHeader = req.getHeaders()['authorization'];\\n  const theme = req.cookies['theme'];\\n\\n  return { props: { ... }}\\n}\\n\\nexport default function Page(props) {\\n  return ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Components HMR Cache in TypeScript\nDESCRIPTION: Configuration example showing how to disable the server components HMR cache using TypeScript in next.config.ts. The serverComponentsHmrCache option is set under the experimental configuration object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverComponentsHmrCache.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    serverComponentsHmrCache: false, // defaults to true\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command bootstraps a new Next.js application using create-next-app with the `with-next-seo` example. It utilizes npm as the package manager, creating a project named `next-seo-app`. The command downloads the necessary dependencies and sets up the basic project structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-next-seo next-seo-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Cloudflare Turnstile Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the Cloudflare Turnstile example. It initializes a project named \"cloudflare-turnstile-app\" using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cloudflare-turnstile cloudflare-turnstile-app\n```\n\n----------------------------------------\n\nTITLE: Specify Runtime in instrumentation.js\nDESCRIPTION: Dynamically loads modules based on the Next.js runtime environment.  It uses `process.env.NEXT_RUNTIME` to determine whether the code is running on the Edge or Node.js runtime and then imports the appropriate module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function register() {\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    return require('./register.edge')\n  } else {\n    return require('./register.node')\n  }\n}\n\nexport function onRequestError() {\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    return require('./on-request-error.edge')\n  } else {\n    return require('./on-request-error.node')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using npm\nDESCRIPTION: This command initializes a new Next.js application named `api-routes-rest-app` using the `api-routes-rest` example.  It utilizes the `create-next-app` tool via `npx` and downloads the necessary files to create a basic project structure with example code for API routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app --example api-routes-rest api-routes-rest-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with cms-payload example using npx\nDESCRIPTION: This command uses `npx` to create a new Next.js application using the `cms-payload` example. It creates a directory named `cms-payload-app` for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-payload cms-payload-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with create-next-app (npm)\nDESCRIPTION: This command initializes a new Next.js project using the `create-next-app` tool and the `with-mobx-state-tree` example. It uses npm to create a project named `with-mobx-state-tree-app` based on the provided example repository. This command sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mobx-state-tree with-mobx-state-tree-app\n```\n\n----------------------------------------\n\nTITLE: Setting Quality Property on Next.js Image Component\nDESCRIPTION: Example of setting the quality property on a Next.js Image component. The quality property accepts a number from 1 to 100 and determines the quality of the optimized image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nquality={75} // {number 1-100}\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Stack server using Docker Compose\nDESCRIPTION: This command starts the Redis Stack server in detached mode using Docker Compose. It's essential for setting up the Redis environment required for the Next.js cache integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Catch-all API Routes in Next.js\nDESCRIPTION: Shows how to implement catch-all API routes that can handle multiple dynamic segments in the URL path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { slug } = req.query\n  res.end(`Post: ${slug.join(', ')}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const { slug } = req.query\n  res.end(`Post: ${slug.join(', ')}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Using after with Request APIs in Route Handlers\nDESCRIPTION: Demonstrates logging user activity after a POST request using request APIs like `headers` and `cookies` within the `after` function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { after } from 'next/server'\nimport { cookies, headers } from 'next/headers'\nimport { logUserAction } from '@/app/utils'\n\nexport async function POST(request: Request) {\n  // Perform mutation\n  // ...\n\n  // Log user activity for analytics\n  after(async () => {\n    const userAgent = (await headers().get('user-agent')) || 'unknown'\n    const sessionCookie =\n      (await cookies().get('session-id'))?.value || 'anonymous'\n\n    logUserAction({ sessionCookie, userAgent })\n  })\n\n  return new Response(JSON.stringify({ status: 'success' }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' },\n  })\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { after } from 'next/server'\nimport { cookies, headers } from 'next/headers'\nimport { logUserAction } from '@/app/utils'\n\nexport async function POST(request) {\n  // Perform mutation\n  // ...\n\n  // Log user activity for analytics\n  after(async () => {\n    const userAgent = (await headers().get('user-agent')) || 'unknown'\n    const sessionCookie =\n      (await cookies().get('session-id'))?.value || 'anonymous'\n\n    logUserAction({ sessionCookie, userAgent })\n  })\n\n  return new Response(JSON.stringify({ status: 'success' }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Configuration\nDESCRIPTION: Command to upgrade ESLint configuration for Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Dashboard Layout in Pages Directory\nDESCRIPTION: Example of dashboard layout implementation using the getLayout pattern in the pages directory structure\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return (\n    <div>\n      <h2>My Dashboard</h2>\n      {children}\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport DashboardLayout from '../components/DashboardLayout'\n\nexport default function Page() {\n  return <p>My Page</p>\n}\n\nPage.getLayout = function getLayout(page) {\n  return <DashboardLayout>{page}</DashboardLayout>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts in package.json\nDESCRIPTION: This code snippet demonstrates how to update the scripts in the `package.json` file to use Next.js commands. These commands are used for development, building, and starting the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook UI Components\nDESCRIPTION: This part of the document specifies the structure for configuring various aspects of Storybook. It describes the rendering of images and text with associated headings and links to documentation, facilitating component development for various frameworks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"sb-container\">\n  <div className='sb-section-title'>\n    # Configure your project\n    \n    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.\n  </div>\n  <div className=\"sb-section\">\n    <div className=\"sb-section-item\">\n      <Image\n        src={Styling}\n        alt=\"A wall of logos representing different styling technologies\"\n        width={0}\n        height={0}\n        style={{ width: '100%', height: 'auto' }}\n      />\n      <h4 className=\"sb-section-item-heading\">Add styling and CSS</h4>\n      <p className=\"sb-section-item-paragraph\">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>\n      <a\n        href=\"https://storybook.js.org/docs/configure/styling-and-css\"\n        target=\"_blank\" rel=\"noreferrer\"\n      >Learn more<RightArrow /></a>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating React Packages to Latest Version using Yarn\nDESCRIPTION: This command updates the React and React DOM packages to the latest versions using Yarn.  It performs the same function as the npm command, utilizing the Yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Kea example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-kea' example. It requires Node.js and Yarn to be installed. The new application will be created in a directory named 'with-kea-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-kea with-kea-app\n```\n\n----------------------------------------\n\nTITLE: Configuring importSource for JSX in Next.js\nDESCRIPTION: This snippet specifies the automatic detection of the jsxImportSource in jsconfig.json or tsconfig.json for libraries like Theme UI, enabling them to be utilized seamlessly within the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"theme-ui\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in getStaticPaths (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to handle redirects within the `getStaticPaths` function in a Next.js page. It fetches data, and if the data is not available (e.g., the API returns an error), it returns a redirect object to navigate the user to a different page (e.g., a 404 page). The `permanent` property specifies whether the redirect is permanent or temporary, and `destination` specifies the target URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-redirect-gssp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticPaths() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n\n  if (!repo) {\n    return {\n      redirect: {\n        permanent: false, // or true\n        destination: '/404',\n      },\n    }\n  }\n\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests using Yarn\nDESCRIPTION: This snippet shows the command to execute the Jest tests in the Next.js application using Yarn. This command is essential to verify that the tests set up with Jest are functioning as expected.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Redis example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'roadmap' based on the 'with-redis' example. This bootstraps the project with the necessary dependencies and configuration for using Redis with Upstash.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-redis roadmap\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared MDX Layout (TSX - Pages Router)\nDESCRIPTION: This TypeScript code defines a shared layout for MDX pages within a Next.js application using the Pages Router.  The `MdxLayout` component accepts `children` as a prop and renders them within a `div` with styling. This ensures a consistent look and feel across multiple MDX pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Viewport Object in JavaScript\nDESCRIPTION: This snippet shows how to export a static viewport object in a JavaScript file for use in Next.js applications. The exported object specifies the theme color.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const viewport = {\n  themeColor: 'black',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Package Managers\nDESCRIPTION: The snippet demonstrates how to start a Next.js development server using npm, yarn, pnpm, or bun. You need a Node.js environment and a properly initialized Next.js project using create-next-app. This command launches the development server on http://localhost:3000 where you can preview your application. The server supports hot-reloading, meaning it will automatically update changes made to code files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Logging in next.config.js\nDESCRIPTION: This snippet configures Next.js to log the full URL of fetch requests during development mode. Dependencies include Next.js in a development environment. Set `logging.fetches.fullUrl` to `true` to enable this feature.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Parameters in TypeScript\nDESCRIPTION: This TypeScript snippet defines viewport parameters such as width, initial scale, and maximum scale in a viewport object for Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported but less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Tracing Implementation - JavaScript\nDESCRIPTION: Implements a tracing system as a class `NextTracerImpl` for managing spans and context propagation within a Next.js application. It provides methods for starting, querying, and altering spans and contexts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass NextTracerImpl {\n    getTracerInstance() {\n        return trace.getTracer('next.js', '0.0.1');\n    }\n    getContext() {\n        return context;\n    }\n    getTracePropagationData() {\n        const activeContext = context.active();\n        const entries = [];\n        propagation.inject(activeContext, entries, clientTraceDataSetter);\n        return entries;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        const { fn, options } = typeof fnOrOptions === 'function' ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        const spanName = options.spanName ?? type;\n        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {\n            return fn();\n        }\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            'next.span_name': spanName,\n            'next.span_type': type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {\n                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {\n                            start: startTime,\n                            end: performance.now()\n                        });\n                    }\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        return result.then((res)=>{\n                            span.end();\n                            return res;\n                        }).catch((err)=>{\n                            closeSpanWithError(span, err);\n                            throw err;\n                        }).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === 'function' && typeof fn === 'function') {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === 'function') {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Stable Version\nDESCRIPTION: Command to install the stable release of Next.js, which is the default version used by most Next.js users.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next\n```\n\n----------------------------------------\n\nTITLE: Vitest Unit Test (TypeScript)\nDESCRIPTION: This TypeScript snippet creates a Vitest unit test for the `Page` component. It imports `expect` and `test` from Vitest, and `render` and `screen` from `@testing-library/react`. It renders the `Page` component and asserts that a heading with level 1 and name 'Home' exists.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Ghost Example (yarn)\nDESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a new Next.js application using the Ghost CMS example. It sets up a new project directory `cms-ghost-app` with pre-configured files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-ghost cms-ghost-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (Yarn)\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application using the with-shallow-routing example. The create-next-app tool is used to initialize the project structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-shallow-routing with-shallow-routing-app\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader Function - Next.js\nDESCRIPTION: Defines a custom loader function for the Next.js legacy Image component. This function takes the image source, width, and quality as input and returns a URL string. It allows for dynamic image URL generation based on these parameters, enabling the use of external image optimization services or custom image serving logic. Requires the 'next/legacy/image' import.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/legacy/image'\n\nconst myLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nconst MyImage = (props) => {\n  return (\n    <Image\n      loader={myLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Dynamic Route Implementation with Suspense\nDESCRIPTION: Corrected implementation that uses Suspense boundary to properly handle Request data access in generateViewport.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { cookies } from 'next/headers'\n\nexport async function generateViewport() {\n  const cookieJar = await cookies()\n  return {\n    themeColor: cookieJar.get('theme-color'),\n  }\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <Suspense>\n      <html>\n        <body>{children}</body>\n      </html>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Sass Variables from CSS Modules\nDESCRIPTION: This Sass code defines a `$primary-color` variable and exports it as a CSS Module variable named `primaryColor`. This allows the variable to be imported and used in JavaScript/JSX files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$primary-color: #64ff00;\n\n:export {\n  primaryColor: $primary-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Object with JSDoc in Next.js (JS)\nDESCRIPTION: This example shows how to define a static metadata object in a Next.js layout or page using JavaScript and JSDoc for type hinting. The JSDoc comment `@type {import(\"next\").Metadata}` provides type safety to the metadata object, similar to TypeScript's type annotations. This is useful for JavaScript projects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_75\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import(\"next\").Metadata} */\nexport const metadata = {\n  title: 'Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses `create-next-app` with pnpm to bootstrap a Next.js application using the `with-cypress` example.  It initializes a new project named `with-cypress-app` in the current directory. It requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-cypress with-cypress-app\n```\n\n----------------------------------------\n\nTITLE: Migrating from Multiple Module Loading to Single Module Loading in next/dynamic\nDESCRIPTION: Example of migrating from loading multiple modules at once to individual dynamic imports using next/dynamic in Next.js 9.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst Hello1 = dynamic(() => import('../components/hello1'))\nconst Hello2 = dynamic(() => import('../components/hello2'))\n\nfunction HelloBundle({ title }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  )\n}\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n\n----------------------------------------\n\nTITLE: Identifying React Element Types\nDESCRIPTION: Demonstrates how to check if a value is a React element using isElement and how to verify its type using typeOf against the ReactIs.Element constant.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport * as ReactIs from 'react-is';\n\nReactIs.isElement(<div />); // true\nReactIs.typeOf(<div />) === ReactIs.Element; // true\n```\n\n----------------------------------------\n\nTITLE: Running Storybook\nDESCRIPTION: These commands start the Storybook development server for the Next.js application.  They use `npm`, `yarn`, or `pnpm` to execute the `storybook` script defined in the `package.json` file.  The Storybook UI will be accessible in a web browser at a specified address.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n# or\nyarn storybook\n# or\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: RootLayout Component with Metadata (Optimized) - TSX\nDESCRIPTION: This code defines the optimized RootLayout component after moving the static assets like favicon into the `app` directory. The `<link>` tag for the favicon is removed. The component receives `children` as a prop and renders them within the HTML structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running the linter\nDESCRIPTION: This command executes all configured linters (ESLint, Prettier, alex) on the Next.js codebase. It checks the code and documentation for style, formatting, and inclusive language violations, reporting any found issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"pnpm lint\"\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the specified example. It clones the 'api-routes-apollo-server-and-client-auth' example into a directory named 'api-routes-apollo-server-and-client-auth-app'. It requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Segment Analytics using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-segment-analytics example.  It bootstraps the project with the necessary files and configurations for Segment Analytics integration. The application will be created with the name 'with-segment-analytics-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-segment-analytics with-segment-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named 'with-apollo-and-redux-app' based on the 'with-apollo-and-redux' example. It leverages Yarn's create command to initialize the project with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-apollo-and-redux with-apollo-and-redux-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with TinaCMS example using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the `cms-tina` example. It employs `pnpm create next-app` to set up the project, including the required files and dependencies for TinaCMS integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm create next-app --example cms-tina cms-tina-app\"\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Commands with Target Configuration\nDESCRIPTION: Demonstrates the correct usage of Next.js commands based on the build target. For serverless builds, 'next start' won't work as it requires server-side handling. Use 'next dev' for development or an appropriate handler for serverless production builds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-start-serverless.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnext start\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Development Origins in Next.js\nDESCRIPTION: Demonstrates how to configure additional origins in the `next.config.js` file using the `allowedDevOrigins` option. This allows requests from specified origins during development mode, supporting both exact and wildcard domain matching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/allowedDevOrigins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  allowedDevOrigins: ['local-origin.dev', '*.local-origin.dev'],\n}\n```\n\n----------------------------------------\n\nTITLE: Opt-out Packages from Bundling (App Router)\nDESCRIPTION: Configures the `serverExternalPackages` option in `next.config.js` to prevent specific packages from being automatically bundled in Server Components and Route Handlers. This applies to the App Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: ['package-name'],\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Alias for Font Definitions in tsconfig.json\nDESCRIPTION: JSON configuration for setting up a path alias to make importing font definitions easier across the application. This creates an @/fonts shortcut to the fonts file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/fonts\": [\"./styles/fonts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Fonts with Tailwind CSS in Next.js App Router (TypeScript)\nDESCRIPTION: Demonstrates how to use Google Fonts with Tailwind CSS in a Next.js application using the App Router with TypeScript. The example shows setting up CSS variables for font families that can be used in Tailwind configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html\n      lang=\"en\"\n      className={`${inter.variable} ${roboto_mono.variable} antialiased`}\n    >\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Google Analytics events (Pages Router - JSX)\nDESCRIPTION: This code snippet demonstrates how to send events to Google Analytics using the `sendGAEvent` function from `@next/third-parties/google` within a Pages Router component. It defines a button that, when clicked, dispatches a custom event named 'buttonClicked' with the value 'xyz'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sendGAEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nextScriptWorkers\nDESCRIPTION: This code configures the `nextScriptWorkers` experimental flag in `next.config.js` to enable the `worker` strategy for the `next/script` component. This option enables offloading scripts to a web worker using Partytown. Requires Node.js environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image in Next.js Markdown\nDESCRIPTION: This snippet demonstrates embedding an image within a Next.js markdown file using the `<Image>` component. The `src` attribute specifies the image path, `alt` provides alternative text, and `width` and `height` define the image dimensions. The image is assumed to be in the public directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"/test.jpg\" alt=\"Next.js Logo\" width={180} height={37} />\n```\n\n----------------------------------------\n\nTITLE: Creating gridAutoFlow Styling Function\nDESCRIPTION: Defines the gridAutoFlow styling function using the style utility to handle the 'gridAutoFlow' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 21\n};\nconst gridAutoFlow = style({\n    prop: 'gridAutoFlow'\n});\nexport { gridAutoFlow as l } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with remove-console Example (npm)\nDESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `remove-console` example. The new application will be named `remove-console-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example remove-console remove-console-app\n```\n\n----------------------------------------\n\nTITLE: User Provider with Context (TypeScript)\nDESCRIPTION: This code implements a React Context Provider for managing user data in a Next.js application using TypeScript.  It creates a `UserContext` and a custom hook `useUser` for accessing the context. The `UserProvider` component accepts a `userPromise` prop (a Promise of user data) and makes it available to its children through the context. This pattern enables easier access to the user data from Client Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { createContext, useContext, ReactNode } from 'react';\n\ntype User = any;\ntype UserContextType = {\n  userPromise: Promise<User | null>;\n};\n\nconst UserContext = createContext<UserContextType | null>(null);\n\nexport function useUser(): UserContextType {\n  let context = useContext(UserContext);\n  if (context === null) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n}\n\nexport function UserProvider({\n  children,\n  userPromise\n}: {\n  children: ReactNode;\n  userPromise: Promise<User | null>;\n}) {\n  return (\n    <UserContext.Provider value={{ userPromise }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Asynchronous Scripts with HTML Attributes\nDESCRIPTION: This snippet shows how to load third-party scripts asynchronously using HTML script tags with 'async' or 'defer' attributes. These attributes allow the browser to continue parsing the HTML while the script is being downloaded.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-sync-scripts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://third-party-script.js\" async />\n<script src=\"https://third-party-script.js\" defer />\n```\n\n----------------------------------------\n\nTITLE: Building and Starting the Next.js App in Production\nDESCRIPTION: These commands build the Next.js application for production and then starts the server. During production, the application uses translated message files located in the `lang/*.json` directory. This ensures that the correct translations are used based on the user's browser language preferences.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Next.js ESM Configuration Setup\nDESCRIPTION: Demonstrates how to configure Next.js using ECMAScript modules with .mjs extension.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  /* config options here */\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Exporting Next.js Page Route Functions with TurboPack Assertions\nDESCRIPTION: Declaration of exports for Next.js page functions with TurboPack part assertions. This code exports various Next.js data fetching methods and utility functions, each with its corresponding TurboPack part declaration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport { routeModule } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export routeModule\"\n};\nexport { default } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export default\"\n};\nexport { config } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export config\"\n};\nexport { getServerSideProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getServerSideProps\"\n};\nexport { getStaticPaths } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getStaticPaths\"\n};\nexport { getStaticProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getStaticProps\"\n};\nexport { reportWebVitals } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export reportWebVitals\"\n};\nexport { unstable_getServerProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getServerProps\"\n};\nexport { unstable_getServerSideProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getServerSideProps\"\n};\nexport { unstable_getStaticParams } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getStaticParams\"\n};\nexport { unstable_getStaticPaths } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getStaticPaths\"\n};\nexport { unstable_getStaticProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getStaticProps\"\n};\n```\n\n----------------------------------------\n\nTITLE: Create PlanetScale Password\nDESCRIPTION: Creates a new password for accessing the PlanetScale database.  Replace `<DATABASE_NAME>`, `<BRANCH_NAME>`, and `<PASSWORD_NAME>` with the appropriate values. The password will only be shown once, so store it securely.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npscale password create <DATABASE_NAME> <BRANCH_NAME> <PASSWORD_NAME>\n```\n\n----------------------------------------\n\nTITLE: Fetching data with getStaticProps (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use `getStaticProps` in a Next.js page component to fetch data from an external API (GitHub) during build time. The fetched data, specifically the repository information, is passed as props to the page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Using worker Strategy (Pages Router, JSX)\nDESCRIPTION: This code snippet demonstrates using the `worker` strategy with the `Script` component in a Next.js application using the Pages Router. It offloads the script to a web worker to free up the main thread. Note: This strategy is experimental and requires enabling `nextScriptWorkers` in `next.config.js`. It only currently works in the `pages/` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Redis cache using Redis CLI\nDESCRIPTION: These commands are used to clear the Redis cache. The first command executes Redis CLI inside the `redis-stack` container, and the second command `flushall` clears all data from all Redis databases.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it redis-stack redis-cli\n127.0.0.1:6379> flushall\nOK\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Form in Next.js TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a search form in a Next.js page using TypeScript. The form navigates to a search results page by providing the path '/search' as the action attribute. Dependencies include the 'next/form' and the input element captures the user's search query. The form encodes the data into the URL as search params when submitted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Form from 'next/form'\n\nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Styletron using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the Styletron example.  It initializes a project named 'with-styletron-app' using the 'with-styletron' example template. Requires Node.js and pnpm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-styletron with-styletron-app\n```\n\n----------------------------------------\n\nTITLE: Title Template Object (TSX)\nDESCRIPTION: This snippet shows how to define a title using a template object in TypeScript Next.js application.  It allows for specifying a default title, a template for child segments, and an absolute title.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '...', // Changed from ... to '...' to adhere to valid JSON. Should be a string.\n    default: '...', // Changed from ... to '...' to adhere to valid JSON. Should be a string.\n    absolute: '...', // Changed from ... to '...' to adhere to valid JSON. Should be a string.\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Rematch using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-rematch' example. It sets up a project named 'with-rematch-app' in the current directory. This assumes Yarn is installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-rematch with-rematch-app\n```\n\n----------------------------------------\n\nTITLE: Copying and Renaming Environment File\nDESCRIPTION: This command copies the `.env.local.example` to `.env.local`, setting up the environment file required for the project configuration. The `.env.local` file is ignored by Git.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with dynamic-import example (npm)\nDESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `with-dynamic-import` example. It creates a directory named `with-dynamic-import-app` containing the new project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-dynamic-import with-dynamic-import-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js DynamicIO in TypeScript\nDESCRIPTION: Configures Next.js to enable the dynamicIO feature necessary for using the cacheTag function. This configuration is required to use caching features in a Next.js application. It is defined in the next.config.ts file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    dynamicIO: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Building Native and WASM Bindings\nDESCRIPTION: Commands for building native binary and WebAssembly bindings to integrate with Next.js\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm build-native\n\npnpm build-wasm\n```\n\n----------------------------------------\n\nTITLE: Enabling 'use cache' in Next.js Configuration (JavaScript)\nDESCRIPTION: Shows how to enable the experimental 'use cache' feature by adding the useCache option to the next.config.js file. This configuration is necessary before implementing 'use cache' directives in your code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    useCache: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Next.js About Component (pages directory)\nDESCRIPTION: Defines a basic Next.js about component using the `pages` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/` (home) page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ImageResponse Imports in Next.js\nDESCRIPTION: Codemod to move imports for ImageResponse from 'next/server' to 'next/og' for Dynamic OG Image Generation in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { ImageResponse } from 'next/server'\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n```\n\n----------------------------------------\n\nTITLE: Handling Fetch Requests with Caching Options in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the use of caching options within `fetch` requests in a RootLayout component. The example shows how requests can be optionally cached using `cache` options, optimizing data fetching strategies based on application needs and Next.js configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport default async function RootLayout() {\\n  const a = await fetch('https://...') // Not Cached\\n  const b = await fetch('https://...', { cache: 'force-cache' }) // Cached\\n\\n  // ...\\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Since this is the root layout, all fetch requests in the app\\n// that don't set their own cache option will be cached.\\nexport const fetchCache = 'default-cache'\\n\\nexport default async function RootLayout() {\\n  const a = await fetch('https://...') // Cached\\n  const b = await fetch('https://...', { cache: 'no-store' }) // Not cached\\n\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Demand Entries in Next.js\nDESCRIPTION: Configuration options for controlling how Next.js manages page entries in development mode. Sets the maximum inactive age for buffered pages and the number of pages to keep in memory simultaneously.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/onDemandEntries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Yarn\nDESCRIPTION: This command initializes a new Next.js application using the `create next-app` tool with the `with-service-worker` example. It uses Yarn as the package manager. The `with-service-worker-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-service-worker with-service-worker-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Maps with onReady in Next.js (Pages Router) - JSX\nDESCRIPTION: This code demonstrates how to initialize a Google Maps embed using the `onReady` property of the `next/script` component within a Next.js application using the Pages Router. It uses a ref to target a div element for the map and re-instantiates the map on every component mount. The `onReady` function is called after the script has loaded.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Turbopack using npm\nDESCRIPTION: Command to create a new Next.js application with Turbopack using npm's create-next-app utility. This bootstraps a project based on the with-turbopack example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-turbopack with-turbopack-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Panda CSS using npx\nDESCRIPTION: This command uses npx to execute create-next-app, setting up a new Next.js project with the panda-css example. It bootstraps the application with the necessary configurations for Panda CSS integration and creates a project named 'panda-css-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example panda-css panda-css-app\n```\n\n----------------------------------------\n\nTITLE: Creating a home page (index.tsx) in Next.js Pages Router with Typescript\nDESCRIPTION: This TypeScript code defines a simple home page component for a Next.js application using the Pages Router. It renders a heading that says \"Hello, Next.js!\". This component is placed inside the `pages` directory and acts as the root route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MDX pages using Yarn\nDESCRIPTION: This command uses `create-next-app` with Yarn to initialize a new Next.js project with the `mdx-pages` example.  It creates a directory named `mdx-pages-app` for the new project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example mdx-pages mdx-pages-app\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Description Meta Tag\nDESCRIPTION: This code snippet shows the HTML output generated from the description metadata. The meta tag includes the name \"description\" and the content set in the metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"The React Framework for the Web\" />\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with getInitialProps in JavaScript\nDESCRIPTION: This code snippet showcases how to use `getInitialProps` within a Next.js page component written in JavaScript to fetch data from an API and pass it as props to the component. Similar to the TypeScript example, it fetches the number of stars for the Next.js repository from GitHub.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-initial-props.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage.getInitialProps = async (ctx) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default function Page({ stars }) {\n  return stars\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Font Styles with CSS Variables in Module CSS\nDESCRIPTION: CSS module that defines a text class using the font-family CSS variable along with additional font properties. This approach allows for external styling of fonts loaded with next/font.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  font-family: var(--font-inter);\n  font-weight: 200;\n  font-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 15 Using Codemod\nDESCRIPTION: Command to automatically upgrade to the latest Next.js version using the upgrade codemod.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod@canary upgrade latest\n```\n\n----------------------------------------\n\nTITLE: Import Button with baseUrl - TypeScript\nDESCRIPTION: This snippet shows an absolute import using the `baseUrl` option.  This eliminates the need for long relative paths, resulting in cleaner and more maintainable code. This assumes baseUrl is set to the project root.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Button from \"components/button\";\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Xata using npm\nDESCRIPTION: This command uses npm to create a new Next.js application pre-configured to work with Xata. It bootstraps the project using the `with-xata` example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app --example with-xata with-xata-app\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering Pages with getStaticProps in Next.js\nDESCRIPTION: The getStaticProps function is implemented to pre-render a page at build time by fetching data from an external API and passing it as props to the page component. This ensures the page is populated with data during the build process, enhancing performance and SEO.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\n\nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom React Component in MDX - Next.js - JavaScript\nDESCRIPTION: This snippet shows how to embed a React component within an MDX file. The component used here is a simple greeting component which takes a 'name' prop and renders a welcome message. It requires 'next-mdx-remote' for proper rendering of MDX content within a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/app/posts/example-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Greet name=\"next-mdx-remote\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Images in Next.js - JavaScript\nDESCRIPTION: This code snippet illustrates the correct structure for defining the `images` configuration in the `next.config.js` file. It includes various parameters to optimize image handling, such as defining acceptable image sizes, formats, and cache settings. Ensure to adhere to the specified limits for each array to avoid configuration errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-images-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  images: {\n    // limit of 25 deviceSizes values\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n    // limit of 25 imageSizes values\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n    // limit of 50 domains values (deprecated)\n    domains: [],\n    // path prefix for Image Optimization API, useful with `loader`\n    path: '/_next/image',\n    // loader can be 'default', 'imgix', 'cloudinary', 'akamai', or 'custom'\n    loader: 'default',\n    // file with `export default function loader({src, width, quality})`\n    loaderFile: '',\n    // disable static imports for image files\n    disableStaticImages: false,\n    // minimumCacheTTL is in seconds, must be integer 0 or more\n    minimumCacheTTL: 60,\n    // ordered list of acceptable optimized image formats (mime types)\n    formats: ['image/webp'],\n    // enable dangerous use of SVG images\n    dangerouslyAllowSVG: false,\n    // set the Content-Security-Policy header\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n    // sets the Content-Disposition header ('inline' or 'attachment')\n    contentDispositionType: 'attachment',\n    // limit of 25 objects\n    localPatterns: [],\n    // limit of 50 objects\n    remotePatterns: [],\n    // limit of 20 integers\n    qualities: [25, 50, 75],\n    // when true, every image will be unoptimized\n    unoptimized: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridAutoFlow Function\nDESCRIPTION: Re-exports the gridAutoFlow styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { l as gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nexport { gridAutoFlow };\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Turbopack loaders example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the 'with-turbopack-loaders' example.  It sets up a new project with the necessary configurations for using Turbopack loaders.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-turbopack-loaders with-turbopack-loaders-app\n```\n\n----------------------------------------\n\nTITLE: Running blog app with npm\nDESCRIPTION: These commands navigate to the `blog` directory, install dependencies using npm, and start the development server. The blog app will be accessible at http://localhost:4000/blog.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd blog\nnpm install && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (Yarn)\nDESCRIPTION: These commands install the project dependencies using yarn install and then start the Next.js development server using yarn dev. This sets up the local development environment for the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Import Button with relative path - TypeScript\nDESCRIPTION: This snippet illustrates a relative import statement, which can become cumbersome in large projects due to long relative paths.  This is the problem absolute imports solve.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Button from \"../../../components/button\";\n```\n\n----------------------------------------\n\nTITLE: Register OpenTelemetry in instrumentation.ts\nDESCRIPTION: Registers OpenTelemetry for observability. This function is called once when a new Next.js server instance is initiated. It imports `registerOTel` from `@vercel/otel` and calls it with the application name 'next-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint to Prevent HTML Links in Next.js - JSON\nDESCRIPTION: This snippet shows a configuration for the ESLint plugin to enforce that HTML links are not used for internal navigation in Next.js applications. It specifies the rule to check and the associated `pages` directory path, which helps in a monorepo structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@next/next/no-html-link-for-pages\": [\"error\", \"packages/my-app/pages/\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind Typography (JSX - App Router)\nDESCRIPTION: This JavaScript code shows how to apply Tailwind typography styles to a shared MDX layout within a Next.js application using the App Router. The `prose` class from `@tailwindcss/typography` is applied to the `div` element, which sets up default typographic styles for the MDX content. Specific classes further customize the heading styles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pull Request with GitHub CLI\nDESCRIPTION: Command to create a pull request using GitHub CLI, which automatically handles forking and setting up remote branches.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngh pr create\n```\n\n----------------------------------------\n\nTITLE: Implementing IPC Communication Module\nDESCRIPTION: Creates an IPC (Inter-Process Communication) module using Node.js sockets for communication between processes, with methods for sending/receiving messages and handling errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { createConnection } from \"node:net\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nfunction createIpc(port) {\n    const socket = createConnection(port, \"127.0.0.1\");\n    const packetQueue = [];\n    const recvPromiseResolveQueue = [];\n    function pushPacket(packet) {\n        const recvPromiseResolve = recvPromiseResolveQueue.shift();\n        if (recvPromiseResolve != null) {\n            recvPromiseResolve(JSON.parse(packet.toString(\"utf8\")));\n        } else {\n            packetQueue.push(packet);\n        }\n    }\n    let state = {\n        type: \"waiting\"\n    };\n    let buffer = Buffer.alloc(0);\n    socket.once(\"connect\", ()=>{\n        socket.on(\"data\", (chunk)=>{\n            buffer = Buffer.concat([\n                buffer,\n                chunk\n            ]);\n            loop: while(true){\n                switch(state.type){\n                    case \"waiting\":\n                        {\n                            if (buffer.length >= 4) {\n                                const length = buffer.readUInt32BE(0);\n                                buffer = buffer.subarray(4);\n                                state = {\n                                    type: \"packet\",\n                                    length\n                                };\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                    case \"packet\":\n                        {\n                            if (buffer.length >= state.length) {\n                                const packet = buffer.subarray(0, state.length);\n                                buffer = buffer.subarray(state.length);\n                                state = {\n                                    type: \"waiting\"\n                                };\n                                pushPacket(packet);\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    });\n    socket.once(\"close\", ()=>{\n        process.exit(0);\n    });\n    function send(message) {\n        const packet = Buffer.from(JSON.stringify(message), \"utf8\");\n        const length = Buffer.alloc(4);\n        length.writeUInt32BE(packet.length);\n        socket.write(length);\n        return new Promise((resolve, reject)=>{\n            socket.write(packet, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    function sendReady() {\n        const length = Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return new Promise((resolve, reject)=>{\n            socket.write(length, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    return {\n        async recv () {\n            const packet = packetQueue.shift();\n            if (packet != null) {\n                return JSON.parse(packet.toString(\"utf8\"));\n            }\n            const result = await new Promise((resolve)=>{\n                recvPromiseResolveQueue.push((result)=>{\n                    resolve(result);\n                });\n            });\n            return result;\n        },\n        send (message) {\n            return send(message);\n        },\n        sendReady,\n        async sendError (error) {\n            try {\n                await send({\n                    type: \"error\",\n                    ...structuredError(error)\n                });\n            } catch (err) {\n                console.error(\"failed to send error back to rust:\", err);\n                process.exit(1);\n            }\n            process.exit(0);\n        }\n    };\n}\nconst PORT = process.argv[2];\nconst IPC = createIpc(parseInt(PORT, 10));\nexport { createIpc as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { PORT as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { IPC as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Error Boundary Component in React\nDESCRIPTION: This snippet demonstrates the creation of an Error Boundary component by extending React.Component to handle client-side errors gracefully. Dependencies include the React library. The key parameters are `props` and `state`, with `hasError` boolean state tracking error presence. The component renders a fallback UI or child components based on the `hasError` state. It logs error details using `console.log()` within `componentDidCatch`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/06-configuring/12-error-handling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // Define a state variable to track whether is an error or not\n    this.state = { hasError: false }\n  }\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI\n\n    return { hasError: true }\n  }\n  componentDidCatch(error, errorInfo) {\n    // You can use your own error logging service here\n    console.log({ error, errorInfo })\n  }\n  render() {\n    // Check if the error is thrown\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div>\n          <h2>Oops, there is an error!</h2>\n          <button\n            type=\"button\"\n            onClick={() => this.setState({ hasError: false })}\n          >\n            Try again?\n          </button>\n        </div>\n      )\n    }\n\n    // Return children components in case of no error\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n```\n\n----------------------------------------\n\nTITLE: Exporting Next.js Rendering Functions\nDESCRIPTION: This snippet exports various Next.js functions for server-side rendering, static generation, and other page-related operations. It includes both stable and unstable versions of these functions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport { routeModule } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export routeModule\"\n};\nexport { default } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export default\"\n};\nexport { config } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export config\"\n};\nexport { getServerSideProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getServerSideProps\"\n};\nexport { getStaticPaths } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getStaticPaths\"\n};\nexport { getStaticProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getStaticProps\"\n};\nexport { reportWebVitals } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export reportWebVitals\"\n};\nexport { unstable_getServerProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getServerProps\"\n};\nexport { unstable_getServerSideProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getServerSideProps\"\n};\nexport { unstable_getStaticParams } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getStaticParams\"\n};\nexport { unstable_getStaticPaths } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getStaticPaths\"\n};\nexport { unstable_getStaticProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export unstable_getStaticProps\"\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing waitUntil for Serverless Platforms - Next.js\nDESCRIPTION: This TypeScript code snippet demonstrates how to implement `waitUntil` functionality for supporting `after` callbacks in serverless Next.js applications. It leverages `AsyncLocalStorage` to manage a request context and provides a `waitUntil` function that extends the lifetime of a serverless invocation until all promises passed to it have settled, ensuring asynchronous tasks complete after the response is sent. This solution is especially relevant when deploying Next.js to serverless environments where background tasks might be terminated prematurely.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AsyncLocalStorage } from 'node:async_hooks'\n\nconst RequestContextStorage = new AsyncLocalStorage<NextRequestContextValue>()\n\n// Define and inject the accessor that next.js will use\nconst RequestContext: NextRequestContext = {\n  get() {\n    return RequestContextStorage.getStore()\n  },\n}\nglobalThis[Symbol.for('@next/request-context')] = RequestContext\n\nconst handler = (req, res) => {\n  const contextValue = { waitUntil: YOUR_WAITUNTIL }\n  // Provide the value\n  return RequestContextStorage.run(contextValue, () => nextJsHandler(req, res))\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Grid Module Implementation\nDESCRIPTION: The complete implementation of the grid styling system module, containing imports, composition of individual styling functions, and exports. This represents the merged version of the module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport compose from './compose';\nimport { g as gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -11\n};\nimport { h as columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nimport { i as rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport { j as gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nimport { k as gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nimport { l as gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nimport { m as gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -23\n};\nimport { n as gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -24\n};\nimport { o as gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -25\n};\nimport { p as gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -26\n};\nimport { q as gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -27\n};\nimport { r as gridArea } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -28\n};\nconst grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\nconst __TURBOPACK__default__export__ = grid;\nexport { __TURBOPACK__default__export__ as default };\nexport { grid as s } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { __TURBOPACK__default__export__ as t } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Sitefinity example\nDESCRIPTION: This command initializes a new Next.js application using the cms-sitefinity example. It uses npx to execute the create-next-app command with the specified example and target directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-sitefinity cms-sitefinity-app\n```\n\n----------------------------------------\n\nTITLE: Copying Environment File\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is intended to store environment-specific variables, and it's typically excluded from version control to keep sensitive information secure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Route Handler for Static JSON Response (JavaScript)\nDESCRIPTION: This code demonstrates a Route Handler that returns a static JSON response.  It exports an asynchronous `GET` function that returns a `Response` object with a JSON payload. This will render a static JSON file during `next build` when using static export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function GET() {\n  return Response.json({ name: 'Lee' })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Image Loader\nDESCRIPTION: Configuration example for setting up a custom image loader in Next.js config file, allowing for custom image optimization implementations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component (App Router)\nDESCRIPTION: Defines a Next.js page component within the `app` directory using the App Router. It renders a heading and a link to the about page.  Requires Next.js and `next/link`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Kontent.ai Backup using Backup Manager\nDESCRIPTION: This command uses the Kontent.ai Backup Manager to restore data from a zip file into a Kontent.ai project.  It requires the Management API key and Project ID of the Kontent.ai project, as well as the path to the backup zip file.  The backup manager must be installed globally via npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @kontent-ai/backup-manager\nkbm --action=restore --apiKey=<Management API key> --projectId=<Project ID> --zipFilename=kontent-ai-backup\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with WebWorker Example (npm)\nDESCRIPTION: This command initializes a new Next.js application using the 'with-web-worker' example. It uses npm to execute the create-next-app command and sets up a project named 'with-web-worker-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-web-worker with-web-worker-app\n```\n\n----------------------------------------\n\nTITLE: Lazy Root Example (DOM Element)\nDESCRIPTION: This example demonstrates how to use the `lazyRoot` prop of the Next.js Image component to specify a scrollable parent element for lazy loading. It utilizes a React ref to point to a DOM element with overflow scrolling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/legacy/image'\nimport React from 'react'\n\nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n\n  return (\n    <div ref={lazyRoot} style={{ overflowX: 'scroll', width: '500px' }}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: IPC Module Export Configuration\nDESCRIPTION: Exports IPC functionality from TurboPack parts using module assertions. Configures module dependencies and exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nexport { IPC };\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Support in Next.js Compiler\nDESCRIPTION: This snippet shows how to configure the Next.js Compiler to support Relay, a JavaScript framework for building data-driven React applications. It specifies settings needed for the Relay compiler to function properly in the Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    relay: {\n      // This should match relay.config.js\n      src: './',\n      artifactDirectory: './__generated__',\n      language: 'typescript',\n      eagerEsModules: false,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Picture Element\nDESCRIPTION: Shows how to implement responsive images using the HTML picture element with multiple source formats (AVIF, WebP, JPEG) for better browser compatibility.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Home() {\n  return (\n    <picture>\n      <source srcSet=\"https://example.com/hero.avif\" type=\"image/avif\" />\n      <source srcSet=\"https://example.com/hero.webp\" type=\"image/webp\" />\n      <img\n        src=\"https://example.com/hero.jpg\"\n        alt=\"Landscape picture\"\n        width={800}\n        height={500}\n      />\n    </picture>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sharp with npm\nDESCRIPTION: This snippet demonstrates how to install the `sharp` package using npm. It is a common solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sharp\n```\n\n----------------------------------------\n\nTITLE: Terminal Output for Statically Optimized Page in Next.js\nDESCRIPTION: Shows the file structure output by 'next build' for a statically optimized page, where the page is prerendered as HTML.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/04-automatic-static-optimization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.next/server/pages/about.html\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Ionic example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-ionic' example. It scaffolds a project named 'with-ionic-app' in the current directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-ionic with-ionic-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Radix UI using pnpm\nDESCRIPTION: This command creates a new Next.js application using the radix-ui example template. It utilizes pnpm to execute create next-app with the specified example and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example radix-ui radix-ui-app\n```\n\n----------------------------------------\n\nTITLE: Defining NextResponse Class with Middleware Handling - JavaScript\nDESCRIPTION: This snippet defines the NextResponse class, extending the Response class to include middleware functionality and cookie management. It includes methods for json responses, redirecting, rewriting requests, and integrating cookie operations with headers. The purpose is to enhance server-side response capabilities in Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validateURL } from '../utils';\nimport { NextURL } from '../next-url';\nimport { toNodeOutgoingHttpHeaders } from '../utils';\nimport { ResponseCookies } from './cookies';\nimport { stringifyCookie } from '../../web/spec-extension/cookies';\nimport { ReflectAdapter } from './adapters/reflect';\nimport '../../web/spec-extension/cookies';\nimport '../next-url';\nimport '../utils';\nimport './adapters/reflect';\nimport './cookies';\nconst INTERNALS = Symbol('internal response');\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error('request.headers must be an instance of Headers');\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set('x-middleware-request-' + key, value);\n            keys.push(key);\n        }\n        headers.set('x-middleware-override-headers', keys.join(','));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        const headers = this.headers;\n        const cookies = new ResponseCookies(headers);\n        const cookiesProxy = new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case 'delete':\n                    case 'set':\n                        {\n                            return (...args)=>{\n                                const result = Reflect.apply(target[prop], target, args);\n                                const newHeaders = new Headers(headers);\n                                if (result instanceof ResponseCookies) {\n                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));\n                                }\n                                handleMiddlewareField(init, newHeaders);\n                                return result;\n                            };\n                        }\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n        this[INTERNALS] = {\n            cookies: cookiesProxy,\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeOutgoingHttpHeaders(headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for('edge-runtime.inspect.custom')]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === 'object' ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set('Location', validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-rewrite', validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-next', '1');\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\nexport { NextResponse };\nexport { INTERNALS as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { REDIRECTS as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { handleMiddlewareField as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { NextResponse as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Run Next.js App in Development Mode\nDESCRIPTION: Starts the Next.js application in development mode.  The available package managers are npm, yarn, and pnpm. The application will be accessible at localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Fela using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application using the 'with-fela' example. It initializes a project with the Fela styling solution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-fela with-fela-app\n```\n\n----------------------------------------\n\nTITLE: Generating static params in Next.js (TypeScript)\nDESCRIPTION: This code snippet shows how to use the generateStaticParams function to pre-render dynamic routes at build time in Next.js using TypeScript. It fetches a list of posts and returns an array of objects, where each object contains the slug for a dynamic route segment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright (bash)\nDESCRIPTION: Installs Playwright using npm, yarn, or pnpm.  This command initiates the Playwright setup process, guiding the user through configuration, including the creation of a `playwright.config.ts` file. Requires Node.js and a package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init playwright\n# or\nyarn create playwright\n# or\npnpm create playwright\n```\n\n----------------------------------------\n\nTITLE: Importing Images in Next.js Application\nDESCRIPTION: This snippet demonstrates how to properly import and use images in a Next.js application by moving the image import statement to the `pages/_app.js` file. This approach ensures that the images are correctly displayed on every page by leveraging the `next/image` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/custom-document-image-import.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport yourImage from 'path/to/your/image'\nimport Image from 'next/image'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Image src={yourImage} alt=\"your_image_description\" />\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Defining Static Viewport Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to export a static viewport object in a TypeScript file for use in Next.js applications. The exported object contains the theme color for the viewport.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: XML Output for Image Sitemap\nDESCRIPTION: The XML output generated for an image sitemap, showing how the images property is transformed into the Google schema format for image sitemaps with appropriate XML namespaces.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\n  xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"\n>\n  <url>\n    <loc>https://example.com</loc>\n    <image:image>\n      <image:loc>https://example.com/image.jpg</image:loc>\n    </image:image>\n    <lastmod>2021-01-01</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 500 Page in Next.js\nDESCRIPTION: This code snippet shows how to create a custom 500 error page in Next.js. A React functional component `Custom500` is defined to display a server-side error message. This component is placed in `pages/500.js`, which Next.js recognizes and uses for 500 errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Custom500() {\n  return <h1>500 - Server-side error occurred</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Next.js Response Handler\nDESCRIPTION: Imports required modules for cookie handling, URL processing, and utility functions\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringifyCookie } from '../../web/spec-extension/cookies';\nimport { NextURL } from '../next-url';\nimport { toNodeOutgoingHttpHeaders, validateURL } from '../utils';\nimport { ReflectAdapter } from './adapters/reflect';\nimport { ResponseCookies } from './cookies';\n```\n\n----------------------------------------\n\nTITLE: Alternative Next.js Middleware URL Construction\nDESCRIPTION: Shows an alternative approach using URL constructor with the original request URL as base. Note that this method doesn't account for Next.js configuration like basePath or locale settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-relative-urls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  return NextResponse.rewrite(new URL('/dest', request.url))\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting gridAutoFlow from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridAutoFlow styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { l as gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nexport { gridAutoFlow };\n```\n\n----------------------------------------\n\nTITLE: Exporting from Various Parts - JavaScript\nDESCRIPTION: This snippet exports functions and variables from various parts, utilizing assertions for Turbopack. It allows seamless integration and modular structuring of JavaScript functionalities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport { external1 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external1\"\n};\nexport { external2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external2\"\n};\nexport { foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foobar\"\n};\nexport { foo } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_var__: \"export foo\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Presets in Next.js\nDESCRIPTION: This code snippet shows how to customize the configuration of the `next/babel` preset within a `.babelrc` file in a Next.js project.  It demonstrates how to modify specific options for the `preset-env`, `transform-runtime`, `styled-jsx`, and `class-properties` configurations that are included in `next/babel`. This allows fine-grained control over Babel's behavior while still inheriting the base configurations needed for Next.js. Consult Babel's documentation for available options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"preset-env\": {},\n        \"transform-runtime\": {},\n        \"styled-jsx\": {},\n        \"class-properties\": {}\n      }\n    ]\n  ],\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Console Functions\nDESCRIPTION: Defines improveConsole function to wrap console methods for enhanced logging, allowing stack traces to be appended to outputs conditionally. It takes method parameters including function name, stream, and stack flag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst improveConsole = (name, stream, addStack)=>{\n    const original = console[name];\n    const stdio = process[stream];\n    console[name] = (...args)=>{\n        stdio.write(`TURBOPACK_OUTPUT_B\\n`);\n        original(...args);\n        if (addStack) {\n            const stack = new Error().stack?.replace(/^.+\\n.+\\n/, \"\") + \"\\n\";\n            stdio.write(\"TURBOPACK_OUTPUT_S\\n\");\n            stdio.write(stack);\n        }\n        stdio.write(\"TURBOPACK_OUTPUT_E\\n\");\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with Jest using Yarn\nDESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application configured with Jest using Yarn. Similar to the previous snippet, it utilizes the 'with-jest-babel' example. The expected outcome is a new application folder with appropriate configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-jest-babel with-jest-babel-app\n```\n\n----------------------------------------\n\nTITLE: Using styled-jsx with Client Components in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a StyledJsxRegistry component for managing styled-jsx in a Next.js application using TypeScript. It utilizes the `useServerInsertedHTML` hook and a custom style registry to collect and inject CSS rules during server-side rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\\n\\nimport React, { useState } from 'react'\\nimport { useServerInsertedHTML } from 'next/navigation'\\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\\n\\nexport default function StyledJsxRegistry({\\n  children,\\n}: {\\n  children: React.ReactNode\\n}) {\\n  // Only create stylesheet once with lazy initial state\\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\\n\\n  useServerInsertedHTML(() => {\\n    const styles = jsxStyleRegistry.styles()\\n    jsxStyleRegistry.flush()\\n    return <>{styles}</>\\n  })\\n\\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\\n}'\n```\n\n----------------------------------------\n\nTITLE: Generate Turbopack Trace File\nDESCRIPTION: This command generates a Turbopack trace file, which contains detailed information about the performance of the application during local development. The trace file can be used to identify performance bottlenecks. Requires the NEXT_TURBOPACK_TRACING environment variable to be set.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_TURBOPACK_TRACING=1 npm run dev\n```\n\n----------------------------------------\n\nTITLE: Visualizing Module Dependencies with Mermaid\nDESCRIPTION: A mermaid graph showing the relationships between different modules and their imports in the Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, ImportOfModule)]\"];\n    N1[\"Items: [ItemId(0, ImportBinding(0))]\"];\n    N2[\"Items: [ItemId(1, ImportOfModule)]\"];\n    N3[\"Items: [ItemId(1, ImportBinding(0))]\"];\n    N4[\"Items: [ItemId(2, ImportOfModule)]\"];\n    N5[\"Items: [ItemId(2, ImportBinding(0))]\"];\n    N6[\"Items: [ItemId(3, Normal)]\"];\n    N7[\"Items: [ItemId(4, Normal), ItemId(5, VarDeclarator(0)), ItemId(6, VarDeclarator(0))]\"];\n    N8[\"Items: [ItemId(7, Normal)]\"];\n    N9[\"Items: [ItemId(8, VarDeclarator(0)), ItemId(9, Normal), ItemId(10, Normal), ItemId(11, Normal), ItemId(12, Normal), ItemId(13, Normal), ItemId(14, Normal), ItemId(15, Normal), ItemId(16, Normal), ItemId(17, Normal), ItemId(18, Normal), ItemId(19, Normal), ItemId(20, Normal), ItemId(21, Normal), ItemId(22, Normal), ItemId(23, Normal), ItemId(24, Normal)]\"];\n    N10[\"Items: [ItemId(Export((\\\"IPC\\\", #2), \\\"IPC\\\"))]\"];\n    N11[\"Items: [ItemId(Export((\\\"structuredError\\\", #2), \\\"structuredError\\\"))]\"];\n    N2 --> N0;\n    N4 --> N2;\n    N9 -.-> N5;\n    N9 -.-> N3;\n    N11 --> N6;\n    N10 --> N7;\n    N6 --> N5;\n    N3 --> N2;\n    N5 --> N4;\n    N7 -.-> N5;\n    N7 -.-> N3;\n    N7 --> N1;\n    N7 --> N6;\n    N8 --> N7;\n    N8 -.-> N5;\n    N8 -.-> N3;\n    N8 -.-> N1;\n    N8 -.-> N6;\n    N9 -.-> N1;\n    N9 -.-> N6;\n    N7 --> N4;\n    N10 --> N8;\n    N9 --> N8;\n    N6 --> N3;\n    N1 --> N0;\n```\n\n----------------------------------------\n\nTITLE: Enhancing Console Output for TurboPack\nDESCRIPTION: Overrides standard console methods to add special markers and stack traces to console output. This enhancement allows TurboPack to capture and format console output with additional context such as source location of log statements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nconst improveConsole = (name, stream, addStack)=>{\n    const original = console[name];\n    const stdio = process[stream];\n    console[name] = (...args)=>{\n        stdio.write(`TURBOPACK_OUTPUT_B\\n`);\n        original(...args);\n        if (addStack) {\n            const stack = new Error().stack?.replace(/^.+\\n.+\\n/, \"\") + \"\\n\";\n            stdio.write(\"TURBOPACK_OUTPUT_S\\n\");\n            stdio.write(stack);\n        }\n        stdio.write(\"TURBOPACK_OUTPUT_E\\n\");\n    };\n};\nimproveConsole(\"error\", \"stderr\", true);\nimproveConsole(\"warn\", \"stderr\", true);\nimproveConsole(\"count\", \"stdout\", true);\nimproveConsole(\"trace\", \"stderr\", false);\nimproveConsole(\"log\", \"stdout\", true);\nimproveConsole(\"group\", \"stdout\", true);\nimproveConsole(\"groupCollapsed\", \"stdout\", true);\nimproveConsole(\"table\", \"stdout\", true);\nimproveConsole(\"debug\", \"stdout\", true);\nimproveConsole(\"info\", \"stdout\", true);\nimproveConsole(\"dir\", \"stdout\", true);\nimproveConsole(\"dirxml\", \"stdout\", true);\nimproveConsole(\"timeEnd\", \"stdout\", true);\nimproveConsole(\"timeLog\", \"stdout\", true);\nimproveConsole(\"timeStamp\", \"stdout\", true);\nimproveConsole(\"assert\", \"stderr\", true);\nexport { improveConsole as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Using getStaticProps with Preview Mode - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use `getStaticProps` in Next.js to enable preview mode. It accesses the `context.preview` boolean and `context.previewData` to determine whether to fetch draft content. No dependencies are required beyond Next.js itself. It shows an empty function for demonstration; the implementation depends on the specific data fetching logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  // If you request this page with the preview mode cookies set:\n  //\n  // - context.preview will be true\n  // - context.previewData will be the same as\n  //   the argument used for `setPreviewData`.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prismic Slice Machine\nDESCRIPTION: This command initializes Prismic Slice Machine in the project, prompting the user to log in or create a Prismic account. It also creates a new Prismic repository with pre-made content models and connects it to the app. Requires `@slicemachine/init` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx @slicemachine/init\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in a Dynamic Table Component in JavaScript\nDESCRIPTION: Example of a JavaScript Table component that accesses searchParams data, making it run dynamically when used with PPR.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function Table({ searchParams }) {\n  const sort = (await searchParams).sort === 'true'\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-algolia-react-instantsearch example. It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app\n```\n\n----------------------------------------\n\nTITLE: Importing Client Component in MDX\nDESCRIPTION: This snippet imports the Client component from a local file and renders it in an MDX format. The Client component is expected to be a valid React component that is displayed when the MDX is rendered.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client } from './client'\n\n<Client />\n```\n\n----------------------------------------\n\nTITLE: Configuring runtime in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to configure the `runtime` option in a Next.js layout, page, or route using TypeScript. The `runtime` configuration specifies the environment in which the route segment will be executed, either Node.js or Edge.  It affects the capabilities and performance characteristics of the route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n```\n\n----------------------------------------\n\nTITLE: Setting Title Template in Layout (JSX)\nDESCRIPTION: This code snippet demonstrates how to set a title template in a Next.js layout using JavaScript. The template is defined using the '%s' placeholder, which will be replaced by the title defined in child segments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App using create-next-app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application named 'custom-server-app' based on the 'custom-server' example. It initializes the project using Yarn's package management.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example custom-server custom-server-app\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React Packages using npm\nDESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using npm. It ensures that the core dependencies are upgraded to the required versions for Next.js 12.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Run Next.js development server (pnpm)\nDESCRIPTION: This command uses pnpm to execute the 'dev' script defined in the project's package.json. The purpose is to start the Next.js development server, allowing developers to view and test the application locally. It typically starts the server on localhost.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with StyledJsxRegistry in JavaScript\nDESCRIPTION: This snippet illustrates how to wrap a root layout component in Next.js with the StyledJsxRegistry using JavaScript. This process is crucial for the proper application of CSS-in-JS styles during the server-side rendering phase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport StyledJsxRegistry from './registry'\\n\\nexport default function RootLayout({ children }) {\\n  return (\\n    <html>\\n      <body>\\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\\n      </body>\\n    </html>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for MDX Preview\nDESCRIPTION: This snippet configures VSCode to recognize `.mdx` files as markdown, enabling the built-in markdown previewer to render MDX content locally. This allows contributors to preview changes before submitting them.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.associations\": {\n    \"*.mdx\": \"markdown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining npm scripts in package.json for Next.js\nDESCRIPTION: This JSON snippet defines the standard npm scripts for a Next.js project. These scripts simplify common development tasks such as starting the development server, building the application for production, running the production server, and linting the code.  These are typically placed in the \"scripts\" section of the package.json file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the active-class-name example. It initializes the project in a directory named active-class-name-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example active-class-name active-class-name-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with react-multi-carousel Example (npm)\nDESCRIPTION: This command utilizes npm to create a new Next.js application based on the react-multi-carousel example. It initializes a project named 'with-react-multi-carousel-app' using the specified example template. The command requires npm to be installed and configured correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-multi-carousel with-react-multi-carousel-app\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp in Custom Installation Path for Next.js\nDESCRIPTION: This command updates the 'sharp' package to the latest version when using a custom installation path specified by the NEXT_SHARP_PATH environment variable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"$NEXT_SHARP_PATH/../\" && npm i sharp@latest\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic API Synchronously (Deprecated) in Next.js\nDESCRIPTION: This code snippet demonstrates the deprecated way of accessing dynamic API properties synchronously, which will now trigger a warning in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page({ params }) {\n  // direct access of `params.id`.\n  return <p>ID: {params.id}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Definitions (pnpm)\nDESCRIPTION: This command installs type definitions for React, React DOM, and Node.js as development dependencies using pnpm. These definitions provide type checking and autocompletion for these libraries when using TypeScript.  The `--save-dev` flag ensures they're added to `devDependencies` in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npnpm install --save-dev @types/react @types/react-dom @types/node\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode (pnpm)\nDESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode using pnpm. `pnpm install` installs dependencies and `pnpm dev` starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Title Tag in Next.js _app.js\nDESCRIPTION: Demonstrates the correct way to implement a title tag in a Next.js application using next/head in _app.js. This approach ensures proper title updates across page renders.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-document-title.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport Head from 'next/head'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <title>My new cool app</title>\n      </Head>\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the active-class-name example. It initializes the project in a directory named active-class-name-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example active-class-name active-class-name-app\n```\n\n----------------------------------------\n\nTITLE: Setting MetadataBase (JSX)\nDESCRIPTION: This code snippet shows how to set the `metadataBase` option in a Next.js layout using JavaScript.  It configures the base URL used for resolving relative URLs in other metadata fields.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n}\n```\n\n----------------------------------------\n\nTITLE: Using onError Callback with Next.js Image Component\nDESCRIPTION: Example of using the onError callback with Next.js Image component. This callback is triggered if the image fails to load, providing access to the error event.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Image onError={(e) => console.error(e.target.id)} />\n```\n\n----------------------------------------\n\nTITLE: Create Next App with styled-components using npx\nDESCRIPTION: This command initializes a new Next.js application using the with-styled-components example. It uses npx to execute create-next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-styled-components with-styled-components-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with OpenTelemetry example using npx\nDESCRIPTION: This command initializes a new Next.js application using the `with-opentelemetry` example from the `create-next-app` tool. It downloads the necessary files and sets up the project with OpenTelemetry instrumentation. The resulting application directory will be named `with-opentelemetry-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-opentelemetry with-opentelemetry-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Analytics on a single route (App Router - JSX)\nDESCRIPTION: This code snippet demonstrates how to include Google Analytics on a single route in a Next.js application using the App Router.  It imports the `GoogleAnalytics` component from `@next/third-parties/google` and initializes it with a Google Analytics ID.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Jotai example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the Jotai example. It downloads and executes the create-next-app package and clones the specified example into a new directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-jotai with-jotai-app\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 10 Implementation\nDESCRIPTION: Imports 'foobar', defines the 'external2' function that modifies 'foobar', and exports it. Shows how Turbopack handles function definitions that modify imported variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nfunction external2() {\n    foobar += \".\";\n}\nexport { external2 };\nexport { external2 as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Bundle Analyzer\nDESCRIPTION: Installation instructions for the bundle analyzer package using npm or yarn package managers\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/bundle-analyzer\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @next/bundle-analyzer\n```\n\n----------------------------------------\n\nTITLE: Removing <a> Tags from Link Components\nDESCRIPTION: Codemod to remove <a> tags inside Link Components or add a legacyBehavior prop to Links that cannot be auto-fixed in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\">\n  About\n</Link>\n\n<Link href=\"/about\">\n  <a onClick={() => console.log('clicked')}>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\" onClick={() => console.log('clicked')}>\n  About\n</Link>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => <a>About</a>\n\n<Link href=\"/about\">\n  <Component />\n</Link>\n// becomes\n<Link href=\"/about\" legacyBehavior>\n  <Component />\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server in Bash\nDESCRIPTION: This code snippet provides the command to start the Next.js development server using various package managers like npm, yarn, pnpm, or bun. The development server can be accessed in the browser at http://localhost:3000. No additional dependencies are required, and it assumes the Next.js project has been correctly installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Analytics with Instrumentation Client (JS)\nDESCRIPTION: This code snippet demonstrates how to initialize analytics and set up global error tracking using the `instrumentation-client.js` file in a Next.js application. It logs a message to the console and adds an error listener to the window object to report errors to an external service.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize analytics before the app starts\nconsole.log('Analytics initialized')\n\n// Set up global error tracking\nwindow.addEventListener('error', (event) => {\n  // Send to your error tracking service\n  reportError(event.error)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GraphQL-React example using yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the `with-graphql-react` example. It initializes a project named `with-graphql-react-app` with all necessary dependencies and configurations for GraphQL-React integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-graphql-react with-graphql-react-app\n```\n\n----------------------------------------\n\nTITLE: Warning for Unexpected Export Usage in CommonJS\nDESCRIPTION: This snippet warns against the use of 'export *' in a CommonJS module, indicating that this pattern is only valid at runtime. It suggests listing all exports manually or rewriting the module to ECMAScript Module (ESM) format to eliminate additional runtime code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-2/issues/unexpected export __star__-f9a205.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwarning - [analysis] [project]/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-2/input/commonjs.js  unexpected export *\n  export * used with module [project]/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-2/input/commonjs.js [test] (ecmascript) which is a CommonJS module with exports only available at runtime\n  List all export names manually (`export { a, b, c } from \"...\"\") or rewrite the module to ESM, to avoid the additional runtime code.\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for Bitbucket Pipelines defines a custom cache for the Next.js cache directory and references it in the pipeline step along with the node cache.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  caches:\n    nextcache: .next/cache\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- step:\n    name: your_step_name\n    caches:\n      - node\n      - nextcache\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'my-blog' using the 'blog' example. It sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example blog my-blog\n```\n\n----------------------------------------\n\nTITLE: Valid Config: Static Runtime - Next.js JavaScript\nDESCRIPTION: This code snippet shows valid `config` definitions using static string literals for the `runtime` property. This is the correct way to define the runtime configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {\n  runtime: 'nodejs',\n}\nexport const config = {\n  runtime: `edge`,\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidated Grid Function Exports in JavaScript\nDESCRIPTION: This code exports all grid-related functions from their respective TurboPack parts, providing a unified API for accessing the grid styling utilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nexport { gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gap\"\n};\nexport { columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export columnGap\"\n};\nexport { rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export rowGap\"\n};\nexport { gridArea } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridArea\"\n};\nexport { default } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export default\"\n};\nexport { gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridAutoColumns\"\n};\nexport { gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridAutoFlow\"\n};\nexport { gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridAutoRows\"\n};\nexport { gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridColumn\"\n};\nexport { gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridRow\"\n};\nexport { gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridTemplateAreas\"\n};\nexport { gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridTemplateColumns\"\n};\nexport { gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridTemplateRows\"\n};\n```\n\n----------------------------------------\n\nTITLE: Lazy Loaded Tracer Initialization - JavaScript\nDESCRIPTION: Creates a lazy-loaded singleton function `getTracer` that returns an instance of `NextTracerImpl`. Ensures that the same tracer instance is reused throughout the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring distDir in next.config.js\nDESCRIPTION: This snippet configures the `distDir` option in `next.config.js`. It sets the build directory to 'build' instead of the default '.next' folder. The `module.exports` object is used to export the configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/distDir.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  distDir: 'build',\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dependency Compatibility in Bash\nDESCRIPTION: This Bash snippet warns about two dependencies that are incompatible with the upgraded package versions in a Next.js project. It lists unmet peer dependencies for specific React and React-DOM versions and suggests updating to the latest versions or filing an issue for support. No inputs or parameters are required; it outputs a warning log.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/peer-dep-out-of-range/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n⚠ Found 2 dependencies that seem incompatible with the upgraded package versions.\nYou may have to update these packages to their latest version or file an issue to ask for support of the upgraded libraries.\nunmet-prerelease 0.0.1\n  ├── ✕ unmet peer react@\"^18.2.0 || 19.0.0-rc-aaaaaaaa-20240101\": found 19.0.0-rc-7c8e5e7a-20241101\n  └── ✕ unmet peer react-dom@\"^18.2.0 || 19.0.0-rc-aaaaaaaa-20240101\": found 19.0.0-rc-7c8e5e7a-20241101\nunmet-range 0.0.1\n  ├── ✕ unmet peer react@\"^18.0.0 || ^19.0.0\": found 19.0.0-rc-7c8e5e7a-20241101\n  └── ✕ unmet peer react-dom@\"< 19\": found 19.0.0-rc-7c8e5e7a-20241101\n```\n\n----------------------------------------\n\nTITLE: Creating an API Session (Pages Router) - TypeScript\nDESCRIPTION: This TypeScript code demonstrates creating a session in a Next.js API route using the Pages Router. It imports the database connection (`db`) and Next.js API request/response types.  The `handler` function takes a `NextApiRequest` and `NextApiResponse`, extracts user data from the request body, generates a session ID, inserts a session record into the database, and returns the session ID in the response. Error handling is included to return a 500 status code in case of an internal server error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '../../lib/db'\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n\n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Ghost Example (pnpm)\nDESCRIPTION: This command uses `create-next-app` with pnpm to initialize a new Next.js application using the Ghost CMS example.  It generates a `cms-ghost-app` directory containing the project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-ghost cms-ghost-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Transfer Object (DTO) for User Profile (JavaScript)\nDESCRIPTION: This JavaScript code implements a Data Transfer Object (DTO) pattern for retrieving user profile information in a Next.js application. It defines functions `canSeeUsername` and `canSeePhoneNumber` to determine data visibility based on user roles and team affiliation. The `getProfileDTO` function fetches user data based on a slug, retrieves the current user, and constructs a DTO that exposes only the allowed username and phone number based on the visibility rules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\nimport { getUser } from '@/app/lib/dal'\n\nfunction canSeeUsername(viewer) {\n  return true\n}\n\nfunction canSeePhoneNumber(viewer, team) {\n  return viewer.isAdmin || team === viewer.team\n}\n\nexport async function getProfileDTO(slug) {\n  const data = await db.query.users.findMany({\n    where: eq(users.slug, slug),\n    // Return specific columns here\n  })\n  const user = data[0]\n\n  const currentUser = await getUser(user.id)\n\n  // Or return only what's specific to the query here\n  return {\n    username: canSeeUsername(currentUser) ? user.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, user.team)\n      ? user.phonenumber\n      : null,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Inputs for Sitemap Generation (PHP)\nDESCRIPTION: This function retrieves user inputs from the $_GET superglobal array, sanitizes them, and returns them in a structured format for sitemap generation. It handles pagination parameters (pageNo, perPage), taxonomy type, and post type. It returns an array containing arguments for fetching users, posts, and the taxonomy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction wsra_get_user_inputs()\n{\n  $pageNo = sprintf(\"%d\", $_GET['pageNo']);\n  $perPage = sprintf(\"%d\", $_GET['perPage']);\n  // Check for array key taxonomyType\n  if (array_key_exists('taxonomyType', $_GET)) {\n    $taxonomy = $_GET['taxonomyType'];\n  } else {\n    $taxonomy = 'category';\n  }\n  $postType = $_GET['postType'];\n  $paged = $pageNo ? $pageNo : 1;\n  $perPage = $perPage ? $perPage : 100;\n  $offset = ($paged - 1) * $perPage;\n  $args = array(\n    'number' => $perPage,\n    'offset' => $offset,\n  );\n  $postArgs = array(\n    'posts_per_page' => $perPage,\n    'post_type' => strval($postType ? $postType : 'post'),\n    'paged' => $paged,\n  );\n\n  return [$args, $postArgs, $taxonomy];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with GraphQL example using npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the api-routes-graphql example. It initializes the project with the necessary dependencies and configurations for a GraphQL API. The new application will be named 'api-routes-graphql-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example api-routes-graphql api-routes-graphql-app\n```\n\n----------------------------------------\n\nTITLE: Running Sentry Wizard\nDESCRIPTION: This command executes the Sentry wizard to configure the necessary settings files for the `@sentry/nextjs` SDK. This includes initializing the SDK and uploading source maps to Sentry. The `-i nextjs` flag specifies the Next.js integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @sentry/wizard -i nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating a New Builder.io Space\nDESCRIPTION: This command is used to create a new space in Builder.io. The user must provide a private API key and a name for the space. After successful execution, the public API key is printed, which should be used in the environment configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cms-builder-io-app\nbuilder create -k [private-key] -n [space-name] -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for HMR WebSocket\nDESCRIPTION: This Apache configuration snippet enables web sockets for the HMR connection in Next.js 12. It includes rewrite rules and proxy pass directives to properly handle WebSocket requests to the Next.js development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_10\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:443>\n # ServerName yourwebsite.local\n ServerName \"${WEBSITE_SERVER_NAME}\"\n ProxyPass / http://localhost:3000/\n ProxyPassReverse / http://localhost:3000/\n # Next.js 12 uses websocket\n <Location /_next/webpack-hmr>\n    RewriteEngine On\n    RewriteCond %{QUERY_STRING} transport=websocket [NC]\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule /(.*) ws://localhost:3000/_next/webpack-hmr/$1 [P,L]\n    ProxyPass ws://localhost:3000/_next/webpack-hmr retry=0 timeout=30\n    ProxyPassReverse ws://localhost:3000/_next/webpack-hmr\n </Location>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Codemod Transformations\nDESCRIPTION: Command to run Next.js codemod transformations in a project directory. It takes the transform name and path as arguments, with optional flags for dry-run and output printing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod <transform> <path>\n```\n\n----------------------------------------\n\nTITLE: Facebook Metadata (appId) Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section based on the Facebook metadata configuration with appId.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_57\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"fb:app_id\" content=\"12345678\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with create-next-app (pnpm)\nDESCRIPTION: This command initializes a new Next.js project using the `create-next-app` tool and the `with-mobx-state-tree` example. It uses pnpm to create a project named `with-mobx-state-tree-app` based on the provided example repository. This command sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mobx-state-tree with-mobx-state-tree-app\n```\n\n----------------------------------------\n\nTITLE: Async Page Implementation in Next.js 15\nDESCRIPTION: Example of implementing async pages with params and searchParams handling in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntype Params = Promise<{ slug: string }>\ntype SearchParams = Promise<{ [key: string]: string | string[] | undefined }>\n\nexport async function generateMetadata(props: {\n  params: Params\n  searchParams: SearchParams\n}) {\n  const params = await props.params\n  const searchParams = await props.searchParams\n  const slug = params.slug\n  const query = searchParams.query\n}\n\nexport default async function Page(props: {\n  params: Params\n  searchParams: SearchParams\n}) {\n  const params = await props.params\n  const searchParams = await props.searchParams\n  const slug = params.slug\n  const query = searchParams.query\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env.local (Bash)\nDESCRIPTION: This shows an example of what the `.env.local` file should look like, populated with the required environment variables for connecting to the TakeShape CMS and enabling preview mode. It assumes you have already copied the `.env.local.example` file to `.env.local`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTAKESHAPE_PROJECT_ID=...\nTAKESHAPE_API_KEY=...\nTAKESHAPE_PREVIEW_SECRET=...\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the DatoCMS example. The application is created in a directory named cms-datocms-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-datocms cms-datocms-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using Yarn\nDESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a new Next.js application based on the `with-context-api` example. The new application will be named `with-context-api-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-context-api with-context-api-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Next.js Application using create-next-app\nDESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application using different package managers. It is essential for initializing the example project configured for Docker multi-environment setups. Dependencies include npm, Yarn, or pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-docker-multi-env nextjs-docker-multi-env\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-docker-multi-env nextjs-docker-multi-env\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-docker-multi-env nextjs-docker-multi-env\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Sizes Configuration - Next.js\nDESCRIPTION: Demonstrates how to use the `sizes` property with the Next.js legacy Image component to optimize responsive image loading. The `sizes` property informs the browser about the image's width at different viewport sizes, enabling it to select the most appropriate image from the generated source set. This improves performance by preventing the browser from downloading unnecessarily large images. Requires the 'next/legacy/image' import.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/legacy/image'\nconst Example = () => (\n  <div className=\"grid-element\">\n    <Image\n      src=\"/example.png\"\n      layout=\"fill\"\n      sizes=\"(max-width: 768px) 100vw,\n              (max-width: 1200px) 50vw,\n              33vw\"\n    />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Next.js App\nDESCRIPTION: This snippet provides the commands necessary to run tests in a Next.js application configured with Jest. It illustrates the command syntax using npm, Yarn, and pnpm for executing tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Configure paths in tsconfig/jsconfig.json\nDESCRIPTION: Configures the `paths` in `tsconfig.json` or `jsconfig.json` to create aliases for module paths.  Maps `@/styles/*` to `styles/*` and `@/components/*` to `components/*`. Each path is relative to the `baseUrl`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Files Using Root Stylesheet in Next.js\nDESCRIPTION: Demonstrates how to import additional CSS files using @import within the root stylesheet that is imported in pages/_app.js. This is the recommended approach for global CSS imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-css-tags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Root stylesheet */\n@import 'extra.css';\n\nbody {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration (JavaScript)\nDESCRIPTION: JavaScript example of configuring metadata for SEO in the root layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 13 with yarn\nDESCRIPTION: Command to upgrade Next.js to version 13 using yarn package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Config (Remote Patterns)\nDESCRIPTION: This code snippet demonstrates how to configure remote patterns in the `next.config.js` file for the Next.js Image component.  This allows specifying allowed external image sources by protocol, hostname, port, pathname, and search parameters to prevent malicious usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Unauthorized Page with Login UI (JavaScript)\nDESCRIPTION: The JavaScript equivalent of rendering a 401 error page featuring a login UI. This component ensures unauthorized users have the capability to log in using a Login component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Login from '@/app/components/Login'\n\nexport default function UnauthorizedPage() {\n  return (\n    <main>\n      <h1>401 - Unauthorized</h1>\n      <p>Please log in to access this page.</p>\n      <Login />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with next-rspack\nDESCRIPTION: This snippet shows how to update the next.config.js or next.config.ts file to integrate next-rspack into a Next.js project. The existing configuration is wrapped with the withRspack function to enable Rspack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst withRspack = require('next-rspack')\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = withRspack(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting ParseStackTrace Function\nDESCRIPTION: Imports the parse function from stacktrace-parser and re-exports it as parseStackTrace using TurboPack's variable assertion system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { parse as parseStackTrace } from \"../compiled/stacktrace-parser\";\nexport { parseStackTrace as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server with Multistage Builds\nDESCRIPTION: This snippet outlines the procedure to start a production server for the Next.js application utilizing multistage builds, ensuring only the necessary files are included in the final Docker image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create a network, which allows containers to communicate\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my_network\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Build prod\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f compose.prod.yaml build\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Up prod in detached mode\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f compose.prod.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Variables in JavaScript Part 3\nDESCRIPTION: This snippet imports a part and exports variables using aliasing. It utilizes TurboPack assertions to set dependencies and establishes alias exports for module parts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nconst foo = foobar;\nexport { foo };\nexport { foo as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting RouteKind with TurboPack Integration in JavaScript (DEV)\nDESCRIPTION: Exports RouteKind from the module, asserting with __TURBOPACK_VAR__, indicating TurboPack integration for optimized module handling during the development phase. This export syntax shows the conditional importing for improved web packing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar RouteKind;\n(function(RouteKind) {\n    RouteKind[\"PAGES\"] = \"PAGES\";\n    RouteKind[\"PAGES_API\"] = \"PAGES_API\";\n    RouteKind[\"APP_PAGE\"] = \"APP_PAGE\";\n    RouteKind[\"APP_ROUTE\"] = \"APP_ROUTE\"];\n})(RouteKind || (RouteKind = {}));\nexport { RouteKind };\nexport { RouteKind as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using pnpm\nDESCRIPTION: This command installs the project's dependencies using pnpm. It is a prerequisite for running the development server and other project-related tasks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Development Module Part 1\nDESCRIPTION: Variable declaration and export in development environment\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar a;\nexport { a as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with Official Example\nDESCRIPTION: Demonstrates how to create a Next.js project using an official example from the Next.js repository, specifying the example name and optional project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example [example-name] [your-project-name]\n```\n\n----------------------------------------\n\nTITLE: Enable Webpack Memory Optimizations in Next.js\nDESCRIPTION: This snippet demonstrates how to enable the `experimental.webpackMemoryOptimizations` feature in your `next.config.js` file.  This can reduce max memory usage but may slightly increase compilation times. It is available starting in `v15.0.0`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Home component (Pages Router)\nDESCRIPTION: A simple Next.js component for the Pages Router that returns a heading element. This is tested in the accompanying test snippet. Located in pages/index.js\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Home() {\n  return <h1>Home</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended User Agent Parsing in Next.js Middleware\nDESCRIPTION: Updated approach for parsing user agent information in Next.js middleware using the userAgent function from next/server. This is the recommended way to detect device types and handle user agent information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-user-agent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Links Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure app links for iOS, Android, and web using the `appLinks` property within the `metadata` export in a Next.js layout or page file. It sets the URL and app store ID for iOS, package and app name for Android, and URL and fallback option for web.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  appLinks: {\n    ios: {\n      url: 'https://nextjs.org/ios',\n      app_store_id: 'app_store_id',\n    },\n    android: {\n      package: 'com.example.android/package',\n      app_name: 'app_name_android',\n    },\n    web: {\n      url: 'https://nextjs.org/web',\n      should_fallback: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Build Directory in Next.js - JavaScript\nDESCRIPTION: This snippet configures the Next.js build process to use a custom directory for generated files instead of the default `.next`. The `distDir` option is set within the `next.config.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/distDir.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  distDir: 'build',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Metadata (admins) - JSX\nDESCRIPTION: This code snippet demonstrates how to configure Facebook metadata with the `admins` using the `facebook` property within the `metadata` export in a Next.js layout or page file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_58\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  facebook: {\n    admins: '12345678',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Original Pathname in JavaScript\nDESCRIPTION: This snippet exports a constant, originalPathname, for identifying the original path of a request or resource. This helps keep track of the initial URL structure before any rewriting or manipulation. The export as a variable is configured through TurboPack assertions to maintain integrity.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst originalPathname = 'VAR_ORIGINAL_PATHNAME';\nexport { originalPathname };\nexport { originalPathname as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing files with side effects (JavaScript)\nDESCRIPTION: This code snippet shows how to import a file with side effects inside the `register` function in `instrumentation.js`. The `import` statement is awaited to ensure the side effects are applied before other code executes. This approach colocates all side effects in one place, preventing unintended global side effects. It imports a hypothetical package named 'package-with-side-effect'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function register() {\n  await import('package-with-side-effect')\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Home component test (Pages Router)\nDESCRIPTION: This test checks if the `<Home />` component, located in `pages/index.js`, renders a heading element. It utilizes `@testing-library/react` for rendering and querying the component and `@testing-library/jest-dom` for enhanced Jest matchers. The test renders the component, retrieves the heading, and asserts that it is present in the document.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Home from '../pages/index'\n\ndescribe('Home', () => {\n  it('renders a heading', () => {\n    render(<Home />)\n\n    const heading = screen.getByRole('heading', { level: 1 })\n\n    expect(heading).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses `create next-app` with pnpm to bootstrap a Next.js application using the `with-linaria` example. The new application will be named `with-linaria-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-linaria with-linaria-app\n```\n\n----------------------------------------\n\nTITLE: Environment variables for Cloudflare Turnstile\nDESCRIPTION: These are the environment variables required to connect the Next.js app to Cloudflare Turnstile.  `NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY` is the public site key and `CLOUDFLARE_TURNSTILE_SECRET_KEY` is the secret key.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n- `NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY`\n- `CLOUDFLARE_TURNSTILE_SECRET_KEY`\n```\n\n----------------------------------------\n\nTITLE: Running Development Server in Next.js\nDESCRIPTION: This snippet provides commands to start the development server for a Next.js application using npm, yarn, pnpm, or bun. The server runs locally and is accessible via a web browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites with i18n Support in Next.js\nDESCRIPTION: This configuration demonstrates how to set up rewrites with internationalization (i18n) support. The locale is automatically handled for source and destination paths unless explicitly disabled with locale: false for specific rewrites.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n      },\n      {\n        // it's possible to match all locales even when locale: false is set\n        source: '/:locale/api-alias/:path*',\n        destination: '/api/:path*',\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Build Script for Next.js Export\nDESCRIPTION: Modifies the build script to remove automatic static export, allowing server-side rendering functionality\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-export.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with PNPM\nDESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application using the create-next-app command with pnpm. It sets up the app with the Docker Compose example provided.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-docker-compose with-docker-compose-app\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running Next.js dev server\nDESCRIPTION: These commands install the necessary dependencies for the Next.js application using yarn, and then starts the development server. It assumes that Node.js and Yarn are already installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Cosmos DB Example\nDESCRIPTION: This command initializes a new Next.js application using the `with-azure-cosmos` example.  It uses `create-next-app` to bootstrap the project with the necessary configurations and dependencies for connecting to Azure Cosmos DB. The new app is named `with-azure-cosmos-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-azure-cosmos with-azure-cosmos-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Cosmos DB Example using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the `with-azure-cosmos` example.  It utilizes `yarn create next-app` to bootstrap the project with the relevant configurations and dependencies for Azure Cosmos DB integration.  The resulting application directory will be named `with-azure-cosmos-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-azure-cosmos with-azure-cosmos-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Meilisearch Example (Bun)\nDESCRIPTION: This command utilizes Bun to create a fresh Next.js application using the with-meilisearch example. It sets up the project, incorporating all the necessary files and configurations for seamless Meilisearch integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example with-meilisearch with-meilisearch-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Loader in Next.js\nDESCRIPTION: This code snippet shows how to configure a custom image loader in the `next.config.js` file for static export. It sets the `loader` to `'custom'` and specifies the `loaderFile` path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    loader: 'custom',\n    loaderFile: './my-loader.ts',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Performing Mutations on Convex Database with TypeScript\nDESCRIPTION: This snippet demonstrates a mutation function that inserts a new message into the database. The arguments are validated and processed to modify the data. It includes an example of invoking the mutation within a React component to handle user actions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n    return await ctx.db.get(id);\n  },\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Environment File\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is used to store environment variables specific to the local development environment, and it's typically excluded from version control. Requires a bash-compatible shell.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Exporting Request Async Storage in JavaScript\nDESCRIPTION: This snippet handles the import and export of requestAsyncStorage, which facilitates managing async operations related to requests. TurboPack assertions ensure this is accurately incorporated within the module system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { f as requestAsyncStorage } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nexport { requestAsyncStorage };\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component with src Prop in JSX\nDESCRIPTION: This code snippet demonstrates the use of the <Image> component in JSX with a src prop. The component automatically generates the src and srcset attributes for the resulting <img>. The expected input is the source path of the image, and the output will be a corresponding <img> tag in HTML format.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"/me.jpg\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<img\n  srcset=\n    \"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Root Layout: Removing Default Meta Tags (JSX)\nDESCRIPTION: This code modifies the root layout in Next.js (JSX) by removing the default `meta charset` and `meta viewport` tags from the `<head>`. Next.js automatically includes these tags, so they can be safely removed from the layout file. This simplifies the layout and avoids redundancy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for CircleCI includes the Next.js cache directory in the save_cache step. It saves both node_modules and the Next.js cache, improving build performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - save_cache:\n      key: dependency-cache-{{ checksum \"yarn.lock\" }}\n      paths:\n        - ./node_modules\n        - ./.next/cache\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom App Component in Next.js\nDESCRIPTION: Shows how to override the default App component by creating a pages/_app file. The example demonstrates the minimal implementation that receives Component and pageProps as properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/05-custom-app.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from 'next/app'\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Circular References in getInitialProps\nDESCRIPTION: Demonstrates the issue of circular references in Next.js getInitialProps method and provides guidance on how to properly serialize data for client-side hydration\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/circular-structure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Problematic example with circular reference\ngetInitialProps(context) {\n  const { req } = context;\n  return { req }; // This will cause serialization error\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct approach: Extract specific fields\ngetInitialProps(context) {\n  const { req } = context;\n  return { headers: req.headers }; // Only serialize needed data\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Alphabet Random String Generator in JavaScript\nDESCRIPTION: This snippet defines a function 'customAlphabet' that creates a random string generator using a custom alphabet, leveraging the previously defined 'customRandom'. Dependencies include 'customRandom' and a PRNG. It provides an encapsulated way to get random strings with custom specifications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h as customRandom } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -8\\n};\\nimport { g as random } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -7\\n};\\nlet customAlphabet = (alphabet, size)=>customRandom(alphabet, size, random);\\nexport { customAlphabet };\\nexport { customAlphabet as i } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Stable Release using bun\nDESCRIPTION: This command upgrades Next.js to the latest stable release using bun package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@latest\n```\n\n----------------------------------------\n\nTITLE: Using styled-jsx with Client Components in JavaScript\nDESCRIPTION: This snippet shows how to create a StyledJsxRegistry component using JavaScript for managing styled-jsx in a Next.js application. It incorporates the same logic as the TypeScript version but is written in JavaScript syntax.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\\n\\nimport React, { useState } from 'react'\\nimport { useServerInsertedHTML } from 'next/navigation'\\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\\n\\nexport default function StyledJsxRegistry({ children }) {\\n  // Only create stylesheet once with lazy initial state\\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\\n\\n  useServerInsertedHTML(() => {\\n    const styles = jsxStyleRegistry.styles()\\n    jsxStyleRegistry.flush()\\n    return <>{styles}</>\\n  })\\n\\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Redux (npm)\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js application that integrates with Redux. It specifies the `with-redux` example to create a pre-configured application. The new application will be created in a directory named `with-redux-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-redux with-redux-app\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in Markdown\nDESCRIPTION: This code snippet defines the metadata for a blog post using YAML front matter in a Markdown file. It includes the title, excerpt, cover image, publication date, author details, and OG image URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/_posts/dynamic-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Dynamic Routing and Static Generation\"\nexcerpt: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus.\"\ncoverImage: \"/assets/blog/dynamic-routing/cover.jpg\"\ndate: \"2020-03-16T05:35:07.322Z\"\nauthor:\n  name: JJ Kasper\n  picture: \"/assets/blog/authors/jj.jpeg\"\nogImage:\n  url: \"/assets/blog/dynamic-routing/cover.jpg\"\n---\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 2 Implementation\nDESCRIPTION: This module imports Part 1 and the 'upper' function from 'module', then re-exports it as 'd'. Shows how Turbopack handles import dependencies and re-exports with renaming.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport { upper } from \"module\";\nexport { upper as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling SWC Minification in next.config.js\nDESCRIPTION: This JavaScript code snippet enables SWC (Speedy Web Compiler) for minifying JavaScript in a Next.js application.  Setting `swcMinify` to `true` in `next.config.js` replaces Terser with SWC for potentially faster minification.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  swcMinify: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline CSS in Next.js Configuration - JavaScript\nDESCRIPTION: This JavaScript snippet configures a Next.js application to enable inline CSS by setting the 'inlineCss' flag to true within the 'experimental' configuration. Similar to the TypeScript version, it replaces <link> tags with <style> tags to improve performance under specific scenarios. This feature is experimental and is available in production builds only.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/inlineCss.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    inlineCss: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Invalid Config: Dynamic Assignment - Next.js JavaScript\nDESCRIPTION: This snippet shows an invalid `config` assignment because `config.amp` is defined after the initial export. Also `amp`'s value contains a dynamic expression. The `config` object must be initialized directly without later modification or dynamic values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {}\n// `config.amp` is defined after `config` is exported\nconfig.amp = true\n\n// `config.amp` contains a dynamic expression\nexport const config = {\n  amp: 1 + 1 > 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with react-bootstrap using pnpm\nDESCRIPTION: This command uses pnpm to execute create next-app with the with-react-bootstrap example. It creates a new Next.js application named 'with-react-bootstrap-app' with the react-bootstrap setup. The command requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-bootstrap with-react-bootstrap-app\n```\n\n----------------------------------------\n\nTITLE: Development Module Part 0\nDESCRIPTION: Import and assignment in development environment\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\na = 1;\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Config: Dynamic Runtime - Next.js JavaScript\nDESCRIPTION: This code snippet demonstrates an invalid usage of the `config` export in Next.js where the `runtime` property contains a dynamic expression. The `runtime` property must be a static string literal.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `config.runtime` contains a dynamic expression\nexport const config = {\n  runtime: `node${'js'}`, \n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Stable Release using yarn\nDESCRIPTION: This command upgrades Next.js to the latest stable release using yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@latest\n```\n\n----------------------------------------\n\nTITLE: Inline Script using children\nDESCRIPTION: This code snippet demonstrates how to use an inline script with the Script component by using the element's children. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n</Script>\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in getStaticProps (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle redirects within the `getStaticProps` function in a Next.js page. It fetches data, and if the data is not available (e.g., the API returns an error), it returns a redirect object to navigate the user to a different page (e.g., a 404 page). The `permanent` property specifies whether the redirect is permanent or temporary, and `destination` specifies the target URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-redirect-gssp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n\n  if (!repo) {\n    return {\n      redirect: {\n        permanent: false, // or true\n        destination: '/404',\n      },\n    }\n  }\n\n  return { props: { repo } }\n}) satisfies GetStaticProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Cookies in Next.js Middleware (TS)\nDESCRIPTION: This snippet demonstrates how to access, modify, and set cookies in a Next.js middleware function using the `NextRequest` and `NextResponse` objects. It shows how to get, set, delete, and check for the existence of cookies on both incoming requests and outgoing responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request\n  // Getting cookies from the request using the `RequestCookies` API\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]\n\n  request.cookies.has('nextjs') // => true\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs') // => false\n\n  // Setting cookies on the response using the `ResponseCookies` API\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }\n  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bloom Filter Middleware in Next.js\nDESCRIPTION: Middleware implementation that uses a Bloom filter to efficiently check for potential redirects before making expensive lookups. It initializes a Bloom filter from a JSON file and checks incoming request paths against it before forwarding to a Route Handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)\n\nexport async function middleware(request: NextRequest) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n\n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n\n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n\n      if (redirectData.ok) {\n        const redirectEntry: RedirectEntry | undefined =\n          await redirectData.json()\n\n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n\n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n\n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter)\n\nexport async function middleware(request) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n\n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n\n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n\n      if (redirectData.ok) {\n        const redirectEntry = await redirectData.json()\n\n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n\n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JavaScript with SWC AST Explorer - Rust\nDESCRIPTION: This Rust snippet illustrates the generated abstract syntax tree (AST) for a simple JavaScript `console.log('hello')` command. The shown structure is part of the output when running the SWC AST Explorer. It defines the syntactic representation with nodes like `Script`, `Expr`, `CallExpr`, and their respective properties. This tree is used to understand the JavaScript code structure programmatically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-swc-ast-explorer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nScript(\n  Script {\n    body: [\n      Expr(\n        ExprStmt {\n          expr: Call(\n            CallExpr {\n              callee: Expr(\n                Member(\n                  MemberExpr {\n                    obj: Ident(\n                      Ident {\n                        sym: Atom('console' type=inline),\n                        optional: false,\n                      },\n                    ),\n                    prop: Ident(\n                      Ident {\n                        sym: Atom('log' type=inline),\n                        optional: false,\n                      },\n                    ),\n                  },\n                ),\n              ),\n              args: [\n                ExprOrSpread {\n                  spread: None,\n                  expr: Lit(\n                    Str(\n                      Str {\n                        value: Atom('hello' type=inline),\n                        raw: Some(\n                          \"'hello'\",\n                        ),\n                      },\n                    ),\n                  ),\n                },\n              ],\n              type_args: None,\n            },\n          ),\n        },\n      ),\n    ],\n    shebang: None,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing BubbledError Class in JavaScript\nDESCRIPTION: Definition of a BubbledError class which extends Error to handle bubbling errors throughout the Next.js application. This class captures both the bubble flag and result for special error handling in trace spans.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass BubbledError extends Error {\n    constructor(bubble, result){\n        super();\n        this.bubble = bubble;\n        this.result = result;\n    }\n}\nexport { BubbledError as s } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Handling SIGTERM and SIGINT Signals - Next.js\nDESCRIPTION: This JavaScript code shows how to register handlers for `SIGTERM` and `SIGINT` signals in a Next.js application's `_document.js` file when manual signal handling is enabled using the `NEXT_MANUAL_SIG_HANDLE` environment variable.  The handlers log a message and then exit the process, allowing you to perform cleanup tasks before the server shuts down. This code is placed inside an if statement that checks the `NEXT_MANUAL_SIG_HANDLE` environment variable to ensure that the signal handlers are only registered when the feature is enabled.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nif (process.env.NEXT_MANUAL_SIG_HANDLE) {\n  process.on('SIGTERM', () => {\n    console.log('Received SIGTERM: cleaning up')\n    process.exit(0)\n  })\n  process.on('SIGINT', () => {\n    console.log('Received SIGINT: cleaning up')\n    process.exit(0)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next App with styled-components using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the with-styled-components example. It uses pnpm to execute create next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-styled-components with-styled-components-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Archives Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure an archive link using the `archives` property within the `metadata` export in a Next.js layout or page file. It sets the URL for the archive.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  archives: ['https://nextjs.org/13'],\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Development Server\nDESCRIPTION: Installs the required npm packages for the project and then starts the Next.js development server.  The server will run on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly Target for SWC\nDESCRIPTION: Command to build the WebAssembly version of the SWC compiler. Requires wasm-pack to be installed. The target parameter specifies the WebAssembly target architecture.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=@next/swc build-wasm --target <wasm_target>\n```\n\n----------------------------------------\n\nTITLE: Report Server Errors with onRequestError in instrumentation.ts\nDESCRIPTION: Tracks server errors by sending them to a custom observability provider. It receives the error, request, and context, and sends a POST request to a specified endpoint with the error details in JSON format. The error instance may have been processed by React during Server Components rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Instrumentation } from 'next'\n\nexport const onRequestError: Instrumentation.onRequestError = async (\n  err,\n  request,\n  context\n) => {\n  await fetch('https://.../report-error', {\n    method: 'POST',\n    body: JSON.stringify({\n      message: err.message,\n      request,\n      context,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Keys for Localhost with OpenSSL\nDESCRIPTION: This command creates a self-signed X.509 certificate and a private key for localhost. OpenSSL must be installed for executing this command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \\\n  -keyout localhost-privkey.pem -out localhost-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Vitest using pnpm\nDESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Vitest integration using pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-vitest with-vitest-app\n```\n\n----------------------------------------\n\nTITLE: Third-party Integration Before Connection API\nDESCRIPTION: Example showing problematic third-party integration that needs to be updated with connection API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getDataFrom3rdParty } from '3rdparty'\n\nexport default function Page() {\n  // Imagine this function access Request data synchronously\n  // on the inside even if it has an async external interface\n  const token = await getDataFrom3rdParty();\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Hydration Warnings in React (JSX)\nDESCRIPTION: This code snippet demonstrates how to suppress hydration warnings in React using the `suppressHydrationWarning` prop.  By adding this prop to an element, you can prevent React from displaying warnings about mismatches between the server-rendered and client-rendered content.  This is useful for cases where the content is expected to differ slightly between the server and client, but should be used sparingly as it masks potential issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<time datetime=\"2016-10-25\" suppressHydrationWarning />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with TypeScript (npm)\nDESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the TypeScript example. It leverages npm to create a project named `with-typescript-app` based on the specified example.  This command is executed in the terminal.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-typescript with-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Contentful example using pnpm\nDESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project using the cms-contentful example. It creates a directory named cms-contentful-app using pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-contentful cms-contentful-app\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (npm)\nDESCRIPTION: These commands install the project dependencies using npm and then start the development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the react-remove-properties example. It clones the example and sets up a new project directory called react-remove-properties-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example react-remove-properties react-remove-properties-app\n```\n\n----------------------------------------\n\nTITLE: Push Notification Manager Component - JavaScript\nDESCRIPTION: This React component manages push notification subscriptions. It checks for service worker and PushManager support, registers a service worker, handles subscribing and unsubscribing, and sends test notifications.  It uses React's useState and useEffect hooks to manage the component's state and side effects. It also utilizes server actions to handle the actual subscribing, unsubscribing, and notification sending logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction PushNotificationManager() {\n  const [isSupported, setIsSupported] = useState(false);\n  const [subscription, setSubscription] = useState(null);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      setIsSupported(true);\n      registerServiceWorker();\n    }\n  }, []);\n\n  async function registerServiceWorker() {\n    const registration = await navigator.serviceWorker.register('/sw.js', {\n      scope: '/',\n      updateViaCache: 'none',\n    });\n    const sub = await registration.pushManager.getSubscription();\n    setSubscription(sub);\n  }\n\n  async function subscribeToPush() {\n    const registration = await navigator.serviceWorker.ready;\n    const sub = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(\n        process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!\n      ),\n    });\n    setSubscription(sub);\n    await subscribeUser(sub);\n  }\n\n  async function unsubscribeFromPush() {\n    await subscription?.unsubscribe();\n    setSubscription(null);\n    await unsubscribeUser();\n  }\n\n  async function sendTestNotification() {\n    if (subscription) {\n      await sendNotification(message);\n      setMessage('');\n    }\n  }\n\n  if (!isSupported) {\n    return <p>Push notifications are not supported in this browser.</p>;\n  }\n\n  return (\n    <div>\n      <h3>Push Notifications</h3>\n      {subscription ? (\n        <>\n          <p>You are subscribed to push notifications.</p>\n          <button onClick={unsubscribeFromPush}>Unsubscribe</button>\n          <input\n            type=\"text\"\n            placeholder=\"Enter notification message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <button onClick={sendTestNotification}>Send Test</button>\n        </>\n      ) : (\n        <>\n          <p>You are not subscribed to push notifications.</p>\n          <button onClick={subscribeToPush}>Subscribe</button>\n        </>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Packages to Latest Version using npm\nDESCRIPTION: This command updates the React and React DOM packages to the latest versions using npm.  It ensures that you're using a compatible React version with Next.js 12.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File\nDESCRIPTION: This command copies the example environment variable file to a local environment file.  This allows for environment specific configuration without committing sensitive information to source control.  The `.env.local` file is intended to be ignored by Git.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Importing Global This Reference\nDESCRIPTION: Imports a custom global context reference for cross-platform environment handling\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _globalThis } from './globalThis';\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Magic Example\nDESCRIPTION: These commands use create-next-app to bootstrap a new Next.js project using the with-magic example. It demonstrates how to initialize the project with npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-magic with-magic-app\n```\n\n----------------------------------------\n\nTITLE: Importing Components with External Styles\nDESCRIPTION: This snippet demonstrates importing a dialog component that requires its own external CSS styles, showcasing how to structure imports in related files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react'\nimport { Dialog } from '@reach/dialog'\nimport VisuallyHidden from '@reach/visually-hidden'\nimport '@reach/dialog/styles.css'\n\nfunction ExampleDialog(props) {\n  const [showDialog, setShowDialog] = useState(false)\n  const open = () => setShowDialog(true)\n  const close = () => setShowDialog(false)\n\n  return (\n    <div>\n      <button onClick={open}>Open Dialog</button>\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <button className=\"close-button\" onClick={close}>\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden>×</span>\n        </button>\n        <p>Hello there. I am a dialog</p>\n      </Dialog>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Caching a Component with Props-based Cache Keys (JavaScript)\nDESCRIPTION: Shows how to implement 'use cache' in a JavaScript component that accepts props. The component will be cached based on the props value, allowing reuse of the same cached output when props match.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function Bookings({ type = 'haircut' }) {\n  'use cache'\n  async function getBookingsData() {\n    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)\n    return data\n  }\n  return //...\n}\n```\n\n----------------------------------------\n\nTITLE: Copying .env.local.example to .env.local (Bash)\nDESCRIPTION: This command copies the example environment file to a local environment file. This allows you to configure your project without affecting the original example file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Enabling 'use cache' in Next.js Configuration (TypeScript)\nDESCRIPTION: Shows how to enable the experimental 'use cache' feature by adding the useCache option to the next.config.ts file. This is required before using the 'use cache' directive in your components or functions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    useCache: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Installing devlow-bench via npm (Bash)\nDESCRIPTION: This snippet demonstrates how to install the devlow-bench package using npm. Installation requires npm to be installed on the system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install devlow-bench\n```\n\n----------------------------------------\n\nTITLE: Declaring clientComponentLoadTimes Variable in JavaScript\nDESCRIPTION: This snippet declares a variable 'clientComponentLoadTimes' initialized to 0, used for recording the total loading times of client components. No external dependencies are required for this declaration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet clientComponentLoadTimes = 0;\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for NextResponse.next() Error\nDESCRIPTION: Documentation explaining that Route Handlers must return a Response object directly instead of using NextResponse.next(). Route Handlers are considered the end of the middleware chain and cannot forward to next middleware.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-response-next-in-app-route-handler.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Why This Error Occurred\n\nRoute Handlers in the Next.js App Router do not support using the `NextResponse.next()` method to forward to the next Middleware.\n\nThe Route Handler is considered the end of the middleware \"chain\". Handlers must always return a `Response` object instead.\n\n## Possible Ways to Fix It\n\nRemove the `NextResponse.next()` and replace it with a correct response handler.\n\n## Useful Links\n\n- [Route Handlers](/docs/app/building-your-application/routing/route-handlers)\n- [`NextResponse`](/docs/app/api-reference/functions/next-response)\n```\n\n----------------------------------------\n\nTITLE: Declaring Random Number in JavaScript\nDESCRIPTION: This snippet generates a random number using Math.random() and stores it in the 'random' variable. No external dependencies are required, but a JavaScript environment is necessary. This forms part of the shared state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst random = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Canary Release using bun\nDESCRIPTION: This command upgrades Next.js to the latest canary release using bun package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@canary\n```\n\n----------------------------------------\n\nTITLE: Handling popstate events with router.beforePopState\nDESCRIPTION: This code snippet shows how to use `router.beforePopState` to intercept and potentially override browser history navigation.  It uses `useEffect` to register a callback that checks the URL and redirects to a 404 page if it doesn't match allowed routes.  This provides control over which routes are rendered by Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  useEffect(() => {\n    router.beforePopState(({ url, as, options }) => {\n      // I only want to allow these two routes!\n      if (as !== '/' && as !== '/other') {\n        // Have SSR render bad routes as a 404.\n        window.location.href = as\n        return false\n      }\n\n      return true\n    })\n  }, [router])\n\n  return <p>Welcome to the page</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Pages with getStaticPaths and getStaticProps in Next.js\nDESCRIPTION: This code demonstrates how to create a dynamic post page with fallback functionality using Next.js. It includes the use of useRouter to detect fallback state, getStaticPaths to define pre-rendered paths, and getStaticProps for data fetching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nfunction Post({ post }) {\n  const router = useRouter()\n\n  // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n  if (router.isFallback) {\n    return <div>Loading...</div>\n  }\n\n  // Render post...\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  return {\n    // Only `/posts/1` and `/posts/2` are generated at build time\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n    // Enable statically generating additional pages\n    // For example: `/posts/3`\n    fallback: true,\n  }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return {\n    props: { post },\n    // Re-generate the post at most once per second\n    // if a request comes in\n    revalidate: 1,\n  }\n}\n\nexport default Post\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Vitest using npx\nDESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Vitest integration using npx.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-vitest with-vitest-app\n```\n\n----------------------------------------\n\nTITLE: Using useEffect for Client-Side Rendering in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `useEffect` hook in a Next.js component to ensure that certain code only runs on the client-side, avoiding hydration mismatches.  The `useEffect` hook sets a state variable `isClient` to true after the component mounts, which then determines whether to render \"This is never prerendered\" or \"Prerendered\". This prevents hydration issues that arise from differences between server and client environments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\n\nexport default function App() {\n  const [isClient, setIsClient] = useState(false)\n\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n\n  return <h1>{isClient ? 'This is never prerendered' : 'Prerendered'}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Options Overview in Next.js\nDESCRIPTION: Detailed exploration of various styling methodologies supported in Next.js, highlighting their key characteristics, benefits, and potential use cases.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **CSS Modules**: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.\n- **Global CSS**: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.\n- **Tailwind CSS**: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.\n- **Sass**: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.\n- **CSS-in-JS**: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling.\n```\n\n----------------------------------------\n\nTITLE: Using worker Strategy (Pages Router, TSX)\nDESCRIPTION: This code snippet illustrates using the `worker` strategy with the `Script` component in a Next.js application using the Pages Router. It offloads the script to a web worker to free up the main thread. Note: This strategy is experimental and requires enabling `nextScriptWorkers` in `next.config.js`. It only currently works in the `pages/` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WASM Module in Next.js Middleware\nDESCRIPTION: Demonstrates the correct way to import and use WebAssembly modules in Next.js middleware by using static imports instead of dynamic compilation. The example shows how to instantiate a WASM module, execute its exported function, and set the result in response headers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-dynamic-wasm-compilation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport squareWasm from './square.wasm?module'\n\nexport default async function middleware() {\n  const m = await WebAssembly.instantiate(squareWasm)\n  const answer = m.exports.square(9)\n  const response = NextResponse.next()\n\n  response.headers.set('x-square', answer.toString())\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image in Vite\nDESCRIPTION: This code snippet demonstrates how Vite handles static image imports. Importing an image file returns its public URL as a string, which can then be used directly within the `src` attribute of an `<img>` tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production\n\nexport default function App() {\n  return <img src={image} />\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Content with Cheerio Rendering\nDESCRIPTION: Uses Cheerio to parse and verify page content by selecting and checking text of HTML elements\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('should work using cheerio', async () => {\n  const $ = await next.render$()\n  expect($('p').text()).toBe('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Web Worker - JavaScript\nDESCRIPTION: This code snippet demonstrates how to load a third-party script into a web worker using the `worker` strategy in Next.js with JavaScript. This offloads the script execution to a web worker, improving main thread performance. Requires `nextScriptWorkers` to be enabled. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Tracing Components\nDESCRIPTION: Re-exports various tracing components from different parts of the module, including getTracer, SpanStatusCode, BubbledError, SpanKind, and isBubbledError.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nexport { getTracer } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getTracer\"\n};\nexport { SpanStatusCode } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export SpanStatusCode\"\n};\nexport { BubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export BubbledError\"\n};\nexport { SpanKind } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export SpanKind\"\n};\nexport { isBubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export isBubbledError\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbopack in next.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure Turbopack within the `next.config.js` file. It showcases how to define aliases for module resolution and extend file extensions for module resolution. Turbopack replaces webpack, allowing for configurations like `resolveAlias` and `resolveExtensions` directly within the `turbopack` key.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/08-turbopack.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  turbopack: {\n    // Example: adding an alias and custom file extension\n    resolveAlias: {\n      underscore: 'lodash',\n    },\n    resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.json'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with Supabase Starter Template using Yarn\nDESCRIPTION: Command to create a new Next.js application using the Supabase Starter template with Yarn. Creates a project with pre-configured Supabase authentication and integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-supabase with-supabase-app\n```\n\n----------------------------------------\n\nTITLE: Structured Error Handler Implementation\nDESCRIPTION: Implements structured error handling functionality that parses error stacks and formats error objects. Includes integration with stack trace parser and proper error handling utilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction structuredError(e) {\n    e = getProperError(e);\n    return {\n        name: e.name,\n        message: e.message,\n        stack: typeof e.stack === \"string\" ? parseStackTrace(e.stack) : []\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Designing Loading UI in Next.js JavaScript\nDESCRIPTION: This JavaScript snippet shows a simple loading UI component for use in a Next.js application. It is used to provide feedback while data fetch is ongoing, typically during asynchronous operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Loading() {\n  return <div>Loading...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration - Dog String\nDESCRIPTION: Declares and initializes a string variable 'dog'\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet dog = \"dog\";\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 14 with Yarn\nDESCRIPTION: Command to upgrade Next.js to version 14 using Yarn package manager. Includes installation of React 18 and ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@next-14 react@18 react-dom@18 && yarn add eslint-config-next@next-14 -D\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with pnpm\nDESCRIPTION: This command uses `create-next-app` via `pnpm` to create a new Next.js application based on the `blog-starter` example.  It downloads the specified example and creates a new project named `blog-starter-app` in the current directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example blog-starter blog-starter-app\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm and yarn\nDESCRIPTION: These commands install project dependencies listed in the `package.json` using either npm or yarn, preparing the development environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with WindiCSS Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application with the WindiCSS example. It initializes a project named 'with-windicss-app' based on the 'with-windicss' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-windicss with-windicss-app\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Named Exports (Pages Router)\nDESCRIPTION: This code snippet demonstrates how to lazy load a named export using `next/dynamic` in the `pages` router.  It imports the `Hello` function from `../components/hello` dynamically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.js\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)\n```\n\n----------------------------------------\n\nTITLE: Defining generateImageMetadata with Params (JSX)\nDESCRIPTION: This code snippet shows how to define the `generateImageMetadata` function in JavaScript, including an optional `params` argument. The `params` object contains dynamic route parameters from the root segment down to the segment where `generateImageMetadata` is called.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function generateImageMetadata({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting MDX Metadata (MDX)\nDESCRIPTION: This MDX code snippet illustrates how to export metadata from an MDX file as a JavaScript object. This allows external components to import and use the metadata. The `metadata` object can contain information such as the author, title, or any other relevant data about the MDX content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_23\n\nLANGUAGE: mdx\nCODE:\n```\nexport const metadata = {\n  author: 'John Doe',\n}\n\n# Blog post\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode\nDESCRIPTION: These commands install the necessary dependencies and start the Next.js development server. `npm install` or `yarn install` install the project dependencies, while `npm run dev` or `yarn dev` start the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Generating a React Component Tree with Fuzzponent CLI\nDESCRIPTION: Example command to create a dependency tree with 3020 files in the components directory. It specifies a depth of 2 levels and uses seed 206 for deterministic generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/fuzzponent/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfuzzponent --depth 2 --seed 206 --outdir components\n```\n\n----------------------------------------\n\nTITLE: Patching Fetch with Async Storage and Server Hooks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to patch the fetch function to include additional functionality provided by server hooks and asynchronous storage. The patchFetch function integrates these components, enhancing the fetch operation within the server environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { g as workAsyncStorage } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch';\nimport { h as serverHooks } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        workAsyncStorage\n    });\n}\nexport { patchFetch };\nexport { serverHooks };\nexport { workAsyncStorage };\nexport { patchFetch as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Login Page Component in Next.js\nDESCRIPTION: Creates a basic login page component that renders a Login component, demonstrating the main login route implementation\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Login } from '@\\/app\\/ui\\/login'\n\nexport default function Page() {\n  return <Login \\/>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Login } from '@\\/app\\/ui\\/login'\n\nexport default function Page() {\n  return <Login \\/>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Auth0 App with pnpm\nDESCRIPTION: Command to bootstrap a Next.js application with Auth0 integration using pnpm and create-next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example auth0 auth0-app\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Command for Next.js Project Creation\nDESCRIPTION: The fundamental command to create a new Next.js application using npx, allowing optional project naming and configuration options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest [project-name] [options]\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode with npm\nDESCRIPTION: These commands first install the required node modules using `npm install` and then start the Next.js development server using `npm run dev`.  This makes the application available for local development and testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating gridColumn Styling Function\nDESCRIPTION: Defines the gridColumn styling function using the style utility to handle the 'gridColumn' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 18\n};\nconst gridColumn = style({\n    prop: 'gridColumn'\n});\nexport { gridColumn as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Invalid Config: String Value - Next.js JavaScript\nDESCRIPTION: This code snippet demonstrates an invalid usage of the `config` export in Next.js. The `config` should be an object, not a string. This will lead to the \"Invalid Page / API Route Config\" error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `config` should be an object\nexport const config = 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with react-multi-carousel Example (pnpm)\nDESCRIPTION: This command leverages pnpm to generate a new Next.js application using the react-multi-carousel example. It initializes a project directory named 'with-react-multi-carousel-app' populated with the example's code and configuration. pnpm must be installed and configured for this command to execute successfully.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-multi-carousel with-react-multi-carousel-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page in Next.js\nDESCRIPTION: Defines a simple page component that renders a heading. In Next.js, pages are created by exporting a default React component from a page file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello Next.js!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Appending to Variable and Exporting - JavaScript\nDESCRIPTION: This snippet imports 'foobar', modifies it by appending the string 'foo', highlighting dynamic variable manipulation. There's no export included but showcases internal state changes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nfoobar += \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Module Dependencies with Mermaid Flowchart\nDESCRIPTION: A Mermaid graph visualization showing the relationships between various module items, import bindings, and exports. This flowchart helps visualize the dependency tree and module interconnections.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, ImportOfModule)]\"];\n    N1[\"Items: [ItemId(0, ImportBinding(0))]\"];\n    N2[\"Items: [ItemId(1, ImportOfModule)]\"];\n    N3[\"Items: [ItemId(1, ImportBinding(0))]\"];\n    N4[\"Items: [ItemId(2, ImportOfModule)]\"];\n    N5[\"Items: [ItemId(2, ImportBinding(0))]\"];\n    N6[\"Items: [ItemId(2, ImportBinding(1))]\"];\n    N7[\"Items: [ItemId(3, ImportOfModule)]\"];\n    N8[\"Items: [ItemId(3, ImportBinding(0))]\"];\n    N9[\"Items: [ItemId(4, ImportOfModule)]\"];\n    N10[\"Items: [ItemId(4, ImportBinding(0))]\"];\n    N11[\"Items: [ItemId(5, VarDeclarator(0))]\"];\n    N12[\"Items: [ItemId(6, Normal)]\"];\n    N13[\"Items: [ItemId(7, Normal), ItemId(Export((\\\"gap\\\", #2), \\\"gap\\\"))]\"];\n    N14[\"Items: [ItemId(8, VarDeclarator(0))]\"];\n    N15[\"Items: [ItemId(9, Normal)]\"];\n    N16[\"Items: [ItemId(10, Normal), ItemId(Export((\\\"columnGap\\\", #2), \\\"columnGap\\\"))]\"];\n    N17[\"Items: [ItemId(11, VarDeclarator(0))]\"];\n    N18[\"Items: [ItemId(12, Normal)]\"];\n    N19[\"Items: [ItemId(13, Normal), ItemId(Export((\\\"rowGap\\\", #2), \\\"rowGap\\\"))]\"];\n    N20[\"Items: [ItemId(14, VarDeclarator(0))]\"];\n    N21[\"Items: [ItemId(15, VarDeclarator(0))]\"];\n    N22[\"Items: [ItemId(16, VarDeclarator(0))]\"];\n    N23[\"Items: [ItemId(17, VarDeclarator(0))]\"];\n    N24[\"Items: [ItemId(18, VarDeclarator(0))]\"];\n    N25[\"Items: [ItemId(19, VarDeclarator(0))]\"];\n    N26[\"Items: [ItemId(20, VarDeclarator(0))]\"];\n    N27[\"Items: [ItemId(21, VarDeclarator(0))]\"];\n    N28[\"Items: [ItemId(22, VarDeclarator(0)), ItemId(Export((\\\"gridArea\\\", #2), \\\"gridArea\\\"))]\"];\n    N29[\"Items: [ItemId(23, VarDeclarator(0)), ItemId(24, Normal), ItemId(Export((\\\"__TURBOPACK__default__export__\\\", #12), \\\"default\\\"))]\"];\n    N30[\"Items: [ItemId(Export((\\\"gridAutoColumns\\\", #2), \\\"gridAutoColumns\\\"))]\"];\n    N31[\"Items: [ItemId(Export((\\\"gridAutoFlow\\\", #2), \\\"gridAutoFlow\\\"))]\"];\n    N32[\"Items: [ItemId(Export((\\\"gridAutoRows\\\", #2), \\\"gridAutoRows\\\"))]\"];\n    N33[\"Items: [ItemId(Export((\\\"gridColumn\\\", #2), \\\"gridColumn\\\"))]\"];\n    N34[\"Items: [ItemId(Export((\\\"gridRow\\\", #2), \\\"gridRow\\\"))]\"];\n    N35[\"Items: [ItemId(Export((\\\"gridTemplateAreas\\\", #2), \\\"gridTemplateAreas\\\"))]\"];\n    N36[\"Items: [ItemId(Export((\\\"gridTemplateColumns\\\", #2), \\\"gridTemplateColumns\\\"))]\"];\n    N37[\"Items: [ItemId(Export((\\\"gridTemplateRows\\\", #2), \\\"gridTemplateRows\\\"))]\"];\n    N2 --> N0;\n    N4 --> N2;\n    N7 --> N4;\n    N9 --> N7;\n    N11 --> N5;\n    N11 --> N6;\n    N11 --> N8;\n    N11 --> N9;\n    N12 --> N11;\n    N12 --> N10;\n    N16 --> N15;\n    N13 --> N12;\n    N14 --> N5;\n    N14 --> N6;\n    N14 --> N8;\n    N14 --> N12;\n    N15 --> N14;\n    N15 --> N10;\n    N28 --> N27;\n    N28 --> N1;\n    N17 --> N5;\n    N17 --> N6;\n    N17 --> N8;\n    N17 --> N15;\n    N18 --> N17;\n    N18 --> N10;\n    N13 --> N11;\n    N16 --> N14;\n    N20 --> N1;\n    N20 --> N18;\n    N21 --> N1;\n    N21 --> N20;\n    N22 --> N1;\n    N22 --> N21;\n    N23 --> N1;\n    N23 --> N22;\n    N24 --> N1;\n    N24 --> N23;\n    N25 --> N1;\n    N25 --> N24;\n    N26 --> N1;\n    N26 --> N25;\n    N27 --> N1;\n    N27 --> N26;\n    N8 --> N7;\n    N19 --> N18;\n    N19 --> N17;\n    N33 --> N20;\n    N34 --> N21;\n    N31 --> N22;\n    N30 --> N23;\n    N32 --> N24;\n    N36 --> N25;\n    N37 --> N26;\n    N35 --> N27;\n    N6 --> N4;\n    N10 --> N9;\n    N1 --> N0;\n    N3 --> N2;\n    N5 --> N4;\n```\n\n----------------------------------------\n\nTITLE: Converting React Class Component to Function Component in Next.js\nDESCRIPTION: This snippet shows how to refactor a React Class Component into a Function Component to comply with Server Component restrictions in Next.js. The Function Component does not require state management and renders directly without lifecycle methods.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/class-component-in-server-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/page.js\"\nexport default function Page() {\n  return <p>Hello world</p>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional PostCSS configuration in Next.js (JavaScript)\nDESCRIPTION: This JavaScript configuration file for PostCSS conditionally includes plugins based on the `NODE_ENV` environment variable. In production, it includes `postcss-flexbugs-fixes` and `postcss-preset-env` with Autoprefixer settings. In development, no transformations are applied. The object-based format to include PostCSS Plugins is used for interoperability.  Requires `postcss-flexbugs-fixes` and `postcss-preset-env` as installed dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins:\n    process.env.NODE_ENV === 'production'\n      ? [\n          'postcss-flexbugs-fixes',\n          [\n            'postcss-preset-env',\n            {\n              autoprefixer: {\n                flexbox: 'no-2009',\n              },\n              stage: 3,\n              features: {\n                'custom-properties': false,\n              },\n            },\n          ],\n        ]\n      : [\n          // No transformations in development\n        ],\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multi-match Route Configuration\nDESCRIPTION: Example of an invalid route configuration where multi-match parameter is not properly handled in the destination route\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-multi-match.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  source: '/:path*',\n  destination: '/another/:path'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Magic Example using pnpm\nDESCRIPTION: These commands use create-next-app to bootstrap a new Next.js project using the with-magic example. It demonstrates how to initialize the project with npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-magic with-magic-app\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration - Second Item\nDESCRIPTION: Declares constant variable 'b' with string value 'b'\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = \"b\";\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using pnpm\nDESCRIPTION: This command initializes a new Next.js application named `api-routes-rest-app` using the `api-routes-rest` example. It uses the `create next-app` command from pnpm to generate the project structure based on the provided example, enabling the creation of RESTful APIs within a Next.js environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npnpm create next-app --example api-routes-rest api-routes-rest-app\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Preview Build from Specific Commit\nDESCRIPTION: JSON configuration to use a Next.js preview build from a specific commit in a project's package.json.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"next\": \"https://vercel-packages.vercel.app/next/commits/188f76947389a27e9bcff8ebf9079433679256a7/next\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Phase-based Configuration\nDESCRIPTION: Shows how to create different configurations based on the build phase using next/constants.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nconst { PHASE_DEVELOPMENT_SERVER } = require('next/constants')\n\nmodule.exports = (phase, { defaultConfig }) => {\n  if (phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n\n  return {\n    /* config options for all phases except development here */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Login Form in Next.js Pages Router (TypeScript)\nDESCRIPTION: This code snippet shows a login form implemented in the Next.js pages directory using TypeScript. It handles form submission, retrieves email and password from the form data, and sends a POST request to an API route for authentication. Upon successful authentication, it redirects the user to the profile page. It uses TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function LoginPage() {\n  const router = useRouter()\n\n  async function handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email')\n    const password = formData.get('password')\n\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (response.ok) {\n      router.push('/profile')\n    } else {\n      // Handle errors\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing structuredError Function\nDESCRIPTION: Defines a function to create a structured error object with name, message, and parsed stack trace.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { parse as parseStackTrace } from \"../compiled/stacktrace-parser\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getProperError } from \"./error\";\nfunction structuredError(e) {\n    e = getProperError(e);\n    return {\n        name: e.name,\n        message: e.message,\n        stack: typeof e.stack === \"string\" ? parseStackTrace(e.stack) : []\n    };\n}\nexport { structuredError as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying System Information with Next.js CLI\nDESCRIPTION: The snippet shows the output of the `next info` command, which is used to gather and display system information useful for reporting issues. The output includes details like operating system specifications, available memory and CPU cores, as well as versions of relevant binaries and packages. This command is useful during debugging or when submitting GitHub issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n```\n\n----------------------------------------\n\nTITLE: XML Output for Localized Sitemap\nDESCRIPTION: The XML output for a localized sitemap that includes language alternates. Shows how the alternates.languages property is transformed into xhtml:link elements with appropriate hreflang attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  <url>\n    <loc>https://acme.com</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/about\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/about\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/blog\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/blog\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Statically Generate Routes with generateStaticParams in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` in a Next.js application to statically generate routes for blog posts at build time. It fetches a list of posts from an API and returns an array of objects, where each object contains the `slug` parameter for a dynamic route segment.  The `Page` component then uses the `slug` parameter to render the content of each post.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\n// Return a list of `params` to populate the [slug] dynamic segment\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n\n// Multiple versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Persisting Application State Before Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the window.onbeforeunload event to store application state into local storage before a page navigation. It requires access to the application state, often from a state management library like Redux. This allows for persistence across page reloads, capturing the app state as a JSON string and storing it under the key 'app-state'. The method does not provide the capability to execute asynchronous operations during its execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-on-app-updated-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.onbeforeunload = function (e) {\n  // Get the application state (usually from a store like Redux)\n  const appState = {}\n  localStorage.setItem('app-state', JSON.stringify(appState))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Forms App with PNPM\nDESCRIPTION: Command to create a new Next.js application with forms example using PNPM package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example next-forms next-forms-app\n```\n\n----------------------------------------\n\nTITLE: Exporting TurboPack Parts for Next.js Dynamic API Tracking\nDESCRIPTION: Exports various functions from TurboPack parts used for tracking dynamic data access, managing prerender state, and handling postponed operations. These exports are essential for Next.js server components and dynamic rendering features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nexport { createPrerenderState } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export createPrerenderState\"\n};\nexport { markCurrentScopeAsDynamic } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export markCurrentScopeAsDynamic\"\n};\nexport { trackDynamicDataAccessed } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export trackDynamicDataAccessed\"\n};\nexport { Postpone } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export Postpone\"\n};\nexport { trackDynamicFetch } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export trackDynamicFetch\"\n};\nexport { usedDynamicAPIs } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export usedDynamicAPIs\"\n};\nexport { formatDynamicAPIAccesses } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export formatDynamicAPIAccesses\"\n};\nexport { createPostponedAbortSignal } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export createPostponedAbortSignal\"\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Exporting Dog Reference with Turbopack in JavaScript\nDESCRIPTION: This snippet imports a variable `dog`, sets it, and exports a reference object `dogRef` that contains methods to get and set the `dog` variable. It manages the pet state through methods and provides exports for usage in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as dog } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -0\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 4\\n};\\nfunction getDog() {\\n    return dog;\\n}\\nfunction setDog(newDog) {\\n    dog = newDog;\\n}\\nconst dogRef = {\\n    initial: dog,\\n    get: getDog,\\n    set: setDog\\n};\\nexport { dogRef };\\nexport { getDog as b } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\\nexport { setDog as c } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\\nexport { dogRef as d } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: 404 Not Found Error Handling\nDESCRIPTION: Implementation of 404 error handling using Next.js notFound function and custom not-found page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPostBySlug } from '@/lib/posts'\n\nexport default async function Page({ params }: { params: { slug: string } }) {\n  const { slug } = await params\n  const post = getPostBySlug(slug)\n\n  if (!post) {\n    notFound()\n  }\n\n  return <div>{post.title}</div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPostBySlug } from '@/lib/posts'\n\nexport default async function Page({ params }) {\n  const { slug } = await params\n  const post = getPostBySlug(slug)\n\n  if (!post) {\n    notFound()\n  }\n\n  return <div>{post.title}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Analyzer as a Function\nDESCRIPTION: Alternative configuration method for next.config.js using a function-based approach\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (phase, defaultConfig) => {\n  return withBundleAnalyzer(defaultConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @vercel/speed-insights Package\nDESCRIPTION: The snippet highlights the installation of the @vercel/speed-insights package in a Next.js application as an alternative to the deprecated analyticsId for tracking Core Web Vitals.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/deprecated-analyticsid.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @vercel/speed-insights\n```\n\n----------------------------------------\n\nTITLE: Storage and Hooks Initialization\nDESCRIPTION: Destructures and initializes async storage and server hooks from the route module\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { requestAsyncStorage, workAsyncStorage, serverHooks } = routeModule;\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users Based on Authentication Status (JSX)\nDESCRIPTION: This code shows how to redirect users to a login page if they are not authenticated. It uses the useRouter hook and useEffect to check the user's authentication status. If the user is not authenticated and is not currently loading, router.push is called to redirect them to '/login'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n\nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (!(user || loading)) {\n      router.push('/login')\n    }\n  }, [user, loading])\n\n  return <p>Redirecting...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Grid Utilities with TurboPack in JavaScript\nDESCRIPTION: This code imports various grid-related styling functions and composes them into a single grid utility function. It uses TurboPack's module system for code splitting and optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport compose from './compose';\nimport { g as gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -11\n};\nimport { h as columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nimport { i as rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport { j as gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nimport { k as gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nimport { l as gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nimport { m as gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -23\n};\nimport { n as gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -24\n};\nimport { o as gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -25\n};\nimport { p as gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -26\n};\nimport { q as gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -27\n};\nimport { r as gridArea } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -28\n};\nconst grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\nconst __TURBOPACK__default__export__ = grid;\nexport { __TURBOPACK__default__export__ as default };\nexport { grid as s } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { __TURBOPACK__default__export__ as t } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: SWC Binary Configuration\nDESCRIPTION: Package.json configuration to resolve SWC binary loading issues by adding optional dependencies for different platforms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing-using-local-app.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"optionalDependencies\": {\n    \"@next/swc-linux-x64-gnu\": \"canary\",\n    \"@next/swc-win32-x64-msvc\": \"canary\",\n    \"@next/swc-darwin-x64\": \"canary\",\n    \"@next/swc-darwin-arm64\": \"canary\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Creation with Variables in Javascript\nDESCRIPTION: This code declares a constant `shared` and initializes it to an object. The object contains the variables `value`, `value2`, and `value3`, indicating a dependency on their respective declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst shared = {\n    value,\n    value2,\n    value3\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Icons from a Design System in JavaScript\nDESCRIPTION: This code snippet demonstrates the import and usage of icon components (`Cart` and `Search`) from a design system. By using modular imports, it allows selective importing of necessary components to optimize performance. This snippet is primarily used in React and similar frameworks, where JSX syntax is involved. It requires the `design-system/icons` module to be available in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/modularizeimports/pages/mdx/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Cart, Search } from 'design-system/icons'\n\n# ModularizeImports\n\n<Cart />\n\n<Search />\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Configuration (JavaScript)\nDESCRIPTION: Configures Cypress for Component Testing using JavaScript. Specifies Next.js as the framework and webpack as the bundler.  Requires the `cypress` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Copying the .env.local.example file\nDESCRIPTION: This command copies the .env.local.example file to .env.local. This is necessary to setup environment variables for local development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Rspack using Yarn\nDESCRIPTION: This command creates a new Next.js application named 'with-rspack-app' using the 'with-rspack' example. It utilizes Yarn to execute the create next-app command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-rspack with-rspack-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Temporal Project with PNPM\nDESCRIPTION: Command to create a new Next.js project with Temporal integration using PNPM.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-temporal next-temporal-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode\nDESCRIPTION: These commands start the Next.js development server. It can be run using npm, yarn, or pnpm. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Extensions for MDX\nDESCRIPTION: Next.js configuration to enable .md and .mdx files as valid page extensions\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst withMDX = require('@next/mdx')({\n  extension: /\\.mdx?$/,\n})\nmodule.exports = withMDX({\n  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Nginx Buffering for Streaming - Next.js\nDESCRIPTION: This JavaScript code configures custom headers in `next.config.js` to disable buffering in Nginx for streaming responses. It sets the `X-Accel-Buffering` header to `no` for all routes, which is crucial for enabling streaming when using Nginx as a proxy in front of a Next.js application. This ensures that responses are sent to the client as they are generated, improving perceived performance for streaming UI.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*{/}?',\n        headers: [\n          {\n            key: 'X-Accel-Buffering',\n            value: 'no',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Category Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure the category using the `category` property within the `metadata` export in a Next.js layout or page file. It sets the category to 'technology'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_54\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  category: 'technology',\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Entrypoint Exports in JavaScript\nDESCRIPTION: This code defines a structure for specifying module evaluations and entrypoint exports in a Turbopack environment using a JSON-like format to represent relationships between exports and their respective module evaluations. Dependencies are minimal, focusing on Turbopack-specific entrypoint usage and JavaScript structure understanding. This sets up mappings without executing logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    ModuleEvaluation: 7,\n    Export(\n        \"external1\",\n    ): 9,\n    Export(\n        \"external2\",\n    ): 10,\n    Export(\n        \"foo\",\n    ): 3,\n    Export(\n        \"foobar\",\n    ): 11,\n    Exports: 12,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (npm)\nDESCRIPTION: These commands first install the required Node.js dependencies using npm install, then start the Next.js development server with npm run dev. This allows you to run the application locally for development purposes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 13 with pnpm\nDESCRIPTION: Command to upgrade Next.js to version 13 using pnpm package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Using next/image to Fill a Container with Images in JavaScript\nDESCRIPTION: This snippet demonstrates how to fill a container with images using the 'next/image' component. The 'Fill' component uses CSS Grid for layout, while the image is placed inside a relatively positioned container, using the 'fill' prop to ensure it covers the entire area. This example shows how to set object fit styles and manage responsive behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Fill() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridGap: '8px',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',\n      }}\n    >\n      <div style={{ position: 'relative', height: '400px' }}>\n        <Image\n          alt=\"Mountains\"\n          src={mountains}\n          fill\n          sizes=\"(min-width: 808px) 50vw, 100vw\"\n          style={{\n            objectFit: 'cover', // cover, contain, none\n          }}\n        />\n      </div>\n      {/* And more images in the grid... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing NODE_OPTIONS for Windows Debugging\nDESCRIPTION: This snippet shows how to modify the `package.json` file and install `cross-env` to enable debugging on Windows. Windows does not support the `NODE_OPTIONS='--inspect'` syntax and `cross-env` will set the environment variable regardless of which platform you are on.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Link Component Example (JavaScript)\nDESCRIPTION: This code shows how to use the `Link` component from `next/link` to create navigation links within a Next.js application. It provides a link to another page ('/other').\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <>\n      <h1>Index Page</h1>\n      <p>\n        <Link href=\"/other\">Other Page</Link>\n      </p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridRow Function\nDESCRIPTION: Re-exports the gridRow styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { k as gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nexport { gridRow };\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a basic Next.js page component that renders a heading and a link. It imports the `Link` component from `next/link` for navigation. The component is a functional component that returns JSX.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 0 (prod)\nDESCRIPTION: This is part 0 for the production build.  It does a console log, defines a variable, and exports that variable as `a`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello\");\nconst value = externalFunction();\nexport { value as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Module Part 1 - Variable Export\nDESCRIPTION: Declares and exports variable 'b' with TurboPack variable assertion\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = \"b\";\nexport { b };\nexport { b as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with dev boolean\nDESCRIPTION: This code snippet shows how to initialize a Next.js application with the `dev` option.  The `dev` boolean determines if the application should be run in development mode, enabling features like hot reloading and detailed error messages. This is essential when setting up the next.js instance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-server-options.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"server.js\"\nconst app = next({ dev: boolean })\n```\n```\n\n----------------------------------------\n\nTITLE: Module Declaration of Order with Assert - JavaScript\nDESCRIPTION: This statement imports 'order' from a module with a specific assert condition, showcasing interoperability between module systems in JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst order = [];\nexport { order as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Dynamic API Usage in Next.js\nDESCRIPTION: Defines a function to check if any dynamic APIs were used during rendering by examining the prerender state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfunction usedDynamicAPIs(prerenderState) {\n    return prerenderState.dynamicAccesses.length > 0;\n}\nexport { usedDynamicAPIs };\nexport { usedDynamicAPIs as m } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Overmind using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the Overmind example. It utilizes the create-next-app tool and specifies the 'with-overmind' example and 'with-overmind-app' as the application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-overmind with-overmind-app\n```\n\n----------------------------------------\n\nTITLE: Registering REST API routes for sitemap generation (PHP)\nDESCRIPTION: This code registers four REST API routes under the `sitemap/v1` namespace for retrieving data needed to generate a sitemap. It uses the `register_rest_route` function to define the routes and their corresponding callback functions (`wsra_generate_posts_api`, `wsra_generate_taxonomy_api`, `wsra_generate_author_api`, and `wsra_generate_totalpages_api`).\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nadd_action('rest_api_init', function () {\n  register_rest_route('sitemap/v1', '/posts', array(\n    'methods' => 'GET',\n    'callback' => 'wsra_generate_posts_api',\n  ));\n});\nadd_action('rest_api_init', function () {\n  register_rest_route('sitemap/v1', '/taxonomy', array(\n    'methods' => 'GET',\n    'callback' => 'wsra_generate_taxonomy_api',\n  ));\n});\nadd_action('rest_api_init', function () {\n  register_rest_route('sitemap/v1', '/author', array(\n    'methods' => 'GET',\n    'callback' => 'wsra_generate_author_api',\n  ));\n});\nadd_action('rest_api_init', function () {\n  register_rest_route('sitemap/v1', '/totalpages', array(\n    'methods' => 'GET',\n    'callback' => 'wsra_generate_totalpages_api',\n  ));\n});\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Document in Next.js\nDESCRIPTION: This snippet demonstrates how to extend the default Document component in a Next.js application by importing components from next/document instead of next/head. It illustrates how to structure an overridden _document.js file to ensure consistent modifications to the <head> tag across all pages. Dependencies include Next.js, with prerequisites being a basic understanding of React components. The expected output is seamless rendering of custom head elements across pages without unforeseen issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-head-import-in-document.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    //...\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head></Head>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Canary Release using yarn\nDESCRIPTION: This command upgrades Next.js to the latest canary release using yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@canary\n```\n\n----------------------------------------\n\nTITLE: Reusable Function Export in Turbopack Environment\nDESCRIPTION: This snippet contains functions that manipulate variables through Turbopack imports, then expose these functions as part of the module's exports. It implements variable-driven functionality in Turbopack with dependencies on specific module parts, utilizing JavaScript environments modified for Turbopack. Limitations include dependencies on predefined Turbopack semantics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { upper } from \"module\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nfunction internal() {\n    return upper(foobar);\n}\nfunction external1() {\n    return internal() + foobar;\n}\nexport { external1 };\nexport { internal as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { external1 as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Session with React Cache API in DAL (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to verify a user's session using cookies and the `cache` API from React within a Data Access Layer (DAL) in a Next.js application. It decrypts a session cookie, checks for a valid user ID, redirects to the login page if the session is invalid, and returns an object indicating authentication status and the user ID. This implementation is designed for server-side execution only.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\n\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport const verifySession = cache(async () => {\n  const cookie = (await cookies()).get('session')?.value\n  const session = await decrypt(cookie)\n\n  if (!session?.userId) {\n    redirect('/login')\n  }\n\n  return { isAuth: true, userId: session.userId }\n})\n```\n\n----------------------------------------\n\nTITLE: Using External Data with generateImageMetadata (TSX)\nDESCRIPTION: This example shows how to use the `params` object and fetch external data to generate Open Graph images.  It uses `getOGImages` and `getCaptionForImage` to retrieve image data and caption for dynamic routes.  It returns the image metadata with `id`, `size`, `alt`, and `contentType`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({\n  params,\n}: {\n  params: { id: string }\n}) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({\n  params,\n  id,\n}: {\n  params: { id: string }\n  id: number\n}) {\n  const productId = (await params).id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global MDX Components with Next.js (TSX)\nDESCRIPTION: This code defines global MDX components within a Next.js application using TypeScript. It imports the necessary types and the `Image` component from `next/image`, allowing for custom styling and overriding of default MDX elements. The `useMDXComponents` function enables customizing built-in components like `h1` and `img`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\nimport Image, { ImageProps } from 'next/image'\n\n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...(props as ImageProps)}\n      />\n    ),\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the preview link in WordPress admin (PHP)\nDESCRIPTION: This code snippet customizes the preview button in the WordPress admin panel to point to a headless client setup. It modifies the preview link for a post to point to the Next.js frontend by appending a secret and the post ID as query parameters. It uses the `preview_post_link` filter, `HEADLESS_URL` and `HEADLESS_SECRET` constants are required to be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Customize the preview button in the WordPress admin.\n *\n * This function modifies the preview link for a post to point to a headless client setup.\n *\n * @param string  $link Original WordPress preview link.\n * @param WP_Post $post Current post object.\n * @return string Modified headless preview link.\n */\nadd_filter( 'preview_post_link', 'set_headless_preview_link', 10, 2 );\nfunction set_headless_preview_link( string $link, WP_Post $post ): string {\n\t// Set the front-end preview route.\n  $frontendUrl = HEADLESS_URL;\n\n\t// Update the preview link in WordPress.\n  return add_query_arg(\n    [\n      'secret' => HEADLESS_SECRET,\n      'id' => $post->ID,\n    ],\n    esc_url_raw( esc_url_raw( \"$frontendUrl/api/preview\" ))\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Bundle Analyzer Configuration\nDESCRIPTION: Configures the bundle analyzer in next.config.js to enable analysis when an environment variable is set\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\nmodule.exports = withBundleAnalyzer({})\n```\n\n----------------------------------------\n\nTITLE: Importing Google Font with Optional Display Strategy - Next.js - JSX\nDESCRIPTION: This snippet demonstrates how to import a Google Font with the display strategy set to 'optional'. It ensures that the text is visible while the font is loading, minimizing layout shifts. The example uses the Head component from Next.js to include the font link in the HTML head. Dependencies include Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-font-display.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\\n\\nexport default function IndexPage() {\\n  return (\\n    <div>\\n      <Head>\\n        <link\\n          href=\\\"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\\\"\\n          rel=\\\"stylesheet\\\"\\n        />\\n      </Head>\\n    </div>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Config Matcher in Next.js (JavaScript)\nDESCRIPTION: This JavaScript code defines a matcher configuration for Next.js middleware. It specifies the paths on which the middleware should run, excluding API routes, static files, image optimization files, and the favicon. It also excludes prefetch requests to improve performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Turbopack loaders example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-turbopack-loaders' example. It sets up a new project with the necessary configurations for using Turbopack loaders.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-turbopack-loaders with-turbopack-loaders-app\n```\n\n----------------------------------------\n\nTITLE: Importing Fonts Using Path Alias in Next.js\nDESCRIPTION: Example of importing font definitions using the configured path alias. This approach simplifies imports by using the @/fonts alias instead of relative paths.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { greatVibes, sourceCodePro400 } from '@/fonts'\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { greatVibes, sourceCodePro400 } from '@/fonts'\n```\n\n----------------------------------------\n\nTITLE: Creating Postponed Abort Signal (JavaScript)\nDESCRIPTION: The `createPostponedAbortSignal` function creates an `AbortSignal` that aborts when `React.unstable_postpone` is called. It first asserts that `React.unstable_postpone` exists, then creates an `AbortController`.  It calls `React.unstable_postpone` to signal a postponement, and if an error occurs during the postponement (which is caught), it aborts the controller, effectively aborting any ongoing operations that depend on the signal. The function returns the abort signal itself.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport { g as assertPostpone } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: -8\n};\nfunction createPostponedAbortSignal(reason) {\n    assertPostpone();\n    const controller = new AbortController();\n    try {\n        React.unstable_postpone(reason);\n    } catch (x) {\n        controller.abort(x);\n    }\n    return controller.signal;\n}\nexport { createPostponedAbortSignal };\nexport { createPostponedAbortSignal as o } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Against Multiple Bundlers\nDESCRIPTION: Command to run Turbopack benchmarks comparing performance across different bundlers, enabling comprehensive performance analysis\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench -p turbopack-bench -p turbopack-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Temporal Project with Yarn\nDESCRIPTION: Command to create a new Next.js project with Temporal integration using Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-temporal next-temporal-app\n```\n\n----------------------------------------\n\nTITLE: Closing Spans with Error Handling - JavaScript\nDESCRIPTION: Defines a utility `closeSpanWithError` to handle span closures with error information, leveraging SpanStatusCode to appropriately set error configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst closeSpanWithError = (span, error)=>{\n    if (isBubbledError(error) && error.bubble) {\n        span.setAttribute('next.bubble', true);\n    } else {\n        if (error) {\n            span.recordException(error);\n        }\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error == null ? void 0 : error.message\n        });\n    }\n    span.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GSAP using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the `with-gsap` example. It utilizes `create-next-app` via Yarn. The resulting application will be named `with-gsap-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-gsap with-gsap-app\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Component Loader Metrics in Next.js\nDESCRIPTION: Function that retrieves client component loading metrics with optional reset functionality. Captures loading start time, times, and count of client components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getClientComponentLoaderMetrics(options = {}) {\n    const metrics = clientComponentLoadStart === 0 ? undefined : {\n        clientComponentLoadStart,\n        clientComponentLoadTimes,\n        clientComponentLoadCount\n    };\n    if (options.reset) {\n        clientComponentLoadStart = 0;\n        clientComponentLoadTimes = 0;\n        clientComponentLoadCount = 0;\n    }\n    return metrics;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Metadata Fields (JSX)\nDESCRIPTION: This code snippet demonstrates how to set basic metadata fields such as generator, applicationName, referrer, keywords, authors, creator, publisher, and formatDetection in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  generator: 'Next.js',\n  applicationName: 'Next.js',\n  referrer: 'origin-when-cross-origin',\n  keywords: ['Next.js', 'React', 'JavaScript'],\n  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],\n  creator: 'Jiachi Liu',\n  publisher: 'Sebastian Markbåge',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with next-translate using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the next-translate example. It bootstraps the project with the specified template and names the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-next-translate with-next-translate-app\n```\n\n----------------------------------------\n\nTITLE: Quickstart: Creating Next.js app with Jest example\nDESCRIPTION: This command uses `create-next-app` to create a new Next.js application with the `with-jest` example. It simplifies the initial setup of Jest in a Next.js project. The new app will be named `with-jest-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app@latest --example with-jest with-jest-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Recoil Example using PNPM\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-recoil example. It clones the example into a new directory named with-recoil-app. It requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-recoil with-recoil-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GraphQL Hooks example (Yarn)\nDESCRIPTION: This command utilizes `create next-app` with Yarn to bootstrap a new Next.js application using the `with-graphql-hooks` example. It installs the necessary dependencies and sets up the project structure for working with GraphQL Hooks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-graphql-hooks with-graphql-hooks-app\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the newly created application directory after installing the Next.js with Supabase template. This is a necessary step before configuring environment variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd with-supabase-app\n```\n\n----------------------------------------\n\nTITLE: Creating Active Navigation Link with useSelectedLayoutSegment\nDESCRIPTION: Implements a dynamic blog navigation link that changes style based on the current active segment\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function BlogNavLink({\n  slug,\n  children,\n}: {\n  slug: string\n  children: React.ReactNode\n}) {\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This command starts the Next.js development server using npm, yarn, pnpm, or bun. It allows developers to preview changes in real-time by accessing the application in a web browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting in JavaScript Modules\nDESCRIPTION: Imports several elements from modules using assertions for 'Turbopack', modifying the value of 'foobar' while exporting it afterward for external use, ensuring integration with the module system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport { b as internal } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -9\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nfunction external1() {\n    return internal() + foobar;\n}\nexport { external1 };\nexport { external1 as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Module Export and Resolution for Effects\nDESCRIPTION: This snippet utilizes ES module syntax to declare an array of effects and a function to manipulate it. It also includes export statements for both the 'effect' function and the 'effects' array, with assertions for internal optimization in a complex module system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst effects = [];\nfunction effect(name) {\n    effects.push(name);\n}\nexport { effect };\nexport { effects };\nexport { effects as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { effect as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Playwright example (bash)\nDESCRIPTION: Uses `create-next-app` to generate a Next.js project configured with Playwright.  It utilizes the `with-playwright` example template. This is the quickest way to get started with Playwright in a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example with-playwright with-playwright-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-algolia-react-instantsearch example.  It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Matching in Next.js Redirects\nDESCRIPTION: This example illustrates how to match wildcard paths using the `*` character in the `source` route. The snippet captures any nested paths and redirects them to a specified `destination`, retaining the matched segments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'my-blog' using the 'blog' example. It sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example blog my-blog\n```\n\n----------------------------------------\n\nTITLE: Defining Function d2 and Exporting it via TurboPack in JavaScript\nDESCRIPTION: This snippet defines `d2`, mirroring the export pattern of `d1`, and applies TurboPack's variable assertions for optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction d2() {}\nexport { d2 as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Basic Operations\nDESCRIPTION: Basic JavaScript variable declarations and operations including initialization, reassignment, and console logging.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/grouping/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 1;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx = 2;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx = 3;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(x);\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with remove-console Example (pnpm)\nDESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application based on the `remove-console` example. The new application will be named `remove-console-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example remove-console remove-console-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-shallow-routing example. It leverages create-next-app to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-shallow-routing with-shallow-routing-app\n```\n\n----------------------------------------\n\nTITLE: Importing Part in Javascript\nDESCRIPTION: Imports a turbopack part in javascript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js and React Dependencies using bun\nDESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using bun package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@11 react@17 react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Transforming Page Component with url-to-withrouter Codemod\nDESCRIPTION: This example demonstrates how the url-to-withrouter codemod transforms a page component using the deprecated url property to use withRouter and access the router property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react'\nexport default class extends React.Component {\n  render() {\n    const { pathname } = this.props.url\n    return <div>Current pathname: {pathname}</div>\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react'\nimport { withRouter } from 'next/router'\nexport default withRouter(\n  class extends React.Component {\n    render() {\n      const { pathname } = this.props.router\n      return <div>Current pathname: {pathname}</div>\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables\nDESCRIPTION: Example of the environment variables that need to be set in the .env.local file. These include the Supabase project URL and anonymous API key for authentication.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]\nNEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Next.js Documentation Page\nDESCRIPTION: Markdown frontmatter that defines metadata for a Next.js documentation page about styling applications. It includes title, description, and source path information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/04-styling/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Styling\ndescription: Learn the different ways you can style your Next.js application.\nsource: app/building-your-application/styling\n---\n```\n\n----------------------------------------\n\nTITLE: Replacing NextRequest Geo and IP Properties with @vercel/functions\nDESCRIPTION: Codemod to replace 'geo' and 'ip' properties of NextRequest with corresponding @vercel/functions features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport function GET(req: NextRequest) {\n  const { geo, ip } = req\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { geolocation, ipAddress } from '@vercel/functions'\n\nexport function GET(req: NextRequest) {\n  const geo = geolocation(req)\n  const ip = ipAddress(req)\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration\nDESCRIPTION: Declares an empty function named 'a'\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a() {}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Chakra UI using npm\nDESCRIPTION: This command uses npx to create a new Next.js application with Chakra UI, named 'with-chakra-ui-app'. It leverages the 'with-chakra-ui' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-chakra-ui with-chakra-ui-app\n```\n\n----------------------------------------\n\nTITLE: Module Part 5: StaticGenBailoutError Export\nDESCRIPTION: This JavaScript snippet exports `StaticGenBailoutError`, indicating an error that occurs when static generation is not possible. This is used to identify components causing the application to fallback to server-side rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nexport { StaticGenBailoutError as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring File Tracing Includes and Excludes\nDESCRIPTION: Next.js configuration to specify which files to include or exclude from the tracing process using minimatch globs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  outputFileTracingExcludes: {\n    '/api/hello': ['./un-necessary-folder/**/*'],\n  },\n  outputFileTracingIncludes: {\n    '/api/another': ['./necessary-folder/**/*'],\n    '/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]': [\n      './node_modules/aws-crt/dist/bin/**/*',\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Next.js Middleware Implementation\nDESCRIPTION: Shows the current recommended way to implement Middleware in Next.js. This version uses the request parameter directly and returns the NextResponse object instead of using respondWith().\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-new-signature.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  if (request.nextUrl.pathname === '/blocked') {\n    return new NextResponse(null, {\n      status: 403,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Code Evaluation in Next.js\nDESCRIPTION: This code snippet shows how to configure Next.js to allow specific files to ignore dynamic code evaluation checks using an unstable configuration setting. The key parameter is the 'unstable_allowDynamic' configuration, which lists file paths or glob patterns. This allows certain static analysis checks to be bypassed, especially when dynamic code is inaccessible during runtime. This configuration is crucial to prevent unintended runtime errors on Edge platforms while maintaining flexibility in code structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/edge-dynamic-code-evaluation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\\n  unstable_allowDynamic: [\\n    '/lib/utilities.js', // allows a single file\\n    '**/node_modules/function-bind/**', // use a glob to allow anything in the function-bind 3rd party module\\n  ],\\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Middleware Matcher with Request Headers Conditions\nDESCRIPTION: This snippet demonstrates complex matching patterns that combine path patterns with header conditions using 'has' and 'missing' arrays to conditionally apply middleware based on request headers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n\n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      has: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n\n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      has: [{ type: 'header', key: 'x-present' }],\n      missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Metadata Generation (TSX)\nDESCRIPTION: This snippet demonstrates the use of the `generateMetadata` function in a TypeScript Next.js application to generate dynamic metadata based on route parameters and fetched data.  It fetches product data based on the `id` parameter and extends parent metadata. It defines types for props using `Metadata` and `ResolvingMetadata` from `next`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: Promise<{ id: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const { id } = await params\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n----------------------------------------\n\nTITLE: Generating total pages api (PHP)\nDESCRIPTION: This function generates an array containing the total number of categories, tags, users, and posts for sitemap generation. It retrieves count data for categories, tags, users, and post types using WordPress functions such as `get_categories()`, `get_tags()`, `count_users()`, and `wp_count_posts()`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction wsra_generate_totalpages_api()\n{\n  $args = array(\n    'exclude_from_search' => false\n  );\n  $argsTwo = array(\n    'publicly_queryable' => true\n  );\n  $post_types = get_post_types($args, 'names');\n  $post_typesTwo = get_post_types($argsTwo, 'names');\n  $post_types = array_merge($post_types, $post_typesTwo);\n  unset($post_types['attachment']);\n  $defaultArray = [\n    'category' => count(get_categories()),\n    'tag' => count(get_tags()),\n    'user' => (int)count_users()['total_users'],\n  ];\n  $tempValueHolder = array();\n  foreach ($post_types as $postType) {\n    $tempValueHolder[$postType] = (int)wp_count_posts($postType)->publish;\n  }\n  return array_merge($defaultArray, $tempValueHolder);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Variable Increment Operations\nDESCRIPTION: Series of compound assignment operations on variable x using the += operator.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/grouping/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nx += 6;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx += 7;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx += 8;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx += 9;\n```\n\n----------------------------------------\n\nTITLE: Server Modules Import and Export with TurboPack System in JavaScript\nDESCRIPTION: This snippet imports several server modules and makes key exports available for subsequent parts of the application. TurboPack assertions validate these exports, confirming their roles within the configuration and module management system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { AppRouteRouteModule } from '../../server/future/route-modules/app-route/module.compiled';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { RouteKind } from '../../server/future/route-kind';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport * as userland from 'VAR_USERLAND';\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        filename: 'VAR_DEFINITION_FILENAME',\n        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'\n    },\n    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n    nextConfigOutput,\n    userland\n});\nexport { routeModule as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Using URL Object for Dynamic Routing in Next.js\nDESCRIPTION: This snippet illustrates how to use a URL object in the Link component's href prop for dynamic routing in Next.js. It shows how to specify the pathname and query parameters separately.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link\n            href={{\n              pathname: '/blog/[slug]',\n              query: { slug: post.slug },\n            }}\n          >\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n----------------------------------------\n\nTITLE: Merged Module Evaluation in TurboPack (JavaScript)\nDESCRIPTION: This snippet shows the merged result of module evaluation in TurboPack. It imports specific parts, calls the imported functions, and exports an empty object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as c1_3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nimport { h as c2_2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nc1_3();\nc2_2();\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Request Data Access in generateViewport\nDESCRIPTION: Example showing problematic implementation where generateViewport directly accesses cookies without proper dynamic route setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function generateViewport() {\n  const cookieJar = await cookies()\n  return {\n    themeColor: cookieJar.get('theme-color'),\n  }\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Next.js Canary Release\nDESCRIPTION: Command for repository maintainers to publish a new canary version of Next.js. The command automatically determines the new version tag as an increment from the previous version.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm publish-canary\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in a React Component (JSX)\nDESCRIPTION: This code snippet shows how to access environment variables defined in `next.config.js` within a React component.  `process.env.customKey` is used to access the value of the 'customKey' environment variable. Next.js replaces this expression with the actual value during build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/env.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Package Hierarchy Visualization\nDESCRIPTION: Mermaid flowchart representing the hierarchical structure of Next.js SWC packages and their dependencies\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    C(next-custom-transforms) --> A(napi)\n    C(next-custom-transforms) --> B(wasm)\n    D(next-core) --> A(napi)\n    E(next-build) --> A(napi)\n    F(next-api) --> A(napi)\n    C(next-custom-transforms) --> D\n    D(next-core) --> F(next-api)\n    D(next-core) --> E(next-build)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Node.js Module Usage - Next.js\nDESCRIPTION: Example showing incorrect implementation of Node.js-specific code in browser context, which will cause errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Redis from 'ioredis'\n\nconst redis = new Redis(process.env.REDIS_URL)\n\nexport default redis\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport redis from '../lib/redis'\nimport { useEffect, useState } from 'react'\n\nexport default function Home() {\n  const [message, setMessage] = useState()\n  useEffect(() => {\n    redis.get('message').then((result) => {\n      setMessage(result)\n    })\n  }, [])\n  return <h1>{message}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry API Variable Initialization (JS)\nDESCRIPTION: Initializes the OpenTelemetry API variable for use throughout the module. This variable will be populated with the appropriate OpenTelemetry API implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nlet api;\nexport { api as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MongoDB and Mongoose Example\nDESCRIPTION: This snippet shows how to create a new Next.js application using the `with-mongodb-mongoose` example. It uses `create-next-app` with different package managers like npm, yarn, and pnpm to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mongodb-mongoose with-mongodb-mongoose-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with three.js using npm\nDESCRIPTION: This command uses npx to create a new Next.js application with the three.js example. The `create-next-app` command bootstraps the project, setting up the necessary files and dependencies.  It takes the example name (`with-three-js`) and the desired application name (`with-three-js-app`) as arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-three-js with-three-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npx to create a new Next.js application based on the `with-portals-ssr` example.  It initializes a project named `with-portals-ssr-app` using the specified example from the Next.js repository. The command assumes npm is installed and available in the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-portals-ssr with-portals-ssr-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with GTM Example (pnpm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-google-tag-manager` example from the Next.js repository. It utilizes `create next-app` via `pnpm` to bootstrap the project with the specified template and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-google-tag-manager with-google-tag-manager-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Video.js Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-videojs example. It bootstraps the project with necessary dependencies and configurations for Video.js integration. The new application will be named with-videojs-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-videojs with-videojs-app\n```\n\n----------------------------------------\n\nTITLE: Corrected PostCSS Configuration (missing config)\nDESCRIPTION: This snippet shows the corrected version of the previous incorrect PostCSS configuration. The nested array is removed, so the plugin is configured correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\n      'postcss-plugin-1',\n      {\n        optionA: '...',\n      },\n    ],\n    // Only string:\n    'postcss-plugin-2',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function c2_1 and Calling c2_2 in JavaScript\nDESCRIPTION: This snippet defines `c2_1`, which returns the result of calling `c2_2`, demonstrating yet another functional layer within the module. It maintains hoisting behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction c2_1() {\n    return c2_2(d3);\n}\n```\n\n----------------------------------------\n\nTITLE: Awaiting Promise Resolution in JavaScript\nDESCRIPTION: This snippet resolves a promise asynchronously and is used to ensure that any subsequent operations that depend on this resolution are executed afterward. There are no additional dependencies needed for this operation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Promise.resolve();\n```\n\n----------------------------------------\n\nTITLE: Available Development Commands for Next.js with Electron\nDESCRIPTION: This snippet lists available commands that can be executed in the terminal to build and manage the Next.js and Electron application. Each command serves a specific purpose such as building, starting in development mode, or checking TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n\"build-renderer\": build and transpile Next.js layer\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"build-electron\": transpile electron layer\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"build\": build both layers\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"dev\": start dev version\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"dist\": create production electron build\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"type-check\": check TypeScript in project\n```\n\n----------------------------------------\n\nTITLE: Migrating Viewport Metadata to Viewport Export\nDESCRIPTION: Codemod to migrate certain viewport metadata to a separate 'viewport' export in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport const metadata = {\n  title: 'My App',\n  themeColor: 'dark',\n  viewport: {\n    width: 1,\n  },\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const metadata = {\n  title: 'My App',\n}\n\nexport const viewport = {\n  width: 1,\n  themeColor: 'dark',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Client Component Directive to React Class Component in Next.js\nDESCRIPTION: This snippet demonstrates how to modify a React Class Component to be used as a Client Component by adding the directive `'use client'`. This allows the usage of lifecycle methods and state management within Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/class-component-in-server-component.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/page.js\"\n'use client'\n\nexport default class Page extends React.Component {\n  render() {\n    return <p>Hello world</p>\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Production Environment\nDESCRIPTION: This snippet shows the commands used to build and start the Next.js application in a production environment, intended for end-users. The use of a Makefile simplifies the deployment process. The application will be accessible on a specified localhost port.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake build-production\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake start-production\n```\n\n----------------------------------------\n\nTITLE: TurboPack Module Import System\nDESCRIPTION: Implements a specialized module import system using TurboPack's custom assert syntax. This system allows modules to be imported with specific part identifiers for modular code loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring and Exporting Variable in JavaScript\nDESCRIPTION: This snippet declares a constant `a` and directly exports it using ES6 module syntax. It also includes an export with an assertion feature for turbopack compatibility.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst a = \"a\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst a = \"a\";\nexport { a };\nexport { a as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Final Dependency Diagram\nDESCRIPTION: This Mermaid diagram illustrates the final dependency graph of the modules involved in the prerendering process. It details the relationships between import modules, bindings, variable declarations, and exports such as `createPrerenderState`, `markCurrentScopeAsDynamic`, `Postpone`, etc.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, ImportOfModule)]\"];\n    N1[\"Items: [ItemId(0, ImportBinding(0))]\"];\n    N2[\"Items: [ItemId(1, ImportOfModule)]\"];\n    N3[\"Items: [ItemId(1, ImportBinding(0))]\"];\n    N4[\"Items: [ItemId(2, ImportOfModule)]\"];\n    N5[\"Items: [ItemId(2, ImportBinding(0))]\"];\n    N6[\"Items: [ItemId(3, ImportOfModule)]\"];\n    N7[\"Items: [ItemId(3, ImportBinding(0))]\"];\n    N8[\"Items: [ItemId(4, VarDeclarator(0)), ItemId(10, Normal), ItemId(13, Normal)]\"];\n    N9[\"Items: [ItemId(5, Normal), ItemId(Export((&quot;createPrerenderState&quot;, #2), &quot;createPrerenderState&quot;))]\"];\n    N10[\"Items: [ItemId(6, Normal), ItemId(Export((&quot;markCurrentScopeAsDynamic&quot;, #2), &quot;markCurrentScopeAsDynamic&quot;))]\"];\n    N11[\"Items: [ItemId(7, Normal), ItemId(Export((&quot;trackDynamicDataAccessed&quot;, #2), &quot;trackDynamicDataAccessed&quot;))]\"];\n    N12[\"Items: [ItemId(8, Normal), ItemId(Export((&quot;Postpone&quot;, #2), &quot;Postpone&quot;))]\"];\n    N13[\"Items: [ItemId(9, Normal), ItemId(Export((&quot;trackDynamicFetch&quot;, #2), &quot;trackDynamicFetch&quot;))]\"];\n    N14[\"Items: [ItemId(11, Normal), ItemId(Export((&quot;usedDynamicAPIs&quot;, #2), &quot;usedDynamicAPIs&quot;))]\"];\n    N15[\"Items: [ItemId(12, Normal), ItemId(Export((&quot;formatDynamicAPIAccesses&quot;, #2), &quot;formatDynamicAPIAccesses&quot;))]\"];\n    N16[\"Items: [ItemId(14, Normal), ItemId(Export((&quot;createPostponedAbortSignal&quot;, #2), &quot;createPostponedAbortSignal&quot;))]\"];\n    N2 --> N0;\n    N4 --> N2;\n    N6 --> N4;\n    N8 --> N1;\n    N8 --> N6;\n    N8 -.-> N7;\n    N8 -.-> N5;\n    N8 -.-> N3;\n    N1 --> N0;\n    N11 --> N7;\n    N13 --> N8;\n    N16 --> N1;\n    N5 --> N4;\n    N7 --> N6;\n    N16 --> N8;\n    N3 --> N2;\n    N10 --> N3;\n    N10 --> N8;\n    N10 --> N5;\n    N10 --> N7;\n    N12 --> N8;\n    N11 --> N3;\n    N11 --> N8;\n    N11 --> N5;\n```\n\n----------------------------------------\n\nTITLE: Catch-All Route Setup with Conflicts in JavaScript\nDESCRIPTION: This snippet defines a catch-all route and configures static paths that overlap with existing paths. It demonstrates how to prevent conflicting routes by adjusting path definitions in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = () => ({ props: {} })\n\nexport const getStaticPaths = () => ({\n  paths: [\n    // this conflicts with the /blog/conflicting path above, remove to resolve error\n    '/blog/conflicting',\n    '/another',\n  ],\n  fallback: false,\n})\n\nexport default function CatchAll() {\n  return 'Catch-all page'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Chimera Function in JavaScript\nDESCRIPTION: This snippet imports both `dog` and `cat`, then defines a function `getChimera` that concatenates their values. The function is exported for use in other modules, demonstrating inter-variable interactions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as dog } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -0\\n};\\nimport { e as cat } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -5\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 4\\n};\\nfunction getChimera() {\\n    return cat + dog;\\n}\\nexport { getChimera };\\nexport { getChimera as g } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Regenerator Runtime in CommonJS\nDESCRIPTION: This code snippet demonstrates how to import the regenerator-runtime module using CommonJS syntax. It defines the 'regeneratorRuntime' variable which can be utilized for handling generator and async functions. Ensure that Node.js is set up correctly to use this module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// CommonJS\nconst regeneratorRuntime = require(\"regenerator-runtime\");\n```\n\n----------------------------------------\n\nTITLE: Declaring and Exporting Another Variable in JavaScript\nDESCRIPTION: This snippet declares a constant `b` and exports it similarly to how `a` is exported, including an assertion for turbopack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst b = \"b\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst b = \"b\";\nexport { b };\nexport { b as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-i18n-next-intl-app' using the 'with-i18n-next-intl' example. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-i18n-next-intl with-i18n-next-intl-app\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in a Next.js Page (TSX)\nDESCRIPTION: This code shows how to wrap a Client Component using `useSearchParams` in a `Suspense` boundary to enable static rendering of other parts of the route.  It defines a fallback component that is rendered initially and replaced with the actual component after hydration. It leverages React's Suspense API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react'\\nimport SearchBar from './search-bar'\\n\\n// This component passed as a fallback to the Suspense boundary\\n// will be rendered in place of the search bar in the initial HTML.\\n// When the value is available during React hydration the fallback\\n// will be replaced with the `<SearchBar>` component.\\nfunction SearchBarFallback() {\\n  return <>placeholder</>\\n}\\n\\nexport default function Page() {\\n  return (\\n    <>\\n      <nav>\\n        <Suspense fallback={<SearchBarFallback />}>\\n          <SearchBar />\\n        </Suspense>\\n      </nav>\\n      <h1>Dashboard</h1>\\n    </>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Bundling in Next.js\nDESCRIPTION: This JavaScript code snippet sets the Next.js configuration to enable automatic server-side dependency bundling for Pages Router applications. It is a part of the `next.config.js` file and requires the underlying Next.js environment. The primary setting `bundlePagesRouterDependencies` is set to `true`, enabling this feature. Additionally, there is an option to exclude specific packages from bundling using `serverExternalPackages`. This setup requires a Next.js environment where version 15.0.0 or later is used, which introduced the stable version of this setting.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/bundlePagesRouterDependencies.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  bundlePagesRouterDependencies: true,\\n}\\n\\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects with Middleware in Next.js using TypeScript\nDESCRIPTION: This snippet demonstrates how to read redirect data from a database and apply it in middleware for routing within a Next.js application using TypeScript. It checks the database for redirect information based on the incoming request's pathname and uses `NextResponse.redirect` for the redirection. Dependencies include Next.js and a database client. The expected output is a dynamic redirection based on stored redirect entries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\nimport { get } from '@vercel/edge-config'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n\n  if (redirectData && typeof redirectData === 'string') {\n    const redirectEntry: RedirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n\n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout with HTML Structure (TSX)\nDESCRIPTION: This code snippet demonstrates how to create a root layout component in Next.js (TSX) by incorporating the basic HTML structure from an `index.html` file. It includes the `<html>`, `<head>`, and `<body>` tags, and places the `children` prop within a `div` with the id 'root'. This sets up the foundational HTML structure for all pages within the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Create PlanetScale Database\nDESCRIPTION: Creates a new database in PlanetScale. Replace `<DATABASE_NAME>` with your desired database name. A default branch named `main` is automatically created with the database.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npscale database create <DATABASE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Implementing PPR in TypeScript Page Component\nDESCRIPTION: TypeScript example showing how to implement PPR in a Next.js page component with static and dynamic content using Suspense\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent, Fallback } from \"@/app/ui\"\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Node.js Commands Dynamically in JavaScript\nDESCRIPTION: This JavaScript snippet uses the child_process module to execute commands dynamically. It employs the spawnSync function with arguments that are determined unpredictably via Math.random(), which can lead to undefined behavior or security vulnerabilities. The code does not specify any dependencies but relies on Math.random() for generating command arguments. This approach allows for dynamic code behavior but necessitates caution to avoid erratic execution or exploit risks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst unknown = Math.random();\n\nchild_process.spawnSync(unknown);\nchild_process.spawnSync(\"node\", unknown);\nchild_process.spawnSync(\"node\", [unknown, unknown]);\n\nrequire(unknown);\n\nimport(unknown);\n\n```\n\n----------------------------------------\n\nTITLE: Revalidate Layout Path with Next.js\nDESCRIPTION: This code snippet demonstrates revalidating a layout path with `revalidatePath`.  It imports the function, then calls it with the layout path and the `'layout'` type.  This revalidates any URL matching the layout file, including pages beneath with the same layout, upon the next visit.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'layout')\n// or with route groups\nrevalidatePath('/(main)/post/[slug]', 'layout')\n```\n\n----------------------------------------\n\nTITLE: Importing Modules Example - JavaScript\nDESCRIPTION: This part demonstrates importing a module without any variables being assigned. It's only focused on executing the module's script without creating bindings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"module\";\n\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Rendering Behavior in Next.js Routes\nDESCRIPTION: Configure the dynamic rendering behavior of a layout or page using the dynamic configuration variable. This option provides control over static vs dynamic rendering, equivalent to getStaticProps and getServerSideProps in the pages directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables template\nDESCRIPTION: This command copies the .env.local.example file to .env.local. This allows local configuration of environment variables without committing them to the repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Initializing Blog with Comments Application using create-next-app\nDESCRIPTION: This snippet demonstrates how to initialize a new Next.js application using the create-next-app package, specifically the blog-with-comment example. It requires Node.js and npm or Yarn installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example blog-with-comment blog-with-comment-app\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in a Next.js Page (JSX)\nDESCRIPTION: This code shows how to wrap a Client Component using `useSearchParams` in a `Suspense` boundary to enable static rendering of other parts of the route.  It defines a fallback component that is rendered initially and replaced with the actual component after hydration. It leverages React's Suspense API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\\nimport SearchBar from './search-bar'\\n\\n// This component passed as a fallback to the Suspense boundary\\n// will be rendered in place of the search bar in the initial HTML.\\n// When the value is available during React hydration the fallback\\n// will be replaced with the `<SearchBar>` component.\\nfunction SearchBarFallback() {\\n  return <>placeholder</>\\n}\\n\\nexport default function Page() {\\n  return (\\n    <>\\n      <nav>\\n        <Suspense fallback={<SearchBarFallback />}>\\n          <SearchBar />\\n        </Suspense>\\n      </nav>\\n      <h1>Dashboard</h1>\\n    </>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 2 (prod)\nDESCRIPTION: Part 2 of the production build. It imports `shared` from part -3, and part 1. It also sets an external property, and logs the value of shared.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nexternalObject.propertyWithSetter = 42;\nconsole.log(shared);\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Using Bundle Analyzer with next-compose-plugins\nDESCRIPTION: Configuration method for integrating bundle analyzer with next-compose-plugins from version 2.0.0\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst withPlugins = require('next-compose-plugins')\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n\nmodule.exports = withPlugins([\n  [withBundleAnalyzer],\n  // your other plugins here\n])\n```\n\n----------------------------------------\n\nTITLE: Using onLoadingComplete Callback with Next.js Image Component (Client Component)\nDESCRIPTION: Example of using the onLoadingComplete callback in a client component with Next.js Image. This deprecated callback is triggered once the image is completely loaded and the placeholder is removed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\n<Image onLoadingComplete={(img) => console.log(img.naturalWidth)} />\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with MSW example using yarn\nDESCRIPTION: This command creates a new Next.js application using the `with-msw` example. It bootstraps a project with Mock Service Worker already configured for API mocking using yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-msw with-msw-app\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Package Using npm or yarn\nDESCRIPTION: Commands to install the required sass package as a project dependency using either npm or yarn package managers. This installation is necessary to enable Next.js' built-in Sass support functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sass.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sass\n# or\nyarn add sass\n```\n\n----------------------------------------\n\nTITLE: HMR Connection Setup Function\nDESCRIPTION: Main function to establish and manage HMR WebSocket connection with automatic reconnection and event handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function connectHMR(options) {\n    const { timeout = 5 * 1000 } = options;\n    function init() {\n        if (source) source.close();\n        console.log(\"[HMR] connecting...\");\n        function handleOnline() {\n            const connected = {\n                type: \"turbopack-connected\"\n            };\n            eventCallbacks.forEach((cb)=>{\n                cb(connected);\n            });\n            if (options.log) console.log(\"[HMR] connected\");\n        }\n        function handleMessage(event) {\n            const message = {\n                type: \"turbopack-message\",\n                data: JSON.parse(event.data)\n            };\n            eventCallbacks.forEach((cb)=>{\n                cb(message);\n            });\n        }\n        function handleDisconnect() {\n            source.close();\n            setTimeout(init, timeout);\n        }\n        const { hostname, port } = location;\n        const protocol = getSocketProtocol(options.assetPrefix || \"\");\n        const assetPrefix = options.assetPrefix.replace(/^\\/+/, \"\");\n        let url = `${protocol}://${hostname}:${port}${assetPrefix ? `/${assetPrefix}` : \"\"}`;\n        if (assetPrefix.startsWith(\"http\")) {\n            url = `${protocol}://${assetPrefix.split(\"://\")[1]}`;\n        }\n        source = new window.WebSocket(`${url}${options.path}`);\n        source.onopen = handleOnline;\n        source.onerror = handleDisconnect;\n        source.onmessage = handleMessage;\n    }\n    init();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: This snippet provides commands to install required dependencies and start the Next.js development server. It demonstrates using npm, yarn, and pnpm to set up and run the server, enabling local development on `http://localhost:3000`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Dependencies with Yarn\nDESCRIPTION: Installation command for MDX dependencies using Yarn package manager for Next.js projects\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @next/mdx @mdx-js/loader @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MDX pages using npx\nDESCRIPTION: This command uses `create-next-app` with npx to initialize a new Next.js project with the `mdx-pages` example.  It creates a directory named `mdx-pages-app` for the new project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example mdx-pages mdx-pages-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-yarn-workspaces example. It initializes the project with the specified example and names the application with-yarn-workspaces-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-yarn-workspaces with-yarn-workspaces-app\n```\n\n----------------------------------------\n\nTITLE: createContext Usage in Server Component (Before)\nDESCRIPTION: This code snippet shows the incorrect usage of `createContext` in a Next.js Server Component. Server Components cannot use `createContext` directly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'react'\n\nconst Context = createContext()\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app using npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the specified example. It clones the 'api-routes-apollo-server-and-client-auth' example into a directory named 'api-routes-apollo-server-and-client-auth-app'. It requires npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application using the with-babel-macros example. The command configures the project for babel-macros usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-babel-macros with-babel-macros-app\n```\n\n----------------------------------------\n\nTITLE: Unoptimized Image Component\nDESCRIPTION: This code snippet demonstrates how to create a wrapper component around the Next.js Image component to always set the `unoptimized` prop to true. This is useful for images that don't benefit from optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\n\nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration - First Item\nDESCRIPTION: Declares constant variable 'a' with string value 'a'\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = \"a\";\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Compiler Options in next.config.js\nDESCRIPTION: Demonstrates compiler options configuration that may be ignored when Babel is detected as the compiler. Only applicable to the new Rust-based compiler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/ignored-compiler-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nmodule.exports = {\n  compiler: {\n    // Compiler-specific options that may be ignored with Babel\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React Packages using pnpm\nDESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using pnpm. It provides an alternative way to update dependencies using the pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with three.js using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the three.js example. The `create next-app` command bootstraps the project, setting up the necessary files and dependencies. It uses the example name (`with-three-js`) and the desired application name (`with-three-js-app`) as arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-three-js with-three-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-apollo-and-redux-app' based on the 'with-apollo-and-redux' example. It downloads and executes the create-next-app package to bootstrap the project with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GSAP using NPX\nDESCRIPTION: This command initializes a new Next.js application using the `with-gsap` example. It utilizes `create-next-app` via npx, downloading and executing the package without global installation. The resulting application will be named `with-gsap-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-gsap with-gsap-app\n```\n\n----------------------------------------\n\nTITLE: Declaring Constant Variable in JavaScript\nDESCRIPTION: A constant variable 'bar' is declared and initialized with the string value 'bar'. This variable is immutable post-declaration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bar = \"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Structured Error Utility for TurboPack in JavaScript\nDESCRIPTION: Re-exports the structuredError utility for standardizing error formatting in TurboPack. This allows error objects to be properly serialized and sent through the IPC system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nexport { structuredError };\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with styled-jsx using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application using the styled-jsx example. The command utilizes the create-next-app tool, initializing a project with the necessary dependencies and configurations for styled-jsx. The created application is named 'with-styled-jsx-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-styled-jsx with-styled-jsx-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the image-secure-compute example. It downloads the example and sets up a new project with the specified name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example image-secure-compute image-secure-compute-app\n```\n\n----------------------------------------\n\nTITLE: Dependency Graph Visualization in Mermaid\nDESCRIPTION: These mermaid diagrams illustrate the dependencies and execution phases of the module items. They show the relationships between different parts of the code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item3 --> Item2;\n    Item3 --> Item1;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, ImportOfModule), ItemId(1, Normal)]\"];\n    N1[\"Items: [ItemId(0, ImportBinding(0))]\"];\n    N0 --> N1;\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Moment.js Locale in Next.js\nDESCRIPTION: Code snippet to load a specific locale for Moment.js in Next.js 11, which now excludes all locales by default for optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment'\nimport 'moment/locale/ja'\n\nmoment.locale('ja')\n```\n\n----------------------------------------\n\nTITLE: Migrating to Built-in Next.js Font\nDESCRIPTION: Codemod to uninstall @next/font package and transform @next/font imports to the built-in next/font in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { Inter } from '@next/font/google'\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { Inter } from 'next/font/google'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Turbopack using pnpm\nDESCRIPTION: Command to create a new Next.js application with Turbopack using pnpm's create-next-app utility. This bootstraps a project based on the with-turbopack example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-turbopack with-turbopack-app\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Function in JavaScript\nDESCRIPTION: Declares a function 'internal' that returns the result of applying the 'upper' function to 'foobar'. Reads 'upper' and 'foobar' for function execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction internal() {\n    return upper(foobar);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Goober using Yarn\nDESCRIPTION: This command utilizes Yarn to generate a new Next.js application pre-configured with the Goober example. It runs create next-app with the designated example and project name. The created app will be called 'with-goober-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-goober with-goober-app\n```\n\n----------------------------------------\n\nTITLE: Configuring ISR/Data Cache Handler - Next.js\nDESCRIPTION: This code snippet demonstrates how to configure a custom cache handler in `next.config.js` to specify the location for ISR (Incremental Static Regeneration) and data cache. It disables the default in-memory caching by setting `cacheMaxMemorySize` to 0 and resolves to a file containing the custom cache handler implementation. This approach allows for persistent and shared caching across multiple pods in a container orchestration environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Zones using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named `with-zones-app` based on the `with-zones` example. It initializes the project with the necessary configuration and files for a multi-zone setup using pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-zones with-zones-app\n```\n\n----------------------------------------\n\nTITLE: Copying Variable - JavaScript\nDESCRIPTION: This snippet creates a copy of the variable 'foobar' into 'foobarCopy'. It allows for independent manipulation of 'foobarCopy' while preserving the original 'foobar'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet foobarCopy = foobar;\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uncaught Exception Handler for TurboPack IPC in JavaScript\nDESCRIPTION: Configures a global uncaught exception handler that forwards errors to the IPC system. This ensures that any unhandled exceptions in the process are properly reported back to the TurboPack system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nprocess.on(\"uncaughtException\", (err)=>{\n    IPC.sendError(err);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Customizing AMP Component Version (JSX)\nDESCRIPTION: This code snippet illustrates how to customize the version of an AMP component using `next/head`. It imports the `Head` component from `next/head` and adds a `<script>` tag within the `Head` component to specify the desired version of the `amp-timeago` component.  This allows using specific versions of AMP components instead of the latest. Requires importing `Head` from `next/head`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nexport const config = { amp: true }\n\nfunction MyAmpPage() {\n  const date = new Date()\n\n  return (\n    <div>\n      <Head>\n        <script\n          async\n          key=\"amp-timeago\"\n          custom-element=\"amp-timeago\"\n          src=\"https://cdn.ampproject.org/v0/amp-timeago-0.1.js\"\n        />\n      </Head>\n\n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n\nexport default MyAmpPage\n```\n\n----------------------------------------\n\nTITLE: Using External Data with generateImageMetadata (JSX)\nDESCRIPTION: This example shows how to use the `params` object and fetch external data to generate Open Graph images.  It uses `getOGImages` and `getCaptionForImage` to retrieve image data and caption for dynamic routes.  It returns the image metadata with `id`, `size`, `alt`, and `contentType`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({ params }) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({ params, id }) {\n  const productId = (await params).id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Dynamic Segments with generateStaticParams (TSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` with multiple dynamic segments `[category]` and `[product]` in Next.js. It returns an array of objects, each containing `category` and `product` parameters.  The `Page` component receives both parameters to render the content for each static route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/products/[category]/[product]/page.tsx\" switcher\nexport function generateStaticParams() {\n  return [\n    { category: 'a', product: '1' },\n    { category: 'b', product: '2' },\n    { category: 'c', product: '3' },\n  ]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /products/a/1\n// - /products/b/2\n// - /products/c/3\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ category: string; product: string }>\n}) {\n  const { category, product } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout with HTML Structure (JSX)\nDESCRIPTION: This code snippet demonstrates how to create a root layout component in Next.js (JSX) by incorporating the basic HTML structure from an `index.html` file. It includes the `<html>`, `<head>`, and `<body>` tags, and places the `children` prop within a `div` with the id 'root'. This sets up the foundational HTML structure for all pages within the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Single Dynamic Segment with generateStaticParams (TSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` with a single dynamic segment `[id]` in Next.js.  It returns an array of objects, each containing the `id` parameter, which will be used to generate static routes like `/product/1`, `/product/2`, and `/product/3`.  The `Page` component receives the `id` as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/product/[id]/page.tsx\" switcher\nexport function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/1\n// - /product/2\n// - /product/3\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Post API URLs for Sitemap (PHP)\nDESCRIPTION: This function generates an array of post URLs and their modification dates for sitemap generation. It retrieves post data using `WP_Query` based on user inputs provided by `wsra_get_user_inputs` function, and constructs the post URLs.  It constructs an array of urls that are relative to the homepage and also includes the posts modified date.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction wsra_generate_posts_api()\n{\n  [, $postArgs] = wsra_get_user_inputs();\n  $postUrls = array();\n  $query = new WP_Query($postArgs);\n\n  while ($query->have_posts()) {\n    $query->the_post();\n    $uri = str_replace(home_url(), '', get_permalink());\n    $tempArray = [\n      'url' => $uri,\n      'post_modified_date' => get_the_modified_date(),\n    ];\n    array_push($postUrls, $tempArray);\n  }\n  wp_reset_postdata();\n  return array_merge($postUrls);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Root Layout Setup (TypeScript)\nDESCRIPTION: This code demonstrates setting up the root layout in a Next.js application using TypeScript. It imports a server-side function `getUser` to fetch user data and passes the resulting promise to a `UserProvider` component. The `userPromise` is not awaited, allowing Next.js to start data fetching early on the server. This example improves performance by initiating data fetching in the root layout, avoiding client waterfalls.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserProvider } from './user-provider'\nimport { getUser } from './user' // some server-side function\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  let userPromise = getUser() // do NOT await\n\n  return (\n    <html lang=\"en\">\n      <body>\n        <UserProvider userPromise={userPromise}>{children}</UserProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching CMS data with getStaticProps (TypeScript)\nDESCRIPTION: This snippet shows an example of fetching data from a CMS using `getStaticProps` in a Next.js page. It fetches a list of blog posts and passes them as props to the `Blog` component. This is a typical use case for static site generation with data from a headless CMS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with App Router in Next.js (JavaScript)\nDESCRIPTION: This snippet shows how to implement Incremental Static Regeneration using the App Router in Next.js with JavaScript. It includes revalidation settings, dynamic parameters handling, and static path generation for a blog post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Next.js will invalidate the cache when a\n// request comes in, at most once every 60 seconds.\nexport const revalidate = 60\n\n// We'll prerender only the params from `generateStaticParams` at build time.\n// If a request comes in for a path that hasn't been generated,\n// Next.js will server-render the page on-demand.\nexport const dynamicParams = true // or false, to 404 on unknown paths\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n  return posts.map((post) => ({\n    id: String(post.id),\n  }))\n}\n\nexport default async function Page({ params }) {\n  const { id } = await params\n  const post = await fetch(`https://api.vercel.app/blog/${id}`).then((res) =>\n    res.json()\n  )\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running blog app with yarn\nDESCRIPTION: These commands navigate to the `blog` directory, install dependencies using yarn, and start the development server. The blog app will be accessible at http://localhost:4000/blog.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd blog\nyarn && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Next.js Project\nDESCRIPTION: Command to clean the Next.js project, removing build artifacts and temporary files. Useful when you need a fresh build or are experiencing build issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Using Fetch Loopback with Playwright\nDESCRIPTION: This snippet illustrates how to use the fetch loopback mode with Playwright in Next.js's experimental test mode to mock fetch requests using a custom mocking library. It enables the `fetchLoopback` option via `test.use` and utilizes a custom mocking library (`myFetchMocker`) to mock the response for a specific URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from 'next/experimental/testmode/playwright'\nimport { myFetchMocker } from 'my-fetch-mocker'\n\ntest.use({ nextOptions: { fetchLoopback: true } })\n\ntest('/product/shoe', async ({ page, next }) => {\n  myFetchMocker.mock('http://my-db/product/shoe', {\n    title: 'A shoe',\n  })\n\n  await page.goto('/product/shoe')\n\n  await expect(page.locator('body')).toHaveText(/Shoe/)\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Header with Turbopack Logo and Badges\nDESCRIPTION: HTML markup for the page header containing the Turbopack logo with dark/light mode support and various informational badges including Vercel attribution, version information, license, and community links.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://turbo.build/pack\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/4060187/196945323-570383ab-2a33-44d3-a8f5-14eec8d49a26.png\">\n      <img src=\"https://user-images.githubusercontent.com/4060187/196945312-673c61d1-a7b2-448f-8447-d2aecc06ecfe.png\" height=\"128\">\n    </picture>\n    <h1 align=\"center\">Turbopack</h1>\n  </a>\n</p>\n\n<p align=\"center\">\n  <a aria-label=\"Vercel logo\" href=\"https://vercel.com/\">\n    <img src=\"https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&logo=Vercel&labelColor=000\">\n  </a>\n  <a aria-label=\"Crates.io version\" href=\"https://crates.io/crates/turbopack\">\n    <img alt=\"\" src=\"https://img.shields.io/crates/v/turbopack.svg?style=for-the-badge&labelColor=000000\">\n  </a>\n  <a aria-label=\"License\" href=\"https://github.com/vercel/turbo/blob/main/LICENSE\">\n    <img alt=\"\" src=\"https://img.shields.io/npm/l/turbo.svg?style=for-the-badge&labelColor=000000&color=\">\n  </a>\n  <a aria-label=\"Join the community on GitHub\" href=\"https://github.com/vercel/turbo/discussions\">\n    <img alt=\"\" src=\"https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&logo=turborepo&labelColor=000000&logoWidth=20&logoColor=white\">\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in a JavaScript Component\nDESCRIPTION: This snippet shows the usage of CSS Modules in a JavaScript component, similar to the TypeScript example, for implementing scoped styles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({ children }) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing parse from stacktrace-parser\nDESCRIPTION: Import and alias the parse function from the 'stacktrace-parser' package. Intended for analyzing and formatting JavaScript stack traces. The parse function should be installed as a package dependency. It expects stack trace strings as input.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { parse as parseStackTrace } from \"../compiled/stacktrace-parser\";\n```\n\n----------------------------------------\n\nTITLE: Data Fetching in Not Found Component with Next.js (JavaScript)\nDESCRIPTION: An async implementation of the not-found.js component in JavaScript that fetches data from the server using the headers API. It shows how to display dynamic data in a custom 404 page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n\nexport default async function NotFound() {\n  const headersList = await headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Icon Generation (TypeScript)\nDESCRIPTION: Demonstrates how to access dynamic route parameters when generating icons in Next.js. The example shows how to use the params object in a TypeScript icon generator.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Icon({ params }: { params: { slug: string } }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Qualities in Next.js Config\nDESCRIPTION: Configuration example showing how to set up allowed quality values for the next/image component in next.config.js. This enables specific compression quality levels (25, 50, 75) for image optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-qualities.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    qualities: [25, 50, 75],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Builder.io CLI\nDESCRIPTION: This command installs the Builder.io CLI globally using npm. The CLI is required to generate and manage the Builder.io integration and space for the blog application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @builder.io/cli -g\n```\n\n----------------------------------------\n\nTITLE: Specifying Font Subsets in Next.js\nDESCRIPTION: This code snippet sets up the Inter font with a specified subset, 'latin', for use in a Next.js application. It requires the 'next/font/google' module and the Inter font to be installed. The primary parameter is 'subsets', specifying which subsets of the font to load. The expected input is a JavaScript object with the subsets array, and the output is a font configuration for the Inter font.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-fonts-missing-subsets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n----------------------------------------\n\nTITLE: CSS Background Image from URL\nDESCRIPTION: This CSS snippet demonstrates setting a background image using a URL from an external source, which can be applied to a class.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.className {\n  background: url('https://example.com/assets/hero.jpg');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Inngest example using bunx\nDESCRIPTION: This command uses bunx to create a new Next.js application named \"inngest-app\" based on the \"inngest\" example. It relies on create-next-app for the initial project setup, incorporating configurations and dependencies necessary for Inngest integration.  Bun needs to be installed and available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example inngest inngest-app\n```\n\n----------------------------------------\n\nTITLE: Styling a Component with styled-jsx in Next.js\nDESCRIPTION: This code snippet demonstrates how to style a component using styled-jsx in Next.js. It defines a component that renders a paragraph with red text, styled using a template literal within the `<style jsx>` tag. styled-jsx is a CSS-in-JS library built into Next.js, allowing for component-level styling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-styled-jsx-children.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => (\n  <div>\n    <p>Red paragraph</p>\n    <style jsx>{`\n      p {\n        color: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Variable z as c in Javascript\nDESCRIPTION: This snippet exports the variable 'z' as 'c' from a module, utilizing a Turbopack-specific assertion.  Similar to exporting 'x' and 'y', this is related to module bundling and dependency management.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport { z as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Apple Web App Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the Apple Web App metadata configuration. It includes meta tags for the iTunes app, mobile web app capabilities, title, status bar style, and links to the startup images.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  name=\"apple-itunes-app\"\n  content=\"app-id=myAppStoreID, app-argument=myAppArgument\"\n/>\n<meta name=\"mobile-web-app-capable\" content=\"yes\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Apple Web App\" />\n<link\n  href=\"/assets/startup/apple-touch-startup-image-768x1004.png\"\n  rel=\"apple-touch-startup-image\"\n/>\n<link\n  href=\"/assets/startup/apple-touch-startup-image-1536x2008.png\"\n  media=\"(device-width: 768px) and (device-height: 1024px)\"\n  rel=\"apple-touch-startup-image\"\n/>\n<meta\n  name=\"apple-mobile-web-app-status-bar-style\"\n  content=\"black-translucent\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Ant Design using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the Ant Design example template. It utilizes `create next-app` to bootstrap the project with specified example and application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-ant-design with-ant-design-app\n```\n\n----------------------------------------\n\nTITLE: Running Turbopack Tests\nDESCRIPTION: Command to run the test suite using Turbopack instead of the default webpack configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm test-dev-turbo test/e2e/app-dir/app/\n```\n\n----------------------------------------\n\nTITLE: Generating Consistent Build ID - Next.js\nDESCRIPTION: This code snippet shows how to configure a consistent build ID in `next.config.js` using the `generateBuildId` option. By providing a custom function, you can ensure that all containers use the same build ID across different environments. The example uses the latest Git hash as the build ID, but it can be any unique identifier that persists across deployments.  This is important when rebuilding the application for each stage of your environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Hybrid AMP Page in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates enabling hybrid AMP mode using the `config` export and `useAmp` hook. Setting `amp: 'hybrid'` allows serving both HTML and AMP versions of the page, accessible via the `?amp=1` query parameter.  The `useAmp` hook determines the current mode (AMP or HTML).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-amp.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAmp } from 'next/amp'\n\nexport const config = { amp: 'hybrid' }\n\nfunction About(props) {\n  const isAmp = useAmp()\n\n  return (\n    <div>\n      <h3>My AMP About Page!</h3>\n      {isAmp ? (\n        <amp-img\n          width=\"300\"\n          height=\"300\"\n          src=\"/my-img.jpg\"\n          alt=\"a cool image\"\n          layout=\"responsive\"\n        />\n      ) : (\n        <img width=\"300\" height=\"300\" src=\"/my-img.jpg\" alt=\"a cool image\" />\n      )}\n    </div>\n  )\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Data Fetching Functions\nDESCRIPTION: Re-exports various data fetching functions like getServerSideProps, getStaticPaths, and getStaticProps from TurboPack parts. These snippets demonstrate how Next.js data fetching methods are made available across the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { j as getServerSideProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -15\n};\nexport { getServerSideProps };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i as getStaticPaths } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nexport { getStaticPaths };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h as getStaticProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -13\n};\nexport { getStaticProps };\n\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry API for custom spans\nDESCRIPTION: Installs the `@opentelemetry/api` package, which is required for creating custom spans in a Next.js application. This package provides the necessary APIs to manually instrument specific parts of the code with OpenTelemetry.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @opentelemetry/api\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting StaticGenBailoutError in Next.js\nDESCRIPTION: Imports the StaticGenBailoutError from the static-generation-bailout module and re-exports it for use in other parts of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nexport { StaticGenBailoutError as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring onDemandEntries in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to configure onDemandEntries in the Next.js configuration file. It shows options for controlling page disposal time, buffer size, and whether to write build artifacts to disk.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/onDemandEntries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n    // Whether to write to disk or keep pages in memory\n    // This option has been removed and currently has no effect\n    // keepAlive: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MyModuleClientComponent in JavaScript\nDESCRIPTION: This snippet imports the MyModuleClientComponent from the specified module path. The component is incorporated for custom client functionalities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing Variable x by 1 in Javascript\nDESCRIPTION: This snippet increments the value of the variable 'x' by 1 using the addition assignment operator. This is a common arithmetic operation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nx = x + 1;\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Merged (dev)\nDESCRIPTION: This code snippet merges JavaScript modules for development. It imports `shared`, modifies `externalObject`, logs it, defines `a`, and exports `e`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nexternalObject.propertyWithSetter = 42;\nconsole.log(shared);\nconst a = {\n    shared,\n    a: \"aaaaaaaaaaa\"\n};\nexport { a as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js Document Components\nDESCRIPTION: Imports the core Document class and related components from Next.js document module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Firebase Example (Yarn)\nDESCRIPTION: This command initializes a new Next.js application named `with-firebase-app` using the `with-firebase` example. It leverages the `create next-app` tool with the Yarn package manager. This command assumes Yarn is installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-firebase with-firebase-app\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Fallback with SWRConfig in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure SWR's fallback data using the SWRConfig component in a Next.js application using JavaScript. The getUser() function, assumed to be a server-side function, is used to pre-populate the SWR cache with user data for the '/api/user' key. This allows client components to immediately access the data without an initial loading state. The component reading this data will suspend.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SWRConfig } from 'swr'\nimport { getUser } from './user' // some server-side function\n\nexport default function RootLayout({ children }) {\n  return (\n    <SWRConfig\n      value={{\n        fallback: {\n          // We do NOT await getUser() here\n          // Only components that read this data will suspend\n          '/api/user': getUser(),\n        },\n      }}\n    >\n      {children}\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Profile Component using use Hook (TypeScript)\nDESCRIPTION: This code shows how to use React's `use` hook to unwrap a Promise within a Client Component in Next.js using TypeScript. The `Profile` component uses the custom `useUser` hook to retrieve the `userPromise` from the context and then uses the `use` hook to suspend rendering until the Promise resolves. The resolved user data is then used in the component. This example demonstrates partial hydration and the use of React's `use` hook for data fetching in Client Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { use } from 'react'\nimport { useUser } from './user-provider'\n\nexport function Profile() {\n  const { userPromise } = useUser()\n  const user = use(userPromise)\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Route Handler Enhancements for Asynchronous Data\nDESCRIPTION: This JavaScript snippet modifies a route handler by introducing `await` for reading parameters asynchronously, ensuring the `GET` function adapts to updated asynchronous parameter handling. This update streamlines processing of request-related data within the route handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport async function GET(request, segmentData) {\\n  const params = segmentData.params\\n  const slug = params.slug\\n}\\n\\n// After\\nexport async function GET(request, segmentData) {\\n  const params = await segmentData.params\\n  const slug = params.slug\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Session with React Cache API in DAL (JavaScript)\nDESCRIPTION: This JavaScript code snippet implements a `verifySession` function using the `cache` API from React within a Next.js Data Access Layer. It retrieves and decrypts a session cookie, checks if a user ID exists in the session, redirects to '/login' if the session is invalid, and returns an object containing authentication status and the user ID. The code is intended for server-side execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\n\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport const verifySession = cache(async () => {\n  const cookie = (await cookies()).get('session')?.value\n  const session = await decrypt(cookie)\n\n  if (!session.userId) {\n    redirect('/login')\n  }\n\n  return { isAuth: true, userId: session.userId }\n})\n```\n\n----------------------------------------\n\nTITLE: Spawning Processes with Dynamic Inputs in Node.js\nDESCRIPTION: This snippet demonstrates invoking child processes using the spawnSync method from the child_process module in Node.js. It highlights potential problems by using dynamically generated inputs with Math.random(), which can lead to unpredictable behaviors. Dependencies include the node:fs and child_process modules. Inputs are dynamic values generated at runtime, and outputs depend on the invoked commands. Use caution with dynamic inputs to avoid security and stability issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(FreeVa-635fa3.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fs, { readFileSync } from \"node:fs\";\n\nconst unknown = Math.random();\n\nchild_process.spawnSync(unknown);\nchild_process.spawnSync(\"node\", unknown);\nchild_process.spawnSync(\"node\", [unknown, unknown]);\n\nrequire(unknown);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Custom Route Configuration in Next.js\nDESCRIPTION: This snippet shows an incorrect way of defining custom routes in Next.js, where the rewrite rule is not wrapped in an array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/routes-must-be-array.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return {\n      source: '/feedback',\n      destination: '/feedback/general',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with remark-gfm Plugin\nDESCRIPTION: This snippet configures a Next.js application to use the `remark-gfm` plugin for supporting GitHub Flavored Markdown within MDX files. It utilizes `next.config.mjs` to define the configuration, including specifying the `remarkPlugins` option. The `createMDX` function from `@next/mdx` is used to combine the MDX configuration with the Next.js configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport remarkGfm from 'remark-gfm'\nimport createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Allow .mdx extensions for files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n\nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n  options: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [],\n  },\n})\n\n// Combine MDX and Next.js config\nexport default withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS headers in next.config.js (JavaScript)\nDESCRIPTION: This code shows how to configure Cross-Origin Resource Sharing (CORS) headers in `next.config.js`. It sets the `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` headers for API routes. The `source` matches API route paths, and the `value` for `Access-Control-Allow-Origin` should be set to your specific origin, instead of `*` for production.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync headers() {\n    return [\n      {\n        source: \"/api/:path*\",\n        headers: [\n          {\n            key: \"Access-Control-Allow-Origin\",\n            value: \"*\", // Set your origin\n          },\n          {\n            key: \"Access-Control-Allow-Methods\",\n            value: \"GET, POST, PUT, DELETE, OPTIONS\",\n          },\n          {\n            key: \"Access-Control-Allow-Headers\",\n            value: \"Content-Type, Authorization\",\n          },\n        ],\n      },\n    ];\n  },\n```\n\n----------------------------------------\n\nTITLE: Single Dynamic Segment with generateStaticParams (JSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` with a single dynamic segment `[id]` in Next.js. It returns an array of objects, each containing the `id` parameter, which will be used to generate static routes like `/product/1`, `/product/2`, and `/product/3`. The `Page` component receives the `id` as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/product/[id]/page.js\" switcher\nexport function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/1\n// - /product/2\n// - /product/3\nexport default async function Page({ params }) {\n  const { id } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with Pages Router in Next.js (JavaScript)\nDESCRIPTION: This example shows how to implement Incremental Static Regeneration using the Pages Router in Next.js with JavaScript. It includes static path generation, static props fetching, and revalidation settings for a blog post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticPaths() {\n  const posts = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll prerender only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(\n    (res) => res.json()\n  )\n\n  return {\n    props: { post },\n    // Next.js will invalidate the cache when a\n    // request comes in, at most once every 60 seconds.\n    revalidate: 60,\n  }\n}\n\nexport default function Page({ post }) {\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Dynamic Segments with generateStaticParams (JSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` with multiple dynamic segments `[category]` and `[product]` in Next.js. It returns an array of objects, each containing `category` and `product` parameters. The `Page` component receives both parameters to render the content for each static route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/products/[category]/[product]/page.js\" switcher\nexport function generateStaticParams() {\n  return [\n    { category: 'a', product: '1' },\n    { category: 'b', product: '2' },\n    { category: 'c', product: '3' },\n  ]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /products/a/1\n// - /products/b/2\n// - /products/c/3\nexport default async function Page({ params }) {\n  const { category, product } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Static Paths with Conflicts in JavaScript\nDESCRIPTION: This snippet sets up a catch-all page and defines static paths that could conflict with other pages. By configuring `getStaticPaths`, it highlights how duplicate paths can be removed to resolve conflicts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = () => ({ props: {} })\n\nexport const getStaticPaths = () => ({\n  paths: [\n    '/hello/world', // <-- this conflicts with the /hello/world.js page, remove to resolve error\n    '/another',\n  ],\n  fallback: false,\n})\n\nexport default function CatchAllPage() {\n  return 'Catch-all page'\n}\n```\n\n----------------------------------------\n\nTITLE: Third-party Integration With Connection API\nDESCRIPTION: Updated implementation using the connection API to handle third-party integrations properly in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Page() {\n  await connection()\n  // Everything from here down will be excluded from prerendering\n  const token = await getDataFrom3rdParty();\n  validateToken(token)\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Define Signup Server Action in Next.js (JS)\nDESCRIPTION: This code snippet defines a Server Action named `signup` which is meant to handle the form submission. This particular snippet contains an empty function body, representing a placeholder for future implementation. It accepts `formData` as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport async function signup(formData) {}\n```\n\n----------------------------------------\n\nTITLE: Push Prisma Schema to PlanetScale\nDESCRIPTION: Applies the Prisma schema to the PlanetScale database. The available package managers are npm, yarn, and pnpm. This command creates tables and relationships defined in the Prisma schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn prisma db push\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm prisma\n```\n\n----------------------------------------\n\nTITLE: Exporting Variable y as b in Javascript\nDESCRIPTION: This snippet exports the variable 'y' as 'b' from a module, utilizing a Turbopack-specific assertion.  Similar to exporting 'x', this is related to module bundling and dependency management.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport { y as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with Prefixed Link\nDESCRIPTION: Shows the resulting HTML output when basePath is applied, automatically prefixing the href attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/docs/about\">About Page</a>\n```\n\n----------------------------------------\n\nTITLE: Exporting RouteModule in JavaScript\nDESCRIPTION: Here, routeModule is imported and exported to represent routing logic. It is structured to work with the TurboPack system, optimizing module reuse and routing consistency across various application parts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as routeModule } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nexport { routeModule };\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Contentful example using npm\nDESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project using the cms-contentful example. It creates a directory named cms-contentful-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-contentful cms-contentful-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the react-native-web example. It efficiently manages dependencies and sets up the project for using React Native Web in a Next.js context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-native-web with-react-native-web-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Auth0 App with Yarn\nDESCRIPTION: Command to bootstrap a Next.js application with Auth0 integration using Yarn and create-next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example auth0 auth0-app\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running the development server - pnpm\nDESCRIPTION: These commands use pnpm to install the project's dependencies and then start the Next.js development server. `pnpm install` installs all the packages listed in the `package.json` file. `pnpm dev` starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind Typography (TSX - Pages Router)\nDESCRIPTION: This TypeScript code demonstrates how to apply Tailwind typography styles to a shared MDX layout in a Next.js application using the Pages Router. It uses the `prose` class from the `@tailwindcss/typography` plugin to provide typographic styles to the MDX content. The code also customizes heading styles using additional Tailwind classes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js app with Stitches using Yarn\nDESCRIPTION: This command utilizes Yarn to set up a new Next.js application using the with-stitches example. It runs the create next-app command, specifying the example and the application name. This assumes that Yarn is already installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-stitches with-stitches-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Emotion (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application configured with Emotion.  It uses `create next-app` with the `with-emotion-swc` example to bootstrap the project. The resulting application is placed in the `with-emotion-swc-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-emotion-swc with-emotion-swc-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Video.js Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-videojs example. It bootstraps the project with necessary dependencies and configurations for Video.js integration. The new application will be named with-videojs-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-videojs with-videojs-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Suspense Boundary for SearchBar Component in Next.js\nDESCRIPTION: The `Page` component integrates a Suspense boundary around the `SearchBar` component to handle dynamic search parameters, ensuring optimal static rendering. The `SearchBarFallback` component serves as a fallback during the initial render before the search parameters are available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/deopted-into-client-rendering.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>  \n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>  \n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging Variable Value - JavaScript\nDESCRIPTION: This snippet logs the value of 'foobarCopy' to the console. It serves as a demonstration of outputting variable values during execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(foobarCopy);\n\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Runtime Configuration\nDESCRIPTION: Configures the API route to use Edge Runtime by exporting a runtime constant\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const runtime = \"edge\";\n```\n\n----------------------------------------\n\nTITLE: Running Development Tests for App Router\nDESCRIPTION: Command to run tests in the 'test/e2e/app-dir/app' test suite in development mode, which uses 'next dev'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm test-dev test/e2e/app-dir/app/\n```\n\n----------------------------------------\n\nTITLE: Convert Base64 to Uint8Array - TypeScript\nDESCRIPTION: This function converts a base64 string to a Uint8Array, which is required for the applicationServerKey when subscribing to push notifications. It handles padding and replaces URL-safe characters before decoding the base64 string using the window.atob() method. The resulting raw data is then converted to a Uint8Array and returned.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction urlBase64ToUint8Array(base64String: string) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Paste and TypeScript using Yarn\nDESCRIPTION: This command utilizes Yarn to initialize a new Next.js application using the 'with-paste-typescript' example template. It ensures that the project is set up with the Paste component library and TypeScript.  The application will be created in a directory named 'with-paste-typescript-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-paste-typescript with-paste-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Registering a new primary menu in WordPress (PHP)\nDESCRIPTION: This code registers a new navigation menu named 'Primary menu' within the WordPress admin panel. It uses the `register_nav_menus` function, hooked to the `init` action, to make the menu available for selection in the WordPress backend under Appearance -> Menus. This allows users to define a custom menu to be displayed in the Next.js frontend.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Registers new menus\n *\n * @return void\n */\nadd_action('init', 'register_new_menu');\nfunction register_new_menu()\n{\n  register_nav_menus(\n    array(\n      'primary-menu' => __('Primary menu')\n    )\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with next-translate using pnpm\nDESCRIPTION: This command employs pnpm to initiate a new Next.js application, integrating the next-translate example. It configures the project with the specified example and provides a name for the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-next-translate with-next-translate-app\n```\n\n----------------------------------------\n\nTITLE: Module Part 9: Prerender State Creation\nDESCRIPTION: This JavaScript snippet defines the `createPrerenderState` function, which initializes and returns an object containing prerendering state information. The state includes whether the debug skeleton is enabled and an array to track dynamic accesses during prerendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createPrerenderState(isDebugSkeleton) {\n    return {\n        isDebugSkeleton,\n        dynamicAccesses: []\n    };\n}\nexport { createPrerenderState };\nexport { createPrerenderState as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with pnpm\nDESCRIPTION: This command initializes a new Next.js project using pnpm, utilizing the with-route-as-modal example.  It clones the example into a new directory named 'with-route-as-modal-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-route-as-modal with-route-as-modal-app\n```\n\n----------------------------------------\n\nTITLE: Identifying Next.js Config Properties Causing Minification Issues\nDESCRIPTION: The problematic configuration properties in next.config.js that can disable production minification. These settings should not be modified as they can severely impact performance and cause server-side code to be exposed to clients.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/minification-disabled.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\noptimization.minimize\noptimization.minimizer\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version via yarn\nDESCRIPTION: This snippet provides the command to install the canary version of Next.js using yarn, which is an alternative package manager for JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/opening-an-issue.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@canary\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with GTM Example (npm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-google-tag-manager` example from the Next.js repository. It utilizes `create-next-app` via `npx` to bootstrap the project with the specified template and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-google-tag-manager with-google-tag-manager-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Panda CSS using pnpm\nDESCRIPTION: This command utilizes pnpm to execute create-next-app, setting up a new Next.js project with the panda-css example. The created project is named 'panda-css-app', and it's configured with Panda CSS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example panda-css panda-css-app\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Signal Handling - Next.js\nDESCRIPTION: This JSON snippet shows how to enable manual signal handling in a Next.js application by setting the `NEXT_MANUAL_SIG_HANDLE` environment variable to `true` in the `package.json` script. This allows you to register custom handlers for `SIGTERM` and `SIGINT` signals within your application, enabling graceful shutdown procedures such as cleaning up resources or saving state before the server terminates. This setting is only available when using `next start` and not in development mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"NEXT_MANUAL_SIG_HANDLE=true next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app using pnpm\nDESCRIPTION: This command initializes a new Next.js application named `github-pages-app` using the `github-pages` example from the `create-next-app` tool. The command uses pnpm to execute the create-next-app package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example github-pages github-pages-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command employs pnpm to create a fresh Next.js application using the 'with-mobx' example. It prepares the project with the required settings and dependencies for integrating MobX with Next.js. The `with-mobx-app` argument sets the name for the generated application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mobx with-mobx-app\n```\n\n----------------------------------------\n\nTITLE: Next.js SWC Linux x64 Musl Package Name\nDESCRIPTION: Package name definition for the Linux x64 Musl binary variant of Next.js SWC compiler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/linux-x64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@next/swc-linux-x64-musl\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation with Styled JSX - JavaScript\nDESCRIPTION: This snippet is the JavaScript version of implementing the root layout with StyledJsxRegistry, allowing for global styling in the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport StyledJsxRegistry from './registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ColumnGap Property for CSS Grid in JavaScript\nDESCRIPTION: A module that implements the 'columnGap' CSS grid property. It handles responsive breakpoints, transforms values using theme spacing, and includes PropType validation for development environments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { createUnaryUnit } from './spacing';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getValue } from './spacing';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport { handleBreakpoints } from './breakpoints';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 12\n};\nconst columnGap = (props)=>{\n    if (props.columnGap !== undefined && props.columnGap !== null) {\n        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');\n        const styleFromPropValue = (propValue)=>({\n                columnGap: getValue(transformer, propValue)\n            });\n        return handleBreakpoints(props, props.columnGap, styleFromPropValue);\n    }\n    return null;\n};\nexport { columnGap as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h as columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nimport responsivePropType from './responsivePropType';\ncolumnGap.propTypes = process.env.NODE_ENV !== 'production' ? {\n    columnGap: responsivePropType\n} : {};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h as columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 15\n};\ncolumnGap.filterProps = [\n    'columnGap'\n];\nexport { columnGap };\n```\n\n----------------------------------------\n\nTITLE: Implementing RowGap Property for CSS Grid in JavaScript\nDESCRIPTION: A module that implements the 'rowGap' CSS grid property. It handles responsive breakpoints, transforms values using theme spacing, and includes utility functions for value transformation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { createUnaryUnit } from './spacing';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getValue } from './spacing';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport { handleBreakpoints } from './breakpoints';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 15\n};\nconst rowGap = (props)=>{\n    if (props.rowGap !== undefined && props.rowGap !== null) {\n        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');\n        const styleFromPropValue = (propValue)=>({\n                rowGap: getValue(transformer, propValue)\n            });\n        return handleBreakpoints(props, props.rowGap, styleFromPropValue);\n    }\n    return null;\n};\nexport { rowGap as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Mutations with Server Actions (javascript)\nDESCRIPTION: This snippet demonstrates how to use the `forbidden` function to protect mutations in a Server Action based on user roles. It verifies the user's session, checks if they have the 'admin' role, and calls `forbidden()` if they don't, preventing unauthorized data updates. It assumes that `verifySession` retrieves the user's session and role information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\nimport db from '@/app/lib/db'\n\nexport async function updateRole(formData) {\n  const session = await verifySession()\n\n  // Ensure only admins can update roles\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n\n  // Perform the role update for authorized users\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using onLoad Callback (App Router, JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `onLoad` property with the `Script` component to execute code after the script has loaded in a Next.js application using the App Router.  This is useful for initializing content or calling a function from the loaded script. `onLoad` can only be used in Client Components and with `afterInteractive` or `lazyOnload` strategies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRouter in Next.js React Component\nDESCRIPTION: This code snippet demonstrates how to use the 'withRouter' Higher-Order Component in Next.js to access router information. It imports 'withRouter', creates a React component that logs the router object and renders the pathname, and exports the component wrapped with 'withRouter'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/url-deprecated.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withRouter } from 'next/router'\n\nclass Page extends React.Component {\n  render() {\n    const { router } = this.props\n    console.log(router)\n    return <div>{router.pathname}</div>\n  }\n}\n\nexport default withRouter(Page)\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind Typography (TSX - App Router)\nDESCRIPTION: This TypeScript code demonstrates how to apply Tailwind typography styles to a shared MDX layout within a Next.js application using the App Router. The `prose` class from `@tailwindcss/typography` is added to the `div` element, providing default typographic styles for the MDX content. Additional classes customize heading styles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configure PostCSS plugins for Next.js with CSS Grid support (JSON)\nDESCRIPTION: This JSON configuration file for PostCSS enables IE11 support for CSS Grid Layout. It uses `postcss-flexbugs-fixes` and `postcss-preset-env` plugins.  `postcss-flexbugs-fixes` corrects cross-browser flexbox bugs. `postcss-preset-env` applies modern CSS features with Autoprefixer configured to enable flexbox and grid. The `custom-properties` feature is disabled.  Requires `postcss-flexbugs-fixes` and `postcss-preset-env` to be installed as dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"postcss-flexbugs-fixes\",\n    [\n      \"postcss-preset-env\",\n      {\n        \"autoprefixer\": {\n          \"flexbox\": \"no-2009\",\n          \"grid\": \"autoplace\"\n        },\n        \"stage\": 3,\n        \"features\": {\n          \"custom-properties\": false\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Routing using window.history.pushState (TypeScript)\nDESCRIPTION: This snippet shows how to implement shallow routing in a Next.js application using `window.history.pushState`. It uses the `useSearchParams` hook to get the current search parameters, updates the 'sort' parameter with the specified `sortOrder`, and then uses `window.history.pushState` to update the URL without triggering a full page reload.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder: string) {\n    const urlSearchParams = new URLSearchParams(searchParams.toString())\n    urlSearchParams.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${urlSearchParams.toString()}`)\n  }\n\n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Bookmarks Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the bookmarks metadata configuration. It includes a `<link>` tag with `rel=\"bookmarks\"`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"bookmarks\" href=\"https://nextjs.org/13\" />\n```\n\n----------------------------------------\n\nTITLE: Permanent redirect after mutation with `permanentRedirect` in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `permanentRedirect` function from `next/navigation` within a server action in the App Router to permanently redirect a user after updating their username. It imports `permanentRedirect` and `revalidateTag`, calls a database function (placeholder), revalidates the username tag, and then permanently redirects the user to the new profile page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\"\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username, formData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AMP for a Page in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to enable AMP support for a specific page in a Next.js application.  It exports a `config` object with the `amp` property set to `true`. This tells Next.js to generate an AMP version of the page. It also shows how to use an AMP component (`amp-timeago`) within the page. Requires importing and using `next/amp` (implicitly).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = { amp: true }\n\nfunction MyAmpPage() {\n  const date = new Date()\n\n  return (\n    <div>\n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n\nexport default MyAmpPage\n```\n\n----------------------------------------\n\nTITLE: Sending Google Analytics events (App Router - JSX)\nDESCRIPTION: This code snippet demonstrates how to send events to Google Analytics using the `sendGAEvent` function from `@next/third-parties/google` within an App Router component. It defines a button that, when clicked, dispatches a custom event named 'buttonClicked' with the value 'xyz'. The `'use client'` directive indicates that this is a client-side component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { sendGAEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Role-based route protection (tsx)\nDESCRIPTION: This snippet shows how to implement role-based route protection using the `forbidden` function in a Server Component. It checks if the user has the 'admin' role and calls `forbidden()` if they do not, preventing unauthorized access to the route. It assumes `verifySession` is fetching user session data, including their role.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\n\nexport default async function AdminPage() {\n  const session = await verifySession()\n\n  // Check if the user has the 'admin' role\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n\n  // Render the admin page for authorized users\n  return (\n    <main>\n      <h1>Admin Dashboard</h1>\n      <p>Welcome, {session.user.name}!</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode\nDESCRIPTION: These commands initiate the Next.js development server. `npm install` or `yarn` install the project dependencies, while `npm run dev` or `yarn dev` start the development server, making the application accessible in the browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Appending Strings to Variables in JavaScript Part 6\nDESCRIPTION: This snippet imports TurboPack parts and appends a string to an existing variable. It exemplifies in-place variable content modification within the module system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nfoobar += \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Twitter App Metadata HTML Output\nDESCRIPTION: This code shows the HTML output generated from the Twitter app metadata configuration. It includes meta tags for the card type, site ID, creator, creator ID, title, description, image, alt text, and app details (name, ID, and URL) for iPhone, iPad, and Google Play.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:card\" content=\"app\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n<meta name=\"twitter:image:alt\" content=\"Next.js Logo\" />\n<meta name=\"twitter:app:name:iphone\" content=\"twitter_app\" />\n<meta name=\"twitter:app:id:iphone\" content=\"twitter_app://iphone\" />\n<meta name=\"twitter:app:id:ipad\" content=\"twitter_app://ipad\" />\n<meta name=\"twitter:app:id:googleplay\" content=\"twitter_app://googleplay\" />\n<meta name=\"twitter:app:url:iphone\" content=\"https://iphone_url\" />\n<meta name=\"twitter:app:url:ipad\" content=\"https://ipad_url\" />\n<meta name=\"twitter:app:name:ipad\" content=\"twitter_app\" />\n<meta name=\"twitter:app:name:googleplay\" content=\"twitter_app\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Copied Variable - JavaScript\nDESCRIPTION: This snippet modifies 'foobarCopy' by appending the string 'Unused' to it, showcasing how changes affect independent variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfoobarCopy += \"Unused\";\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Patterns in Next.js\nDESCRIPTION: This snippet describes the configuration of allowed remote image patterns in `next.config.js` to safeguard against misuse while using the built-in optimization features of Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Another Constant in JavaScript\nDESCRIPTION: This snippet declares a constant 'cat' and assigns it the string value 'cat'. Similar to the previous snippet, it demonstrates a basic use of 'const'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cat = \"cat\";\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Inngest example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named \"inngest-app\" based on the \"inngest\" example. It leverages create-next-app to streamline the project setup with necessary configurations and dependencies for Inngest integration. The command assumes npm is available and configured on the system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example inngest inngest-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Couchbase example\nDESCRIPTION: These commands demonstrate how to create a new Next.js application using the Couchbase example. It provides instructions for using npm, yarn, and pnpm to bootstrap the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-couchbase with-couchbase-app\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Deprecated Prefetch Attribute in Next.js\nDESCRIPTION: This snippet shows the deprecated usage of the Link component with `prefetch={true}`. This is no longer required as prefetching is now the default behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prefetch-true-deprecated.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Link prefetch={true}>\n```\n\n----------------------------------------\n\nTITLE: Structuring App Router Directory in Next.js 13+\nDESCRIPTION: Illustrates the folder structure for a Next.js project using the App Router, which allows colocation of pages and other files within the same folder.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n  .\n  └── app/\n      ├── about/\n      │   └── page.tsx\n      ├── blog/\n      │   ├── page.tsx\n      │   └── PostCard.tsx\n      ├── layout.tsx\n      └── page.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-passport-and-next-connect example. It bootstraps the project with the necessary files and configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Rust Build Artifacts\nDESCRIPTION: Command to free up disk space by cleaning old Rust build artifacts, pnpm store, cargo caches, and running git garbage collection.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm sweep\n```\n\n----------------------------------------\n\nTITLE: Empty Javascript Module\nDESCRIPTION: This snippet represents an empty JavaScript module. It might indicate a module that doesn't perform any specific actions or is used for structural purposes within the Turbopack bundling process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Identifying React Context Elements\nDESCRIPTION: Shows how to use react-is to check if elements are Context Providers or Consumers, using both the type-specific functions and the general typeOf function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport * as ReactIs from 'react-is';\n\nconst ThemeContext = React.createContext(\"blue\");\n\nReactIs.isContextConsumer(<ThemeContext.Consumer />); // true\nReactIs.isContextProvider(<ThemeContext.Provider />); // true\nReactIs.typeOf(<ThemeContext.Provider />) === ReactIs.ContextProvider; // true\nReactIs.typeOf(<ThemeContext.Consumer />) === ReactIs.ContextConsumer; // true\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Meilisearch Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-meilisearch example. It sets up the project with the required dependencies and configurations for Meilisearch.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-meilisearch with-meilisearch-app\n```\n\n----------------------------------------\n\nTITLE: Module Evaluation and Route Module Initialization in JavaScript\nDESCRIPTION: This snippet focuses on initializing the routeModule with configuration details such as kind, page, pathname, and filename. These setups are vital for the RouteKind details and are verified using TurboPack assertions to ensure module configuration consistency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { AppRouteRouteModule } from '../../server/future/route-modules/app-route/module.compiled';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { RouteKind } from '../../server/future/route-kind';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        filename: 'VAR_DEFINITION_FILENAME',\n        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'\n    },\n    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n    nextConfigOutput,\n    userland\n});\nexport { routeModule as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Role-based route protection (jsx)\nDESCRIPTION: This snippet shows how to implement role-based route protection using the `forbidden` function in a Server Component. It checks if the user has the 'admin' role and calls `forbidden()` if they do not, preventing unauthorized access to the route. It assumes `verifySession` is fetching user session data, including their role.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\n\nexport default async function AdminPage() {\n  const session = await verifySession()\n\n  // Check if the user has the 'admin' role\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n\n  // Render the admin page for authorized users\n  return (\n    <main>\n      <h1>Admin Dashboard</h1>\n      <p>Welcome, {session.user.name}!</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Metadata Example (Required Fields)\nDESCRIPTION: This YAML snippet demonstrates the required metadata fields for a Next.js documentation page, including the `title` for SEO and OG Images, and the `description` for the `<meta name=\"description\">` tag. These fields are essential for every documentation page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Page Title\ndescription: Page Description\n---\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 10 using Yarn\nDESCRIPTION: Command to upgrade Next.js to version 10 using Yarn package manager. This will update the next package in your project's dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@10\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dependencies and Exports with Mermaid\nDESCRIPTION: A series of Mermaid diagrams that visualize dependencies and relationships among various items, imports, and exports declared in the JavaScript code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item14[\"export foobar\"];\n    Item15;\n    Item15[\"export foo\"];\n    Item16;\n    Item16[\"export external1\"];\n    Item17;\n    Item17[\"export external2\"];\n\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n...\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n...\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n...\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with three.js using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the three.js example. The `create next-app` command bootstraps the project, setting up the necessary files and dependencies. The example name (`with-three-js`) and application name (`with-three-js-app`) are passed as arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-three-js with-three-js-app\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Functional Components with TypeScript\nDESCRIPTION: Shows how to use React.forwardRef to pass a ref to a functional component. It involves wrapping the component to enable proper handling of href and onClick attributes. This setup is for TypeScript in a Next.js app, depending on 'react' and 'next/link'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\nimport React from 'react'\n\n// Define the props type for MyButton\ninterface MyButtonProps {\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n  href?: string\n}\n\n// Use React.ForwardRefRenderFunction to properly type the forwarded ref\nconst MyButton: React.ForwardRefRenderFunction<\n  HTMLAnchorElement,\n  MyButtonProps\n> = ({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n}\n\n// Use React.forwardRef to wrap the component\nconst ForwardedMyButton = React.forwardRef(MyButton)\n\nexport default function Page() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <ForwardedMyButton />\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling router errors with router.events\nDESCRIPTION: This code snippet demonstrates how to handle router errors, specifically cancelled route changes, using `router.events.on`. It subscribes to the `routeChangeError` event and logs a message if the navigation was cancelled. The handler is unsubscribed in the effect's cleanup function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n\n  useEffect(() => {\n    const handleRouteChangeError = (err, url) => {\n      if (err.cancelled) {\n        console.log(`Route to ${url} was cancelled!`)\n      }\n    }\n\n    router.events.on('routeChangeError', handleRouteChangeError)\n\n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n    return () => {\n      router.events.off('routeChangeError', handleRouteChangeError)\n    }\n  }, [router])\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using forbidden in Server Component (jsx)\nDESCRIPTION: This snippet demonstrates how to use the `forbidden` function within a Server Component to protect a route based on user roles. It imports `verifySession` and `forbidden`, verifies the user's session, checks if the user has the 'admin' role, and calls `forbidden()` if the user does not have the required role, rendering a 403 error page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\n\nexport default async function AdminPage() {\n  const session = await verifySession()\n\n  // Check if the user has the 'admin' role\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n\n  // Render the admin page for authorized users\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image Metadata Array (JSX)\nDESCRIPTION: This example demonstrates how to use `generateImageMetadata` to return an array of objects, each containing metadata for a different image version. It includes properties like `contentType`, `size`, and a required `id`, which is later passed as props to the image generating function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n\nexport default function Icon({ id }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using forbidden in Server Component (tsx)\nDESCRIPTION: This snippet demonstrates how to use the `forbidden` function within a Server Component to protect a route based on user roles. It imports `verifySession` and `forbidden`, verifies the user's session, checks if the user has the 'admin' role, and calls `forbidden()` if the user does not have the required role, rendering a 403 error page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\n\nexport default async function AdminPage() {\n  const session = await verifySession()\n\n  // Check if the user has the 'admin' role\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n\n  // Render the admin page for authorized users\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Loading State - JavaScript\nDESCRIPTION: This code snippet demonstrates how to display a loading state during form submission in a Next.js component using JavaScript. It uses React state to track the loading state and disables the submit button while loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react'\n\nexport default function Page() {\n  const [isLoading, setIsLoading] = useState(false)\n\n  async function onSubmit(event) {\n    event.preventDefault()\n    setIsLoading(true) // Set loading to true when the request starts\n\n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n\n      // Handle response if necessary\n      const data = await response.json()\n      // ...\n    } catch (error) {\n      // Handle error if necessary\n      console.error(error)\n    } finally {\n      setIsLoading(false) // Set loading to false when the request completes\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Loading...' : 'Submit'}\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font in Class Component in Next.js\nDESCRIPTION: This code snippet demonstrates how to add a custom font to a Next.js application by modifying the `_document.js` file using a class component.  It imports necessary modules from 'next/document' and overrides the render method to include the font link within the `<Head>` section. This ensures the font is loaded globally and enables automatic font optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-page-custom-font.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head>\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"\n            rel=\"stylesheet\"\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Meta Tags using Key Prop - JSX\nDESCRIPTION: This code shows how to prevent duplicate meta tags within the `<head>` of a Next.js page by utilizing the `key` property.  When multiple `<Head>` components define the same meta tag with the same `key`, only the last one is rendered. This avoids conflicts and ensures the desired meta information is present.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/head.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n        <meta property=\"og:title\" content=\"My page title\" key=\"title\" />\n      </Head>\n      <Head>\n        <meta property=\"og:title\" content=\"My new title\" key=\"title\" />\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data in Layout Component (TypeScript)\nDESCRIPTION: This TypeScript code illustrates fetching user data within a Next.js layout component. It asynchronously retrieves user data using the `getUser` function from the DAL. The fetched user data is then available for rendering within the layout, allowing for personalized content or conditional rendering based on user information. This approach emphasizes performing auth checks within the DAL rather than directly in the layout to ensure consistent security across the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const user = await getUser();\n\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Turbo-tasks Registry Generation in Rust\nDESCRIPTION: Example of auto-generated registry code that maps global identifiers to implementations. Shows how type registrations are handled for value types and functions. Generated by the build script to enable runtime type resolution and serialization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{\ncrate::nothing::NOTHINGVC_IMPL_NEW_FUNCTION.register(r##\"turbo-tasks@TODO::::nothing::NothingVc::new\"##);\ncrate::display::VALUETOSTRING_TRAIT_TYPE.register(r##\"turbo-tasks@TODO::::display::ValueToString\"##);\ncrate::primitives::STRING_VALUE_TYPE.register(r##\"turbo-tasks@TODO::::primitives::String\"##);\ncrate::primitives::BOOL_VALUE_TYPE.register(r##\"turbo-tasks@TODO::::primitives::Bool\"##);\ncrate::nothing::NOTHING_VALUE_TYPE.register(r##\"turbo-tasks@TODO::::nothing::Nothing\"##);\ncrate::native_function::NATIVEFUNCTION_VALUE_TYPE.register(r##\"turbo-tasks@TODO::::native_function::NativeFunction\"##);\ncrate::completion::COMPLETION_VALUE_TYPE.register(r##\"turbo-tasks@TODO::::completion::Completion\"##);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Compilation with Rust in Next.js JavaScript\nDESCRIPTION: This code snippet showcases the setup for using the Rust compiler with MDX in a Next.js project. It imports the '@next/mdx' package and configures the Next.js application to handle '.mdx' files and enable the experimental mdxRs feature. The configuration is then exported using the withMDX function from the '@next/mdx' package to integrate it into the project. Required dependencies include '@next/mdx' and a Next.js environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/mdxRs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'],\n  experimental: {\n    mdxRs: true,\n  },\n}\n\nmodule.exports = withMDX(nextConfig)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Drupal example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'cms-drupal-app' based on the 'cms-drupal' example. This will bootstrap a project configured to fetch data from a Drupal backend for static generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-drupal cms-drupal-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Worker for Push Notifications\nDESCRIPTION: This JavaScript code defines a service worker that listens for 'push' events and displays a notification. It also listens for 'notificationclick' events and opens a new window.  The URL in `clients.openWindow` should be replaced with your application's URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nself.addEventListener('push', function (event) {\n  if (event.data) {\n    const data = event.data.json()\n    const options = {\n      body: data.body,\n      icon: data.icon || '/icon.png',\n      badge: '/badge.png',\n      vibrate: [100, 50, 100],\n      data: {\n        dateOfArrival: Date.now(),\n        primaryKey: '2',\n      },\n    }\n    event.waitUntil(self.registration.showNotification(data.title, options))\n  }\n})\n\nself.addEventListener('notificationclick', function (event) {\n  console.log('Notification click received.')\n  event.notification.close()\n  event.waitUntil(clients.openWindow('<https://your-website.com>'))\n})\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Forbidden Component in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Forbidden component in Next.js using TypeScript. It renders a simple UI with a heading, message, and a link to return home when access is forbidden.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/forbidden.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Forbidden() {\n  return (\n    <div>\n      <h2>Forbidden</h2>\n      <p>You are not authorized to access this resource.</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font in Functional Component in Next.js\nDESCRIPTION: This code snippet demonstrates how to add a custom font to a Next.js application by modifying the `_document.js` file using a functional component. It imports necessary modules from 'next/document' and returns a JSX structure that includes the font link within the `<Head>` section. This approach ensures the font is loaded globally and enables automatic font optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-page-custom-font.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head>\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"\n          rel=\"stylesheet\"\n        />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress E2E Navigation Test\nDESCRIPTION: Creates a Cypress End-to-End (E2E) test to verify navigation between pages. It visits the index page, clicks a link to the about page, and asserts that the URL and page content are correct. Requires Cypress to be installed and configured for E2E testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Navigation', () => {\n  it('should navigate to the about page', () => {\n    // Start from the index page\n    cy.visit('http://localhost:3000/')\n\n    // Find a link with an href attribute containing \"about\" and click it\n    cy.get('a[href*=\"about\"]').click()\n\n    // The new url should include \"/about\"\n    cy.url().should('include', '/about')\n\n    // The new page should contain an h1 with \"About\"\n    cy.get('h1').contains('About')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Report Server Errors with onRequestError in instrumentation.js\nDESCRIPTION: Tracks server errors by sending them to a custom observability provider. It receives the error, request, and context, and sends a POST request to a specified endpoint with the error details in JSON format. The error instance may have been processed by React during Server Components rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function onRequestError(err, request, context) {\n  await fetch('https://.../report-error', {\n    method: 'POST',\n    body: JSON.stringify({\n      message: err.message,\n      request,\n      context,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring preferredRegion in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to configure the `preferredRegion` option in a Next.js layout, page, or route using TypeScript.  The `preferredRegion` configuration specifies the geographical region where the route segment should be deployed, influencing latency and data locality. It supports values like 'auto', 'global', 'home', or an array of region codes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n```\n\n----------------------------------------\n\nTITLE: Next.js Static Directory Structure (Before)\nDESCRIPTION: This code snippet demonstrates the directory structure of a Next.js project before the deprecation of the `static` directory. The static assets are placed directly within the `static` folder.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/static-dir-deprecated.mdx#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\n  .\n  ├── pages/\n  │   └── index.js\n  └── static/\n      └── my-image.jpg\n\n```\n\n----------------------------------------\n\nTITLE: Mermaid Graph for Dependency Visualization\nDESCRIPTION: Utilizes Mermaid graph syntax to visualize dependency and flow among declared items. This aids in understanding the relationship between various code elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_7\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item8[\"export order\"];\n    Item9;\n    Item9[\"export a\"];\n    Item10;\n    Item10[\"export b\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item4 --> Item2;\n    Item4 --> Item1;\n    Item5 --> Item4;\n    Item5 --> Item1;\n    Item6 --> Item4;\n    Item7 --> Item6;\n    Item7 --> Item4;\n    Item8 --> Item5;\n    Item8 --> Item1;\n    Item9 --> Item6;\n    Item10 --> Item7;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Prismic Example (pnpm)\nDESCRIPTION: This command uses the `create next-app` command with pnpm to bootstrap a new Next.js application using the `cms-prismic` example. It creates a new directory named `cms-prismic-app` for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-prismic cms-prismic-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app using npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the `with-mqtt-js` example. It initializes a project named `with-mqtt-js-app` with the necessary dependencies and configurations for MQTT integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mqtt-js with-mqtt-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with OpenTelemetry example using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the `with-opentelemetry` example from the `create-next-app` tool, but uses pnpm as the package manager. It downloads the necessary files and sets up the project with OpenTelemetry instrumentation. The resulting application directory will be named `with-opentelemetry-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-opentelemetry with-opentelemetry-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses `create next-app` with pnpm to bootstrap a Next.js project configured to use Storyblok CMS. It creates a new directory `cms-storyblok-app` with the required files and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-storyblok cms-storyblok-app\n```\n\n----------------------------------------\n\nTITLE: Using Script component with compatible src attribute in JSX\nDESCRIPTION: This code snippet demonstrates the correct usage of the `next/script` component with a valid `src` attribute pointing to an external JavaScript file. This is one way to include external scripts in your Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Script src=\"https://example.com/analytics.js\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots Automatically\nDESCRIPTION: This command updates all snapshot outputs automatically. It sets the `UPDATE` environment variable to 1 and then runs the snapshot tests using `cargo nextest`. The `-E` flag filters for snapshot tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPDATE=1 cargo nextest run -E 'test(snapshot)'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Segment Analytics using PNPM\nDESCRIPTION: This command initializes a new Next.js application with the 'with-segment-analytics-pages-router' example using pnpm. It clones the example and sets up the necessary project structure for integrating Segment Analytics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-segment-analytics-pages-router with-segment-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Setting dynamic config to error in JSX\nDESCRIPTION: This code snippet shows how to configure the `dynamic` option to `error` in a JSX file, which causes an error when attempting to use unsupported features in `next dev` within the App Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport const dynamic = 'error'\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with create-next-app (Yarn)\nDESCRIPTION: This command initializes a new Next.js project using the `create-next-app` tool and the `with-mobx-state-tree` example. It uses Yarn to create a project named `with-mobx-state-tree-app` based on the provided example repository. This command sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mobx-state-tree with-mobx-state-tree-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with cxs using npx\nDESCRIPTION: This command initializes a new Next.js application using the with-cxs example. It utilizes npx to execute the create-next-app package and sets up the project with the necessary dependencies and configurations for using cxs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-cxs with-cxs-app\n```\n\n----------------------------------------\n\nTITLE: Nanoid Implementation\nDESCRIPTION: Main nanoid function that generates unique IDs with default size of 21 characters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet nanoid = (size = 21)=>{\n    fillPool((size -= 0));\n    let id = '';\n    for(let i = poolOffset - size; i < poolOffset; i++){\n        id += urlAlphabet[pool[i] & 63];\n    }\n    return id;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Page Component in Next.js with JavaScript\nDESCRIPTION: This code snippet defines a default export function that returns a JSX expression. No external dependencies are required for this basic component. It outputs a simple paragraph element with the text 'hello world'. This serves as a basic starting point for building more complex Next.js pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example-file.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Page() { \n    return <p>hello world</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in TypeScript Code\nDESCRIPTION: This snippet shows how to highlight specific lines in TypeScript code blocks. The `highlight` prop is used to specify which lines to emphasize, with options for single or multiple lines.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Playwright Example (npm)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with a pre-configured Playwright setup.  It utilizes the `--example` flag to specify the `with-playwright` example. It requires npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-playwright with-playwright-app\n```\n\n----------------------------------------\n\nTITLE: Error Analysis for Module Format Conflict in Next.js\nDESCRIPTION: This error indicates a conflict between the specified CommonJs module format in the package.json and the usage of EcmaScript import/export syntax in the source code. Users should ensure consistency between the declared module type and the import/export syntax used in the code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/node-default-import/issues/Specified module format (CommonJs) is not matching-63a9f9.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror - [analysis] [project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/node-default-import/input/node_modules/esm-package/invalid-exports.cjs  Specified module format (CommonJs) is not matching the module format of the source code (EcmaScript Modules)\n  The CommonJs module format was specified in the package.json that is affecting this source file or by using an special extension, but Ecmascript import/export syntax is used in the source code.\n  The module was automatically converted to an EcmaScript module, but that is in conflict with the specified module format. Either change the \"type\" field in the package.json or replace EcmaScript import/export syntax with CommonJs syntas in the source file.\n  In some cases EcmaScript import/export syntax is added by an transform and isn't actually part of the source code. In these cases revisit transformation options to inject the correct syntax.\n```\n\n----------------------------------------\n\nTITLE: Using notFound in getStaticProps (JavaScript)\nDESCRIPTION: This code snippet shows how to use the `notFound` property in `getStaticProps` to return a 404 page if the data is not found. It fetches data from an API and, if the response is empty, returns `notFound: true`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring htmlLimitedBots in Next.js with JavaScript\nDESCRIPTION: JavaScript example showing how to configure the htmlLimitedBots option in next.config.js to specify a list of user agents that should receive blocking metadata. The example uses the CommonJS module format.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/htmlLimitedBots.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',\n}\n```\n\n----------------------------------------\n\nTITLE: Copying .env.local file\nDESCRIPTION: This command copies the example environment configuration file `.env.local.example` to `.env.local`. This allows for local environment configuration without affecting the original example file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Copying Static Assets for Standalone Deployment\nDESCRIPTION: Terminal commands to copy public and static assets to the standalone deployment folder.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp -r public .next/standalone/ && cp -r .next/static .next/standalone/.next/\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the 'api-routes-cors' example. It sets up a project with the necessary configurations for API routes and CORS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example api-routes-cors api-routes-cors-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-youtube-embed' example. It utilizes the create-next-app command to set up the project. The resulting application will be named 'with-youtube-embed-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-youtube-embed with-youtube-embed-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Apollo Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application pre-configured with the Apollo Server and Client example. It bootstraps the project with the necessary dependencies and configuration files. The new application will be located in the directory named 'api-routes-apollo-server-and-client-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Nhost Example (Yarn)\nDESCRIPTION: This command initializes a new Next.js application using the `with-nhost-auth-realtime-graphql` example. It utilizes `create next-app` with Yarn to bootstrap the project. `nhost-app` is the name assigned to the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-nhost-auth-realtime-graphql nhost-app\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for Next.js Link Update\nDESCRIPTION: The command executes a codemod provided by Next.js to upgrade older versions of `<Link>` to the new usage. It automatically transforms deprecated Link patterns in the codebase. There are no external dependencies, but it requires npx for command execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-new-link-with-extra-anchor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod new-link .\n```\n\n----------------------------------------\n\nTITLE: Mocking next/font imports for Jest\nDESCRIPTION: This JavaScript module creates a mock for `next/font` in Jest tests.  It returns a proxy object that intercepts calls to font functions, returning a predefined object with `className`, `variable`, and `style` properties.  This allows tests to run smoothly without requiring actual font files or configurations, providing a consistent and controlled testing environment for components using `next/font`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = new Proxy(\n  {},\n  {\n    get: function getter() {\n      return () => ({\n        className: 'className',\n        variable: 'variable',\n        style: { fontFamily: 'fontFamily' },\n      })\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional MDX Component Loading with next/dynamic (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to conditionally load components in MDX using `next/dynamic`. It uses a regex to check the MDX source and only loads the component if it's used in the content, improving performance by avoiding unnecessary imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport dynamic from \"next/dynamic\";\nimport Test from \"@/components/test\";\nimport { MDXRemote, type MDXRemoteProps } from 'next-mdx-remote/rsc'\n\nconst SomeHeavyComponent = dynamic(() => import(\"../component/SomeHeavyComponent\"));\n\nconst defaultComponents = { Test };\n\nexport function CustomMDX(props: MDXRemoteProps) {\n  const componentNames = [\n    /<SomeHeavyComponent/.test(props.source as string) ? \"SomeHeavyComponent\" : \"\",\n  ].filter(Boolean);\n\n  const components = {\n    ...defaultComponents,\n    SomeHeavyComponent: componentNames.includes(\"SomeHeavyComponent\")\n      ? SomeHeavyComponent\n      : () => null,\n  };\n\n  return <MDXRemote {...props} components={components} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with next/font (App Router)\nDESCRIPTION: This code snippet demonstrates how to use CSS variables with `next/font` in a Next.js application using the app router. It defines CSS variables for both the Inter and Roboto Mono fonts and applies them to the `html` element for global styling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\nimport styles from './global.css'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - All paths at build time (TSX)\nDESCRIPTION: This code snippet demonstrates how to statically render all paths at build time using `generateStaticParams` in Next.js. It fetches a list of posts from an API and returns an array of objects, where each object contains the `slug` parameter for a dynamic route segment, ensuring all posts are rendered during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Web Vitals Metrics by Name (Pages Router)\nDESCRIPTION: This code snippet illustrates how to handle specific web vital metrics by their `name` property using a switch statement inside the `useReportWebVitals` hook within the Pages Router in Next.js. It handles First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics as examples.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Web App Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure Apple Web App metadata using the `appleWebApp` property within the `metadata` export in a Next.js layout or page file.  It sets the title, status bar style, and startup images for the web app. The `itunes` property defines the app ID and argument for iTunes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_42\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  itunes: {\n    appId: 'myAppStoreID',\n    appArgument: 'myAppArgument',\n  },\n  appleWebApp: {\n    title: 'Apple Web App',\n    statusBarStyle: 'black-translucent',\n    startupImage: [\n      '/assets/startup/apple-touch-startup-image-768x1004.png',\n      {\n        url: '/assets/startup/apple-touch-startup-image-1536x2008.png',\n        media: '(device-width: 768px) and (device-height: 1024px)',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternates Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure alternate links for different languages, media types, and content types using the `alternates` property within the `metadata` export in a Next.js layout or page file. It sets the canonical URL and alternate URLs for English, German, mobile, and RSS feeds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  alternates: {\n    canonical: 'https://nextjs.org',\n    languages: {\n      'en-US': 'https://nextjs.org/en-US',\n      'de-DE': 'https://nextjs.org/de-DE',\n    },\n    media: {\n      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',\n    },\n    types: {\n      'application/rss+xml': 'https://nextjs.org/rss',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - dynamicParams configuration (TSX)\nDESCRIPTION: This code snippet configures the `dynamicParams` option to `false` in Next.js, which results in a 404 error if a route is visited that was not generated by `generateStaticParams`. It fetches a list of posts from an API and statically renders only the top 10 posts at build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\n// All posts besides the top 10 will be a 404\nexport const dynamicParams = false\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n  const topPosts = posts.slice(0, 10)\n\n  return topPosts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Self-Hosted Video with <video> Tag - JSX\nDESCRIPTION: This code snippet demonstrates how to embed a self-hosted video using the HTML5 `<video>` tag within a Next.js application. It includes attributes for width, height, controls, preload, source path, and captions via the `<track>` element.  The example uses JSX syntax, typical in React and Next.js components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Video() {\n  return (\n    <video width=\"320\" height=\"240\" controls preload=\"none\">\n      <source src=\"/path/to/video.mp4\" type=\"video/mp4\" />\n      <track\n        src=\"/path/to/captions.vtt\"\n        kind=\"subtitles\"\n        srcLang=\"en\"\n        label=\"English\"\n      />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Active Nav Links - TypeScript\nDESCRIPTION: This snippet defines a React component that utilizes the usePathname() hook from Next.js to determine the current URL path, allowing the component to highlight the active navigation link. It imports necessary modules and sets up client-side routing. The active class is conditionally applied based on the current pathname.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function NavLinks() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`} \nhref=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Behavior with Link Component in Pages Router (JavaScript)\nDESCRIPTION: Example of disabling default scroll behavior with the Next.js Link component in Pages Router. Setting scroll to false prevents Next.js from scrolling to the top of the page after navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Module Part Importation for JSX Runtime Utilization\nDESCRIPTION: The code handles importing necessary parts of Turbopack and React's JSX runtime functionalities, allowing JSX operations in downstream modules. Critical for handling JSX and Fragment elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { _jsx as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport { _jsxs as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport { _Fragment as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Using Router Navigation with Scroll Control\nDESCRIPTION: Shows how to disable scroll behavior when using programmatic navigation with useRouter from next/navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n// useRouter\nimport { useRouter } from 'next/navigation'\n\nconst router = useRouter()\n\nrouter.push('/dashboard', { scroll: false })\n```\n\n----------------------------------------\n\nTITLE: Development Module Part 2\nDESCRIPTION: Import and console log in development environment\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nconsole.log(a);\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Configuration\nDESCRIPTION: Re-exports the configuration from a TurboPack part. This snippet shows how configuration is shared across TurboPack parts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { k as config } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -16\n};\nexport { config };\n\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependency (npm)\nDESCRIPTION: This command installs TypeScript as a development dependency using npm.  It is essential for adding TypeScript support to a project.  The `--save-dev` flag ensures it's added to `devDependencies` in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running in Development Mode (yarn)\nDESCRIPTION: These commands install the required dependencies using Yarn and starts the Next.js development server. The development server runs on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing from a Module in JavaScript\nDESCRIPTION: The snippet imports a function 'upper' from an external module named 'module'. This import is hoisted and might have side effects. No particular dependencies are defined, other than requiring the module to be available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { upper } from \"module\";\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with particles example (npm)\nDESCRIPTION: This command utilizes npm to create a new Next.js application using the 'with-particles' example. It initializes a project named 'with-particles-app' with the pre-configured particle animation setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-particles with-particles-app\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Graph for Next.js Project Phase 4\nDESCRIPTION: This Mermaid graph diagram represents the dependency relationships between 30 items in Phase 4 of a Next.js project. It is identical to Phase 3, suggesting that no further changes were made in this phase of the project structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item4;\n    Item2;\n    Item5;\n    Item3;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item29[\"export structuredError\"];\n    Item30;\n    Item30[\"export IPC\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item9 --> Item3;\n    Item9 -.-> Item6;\n    Item9 -.-> Item5;\n    Item9 -.-> Item4;\n    Item9 -.-> Item7;\n    Item10 --> Item8;\n    Item10 --> Item9;\n    Item10 -.-> Item6;\n    Item10 -.-> Item5;\n    Item10 -.-> Item4;\n    Item10 -.-> Item7;\n    Item11 --> Item10;\n    Item11 -.-> Item6;\n    Item11 -.-> Item5;\n    Item11 -.-> Item4;\n    Item11 -.-> Item7;\n    Item12 --> Item11;\n    Item12 -.-> Item6;\n    Item12 -.-> Item5;\n    Item12 -.-> Item4;\n    Item12 -.-> Item7;\n    Item13 --> Item12;\n    Item13 -.-> Item6;\n    Item13 -.-> Item5;\n    Item13 -.-> Item4;\n    Item13 -.-> Item7;\n    Item14 --> Item12;\n    Item14 --> Item13;\n    Item14 -.-> Item6;\n    Item14 -.-> Item5;\n    Item14 -.-> Item4;\n    Item14 -.-> Item7;\n    Item15 --> Item12;\n    Item15 --> Item14;\n    Item15 -.-> Item6;\n    Item15 -.-> Item5;\n    Item15 -.-> Item4;\n    Item15 -.-> Item7;\n    Item16 --> Item12;\n    Item16 --> Item15;\n    Item16 -.-> Item6;\n    Item16 -.-> Item5;\n    Item16 -.-> Item4;\n    Item16 -.-> Item7;\n    Item17 --> Item12;\n    Item17 --> Item16;\n    Item17 -.-> Item6;\n    Item17 -.-> Item5;\n    Item17 -.-> Item4;\n    Item17 -.-> Item7;\n    Item18 --> Item12;\n    Item18 --> Item17;\n    Item18 -.-> Item6;\n    Item18 -.-> Item5;\n    Item18 -.-> Item4;\n    Item18 -.-> Item7;\n    Item19 --> Item12;\n    Item19 --> Item18;\n    Item19 -.-> Item6;\n    Item19 -.-> Item5;\n    Item19 -.-> Item4;\n    Item19 -.-> Item7;\n    Item20 --> Item12;\n    Item20 --> Item19;\n    Item20 -.-> Item6;\n    Item20 -.-> Item5;\n    Item20 -.-> Item4;\n    Item20 -.-> Item7;\n    Item21 --> Item12;\n    Item21 --> Item20;\n    Item21 -.-> Item6;\n    Item21 -.-> Item5;\n    Item21 -.-> Item4;\n    Item21 -.-> Item7;\n    Item22 --> Item12;\n    Item22 --> Item21;\n    Item22 -.-> Item6;\n    Item22 -.-> Item5;\n    Item22 -.-> Item4;\n    Item22 -.-> Item7;\n    Item23 --> Item12;\n    Item23 --> Item22;\n    Item23 -.-> Item6;\n    Item23 -.-> Item5;\n    Item23 -.-> Item4;\n    Item23 -.-> Item7;\n    Item24 --> Item12;\n    Item24 --> Item23;\n    Item24 -.-> Item6;\n    Item24 -.-> Item5;\n    Item24 -.-> Item4;\n    Item24 -.-> Item7;\n    Item25 --> Item12;\n    Item25 --> Item24;\n    Item25 -.-> Item6;\n    Item25 -.-> Item5;\n    Item25 -.-> Item4;\n    Item25 -.-> Item7;\n    Item26 --> Item12;\n    Item26 --> Item25;\n    Item26 -.-> Item6;\n    Item26 -.-> Item5;\n    Item26 -.-> Item4;\n    Item26 -.-> Item7;\n    Item27 --> Item12;\n    Item27 --> Item26;\n    Item27 -.-> Item6;\n    Item27 -.-> Item5;\n    Item27 -.-> Item4;\n    Item27 -.-> Item7;\n    Item28 --> Item12;\n    Item28 --> Item27;\n    Item28 -.-> Item6;\n    Item28 -.-> Item5;\n    Item28 -.-> Item4;\n    Item28 -.-> Item7;\n    Item29 --> Item7;\n    Item30 --> Item11;\n    Item30 --> Item10;\n    Item7 --> Item6;\n    Item7 --> Item5;\n    Item8 --> Item4;\n    Item8 --> Item7;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Kontent.ai Example (npm)\nDESCRIPTION: This command uses the `create-next-app` utility with npm to bootstrap a new Next.js application using the `cms-kontent-ai` example. It creates a new directory named `cms-kontent-app` containing the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-kontent-ai cms-kontent-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using Tigris - Bash\nDESCRIPTION: These snippets show the commands to create a new Next.js application using different package managers. They allow the user to bootstrap a new project with Tigris integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-tigris tigris-next-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-tigris tigris-next-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-tigris tigris-next-app\n```\n\n----------------------------------------\n\nTITLE: Extending Jest with custom matchers (JavaScript)\nDESCRIPTION: This JavaScript snippet configures Jest to use custom matchers from `@testing-library/jest-dom`. It specifies a setup file (`jest.setup.js`) that will be run before each test, enabling the use of custom matchers in your tests. This can improve test expressiveness when asserting specific conditions in the DOM.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetupFilesAfterEnv: ['<rootDir>/jest.setup.js']\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data in Layout Component (JavaScript)\nDESCRIPTION: This JavaScript code showcases fetching user data within a Next.js layout component using the `getUser` function.  The `Layout` component asynchronously fetches the user data and makes it available for rendering the layout structure.  It is important to perform auth checks within the DAL, specifically when calling `getUser`, to guarantee consistent authorization across the application and avoid potential security vulnerabilities due to partial rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Layout({ children }) {\n  const user = await getUser();\n\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (Yarn)\nDESCRIPTION: These commands install the project dependencies using Yarn and then start the development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running Next.js dev server\nDESCRIPTION: These commands install the necessary dependencies for the Next.js application using npm, and then starts the development server. It assumes that Node.js and npm are already installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using npm, yarn, pnpm, or bun. This starts the local development environment for the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-empty/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Components in JavaScript\nDESCRIPTION: This snippet exports multiple components, including originalPathname and patchFetch, from various module parts. This centralized export pattern helps streamline access to critical functionalities within a larger application architecture.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { originalPathname } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export originalPathname\"\n};\nexport { patchFetch } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export patchFetch\"\n};\nexport { serverHooks } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export serverHooks\"\n};\nexport { workAsyncStorage } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export workAsyncStorage\"\n};\nexport { requestAsyncStorage } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export requestAsyncStorage\"\n};\nexport { routeModule } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export routeModule\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with getStaticProps (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use `getStaticProps` in a Next.js page to fetch data from an API and pass it as props to the page component. It includes type definitions for the data and uses `InferGetStaticPropsType` for type safety.  It fetches repository data from the GitHub API and returns it as props.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Facebook Metadata (admins array) Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section based on the Facebook metadata configuration with an array of admins. Multiple meta tags are generated, one for each admin ID.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_61\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"fb:admins\" content=\"12345678\" />\n<meta property=\"fb:admins\" content=\"87654321\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Resolve Aliases in Next.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to safely override the webpack resolve alias configuration in a Next.js project by merging user-defined aliases with the existing configuration. The purpose is to prevent errors caused by improperly overriding internals. No additional dependencies are required. Key functionality involves spreading existing aliases and adding custom ones. This function is typically added inside the next.config.js file used in Next.js projects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-resolve-alias.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwebpack(config) {\n  config.resolve.alias = {\n    ...config.resolve.alias,\n    // your aliases\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: getStaticPaths with string and object paths\nDESCRIPTION: This example showcases how to define the `paths` property within the `getStaticPaths` function in Next.js. The `paths` array can contain either strings representing the complete path or objects that specify the `params` for dynamic routes. This example shows how to pre-render `/blog/first-post` and `/blog/second-post` statically at build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getstaticpaths-value.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      // String variant:\n      '/blog/first-post',\n      // Object variant:\n      { params: { slug: 'second-post' } },\n    ],\n    fallback: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for Jenkins Pipeline uses the Job Cacher plugin to cache both node_modules and the Next.js cache directory. It includes steps for restoring npm packages and building the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstage(\"Restore npm packages\") {\n    steps {\n        // Writes lock-file to cache based on the GIT_COMMIT hash\n        writeFile file: \"next-lock.cache\", text: \"$GIT_COMMIT\"\n\n        cache(caches: [\n            arbitraryFileCache(\n                path: \"node_modules\",\n                includes: \"**/*\",\n                cacheValidityDecidingFile: \"package-lock.json\"\n            )\n        ]) {\n            sh \"npm install\"\n        }\n    }\n}\nstage(\"Build\") {\n    steps {\n        // Writes lock-file to cache based on the GIT_COMMIT hash\n        writeFile file: \"next-lock.cache\", text: \"$GIT_COMMIT\"\n\n        cache(caches: [\n            arbitraryFileCache(\n                path: \".next/cache\",\n                includes: \"**/*\",\n                cacheValidityDecidingFile: \"next-lock.cache\"\n            )\n        ]) {\n            // aka `next build`\n            sh \"npm run build\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager in App Router (TSX)\nDESCRIPTION: This code snippet demonstrates how to include the `GoogleTagManager` component within the root layout of a Next.js application using the App Router with TypeScript.  It imports the component from `@next/third-parties/google` and passes the GTM container ID via the `gtmId` prop. This ensures GTM is loaded on all routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in JavaScript\nDESCRIPTION: This code creates a root layout file (`layout.js`) within the `app` directory, essential for Next.js App Router applications. It wraps all pages. It includes the basic HTML structure, meta tags, and a root div where the page content is rendered.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_3\n\nLANGUAGE: app/layout.js\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Cookie Handling in Next.js Middleware\nDESCRIPTION: Comparison between the old and new approach for handling cookies in Next.js middleware. The new API provides a more structured way to set, get, and delete cookies using the response.cookies object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // create an instance of the class to access the public methods. This uses `next()`,\n  // you could use `redirect()` or `rewrite()` as well\n  let response = NextResponse.next()\n  // get the cookies from the request\n  let cookieFromRequest = request.cookies['my-cookie']\n  // set the `cookie`\n  response.cookie('hello', 'world')\n  // set the `cookie` with options\n  const cookieWithOptions = response.cookie('hello', 'world', {\n    path: '/',\n    maxAge: 1000 * 60 * 60 * 24 * 7,\n    httpOnly: true,\n    sameSite: 'strict',\n    domain: 'example.com',\n  })\n  // clear the `cookie`\n  response.clearCookie('hello')\n\n  return response\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function middleware() {\n  const response = new NextResponse()\n\n  // set a cookie\n  response.cookies.set('vercel', 'fast')\n\n  // set another cookie with options\n  response.cookies.set('nextjs', 'awesome', { path: '/test' })\n\n  // get all the details of a cookie\n  const { value, ...options } = response.cookies.getWithOptions('vercel')\n  console.log(value) // => 'fast'\n  console.log(options) // => { name: 'vercel', Path: '/test' }\n\n  // deleting a cookie will mark it as expired\n  response.cookies.delete('vercel')\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Middleware in Next.js using JavaScript\nDESCRIPTION: This code snippet shows how to use middleware in Next.js with JavaScript to check if a user is authenticated before allowing access to certain routes. If the user is not authenticated, they are redirected to a login page. Required dependencies include Next.js and an authentication provider. The expected output is a redirect based on the user's authentication status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { authenticate } from 'auth-provider'\n\nexport function middleware(request) {\n  const isAuthenticated = authenticate(request)\n\n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n\n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n\nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config with next/config (JavaScript)\nDESCRIPTION: This code snippet illustrates how to access the runtime configurations defined in `next.config.js` using the `next/config` module. It shows how to import `getConfig` and extract `serverRuntimeConfig` and `publicRuntimeConfig`.  The snippet also demonstrates using the `publicRuntimeConfig` to construct image paths in a component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/runtime-configuration.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport getConfig from 'next/config'\nimport Image from 'next/image'\n\n// Only holds serverRuntimeConfig and publicRuntimeConfig\nconst { serverRuntimeConfig, publicRuntimeConfig } = getConfig()\n// Will only be available on the server-side\nconsole.log(serverRuntimeConfig.mySecret)\n// Will be available on both server-side and client-side\nconsole.log(publicRuntimeConfig.staticFolder)\n\nfunction MyImage() {\n  return (\n    <div>\n      <Image\n        src={`${publicRuntimeConfig.staticFolder}/logo.png`}\n        alt=\"logo\"\n        layout=\"fill\"\n      />\n    </div>\n  )\n}\n\nexport default MyImage\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration (tsconfig.json)\nDESCRIPTION: This configuration shows a `tsconfig.json` file updated for compatibility with Next.js. It includes settings for compiler options, inclusion/exclusion paths, and plugins specifically for Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }]\n  },\n  \"include\": [\"./src\", \"./dist/types/**/*.ts\", \"./next-env.d.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Server Action Interleaving (JSX)\nDESCRIPTION: This snippet shows how to pass a Server Action through cached components to a Client Component in Next.js, without directly invoking the action inside the cacheable function. This approach allows for UI updates triggered from the client to interact with server-side logic while still leveraging caching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport ClientComponent from './ClientComponent'\n\nexport default async function Page() {\n  const performUpdate = async () => {\n    'use server'\n    // Perform some server-side update\n    await db.update(...)\n  }\n\n  return <CacheComponent performUpdate={performUpdate} />\n}\n\nasync function CachedComponent({ performUpdate }) {\n  'use cache'\n  // Do not call performUpdate here\n  return <ClientComponent action={performUpdate} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Icons Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures multiple icons metadata for a Next.js application, including specifying URLs, media queries, sizes, and types for different icons. It demonstrates how to use arrays of objects within the `icons` property to define multiple icons with different attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  icons: {\n    icon: [\n      { url: '/icon.png' },\n      new URL('/icon.png', 'https://example.com'),\n      { url: '/icon-dark.png', media: '(prefers-color-scheme: dark)' },\n    ],\n    shortcut: ['/shortcut-icon.png'],\n    apple: [\n      { url: '/apple-icon.png' },\n      { url: '/apple-icon-x3.png', sizes: '180x180', type: 'image/png' },\n    ],\n    other: [\n      {\n        rel: 'apple-touch-icon-precomposed',\n        url: '/apple-touch-icon-precomposed.png',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting after mutation with `redirect` in Next.js (App Router)\nDESCRIPTION: This code snippet demonstrates how to use the `redirect` function from `next/navigation` within a server action in the App Router to redirect a user after creating a post. It imports `redirect` and `revalidatePath`, calls a database function (placeholder), revalidates the path, and then redirects the user to the new post page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\"\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n----------------------------------------\n\nTITLE: Create Signup Form with Server Action in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to create a signup form in a Next.js application using React's `<form>` element. The form utilizes a Server Action called `signup` to handle the form submission. It captures user's name, email, and password.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  return (\n    <form action={signup}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Catch-all Dynamic Segment with generateStaticParams (JSX)\nDESCRIPTION: This code snippet demonstrates how to use `generateStaticParams` with a catch-all dynamic segment `[...slug]` in Next.js. It returns an array of objects, where each object contains a `slug` parameter, which is an array of strings. The `Page` component receives the `slug` array as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/product/[...slug]/page.js\" switcher\nexport function generateStaticParams() {\n  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/a/1\n// - /product/b/2\n// - /product/c/3\nexport default async function Page({ params }) {\n  const { slug } = await params\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry APIs and Exporting Context\nDESCRIPTION: Imports and re-exports OpenTelemetry core functionality including context, propagation, and trace APIs for use in the Next.js tracing system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as api } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;\nexport { context as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { propagation as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { trace as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { SpanStatusCode as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { SpanKind as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { ROOT_CONTEXT as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens with Next.js using Yarn\nDESCRIPTION: Command to bootstrap a Next.js application with SuperTokens authentication using Yarn create next-app with the with-supertokens example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-supertokens with-supertokens-app\n```\n\n----------------------------------------\n\nTITLE: Variable Export Declaration\nDESCRIPTION: Exports a mutable variable 'foobar' initialized with string value.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport let foobar = \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Sentry example\nDESCRIPTION: These commands use `create-next-app` to create a new Next.js application using the `with-sentry` example.  It utilizes either npx, yarn, or pnpm to install the necessary dependencies and set up the project structure. The created app will have the Sentry integration already configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-sentry nextjs-sentry-example\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-sentry nextjs-sentry-example\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-sentry nextjs-sentry-example\n```\n\n----------------------------------------\n\nTITLE: Generating a basic Jest configuration file\nDESCRIPTION: This command initializes Jest in the project, prompting the user to configure Jest settings interactively. It automatically creates a `jest.config.js` or `jest.config.ts` file. The command can be run using npm, yarn or pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm init jest@latest\n# or\nyarn create jest@latest\n# or\npnpm create jest@latest\n```\n\n----------------------------------------\n\nTITLE: License information for undici/lib/web/fetch/body.js\nDESCRIPTION: This snippet shows license information for the `body.js` file within the `undici` library. It indicates that the code is licensed under the MIT License and credits Jimmy Wärting as the author.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/fetch.js.LEGAL.txt#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\"/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\"\n```\n\n----------------------------------------\n\nTITLE: Empty Export Module\nDESCRIPTION: Empty module export statement\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperTokens with Next.js using create-supertokens-app (NPX)\nDESCRIPTION: Command to create a Next.js application with SuperTokens authentication using the official SuperTokens CLI tool with NPX, allowing further customization during setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --frontend=next\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the with-yarn-workspaces example. It initializes the project with the specified example and names the application with-yarn-workspaces-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-yarn-workspaces with-yarn-workspaces-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Kea example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the 'with-kea' example. It requires Node.js and npm to be installed. The new application will be created in a directory named 'with-kea-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-kea with-kea-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application from the with-google-maps-embed example. It bootstraps the project with the necessary dependencies for using a Google Maps embed. The new application will be located in the with-google-maps-embed-app directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-google-maps-embed with-google-maps-embed-app\n```\n\n----------------------------------------\n\nTITLE: Export Flow Diagram in Phase 2\nDESCRIPTION: This snippet showcases a flow diagram created using Mermaid to illustrate the dependency chain and export process of various CSS grid properties during phase 2. The diagram helps in understanding the sequence and relationship of properties such as gridColumn, columnGap, and rowGap as they move through different export stages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item6;\n    Item2;\n    Item7;\n    Item3;\n    Item8;\n    Item9;\n    Item4;\n    Item10;\n    Item5;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item30;\n    Item31;\n    Item32;\n    Item32[\"export gap\"];\n    Item33;\n    Item33[\"export columnGap\"];\n    Item34;\n    Item34[\"export rowGap\"];\n    Item35;\n    Item35[\"export gridColumn\"];\n    Item36;\n    Item36[\"export gridRow\"];\n    Item37;\n    Item37[\"export gridAutoFlow\"];\n    Item38;\n    Item38[\"export gridAutoColumns\"];\n    Item39;\n    Item39[\"export gridAutoRows\"];\n    Item40;\n    Item40[\"export gridTemplateColumns\"];\n    Item41;\n    Item41[\"export gridTemplateRows\"];\n    Item42;\n    Item42[\"export gridTemplateAreas\"];\n    Item43;\n    Item43[\"export gridArea\"];\n    Item44;\n    Item44[\"export default\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item5 --> Item4;\n    Item12 --> Item8;\n    Item12 --> Item9;\n    Item12 --> Item10;\n    Item12 --> Item5;\n    Item13 --> Item12;\n    Item13 --> Item11;\n    Item14 --> Item13;\n    Item14 --> Item12;\n    Item15 --> Item8;\n    Item15 --> Item9;\n    Item15 --> Item10;\n    Item15 --> Item13;\n    Item16 --> Item15;\n    Item16 --> Item11;\n    Item17 --> Item16;\n    Item17 --> Item15;\n    Item18 --> Item8;\n    Item18 --> Item9;\n    Item18 --> Item10;\n    Item18 --> Item16;\n    Item19 --> Item18;\n    Item19 --> Item11;\n    Item20 --> Item19;\n    Item20 --> Item18;\n    Item21 --> Item6;\n    Item21 --> Item19;\n    Item22 --> Item6;\n    Item22 --> Item21;\n    Item23 --> Item6;\n    Item23 --> Item22;\n    Item24 --> Item6;\n    Item24 --> Item23;\n    Item25 --> Item6;\n    Item25 --> Item24;\n    Item26 --> Item6;\n    Item26 --> Item25;\n    Item27 --> Item6;\n    Item27 --> Item26;\n    Item28 --> Item6;\n    Item28 --> Item27;\n    Item29 --> Item6;\n    Item29 --> Item28;\n    Item30 --> Item7;\n    Item30 --> Item14;\n    Item30 --> Item12;\n    Item30 --> Item17;\n    Item30 --> Item15;\n    Item30 --> Item20;\n    Item30 --> Item18;\n    Item30 --> Item21;\n    Item30 --> Item22;\n    Item30 --> Item23;\n    Item30 --> Item24;\n    Item30 --> Item25;\n    Item30 --> Item26;\n    Item30 --> Item27;\n    Item30 --> Item28;\n    Item30 --> Item29;\n    Item31 --> Item30;\n    Item32 --> Item14;\n    Item32 --> Item12;\n    Item33 --> Item17;\n    Item33 --> Item15;\n    Item34 --> Item20;\n    Item34 --> Item18;\n    Item35 --> Item21;\n    Item36 --> Item22;\n    Item37 --> Item23;\n    Item38 --> Item24;\n    Item39 --> Item25;\n    Item40 --> Item26;\n    Item41 --> Item27;\n    Item42 --> Item28;\n    Item43 --> Item29;\n    Item44 --> Item31;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Contentful example using Yarn\nDESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project using the cms-contentful example. It creates a directory named cms-contentful-app using Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-contentful cms-contentful-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Data Fetching with SWR in React\nDESCRIPTION: This snippet shows how to use the SWR library for client-side data fetching in React. It demonstrates fetching profile data with automatic caching and revalidation, and handles loading and error states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/05-client-side.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nconst fetcher = (...args) => fetch(...args).then((res) => res.json())\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/profile-data', fetcher)\n\n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.bio}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Icon Generation (JavaScript)\nDESCRIPTION: JavaScript version of accessing dynamic route parameters when generating icons in Next.js. Shows how to use the params object in an icon generator function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Icon({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting wrapClientComponentLoader Function in JavaScript\nDESCRIPTION: This function 'wrapClientComponentLoader' takes a component module as an argument and adds performance tracking for loading and requiring the component. It uses global performance API to calculate load times. The function relies on the global 'performance' object and the variables defined earlier.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function wrapClientComponentLoader(ComponentMod) {\n    if (!('performance' in globalThis)) {\n        return ComponentMod.__next_app__;\n    }\n    return {\n        require: (...args)=>{\n            const startTime = performance.now();\n            if (clientComponentLoadStart === 0) {\n                clientComponentLoadStart = startTime;\n            }\n            try {\n                clientComponentLoadCount += 1;\n                return ComponentMod.__next_app__.require(...args);\n            } finally{\n                clientComponentLoadTimes += performance.now() - startTime;\n            }\n        },\n        loadChunk: (...args)=>{\n            const startTime = performance.now();\n            try {\n                clientComponentLoadCount += 1;\n                return ComponentMod.__next_app__.loadChunk(...args);\n            } finally{\n                clientComponentLoadTimes += performance.now() - startTime;\n            }\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Rebass using npx\nDESCRIPTION: This command utilizes npx to create a new Next.js application integrated with Rebass. It specifies the \"with-rebass\" example and names the new application \"with-rebass-app\".\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-rebass with-rebass-app\n```\n\n----------------------------------------\n\nTITLE: Patching a Project with Arguments\nDESCRIPTION: Command to patch a test project with a local Next.js version, with additional build configuration arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm patch-next --no-build --release path/to/project\n```\n\n----------------------------------------\n\nTITLE: Playwright Navigation Test (typescript)\nDESCRIPTION: Defines a Playwright test to verify navigation between pages.  It navigates to the index page, clicks the 'About' link, and asserts that the URL and page content are correct. Depends on `@playwright/test` and a running Next.js development server on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from '@playwright/test'\n\ntest('should navigate to the about page', async ({ page }) => {\n  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)\n  await page.goto('http://localhost:3000/')\n  // Find an element with the text 'About' and click on it\n  await page.click('text=About')\n  // The new URL should be \"/about\" (baseURL is used there)\n  await expect(page).toHaveURL('http://localhost:3000/about')\n  // The new page should contain an h1 with \"About\"\n  await expect(page.locator('h1')).toContainText('About')\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote MDX in Next.js Pages Router (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to fetch and render remote MDX content in a Next.js application using the Pages Router. It uses `next-mdx-remote/serialize` to serialize the MDX content on the server-side with `getStaticProps`.  The `MDXRemote` component is used to render the serialized data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote'\n\ninterface Props {\n  mdxSource: MDXRemoteSerializeResult\n}\n\nexport default function RemoteMdxPage({ mdxSource }: Props) {\n  return <MDXRemote {...mdxSource} />\n}\n\nexport async function getStaticProps() {\n  // MDX text - can be from a database, CMS, fetch, anywhere...\n  const res = await fetch('https:...')\n  const mdxText = await res.text()\n  const mdxSource = await serialize(mdxText)\n  return { props: { mdxSource } }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Bash\nDESCRIPTION: This code installs the necessary dependencies for the Tigris Vercel starter application using npm. It's an essential step before starting the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tigris-vercel-starter\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with GraphQL example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the api-routes-graphql example. It sets up a project configured for GraphQL, including installing dependencies. The new application will be named 'api-routes-graphql-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example api-routes-graphql api-routes-graphql-app\n```\n\n----------------------------------------\n\nTITLE: Invalid `href` Interpolation with Next.js Link\nDESCRIPTION: This code snippet demonstrates an invalid `href` interpolation using the `next/link` component in Next.js.  The `href` property is an object with a `pathname` that defines dynamic route parameters `/blog/[post]/[comment]`, but the `query` only provides a value for `post`, causing the interpolation to fail. This highlights the need to supply all necessary dynamic route params.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/href-interpolation-failed.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function BlogLink() {\n  return (\n    <Link\n      href={{\n        pathname: '/blog/[post]/[comment]',\n        query: { post: 'post-1' },\n      }}\n    >\n      <a>Invalid link</a>\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Example (Shared Content with Router Specific Blocks)\nDESCRIPTION: This MDX snippet demonstrates how to include content that is specific to either the App Router or Pages Router using the `<AppOnly>` and `<PagesOnly>` components. This allows for shared content with router-specific variations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nThis content is shared between App and Pages.\n\n<PagesOnly>\n\nThis content will only be shown on the Pages docs.\n\n</PagesOnly>\n\nThis content is shared between App and Pages.\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Application in Development Mode\nDESCRIPTION: This snippet outlines the commands necessary to run the Next.js application in development mode, allowing the application to listen for changes during development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Support in Next.js\nDESCRIPTION: This code snippet demonstrates how to enable SVG support in Next.js by setting the `dangerouslyAllowSVG` option to `true` in `next.config.js`. It also shows how to configure the `contentDispositionType` to `attachment` and set a `contentSecurityPolicy` for added security when serving SVG images. The `contentSecurityPolicy` helps to prevent scripts embedded in the image from executing, and the `contentDispositionType` forces the browser to download the image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Content Type in Next.js (TypeScript/JavaScript)\nDESCRIPTION: Shows how to configure the content type metadata for generated icons in Next.js. This metadata is used to set the appropriate type attribute in the HTML output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const contentType = 'image/png'\n\nexport default function Icon() {}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Realm-Web Example using pnpm\nDESCRIPTION: This command uses `create next-app` with `pnpm` to bootstrap a new Next.js application using the `with-realm-web` example. It creates a new directory named `with-realm-web-app` containing the initialized project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-realm-web with-realm-web-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Overmind using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the Overmind example. It utilizes the create next-app tool and specifies the 'with-overmind' example and 'with-overmind-app' as the application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-overmind with-overmind-app\n```\n\n----------------------------------------\n\nTITLE: Database URL Connection String Format\nDESCRIPTION: Illustrates the format for constructing the `DATABASE_URL` connection string.  Replace `<USERNAME>`, `<PLAIN_TEXT_PASSWORD>`, `<ACCESS_HOST_URL>`, and `<DATABASE_NAME>` with the credentials from the PlanetScale password creation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmysql://<USERNAME>:<PLAIN_TEXT_PASSWORD>@<ACCESS_HOST_URL>/<DATABASE_NAME>?sslaccept=strict\n```\n\n----------------------------------------\n\nTITLE: Logging HMR Cache Refreshes in Fetches\nDESCRIPTION: Enables logging for fetch requests restored from the Server Components HMR cache. Requires setting `logging.fetches.hmrRefreshes` to `true` in `next.config.js`. This feature is specifically for development mode use.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  logging: {\n    fetches: {\n      hmrRefreshes: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Next.js Header Paths\nDESCRIPTION: This code snippet illustrates how to escape special characters used in regex path matching within Next.js header configurations. Characters like `(`, `)`, `{`, `}`, `:`, `*`, `+`, `?` must be escaped using `\\` when they are intended as literal characters in the path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        headers: [\n          {\n            key: 'x-header',\n            value: 'value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Component Caching with Children (TSX)\nDESCRIPTION: This snippet demonstrates how to pass non-serializable arguments to a cacheable function by using the `children` prop in a Next.js component. The `CacheComponent` utilizes the 'use cache' directive to cache its output, while allowing a `DynamicComponent` to be passed as a child with potentially uncached data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const uncachedData = await getData()\n  return (\n    <CacheComponent>\n      <DynamicComponent data={uncachedData} />\n    </CacheComponent>\n  )\n}\n\nasync function CacheComponent({ children }: { children: ReactNode }) {\n  'use cache'\n  const cachedData = await fetch('/api/cached-data')\n  return (\n    <div>\n      <PrerenderedComponent data={cachedData} />\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions c1_1, c1_2, c1_3 with TurboPack Exports in JavaScript\nDESCRIPTION: This snippet organizes the functions `c1_1`, `c1_2`, and `c1_3` and exports them through TurboPack. It provides a structure for modularity within the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { b as d2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nimport { a as d1 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nfunction c1_1() {\n    return c1_2();\n}\nfunction c1_2() {\n    return c1_3(d1);\n}\nfunction c1_3() {\n    return c1_1(d2);\n}\nexport { c1_1 as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { c1_2 as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { c1_3 as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Page Extensions with MDX (App Router)\nDESCRIPTION: This code snippet demonstrates how to extend the default page extensions in Next.js to include `.md` and `.mdx` files using the `@next/mdx` plugin, specifically tailored for the App Router. It requires the `@next/mdx` package to be installed. The `withMDX` function wraps the `nextConfig` object to enable MDX support.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/pageExtensions.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating Entrypoint Page (TSX)\nDESCRIPTION: This code creates the entrypoint page for a Next.js application as a Single Page Application (SPA) using TypeScript (TSX). It imports global CSS, defines `generateStaticParams` to generate only the index route (`/`), and creates a functional component `Page` that initially returns placeholder content. This component will serve as the entry point for the entire application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Including eslint-config-next After Other Configurations (mjs)\nDESCRIPTION: This snippet shows how to include `eslint-config-next` in your ESLint configuration after other configurations.  It imports the recommended ESLint configuration and merges it with the `next` configuration. This ensures the Next.js configurations are applied last, avoiding conflicts with other ESLint setups.  Uses `FlatCompat` to handle flat configs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_14\n\nLANGUAGE: mjs\nCODE:\n```\nimport js from '@eslint/js'\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat({\n  // import.meta.dirname is available after Node.js v20.11.0\n  baseDirectory: import.meta.dirname,\n  recommendedConfig: js.configs.recommended,\n})\n\nconst eslintConfig = [\n  ...compat.config({\n    extends: ['eslint:recommended', 'next'],\n  }),\n]\n\nexport default eslintConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP in next.config.js (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to configure a Content Security Policy (CSP) directly within the `next.config.js` file in a Next.js application. It defines the CSP header string and injects it into all routes using the `headers` configuration option.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-eval' 'unsafe-inline';\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Content-Security-Policy',\n            value: cspHeader.replace(/\\n/g, ''),\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager in Pages Router (JSX)\nDESCRIPTION: This code snippet demonstrates how to include the `GoogleTagManager` component within a custom `_app.js` file in a Next.js application using the Pages Router. It imports the component from `@next/third-parties/google` and passes the GTM container ID via the `gtmId` prop. This ensures GTM is loaded on all routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Page Match Data with URLPattern in Next.js Middleware\nDESCRIPTION: Migration from using the internal Next.js page matching mechanism to the web standard URLPattern API. This change provides more accurate page and asset matching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest, NextFetchEvent } from 'next/server'\n\nexport function middleware(request: NextRequest, event: NextFetchEvent) {\n  const { params } = event.request.page\n  const { locale, slug } = params\n\n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nconst PATTERNS = [\n  [\n    new URLPattern({ pathname: '/:locale/:slug' }),\n    ({ pathname }) => pathname.groups,\n  ],\n]\n\nconst params = (url) => {\n  const input = url.split('?')[0]\n  let result = {}\n\n  for (const [pattern, handler] of PATTERNS) {\n    const patternResult = pattern.exec(input)\n    if (patternResult !== null && 'pathname' in patternResult) {\n      result = handler(patternResult)\n      break\n    }\n  }\n  return result\n}\n\nexport function middleware(request: NextRequest) {\n  const { locale, slug } = params(request.url)\n\n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 7 Implementation\nDESCRIPTION: Imports 'foobar' and Part 5, then modifies 'foobar' by concatenating 'foo'. Demonstrates Turbopack's handling of imported variable modification and dependency chains.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nfoobar += \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Attributes to Script Tag in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to add additional attributes, such as `id`, `nonce`, and custom data attributes, to the `<script>` tag using the `next/script` component. It is designed to be used within a client component, as indicated by the `'use client'` directive. The additional attributes are directly passed to the `Script` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers and Cookies in Next.js App Directory - JSX\nDESCRIPTION: This JavaScript snippet demonstrates accessing request headers and cookies in server components within the Next.js 'app' directory. The 'headers' and 'cookies' APIs are utilized to fetch request-specific data directly in server components, enabling scenarios such as authentication and personalized data retrieval.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\\nimport { cookies, headers } from 'next/headers'\\n\\nasync function getData() {\\n  const authHeader = (await headers()).get('authorization')\\n\\n  return '...'\\n}\\n\\nexport default async function Page() {\\n  // You can use `cookies` or `headers` inside Server Components\\n  // directly or in your data fetching function\\n  const theme = (await cookies()).get('theme')\\n  const data = await getData()\\n  return '...'\\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Package Installation for Next.js 15\nDESCRIPTION: Manual installation command for updating Next.js and React dependencies to their latest versions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Custom Partytown Configuration\nDESCRIPTION: This code snippet shows how to customize the Partytown configuration in a Next.js application by including a `data-partytown-config` script tag within the `<Head />` component of a custom `_document.js` file. It allows modifying Partytown settings like debug mode and library path. Requires a custom `_document.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head>\n        <script\n          data-partytown-config\n          dangerouslySetInnerHTML={{\n            __html: `\n              partytown = {\n                lib: \"/_next/static/~partytown/\",\n                debug: true\n              };\n            `,\n          }}\n        />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Form Data in Server Action using Zod (TS)\nDESCRIPTION: This code snippet shows how to validate form fields within a Server Action using the Zod schema defined earlier. It parses the form data using `SignupFormSchema.safeParse`. If validation fails, it returns early with error messages; otherwise, it proceeds to call the authentication provider.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { SignupFormSchema, FormState } from '@/app/lib/definitions'\n\nexport async function signup(state: FormState, formData: FormData) {\n  // Validate form fields\n  const validatedFields = SignupFormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n\n  // If any form fields are invalid, return early\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Call the provider or db to create a user...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Images with External Data in JavaScript\nDESCRIPTION: Creates an image in JavaScript using parameters and external data. Leverages the `ImageResponse` class from Next.js for dynamic data retrieval and embedding within the image. Requires asynchronous operations to fetch data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n\nexport default async function Image({ params }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using unstable_cache in a Next.js page (TSX)\nDESCRIPTION: This snippet shows how to use `unstable_cache` within a Next.js page component written in TypeScript (TSX). It defines a `getCachedUser` function that caches a simple object containing the user ID. The cache is tagged with 'users' and revalidated after 60 seconds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_cache } from 'next/cache'\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ userId: string }>\n}) {\n  const { userId } = await params\n  const getCachedUser = unstable_cache(\n    async () => {\n      return { id: userId }\n    },\n    [userId], // add the user ID to the cache key\n    {\n      tags: ['users'],\n      revalidate: 60,\n    }\n  )\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Error in Spans with closeSpanWithError Function\nDESCRIPTION: Implements a function to properly close a span with error information. It handles bubbled errors differently and sets appropriate span attributes and status codes based on the error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t as isBubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nimport { g as SpanStatusCode } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nconst closeSpanWithError = (span, error)=>{\n    if (isBubbledError(error) && error.bubble) {\n        span.setAttribute('next.bubble', true);\n    } else {\n        if (error) {\n            span.recordException(error);\n        }\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error == null ? void 0 : error.message\n        });\n    }\n    span.end();\n};\nexport { SpanStatusCode };\nexport { closeSpanWithError as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Output Example (Bash)\nDESCRIPTION: This code snippet demonstrates the output from a `next build --debug` command. It shows how Next.js indicates whether a route is static (prerendered) or dynamic (server-rendered on demand) using the `○` and `ƒ` symbols, respectively. This output is helpful for troubleshooting why a route is marked as dynamic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/devIndicators.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n\n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: This section describes setting the necessary environment variables required for the Next.js application to communicate with Agility CMS. These variables include the Instance GUID, API Keys (Fetch and Preview), and the Security Key.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- `AGILITY_CMS_GUID` should be the **Instance GUID** field\n- `AGILITY_CMS_API_FETCH_KEY` should be the **Live API Key** field\n- `AGILITY_CMS_API_PREVIEW_KEY` should be the **Preview API Key** field - this is used when the site is in [Preview Mode](https://nextjs.org/docs/advanced-features/preview-mode) and allows your site to pull the latest content, regardless of whether it is published or not.\n- `AGILITY_CMS_SECURITY_KEY` should be the **Security Key** field that can be found in **Settings** > **Global Security** - this is used to communicate between the CMS and your site to validate [Preview Mode](https://nextjs.org/docs/advanced-features/preview-mode)\n```\n\n----------------------------------------\n\nTITLE: Implementing Art Direction for Responsive Images in Next.js\nDESCRIPTION: This code snippet shows how to use getImageProps to create responsive images with different sources for mobile and desktop views, demonstrating art direction techniques.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getImageProps } from 'next/image'\n\nexport default function Home() {\n  const common = { alt: 'Art Direction Example', sizes: '100vw' }\n  const {\n    props: { srcSet: desktop },\n  } = getImageProps({\n    ...common,\n    width: 1440,\n    height: 875,\n    quality: 80,\n    src: '/desktop.jpg',\n  })\n  const {\n    props: { srcSet: mobile, ...rest },\n  } = getImageProps({\n    ...common,\n    width: 750,\n    height: 1334,\n    quality: 70,\n    src: '/mobile.jpg',\n  })\n\n  return (\n    <picture>\n      <source media=\"(min-width: 1000px)\" srcSet={desktop} />\n      <source media=\"(min-width: 500px)\" srcSet={mobile} />\n      <img {...rest} style={{ width: '100%', height: 'auto' }} />\n    </picture>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding MDX Components Locally (TSX - Pages Router)\nDESCRIPTION: This TypeScript code snippet illustrates how to override MDX components locally within a Next.js application using the Pages Router. It defines a custom `h1` component (`CustomH1`) and an `overrideComponents` object that maps the `h1` element to the custom component. This customization is specific to the page where it's implemented.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying scripts in package.json\nDESCRIPTION: This code snippet shows how to modify the scripts section in `package.json` to correctly handle development, build, and production environments. The `dev` script starts the custom server, the `build` script executes the Next.js build process, and the `start` script starts the custom server in production mode by setting the `NODE_ENV` environment variable to `production`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/build-dir-not-writeable.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Compaction Example - Initial SST Layout\nDESCRIPTION: Comprehensive example showing the initial layout of SST files across multiple families before compaction, including sequence numbers and hash ranges.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nkey hash range: | 0    ...    u64::MAX | Family\nSST 1:             |-|                   1\nSST 2:             |----------------|    1\nSST 3:                |----------------| 1\nSST 4:            |-----|                2\nSST 5:                |-----|            2\nSST 6:                 |-------|         1\nSST 7:                    |-------|      1\nSST 8:                 |--------|        2\nSST 9:                     |--------|    2\nCURRENT: 9\n```\n\n----------------------------------------\n\nTITLE: Configuring assetPrefix in Next.js JavaScript\nDESCRIPTION: This snippet demonstrates how to correctly set the `assetPrefix` value in a Next.js configuration file. `assetPrefix` should be a string, and this example sets it to '/'. The primary dependency is the presence of a `next.config.js` file in the root directory of a Next.js project. No additional parameters are needed, and the expected output is a correctly configured `assetPrefix` without errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-assetprefix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  assetPrefix: '/',\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Turbopack Object\nDESCRIPTION: Creates an empty Turbopack object on the process global scope. This serves as the initial setup for Turbopack functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.turbopack = {};\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with Yarn\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application using the 'with-joi' example.  It sets up a new project named 'with-joi-app' from the specified template. Yarn must be installed globally for this command to function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-joi with-joi-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the Zustand example. It initializes a project named `with-zustand-app` based on the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-zustand with-zustand-app\n```\n\n----------------------------------------\n\nTITLE: Defining Function d1 and Exporting it via TurboPack in JavaScript\nDESCRIPTION: This snippet defines `d1` and exports it as `a`. The use of the TurboPack variable assert ensures optimization during module execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction d1() {}\nexport { d1 as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Recoil Example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-recoil example. It clones the example into a new directory named with-recoil-app. It requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-recoil with-recoil-app\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Metrics Variables in JavaScript\nDESCRIPTION: These snippets import the previously declared metrics variables from the '__TURBOPACK_PART__' and export them using aliases. The variables are used to maintain metrics across parts, ensuring correct tracking.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { b as clientComponentLoadTimes } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as clientComponentLoadStart } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as clientComponentLoadCount } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\n```\n\n----------------------------------------\n\nTITLE: Spawning Child Processes in Node.js\nDESCRIPTION: This snippet demonstrates the synchronous spawning of child processes using Node.js's `child_process` module. It indicates the usage of `spawnSync` to execute the 'node' command with varying parameters. Important to note is the handling of the 'unknown' variable, which should represent valid command line arguments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchild_process.spawnSync(unknown);\nchild_process.spawnSync(\"node\", unknown);\nchild_process.spawnSync(\"node\", [unknown, unknown]);\n```\n\n----------------------------------------\n\nTITLE: Run Next.js development server (Yarn)\nDESCRIPTION: This command uses Yarn to execute the 'dev' script defined in the project's package.json. The purpose is to start the Next.js development server, allowing developers to view and test the application locally. It typically starts the server on localhost.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building Native SWC Components\nDESCRIPTION: Command for working with Rust code in Next.js. After installing Rust, this command builds the native components of the SWC compiler used by Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm swc-build-native\n```\n\n----------------------------------------\n\nTITLE: Enabling Turbopack in Next.js\nDESCRIPTION: This snippet shows how to modify the `package.json` file to enable Turbopack for the `dev` and `build` scripts in a Next.js project. It involves adding the `--turbopack` flag to the respective script commands. The `highlight` property indicates which line is being emphasized.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/08-turbopack.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build --turbopack\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: These commands install the necessary dependencies for the Next.js application and then start the development server. It demonstrates the usage with both npm and yarn.  The development server will run on http://localhost:3000 by default.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with remove-console Example (Yarn)\nDESCRIPTION: This command uses `create next-app` with Yarn to create a new Next.js application based on the `remove-console` example. The new application will be named `remove-console-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example remove-console remove-console-app\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Basic Metadata\nDESCRIPTION: This code snippet shows the HTML output generated from the basic metadata settings. It includes meta tags for application name, author, generator, keywords, referrer, creator, publisher, and format detection, as well as a link tag for the author.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"application-name\" content=\"Next.js\" />\n<meta name=\"author\" content=\"Seb\" />\n<link rel=\"author\" href=\"https://nextjs.org\" />\n<meta name=\"author\" content=\"Josh\" />\n<meta name=\"generator\" content=\"Next.js\" />\n<meta name=\"keywords\" content=\"Next.js,React,JavaScript\" />\n<meta name=\"referrer\" content=\"origin-when-cross-origin\" />\n<meta name=\"color-scheme\" content=\"dark\" />\n<meta name=\"creator\" content=\"Jiachi Liu\" />\n<meta name=\"publisher\" content=\"Sebastian Markbåge\" />\n<meta name=\"format-detection\" content=\"telephone=no, address=no, email=no\" />\n```\n\n----------------------------------------\n\nTITLE: Add Google Analytics to Root Layout (TSX)\nDESCRIPTION: This code snippet demonstrates how to integrate Google Analytics into a Next.js application's root layout using the `@next/third-parties/google` library. The `GoogleAnalytics` component is imported and included within the `RootLayout` component, passing the Google Analytics measurement ID (`gaId`) as a prop. This ensures that Google Analytics is loaded on all routes of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled JSX Registry - TypeScript\nDESCRIPTION: This snippet defines a React component that sets up a styled-jsx registry, managing styles for a Next.js application. It utilizes hooks to handle the stylesheet initialization and flushing process effectively.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tracking Dynamic Fetch Calls in Next.js (JavaScript)\nDESCRIPTION: The `trackDynamicFetch` function is used to track dynamic `fetch` calls during prerendering in Next.js. It checks if a `prerenderState` exists and the call is not within an `unstable_cache` scope, and then uses `postponeWithTracking` to postpone rendering if necessary.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { f as postponeWithTracking } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: -8\n};\nfunction trackDynamicFetch(store, expression) {\n    if (!store.prerenderState || store.isUnstableCacheCallback) return;\n    postponeWithTracking(store.prerenderState, expression, store.urlPathname);\n}\nexport { trackDynamicFetch };\nexport { trackDynamicFetch as l } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Executing Script with onLoad handler in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to use the `next/script` component with the `onLoad` event handler to execute code after the script has finished loading. It is designed to be used within a client component, as indicated by the `'use client'` directive.  The script tag is included from a provided URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Metadata with Segment Props in Next.js (TSX)\nDESCRIPTION: This example shows how to define a `generateMetadata` function that accepts segment props (params and searchParams) in Next.js using TypeScript. It defines a `Props` type with `params` and `searchParams` and uses it as the function argument. This allows access to route parameters and query parameters for dynamic metadata generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_73\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\ntype Props = {\n  params: Promise<{ id: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}\n\nexport function generateMetadata({ params, searchParams }: Props): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - Subset of paths at build time (TSX)\nDESCRIPTION: This code snippet demonstrates how to statically render a subset of paths at build time using `generateStaticParams` in Next.js. It fetches a list of posts from an API, renders only the first 10 posts at build time, and renders the remaining posts on demand when they are first visited.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  // Render the first 10 posts at build time\n  return posts.slice(0, 10).map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js serverExternalPackages - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `next.config.js` file to opt out specific packages from the automatic bundling mechanism in Next.js. The `serverExternalPackages` property is used to specify an array of package names that should be resolved using Node.js `require` functionality instead. The snippet requires a basic understanding of Next.js configuration and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/serverExternalPackages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: ['@acme/ui'],\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Creation in JavaScript\nDESCRIPTION: This code snippet demonstrates the creation of a URL using the `new URL()` constructor, where the first argument (the URL string) is dynamically generated using `FreeVar(Math)[\"random\"]()`. This can be problematic as the URL's origin and structure are not statically determined, potentially leading to security vulnerabilities or unexpected behavior. The second argument `import.meta.url` provides the base URL for relative URLs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1201__ new URL(FreeVar(Math)[__quo__r-d4bcb9.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"new URL(FreeVar(Math)[\"random\"](), import.meta*0*[\"url\"])\"\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 0 Implementation\nDESCRIPTION: This module imports dependencies, defines external1 and internal functions, and exports them. It demonstrates how Turbopack handles imports from other parts, function definitions, and exports with variable renaming.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport { upper } from \"module\";\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nfunction external1() {\n    return internal() + foobar;\n}\nfunction internal() {\n    return upper(foobar);\n}\nexport { external1 };\nexport { external1 as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { internal as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Postponing Rendering in Next.js (JavaScript)\nDESCRIPTION: The `Postpone` component is a wrapper around the `postponeWithTracking` function, used to postpone rendering in Next.js. It accepts a `reason`, `prerenderState`, and `pathname` as props and calls `postponeWithTracking` to handle the postponement, typically used during static generation when dynamic data is encountered.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { f as postponeWithTracking } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: -8\n};\nfunction Postpone({ reason, prerenderState, pathname }) {\n    postponeWithTracking(prerenderState, reason, pathname);\n}\nexport { Postpone };\nexport { Postpone as k } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Functions c2_1, c2_2, c2_3 with TurboPack Exports in JavaScript\nDESCRIPTION: This snippet introduces functions `c2_1`, `c2_2`, and `c2_3`, demonstrating interdependencies and using TurboPack for exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as d3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nfunction c2_1() {\n    return c2_2(d3);\n}\nfunction c2_2() {\n    return c2_3();\n}\nfunction c2_3() {\n    return c2_1();\n}\nexport { c2_1 as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { c2_2 as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { c2_3 as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Tailwind CSS Content Paths\nDESCRIPTION: This snippet shows how to configure the `content` array in `tailwind.config.js` to specify which files Tailwind CSS should scan for classes. This helps avoid scanning unnecessary files and directories, improving build performance.  Incorrect configuration may slow down your build.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  content: [\n    './src/**/*.{js,ts,jsx,tsx}', // Good\n    // This might be too broad\n    // It will match `packages/**/node_modules` too\n    // '../../packages/**/*.{js,ts,jsx,tsx}',\n  ],\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  content: [\n    // Better - only scans the 'src' folder\n    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling iOS Format Detection (JSX)\nDESCRIPTION: This code snippet shows how to disable iOS's automatic format detection for phone numbers, dates, email addresses, and addresses. This prevents iOS from converting these elements into links, which can cause hydration mismatches in React applications. The meta tag is placed in the `<head>` section of the HTML.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<meta\n  name=\"format-detection\"\n  content=\"telephone=no, date=no, email=no, address=no\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Catch-All Route - JSX\nDESCRIPTION: This code defines a `generateStaticParams` function and a default `Page` component for an optional catch-all route in Next.js. The `generateStaticParams` function returns an array containing a single object with an empty slug, mapping all routes to this page. The `Page` component is a server component, which is prerendered into static HTML.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Fetching in TypeScript Route Handlers\nDESCRIPTION: This TypeScript snippet for route handlers showcases a shift from handling non-promise params to promise-based params. It enhances the `GET` function to asynchronously process URL parameters using `await`, ensuring that the route data is fetched and processed correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype Params = { slug: string }\\n\\nexport async function GET(request: Request, segmentData: { params: Params }) {\\n  const params = segmentData.params\\n  const slug = params.slug\\n}\\n\\n// After\\ntype Params = Promise<{ slug: string }>\\n\\nexport async function GET(request: Request, segmentData: { params: Params }) {\\n  const params = await segmentData.params\\n  const slug = params.slug\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote MDX in Next.js Pages Router (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to fetch and render remote MDX content in a Next.js application using the Pages Router. It uses `next-mdx-remote/serialize` to serialize the MDX content on the server-side with `getStaticProps`. The `MDXRemote` component is used to render the serialized data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote } from 'next-mdx-remote'\n\nexport default function RemoteMdxPage({ mdxSource }) {\n  return <MDXRemote {...mdxSource} />\n}\n\nexport async function getStaticProps() {\n  // MDX text - can be from a database, CMS, fetch, anywhere...\n  const res = await fetch('https:...')\n  const mdxText = await res.text()\n  const mdxSource = await serialize(mdxText)\n  return { props: { mdxSource } }\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Fetch Requests in Next.js - TypeScript\nDESCRIPTION: Demonstrates how Next.js automatically memoizes `fetch` requests with identical URLs and options, preventing redundant network requests within a React component tree on the server. This snippet does not introduce any unique dependencies beyond standard TypeScript and Next.js environment configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n\n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n\n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with TypeScript\nDESCRIPTION: This TypeScript configuration file (`vitest.config.mts`) defines the Vitest testing environment. It imports necessary modules, specifies plugins including `tsconfigPaths` and `@vitejs/plugin-react`, and sets the test environment to `jsdom` for simulating a browser environment. The `tsconfigPaths` plugin is used for resolving paths defined in the `tsconfig.json` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\nimport tsconfigPaths from 'vite-tsconfig-paths'\n\nexport default defineConfig({\n  plugins: [tsconfigPaths(), react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing XState Inspect\nDESCRIPTION: This command installs the @xstate/inspect package, which provides debugging and visualization tools for XState.  It's installed using npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: Client-Side Data Fetching Example\nDESCRIPTION: Example of client-side data fetching using useState and useEffect hooks to handle blog posts data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useState, useEffect } from 'react'\n\nexport function Posts() {\n  const [posts, setPosts] = useState(null)\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await fetch('https://api.vercel.app/blog')\n      const data = await res.json()\n      setPosts(data)\n    }\n    fetchPosts()\n  }, [])\n\n  if (!posts) return <div>Loading...</div>\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Rules in robots.txt\nDESCRIPTION: Defines crawler access rules for web spiders/robots, specifically disallowing access to /pocket while allowing access to /blog/* paths. The file includes a comment indicating it should not be triggered from a non-root directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/metadata/app/title/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# This robots.txt not in root app dir should never be triggered\nUser-Agent: *\nDisallow:\n\nDisallow: /pocket\nAllow: /blog/*\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the specified example. It clones the 'api-routes-apollo-server-and-client-auth' example into a directory named 'api-routes-apollo-server-and-client-auth-app'. It requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode (Yarn)\nDESCRIPTION: This command starts the Next.js application in development mode using Yarn. It allows developers to preview and test the application locally before deployment. The app will typically run on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using create-next-app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'image-app' based on the 'image-component' example. It initializes a new project with the specified template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example image-component image-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js Sitecore XM Cloud App using Yarn\nDESCRIPTION: This command sets up a Sitecore XM Cloud-connected Next.js project. It requires Node.js and Yarn. It initializes a project named 'cms-sitecore-xmcloud-app' with the Sitecore XM Cloud integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app\n```\n\n----------------------------------------\n\nTITLE: Middleware Header Processing Function\nDESCRIPTION: Handles processing of middleware-specific headers and request validation\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error('request.headers must be an instance of Headers');\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set('x-middleware-request-' + key, value);\n            keys.push(key);\n        }\n        headers.set('x-middleware-override-headers', keys.join(','));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Neo4j example using yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the `with-neo4j` example. It sets up a pre-configured Next.js project ready to interact with a Neo4j database using the specified example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-neo4j with-neo4j-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app using pnpm\nDESCRIPTION: This command leverages pnpm to set up a new Next.js application, using the `with-mqtt-js` example. The command initializes a project directory named `with-mqtt-js-app`, setting it up with the boilerplate code for MQTT integration and its related dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mqtt-js with-mqtt-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Knex Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-knex` example. It shows how to initialize a new project using npm, yarn or pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-knex with-knex-app\n```\n\n----------------------------------------\n\nTITLE: Fetch Patching Implementation\nDESCRIPTION: Implements a patchFetch function that utilizes server hooks and work storage for customized fetch behavior\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        workAsyncStorage\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Object in JavaScript\nDESCRIPTION: The code defines an object 'shared' with properties 'random' and 'effect', which involves pushing 'b' to the order array. It depends on the presence of 'random' and 'order'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst shared = {\n    random,\n    effect: order.push(\"b\")\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated Next.js Middleware Using request.page\nDESCRIPTION: Example of middleware implementation using the deprecated request.page approach for extracting locale and slug parameters from the URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-request-page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const { params } = event.request.page\n  const { locale, slug } = params\n\n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Large Stateless Component Benchmark\nDESCRIPTION: Command to run a benchmark test for a stateless application that renders 10,000 list items. This test executes 500 HTTP requests to measure performance under heavy rendering load.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bench:stateless-big\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Catch-All Route - TSX\nDESCRIPTION: This code defines a `generateStaticParams` function and a default `Page` component for an optional catch-all route in Next.js. The `generateStaticParams` function returns an array containing a single object with an empty slug, mapping all routes to this page. The `Page` component is a server component, which is prerendered into static HTML.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Dynamically in Node.js\nDESCRIPTION: This snippet demonstrates the use of fs.readFileSync for reading a file dynamically. It highlights issues with dynamic values serving as file paths, which can lead to unpredictable behavior. Required dependencies include the 'fs' module from Node.js. The expected inputs for readFileSync include the path to the file as a dynamic variable, with outputs being the contents of the file if found, or an error if not.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-57458d.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(unknown);\n\nimport(unknown);\n\nfs.readFileSync(unknown);\n\nnew URL(unknown, import.meta.url);\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with ButterCMS Example - Bash\nDESCRIPTION: This snippet provides commands to create a new Next.js application using the predefined ButterCMS example, applicable for npm, yarn, and pnpm users. The tools needed include npx, yarn, or pnpm. The commands bootstrap a Next.js app using the ButterCMS example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-buttercms cms-buttercms-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-buttercms cms-buttercms-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-buttercms cms-buttercms-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Rspack using npx\nDESCRIPTION: This command creates a new Next.js application named 'with-rspack-app' using the 'with-rspack' example. It utilizes npx to execute the create-next-app command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-rspack with-rspack-app\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic API Asynchronously in Server Component\nDESCRIPTION: This code snippet shows how to properly access dynamic API properties asynchronously in a Server Component or route handler in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nasync function Page({ params }) {\n  // asynchronous access of `params.id`.\n  const { id } = await params\n  return <p>ID: {id}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MDBReact example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the MDBReact example.  It utilizes the create-next-app tool and specifies the with-mdbreact example. The resulting application will be named with-mdbreact-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mdbreact with-mdbreact-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Userbase Example\nDESCRIPTION: These commands create a new Next.js application using the `with-userbase` example.  The commands utilize `create-next-app` with npm, Yarn, and pnpm respectively. The created application will be named `next-userbase-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-userbase next-userbase-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-userbase next-userbase-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-userbase next-userbase-app\n```\n\n----------------------------------------\n\nTITLE: Using Script component with inline script and curly braces in JSX\nDESCRIPTION: This example shows how to use the `next/script` component with an inline script wrapped in curly braces. The script content is executed when the component is rendered. The `id` attribute is used for identification and potential manipulation of the script.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n</Script>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App using create-next-app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'custom-server-app' based on the 'custom-server' example.  It leverages pnpm for efficient package management and installation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example custom-server custom-server-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Drupal example using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named 'cms-drupal-app' based on the 'cms-drupal' example.  Yarn is used as the package manager to bootstrap the Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-drupal cms-drupal-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using npm\nDESCRIPTION: This command utilizes npm's create-next-app to scaffold a new Next.js project with the 'with-passport' example. It creates a directory named 'with-passport-app' containing the boilerplate code for the authentication example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-passport with-passport-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Yarn - Bash\nDESCRIPTION: This command uses `create-next-app` with Yarn to create a new Next.js project from the 'with-absolute-imports' example. The project will be created in a directory named 'with-absolute-imports-app'. Requires Node.js and Yarn installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nyarn create next-app --example with-absolute-imports with-absolute-imports-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Sizes for Responsive Images in Next.js\nDESCRIPTION: This code snippet demonstrates how to configure device sizes for responsive images in Next.js. These sizes are used by the `next/legacy/image` component when `layout=\"responsive\"` or `layout=\"fill\"` is used to ensure the correct image is served for the user's device.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Metadata with TypeScript - Next.js\nDESCRIPTION: This TypeScript snippet illustrates the usage of the `generateMetadata` function to fetch and return dynamic metadata based on route parameters. It showcases how to extend metadata with additional images when appropriate.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: Promise<{ id: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const { id } = await params\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Registry in TypeScript\nDESCRIPTION: Defines a registry component that collects CSS styles generated during rendering and injects them into the document head, ensuring proper style management for server-side rendered applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Images with ImageResponse in Next.js\nDESCRIPTION: This code snippet demonstrates how to use the `ImageResponse` constructor from `next/og` to generate a dynamic image with JSX and CSS. It creates a simple image with the text \"Hello world!\" centered on a white background, with a specified width and height.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport default function OG() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          textAlign: 'center',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Hello world!\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 600,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding MDX Components Locally (JSX - Pages Router)\nDESCRIPTION: This JavaScript code demonstrates overriding MDX components locally in a Next.js application using the Pages Router.  It defines a custom `h1` component (`CustomH1`) and an `overrideComponents` object that maps the `h1` element to that custom component.  This allows specific pages to have distinct styling or behavior for MDX elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding MDX Components Locally (JSX - App Router)\nDESCRIPTION: This JavaScript code shows how to override MDX components locally in a Next.js application using the App Router. It defines a custom `h1` component (`CustomH1`) and an `overrideComponents` object that maps the `h1` element to the custom component. This enables page-specific styling or functionality for MDX elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redirects in Next.js using TypeScript\nDESCRIPTION: This snippet defines redirects in a Next.js application utilizing TypeScript. It specifies the source and destination paths along with the permanent status of each redirect. Required dependencies include the Next.js framework. The expected output is a configuration that enables users to be redirected based on specified paths.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  async redirects() {\n    return [\n      // Basic redirect\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      // Wildcard path matching\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n    ]\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configure tsconfig.json for module path aliases\nDESCRIPTION: This JSON snippet shows how to configure `tsconfig.json` or `jsconfig.json` to set up module path aliases. By defining paths under `compilerOptions`, you can create shortcuts for importing modules, enhancing code readability and maintainability. The `baseUrl` specifies the base directory for resolving non-absolute module names.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream from an Iterator - JavaScript\nDESCRIPTION: This JavaScript snippet implements a function to convert an async iterator into a ReadableStream. It simulates producing data with a generator function and returns the stream in a GET route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout: Removing Default Meta Tags (TSX)\nDESCRIPTION: This code modifies the root layout in Next.js (TSX) by removing the default `meta charset` and `meta viewport` tags from the `<head>`. Next.js automatically includes these tags, so they can be safely removed from the layout file. This simplifies the layout and avoids redundancy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout: Using Metadata API (JSX)\nDESCRIPTION: This code demonstrates how to use the Next.js Metadata API to manage metadata information in the root layout (JSX). It exports a `metadata` object containing the title and description of the application. The `<head>` tags are then simplified in the RootLayout component, relying on the Metadata API to inject the metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: RootLayout Component with Metadata (Initial) - TSX\nDESCRIPTION: This code defines the RootLayout component in a Next.js application using TypeScript. It sets the basic HTML structure, includes metadata such as title and description, and renders the children components. The `link` tag for the favicon is included.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Rendering with getServerSideProps in Next.js\nDESCRIPTION: This code demonstrates how to implement Server-side Rendering in Next.js by using the getServerSideProps function. The function fetches data from an external API on every request and passes it to the Page component as props. This approach is useful for pages that need frequently updated data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/01-server-side-rendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({ data }) {\n  // Render data...\n}\n\n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  // Pass data to the page via props\n  return { props: { data } }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports with next/dynamic\nDESCRIPTION: This code snippet demonstrates how to dynamically import a named export from a module using `next/dynamic`.  The `import()` function returns a Promise that resolves to the module, and the `.then()` method is used to extract the named export. In this case, the `Hello` function is imported and used as the dynamically loaded component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst ClientComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Images for Storybook Components\nDESCRIPTION: This section imports various image assets to be used within Storybook components, enabling image rendering in the context of a UI development environment. Assets like logos and screenshots of technologies enhance the configurability of Storybook.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Github from \"./assets/github.svg\";\nimport Discord from \"./assets/discord.svg\";\nimport Youtube from \"./assets/youtube.svg\";\nimport Tutorials from \"./assets/tutorials.svg\";\nimport Styling from \"./assets/styling.png\";\nimport Context from \"./assets/context.png\";\nimport Assets from \"./assets/assets.png\";\nimport Docs from \"./assets/docs.png\";\nimport Share from \"./assets/share.png\";\nimport FigmaPlugin from \"./assets/figma-plugin.png\";\nimport Testing from \"./assets/testing.png\";\nimport Accessibility from \"./assets/accessibility.png\";\nimport Theming from \"./assets/theming.png\";\nimport AddonLibrary from \"./assets/addon-library.png\";\n```\n\n----------------------------------------\n\nTITLE: RootLayout Component with Metadata (Initial) - JSX\nDESCRIPTION: This code defines the RootLayout component in a Next.js application using JavaScript (JSX). It sets the basic HTML structure, includes metadata such as title and description, and renders the children components. The `link` tag for the favicon is included.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout: Removing Link Tags (JSX)\nDESCRIPTION: This code updates the root layout in Next.js (JSX) by removing `<link>` tags for favicon and other metadata files. Next.js automatically adds metadata files placed in the top level of the `app` directory to the application's `<head>`, so the corresponding `<link>` tags in `layout.js` can be removed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: RootLayout Component with Metadata (Optimized) - JSX\nDESCRIPTION: This code defines the optimized RootLayout component after moving the static assets like favicon into the `app` directory. The `<link>` tag for the favicon is removed. The component receives `children` as a prop and renders them within the HTML structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Page Extensions (Pages Router)\nDESCRIPTION: This code snippet shows how to extend the default page extensions in Next.js for the Pages Router. It modifies the `pageExtensions` array in `next.config.js` to include `.mdx`, `.md`, `.jsx`, `.js`, `.tsx`, and `.ts` files. This affects all pages, `middleware.js`, `instrumentation.js`, `_document.js`, `_app.js`, and `pages/api/`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/pageExtensions.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  pageExtensions: ['mdx', 'md', 'jsx', 'js', 'tsx', 'ts'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using notFound in Fetch Call - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the notFound function in a fetch call to handle 404 errors within a try/catch block. When a 404 response is detected, it calls notFound() to render the not-found.js component, but this is caught inside the catch block, preventing the expected behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_rethrow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport { notFound } from 'next/navigation'\n\nexport default async function Page() {\n  try {\n    const post = await fetch('https://.../posts/1').then((res) => {\n      if (res.status === 404) notFound()\n      if (!res.ok) throw new Error(res.statusText)\n      return res.json()\n    })\n  } catch (err) {\n    console.error(err)\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Analytics in App Router (TSX)\nDESCRIPTION: This code snippet shows how to integrate Google Analytics into a Next.js application using the App Router and TypeScript. It uses the `GoogleAnalytics` component from `@next/third-parties/google` and includes it within the root layout component. The Google Analytics measurement ID is passed via the `gaId` prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared MDX Layout (JSX - App Router)\nDESCRIPTION: This JavaScript code defines a shared layout for MDX pages within a Next.js application using the App Router. The `MdxLayout` component accepts `children` as a prop and renders them inside a `div` element with a specific style. This layout will be consistently applied across all MDX pages within the same directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Logging and Export in Module Part Import\nDESCRIPTION: Imports module parts and logs imported variables, with continued export management using Turbopack setups. Dependencies involve access to the Turbopack framework and logging capabilities, emphasizing efficient debugging and module evaluation. This demonstrates practical application of module components and output verification.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nconsole.log(foobarCopy);\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Data Fetching with useEffect in React\nDESCRIPTION: This snippet demonstrates how to fetch data on the client side using the useEffect hook in React. It fetches profile data from an API, manages loading and error states, and renders the fetched data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/05-client-side.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\n\nfunction Profile() {\n  const [data, setData] = useState(null)\n  const [isLoading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetch('/api/profile-data')\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data)\n        setLoading(false)\n      })\n  }, [])\n\n  if (isLoading) return <p>Loading...</p>\n  if (!data) return <p>No profile data</p>\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.bio}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action in Next.js (JavaScript)\nDESCRIPTION: This snippet defines a simple Server Action in Next.js using JavaScript. The `'use server'` directive indicates that the function should be executed on the server. This allows you to perform server-side operations directly from client components without creating separate API routes. The defined create function is an example, that doesn't have any implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nexport async function create() {}\n```\n\n----------------------------------------\n\nTITLE: Deleting Query Parameters in Next.js Middleware (TS)\nDESCRIPTION: This code snippet demonstrates how to delete a query parameter from the URL in a Next.js middleware. It imports `NextRequest` and `NextResponse` from `next/server`, accesses the `nextUrl` property of the request, deletes the specified query parameter using `searchParams.delete()`, and then rewrites the request to the modified URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/deleting-query-params-in-middlewares.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { NextResponse } from 'next/server'\n\nexport default function middleware(request: NextRequest) {\n  const nextUrl = request.nextUrl\n  nextUrl.searchParams.delete('key') // <-- this is now possible! 🎉\n  return NextResponse.rewrite(nextUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and related dependencies\nDESCRIPTION: This command installs Jest, jest-environment-jsdom, @testing-library/react, @testing-library/dom, @testing-library/jest-dom, ts-node, and @types/jest as development dependencies using npm, yarn or pnpm. These packages are essential for setting up a testing environment for React components in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest\n# or\nyarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest\n# or\npnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest\n```\n\n----------------------------------------\n\nTITLE: next.config.js worker flag\nDESCRIPTION: This config shows how to enable the experimental `nextScriptWorkers` flag in `next.config.js` to use the `worker` strategy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Function With Duplicate Name in JavaScript\nDESCRIPTION: This snippet exports a function named `Table`, which causes an error due to conflicting definitions when imported. It highlights the importance of unique function names to avoid binding conflicts. This example uses JavaScript ES module syntax, and careful attention should be given to naming conventions to prevent such errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/duplicate-binding/issues/Ecmascript file had an error-43a4a9.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from \"./table\"\\n\\nexport function Table() {\\n    console.log(Table)\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Component with Custom Loading in Next.js 9\nDESCRIPTION: Example of using next/dynamic to create a dynamic component with custom loading behavior in Next.js 9.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithCustomLoading = dynamic(\n  () => import('../components/hello2'),\n  {\n    loading: () => <p>Loading</p>,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Test (Pages Router, JavaScript)\nDESCRIPTION: Creates a Cypress component test for the `AboutPage` component from the Pages Router in JavaScript. It mounts the component and asserts that it renders the expected content, including a heading and a link. Requires Cypress to be configured for component testing and the `AboutPage` component to be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport AboutPage from '../../pages/about'\n\ndescribe('<AboutPage />', () => {\n  it('should render and display expected content', () => {\n    // Mount the React component for the About page\n    cy.mount(<AboutPage />)\n\n    // The new page should contain an h1 with \"About page\"\n    cy.get('h1').contains('About')\n\n    // Validate that a link with the expected URL is present\n    // *Following* the link is better suited to an E2E test\n    cy.get('a[href=\"/\"]').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Slate.js example using yarn\nDESCRIPTION: This command utilizes yarn to create a Next.js application named 'with-slate-app', utilizing the 'with-slate' example template. This sets up a project pre-configured with Slate.js for rich text editing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-slate with-slate-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Styletron using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application with the Styletron example.  It initializes a project named 'with-styletron-app' using the 'with-styletron' example template. Requires Node.js and Yarn installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-styletron with-styletron-app\n```\n\n----------------------------------------\n\nTITLE: Module Entrypoints Configuration\nDESCRIPTION: Configuration object defining module exports and evaluation points for the build system\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ModuleEvaluation\": 29,\n    \"Export(\\\"columnGap\\\")\": 16,\n    \"Export(\\\"default\\\")\": 29,\n    \"Export(\\\"gap\\\")\": 13,\n    \"Export(\\\"gridArea\\\")\": 28,\n    \"Export(\\\"gridAutoColumns\\\")\": 30,\n    \"Export(\\\"gridAutoFlow\\\")\": 31,\n    \"Export(\\\"gridAutoRows\\\")\": 32,\n    \"Export(\\\"gridColumn\\\")\": 33,\n    \"Export(\\\"gridRow\\\")\": 34,\n    \"Export(\\\"gridTemplateAreas\\\")\": 35,\n    \"Export(\\\"gridTemplateColumns\\\")\": 36,\n    \"Export(\\\"gridTemplateRows\\\")\": 37,\n    \"Export(\\\"rowGap\\\")\": 19,\n    \"Exports\": 38\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Prismic Example (Yarn)\nDESCRIPTION: This command uses the `create next-app` command with Yarn to bootstrap a new Next.js application using the `cms-prismic` example. It creates a new directory named `cms-prismic-app` for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-prismic cms-prismic-app\n```\n\n----------------------------------------\n\nTITLE: Formatting Dynamic API Accesses in Next.js\nDESCRIPTION: Implements a function to format dynamic API accesses for debugging purposes, filtering and formatting stack traces.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatDynamicAPIAccesses(prerenderState) {\n    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === 'string' && access.stack.length > 0).map(({ expression, stack })=>{\n        stack = stack.split('\\n').slice(4).filter((line)=>{\n            if (line.includes('node_modules/next/')) {\n                return false;\n            }\n            if (line.includes(' (<anonymous>)')) {\n                return false;\n            }\n            if (line.includes(' (node:')) {\n                return false;\n            }\n            return true;\n        }).join('\\n');\n        return `Dynamic API Usage Debug - ${expression}:\\n${stack}`;\n    });\n}\nexport { formatDynamicAPIAccesses };\nexport { formatDynamicAPIAccesses as n } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Using Router Events in Next.js Components\nDESCRIPTION: Example of how to correctly use router events in Next.js 11 components, ensuring they are accessed within useEffect.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const handleRouteChange = (url, { shallow }) => {\n    console.log(\n      `App is changing to ${url} ${\n        shallow ? 'with' : 'without'\n      } shallow routing`\n    )\n  }\n\n  router.events.on('routeChangeStart', handleRouteChange)\n\n  // If the component is unmounted, unsubscribe\n  // from the event with the `off` method:\n  return () => {\n    router.events.off('routeChangeStart', handleRouteChange)\n  }\n}, [router])\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Redux (Yarn)\nDESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a new Next.js application that integrates with Redux. It specifies the `with-redux` example to create a pre-configured application. The new application will be created in a directory named `with-redux-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-redux with-redux-app\n```\n\n----------------------------------------\n\nTITLE: Running next-build-test with project options generation and execution in Rust\nDESCRIPTION: Commands to generate project options for a Next.js project and then run the build test tool. First generates the configuration file pointing to the Next.js project, then executes the build test with the generated configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/next-build-test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- generate /path/to/project > project_options.json\ncargo run -- run\n```\n\n----------------------------------------\n\nTITLE: Client-side Instrumentation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up client-side instrumentation in a Next.js application using JavaScript. It includes examples for performance monitoring using `performance.mark`, logging analytics initialization, and setting up error tracking with `window.addEventListener`.  The code is intended to run before the application's frontend code starts executing and requires no specific exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation-client.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up performance monitoring\nperformance.mark('app-init')\n\n// Initialize analytics\nconsole.log('Analytics initialized')\n\n// Set up error tracking\nwindow.addEventListener('error', (event) => {\n  // Send to your error tracking service\n  reportError(event.error)\n})\n```\n\n----------------------------------------\n\nTITLE: Client-side Instrumentation (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up client-side instrumentation in a Next.js application using TypeScript. It includes examples for performance monitoring using `performance.mark`, logging analytics initialization, and setting up error tracking with `window.addEventListener`.  The code is intended to run before the application's frontend code starts executing and requires no specific exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation-client.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Set up performance monitoring\nperformance.mark('app-init')\n\n// Initialize analytics\nconsole.log('Analytics initialized')\n\n// Set up error tracking\nwindow.addEventListener('error', (event) => {\n  // Send to your error tracking service\n  reportError(event.error)\n})\n```\n\n----------------------------------------\n\nTITLE: Running home app with yarn\nDESCRIPTION: These commands navigate to the `home` directory, install dependencies using yarn, and start the development server. The home app will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd home\nyarn && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with MongoDB Example (Yarn)\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application with the `with-mongodb` example. It sets up a project named `with-mongodb-app` using the provided example template. Yarn must be installed for this command to function correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mongodb with-mongodb-app\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 13 with bun\nDESCRIPTION: Command to upgrade Next.js to version 13 using bun package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: HTML Output of MetadataBase, Alternates, and OpenGraph\nDESCRIPTION: This code snippet shows the HTML output generated from the metadataBase, alternates, and openGraph settings. It includes link tags for canonical and alternate languages, and a meta tag for the Open Graph image.  Note that the relative paths provided are resolved against metadataBase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"canonical\" href=\"https://acme.com\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://acme.com/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://acme.com/de-DE\" />\n<meta property=\"og:image\" content=\"https://acme.com/og-image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Client Component (JSX)\nDESCRIPTION: This code creates a client component in Next.js (JSX) that dynamically imports the main `App` component using `next/dynamic`. The `'use client'` directive marks this as a Client Component, and `ssr: false` disables server-side rendering for the imported `App` component. The `ClientOnly` function then renders the dynamically imported App component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Page Export in Next.js\nDESCRIPTION: Example showing the correct page export after fixing the async params implementation\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport * from '.../some-file'\n```\n\n----------------------------------------\n\nTITLE: Using a Server Action in a Client Component (JavaScript)\nDESCRIPTION: This snippet shows how to import and use a Server Action within a client component in Next.js using JavaScript. The `create` function, which is defined as a Server Action, is imported and called when the button is clicked. This allows client components to trigger server-side logic directly without the need for explicit API calls.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { create } from './actions'\n\nexport function Button() {\n  return <button onClick={() => create()}>Create</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Handler for Redirects in Next.js App Router\nDESCRIPTION: Route Handler implementation for the App Router that processes redirect requests and returns redirect information from a JSON file. Includes error handling for invalid requests and bloom filter false positives.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport function GET(request: NextRequest) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n\n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n\nexport function GET(request) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = redirects[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n\n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Test (App Router, TypeScript)\nDESCRIPTION: Creates a Cypress component test for the `Page` component from the App Router in TypeScript.  It mounts the component and asserts that it renders the expected content, including a heading and a link. Requires Cypress to be configured for component testing and the `Page` component to be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport Page from '../../app/page'\n\ndescribe('<Page />', () => {\n  it('should render and display expected content', () => {\n    // Mount the React component for the Home page\n    cy.mount(<Page />)\n\n    // The new page should contain an h1 with \"Home\"\n    cy.get('h1').contains('Home')\n\n    // Validate that a link with the expected URL is present\n    // Following the link is better suited to an E2E test\n    cy.get('a[href=\"/about\"]').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Metadata (TSX - App Router)\nDESCRIPTION: This TypeScript code snippet shows how to import both the MDX content and its exported metadata in a Next.js application using the App Router.  It then logs the metadata to the console and renders the MDX content within the page.  This approach provides a way to access and utilize data associated with the MDX file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Cookie - TypeScript\nDESCRIPTION: This snippet creates a session cookie using the `next/headers` cookies API. It encrypts the user ID and expiration date into a session token, then sets the 'session' cookie with HttpOnly, Secure, Expires, SameSite, and Path attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport async function createSession(userId: string) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  const session = await encrypt({ userId, expiresAt })\n  const cookieStore = await cookies()\n\n  cookieStore.set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Vitest using Yarn\nDESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Vitest integration using Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-vitest with-vitest-app\n```\n\n----------------------------------------\n\nTITLE: Generating Author API URLs for Sitemap (PHP)\nDESCRIPTION: This function generates an array of author URLs for sitemap generation. It retrieves user data using `get_users` function based on user inputs provided by `wsra_get_user_inputs` function and constructs the author URLs. It then returns array of author URLs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction wsra_generate_author_api()\n{\n  [$args] = wsra_get_user_inputs();\n  $author_urls = array();\n  $authors =  get_users($args);\n  foreach ($authors as $author) {\n    $fullUrl = esc_url(get_author_posts_url($author->ID));\n    $url = str_replace(home_url(), '', $fullUrl);\n    $tempArray = [\n      'url' => $url,\n    ];\n    array_push($author_urls, $tempArray);\n  }\n  return array_merge($author_urls);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Request Headers with Next.js in TypeScript\nDESCRIPTION: This snippet illustrates how to use the `headers` function in a TypeScript-based Next.js application to read HTTP request headers asynchronously. The `headers` function returns a read-only Web Headers object, and the `get` method is used to retrieve specific header values, such as the 'user-agent'. This approach requires no parameters and provides read-only access to headers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/headers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport default async function Page() {\n  const headersList = await headers()\n  const userAgent = headersList.get('user-agent')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Experimental Options in TypeScript\nDESCRIPTION: This snippet shows how to enable the experimental authInterrupts option in a Next.js configuration using TypeScript. It demonstrates importing NextConfig type, setting experimental features, and exporting the configuration. This setup is mandatory to use the unauthorized function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    authInterrupts: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Layout Component (TSX)\nDESCRIPTION: This code initializes the root layout component in a Next.js application using TypeScript. It defines a functional component `RootLayout` that accepts `children` as a prop, which represents the content of the application's pages. The component returns a basic structure with placeholder content. This is the starting point for defining the overall structure of your Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Async Context Usage with cookies in Next.js\nDESCRIPTION: This code demonstrates an incorrect usage of the `cookies` function from `next/headers` within a `setTimeout` callback. Calling `cookies()` inside the `setTimeout` results in it being executed outside the initial async context, causing a DynamicServerError during build time in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/dynamic-server-error.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nasync function getCookieData() {\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      // cookies will be called outside of the async context, causing a build-time error\n      resolve(cookies().getAll())\n    }, 1000)\n  )\n}\n\nexport default async function Page() {\n  const cookieData = await getCookieData()\n  return <div>Hello World</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js in production mode\nDESCRIPTION: This JavaScript code snippet demonstrates how to check the `NODE_ENV` environment variable in `server.js` to determine whether to start Next.js in development or production mode.  It initializes the `dev` variable based on the environment and passes it to the `next()` function. This ensures that Next.js uses the correct configuration for the environment it is running in.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/build-dir-not-writeable.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in Next.js using JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Next.js to ignore ESLint errors during production builds by modifying the next.config.js file. It is useful for developers who already run ESLint in another part of their workflow, such as CI or pre-commit hooks. Enabling the `ignoreDuringBuilds` option prevents ESLint errors from failing the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/eslint.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 0\nDESCRIPTION: This code snippet represents part 0 of a JavaScript module. It includes console logging, variable declarations, and exports variables under different names. The `assert` keyword suggests this is using the module assertions proposal.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello\");\nconst value = externalFunction();\nconst value2 = externalObject.propertyWithGetter;\nconst value3 = externalFunction();\nconst shared = {\n    value,\n    value2,\n    value3\n};\nexport { value as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { value2 as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { value3 as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { shared as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring fetchCache in Next.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to configure the `fetchCache` option in a Next.js layout, page, or route using TypeScript.  The `fetchCache` configuration controls the caching behavior of `fetch` requests within the route segment, allowing developers to choose between automatic caching, forcing caching, or forcing no caching. It overrides the default caching behavior of Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const fetchCache = 'auto'\n// 'auto' | 'default-cache' | 'only-cache'\n// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout in Next.js (Typescript)\nDESCRIPTION: This code defines the root layout component in Next.js using TypeScript. It is a required layout that wraps all routes in the application. It includes the `html` and `body` tags, allowing modification of the initial HTML returned from the server and rendering of nested components through the `children` prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring exportPathMap in next.config.js\nDESCRIPTION: This code snippet shows how to configure the `exportPathMap` function in `next.config.js` to correctly map static routes to Next.js pages, including dynamically routed pages. It highlights the correct way to define a path that matches a dynamically routed page with parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-path-mismatch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  exportPathMap: function () {\n    return {\n      '/': { page: '/' },\n      // '/blog/nextjs': { page: '/blog/[post]/comment/[id]' },        // wrong\n      '/blog/nextjs/comment/1': { page: '/blog/[post]/comment/[id]' }, // correct\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Script Component (App Router, JSX)\nDESCRIPTION: This code snippet demonstrates importing the `Script` component from `next/script` and using it to load an external script in a Next.js application within the `app` directory. It showcases the basic usage of the `Script` component with the required `src` prop, using JSX syntax. The `Dashboard` function is a simple functional component that renders the script.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager on a single route (Pages Router - JSX)\nDESCRIPTION: This code snippet demonstrates how to load the `GoogleTagManager` component on a specific page within a Next.js application using the Pages Router.  It imports the component from `@next/third-parties/google` and sets the `gtmId` prop with the appropriate container ID.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager on a single route (App Router - JSX)\nDESCRIPTION: This code snippet shows how to load the `GoogleTagManager` component on a specific page within a Next.js application using the App Router.  It imports the component from `@next/third-parties/google` and sets the `gtmId` prop with the appropriate container ID.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knex Migrations\nDESCRIPTION: These commands run the latest database migrations using npm, yarn or pnpm. This updates the database schema to the latest version.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run migrate:latest\n# or\nyarn migrate:latest\n# or\npnpm migrate:latest\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary getInitialProps from Custom App\nDESCRIPTION: Example of a custom App component with unnecessary getInitialProps that can be removed when upgrading to Next.js 9.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyApp extends App {\n  // Remove me, I do nothing!\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  render() {\n    // ... etc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with MongoDB Example (pnpm)\nDESCRIPTION: This command employs pnpm to generate a new Next.js application using the `with-mongodb` example. It creates a project named `with-mongodb-app` based on the given template. Make sure pnpm is installed before executing this command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mongodb with-mongodb-app\n```\n\n----------------------------------------\n\nTITLE: Development Module Parts\nDESCRIPTION: Generated development code split into multiple parts showing how the export is processed with Turbopack-specific assertions and variable renaming\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/export-named/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as __TURBOPACK__reexport__cat__ } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nimport \"./lib\";\nexport { __TURBOPACK__reexport__cat__ as fakeCat };\nexport { };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { cat as __TURBOPACK__reexport__cat__ } from \"./lib\";\nexport { __TURBOPACK__reexport__cat__ as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { fakeCat } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export fakeCat\"\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with NPM\nDESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application using the create-next-app command with npm. It sets up the app with the Docker Compose example provided.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-docker-compose with-docker-compose-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with particles example (Yarn)\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application using the 'with-particles' example. It initializes a project named 'with-particles-app' with the pre-configured particle animation setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-particles with-particles-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Slate.js example using pnpm\nDESCRIPTION: This command uses pnpm to generate a Next.js application called 'with-slate-app' based on the 'with-slate' example. The application will come pre-configured with Slate.js dependencies and setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-slate with-slate-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app using yarn\nDESCRIPTION: This command utilizes yarn to generate a new Next.js application, incorporating the `with-mqtt-js` example. It creates a project named `with-mqtt-js-app` pre-configured for MQTT functionality and all required dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mqtt-js with-mqtt-js-app\n```\n\n----------------------------------------\n\nTITLE: Combined Exports for TurboPack Core Utilities\nDESCRIPTION: Exports both the IPC module and structured error utility from their respective modules. This provides a consolidated entry point for the core utilities used throughout TurboPack's JavaScript runtime.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport { IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export IPC\"\n};\nexport { structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export structuredError\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with NextUI using Yarn\nDESCRIPTION: This command uses the Yarn package manager to create a new Next.js application pre-configured to use NextUI. It utilizes the `create-next-app` tool with the `with-next-ui` example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-next-ui with-next-ui-app\n```\n\n----------------------------------------\n\nTITLE: Installing CSP Example with NPX\nDESCRIPTION: Creates a new Next.js application with strict CSP implementation using npx create-next-app command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-strict-csp with-strict-csp-app\n```\n\n----------------------------------------\n\nTITLE: Creating API Route for Form Submission - JavaScript\nDESCRIPTION: This code snippet demonstrates creating an API route in Next.js using JavaScript to handle form submissions. It retrieves data from the request body and sends a response containing the received data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const data = req.body\n  // call your database, etc.\n  // const id = await createItem(data)\n  // ...\n  res.status(200).json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Tracer Implementation\nDESCRIPTION: Implements the main tracing functionality for Next.js including span creation, context management, and trace propagation. Includes utility functions for handling promises and managing root span attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as context } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\n// ... [rest of imports]\nclass NextTracerImpl {\n    // ... [full implementation]\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\n// ... [exports]\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 11 Implementation\nDESCRIPTION: Imports 'foobar' and Part 7, then exports 'foobar'. This part demonstrates how Turbopack handles re-exports of imported variables after potential modifications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nexport { foobar };\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Programmatically Generated Icon\nDESCRIPTION: Shows the HTML head output generated by Next.js when using a programmatically generated icon. The link element includes the appropriate type and size attributes based on the icon's metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"/icon?<generated>\" type=\"image/png\" sizes=\"32x32\" />\n```\n\n----------------------------------------\n\nTITLE: Preloading Resources with ReactDOM in React Client Component (JSX)\nDESCRIPTION: This code snippet demonstrates using ReactDOM to preload, preconnect, and prefetch DNS resources in a React client component using JSX syntax. Similar to the TSX example, it imports ReactDOM and utilizes the preload, preconnect, and prefetchDNS functions to optimize resource loading. This approach is suitable for JavaScript projects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_69\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport ReactDOM from 'react-dom'\n\nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying root directory for ESLint Plugin in Monorepo (MJS)\nDESCRIPTION: This code snippet shows how to configure `eslint-plugin-next` in a monorepo where Next.js is not installed in the root directory. It utilizes the `settings.next.rootDir` property in the `.eslintrc` to tell the plugin where to find the Next.js application.  Dependencies include `@eslint/eslintrc`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat({\n  // import.meta.dirname is available after Node.js v20.11.0\n  baseDirectory: import.meta.dirname,\n})\n\nconst eslintConfig = [\n  ...compat.config({\n    extends: ['next'],\n    settings: {\n      next: {\n        rootDir: 'packages/my-app/',\n      },\n    },\n  }),\n]\n\nexport default eslintConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Export in Next.js\nDESCRIPTION: This code snippet shows how to configure a Next.js application for static export by setting the `output` property to `'export'` in the `next.config.js` file. It also demonstrates optional configurations such as `trailingSlash`, `skipTrailingSlashRedirect`, and `distDir`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n\n  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`\n  // trailingSlash: true,\n\n  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`\n  // skipTrailingSlashRedirect: true,\n\n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: 'dist',\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Installing XState Inspect\nDESCRIPTION: This command installs the @xstate/inspect package, which provides debugging and visualization tools for XState. It's installed using pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-wordpress cms-wordpress-app\n```\n\n----------------------------------------\n\nTITLE: React Component Transition from Synchronous to Asynchronous using JavaScript\nDESCRIPTION: This snippet illustrates how a React component in JavaScript transitions from synchronous data handling to using React's `use` function for asynchronous data fetching. The component fetches params and searchParams asynchronously to streamline state management and rendering flows.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\\nexport default function Page({ params, searchParams }) {\\n  const { slug } = params\\n  const { query } = searchParams\\n}\\n\\n// After\\nimport { use } from \\\"react\\\"\\n\\nexport default function Page(props) {\\n  const params = use(props.params)\\n  const searchParams = use(props.searchParams)\\n  const slug = params.slug\\n  const query = searchParams.query\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entrypoint Page (JSX)\nDESCRIPTION: This code creates the entrypoint page for a Next.js application as a Single Page Application (SPA) using JavaScript (JSX). It imports global CSS, defines `generateStaticParams` to generate only the index route (`/`), and creates a functional component `Page` that initially returns placeholder content. This component will serve as the entry point for the entire application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with AMP Example (npm)\nDESCRIPTION: Uses npx to create a new Next.js application based on the AMP example. This command bootstraps the project with the necessary files and configurations for AMP support, utilizing the 'amp' example template and naming the new application 'amp-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example amp amp-app\n```\n\n----------------------------------------\n\nTITLE: Starting Temporal Server with Docker Compose\nDESCRIPTION: Command to start the Temporal Server using Docker Compose.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with WindiCSS Example (yarn)\nDESCRIPTION: This command uses yarn to create a new Next.js application with the WindiCSS example. It initializes a project named 'with-windicss-app' based on the 'with-windicss' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-windicss with-windicss-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Facebook Pixel Example (Yarn)\nDESCRIPTION: This command initializes a new Next.js application using the `with-facebook-pixel` example from the Next.js repository. It utilizes `create-next-app` via `yarn` to bootstrap the project. The resulting application, `with-facebook-pixel-app`, includes the necessary configuration for Facebook Pixel integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-facebook-pixel with-facebook-pixel-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Orbit-components using npm\nDESCRIPTION: This command uses npm to create a new Next.js application bootstrapped with the Orbit-components example. It utilizes the create-next-app tool to set up the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-orbit-components with-orbit-components-app\n```\n\n----------------------------------------\n\nTITLE: Copying the .env.local Example\nDESCRIPTION: This command copies the contents of the `.env.local.example` file to a new file named `.env.local`. This is a necessary step for configuring the Firebase environment variables for the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Installing Turso CLI\nDESCRIPTION: Commands to install Turso CLI on different operating systems (macOS, Linux, Windows). Turso CLI is required for database management activities such as creating databases and authentication tokens.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install tursodatabase/tap/turso\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://get.tur.so/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Integrating Prettier with ESLint (mjs)\nDESCRIPTION: This snippet shows how to integrate Prettier with ESLint by extending the 'prettier' configuration in your `.eslintrc.mjs` file.  It extends both `next` and `prettier` configurations, using `FlatCompat`. This ensures ESLint and Prettier work together without conflicting formatting rules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_8\n\nLANGUAGE: mjs\nCODE:\n```\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat({\n  // import.meta.dirname is available after Node.js v20.11.0\n  baseDirectory: import.meta.dirname,\n})\n\nconst eslintConfig = [\n  ...compat.config({\n    extends: ['next', 'prettier'],\n  }),\n]\n\nexport default eslintConfig\n```\n\n----------------------------------------\n\nTITLE: Client-side navigation with `useRouter` hook in Next.js (Pages Router)\nDESCRIPTION: This code snippet demonstrates how to use the `useRouter` hook from `next/router` in a component to navigate to a different route. It imports `useRouter`, initializes it, and uses the `push` method to navigate to `/dashboard` when a button is clicked. This example is for the Pages Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MDX Components with useMDXComponents in TypeScript\nDESCRIPTION: This code snippet defines a function `useMDXComponents` that accepts an object of MDX components and returns a new object with the provided components merged with the existing ones.  It uses TypeScript to define the type of the components parameter as MDXComponents from the 'mdx/types' library. The function is exported for use in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating dotCMS API Token with curl\nDESCRIPTION: This code snippet demonstrates how to generate an API token for dotCMS using a curl command. The command sends a POST request to the dotCMS authentication endpoint with user credentials and an expiration period. The server responds with a JSON object containing the generated token.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type:application/json\" --insecure  -X POST -d  '\\n{ \"user\":\"admin@dotcms.com\", \"password\":\"admin\", \"expirationDays\": 10 }\\n' http://demo.dotcms.com:8080/api/v1/authentication/api-token\n```\n\n----------------------------------------\n\nTITLE: Merged Module Evaluation in JavaScript with Turbopack\nDESCRIPTION: This code shows how Turbopack merges module evaluations, importing parts with special Turbopack assertions and handling variable modifications. It imports a variable foobarCopy and other modules, logs the variable value, and exports nothing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nimport \"other\";\nconsole.log(foobarCopy);\nfoobarCopy += \"Unused\";\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Metadata for Next.js Blog Post\nDESCRIPTION: This snippet shows the front matter metadata section for a Next.js blog post. It includes fields for title, excerpt, cover image, date, author details, and Open Graph image URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/_posts/hello-world.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Learn How to Pre-render Pages Using Static Generation with Next.js\"\nexcerpt: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus.\"\ncoverImage: \"/assets/blog/hello-world/cover.jpg\"\ndate: \"2020-03-16T05:35:07.322Z\"\nauthor:\n  name: Tim Neutkens\n  picture: \"/assets/blog/authors/tim.jpeg\"\nogImage:\n  url: \"/assets/blog/hello-world/cover.jpg\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Data Fetching in Layout Components\nDESCRIPTION: A layout component that fetches data on the client-side using the SWR library. It loads navigation data and displays loading/error states while handling the data fetch, then renders the appropriate UI with the fetched data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\nimport Navbar from './navbar'\nimport Footer from './footer'\n\nexport default function Layout({ children }) {\n  const { data, error } = useSWR('/api/navigation', fetcher)\n\n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <>\n      <Navbar links={data.links} />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding External Video with <iframe> Tag - JSX\nDESCRIPTION: This snippet shows how to embed a video from an external platform like YouTube using the `<iframe>` tag within a Next.js page. It includes the `src` attribute for the video URL and the `allowFullScreen` attribute to enable fullscreen playback. The example showcases JSX syntax commonly used in React and Next.js components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <iframe src=\"https://www.youtube.com/embed/19g66ezsKAg\" allowFullScreen />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Font Definitions File in Next.js\nDESCRIPTION: A centralized file for font definitions that can be imported throughout the application. This approach ensures fonts are loaded only once and can be reused in multiple components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n\n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n\nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n\n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n\nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n```\n\n----------------------------------------\n\nTITLE: Hoisting and Exporting getStaticProps\nDESCRIPTION: Imports helpers and userland modules, then hoists and exports the getStaticProps function. This snippet demonstrates how Next.js data fetching methods are integrated into the TurboPack system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { hoist } from './helpers';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 12\n};\nconst getStaticProps = hoist(userland, 'getStaticProps');\nexport { getStaticProps as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Postponed Abort Signal in Next.js\nDESCRIPTION: Implements a function to create an AbortSignal that is triggered when React.unstable_postpone is called, used for handling postponed rendering scenarios.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport { l as assertPostpone } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nfunction createPostponedAbortSignal(reason) {\n    assertPostpone();\n    const controller = new AbortController();\n    try {\n        React.unstable_postpone(reason);\n    } catch (x) {\n        controller.abort(x);\n    }\n    return controller.signal;\n}\nexport { createPostponedAbortSignal };\nexport { createPostponedAbortSignal as o } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering an Image with JSX\nDESCRIPTION: This snippet demonstrates how to render an image with specific attributes using JSX within a Next.js project. Key attributes include width, height, layout, source, alt text, and CSS class. No external dependencies are specified beyond JSX support.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\n<Image\n  width={33}\n  height={32}\n  layout=\"fixed\"\n  src={Tutorials}\n  alt=\"A book\"\n  className=\"sb-explore-image\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Development Module Part 2\nDESCRIPTION: Re-exports 'DOG' and 'cat' from Turbopack parts with assertions\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport { DOG } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export DOG\"\n};\nexport { cat } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export cat\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using unstable_cache in Next.js\nDESCRIPTION: This snippet demonstrates how to use `unstable_cache` to cache the result of an asynchronous function `getUser`. It imports `unstable_cache` from `next/cache` and defines a `getCachedUser` function that caches the result of `getUser` based on the user ID. The cached user data is then used within a component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUser } from './data';\nimport { unstable_cache } from 'next/cache';\n\nconst getCachedUser = unstable_cache(\n  async (id) => getUser(id),\n  ['my-app-user']\n);\n\nexport default async function Component({ userID }) {\n  const user = await getCachedUser(userID);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Header Overriding in Next.js\nDESCRIPTION: This snippet illustrates header overriding behavior when multiple headers match the same path and set the same header key. The last header definition takes precedence. In this example, the header `x-hello` will be set to `world` for the `/hello` path, overriding the earlier definition.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'there',\n          },\n        ],\n      },\n      {\n        source: '/hello',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Add Google Analytics to a Single Page (JSX)\nDESCRIPTION: This code snippet demonstrates how to add Google Analytics to a specific page in a Next.js application using the `@next/third-parties/google` library and JSX. The `GoogleAnalytics` component is imported and included within the `Page` component, with the Google Analytics measurement ID (`gaId`) passed as a prop. This makes Google Analytics track only the specific page where the component is added.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Vitest Unit Test (JavaScript)\nDESCRIPTION: This JavaScript snippet creates a Vitest unit test for the `Page` component. It imports `expect` and `test` from Vitest, and `render` and `screen` from `@testing-library/react`. It renders the `Page` component and asserts that a heading with level 1 and name 'Home' exists.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n----------------------------------------\n\nTITLE: Encrypting Session Data (Jose Library) - JavaScript\nDESCRIPTION: This snippet encrypts session data using the Jose library. It imports necessary modules from 'jose' and 'server-only'. It defines a secret key from the environment variable, encodes it and uses it to sign the payload with a JWT.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\nimport { SignJWT, jwtVerify } from 'jose'\n\nconst secretKey = process.env.SESSION_SECRET\nconst encodedKey = new TextEncoder().encode(secretKey)\n\nexport async function encrypt(payload) {\n  return new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled JSX Registry - JavaScript\nDESCRIPTION: This snippet defines a React component in JavaScript for setting up a styled-jsx registry similar to the TypeScript version. It ensures the styles get correctly injected into the server-rendered HTML.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with npm/yarn/pnpm/bun\nDESCRIPTION: This snippet provides commands to start the development server for a Next.js project using different package managers like npm, yarn, pnpm, or bun. It is essential to have one of these package managers installed as a prerequisite. The commands do not require additional parameters and will launch the server on http://localhost:3000 by default.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Static Export\nDESCRIPTION: This Nginx configuration demonstrates how to serve a Next.js static export from the `/out` directory. It includes rewrites for handling requests to different routes and sets up an error page for 404 errors.  It assumes `trailingSlash: false`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_15\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  server_name acme.com;\n\n  root /var/www/out;\n\n  location / {\n      try_files $uri $uri.html $uri/ =404;\n  }\n\n  # This is necessary when `trailingSlash: false`.\n  # You can omit this when `trailingSlash: true`.\n  location /blog/ {\n      rewrite ^/blog/(.*)$ /blog/$1.html break;\n  }\n\n  error_page 404 /404.html;\n  location = /404.html {\n      internal;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS - TSX\nDESCRIPTION: This code imports a global CSS file (`../index.css`) into the `app/layout.tsx` file. This allows the CSS styles defined in `index.css` to be applied globally to the application. The Metadata API is used to define the page title and description.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../index.css'\n\nexport const metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: getServerSideProps with notFound return - JavaScript\nDESCRIPTION: This code shows how to return a `404` status using the `notFound` property within `getServerSideProps`. If the data fetch fails (e.g., the API returns an error or no data), the `notFound` property is set to `true`, causing Next.js to render the custom 404 page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Active Nav Links - JavaScript\nDESCRIPTION: This snippet defines a similar React component to the TypeScript version but is written in JavaScript. It also uses the usePathname() hook to check the current URL path and highlight the active link correspondingly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`} \nhref=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending Jest with custom matchers (TypeScript)\nDESCRIPTION: This TypeScript snippet configures Jest to use custom matchers from `@testing-library/jest-dom`. It specifies a setup file (`jest.setup.ts`) that will be run before each test, allowing you to use custom matchers like `.toBeInTheDocument()` in your tests. This improves test readability and makes it easier to assert specific conditions on DOM elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetupFilesAfterEnv: ['<rootDir>/jest.setup.ts']\n```\n\n----------------------------------------\n\nTITLE: getServerSideProps with redirect return - JavaScript\nDESCRIPTION: This example demonstrates how to redirect a user from within `getServerSideProps` using the `redirect` property. If the data fetch fails, the user is redirected to the specified `destination`.  The `permanent` property controls whether the redirect is permanent (308) or temporary (307).\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n  }\n\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Open Graph Image with TypeScript\nDESCRIPTION: Creates a dynamic Open Graph image for a blog post using ImageResponse in TypeScript, dynamically rendering the post title with configurable styling\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { getPost } from '@/app/lib/data'\n\n// Image metadata\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Module Entrypoints Configuration for TurboPack\nDESCRIPTION: A JSON-like configuration defining the module's entrypoints, exports, and evaluation order. This configuration maps exported functionality for the grid system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ModuleEvaluation: 29,\n    Export(\n        \"columnGap\",\n    ): 16,\n    Export(\n        \"default\",\n    ): 29,\n    Export(\n        \"gap\",\n    ): 13,\n    Export(\n        \"gridArea\",\n    ): 28,\n    Export(\n        \"gridAutoColumns\",\n    ): 30,\n    Export(\n        \"gridAutoFlow\",\n    ): 31,\n    Export(\n        \"gridAutoRows\",\n    ): 32,\n    Export(\n        \"gridColumn\",\n    ): 33,\n    Export(\n        \"gridRow\",\n    ): 34,\n    Export(\n        \"gridTemplateAreas\",\n    ): 35,\n    Export(\n        \"gridTemplateColumns\",\n    ): 36,\n    Export(\n        \"gridTemplateRows\",\n    ): 37,\n    Export(\n        \"rowGap\",\n    ): 19,\n    Exports: 38,\n}\n```\n\n----------------------------------------\n\nTITLE: Alternates Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the alternates metadata configuration. It includes `<link>` tags for the canonical URL and alternate URLs with hreflang, media, and type attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"canonical\" href=\"https://nextjs.org\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://nextjs.org/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://nextjs.org/de-DE\" />\n<link\n  rel=\"alternate\"\n  media=\"only screen and (max-width: 600px)\"\n  href=\"https://nextjs.org/mobile\"\n/>\n<link\n  rel=\"alternate\"\n  type=\"application/rss+xml\"\n  href=\"https://nextjs.org/rss\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TurboPack Entrypoints Configuration\nDESCRIPTION: Configuration of TurboPack entrypoints for Next.js page modules. This code defines a mapping of export names to their corresponding module part numbers for the TurboPack bundler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ModuleEvaluation: 23,\n    Export(\n        \"config\",\n    ): 25,\n    Export(\n        \"default\",\n    ): 24,\n    Export(\n        \"getServerSideProps\",\n    ): 26,\n    Export(\n        \"getStaticPaths\",\n    ): 27,\n    Export(\n        \"getStaticProps\",\n    ): 28,\n    Export(\n        \"reportWebVitals\",\n    ): 29,\n    Export(\n        \"routeModule\",\n    ): 23,\n    Export(\n        \"unstable_getServerProps\",\n    ): 30,\n    Export(\n        \"unstable_getServerSideProps\",\n    ): 31,\n    Export(\n        \"unstable_getStaticParams\",\n    ): 32,\n    Export(\n        \"unstable_getStaticPaths\",\n    ): 33,\n    Export(\n        \"unstable_getStaticProps\",\n    ): 34,\n    Exports: 35,\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Various Pet Variables in JavaScript\nDESCRIPTION: This snippet exports multiple variables including `dogRef`, `initialCat`, `getChimera`, and `cat` from the module. It illustrates how to consolidate exports for multiple variables in one statement.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport { dogRef } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: \"export dogRef\"};\\nexport { initialCat } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: \"export initialCat\"};\\nexport { getChimera } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: \"export getChimera\"};\\nexport { cat } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: \"export cat\"};\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Bug Report Template with PNPM\nDESCRIPTION: Command to create a new Next.js bug report template project using PNPM package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example reproduction-template-pages reproduction-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Component with Head Configuration in JSX\nDESCRIPTION: This code snippet demonstrates how to create a Nextra component in a Next.js application. It includes head configurations for RSS feed link and font preloading, then renders the passed component with its props.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Nextra({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link\n          rel=\"alternate\"\n          type=\"application/rss+xml\"\n          title=\"RSS\"\n          href=\"/feed.xml\"\n        />\n        <link\n          rel=\"preload\"\n          href=\"/fonts/Inter-roman.latin.var.woff2\"\n          as=\"font\"\n          type=\"font/woff2\"\n          crossOrigin=\"anonymous\"\n        />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared MDX Layout (TSX - App Router)\nDESCRIPTION: This TypeScript code defines a shared layout for MDX pages within a Next.js application using the App Router. The `MdxLayout` component accepts `children` as a prop and renders them within a `div` with a specific style. This layout will be applied to all MDX pages within the same directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Icons Metadata HTML Output\nDESCRIPTION: This code shows the HTML output for multiple icons metadata, including specifying sizes, types, and media queries. It displays the output for main icons, shortcut icons, and Apple touch icons with their corresponding attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"icon\" href=\"https://example.com/icon.png\" />\n<link rel=\"icon\" href=\"/icon-dark.png\" media=\"(prefers-color-scheme: dark)\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon-x3.png\"\n  sizes=\"180x180\"\n  type=\"image/png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Convex Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application using the Convex example. It sets up the project with Convex configurations. It requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example convex convex-app\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React Packages using bun\nDESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using bun. It provides an alternative way to update dependencies using the bun package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Exporting Function c1_1 and Calling c1_2 in JavaScript\nDESCRIPTION: This snippet defines and exports the function `c1_1`. It calls another function `c1_2`, demonstrating a functional dependency. The export statement is optimized via TurboPack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function c1_1() {\n    return c1_2();\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting RouteKind with TurboPack Integration in JavaScript (PROD)\nDESCRIPTION: Similar to the development variant, this snippet focuses on the production phase setup using TurboPack. RouteKind is exported with assertions for build optimization, showing how production builds of JavaScript modules manage exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar RouteKind;\n(function(RouteKind) {\n    RouteKind[\"PAGES\"] = \"PAGES\";\n    RouteKind[\"PAGES_API\"] = \"PAGES_API\";\n    RouteKind[\"APP_PAGE\"] = \"APP_PAGE\";\n    RouteKind[\"APP_ROUTE\"] = \"APP_ROUTE\"];\n})(RouteKind || (RouteKind = {}));\nexport { RouteKind };\nexport { RouteKind as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Flow (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application with Flow, using the 'with-flow' example. It requires Yarn to be installed. The new application will be created in a directory named 'with-flow-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-flow with-flow-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a Next.js application using the `with-cypress` example. It initializes a new project named `with-cypress-app` in the current directory. It requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-cypress with-cypress-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with FingerprintJS Pro Example (pnpm)\nDESCRIPTION: This command uses `create-next-app` with pnpm to generate a new Next.js project pre-configured with the FingerprintJS Pro example. It requires pnpm to be installed. The project will be created in a directory named `with-fingerprintjs-pro-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app\n```\n\n----------------------------------------\n\nTITLE: Empty Exports Section in JavaScript\nDESCRIPTION: An empty export statement, likely included for structural or architectural reasons in the module setup. It does not perform any actual functionality but might serve as a placeholder or a format requirement.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-mocha-app' based on the 'with-mocha' example. It initializes a project with pre-configured Mocha testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mocha with-mocha-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-portals example. It specifies the example and the application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-portals with-portals-app\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration with Plugins\nDESCRIPTION: This code snippet demonstrates the recommended structure for a PostCSS configuration file in a Next.js project. It includes examples of using plugins with and without configuration options, as well as enabling or disabling plugins based on the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // A plugin that does not require configuration:\n    'simple-plugin-example',\n\n    // A plugin which needs a configuration object:\n    [\n      'plugin-with-configuration',\n      {\n        optionA: '...',\n      },\n    ],\n\n    // A plugin that is toggled on or off based on environment:\n    [\n      'plugin-toggled',\n      process.env.NODE_ENV === 'production'\n        ? {\n            optionA: '...',\n          }\n        : false,\n    ],\n\n    // Boolean expressions are also valid.\n    // `true` enables the plugin, `false` disables the plugin:\n    ['plugin-toggled-2', true /* a === b, etc */],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Config (Unoptimized)\nDESCRIPTION: This configuration shows how to globally disable image optimization for all images in the Next.js application by setting the `unoptimized` property to true in the `next.config.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-passport-and-next-connect example. It bootstraps the project with the necessary files and configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-passport-and-next-connect with-passport-and-next-connect-app\n```\n\n----------------------------------------\n\nTITLE: Incorrect PostCSS Configuration (missing config)\nDESCRIPTION: This code snippet highlights an incorrect PostCSS configuration where a plugin configuration is missing for an entry within the `plugins` array.  The corrected example demonstrates the removal of the wrapping array to properly configure the plugin.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\n      'postcss-plugin-1',\n      {\n        optionA: '...',\n      },\n    ],\n    // This single-entry array is detected as misconfigured because it's\n    // missing the second element. To fix, unwrap the value.\n    ['postcss-plugin-2'],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Granular Streaming with Suspense (Next.js)\nDESCRIPTION: This snippet demonstrates how to implement granular streaming in a Next.js page using React's Suspense component. It immediately renders static content while streaming in dynamic content wrapped in a Suspense boundary.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport BlogList from '@/components/BlogList'\nimport BlogListSkeleton from '@/components/BlogListSkeleton'\n\nexport default function BlogPage() {\n  return (\n    <div>\n      {/* This content will be sent to the client immediately */}\n      <header>\n        <h1>Welcome to the Blog</h1>\n        <p>Read the latest posts below.</p>\n      </header>\n      <main>\n        {/* Any content wrapped in a <Suspense> boundary will be streamed */}\n        <Suspense fallback={<BlogListSkeleton />}>\n          <BlogList />\n        </Suspense>\n      </main>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport BlogList from '@/components/BlogList'\nimport BlogListSkeleton from '@/components/BlogListSkeleton'\n\nexport default function BlogPage() {\n  return (\n    <div>\n      {/* This content will be sent to the client immediately */}\n      <header>\n        <h1>Welcome to the Blog</h1>\n        <p>Read the latest posts below.</p>\n      </header>\n      <main>\n        {/* Any content wrapped in a <Suspense> boundary will be streamed */}\n        <Suspense fallback={<BlogListSkeleton />}>\n          <BlogList />\n        </Suspense>\n      </main>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating static params in Next.js (JavaScript)\nDESCRIPTION: This code snippet shows how to use the generateStaticParams function to pre-render dynamic routes at build time in Next.js using JavaScript. It fetches a list of posts and returns an array of objects, where each object contains the slug for a dynamic route segment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component Loader Wrapper Implementation\nDESCRIPTION: Wraps client component loader with performance tracking. Measures load times and counts component loads using the Performance API. Only activates if performance API is available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function wrapClientComponentLoader(ComponentMod) {\n    if (!('performance' in globalThis)) {\n        return ComponentMod.__next_app__;\n    }\n    return {\n        require: (...args)=>{\n            if (clientComponentLoadStart === 0) {\n                clientComponentLoadStart = performance.now();\n            }\n            const startTime = performance.now();\n            try {\n                clientComponentLoadCount += 1;\n                return ComponentMod.__next_app__.require(...args);\n            } finally{\n                clientComponentLoadTimes += performance.now() - startTime;\n            }\n        },\n        loadChunk: (...args)=>{\n            const startTime = performance.now();\n            try {\n                clientComponentLoadCount += 1;\n                return ComponentMod.__next_app__.loadChunk(...args);\n            } finally{\n                clientComponentLoadTimes += performance.now() - startTime;\n            }\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: XML Output for Video Sitemap\nDESCRIPTION: The XML output generated for a video sitemap, showing how the videos property is transformed into the Google schema format for video sitemaps with appropriate XML namespaces.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\n  xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"\n>\n  <url>\n    <loc>https://example.com</loc>\n    <video:video>\n      <video:title>example</video:title>\n      <video:thumbnail_loc>https://example.com/image.jpg</video:thumbnail_loc>\n      <video:description>this is the description</video:description>\n    </video:video>\n    <lastmod>2021-01-01</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Typed GraphQL Query in React\nDESCRIPTION: This code snippet demonstrates how to fetch data using a typed GraphQL query in a React component using Apollo Client. It imports the `useQuery` hook from `@apollo/client` and a generated TypeScript type for the GraphQL query. The fetched data is then used to render content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from \"@apollo/client\";\nimport { ViewerDocument } from \"lib/graphql-operations\";\n\nconst News = () => {\n  // Typed already️⚡️\n  const {\n    data: { viewer },\n  } = useQuery(ViewerDocument);\n\n  return <div>{viewer.name}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Force SWC Transforms in Next.js\nDESCRIPTION: This code snippet demonstrates how to force Next.js to use SWC for compiling JavaScript/TypeScript, even when a `.babelrc` file is present.  This is achieved by setting the `forceSwcTransforms` option to `true` within the `experimental` section of the `next.config.js` file.  This can potentially improve build performance by leveraging SWC's speed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/swc-disabled.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    forceSwcTransforms: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Styling a Next.js Component\nDESCRIPTION: This snippet shows how to define a basic React component in Next.js alongside its unique styling, using template literals to keep CSS encapsulated. The use of 'data-nextjs-' attributes is recommended for targeting elements within the dev overlay.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/react-dev-overlay/README.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div className=\"some-unique-class-name\">\n      <h1>Hello, Next.js!</h1>\n    </div>\n  )\n}\n\nexport const COMPONENT_NAME_STYLES = `\n  .some-unique-class-name {\n    background-color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with SWR in Client Component (Next.js)\nDESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Client Component using the SWR library. It retrieves blog posts from an API and handles loading and error states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\n\nconst fetcher = (url) => fetch(url).then((r) => r.json())\n\nexport default function BlogPage() {\n  const { data, error, isLoading } = useSWR(\n    'https://api.vercel.app/blog',\n    fetcher\n  )\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n\n  return (\n    <ul>\n      {data.map((post: { id: string; title: string }) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\n\nconst fetcher = (url) => fetch(url).then((r) => r.json())\n\nexport default function BlogPage() {\n  const { data, error, isLoading } = useSWR(\n    'https://api.vercel.app/blog',\n    fetcher\n  )\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n\n  return (\n    <ul>\n      {data.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Preconnect for Google Fonts in Next.js (JSX)\nDESCRIPTION: This snippet demonstrates how to add a preconnect hint to the Google Fonts domain in a Next.js application by modifying the _document.js file to include a link with rel='preconnect'. Make sure Next.js version is 12.0.1 or higher as it adds preconnect automatically. This helps in establishing an early connection, reducing latency on font requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-font-preconnect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n```\n\n----------------------------------------\n\nTITLE: Copy Environment Variables File\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store environment-specific variables, such as API keys, and is typically excluded from version control. This allows developers to configure their local development environments without affecting the main project codebase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths for Dynamic Routes in Next.js\nDESCRIPTION: Example showing how to use getStaticPaths to pre-render dynamic routes based on external data. This function specifies which paths with dynamic parameters should be pre-rendered at build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Path Matching in Next.js Headers\nDESCRIPTION: This snippet shows how to use regular expressions for path matching in Next.js header configurations. By wrapping the regex in parenthesis after a parameter (e.g., `/:post(\\d{1,})`), you can define more specific matching criteria.  The captured group is accessible as a parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:post(\\d{1,})',\n        headers: [\n          {\n            key: 'x-post',\n            value: ':post',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Limited Bots in next.config.ts\nDESCRIPTION: This snippet shows how to configure the `htmlLimitedBots` option in `next.config.ts` to customize which user agents receive blocking metadata.  It defines a regex string that matches specific bot user agents.  This allows for fine-grained control over streaming metadata behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_76\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst config: NextConfig = {\n  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Open Graph Image with JavaScript\nDESCRIPTION: Creates a dynamic Open Graph image for a blog post using ImageResponse in JavaScript, dynamically rendering the post title with configurable styling\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { getPost } from '@/app/lib/data'\n\n// Image metadata\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image({ params }) {\n  const post = await getPost(params.slug)\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 12 Implementation\nDESCRIPTION: Aggregates exports from other parts using Turbopack's specific part references. This module serves as a central export collection point, re-exporting 'external1', 'foo', 'external2', and 'foobar'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nexport { external1 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external1\"\n};\nexport { foo } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foo\"\n};\nexport { external2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external2\"\n};\nexport { foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foobar\"\n};\n```\n\n----------------------------------------\n\nTITLE: Full Compaction Example - Final SST Layout\nDESCRIPTION: The resulting layout after compaction operations, showing merged and reorganized SST files with new sequence numbers and deletion records.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nkey hash range: | 0    ...    u64::MAX | Family\nSST 1:             |-|                   1\nSST 10:            |-----|               1\nSST 12:                  |-----|         1\nSST 11:            |------|              2\nSST 14:                        |-------| 1\nSST 13:                   |-----|        2\nSST 15:                   |-------|      1\nSST 16:                    |--------|    2\nDEL 17:  (2, 3, 4, 5, 6, 7, 8, 9)\nCURRENT: 17\n```\n\n----------------------------------------\n\nTITLE: Using URL Objects with useRouter.push (JSX)\nDESCRIPTION: This snippet demonstrates using a URL object with router.push to navigate to a dynamic route.  The pathname and query parameters are specified within the object. This approach is useful for constructing complex URLs programmatically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function ReadMore({ post }) {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        router.push({\n          pathname: '/post/[pid]',\n          query: { pid: post.id },\n        })\n      }}\n    >\n      Click here to read more\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Utility Function (App Router)\nDESCRIPTION: This code snippet demonstrates how to import and apply a font defined in a utility function to the root layout in a Next.js application using the app router. It imports the `inter` font and assigns its `className` to the `html` element for global application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { inter } from './fonts'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Route for Form Submission - TypeScript\nDESCRIPTION: This code snippet demonstrates creating an API route in Next.js using TypeScript to handle form submissions. It retrieves data from the request body, calls a function (createItem) to process the data, and sends a response with the created item's ID.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const data = req.body\n  const id = await createItem(data)\n  res.status(200).json({ id })\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Web Vitals with useReportWebVitals (Pages Router)\nDESCRIPTION: This code snippet shows how to use the `useReportWebVitals` hook within the Pages Router in Next.js to report web vitals. It imports the hook and logs each metric to the console when it's available. The code is placed in `_app.js`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting crossOrigin in next.config.js (JavaScript)\nDESCRIPTION: This code snippet shows how to configure the `crossOrigin` option in the `next.config.js` file. Setting this option adds the `crossOrigin` attribute to all `<script>` tags generated by Next.js, controlling how cross-origin requests are handled. The possible values are `'anonymous'` and `'use-credentials'`. Requires Node.js environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/crossOrigin.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration Testing Example\nDESCRIPTION: Shows how to unit test Next.js configuration using the experimental testing utilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  getRedirectUrl,\n  unstable_getResponseFromNextConfig,\n} from 'next/experimental/testing/server'\n\nconst response = await unstable_getResponseFromNextConfig({\n  url: 'https://nextjs.org/test',\n  nextConfig: {\n    async redirects() {\n      return [{ source: '/test', destination: '/test2', permanent: false }]\n    },\n  },\n})\nexpect(response.status).toEqual(307)\nexpect(getRedirectUrl(response)).toEqual('https://nextjs.org/test2')\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint During Production Builds (ts)\nDESCRIPTION: This snippet shows how to disable ESLint during production builds by setting `eslint.ignoreDuringBuilds` to `true` in `next.config.ts`.  This prevents ESLint errors from causing build failures in production environments. It defines a `NextConfig` object with the `eslint` property set to ignore builds.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Adding Jest test scripts to package.json\nDESCRIPTION: This snippet demonstrates how to add `test` and `test:watch` scripts to the `package.json` file to enable running Jest tests. The `test` script executes Jest, and the `test:watch` script executes Jest in watch mode, re-running tests on file changes.  Requires Jest to be installed as a dev dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticated Data Fetching with Route Handlers (TypeScript)\nDESCRIPTION: This TypeScript snippet governs data fetching capabilities through route handlers while verifying access authentication. If a session is invalid, the unauthorized function is invoked and a 401 page is rendered, safeguarding endpoint access.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  // Verify the user's session\n  const session = await verifySession()\n\n  // If no session exists, return a 401 and render unauthorized.tsx\n  if (!session) {\n    unauthorized()\n  }\n\n  // Fetch data\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Matching in Next.js Headers\nDESCRIPTION: This code demonstrates wildcard path matching using `*` after a parameter in the `source` path.  The `/:slug*` parameter will match any number of path segments. The captured `slug` value is accessible in the header configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug*',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug*', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug*', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Turbo Static Analysis and Neo4j Setup\nDESCRIPTION: Commands to run the Turbo Static analyzer on project folders and set up a Neo4j database for viewing the results. The tool generates a graph.cypherl file that can be loaded into any Cypher-compatible database.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-static/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# pass in the root folders you want to analyze. the system will recursively\n# parse all rust code looking for turbo tasks functions\ncargo run --release -- ../../../turbo ../../../next.js\n# now you can load graph.cypherl into your database of choice, such as neo4j\ndocker run \\\n    --publish=7474:7474 --publish=7687:7687 \\\n    --volume=$HOME/neo4j/data:/data \\\n    neo4j\n```\n\n----------------------------------------\n\nTITLE: Sitemap Data Type Definition (TSX)\nDESCRIPTION: This TypeScript code defines the structure of a sitemap entry used in Next.js applications.  It specifies the properties for `url`, `lastModified`, `changeFrequency`, `priority`, and `alternates` including nested types for languages used in localization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ntype Sitemap = Array<{ \n  url: string\n  lastModified?: string | Date\n  changeFrequency?:\n    | 'always'\n    | 'hourly'\n    | 'daily'\n    | 'weekly'\n    | 'monthly'\n    | 'yearly'\n    | 'never'\n  priority?: number\n  alternates?: {\n    languages?: Languages<string>\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 404 Page in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a custom 404 page in a Next.js application.  It defines a React functional component named `Custom404` that returns a simple heading indicating the page was not found.  This component is placed in `pages/404.js`, which Next.js automatically recognizes and serves for 404 errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Custom404() {\n  return <h1>404 - Page Not Found</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with pnpm\nDESCRIPTION: This command initializes a new Next.js application using the `create next-app` tool with the `with-service-worker` example. It uses pnpm as the package manager. The `with-service-worker-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-service-worker with-service-worker-app\n```\n\n----------------------------------------\n\nTITLE: Exporting gridAutoColumns from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridAutoColumns styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { m as gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -23\n};\nexport { gridAutoColumns };\n```\n\n----------------------------------------\n\nTITLE: Using Sass Variables in Next.js App Router (JSX)\nDESCRIPTION: This code demonstrates how to import and use a Sass variable exported from a CSS Module in a Next.js component using the App Router. It imports the styles from `variables.module.scss` and applies the `primaryColor` variable to the `color` style of an `h1` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// maps to root `/` URL\n\nimport variables from './variables.module.scss'\n\nexport default function Page() {\n  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using different package managers. This starts a local development environment that can be accessed at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: These commands start the Next.js development server. They showcase the use of `yarn` and `npm` run commands to execute the `dev` script.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Ant Design using npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the Ant Design example template. It utilizes `create-next-app` to bootstrap the project with specified example and application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-ant-design with-ant-design-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Fauna Example (npm)\nDESCRIPTION: Uses `create-next-app` to bootstrap a new Next.js application using the `with-fauna` example.  It installs all necessary dependencies and sets up the project structure. The new application will be named `with-fauna-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-fauna with-fauna-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-mobx' example. It bootstraps the project with the necessary dependencies and configuration for integrating MobX with Next.js. The `with-mobx-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mobx with-mobx-app\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running the development server - npm\nDESCRIPTION: These commands use npm to install the project's dependencies and then start the Next.js development server. `npm install` installs all the packages listed in the `package.json` file. `npm run dev` starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Random String Generator in JavaScript\nDESCRIPTION: This snippet defines a function to generate a random string from a given alphabet and size. It uses bitwise operations and random bytes to ensure randomness. Dependencies include a PRNG function. Key parameters are 'alphabet' for characters and 'size' for length. The output is a random string matching the specified size.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 4\\n};\\nlet customRandom = (alphabet, size, getRandom)=>{\\n    let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1;\\n    let step = Math.ceil((1.6 * mask * size) / alphabet.length);\\n    return ()=>{\\n        let id = '';\\n        while(true){\\n            let bytes = getRandom(step);\\n            let i = step;\\n            while(i--){\\n                id += alphabet[bytes[i] & mask] || '';\\n                if (id.length === size) return id;\\n            }\\n        }\\n    };\\n};\\nexport { customRandom as h } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Configure target browsers in package.json using Browserslist\nDESCRIPTION: This JSON snippet demonstrates how to configure target browsers for Autoprefixer using Browserslist within the `package.json` file. The example targets browsers with >0.3% usage, excludes dead browsers, and excludes Opera Mini. No external dependencies are needed, as Browserslist is integrated with tools like Autoprefixer.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\">0.3%\", \"not dead\", \"not op_mini all\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unauthorized Redirect in Dashboard (JavaScript)\nDESCRIPTION: This JavaScript snippet achieves the same functionality as its TypeScript counterpart, ensuring unauthorized users are redirected to a 401 error page in a Dashboard page. It verifies session data and invokes unauthorized upon authentication failure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\n\nexport default async function DashboardPage() {\n  const session = await verifySession()\n\n  if (!session) {\n    unauthorized()\n  }\n\n  return (\n    <main>\n      <h1>Welcome to the Dashboard</h1>\n      <p>Hi, {session.user.name}.</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PagesRouteModule in Next.js\nDESCRIPTION: This snippet creates a new PagesRouteModule instance with route definition, components, and userland code. It's crucial for setting up Next.js page routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\nimport { RouteKind } from '../../server/future/route-kind';\nimport App from 'VAR_MODULE_APP';\nimport Document from 'VAR_MODULE_DOCUMENT';\nimport * as userland from 'VAR_USERLAND';\n\nconst routeModule = new PagesRouteModule({\n    definition: {\n        kind: RouteKind.PAGES,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        bundlePath: '',\n        filename: ''\n    },\n    components: {\n        App,\n        Document\n    },\n    userland\n});\nexport { routeModule };\nexport { routeModule as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Font Files for a Single Font Family in Next.js\nDESCRIPTION: Shows how to use multiple font files for different weights and styles of the same font family. The example uses the Roboto font with regular, italic, bold, and bold italic variants.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst roboto = localFont({\n  src: [\n    {\n      path: './Roboto-Regular.woff2',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-Italic.woff2',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: './Roboto-Bold.woff2',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-BoldItalic.woff2',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Overmind using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application with the Overmind example. It utilizes the create next-app tool and specifies the 'with-overmind' example and 'with-overmind-app' as the application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-overmind with-overmind-app\n```\n\n----------------------------------------\n\nTITLE: Generating Image with Local Assets in TypeScript\nDESCRIPTION: Illustrates how to generate an image using local assets in TypeScript, fetching a local image file and using `ArrayBuffer` for image data handling. Utilizes Node.js path and file system modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { join } from 'node:path'\nimport { readFile } from 'node:fs/promises'\n\nexport default async function Image() {\n  const logoData = await readFile(join(process.cwd(), 'logo.png'))\n  const logoSrc = Uint8Array.from(logoData).buffer\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Development Environment\nDESCRIPTION: This snippet outlines the commands used to build and start the Next.js application in a development environment using Makefile. It is used for testing the application locally with the build accessible via localhost. It requires a Makefile configured for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build-development\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake start-development\n```\n\n----------------------------------------\n\nTITLE: Copying environment variable example file\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`, allowing users to configure their environment variables for connecting to the Neo4j database. The `.env.local` file is gitignored to prevent sensitive information from being committed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with React Toolbox (npm)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with the React Toolbox example.  It utilizes npm as the package manager. This creates a project directory with the necessary files and dependencies to run the example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-toolbox with-react-toolbox-app\n```\n\n----------------------------------------\n\nTITLE: TS and JS Switcher in MDX Documentation\nDESCRIPTION: This code excerpt illustrates how to set up a TS and JS switcher in MDX documentation to allow users to toggle between TypeScript and JavaScript code examples.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n\n```tsx filename=\"app/page.tsx\" switcher\n\n```\n\n```jsx filename=\"app/page.js\" switcher\n\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Config in next.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define `serverRuntimeConfig` and `publicRuntimeConfig` in `next.config.js`. `serverRuntimeConfig` is for server-side only configurations, and `publicRuntimeConfig` is for configurations accessible on both the server and client. It utilizes `process.env` to pass environment variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/runtime-configuration.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  serverRuntimeConfig: {\n    // Will only be available on the server side\n    mySecret: 'secret',\n    secondSecret: process.env.SECOND_SECRET, // Pass through env variables\n  },\n  publicRuntimeConfig: {\n    // Will be available on both server and client\n    staticFolder: '/static',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Radix UI using npx\nDESCRIPTION: This command creates a new Next.js application using the radix-ui example template. It utilizes npx to execute create-next-app with the specified example and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example radix-ui radix-ui-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Quill.js Example using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the 'with-quill-js' example from the Next.js repository. It uses Yarn to execute the create next-app tool and creates a new directory named 'with-quill-js-app' containing the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-quill-js with-quill-js-app\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server in Next.js Project\nDESCRIPTION: Instructions to start the development server for a Next.js application using various package managers. This snippet shows the commands to run the server using npm, yarn, pnpm, or bun. Ensure Node.js and the relevant package manager are installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Apollo using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-apollo-app' using the 'with-apollo' example. It bootstraps the project with the necessary dependencies and configuration for Apollo integration. It requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-apollo with-apollo-app\n```\n\n----------------------------------------\n\nTITLE: Integrating TypeScript ESLint Rules (mjs)\nDESCRIPTION: This snippet demonstrates how to integrate TypeScript-specific lint rules into a Next.js ESLint configuration using `next/typescript`. It extends both `next/core-web-vitals` and `next/typescript` configurations, leveraging `FlatCompat` for compatibility. This adds rules based on `@typescript-eslint/recommended`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_6\n\nLANGUAGE: mjs\nCODE:\n```\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat({\n  // import.meta.dirname is available after Node.js v20.11.0\n  baseDirectory: import.meta.dirname,\n})\n\nconst eslintConfig = [\n  ...compat.config({\n    extends: ['next/core-web-vitals', 'next/typescript'],\n  }),\n]\n\nexport default eslintConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Verification Metadata in Next.js (JSX)\nDESCRIPTION: This code snippet configures verification metadata for a Next.js application, including Google Site Verification, Yahoo site key, Yandex verification, and other verification methods like email and links. It demonstrates how to set these properties within the `verification` property of the `metadata` export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  verification: {\n    google: 'google',\n    yandex: 'yandex',\n    yahoo: 'yahoo',\n    other: {\n      me: ['my-email', 'my-link'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict-Transport-Security header (JavaScript)\nDESCRIPTION: This code snippet shows how to configure the `Strict-Transport-Security` header, which informs browsers to only access the site using HTTPS. The `max-age` directive specifies the duration for which this policy is valid, and `includeSubDomains` extends the policy to all subdomains.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'Strict-Transport-Security',\n  value: 'max-age=63072000; includeSubDomains; preload'\n}\n```\n\n----------------------------------------\n\nTITLE: Using next/script in _app.js\nDESCRIPTION: This code snippet demonstrates how to use the `next/script` component within the `pages/_app.js` file to include a global script in a Next.js application. It imports the `Script` component from `next/script` and renders it within the `MyApp` component. The `src` prop specifies the path to the script file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-in-document.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Script src=\"/my-script.js\" />\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Blocker Context in Next.js\nDESCRIPTION: This snippet defines a React Context for managing navigation blocking state. It includes a provider component and a custom hook for accessing the context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { createContext, useState, useContext } from 'react'\n\ninterface NavigationBlockerContextType {\n  isBlocked: boolean\n  setIsBlocked: (isBlocked: boolean) => void\n}\n\nexport const NavigationBlockerContext =\n  createContext<NavigationBlockerContextType>({\n    isBlocked: false,\n    setIsBlocked: () => {},\n  })\n\nexport function NavigationBlockerProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [isBlocked, setIsBlocked] = useState(false)\n\n  return (\n    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>\n      {children}\n    </NavigationBlockerContext.Provider>\n  )\n}\n\nexport function useNavigationBlocker() {\n  return useContext(NavigationBlockerContext)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { createContext, useState, useContext } from 'react'\n\nexport const NavigationBlockerContext = createContext({\n  isBlocked: false,\n  setIsBlocked: () => {},\n})\n\nexport function NavigationBlockerProvider({ children }) {\n  const [isBlocked, setIsBlocked] = useState(false)\n\n  return (\n    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>\n      {children}\n    </NavigationBlockerContext.Provider>\n  )\n}\n\nexport function useNavigationBlocker() {\n  return useContext(NavigationBlockerContext)\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rendering Example (TSX)\nDESCRIPTION: This code demonstrates how to force dynamic rendering in a Next.js page. Setting the `dynamic` export to `'force-dynamic'` ensures that the page is rendered dynamically on each request, allowing `useSearchParams` to be available on the server during initial render.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport SearchBar from './search-bar'\\n\\nexport const dynamic = 'force-dynamic'\\n\\nexport default function Page() {\\n  return (\\n    <>\\n      <nav>\\n        <SearchBar />\\n      </nav>\\n      <h1>Dashboard</h1>\\n    </>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Connection in Next.js Page (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the `connection` function within a Next.js page written in TypeScript. It delays rendering until a user request is detected, allowing dynamic rendering with changing results using elements like `Math.random()`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connection } from 'next/server'\\n\\nexport default async function Page() {\\n  await connection()\\n  // Everything below will be excluded from prerendering\\n  const rand = Math.random()\\n  return <span>{rand}</span>\\n}\n```\n\n----------------------------------------\n\nTITLE: Time-based Revalidation with App Router in Next.js (JavaScript)\nDESCRIPTION: This example shows time-based revalidation for a blog posts list page using the App Router in Next.js with JavaScript. It sets a revalidation time of 1 hour and fetches the latest blog posts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const revalidate = 3600 // invalidate every hour\n\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <main>\n      <h1>Blog Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Packages to Latest Version using pnpm\nDESCRIPTION: This command updates the React and React DOM packages to the latest versions using pnpm. It provides an alternative using the pnpm package manager to update React and React DOM.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm update react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Correct Script Usage Outside Head - JSX\nDESCRIPTION: This code snippet demonstrates the correct usage of the `next/script` component outside the `next/head` component in Next.js.  It imports `Script` and `Head` from `next/script` and `next/head` respectively, and renders the `Script` component as a sibling to the `Head` component within a fragment (`<>`). This is the recommended way to use `next/script`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-component-in-head.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\nimport Head from 'next/head'\n\nexport default function Index() {\n  return (\n    <>\n      <Head>\n        <title>Next.js</title>\n      </Head>\n      <Script src=\"/my-script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect in Next.js Server Component (JavaScript)\nDESCRIPTION: This example demonstrates how to use the `redirect` function within a Next.js Server Component written in JavaScript. It fetches team data and redirects to the login page if the data is not found. The `redirect` function terminates the rendering of the route segment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const { id } = await params\n  const team = await fetchTeam(id)\n\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Nonce in a Server Component (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to read the nonce value (set by the middleware) in a Next.js Server Component using the `headers` function from `next/headers`.  The nonce is then passed to the `nonce` prop of the `<Script>` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n\nexport default async function Page() {\n  const nonce = (await headers()).get('x-nonce')\n\n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Fonts with Tailwind CSS in Next.js App Router (JavaScript)\nDESCRIPTION: Shows how to use Google Fonts with Tailwind CSS in a Next.js application using the App Router with JavaScript. Fonts are loaded with CSS variables that can be referenced in the Tailwind config.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html\n      lang=\"en\"\n      className={`${inter.variable} ${roboto_mono.variable} antialiased`}\n    >\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Variable and Constant Declarations - JavaScript\nDESCRIPTION: Declares various variables, including a utility to identify promises, a map for span attributes, a unique key generation for spans, and a function to generate unique span IDs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet api;\n\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;\n\nconst isPromise = (p)=>{\n    return p !== null && typeof p === 'object' && typeof p.then === 'function';\n};\n\nconst rootSpanAttributesStore = new Map();\n\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId');\n\nlet lastSpanId = 0;\n\nconst getSpanId = ()=>lastSpanId++;\n\nconst clientTraceDataSetter = {\n    set (carrier, key, value) {\n        carrier.push({\n            key,\n            value\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Dynamic href in next/link - JSX\nDESCRIPTION: These code snippets demonstrate how to change a dynamic href into a direct path in the next/link component when using the App Router in Next.js. The first snippet shows the original dynamic href, and the following snippet illustrates replacing the dynamic segment with a direct value, which prevents the error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-dir-dynamic-href.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Link\n  href={{\n    pathname: '/route/[slug]',\n    query: { slug: '1' },\n  }}\n>\n  link\n</Link>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Link href=\"/route/[slug]?slug=1\">link</Link>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Link href=\"/route/1\">link</Link>\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared MDX Layout (JSX - Pages Router)\nDESCRIPTION: This JavaScript code defines a shared layout for MDX pages in a Next.js application using the Pages Router. The `MdxLayout` component takes `children` as a prop and renders them inside a `div` with styling applied. This enables consistent styling across multiple MDX pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping SSR with next/dynamic\nDESCRIPTION: This code snippet demonstrates how to disable server-side rendering (SSR) for a Client Component using the `ssr: false` option in `next/dynamic`.  This is useful when the component relies on browser-specific APIs. The component `ComponentC` will only be rendered on the client-side.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\n```\n\n----------------------------------------\n\nTITLE: Disabling Draft Mode in Next.js Route Handler (TypeScript)\nDESCRIPTION: This code snippet shows how to disable Draft Mode in a Next.js Route Handler using TypeScript. It imports `draftMode` from `next/headers`, calls `draft.disable()` to disable Draft Mode, and returns a response indicating that Draft Mode is disabled. It requires the `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const draft = await draftMode()\n  draft.disable()\n  return new Response('Draft mode is disabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Next.js TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to access search query parameters in a Next.js search results page. It imports a function 'getSearchResults' and accesses the search query using 'searchParams', which is used to fetch results. The fetched results are intended to be displayed on the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSearchResults } from '@/lib/search'\n\nexport default async function SearchPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const results = await getSearchResults((await searchParams).query)\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Article Open Graph Metadata HTML Output\nDESCRIPTION: This code shows the HTML output for an article's Open Graph metadata. It includes meta tags for title, description, type, published time, and authors, using the `article:` prefix for the `published_time` and `author` properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-01-01T00:00:00.000Z\" />\n<meta property=\"article:author\" content=\"Seb\" />\n<meta property=\"article:author\" content=\"Josh\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Handlers with Dynamic Caching in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates configuring a route handler to enforce caching behavior for `GET` functions using the `dynamic` configuration option, specifically setting it to `force-static` to manage cache state explicitly. This approach helps control server-side caching strategies within the Next.js route segment configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport const dynamic = 'force-static'\\n\\nexport async function GET() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing getInitialProps with Custom App Component\nDESCRIPTION: Demonstrates how to use getInitialProps in a custom App component to fetch data. This pattern disables Automatic Static Optimization and is not recommended, with Next.js suggesting the App Router approach instead.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/05-custom-app.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport App, { AppContext, AppInitialProps, AppProps } from 'next/app'\n\ntype AppOwnProps = { example: string }\n\nexport default function MyApp({\n  Component,\n  pageProps,\n  example,\n}: AppProps & AppOwnProps) {\n  return (\n    <>\n      <p>Data: {example}</p>\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (\n  context: AppContext\n): Promise<AppOwnProps & AppInitialProps> => {\n  const ctx = await App.getInitialProps(context)\n\n  return { ...ctx, example: 'data' }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'next/app'\n\nexport default function MyApp({ Component, pageProps, example }) {\n  return (\n    <>\n      <p>Data: {example}</p>\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (context) => {\n  const ctx = await App.getInitialProps(context)\n\n  return { ...ctx, example: 'data' }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component with Dynamic Import - TSX\nDESCRIPTION: This code defines a client-side component using the `dynamic` import from `next/dynamic`. It imports the `App` component from a relative path and disables server-side rendering using `ssr: false`. The `'use client'` directive designates this file as a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Functions with TurboPack Imports in JavaScript\nDESCRIPTION: This snippet handles function invocation that brings together `c1_3` and `c2_2`, demonstrating the cascading effect of module imports and exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { f as c1_3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport { h as c2_2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -4\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nc1_3();\nc2_2();\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Updating Entrypoint to Use Client Component (JSX)\nDESCRIPTION: This code updates the entrypoint page in Next.js (JSX) to use the newly created Client Component. It imports the `ClientOnly` component and renders it within the `Page` component. This ensures that the main application logic runs on the client side by utilizing the client component that disables SSR.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote MDX in Next.js App Router (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to fetch and render remote MDX content in a Next.js application using the App Router. It utilizes `next-mdx-remote/rsc` to render MDX fetched from an external source. The `MDXRemote` component is used to render the fetched markdown string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n\nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Experimental Rust-based MDX Compiler\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the experimental Rust-based MDX compiler with options for jsxRuntime, jsxImportSource and mdxType in a Next.js application. It shows how to configure the `mdxRs` object within the `experimental` section of the `next.config.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: {\n      jsxRuntime?: string            // Custom jsx runtime\n      jsxImportSource?: string       // Custom jsx import source,\n      mdxType?: 'gfm' | 'commonmark' // Configure what kind of mdx syntax will be used to parse & transform\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Server-Side Debugging\nDESCRIPTION: This snippet shows how to modify the `package.json` file to include the `--inspect` flag when running the Next.js development server. By setting the `NODE_OPTIONS` environment variable within the `dev` script, the Next.js application can be debugged server-side using browser DevTools or other debugging tools.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Category Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the category metadata configuration. It includes a `<meta>` tag with `name=\"category\"`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"category\" content=\"technology\" />\n```\n\n----------------------------------------\n\nTITLE: Merged TurboPack Grid Module in JavaScript\nDESCRIPTION: The merged version of the grid utility module, showing how TurboPack combines the separate parts for evaluation. It creates a composed grid function from individual styling utilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport compose from './compose';\nimport { g as gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -11\n};\nimport { h as columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nimport { i as rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport { j as gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nimport { k as gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nimport { l as gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nimport { m as gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -23\n};\nimport { n as gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -24\n};\nimport { o as gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -25\n};\nimport { p as gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -26\n};\nimport { q as gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -27\n};\nimport { r as gridArea } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -28\n};\nconst grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\nconst __TURBOPACK__default__export__ = grid;\nexport { __TURBOPACK__default__export__ as default };\nexport { grid as s } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { __TURBOPACK__default__export__ as t } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Accessing Preview Data in API Routes - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to access the `preview` and `previewData` properties within a Next.js API route. The `req` object provides access to `req.preview` (boolean) and `req.previewData` (the data passed to `setPreviewData`). This code demonstrates basic access to these properties within the route handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myApiRoute(req, res) {\n  const isPreview = req.preview\n  const previewData = req.previewData\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-cookies-next example. It initializes a new project directory named 'with-cookies-next-app' with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-cookies-next with-cookies-next-app\n```\n\n----------------------------------------\n\nTITLE: Creating a custom App (_app.js) in Next.js Pages Router with JavaScript\nDESCRIPTION: This JavaScript code defines a custom App component in a Next.js application using the Pages Router. It allows you to wrap the entire application with a global layout or provider. It receives `Component` and `pageProps` as props, which are then passed to the rendered component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application using the with-route-as-modal example. It sets up a new project named 'with-route-as-modal-app' by cloning the example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-route-as-modal with-route-as-modal-app\n```\n\n----------------------------------------\n\nTITLE: Enabling Lightning CSS in Next.js with TypeScript\nDESCRIPTION: Configuration for enabling Lightning CSS in a Next.js project using TypeScript. This snippet shows how to set the useLightningcss experimental flag to true in the Next.js configuration file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/useLightningcss.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    useLightningcss: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with npm - Bash\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js project from the 'with-absolute-imports' example. It creates a new directory named 'with-absolute-imports-app' with the example project's structure and dependencies. Requires Node.js and npm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app --example with-absolute-imports with-absolute-imports-app\n```\n\n----------------------------------------\n\nTITLE: Disabling Draft Mode in Next.js Route Handler (JavaScript)\nDESCRIPTION: This code snippet shows how to disable Draft Mode in a Next.js Route Handler using JavaScript. It imports `draftMode` from `next/headers`, calls `draft.disable()` to disable Draft Mode, and returns a response indicating that Draft Mode is disabled. It requires the `next` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  const draft = await draftMode()\n  draft.disable()\n  return new Response('Draft mode is disabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Entrypoint to Use Client Component (TSX)\nDESCRIPTION: This code updates the entrypoint page in Next.js (TSX) to use the newly created Client Component. It imports the `ClientOnly` component and renders it within the `Page` component. This ensures that the main application logic runs on the client side by utilizing the client component that disables SSR.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: Check and Display Draft Mode Status in Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to check and display the current Draft Mode status within a Next.js Server Component using JavaScript. It retrieves the status using `draftMode()` and renders a paragraph indicating whether Draft Mode is currently enabled or disabled.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport default async function Page() {\n  const { isEnabled } = await draftMode()\n  return (\n    <main>\n      <h1>My Blog Post</h1>\n      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress CI Scripts to package.json\nDESCRIPTION: Adds scripts to `package.json` for running Cypress tests in a Continuous Integration (CI) environment.  Includes scripts for both E2E and Component tests, with and without a headless browser. Requires the `start-server-and-test` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    //...\n    \"e2e\": \"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\n    \"e2e:headless\": \"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\n    \"component\": \"cypress open --component\",\n    \"component:headless\": \"cypress run --component\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Web Vitals Component in Next.js App Router\nDESCRIPTION: This code defines a WebVitals component that uses the useReportWebVitals hook. It is tailored for client-side usage by specifying the 'use client' directive, which confines the client boundary to this component. It requires next/web-vitals as a dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Data Fetching - Next.js with TypeScript\nDESCRIPTION: This snippet demonstrates parallel data fetching by initiating both artist and album data requests simultaneously using Promise.all, improving efficiency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Albums from './albums'\n\nasync function getArtist(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n\nasync function getAlbums(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ username: string }>\n}) {\n  const { username } = await params\n  const artistData = getArtist(username)\n  const albumsData = getAlbums(username)\n\n  // Initiate both requests in parallel\n  const [artist, albums] = await Promise.all([artistData, albumsData])\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Albums list={albums} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npx\nDESCRIPTION: This command creates a new Next.js application using the `with-sitemap` example.  It leverages `create-next-app` via npx. The created app will be named `with-sitemap-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-sitemap with-sitemap-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with React-GA4 Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a Next.js app from the with-react-ga4 example.  It bootstraps a project preconfigured to use react-ga4 for analytics.  The 'with-react-ga-app' argument specifies the name of the new application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-ga4 with-react-ga-app\n```\n\n----------------------------------------\n\nTITLE: Importing Non-Existent Module in JavaScript\nDESCRIPTION: This code snippet demonstrates an attempt to import a module that does not exist, leading to a resolution error. It captures the specific error message generated when trying to import a non-existent path. The snippet provides insight into common issues encountered with module imports in EcmaScript Modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/resolve_error_esm/issues/__l___Module not found____c__ Can't resolve __c_'d-6ad105.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dne from \"does-not-exist/path\";\nconsole.log(dne);\nconsole.log({}[dne]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handling in Next.js with JavaScript\nDESCRIPTION: JavaScript implementation of a global error boundary component for handling application-wide errors in Next.js. Provides same functionality as TypeScript version without type definitions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client' // Error boundaries must be Client Components\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    // global-error must include html and body tags\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Parameters with generateStaticParams in Next.js App Directory\nDESCRIPTION: This snippet demonstrates the use of the generateStaticParams function in the app directory to define route parameters for dynamic segments. It's designed to streamline parameter generation compared to getStaticPaths.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n\nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n\nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${(await params).id}`)\n  const post = await res.json()\n\n  return post\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params)\n\n  return <PostLayout post={post} />\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Exporting getStaticProps in Next.js\nDESCRIPTION: This code snippet demonstrates the correct way to export `getStaticProps` in a Next.js page.  `getStaticProps` is exported as a separate named export alongside the default export of the page component. This allows Next.js to correctly identify and execute the function during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-component-member.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page(props) {\n  return <p>hello world</p>\n}\n\nexport default Page\n\nexport const getStaticProps = () => ({\n  props: {\n    hello: 'world',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating custom OpenTelemetry span (TypeScript)\nDESCRIPTION: Demonstrates how to create a custom span using the OpenTelemetry API. The `fetchGithubStars` function creates a span named 'fetchGithubStars' to track the execution of the `getValue` function.  The span is started and ended explicitly to capture the duration of the operation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trace } from '@opentelemetry/api'\n\nexport async function fetchGithubStars() {\n  return await trace\n    .getTracer('nextjs-example')\n    .startActiveSpan('fetchGithubStars', async (span) => {\n      try {\n        return await getValue()\n      } finally {\n        span.end()\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Command Execution with devlow-bench (JavaScript)\nDESCRIPTION: Illustrates executing shell commands via devlow-bench and handling their lifecycle and outputs. Enables integration of shell operations into benchmarking scenarios.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { command } from 'devlow-bench/shell';\n\nconst shell = await command(\"pnpm\", [\"run\", \"build\"], {\n  env: { /* optional env vars */ }\n  cwd: \"/optional/path/to/directory\"\n});\n\n// Wait for successful exit\nawait shell.ok();\n\n// Wait for exit\nconst exitCode = await shell.end();\n\n// Wait for specific output\nconst [match, world] = await shell.waitForOutput(/hello (world)/);\n\n// Report memory usage or the process tree as metric\nawait shell.reportMemUsage(\"metric name\", { /* optional options */ });\n\nshell.stdout, shell.stderr\n\n// merged output\nshell.output\n\n// Kill the process tree\nawait shell.kill();\n\n```\n\n----------------------------------------\n\nTITLE: Dependency Graph Definition using Mermaid\nDESCRIPTION: These snippets define dependency graphs using the Mermaid syntax, visualizing the relationships between different items (statements) in the code. The graphs show data flow and dependencies between variables and operations during different phases of the process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item2 --> Item1;\n    Item3 --> Item1;\n    Item3 --> Item2;\n    Item4 -.-> Item3;\n    Item4 --> Item1;\n    Item5 -.-> Item3;\n    Item5 --> Item1;\n    Item6 --> Item5;\n    Item6 --> Item1;\n    Item7 --> Item5;\n    Item7 --> Item1;\n    Item8 --> Item6;\n    Item8 --> Item7;\n    Item8 --> Item1;\n    Item9 --> Item8;\n    Item9 --> Item1;\n    Item9 -.-> Item6;\n    Item9 -.-> Item7;\n    Item10 --> Item9;\n    Item10 --> Item1;\n    Item11 --> Item10;\n    Item11 --> Item1;\n    Item11 --> Item3;\n    Item12 --> Item10;\n    Item12 --> Item1;\n    Item13 --> Item10;\n    Item13 --> Item1;\n    Item13 --> Item12;\n    Item13 -.-> Item11;\n    Item14 -.-> Item13;\n    Item14 --> Item1;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item2 --> Item1;\n    Item3 --> Item1;\n    Item3 --> Item2;\n    Item4 -.-> Item3;\n    Item4 --> Item1;\n    Item5 -.-> Item3;\n    Item5 --> Item1;\n    Item6 --> Item5;\n    Item6 --> Item1;\n    Item7 --> Item5;\n    Item7 --> Item1;\n    Item8 --> Item6;\n    Item8 --> Item7;\n    Item8 --> Item1;\n    Item9 --> Item8;\n    Item9 --> Item1;\n    Item9 -.-> Item6;\n    Item9 -.-> Item7;\n    Item10 --> Item9;\n    Item10 --> Item1;\n    Item11 --> Item10;\n    Item11 --> Item1;\n    Item11 --> Item3;\n    Item12 --> Item10;\n    Item12 --> Item1;\n    Item13 --> Item10;\n    Item13 --> Item1;\n    Item13 --> Item12;\n    Item13 -.-> Item11;\n    Item14 -.-> Item13;\n    Item14 --> Item1;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item2 --> Item1;\n    Item3 --> Item1;\n    Item3 --> Item2;\n    Item4 -.-> Item3;\n    Item4 --> Item1;\n    Item5 -.-> Item3;\n    Item5 --> Item1;\n    Item6 --> Item5;\n    Item6 --> Item1;\n    Item7 --> Item5;\n    Item7 --> Item1;\n    Item8 --> Item6;\n    Item8 --> Item7;\n    Item8 --> Item1;\n    Item9 --> Item8;\n    Item9 --> Item1;\n    Item9 -.-> Item6;\n    Item9 -.-> Item7;\n    Item10 --> Item9;\n    Item10 --> Item1;\n    Item11 --> Item10;\n    Item11 --> Item1;\n    Item11 --> Item3;\n    Item12 --> Item10;\n    Item12 --> Item1;\n    Item13 --> Item10;\n    Item13 --> Item1;\n    Item13 --> Item12;\n    Item13 -.-> Item11;\n    Item14 -.-> Item13;\n    Item14 --> Item1;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, VarDeclarator(0))]\"\n];\n    N1[\"Items: [ItemId(1, Normal), ItemId(2, Normal)]\"\n];\n    N2[\"Items: [ItemId(3, Normal)]\"\n];\n    N3[\"Items: [ItemId(4, Normal)]\"\n];\n    N4[\"Items: [ItemId(7, Normal), ItemId(8, Normal), ItemId(9, Normal), ItemId(10, Normal), ItemId(11, VarDeclarator(0)), ItemId(12, Normal), ItemId(13, Normal)]\"\n];\n    N5[\"Items: [ItemId(5, VarDeclarator(0))]\"\n];\n    N6[\"Items: [ItemId(6, VarDeclarator(0))]\"\n];\n    N3 --> N0;\n    N1 --> N0;\n    N4 --> N0;\n    N2 -.-> N1;\n    N2 --> N0;\n    N3 -.-> N1;\n```\n\n----------------------------------------\n\nTITLE: Constructing Draft URL\nDESCRIPTION: This bash snippet shows how to construct a draft URL with a secret token and slug for previewing content in Draft Mode.  `<your-site>` should be your deployment domain.  `<token>` should be replaced with the secret token you generated.  `<path>` should be the path for the page that you want to view.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```\n\n----------------------------------------\n\nTITLE: Spawning Child Processes Dynamically - JavaScript\nDESCRIPTION: This snippet demonstrates how to spawn a child process using random values generated by Math.random(). It leverages the child_process.spawnSync method to execute Node.js commands synchronously. The generated value is passed as an argument, testing the impact of dynamic input on process spawning.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__quo_-c0f309.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst unknown = Math.random();\nchild_process.spawnSync(unknown);\nchild_process.spawnSync(\"node\", unknown);\nchild_process.spawnSync(\"node\", [unknown, unknown]);\nrequire(unknown);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Routing Configuration with dynamicParams in Next.js App Directory\nDESCRIPTION: This code demonstrates how the dynamicParams property controls route handling in the app directory, ensuring dynamic segments are managed correctly, either generating them on demand or returning a 404 when not found.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\nexport const dynamicParams = true;\n\nexport async function generateStaticParams() {\n  return [...]\n}\n\nasync function getPost(params) {\n  ...\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params);\n\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Example (Shared Pages Source)\nDESCRIPTION: This MDX snippet shows how to pull content from a shared page into another page using the `source` field in the metadata. This is useful for avoiding content duplication and ensuring consistency between the App Router and Pages Router documentation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: <Link>\ndescription: API reference for the <Link> component.\nsource: app/api-reference/components/link\n---\n\n{/* DO NOT EDIT THIS PAGE. */}\n{/* The content of this page is pulled from the source above. */}\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Layout Component (JSX)\nDESCRIPTION: This code initializes the root layout component in a Next.js application using JavaScript (JSX). It defines a functional component `RootLayout` that accepts `children` as a prop. The component returns a basic structure with placeholder content. This is the starting point for defining the overall structure of your Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Output Enhancement in JavaScript\nDESCRIPTION: Enhances console output methods by adding custom formatting and stack traces. Modifies various console methods to include TURBOPACK output markers and optional stack trace information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst improveConsole = (name, stream, addStack)=>{\n    const original = console[name];\n    const stdio = process[stream];\n    console[name] = (...args)=>{\n        stdio.write(`TURBOPACK_OUTPUT_B\\n`);\n        original(...args);\n        if (addStack) {\n            const stack = new Error().stack?.replace(/^.+\\n.+\\n/, \"\") + \"\\n\";\n            stdio.write(\"TURBOPACK_OUTPUT_S\\n\");\n            stdio.write(stack);\n        }\n        stdio.write(\"TURBOPACK_OUTPUT_E\\n\");\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Post Page with getStaticProps and getStaticPaths\nDESCRIPTION: A complete implementation of a dynamic post page that uses both getStaticPaths to determine which routes to pre-render and getStaticProps to fetch data for each specific post based on its ID parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Post({ post }) {\n  // Render post...\n}\n\nexport async function getStaticPaths() {\n  // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post\n```\n\n----------------------------------------\n\nTITLE: Exporting useMDXComponents Function in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to export the `useMDXComponents` function. It imports `MDXComponents` type from 'mdx/types', defines the function, and exports it. This pattern is used for providing custom MDX components within a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mesh Configuration\nDESCRIPTION: This YAML configuration file specifies the PetStore REST API as a source for GraphQL Mesh.  It uses the `newOpenapi` handler to translate the OpenAPI specification into a GraphQL schema. `baseUrl` defines the base URL of the API, and `oasFilePath` points to the OpenAPI specification file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: PetStore\n    handler:\n      newOpenapi:\n        baseUrl: https://petstore.swagger.io/v2/\n        oasFilePath: https://petstore.swagger.io/v2/swagger.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Sass Implementation (TypeScript)\nDESCRIPTION: This code snippet shows how to specify a Sass implementation (sass-embedded) in `next.config.ts`. This allows you to use a specific Sass compiler other than the default one, potentially offering performance benefits or access to specific features. Requires the `NextConfig` type from 'next'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  sassOptions: {\n    implementation: 'sass-embedded',\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Mocking file imports for Jest\nDESCRIPTION: This JavaScript module exports a string, `'test-file-stub'`, which serves as a mock for file imports in Jest tests.  It allows tests to run without actually importing or processing real files, preventing potential errors or dependencies during testing. This is commonly used for mocking image or other asset imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = 'test-file-stub'\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Layout - JavaScript\nDESCRIPTION: This code snippet demonstrates how to load a third-party script within a Next.js layout component using JavaScript.  The `Script` component from `next/script` is used to embed the script. The script will be loaded once when the layout is accessed. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function DashboardLayout({ children }) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Export Import Statement in JavaScript\nDESCRIPTION: This code snippet demonstrates an invalid import statement in JavaScript, where the specified export 'Abc' does not exist in the './module' file.  Turbopack identifies this error during compilation due to its static analysis of module exports. The error message also suggests a similar existing export ('Abd') as a possible alternative.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/exports/invalid-export/issues/__l_Export __c_Abc__ doesn't exist in target modul-214e00.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Abc } from \"./module\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Error Handling in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to disable TypeScript error checking during the Next.js build process by modifying the next.config.js file. The configuration sets the ignoreBuildErrors flag to true, which allows production builds to complete even when type errors exist.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Meilisearch Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-meilisearch example. It bootstraps the project with the necessary configurations for Meilisearch integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-meilisearch with-meilisearch-app\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting with Assertions in Javascript (Turbopack)\nDESCRIPTION: This JavaScript snippet demonstrates importing `IPC` from `./index` and re-exporting it as `a` using a Turbopack-specific assertion. The assertion `__turbopack_var__: true` is likely used by Turbopack during the bundling or transformation process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 0\n};\nimport { IPC } from \\\"./index\\\";\nexport { IPC as a } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript tsconfig.json Include Configuration\nDESCRIPTION: This JSON snippet configures the `include` array in `tsconfig.json` to include `next-env.d.ts`, `app/**/*`, and `src/**/*` for TypeScript compilation. This ensures that Next.js environment type definitions and application source files are included in the TypeScript project. It configures the TypeScript compiler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"next-env.d.ts\", \"app/**/*\", \"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js and React Dependencies using npm\nDESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using npm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@11 react@17 react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths for Dynamic Routes in Next.js\nDESCRIPTION: An example of using getStaticPaths to specify which dynamic routes to pre-render at build time. This function fetches posts and generates paths based on post IDs for pre-rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id }\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Default Port in Next.js Development\nDESCRIPTION: The provided code demonstrates how to change the default development server port for a Next.js application using command-line options. The `-p` flag or the `PORT` environment variable can be used to set a custom port other than the default `3000`. This is useful for avoiding port conflicts or testing different server configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnext dev -p 4000\n```\n\nLANGUAGE: bash\nCODE:\n```\nPORT=4000 next dev\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Redirect Implementation in Next.js\nDESCRIPTION: This snippet demonstrates a basic middleware implementation that redirects requests to '/home'. It includes TypeScript type definitions for the request object and exports a config object with a matcher to specify which paths the middleware applies to.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auth Interrupts in Next.js - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to enable the experimental authInterrupts option in a Next.js application. By adding authInterrupts: true to the experimental section of next.config.js, developers can make use of the forbidden and unauthorized APIs. This snippet depends on an existing Next.js setup and entails changing the module.exports object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/authInterrupts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  experimental: {\\n    authInterrupts: true,\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 3 (prod)\nDESCRIPTION: Part 3 of the production build. Imports `value` and `value2` then defines `value3` and shared based on them. It exports `value3` as `d` and `shared` as `c`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as value } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nimport { b as value2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nconst value3 = externalFunction();\nconst shared = {\n    value,\n    value2,\n    value3\n};\nexport { value3 as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { shared as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Module Resolution Error in Next.js with Turbopack\nDESCRIPTION: This snippet demonstrates a module resolution error within a Next.js project utilizing Turbopack. The error occurs when the `require` statement attempts to import a module that does not exist, resulting in a 'Module not found' error. The provided error message gives context about the path where the error occurred.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/resolve_error_cjs/issues/__l___Module not found____c__ Can't resolve __c_'d-a972c2.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dne = require(\"does-not-exist/path\");\n\nconsole.log(dne);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Uncaught Exception Handler\nDESCRIPTION: Sets up a global uncaught exception handler that uses the IPC module to send structured error information back to the parent process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nprocess.on(\"uncaughtException\", (err)=>{\n    IPC.sendError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: LogSpanAllowList Import and Re-export for Next.js Tracing (JS)\nDESCRIPTION: Imports the LogSpanAllowList from constants and re-exports it for use in other parts of the application. This list likely contains span types that should be logged in the trace output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { LogSpanAllowList } from './constants';\nexport { LogSpanAllowList as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Content Based on Params (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to display content based on dynamic route parameters. It accesses the `team` parameter from the `params` prop and uses it to personalize the header of the dashboard layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function DashboardLayout({\n  children,\n  params,\n}: {\n  children: React.ReactNode\n  params: Promise<{ team: string }>\n}) {\n  const { team } = await params\n\n  return (\n    <section>\n      <header>\n        <h1>Welcome to {team}'s Dashboard</h1>\n      </header>\n      <main>{children}</main>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Turso Example\nDESCRIPTION: This code snippet demonstrates how to create a new Next.js app using the Turso example template. The code allows the creation of a `with-turso` app using different package managers (npx, yarn, pnpm). It ensures users can set up their Next.js application environment seamlessly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-turso with-turso-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-turso with-turso-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-turso with-turso-app\n```\n\n----------------------------------------\n\nTITLE: Composing Server Components inside Client Components in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to compose a Server Component as a child of a Client Component in a Next.js page. By passing the Server Component as children, it can be rendered on the server independently from the Client Component that will be hydrated on the client.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n\n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building Rust Code to WebAssembly\nDESCRIPTION: These commands compile Rust code located in `src/add.rs` into a WebAssembly file named `add.wasm`. They use npm, yarn, or pnpm to execute the `build-rust` script defined in the project's `package.json`. Requires Rust to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-webassembly/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-rust\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn build-rust\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build-rust\n```\n\n----------------------------------------\n\nTITLE: Importing Module in JavaScript Part 0\nDESCRIPTION: This snippet demonstrates a simple module import. It serves as a fundamental part of the TurboPack parts management, importing a direct module without additional asserts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"module\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Next.js (Yarn)\nDESCRIPTION: These commands install the necessary dependencies for the Next.js application using Yarn and then start the development server. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command runs the Vitest tests in the project using npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with i18n routing using npx\nDESCRIPTION: This command uses npx to execute `create-next-app` and bootstraps a new Next.js application with the internationalized routing example. The `i18n-routing` argument specifies the example to use, and `i18n-routing-app` is the name of the new application to be created.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example i18n-routing i18n-routing-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with Firebase Hosting Example\nDESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application configured to be hosted with Firebase Hosting. It supports multiple package managers (npm, Yarn, pnpm) and creates a new app with a specific example configuration. Ensure Firebase tools are set up before executing these commands.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-firebase-hosting with-firebase-hosting-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-firebase-hosting with-firebase-hosting-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-firebase-hosting with-firebase-hosting-app\n```\n\n----------------------------------------\n\nTITLE: Key Hash Range Example - SST File Layout Before Compaction\nDESCRIPTION: Example showing the layout of SST files across the key hash range before compaction, demonstrating how multiple SST files can overlap in their hash ranges.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkey hash range: | 0    ...    u64::MAX |\nSST 1:             |----------------|\nSST 2:                |----------------|\nSST 3:            |-----|\n\n```\n\n----------------------------------------\n\nTITLE: Running Next.js with TinaCMS in Development Mode\nDESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode with TinaCMS. The `npm install` or `yarn install` command installs the project dependencies, while `npm run tina-dev` or `yarn tina-dev` starts the development server with TinaCMS enabled.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install\nnpm run tina-dev\n\n# or\n\nyarn install\nyarn tina-dev\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Variables in JavaScript Part 8\nDESCRIPTION: This snippet appends a substring to a variable, demonstrating string modification within an imported module's scope.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nfoobarCopy += \"Unused\";\n```\n\n----------------------------------------\n\nTITLE: Determining Locale from Request Headers in JavaScript\nDESCRIPTION: This snippet demonstrates how to determine the user's preferred locale based on the Accept-Language header using the @formatjs/intl-localematcher and negotiator libraries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { match } from '@formatjs/intl-localematcher'\nimport Negotiator from 'negotiator'\n\nlet headers = { 'accept-language': 'en-US,en;q=0.5' }\nlet languages = new Negotiator({ headers }).languages()\nlet locales = ['en-US', 'nl-NL', 'nl']\nlet defaultLocale = 'en-US'\n\nmatch(languages, locales, defaultLocale) // -> 'en-US'\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Color with Media Queries in TypeScript\nDESCRIPTION: This snippet shows how to define a viewport object in TypeScript with dynamic theme colors based on media queries, allowing for different colors depending on the user's color scheme preference.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Panda CSS using Bun\nDESCRIPTION: This command uses Bun to execute create-next-app, setting up a new Next.js project with the panda-css example. The project will be named 'panda-css-app' and configured to use Panda CSS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example panda-css panda-css-app\n```\n\n----------------------------------------\n\nTITLE: Defining `getInitialProps` on Functional Component\nDESCRIPTION: Shows an alternative approach to adding `getInitialProps` to a functional component by assigning the method directly to the component function in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/get-initial-props-as-an-instance-method.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst YourEntryComponent = function () {\n  return 'foo'\n}\n\nYourEntryComponent.getInitialProps = () => {\n  return {}\n}\n\nexport default YourEntryComponent\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Webiny Example\nDESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cms-webiny` example. They use `create-next-app` with npm, yarn, and pnpm package managers. This will create a new project directory named `cms-webiny-app` with the specified template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-webiny cms-webiny-app\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint During Production Builds (js)\nDESCRIPTION: This snippet demonstrates how to disable ESLint during production builds by setting `eslint.ignoreDuringBuilds` to `true` in `next.config.js`. This configuration allows production builds to complete even if there are ESLint errors. This is a JavaScript version of the previous snippet, suitable for non-TypeScript projects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst nextConfig = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Referrer-Policy header (JavaScript)\nDESCRIPTION: This code shows how to configure the `Referrer-Policy` header, which controls how much information the browser includes when navigating from the current website to another. Setting the value to `origin-when-cross-origin` sends the origin for cross-origin requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'Referrer-Policy',\n  value: 'origin-when-cross-origin'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with npx\nDESCRIPTION: This snippet demonstrates how to use 'npx' to create a new Next.js application using the 'hello-world' example. It requires npm to be installed on the user's machine. The expected input is the command line where this snippet is executed, and the output is the creation of a new directory with the Next.js app structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example hello-world hello-world-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Ant Design using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the Ant Design example template. It utilizes `create next-app` to bootstrap the project with specified example and application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-ant-design with-ant-design-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Inngest example using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named \"inngest-app\" based on the \"inngest\" example.  It relies on create-next-app for scaffolding the project with the necessary dependencies and configurations for Inngest. Yarn must be installed and configured to execute this command correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example inngest inngest-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Zones using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named `with-zones-app` based on the `with-zones` example. It bootstraps the project with the necessary files and configurations for a multi-zone setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-zones with-zones-app\n```\n\n----------------------------------------\n\nTITLE: Terminal Output for Server-Side Rendered Page in Next.js\nDESCRIPTION: Shows the file structure output by 'next build' for a page with getServerSideProps, where the page is server-side rendered as JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/04-automatic-static-optimization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.next/server/pages/about.js\n```\n\n----------------------------------------\n\nTITLE: Disabling Webpack 5 in next.config.js\nDESCRIPTION: This code snippet demonstrates how to disable Webpack 5 in older versions of Next.js by setting the `webpack5` flag to `false` in the `next.config.js` file. This was a temporary measure to allow users to upgrade to newer Next.js versions while still using Webpack 4. This option has been removed in Next.js 12.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/webpack5.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // Webpack 5 is enabled by default\n  // You can still use webpack 4 while upgrading to the latest version of Next.js by adding the \"webpack5: false\" flag\n  webpack5: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Development Server\nDESCRIPTION: Command options for starting the Next.js development server using different package managers including npm, yarn, pnpm, or bun.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for development purposes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-empty/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application using the api-routes-apollo-server example. It bootstraps the project with the necessary dependencies and configurations for integrating Apollo GraphQL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example api-routes-apollo-server api-routes-apollo-server-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with HTTP2 Example using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the HTTP2 example template, utilizing pnpm as the package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-http2 with-http2-app\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dynamic Import Options - Before\nDESCRIPTION: This code demonstrates the incorrect way to pass options to the `next/dynamic` function in Next.js. The options are stored in a variable and then passed, which is invalid. This results in an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-dynamic-options-type.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst options = { loading: () => <p>...</p>, ssr: false }\nconst DynamicComponent = dynamic(() => import('../components/hello'), options)\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the react-native-web example. It installs the required packages and configures the project for React Native Web integration within a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-native-web with-react-native-web-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Stripe TypeScript example (Yarn)\nDESCRIPTION: This command initializes a new Next.js application using the `with-stripe-typescript` example from the Next.js repository. It uses `create-next-app` via `yarn` to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-stripe-typescript with-stripe-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Injecting Styles via ComponentStyles\nDESCRIPTION: This snippet details how to import and inject component styles into the dev overlay using the minified 'css()' utility to ensure styles are applied correctly. This process involves merging component-specific styles into a single style tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/react-dev-overlay/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { COMPONENT_NAME_STYLES } from './component'\n\nexport function ComponentStyles() {\n  return (\n    <style>\n      {css`\n        // ...\n        ${COMPONENT_NAME_STYLES}\n      `}\n    </style\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running SWC AST Explorer with Cargo - Shell\nDESCRIPTION: This shell snippet demonstrates how to execute the SWC AST Explorer using Cargo to generate syntax trees from input JavaScript code. The command reads console input and pipes it to the Cargo run command targeting the swc-ast-explorer package. This utilizes Rust's Cargo toolchain to run the specified binary.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-swc-ast-explorer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho \"console.log('hello')\" | cargo run -p swc-ast-explorer\n```\n\n----------------------------------------\n\nTITLE: NextVanillaSpanAllowlist Import and Re-export for Next.js Tracing (JS)\nDESCRIPTION: Imports the NextVanillaSpanAllowlist from constants and re-exports it. This list likely contains span types that are allowed in non-verbose mode for the Next.js vanilla implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { NextVanillaSpanAllowlist } from './constants';\nexport { NextVanillaSpanAllowlist as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Configuration in Next.js JavaScript\nDESCRIPTION: This snippet demonstrates how to export an object from the next.config.js file, which is a critical component in any Next.js application for setting custom configurations. Ensure that module.exports is properly defined to avoid configuration errors. The object can contain various configuration options that customize the behavior of the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/empty-configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  /* config options here */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry packages for manual configuration\nDESCRIPTION: Installs the required OpenTelemetry packages for manual configuration in a Next.js application. This includes `@opentelemetry/sdk-node`, `@opentelemetry/resources`, `@opentelemetry/semantic-conventions`, `@opentelemetry/sdk-trace-node`, and `@opentelemetry/exporter-trace-otlp-http`. These packages are essential for setting up OpenTelemetry without using the `@vercel/otel` package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites with Trailing Slashes in Next.js\nDESCRIPTION: This configuration demonstrates how to set up rewrites when the trailingSlash option is enabled. It shows the correct pattern for both source and destination URLs to ensure proper matching with trailing slashes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n  async rewrites() {\n    return [\n      {\n        source: '/blog/',\n        destination: 'https://example.com/blog/',\n      },\n      {\n        source: '/blog/:path*/',\n        destination: 'https://example.com/blog/:path*/',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in ORM Config - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use an environment variable (`DATABASE_URL`) in an ORM configuration file.  It imports the `envConfig.ts` module to load the environment variables and then uses `process.env.DATABASE_URL` to define the database connection string. The non-null assertion operator (!) is used here.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport './envConfig.ts'\n\nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL!,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Ensuring Authenticated Mutations with Server Actions (JavaScript)\nDESCRIPTION: In JavaScript, this snippet ensures only authenticated users perform server-side actions such as data mutations. It confirms user sessions and applies unauthorized functions for session failures.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use server'\n\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\nimport db from '@/app/lib/db'\n\nexport async function updateProfile(data) {\n  const session = await verifySession()\n\n  // If the user is not authenticated, return a 401\n  if (!session) {\n    unauthorized()\n  }\n\n  // Proceed with mutation\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Export with Turbopack Assertion\nDESCRIPTION: This code snippet demonstrates the import of a Turbopack part and subsequent export of a variable with aliasing. Dependencies include Turbopack to manage part assertions, and an understanding of ES6 module syntax for the imports and exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { LogSpanAllowList } from './constants';\nexport { LogSpanAllowList as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Applying a Font to a Specific Page (App Router)\nDESCRIPTION: This code snippet demonstrates applying a font to a specific page in a Next.js application using the app router. It imports the `roboto_mono` font from a utility function and applies its `className` to an `h1` element within the `Page` component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { roboto_mono } from './fonts'\n\nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout with Parallel Routes in Typescript\nDESCRIPTION: This code snippet shows how to define a layout component that accepts parallel routes as props in Typescript. The layout component receives `children`, `team`, and `analytics` props, each representing a different slot, and renders them in parallel.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Layout({\n  children,\n  team,\n  analytics,\n}: {\n  children: React.ReactNode\n  analytics: React.ReactNode\n  team: React.ReactNode\n}) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Predefined Route with useRouter (JSX)\nDESCRIPTION: This snippet showcases how to use the router.push method to navigate to a predefined route, in this case, '/about'. It imports the useRouter hook, accesses the router object, and calls router.push within an onClick handler to initiate the navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/about')}>\n      Click me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js, React, and React DOM using npm in Bash\nDESCRIPTION: This command installs the core dependencies required for a Next.js application: Next.js itself, React, and React DOM.  It should be executed in the project's root directory after initializing the project directory manually. The command uses npm to install the latest versions of these packages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode\nDESCRIPTION: This code snippet imports the `draftMode` function from `next/headers` and enables draft mode. The `draftMode().enable()` method sets a cookie that enables draft mode for subsequent requests.  The route handler then responds with a confirmation message.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const draft = await draftMode()\n  draft.enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a Pending State During Server Function Execution with TypeScript\nDESCRIPTION: Demonstrates using React's useActionState hook in TypeScript to show a loading indicator while a Server Function is executing. The component displays different content based on the pending state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createPost } from '@/app/actions'\nimport { LoadingSpinner } from '@/app/ui/loading-spinner'\n\nexport function Button() {\n  const [state, action, pending] = useActionState(createPost, false)\n\n  return (\n    <button onClick={async () => action()}>\n      {pending ? <LoadingSpinner /> : 'Create Post'}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running and Deploying Next.js App on Firebase\nDESCRIPTION: Commands for testing and deploying the Next.js application on Firebase. Use `npm run serve` or `yarn serve` to run Firebase locally and test the application. Deploy the app to the cloud using `npm run deploy` or `yarn deploy`. Ensure that Firebase credentials and project configuration are correctly set up.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n# or\nyarn serve\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n# or\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: History API Usage for URL Updates\nDESCRIPTION: Examples of using the native History API with Next.js for updating URLs without page reloads, including both pushState and replaceState implementations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n\n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n\n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n\n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Template in Next.js (Javascript)\nDESCRIPTION: This code defines a template component in Next.js using JavaScript. Templates are similar to layouts, but create a new instance for each child route, resetting state and re-synchronizing effects on navigation. This template accepts a `children` prop and renders it within a `<div>` element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Template({ children }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Draft Mode Status in Next.js Server Component (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to check if Draft Mode is enabled within a Next.js Server Component using TypeScript.  It imports the `draftMode` function from `next/headers` and uses its `isEnabled` property to determine the current Draft Mode status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport default async function Page() {\n  const { isEnabled } = await draftMode()\n}\n```\n\n----------------------------------------\n\nTITLE: Using use Hook in Client Component (Next.js)\nDESCRIPTION: This example shows how to use React's use hook in a Next.js Client Component to read a promise passed from a Server Component. It renders a list of blog posts once the promise resolves.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport { use } from 'react'\n\nexport default function Posts({\n  posts,\n}: {\n  posts: Promise<{ id: string; title: string }[]>\n}) {\n  const allPosts = use(posts)\n\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport { use } from 'react'\n\nexport default function Posts({ posts }) {\n  const posts = use(posts)\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest and testing libraries\nDESCRIPTION: These commands install Vitest, React plugin, jsdom, React Testing Library, dom testing library, and vite-tsconfig-paths as development dependencies using npm. These packages are required for running unit tests in a Next.js project with Vitest.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Using TypeScript\nnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom vite-tsconfig-paths\n# Using JavaScript\nnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Creating Video Sitemaps in TypeScript\nDESCRIPTION: Implementation of video sitemaps using the videos property in TypeScript. This approach follows Google's video sitemap protocol and includes title, thumbnail location, and description for each video.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://example.com',\n      lastModified: '2021-01-01',\n      changeFrequency: 'weekly',\n      priority: 0.5,\n      videos: [\n        {\n          title: 'example',\n          thumbnail_loc: 'https://example.com/image.jpg',\n          description: 'this is the description',\n        },\n      ],\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Loader in Next.js (Client Component)\nDESCRIPTION: This example shows how to create and use a custom loader function with the Next.js Image component in a client component. The loader function generates a custom URL based on the provided src, width, and quality parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n'use client'\n\nimport Image from 'next/image'\n\nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting all Cookies with NextRequest\nDESCRIPTION: This snippet demonstrates how to retrieve all cookies or cookies with a specific name using the `getAll` method of the `request.cookies` object in Next.js. It shows examples of retrieving all cookies with the name 'experiments' and all cookies without specifying a name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nrequest.cookies.getAll('experiments')\n// Alternatively, get all cookies for the request\nrequest.cookies.getAll()\n```\n\n----------------------------------------\n\nTITLE: Using Imported Font Definitions in Next.js Components\nDESCRIPTION: Example showing how to use multiple fonts imported from a font definitions file. Different fonts are applied to different text elements using className or style properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n\nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n\nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping AMP Validation (JS)\nDESCRIPTION: This code snippet shows how to disable AMP validation in `next.config.js`. It sets the `skipValidation` property to `true` within the `experimental.amp` object.  This can be useful during development or in cases where strict AMP validation is not required. Disables the automatic AMP validation during development and build.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexperimental: {\n  amp: {\n    skipValidation: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using lazyOnload Strategy (App Router, JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `lazyOnload` strategy with the `Script` component in a Next.js application using the App Router. It loads the script during browser idle time after all resources have been fetched.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"lazyOnload\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Logging the Copied Variable - JavaScript\nDESCRIPTION: This snippet imports 'foobarCopy', logs its value to the console to demonstrate output. It further modifies the variable with 'Unused', representing state changes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nconsole.log(foobarCopy);\nfoobarCopy += \"Unused\";\nimport \"other\";\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Twitter Metadata HTML Output\nDESCRIPTION: This code shows the HTML output generated from the Twitter metadata configuration. It includes meta tags for the card type, site ID, creator, creator ID, title, description, and image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n```\n\n----------------------------------------\n\nTITLE: Composing Server Components inside Client Components in TypeScript\nDESCRIPTION: This TypeScript example shows how to compose a Server Component inside a Client Component in a Next.js page. This pattern allows the Server Component to be rendered on the server before the Client Component is rendered on the client, providing better performance and separation of concerns.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n\n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Import Server Component into Client Component in TypeScript\nDESCRIPTION: This snippet illustrates an unsupported use case where a Client Component attempts to import a Server Component. Importing Server Components into Client Components is prohibited due to the necessary request-response lifecycle in React.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <> \n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      <ServerComponent />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Revalidation in Fetch Options - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set the revalidation parameter for fetch requests in Next.js. It defines how long a response should be cached or if it should not be cached at all, allowing for efficient resource management based on specific application needs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfetch(`https://...`, { next: { revalidate: false | 0 | number } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Title with next/head in Next.js\nDESCRIPTION: This code snippet demonstrates the correct way to set a page title in Next.js using the Head component from next/head. It shows how to import the component and use it within a functional component to set a custom title for a page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-title-in-document-head.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nexport function Home() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Draft Mode Status in Next.js Server Component (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to check if Draft Mode is enabled within a Next.js Server Component using JavaScript.  It imports the `draftMode` function from `next/headers` and uses its `isEnabled` property to determine the current Draft Mode status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport default async function Page() {\n  const { isEnabled } = await draftMode()\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Route and Search Parameters in Client Components\nDESCRIPTION: Shows how to read the params and searchParams props in a Client Component using React's use function. Since Client Components cannot be async, the use function is needed to read the promise values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { use } from 'react'\n\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ slug: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const { slug } = use(params)\n  const { query } = use(searchParams)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n'use client'\n\nimport { use } from 'react'\n\nexport default function Page({ params, searchParams }) {\n  const { slug } = use(params)\n  const { query } = use(searchParams)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with create-next-app - npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-unsplash example. It leverages the create-next-app tool to bootstrap the project with the specified template and project name. The tool downloads the template from the specified repository and initializes the project structure, installing necessary dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-unsplash with-unsplash-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with create-next-app - pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-unsplash example. It leverages the create-next-app tool to bootstrap the project with the specified template and project name. The tool downloads the template from the specified repository and initializes the project structure, installing necessary dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-unsplash with-unsplash-app\n```\n\n----------------------------------------\n\nTITLE: Sending empty body with 204 status code in Next.js API route\nDESCRIPTION: This code snippet shows the corrected way to use a 204 status code in a Next.js API route. Instead of sending a response body with `send()`, the `end()` method is used to indicate that there is no content in the response body, adhering to the requirements of the 204 status code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-api-status-body.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.status(204).end()\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON response in Middleware (Before - Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect way of returning a JSON response directly from Middleware in Next.js versions v12.2+. It uses NextResponse.json to send an unauthorized message with a 401 status code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n\nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n\n  return NextResponse.json({ message: 'Auth required' }, { status: 401 })\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Cookie Store Initialization in Next.js\nDESCRIPTION: This snippet demonstrates how to properly initialize the cookie store within a request scope in a Next.js page component. The change ensures that the 'cookies()' function is called during the execution of an asynchronous function, preventing errors during execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { cookies } from 'next/headers'\n\n- const cookieStore = await cookies()\nexport default async function Page() {\n+ const cookieStore = await cookies()\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode\nDESCRIPTION: This code snippet imports the `draftMode` function from `next/headers` and enables draft mode. The `draftMode().enable()` method sets a cookie that enables draft mode for subsequent requests. The route handler then responds with a confirmation message.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  const draft = await draftMode()\n  draft.enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Client Component with Server Action (JSX)\nDESCRIPTION: This snippet defines a simple Client Component in Next.js that receives a Server Action as a prop and triggers it on a button click. It showcases how a client-side event can invoke a server-side function, enabling interactive features with server-side logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport default function ClientComponent({ action }) {\n  return <button onClick={action}>Update</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using next/image with Custom Loader (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `next/image` component with a custom image loader.  It imports the `Image` component and renders an image with specified `alt`, `src`, `width`, and `height` attributes, utilizing the custom loader defined elsewhere.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handling in Next.js with TypeScript\nDESCRIPTION: TypeScript implementation of a global error boundary component for handling application-wide errors in Next.js. Must include html and body tags as it replaces the root layout when active.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client' // Error boundaries must be Client Components\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    // global-error must include html and body tags\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Kontent.ai Preview URL Configuration\nDESCRIPTION: This URL is configured in Kontent.ai project settings to enable preview mode for posts. The `{URLslug}` placeholder is dynamically replaced with the actual URL slug of the content item. `<KONTENT_PREVIEW_SECRET>` needs to be replaced with its corresponding value in the `.env.local` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_6\n\nLANGUAGE: plain\nCODE:\n```\nhttp://localhost:3000/api/preview?secret=<KONTENT_PREVIEW_SECRET>&slug={URLslug}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with create-next-app - Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-unsplash example. It leverages the create-next-app tool to bootstrap the project with the specified template and project name. The tool downloads the template from the specified repository and initializes the project structure, installing necessary dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-unsplash with-unsplash-app\n```\n\n----------------------------------------\n\nTITLE: TurboPack Module Imports and Exports in JavaScript\nDESCRIPTION: Parts demonstrate the use of TurboPack for importing and exporting modules in a logical compilation unit. Components imported are exported with assertions for TurboPack variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';\nimport { NextResponse } from 'next/server';\nimport { ClientComponent } from '../../ClientComponent';\nimport 'next/server';\nimport '../../ClientComponent';\nimport 'my-module/MyModuleClientComponent';\nfunction GET() {\n    return NextResponse.json({\n        clientComponent: typeof ClientComponent,\n        myModuleClientComponent: typeof MyModuleClientComponent\n    });\n}\nexport { GET };\nexport { GET as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { NextResponse } from 'next/server';\nexport { NextResponse as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { ClientComponent } from '../../ClientComponent';\nexport { ClientComponent as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';\nexport { MyModuleClientComponent as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { GET } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export GET\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with OpenTelemetry example using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the `with-opentelemetry` example from the `create-next-app` tool, but uses Yarn as the package manager. It downloads the necessary files and sets up the project with OpenTelemetry instrumentation. The resulting application directory will be named `with-opentelemetry-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-opentelemetry with-opentelemetry-app\n```\n\n----------------------------------------\n\nTITLE: Memoizing Data Requests with React Cache in JavaScript\nDESCRIPTION: Shows how to use React's cache function to memoize data fetches in JavaScript, preventing duplicate requests when the same data is needed for both metadata and page rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cache } from 'react'\nimport { db } from '@/app/lib/db'\n\n// getPost will be used twice, but execute only once\nexport const getPost = cache(async (slug) => {\n  const res = await db.query.posts.findFirst({ where: eq(posts.slug, slug) })\n  return res\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Configuration File\nDESCRIPTION: This code snippet defines the `next.config.mjs` file, which configures the Next.js application.  It sets the `output` to 'export', indicating a Single-Page Application (SPA), and changes the build output directory to `./dist/`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Integrating WebVitals into Layout Component with Next.js\nDESCRIPTION: This example integrates the custom WebVitals component into a Next.js app layout. It demonstrates how to include the WebVitals component, indicating that metrics are reported at the layout level. Requires next/web-vitals for metrics reporting.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebVitals } from './_components/web-vitals'\n\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Layout with Dynamic Route Parameters (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to access dynamic route parameters within a layout component using the `params` prop. It utilizes `async/await` to resolve the promise containing the parameters, and extracts the `team` parameter for use within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Layout({\n  params,\n}: {\n  params: Promise<{ team: string }>\n}) {\n  const { team } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot test (Pages Router)\nDESCRIPTION: This snippet shows an example of a snapshot test for the Home component when using the Pages Router.  It renders the Home component and compares the rendered output to a stored snapshot.  If there are any unexpected changes, the test will fail.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '@testing-library/react'\nimport Home from '../pages/index'\n\nit('renders homepage unchanged', () => {\n  const { container } = render(<Home />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram\nDESCRIPTION: This is a Mermaid diagram representing dependencies or relationships between items in a system. It defines nodes (Item1, Item2, etc.) and their connections (Item3 --> Item2), illustrating the flow or interactions within the system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item6[\"export run\"];\n    Item3 --> Item2;\n    Item5 --> Item3;\n    Item5 --> Item4;\n    Item5 --> Item1;\n    Item6 --> Item5;\n```\n\n----------------------------------------\n\nTITLE: Key Hash Range Example - SST File Layout After Compaction\nDESCRIPTION: Example showing the optimized layout of SST files after compaction, where overlapping ranges have been merged and organized into non-overlapping segments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nkey hash range: | 0    ...    u64::MAX |\nSST 1':           |-------|\nSST 2':                   |------|\nSST 3':                          |-----|\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application using the api-routes-apollo-server example. It bootstraps the project with the necessary dependencies and configurations for integrating Apollo GraphQL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example api-routes-apollo-server api-routes-apollo-server-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses `create next-app` with Yarn to bootstrap a new Next.js project based on the `with-graphql-gateway` example. It will create a directory named `with-graphql-gateway-app` with the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-graphql-gateway with-graphql-gateway-app\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting RouteModule Components in JavaScript\nDESCRIPTION: This snippet imports multiple components such as requestAsyncStorage, workAsyncStorage, and serverHooks from a module and then exports them for further use. These components are essential for managing asynchronous operations and server hooks within a routing context. The assertions ensure that the components are configured correctly in the TurboPack environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as routeModule } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nconst { requestAsyncStorage, workAsyncStorage, serverHooks } = routeModule;\nexport { requestAsyncStorage as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { workAsyncStorage as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { serverHooks as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbopack in TypeScript\nDESCRIPTION: Example of basic Turbopack configuration in a Next.js TypeScript configuration file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  turbopack: {\n    // ...\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application from the 'with-mobx' example. This approach sets up the project with pre-configured dependencies and files, streamlining the integration of MobX with Next.js. The `with-mobx-app` argument defines the directory name for the created application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mobx with-mobx-app\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exports in 'use server' Files - JavaScript\nDESCRIPTION: This snippet shows examples of incorrect export statements in 'use server' files, where only async functions should be exported. The two examples demonstrate errors: one exporting a non-function value and another overlooking the async keyword.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-use-server-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\"\n\n// ❌ This is incorrect: only async functions are allowed.\nexport const value = 1\n\n// ❌ This is incorrect: missed the `async` keyword.\nexport function getServerData() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure Overview - Text\nDESCRIPTION: This text snippet outlines the file structure of the Todo app. It displays the organization of files and directories crucial for the project format, aiding developers in understanding the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n├── package.json\n├── lib\n│   ├── tigris.ts\n├── db\n│   └── models\n│       └── todoItems.ts\n└── pages\n    ├── index.tsx\n    └── api\n        ├── item\n        │   ├── [id].ts\n        └── items\n            ├── index.ts\n            └── search.ts\n```\n\n----------------------------------------\n\nTITLE: Exporting Functionality in JavaScript Part 12\nDESCRIPTION: Multiple exports are defined from different parts, consolidating them into a single module scope. It underpins handling comprehensive exports with TurboPack logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { foo } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foo\"\n};\nexport { external1 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external1\"\n};\nexport { external2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external2\"\n};\nexport { foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foobar\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with reactstrap using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application using the with-reactstrap example.  It provides the initial project structure for a Next.js application utilizing reactstrap components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-reactstrap with-reactstrap-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Cloudinary Example - Bash\nDESCRIPTION: This snippet demonstrates how to use the command line to create a new Next.js application based on the Cloudinary example. It utilizes package managers like npm, Yarn, or pnpm to initialize the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cloudinary/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-cloudinary with-cloudinary-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-cloudinary with-cloudinary-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-cloudinary with-cloudinary-app\n```\n\n----------------------------------------\n\nTITLE: Verification Metadata HTML Output\nDESCRIPTION: This code shows the HTML output generated from the verification metadata configuration. It includes meta tags for Google Site Verification, Yahoo site key, Yandex verification, and other verification methods like email and links using the `me` property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"google-site-verification\" content=\"google\" />\n<meta name=\"y_key\" content=\"yahoo\" />\n<meta name=\"yandex-verification\" content=\"yandex\" />\n<meta name=\"me\" content=\"my-email\" />\n<meta name=\"me\" content=\"my-link\" />\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 10 using npm\nDESCRIPTION: Command to upgrade Next.js to version 10 using npm package manager. This will update the next package in your project's dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@10\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind Typography (JSX - Pages Router)\nDESCRIPTION: This JavaScript code demonstrates how to apply Tailwind typography styles to a shared MDX layout within a Next.js application using the Pages Router. By applying the `prose` class, the typography plugin provides styling for the MDX content. Additional classes customize the styling for headings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ETag Generation in Next.js\nDESCRIPTION: This snippet shows how to disable ETag generation in a Next.js application. By setting the `generateEtags` option to false in the `next.config.js` file, developers can control the cache behavior of their app. This is particularly useful for managing server responses based on specific caching strategies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/generateEtags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  generateEtags: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Metadata with Data Fetching (JavaScript)\nDESCRIPTION: Shows how to dynamically generate metadata based on fetched data using JavaScript in Next.js. This example fetches post information using the slug parameter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateMetadata({ params, searchParams }, parent) {\n  const slug = (await params).slug\n\n  // fetch post information\n  const post = await fetch(`https://api.vercel.app/blog/${slug}`).then((res) =>\n    res.json()\n  )\n\n  return {\n    title: post.title,\n    description: post.description,\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\n----------------------------------------\n\nTITLE: Regex-Based Path Exclusion in Next.js Middleware\nDESCRIPTION: This snippet shows an advanced matcher configuration using regex negative lookahead to exclude specific paths from middleware processing, such as API routes and static files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Session Data (Jose Library) - JavaScript\nDESCRIPTION: This snippet decrypts a session using the jose library.  It verifies the session token against the encoded secret key and returns the payload if valid.  It also handles potential errors during verification.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function decrypt(session) {\n  try {\n    const { payload } = await jwtVerify(session, encodedKey, {\n      algorithms: ['HS256'],\n    })\n    return payload\n  } catch (error) {\n    console.log('Failed to verify session')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for HMR WebSocket\nDESCRIPTION: This Nginx configuration snippet configures a proxy pass for the Webpack HMR (Hot Module Replacement) WebSocket connection. It is necessary when proxying requests to the Next.js development server to ensure that HMR events are correctly handled.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /_next/webpack-hmr {\n    proxy_pass http://localhost:3000/_next/webpack-hmr;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Zod - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Zod for form validation in a Next.js API route using TypeScript. It defines a schema for validating the request body and parses the incoming data using the schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { z } from 'zod'\n\nconst schema = z.object({\n  // ...\n})\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const parsed = schema.parse(req.body)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Next.js Project - Bash\nDESCRIPTION: This snippet demonstrates how to clone the ButterCMS Next.js starter project from GitHub and install the necessary dependencies using npm or yarn. Prerequisites include having Git and either npm or yarn installed. The commands set up the local environment for further development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ButterCMS/nextjs-starter-buttercms.git\ncd nextjs-starter-buttercms\nnpm install # or yarn install\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Exceptions in TurboPack\nDESCRIPTION: Sets up a global uncaught exception handler to forward errors to the Rust process via IPC. This ensures that any unhandled errors in the Node.js process are properly communicated back to the parent Rust process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nprocess.on(\"uncaughtException\", (err)=>{\n    IPC.sendError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Turbopack Trace File (Bash)\nDESCRIPTION: This code snippet demonstrates how to generate a trace file for debugging performance or memory issues with Turbopack. By prepending `NEXT_TURBOPACK_TRACING=1` to the `next dev` command, a `.next/trace-turbopack` file is generated, which can be shared with the Next.js team for investigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/08-turbopack.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nNEXT_TURBOPACK_TRACING=1 next dev --turbopack\n```\n\n----------------------------------------\n\nTITLE: Custom Document Class Implementation\nDESCRIPTION: Implements a custom Document class that extends Next.js Document with custom styles and layout structure. Includes getInitialProps for server-side props and render method for document structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDocument extends Document {\n    static async getInitialProps(ctx) {\n        const initialProps = await Document.getInitialProps(ctx);\n        return {\n            ...initialProps,\n            styles: _jsxs(_Fragment, {\n                children: [\n                    initialProps.styles,\n                    _jsx(\"style\", {\n                        dangerouslySetInnerHTML: {\n                            __html: `html { background: hotpink; }`\n                        }\n                    })\n                ]\n            })\n        };\n    }\n    render() {\n        return _jsxs(Html, {\n            children: [\n                _jsx(Head, {}),\n                _jsxs(\"body\", {\n                    children: [\n                        _jsx(Main, {}),\n                        _jsx(NextScript, {})\n                    ]\n                })\n            ]\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Export Client Component Loader Functions with Turbopack in JavaScript\nDESCRIPTION: Exports functions related to client component loaders using Turbopack assertions to specify parts. It's a setup for seamless integration with Turbopack, handling specific exports for managing client component loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { wrapClientComponentLoader } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export wrapClientComponentLoader\"\n};\nexport { getClientComponentLoaderMetrics } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getClientComponentLoaderMetrics\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Frame-Options header (JavaScript)\nDESCRIPTION: This code shows how to configure the `X-Frame-Options` header, which indicates whether the site should be allowed to be displayed within an `iframe`. Setting the value to `SAMEORIGIN` allows the site to be displayed in an iframe only if the origin is the same.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'X-Frame-Options',\n  value: 'SAMEORIGIN'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining generateImageMetadata with Params (TSX)\nDESCRIPTION: This code snippet shows how to define the `generateImageMetadata` function in TypeScript, including an optional `params` argument. The `params` object contains dynamic route parameters from the root segment down to the segment where `generateImageMetadata` is called.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateImageMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Image Import in Next.js Configuration\nDESCRIPTION: This snippet illustrates how to disable the built-in loader for static images in a Next.js application by modifying the `next.config.js`. This is useful when your application does not utilize image imports with `next/image`, allowing for more flexibility in image handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/custom-document-image-import.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Phase 2\nDESCRIPTION: This mermaid diagram represents the module dependencies in phase 2. It shows the different items and their dependencies, visualizing the flow of data and execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item10[\"export a\"];\n    Item11;\n    Item11[\"export b\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item6 --> Item2;\n    Item6 --> Item3;\n    Item6 --> Item5;\n    Item7 --> Item6;\n    Item7 --> Item4;\n    Item8 --> Item6;\n    Item8 -.-> Item7;\n    Item9 --> Item8;\n    Item9 --> Item6;\n    Item10 --> Item8;\n    Item11 --> Item9;\n```\n\n----------------------------------------\n\nTITLE: Authenticated Data Fetching with Route Handlers (JavaScript)\nDESCRIPTION: The JavaScript version implements secure data fetching by ensuring authenticated access using route handlers. Verification of user sessions is critical, with unauthorized function calls for failed authentication, enforcing endpoint security.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\n\nexport async function GET() {\n  const session = await verifySession()\n\n  // If the user is not authenticated, return a 401 and render unauthorized.tsx\n  if (!session) {\n    unauthorized()\n  }\n\n  // Fetch data\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enable AMP-Only Page in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to enable AMP-only mode for a Next.js page using the `config` export.  Setting `amp: true` will ensure the page is only served as AMP HTML and automatically optimized with AMP Optimizer. No client-side JavaScript runtime is included.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-amp.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = { amp: true }\n```\n\n----------------------------------------\n\nTITLE: Adding test script to package.json\nDESCRIPTION: This JSON snippet shows how to add a `test` script to the `package.json` file. The script executes the `vitest` command, which runs the Vitest test runner. This allows running tests with `npm run test`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"vitest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Mode with setPreviewData in Next.js (Basic)\nDESCRIPTION: This JavaScript code snippet shows the basic implementation of enabling preview mode by calling `res.setPreviewData({})` within a Next.js API route handler.  This function sets cookies on the browser, activating preview mode for subsequent requests. It's a minimal example for testing preview mode functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  // ...\n  res.setPreviewData({})\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with React Intl Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-react-intl` example.  Each command uses a different package manager (npm, yarn, and pnpm) to achieve the same result. The resulting project will be named `with-react-intl-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-intl with-react-intl-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-intl with-react-intl-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-intl with-react-intl-app\n```\n\n----------------------------------------\n\nTITLE: Using Public Environment Variable - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use a public environment variable (`NEXT_PUBLIC_ANALYTICS_ID`) in a Next.js component. Because it's prefixed with `NEXT_PUBLIC_`, the variable's value will be inlined during build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport setupAnalyticsService from '../lib/my-analytics-service'\n\n// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.\n// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n\nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n\nexport default HomePage\n```\n\n----------------------------------------\n\nTITLE: Updated Pattern for Separate Dynamic Module Loading\nDESCRIPTION: Corrected implementation showing how to load components separately using individual dynamic imports, which is the recommended approach after the deprecation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-modules.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst Hello1 = dynamic(() => import('../components/hello1'))\nconst Hello2 = dynamic(() => import('../components/hello2'))\n\nfunction HelloBundle({ title }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  )\n}\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n\n----------------------------------------\n\nTITLE: Using MDX Layout in an MDX Page\nDESCRIPTION: This MDX code demonstrates how to import and use a shared layout component within an MDX page. The `MdxLayout` component wraps the content of the MDX page, providing a consistent layout and styling. The `MDXPage` function exports the wrapped content as the default export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_18\n\nLANGUAGE: mdx\nCODE:\n```\nimport MdxLayout from '../components/mdx-layout'\n\n# Welcome to my MDX page!\n\nexport default function MDXPage({ children }) {\n  return <MdxLayout>{children}</MdxLayout>\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component in TypeScript that Uses BaseButton\nDESCRIPTION: This TypeScript snippet showcases a 'Page' component that imports the 'BaseButton' component and its corresponding styles from 'page.module.css'. It renders the button within the page, applying its primary styling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n\nexport default function Page() {\n  return <BaseButton className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing default.js with params in TypeScript for Next.js Parallel Routes\nDESCRIPTION: This code demonstrates how to implement a default.js file in TypeScript that receives dynamic route parameters. The params prop is a promise that resolves to an object containing the dynamic route parameters from the root segment down to the slot's subpages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Default({\n  params,\n}: {\n  params: Promise<{ artist: string }>\n}) {\n  const { artist } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Chunking in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable CSS chunking in a Next.js application using the `experimental.cssChunking` option within the `next.config.ts` file. The default value is `true`, which merges CSS files to reduce the number of chunks and requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cssChunking.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig = {\n  experimental: {\n    cssChunking: true, // default\n  },\n} satisfies NextConfig\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with next-sitemap example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-next-sitemap example. It automates the setup process, including installing necessary dependencies and configuring the project structure. The target directory is specified as with-next-sitemap-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-next-sitemap with-next-sitemap-app\n```\n\n----------------------------------------\n\nTITLE: Partially Generating Static Parameters in Next.js\nDESCRIPTION: Uses generateStaticParams to statically render a subset of dynamic routes at build time, with the rest being rendered on-demand. This example renders only the first 10 posts at build time.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  // Render the first 10 posts at build time\n  return posts.slice(0, 10).map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with pnpm\nDESCRIPTION: This command employs pnpm to generate a new Next.js application from the with-joi example. It creates a new project named 'with-joi-app' based on the provided template.  pnpm is required as a global package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-joi with-joi-app\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-prettier (bash)\nDESCRIPTION: This snippet provides commands to install the `eslint-config-prettier` package using npm, yarn, pnpm, and bun. This package disables ESLint rules that may conflict with Prettier, ensuring consistent code formatting.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint-config-prettier\n\nyarn add --dev eslint-config-prettier\n\npnpm add --save-dev eslint-config-prettier\n\nbun add --dev eslint-config-prettier\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Object in Next.js (TSX)\nDESCRIPTION: This snippet illustrates how to define a static metadata object in a Next.js layout or page using TypeScript.  It imports the `Metadata` type from 'next' and creates a constant `metadata` object with a `title` property. This object will be used to populate the page's metadata tags.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_70\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Link with URL Object in JavaScript\nDESCRIPTION: Illustrates the usage of Next.js Link with a URL object in JavaScript, which automatically formats the URL. It defines pathname and query properties, relying on Next.js URL handling capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link\n          href={{\n            pathname: '/about',\n            query: { name: 'test' },\n          }}\n        >\n          About us\n        </Link>\n      </li>\n      <li>\n        <Link\n          href={{\n            pathname: '/blog/[slug]',\n            query: { slug: 'my-post' },\n          }}\n        >\n          Blog Post\n        </Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry with @vercel/otel (JavaScript)\nDESCRIPTION: Registers OpenTelemetry using the `@vercel/otel` package within the `instrumentation.js` file. This function configures the service name for the OpenTelemetry instance, allowing for easy identification of the application within observability tools. The service name is set to 'next-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Chunking in Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable CSS chunking in a Next.js application using the `experimental.cssChunking` option within the `next.config.js` file. The default value is `true`, which merges CSS files to reduce the number of chunks and requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cssChunking.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    cssChunking: true, // default\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Jest Example\nDESCRIPTION: This snippet shows the commands to bootstrap a new Next.js application using the 'with-jest' example, employing different package managers like npm, Yarn, and pnpm. It requires running the respective command in the terminal for the desired package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-jest with-jest-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-jest with-jest-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-jest with-jest-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Rewrites for Incremental Next.js Adoption\nDESCRIPTION: This configuration shows how to set up fallback rewrites that proxy to an existing website after checking all Next.js routes. This approach enables incremental migration to Next.js without constantly updating rewrite configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,\n        },\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Analytics on a single route (Pages Router - JSX)\nDESCRIPTION: This code snippet demonstrates how to include Google Analytics on a single route in a Next.js application using the Pages Router.  It imports the `GoogleAnalytics` component from `@next/third-parties/google` and initializes it with a Google Analytics ID.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Config (Search Parameter)\nDESCRIPTION: This example illustrates how to specify a required search parameter in the `remotePatterns` configuration within the `next.config.js` file, ensuring that only images with a specific query string are allowed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'assets.example.com',\n        search: '?v=1727111025337',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Async Metadata Function in Next.js (TSX)\nDESCRIPTION: This snippet demonstrates how to define an asynchronous function that returns a promise of a metadata object in Next.js using TypeScript. It uses the `Promise<Metadata>` return type to indicate that the function performs an asynchronous operation. This allows metadata generation to depend on asynchronous data fetching or computation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_72\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport async function generateMetadata(): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Config in next.config.js (JS)\nDESCRIPTION: This snippet demonstrates how to extend the webpack configuration in Next.js by defining a function that modifies the webpack config inside `next.config.js`. It receives the webpack config and an object containing build information as arguments. The modified config must be returned.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/webpack.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Definition (TypeScript)\nDESCRIPTION: This code snippet defines a root layout component in TypeScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Dynamic Segments in App Router\nDESCRIPTION: Generate dynamic links using template literals for dynamic route segments, such as creating a list of blog post links with unique slugs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\ninterface Post {\n  id: number\n  title: string\n  slug: string\n}\n\nexport default function PostList({ posts }: { posts: Post[] }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining npm scripts for Next.js\nDESCRIPTION: This JSON snippet defines npm scripts in `package.json` for common Next.js development and production tasks.  These scripts are used to start the development server, build the application for production, and start the production server.  The snippet is essential for deploying Next.js applications to Node.js hosting providers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Component with Suspense in JavaScript\nDESCRIPTION: Shows how to properly wrap a search component using useSearchParams within a Suspense boundary to prevent client-side rendering issues. The example demonstrates the correct implementation pattern for JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\nimport { Suspense } from 'react'\n\nfunction Search() {\n  const searchParams = useSearchParams()\n\n  return <input placeholder=\"Search...\" />\n}\n\nexport function Searchbar() {\n  return (\n    // You could have a loading skeleton as the `fallback` too\n    <Suspense>\n      <Search />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fetch with Revalidation in Next.js App Directory\nDESCRIPTION: This snippet demonstrates how to use fetch() with a revalidation option in the app directory to automatically cache and update data fetched from an external source, enhancing responsiveness.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getPosts() {\n  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })\n  const data = await res.json()\n\n  return data.posts\n}\n\nexport default async function PostList() {\n  const posts = await getPosts()\n\n  return posts.map((post) => <div>{post.name}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Route Handler\nDESCRIPTION: This code snippet initializes a basic route handler in Next.js using the App Router. It exports an async function `GET` that responds with an empty string.  This is the first step in setting up Draft Mode, providing a basic endpoint to build upon.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {\n  return new Response('')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Components with Styled-components in TypeScript\nDESCRIPTION: Illustrates using a custom component with styled-components in a Next.js application. This example highlights using the passHref property of the Link component to pass href to nested components. Requires 'next/link' and 'styled-components'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\nimport styled from 'styled-components'\n\n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n\nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n\nexport default NavLink\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running the development server - Yarn\nDESCRIPTION: These commands use Yarn to install the project's dependencies and then start the Next.js development server. `yarn install` installs all the packages listed in the `package.json` file. `yarn dev` starts the development server, typically on port 3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Password Output Example\nDESCRIPTION: Shows an example of the output from the `pscale password create` command. The important values are USERNAME, ACCESS HOST URL, and PLAIN TEXT, which are used to construct the `DATABASE_URL`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPassword production-password was successfully created.\nPlease save the values below as they will not be shown again\n\n  NAME                  USERNAME       ACCESS HOST URL                     ROLE               PLAIN TEXT\n --------------------- -------------- ----------------------------------- ------------------ -------------------------------------------------------\n  production-password   xxxxxxxxxxxxx   xxxxxx.us-east-2.psdb.cloud   Can Read & Write   pscale_pw_xxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Handling with useActionState in Next.js\nDESCRIPTION: React component implementing client-side error handling using useActionState hook. Displays error messages from server actions and handles form submission state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction, pending] = useActionState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\">{state?.message}</p>\n      <button disabled={pending}>Sign up</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction, pending] = useActionState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\">{state?.message}</p>\n      <button disabled={pending}>Sign up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct href and as Usage in Next.js\nDESCRIPTION: This snippet illustrates the proper use of href and as attributes in the next/link component. It shows a compatible setup where an external URL is used only in the href attribute, eliminating the need for an as attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-relative-url-external-as.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page(props) {\n  return (\n    <>\n      <Link href=\"mailto:john@example.com\">\n        <a>Invalid link</a>\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js app with Stitches using pnpm\nDESCRIPTION: This command employs pnpm to initialize a new Next.js application based on the with-stitches example. It invokes the create next-app command with the given example and application name. It presupposes that pnpm is installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-stitches with-stitches-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-cookies-next example. It initializes a new project directory named 'with-cookies-next-app' with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-cookies-next with-cookies-next-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Yarn\nDESCRIPTION: This command uses `create-next-app` via `yarn` to create a new Next.js application based on the `blog-starter` example.  It downloads the specified example and creates a new project named `blog-starter-app` in the current directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example blog-starter blog-starter-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Sitefinity example\nDESCRIPTION: This command initializes a new Next.js application using the cms-sitefinity example. It utilizes pnpm to execute the create next-app command with the specified example and target directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-sitefinity cms-sitefinity-app\n```\n\n----------------------------------------\n\nTITLE: Exporting Variable a as d in Javascript\nDESCRIPTION: This snippet exports the variable 'a' as 'd' from a module, utilizing a Turbopack-specific assertion. Like other exports, it's part of Turbopack's module handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport { a as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to run the Next.js local development server after setting up the project and configuring environment variables. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Original Export Statement in JavaScript\nDESCRIPTION: Initial export statement that re-exports and renames the 'cat' import from './lib' to 'fakeCat'\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/export-named/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport { cat as fakeCat } from \"./lib\";\n```\n\n----------------------------------------\n\nTITLE: Creating Default Next.js Application\nDESCRIPTION: Creates a new Next.js application using the default template, which will prompt the user for project configuration preferences.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with dynamic-import example (yarn)\nDESCRIPTION: This command uses `create next-app` with yarn to create a new Next.js application based on the `with-dynamic-import` example. It creates a directory named `with-dynamic-import-app` containing the new project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-dynamic-import with-dynamic-import-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Unoptimized Image Component\nDESCRIPTION: Demonstrates how to create an unoptimized image component that maintains Next.js Image features like blur-up placeholders while disabling optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Blog Post Paths in JavaScript\nDESCRIPTION: This snippet defines static paths for a blog page with dynamic segments. The `getStaticPaths` function configures paths for rendering blog posts statically in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticPaths = () => ({\n  paths: ['/blog/conflicting', '/blog/another'],\n  fallback: false,\n})\n\nexport default function Blog() {\n  return 'Blog!'\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with No Cache in Next.js\nDESCRIPTION: This snippet demonstrates how to perform a fetch request that does not employ caching by setting the 'cache' option to 'no-store'. This ensures that data is always retrieved fresh from the source instead of relying on any cache mechanisms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })\n```\n\n----------------------------------------\n\nTITLE: Configuring runtime in Next.js (JS)\nDESCRIPTION: This code snippet demonstrates how to configure the `runtime` option in a Next.js layout, page, or route using JavaScript. The `runtime` configuration specifies the environment in which the route segment will be executed, either Node.js or Edge. It affects the capabilities and performance characteristics of the route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application using the with-babel-macros example. It bootstraps a project with the necessary configurations for using babel-macros.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-babel-macros with-babel-macros-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom App to Support Per-Page Layouts in Next.js\nDESCRIPTION: A custom App component that checks for and applies page-specific layouts. It uses the getLayout function defined on page components, or falls back to rendering the page directly if no layout is specified.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MyApp({ Component, pageProps }) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n\n  return getLayout(<Component {...pageProps} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Webiny Example (Yarn)\nDESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cms-webiny` example. They use `create-next-app` with npm, yarn, and pnpm package managers. This will create a new project directory named `cms-webiny-app` with the specified template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-webiny cms-webiny-app\n```\n\n----------------------------------------\n\nTITLE: Implementing PPR in JavaScript Page Component\nDESCRIPTION: JavaScript example showing how to implement PPR in a Next.js page component with static and dynamic content using Suspense\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent, Fallback } from \"@/app/ui\"\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using npm\nDESCRIPTION: This command installs the project's dependencies using npm. It is a prerequisite for running the development server and other project-related tasks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Changing Directory - Bash\nDESCRIPTION: This command changes the current directory to `with-edgedb-app`. This is assumed to be the directory created in the previous steps when creating the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd with-edgedb-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-hls-js' example. It uses the create next-app command and defines the example and application name. The created application will reside in a folder named 'with-hls-js-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-hls-js with-hls-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Temporal Project with NPX\nDESCRIPTION: Command to create a new Next.js project with Temporal integration using NPX.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-temporal next-temporal-app\n```\n\n----------------------------------------\n\nTITLE: Transforming AMP Page with withamp-to-config Codemod\nDESCRIPTION: This example shows how the withamp-to-config codemod transforms an AMP page using the withAmp HOC to use the Next.js 9 page configuration format.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { withAmp } from 'next/amp'\n\nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport default withAmp(Home)\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 4 Implementation\nDESCRIPTION: This module imports 'foobar' from Part 3, creates a constant 'foo' based on it, and exports it. Shows Turbopack's handling of imports, constant declarations, and exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nconst foo = foobar;\nexport { foo };\nexport { foo as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using pnpm\nDESCRIPTION: This command uses `create-next-app` with pnpm to bootstrap a new Next.js application based on the `with-context-api` example. The new application will be named `with-context-api-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-context-api with-context-api-app\n```\n\n----------------------------------------\n\nTITLE: Declare IPC constant in Javascript\nDESCRIPTION: This code snippet declares a constant `ipc` and assigns it the value of the imported `IPC` object. This creates a local reference to the inter-process communication object, allowing the module to interact with other processes. It makes `IPC` functionality more accessible within the current module scope.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ipc = IPC;\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Middleware with Path-Specific Logic in Next.js\nDESCRIPTION: Demonstrates how to create a root-level middleware file that handles multiple path-specific middleware logic using NextRequest. Shows how to conditionally execute middleware functions based on URL paths using startsWith() checks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/nested-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    // This logic is only applied to /about\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    // This logic is only applied to /dashboard\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Script component with dangerouslySetInnerHTML in JSX\nDESCRIPTION: This demonstrates the usage of `dangerouslySetInnerHTML` to include an inline script within the `next/script` component. It's crucial to be cautious when using `dangerouslySetInnerHTML` to avoid potential XSS vulnerabilities.  The `id` attribute is used for identification.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Links with Next.js Link in TypeScript\nDESCRIPTION: Demonstrates how to dynamically create links in a Next.js application using TypeScript and the Link component. It includes linking to dynamic routes and passing post details as parameters. Requires the 'next' package and the Link component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending invalid body with 204 status code in Next.js API route\nDESCRIPTION: This code snippet shows an example of an invalid Next.js API route where a 204 status code is used with a response body. The `handler` function receives the request and response objects, and attempts to send a response body along with the 204 status code, which is an invalid operation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-api-status-body.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.status(204).send('invalid body')\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode in API Route (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to enable Draft Mode by setting a cookie using `res.setDraftMode({ enable: true })` within an API route handler function. This sets a cookie that triggers Draft Mode for statically generated pages on subsequent requests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function handler(req, res) {\n  // ...\n  res.setDraftMode({ enable: true })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Run Relay compiler (pnpm)\nDESCRIPTION: This command uses pnpm to execute the 'relay' script defined in the project's package.json. The purpose is to perform Relay ahead-of-time compilation, which is required after any edits to components that query data with Relay. It ensures optimal performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm relay\n```\n\n----------------------------------------\n\nTITLE: Optimizing Header Access in Next.js Components\nDESCRIPTION: Demonstrates proper header access patterns by moving header-related logic deeper into the component tree for better organization and performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Inbox({ token }) {\n  const email = await getEmail(token)\n  return (\n    <ul>\n      {email.map((e) => (\n        <EmailRow key={e.id} />\n      ))}\n    </ul>\n  )\n}\n\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const token = (await cookies()).get('token')\n  return (\n    <Suspense fallback=\"loading your inbox...\">\n      <Inbox token={token}>\n    </Suspense>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function Inbox() {\n  const token = (await cookies()).get('token')\n  const email = await getEmail(token)\n  return (\n    <ul>\n      {email.map((e) => (\n        <EmailRow key={e.id} />\n      ))}\n    </ul>\n  )\n}\n\nexport default async function Page() {\n  return (\n    <Suspense fallback=\"loading your inbox...\">\n      <Inbox>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Verbose Logging in Next.js Dev\nDESCRIPTION: This command starts the Next.js development server with verbose logging enabled. This provides more detailed information about what's happening during development, which can be helpful for debugging performance issues. It requires npm and a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --verbose\n```\n\n----------------------------------------\n\nTITLE: Client Component Form (JavaScript)\nDESCRIPTION: This example shows a client component with a form, written in JavaScript, which triggers a server action to handle form submission and redirect. The action is called `navigate` and imported from `./actions`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { navigate } from './actions'\n\nexport function ClientRedirect() {\n  return (\n    <form action={navigate}>\n      <input type=\"text\" name=\"id\" />\n      <button>Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Output Example in Bash\nDESCRIPTION: Displays sample output from the 'next build' command, showing route information including size and loading characteristics. The output indicates static and dynamic routes with their respective sizes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n\n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Shared Layout with Custom App in Next.js\nDESCRIPTION: Using a custom App component to apply a consistent layout across all pages in a Next.js application. This approach preserves component state when navigating between pages, providing a Single-Page Application experience.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../components/layout'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag from Router in Next.js\nDESCRIPTION: This snippet utilizes the Next.js useRouter hook to extract the 'tag' parameter from the URL query. It returns the tag value, or null if the tag is not present. This functionality is essential for displaying dynamic content based on URL parameters in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/tags/[tag].mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRouter } from \"next/router\";\n\nexport const TagName = () => {\n  const { tag } = useRouter().query;\n  return tag || null;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring X-DNS-Prefetch-Control header (JavaScript)\nDESCRIPTION: This code snippet shows how to configure the `X-DNS-Prefetch-Control` header, which controls DNS prefetching. Setting the value to `on` allows browsers to proactively perform domain name resolution on external resources.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'X-DNS-Prefetch-Control',\n  value: 'on'\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Server Action in Next.js\nDESCRIPTION: This snippet shows how to redirect the user after completing a Server Action using the redirect API from Next.js. It also demonstrates revalidating a cache tag before redirection.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Directories in next.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure ESLint to only run on specific directories (pages and utils in this case) during production builds. This is done by using the `eslint.dirs` option inside `next.config.js`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  eslint: {\n    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with GraphQL example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the api-routes-graphql example. It initializes the project with all the necessary files and dependencies for a GraphQL API. The new application will be named 'api-routes-graphql-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example api-routes-graphql api-routes-graphql-app\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Module Parts in TurboPack (JavaScript)\nDESCRIPTION: This snippet demonstrates how to export multiple parts from different TurboPack modules, each with its own assertion for the specific part being exported.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport { c1_1 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export c1_1\"\n};\nexport { c1_3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export c1_3\"\n};\nexport { c2_2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export c2_2\"\n};\n```\n\n----------------------------------------\n\nTITLE: Running tests with npm/yarn/pnpm/bun\nDESCRIPTION: These commands demonstrate how to run tests using npm, yarn, pnpm or bun. They all execute the `test` script defined in the `package.json` file, which in turn runs Vitest.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n# or\nyarn test\n# or\npnpm test\n# or\nbun test\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Apollo Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application pre-configured with the Apollo Server and Client example. It bootstraps the project with the necessary dependencies and configuration files. The new application will be located in the directory named 'api-routes-apollo-server-and-client-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app\n```\n\n----------------------------------------\n\nTITLE: Default Caching Headers for Public Assets in Next.js\nDESCRIPTION: This snippet displays the default `Cache-Control` header applied to assets in the `public` folder. Next.js sets a `max-age=0` to prevent aggressive caching due to the potential for these assets to change. This ensures that users receive the latest version of the static files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/11-static-assets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nCache-Control: public, max-age=0\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Cosmos DB Example using pnpm\nDESCRIPTION: This command initializes a new Next.js application using the `with-azure-cosmos` example.  It uses `pnpm create next-app` to bootstrap the project, pre-configured for integration with Azure Cosmos DB. The created application is placed in the `with-azure-cosmos-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-azure-cosmos with-azure-cosmos-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Expire Time in Next.js\nDESCRIPTION: This snippet demonstrates how to set a custom 'expireTime' in the Next.js configuration file 'next.config.js', which determines the `Cache-Control` header for ISR enabled pages. The configuration specifies the expire time in seconds and impacts how the CDN manages stale content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/expireTime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // one hour in seconds\n  expireTime: 3600,\n}\n```\n\n----------------------------------------\n\nTITLE: Copying .env.local.example to .env.local\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is used to store environment variables specific to the local development environment. This file is typically ignored by Git to prevent sensitive information from being committed to the repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Tests - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to load environment variables in a testing environment using the `loadEnvConfig` function from the `@next/env` package. It is intended for use in a Jest global setup file or similar testing setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The below can be used in a Jest global setup file or similar for your testing set-up\nimport { loadEnvConfig } from '@next/env'\n\nexport default async () => {\n  const projectDir = process.cwd()\n  loadEnvConfig(projectDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Utility Functions\nDESCRIPTION: Re-exports utility functions like reportWebVitals and various unstable data fetching methods from TurboPack parts. These snippets show how different utility functions and experimental features are shared across the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { l as reportWebVitals } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nexport { reportWebVitals };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { p as unstable_getServerProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nexport { unstable_getServerProps };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { q as unstable_getServerSideProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nexport { unstable_getServerSideProps };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { o as unstable_getStaticParams } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nexport { unstable_getStaticParams };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { n as unstable_getStaticPaths } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -19\n};\nexport { unstable_getStaticPaths };\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { m as unstable_getStaticProps } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -18\n};\nexport { unstable_getStaticProps };\n\n```\n\n----------------------------------------\n\nTITLE: Linting specific directories and files using next lint (Bash)\nDESCRIPTION: This bash command demonstrates how to lint specific directories and files using the `next lint` command with the `--dir` and `--file` flags. This can be useful when you want to focus on a particular part of your codebase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnext lint --dir pages --dir utils --file bar.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Storybook example (Yarn)\nDESCRIPTION: This command uses `create next-app` via Yarn to generate a new Next.js application pre-configured with Storybook. It utilizes an example template to include the necessary Storybook setup and configurations. The `with-storybook-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-storybook with-storybook-app\n```\n\n----------------------------------------\n\nTITLE: Importing custom matchers in Jest setup (TypeScript)\nDESCRIPTION: This TypeScript snippet imports the `@testing-library/jest-dom` module, making its custom matchers available for use in Jest tests. By importing this module in a setup file, you can use matchers like `.toBeInTheDocument()` without needing to import them in every test file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@testing-library/jest-dom'\n```\n\n----------------------------------------\n\nTITLE: Next.js Page with Server-Side Code\nDESCRIPTION: This Next.js page utilizes server-side code (fs import) within the `getStaticProps` function.  Re-exporting this page's exports directly into another page can lead to the 'Module not found' error in the browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport fs from 'fs'\n\nexport default function A() {\n  return <main />\n}\n\nexport function getStaticProps() {\n  fs\n  return { props: {} }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-lingui example. It bootstraps a project with Lingui i18n pre-configured. The command should be executed in the terminal. Make sure you have Node.js and pnpm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-lingui with-lingui-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to generate a Next.js application using the 'with-hls-js' example. It uses the create next-app command, specifying both the example and target application name. A new directory called 'with-hls-js-app' will be created containing the Next.js app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-hls-js with-hls-js-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the `with-portals-ssr` example. It initializes a project named `with-portals-ssr-app` using the specified example from the Next.js repository. pnpm must be installed in the system for this command to work.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-portals-ssr with-portals-ssr-app\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Tags in Fetch Options - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set cache tags for fetched resources in Next.js. It allows for on-demand revalidation of data based on custom tags, providing fine control over caching behavior and data freshness.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nfetch(`https://...`, { next: { tags: ['collection'] } })\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 6 Implementation\nDESCRIPTION: Imports 'foobar' and Part 5, creates a copy of 'foobar', and exports it as 'g'. Shows how Turbopack handles value copying and exporting variables with renamed identifiers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nlet foobarCopy = foobar;\nexport { foobarCopy as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata in Next.js (Typescript)\nDESCRIPTION: This code defines metadata for a page in Next.js using TypeScript.  It exports a `metadata` object to configure the page's `<head>` elements such as the title.  The code imports the `Metadata` type from 'next' to provide type safety.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation with Styled JSX - TypeScript\nDESCRIPTION: This snippet demonstrates how to wrap the root layout component with the StyledJsxRegistry to ensure styles are applied to all children components within a Next.js application using TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport StyledJsxRegistry from './registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a basic Next.js page component that renders a heading and a link. It imports the `Link` component from `next/link` for navigation. The component is a functional component that returns JSX.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET API Route Handler in Next.js with TypeScript\nDESCRIPTION: This code defines an API route handler for GET requests in Next.js. It uses TypeScript for type safety and returns a JSON response with a greeting message. The handler is designed to be used as an API endpoint in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/url.js.LEGAL.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in jest.config.js\nDESCRIPTION: This JavaScript snippet shows how to configure the `moduleNameMapper` option in `jest.config.js` to align with the path aliases defined in `tsconfig.json` or `jsconfig.json`.  It ensures that Jest can correctly resolve imports using the defined aliases during testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoduleNameMapper: {\n  // ...\n  '^@/components/(.*)$': '<rootDir>/components/$1',\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: This code snippet demonstrates how to start the Next.js development server using npm, yarn, pnpm, or bun. It assumes that Node.js and one of these package managers are already installed. The server typically runs on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Support to Next.js Project\nDESCRIPTION: This snippet demonstrates a code addition to the Next.js configuration file (next.config.js) in order to build the application as a standalone app within a Docker image. It requires copying the Dockerfile to the project's root.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nmodule.exports = {\n  // ... rest of the configuration.\n  output: \"standalone\",\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Behavior in getStaticPaths\nDESCRIPTION: This snippet configures the fallback behavior for pages that are not pre-rendered during build time using the fallback property in getStaticPaths, enhancing user experience with loading states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  ...\n}\n\nexport default function Post({ post }) {\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to generate a new Next.js app using the with-google-maps-embed example. It sets up the project structure and installs the required dependencies for embedding a Google Maps. The resulting application is named with-google-maps-embed-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-google-maps-embed with-google-maps-embed-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the `with-portals-ssr` example. It initializes a project named `with-portals-ssr-app` using the specified example from the Next.js repository. Yarn must be installed and configured in the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-portals-ssr with-portals-ssr-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Stencil example using npx\nDESCRIPTION: This command uses `npx` to create a new Next.js application based on the `with-stencil` example.  It initializes a project named `with-stencil-app` using the specified example from the Next.js repository. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-stencil with-stencil-app\n```\n\n----------------------------------------\n\nTITLE: Module Part 4: Static Generation Bailout Import\nDESCRIPTION: This JavaScript snippet imports a module responsible for handling static generation bailout scenarios. It's used to detect when a page cannot be statically generated and falls back to server-side rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport '../../client/components/static-generation-bailout';\n\n```\n\n----------------------------------------\n\nTITLE: Packing Next.js without Rebuilding\nDESCRIPTION: Command to pack a local Next.js version without running the build step, useful if you've already built the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next --no-build --release && pnpm unpack-next path/to/project\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Next.js Custom App\nDESCRIPTION: This JavaScript snippet shows how to import a global CSS file in a Next.js Custom App component. It demonstrates the correct way to apply shared styles across all pages and components in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-styled-jsx-in-document.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles.css'\n\n// This default export is required in a new `pages/_app.js` file.\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Icons Metadata HTML Output\nDESCRIPTION: This code shows the HTML output generated from the icons metadata configuration. It includes `<link>` tags for the shortcut icon, main icon, and Apple touch icons, with the appropriate `rel` and `href` attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Combining Variables and Exporting - JavaScript\nDESCRIPTION: This snippet demonstrates importing `foobar`, modifying it to append the string 'bar', and exporting the new variable 'bar' for external access.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nconst bar = \"bar\";\nfoobar += bar;\nexport { bar as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-lingui example. It bootstraps a project with Lingui i18n pre-configured. The command should be executed in the terminal. Make sure you have Node.js and Yarn installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-lingui with-lingui-app\n```\n\n----------------------------------------\n\nTITLE: Exporting Order Array Initialization in JavaScript\nDESCRIPTION: This snippet initializes an empty array named 'order' and exports it. There are no prerequisites other than a JavaScript runtime. This serves as the base for storing order-related operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const order = [];\n```\n\n----------------------------------------\n\nTITLE: Transforming Markdown to HTML with Unified and Remark/Rehype\nDESCRIPTION: This snippet demonstrates how to convert markdown text into HTML using the `unified` processor along with `remark` and `rehype` plugins. It showcases the steps involved in parsing markdown, transforming it to an HTML AST, sanitizing the HTML, and finally, serializing the HTML. This functionality is handled by `@next/mdx` automatically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // Convert into markdown AST\n    .use(remarkRehype) // Transform to HTML AST\n    .use(rehypeSanitize) // Sanitize HTML input\n    .use(rehypeStringify) // Convert AST into serialized HTML\n    .process('Hello, Next.js!')\n\n  console.log(String(file)) // <p>Hello, Next.js!</p>\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Metadata Example (Optional Fields)\nDESCRIPTION: This YAML snippet showcases the optional metadata fields for a Next.js documentation page. These fields provide additional customization options, such as overriding the navigation title, pulling content from shared pages, listing related pages, and specifying the stage of development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnav_title: Nav Item Title\nsource: app/building-your-application/optimizing/images\nrelated:\n  description: See the image component API reference.\n  links:\n    - app/api-reference/components/image\nversion: experimental\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Global Stylesheet in Custom App (Pages Router - TSX)\nDESCRIPTION: This TypeScript code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application within the Pages router. It defines the custom App component and imports the globals.css file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// These styles apply to every route in the application\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Non-Conflicting Public and Page File Structure in Bash\nDESCRIPTION: This code snippet shows a folder structure where a public file and a page file do not conflict due to differing names. This example serves to clarify how correctly naming files can prevent issues in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-public-file-page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfilename=\"Folder structure\"\npublic/\n  hello.txt\npages/\n  hello.js\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with React-GA4 Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-react-ga4 example. It provides a quick way to start a project configured for analytics using react-ga4. 'with-react-ga-app' defines the project directory name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-ga4 with-react-ga-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Contentlayer example using pnpm\nDESCRIPTION: This command uses `create-next-app` with pnpm to create a new Next.js application based on the `with-contentlayer` example. It sets up a project named `with-contentlayer-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-contentlayer with-contentlayer-app\n```\n\n----------------------------------------\n\nTITLE: Initialize Next.js App with Plasmic Example (npm)\nDESCRIPTION: This command uses the `create-next-app` tool with npm to bootstrap a new Next.js application using the `cms-plasmic` example. It creates a new directory named `cms-plasmic-app` containing the project files. Requires npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-plasmic cms-plasmic-app\n```\n\n----------------------------------------\n\nTITLE: Preserving Route Information While Changing Locale in Next.js\nDESCRIPTION: This snippet demonstrates how to change only the locale while preserving all other routing information, such as dynamic route query values or hidden href query values, using the next/router in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\nconst router = useRouter()\nconst { pathname, asPath, query } = router\n// change just the locale and maintain all other route information including href's query\nrouter.push({ pathname, query }, asPath, { locale: nextLocale })\n```\n\n----------------------------------------\n\nTITLE: Robots TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for the Robots object used in Next.js. It describes the structure for configuring user agents, allow/disallow rules, crawl delays, sitemaps, and host settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Robots = {\n  rules:\n    | {\n        userAgent?: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }\n    | Array<{\n        userAgent: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }>\n  sitemap?: string | string[]\n  host?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using revalidateTag in a Route Handler - JavaScript\nDESCRIPTION: This snippet demonstrates the usage of revalidateTag in a route handler using JavaScript. It retrieves the cache tag from the request and invokes the revalidateTag function, followed by returning a JSON response indicating the revalidation status.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { revalidateTag } from 'next/cache'\n\nexport async function GET(request) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 2\nDESCRIPTION: This code snippet represents part 2 of a JavaScript module. It imports `shared` from a previous module part and imports another turbopack part.  It then defines and exports `b` and `f`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nconst b = {\n    shared,\n    b: \"bbbbbbbbbbb\"\n};\nexport { b };\nexport { b as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using Yarn\nDESCRIPTION: This command initializes a new Next.js application named `api-routes-rest-app` using the `api-routes-rest` example. It leverages the `create next-app` command from Yarn to set up the project with the specified template, providing the foundation for a REST API using Next.js API routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nyarn create next-app --example api-routes-rest api-routes-rest-app\n```\n\n----------------------------------------\n\nTITLE: Installing @next/eslint-plugin-next (bash)\nDESCRIPTION: This snippet provides commands to install the `@next/eslint-plugin-next` package using npm, yarn, pnpm, and bun. Installing this plugin enables specific Next.js ESLint rules and configurations without requiring `next lint`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @next/eslint-plugin-next\n\nyarn add --dev @next/eslint-plugin-next\n\npnpm add --save-dev @next/eslint-plugin-next\n\nbun add --dev @next/eslint-plugin-next\n```\n\n----------------------------------------\n\nTITLE: Passing additional arguments to Server Actions using bind in JavaScript\nDESCRIPTION: This example demonstrates how to use JavaScript's bind method to pass additional arguments to a Server Action when it's invoked from a form in a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { updateUser } from './actions'\n\nexport function UserProfile({ userId }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n\n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Provider in Layout with TypeScript\nDESCRIPTION: This snippet demonstrates how to utilize the ThemeProvider within the RootLayout component. By wrapping children with the ThemeProvider, all components can access the theme context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport ThemeProvider from './theme-provider'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Draft URL Example (Bash)\nDESCRIPTION: This Bash command is an example URL format that a headless CMS can use to call a Next.js API route securely and enable Draft Mode. It includes query parameters for a secret token and the slug of the content being previewed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Website URL for Sitemap\nDESCRIPTION: This code shows how to configure the website URL used in the `sitemap.xml` file by setting the `WEBSITE_URL` environment variable in the `.env` file. This URL should be replaced with the actual domain name in a production environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Used to add the domain to sitemap.xml, replace it with a real domain in production\nWEBSITE_URL=https://my-domain.com\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Clerk using Yarn\nDESCRIPTION: This command uses `create next-app` with `yarn` to bootstrap a Next.js application pre-configured with Clerk. The `--example with-clerk` flag specifies the Clerk example to use, and `with-clerk-app` is the name of the new application directory. Requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-clerk with-clerk-app\n```\n\n----------------------------------------\n\nTITLE: Running the ESLint linter using npm in Bash\nDESCRIPTION: This command runs the ESLint linter for a Next.js project. The script is defined in the package.json file, allowing for easy execution of the linter. This assists in finding and fixing coding standard issues, promoting clean and maintainable code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Using Styled JSX for Scoped CSS\nDESCRIPTION: Provides an example of using styled-jsx to apply scoped CSS styles directly within a React component, illustrating isolated styles per component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Exporting IPC Module for TurboPack in JavaScript\nDESCRIPTION: Exports the IPC interface for use in other TurboPack modules. Imports and re-exports the IPC module after ensuring the uncaught exception handler is properly set up.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nexport { IPC };\n\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - JS\nDESCRIPTION: This snippet illustrates how to retrieve all cookies with a matching name in a Next.js page component. It returns each cookie's name and value in a list format when the cookie store is accessed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  return cookieStore.getAll().map((cookie) => (\n    <div key={cookie.name}>\n      <p>Name: {cookie.name}</p>\n      <p>Value: {cookie.value}</p>\n    </div>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with styled-jsx using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application using the styled-jsx example. It leverages the create next app tool, setting up a project with the required dependencies and configurations for styled-jsx. The resulting application will be named 'with-styled-jsx-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-styled-jsx with-styled-jsx-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Fauna Example (pnpm)\nDESCRIPTION: Uses `create next-app` from pnpm to initialize a new Next.js app using `with-fauna` example. The resulting application is named `with-fauna-app`. The command fetches and configures all the necessary dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-fauna with-fauna-app\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Creating a Post\nDESCRIPTION: This GraphQL mutation creates a new 'Post' entry in the Grafbase backend.  It takes title, slug, and a nested comment as input, and returns the id and slug of the newly created post.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  postCreate(\n    input: {\n      title: \"I love Next.js!\"\n      slug: \"i-love-nextjs\"\n      comments: [{ create: { message: \"me too!\" } }]\n    }\n  ) {\n    post {\n      id\n      slug\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware for Dynamic Multi-Zone Routing in Next.js\nDESCRIPTION: This middleware function demonstrates how to dynamically route requests based on a feature flag. It's useful for scenarios where routing decisions need to be made at runtime.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function middleware(request) {\n  const { pathname, search } = req.nextUrl;\n  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {\n    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Importing Constants\nDESCRIPTION: This JavaScript import statement is used for bringing in constants needed across modules, ensuring shared values are consistently used across different parts of the application. It has no external dependencies and directly imports local module components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport './constants';\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with styled-jsx using npm\nDESCRIPTION: This command uses npm to create a new Next.js application using the styled-jsx example. It utilizes the create-next-app tool to scaffold a project with the necessary dependencies and configurations for styled-jsx. The resulting application will be named 'with-styled-jsx-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-styled-jsx with-styled-jsx-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Context Provider in JavaScript\nDESCRIPTION: This snippet is similar to the TypeScript example, demonstrating how to create a ThemeContext and a provider in JavaScript. The provider supplies a 'dark' theme value to its children.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react'\n\n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Stencil example using pnpm\nDESCRIPTION: This command uses `pnpm` to create a new Next.js application based on the `with-stencil` example. It initializes a project named `with-stencil-app` using the specified example from the Next.js repository. It requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-stencil with-stencil-app\n```\n\n----------------------------------------\n\nTITLE: Server-side Rendering with getServerSideProps in Next.js\nDESCRIPTION: An example of Server-side Rendering in Next.js using getServerSideProps. This function fetches data on every request rather than at build time, allowing for always up-to-date content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page({ data }) {\n  // Render data...\n}\n\n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  // Pass data to the page via props\n  return { props: { data } }\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 1\nDESCRIPTION: This code snippet represents part 1 of a JavaScript module. It imports `shared` from a previous module part, modifies `externalObject`, logs `shared` to the console, and exports an object as `e`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nexternalObject.propertyWithSetter = 42;\nconsole.log(shared);\nconst a = {\n    shared,\n    a: \"aaaaaaaaaaa\"\n};\nexport { a as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js project using create-next-app CLI in Bash\nDESCRIPTION: This command uses the create-next-app CLI to scaffold a new Next.js project. It's the quickest way to initialize a project and sets up all the necessary configurations automatically. The user will be prompted to answer several questions during the setup process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Exporting useMDXComponents Function in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates exporting the `useMDXComponents` function. The function accepts a `components` parameter and returns a new object including those components. This export is used in `mdx-components.js` to customize MDX rendering in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag-based Revalidation in Next.js Page Component\nDESCRIPTION: Example showing how to tag fetch calls for granular revalidation in a Next.js page component. Uses the next.tags option to associate data fetching with specific tags.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog', {\n    next: { tags: ['posts'] },\n  })\n  const posts = await data.json()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Secret Key using OpenSSL\nDESCRIPTION: This code snippet shows how to generate a cryptographically secure secret key using the OpenSSL command-line tool. This key can then be used for encrypting session data or signing tokens to ensure the integrity and authenticity of session data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Importing MDX into a page - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and render an MDX file within a Next.js page component, written in TypeScript.  It imports the MDX file (Welcome) and renders it within the page's return statement.  This allows the MDX content to be displayed on the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Welcome from '@/markdown/welcome.mdx'\n\nexport default function Page() {\n  return <Welcome />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command bootstraps a new Next.js application using create-next-app with the `with-next-seo` example. It utilizes Yarn as the package manager, creating a project named `next-seo-app`.  Yarn is a package manager that can be used as an alternative to npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-next-seo next-seo-app\n```\n\n----------------------------------------\n\nTITLE: Enable CSS Grid Layout for IE11 using Autoprefixer\nDESCRIPTION: This CSS comment enables CSS Grid Layout compilation for IE11 by instructing Autoprefixer to use the `autoplace` grid value. It should be placed at the top of the CSS file where grid layout is used.  No dependencies are explicitly required beyond standard CSS capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* autoprefixer grid: autoplace */\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Props in Next.js Pages Router\nDESCRIPTION: Shows how to handle undefined props and missing data in the getStaticProps function for the Pages Router. It includes a conditional check to return a 404 page if data is not found.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps(context) {\n  const data = await fetchData(context.params.id)\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n  return {\n    props: { data },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Formats in Next.js\nDESCRIPTION: This snippet configures the default image formats supported by the Next.js Image Optimization API. The configuration specifies an array of formats that the API should accept, with the first matching format used for the response. If no formats match, the original image format is used.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Stencil example using yarn\nDESCRIPTION: This command uses `yarn` to create a new Next.js application based on the `with-stencil` example. It initializes a project named `with-stencil-app` using the specified example from the Next.js repository. It requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-stencil with-stencil-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with TinaCMS example using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the `cms-tina` example. It uses `yarn create next-app` to bootstrap the project, providing the necessary files and dependencies for integration with TinaCMS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"yarn create next-app --example cms-tina cms-tina-app\"\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with pnpm - Bash\nDESCRIPTION: This command uses `create-next-app` and pnpm to bootstrap a new Next.js project based on the 'with-absolute-imports' example. The newly created project will reside in the 'with-absolute-imports-app' directory. Requires Node.js and pnpm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\npnpm create next-app --example with-absolute-imports with-absolute-imports-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Options in Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure Sass options within the `next.config.js` file. Specifically, it shows how to define `additionalData` to inject a Sass variable into every Sass file.  Uses JSDoc to define the type of NextConfig.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/03-sass.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nconst nextConfig = {\n  sassOptions: {\n    additionalData: `$var: red;`,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Custom Routes\nDESCRIPTION: Example configuration showing incompatible settings between custom routes and static exports in next.config.js. These configurations cannot be used together as they serve different deployment strategies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-no-custom-routes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n{\n  output: 'export',  // This conflicts with custom routes\n  rewrites: async () => [...],  // Cannot be used with static export\n  redirects: async () => [...], // Cannot be used with static export\n  headers: async () => [...]    // Cannot be used with static export\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Clerk using npx\nDESCRIPTION: This command uses `create-next-app` with `npx` to bootstrap a Next.js application pre-configured with Clerk. The `--example with-clerk` flag specifies the Clerk example to use, and `with-clerk-app` is the name of the new application directory. Requires npx to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-clerk with-clerk-app\n```\n\n----------------------------------------\n\nTITLE: Function and Order Handling in Module - JavaScript\nDESCRIPTION: This module imports 'order' and manipulates it by pushing data, alongside exporting functionality as part of the module's public interface.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as order } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nfunction func() {\n    order.push(\"d\");\n}\norder.push(\"c\");\nexport { func };\nexport { order };\nexport { func as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Conditional Link Rendering with Middleware\nDESCRIPTION: Demonstrates how to properly implement Link component prefetching when using middleware by specifying both display and prefetch URLs based on authentication state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed' // Your auth hook\n\nexport default function Page() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Module Part 2: Hooks Server Context Import\nDESCRIPTION: This JavaScript snippet imports a module related to server-side hooks context from within Next.js. It is likely involved in managing the context in which hooks are executed during server-side rendering or prerendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport '../../client/components/hooks-server-context';\n\n```\n\n----------------------------------------\n\nTITLE: Creating Post with Server Action in Next.js TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the creation of a post using a server action in a Next.js application. It uses the 'createPost' function, invoked during form submission as the action, to perform server-side operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Form from 'next/form'\nimport { createPost } from '@/posts/actions'\n\nexport default function Page() {\n  return (\n    <Form action={createPost}>\n      <input name=\"title\" />\n      {/* ... */}\n      <button type=\"submit\">Create Post</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers and Freeing Space\nDESCRIPTION: This snippet provides commands to stop all running Docker containers and remove orphaned volumes, thereby freeing up space on the system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Stop all running containers\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker kill $(docker ps -aq) && docker rm $(docker ps -aq)\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Free space\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker system prune -af --volumes\n```\n\n----------------------------------------\n\nTITLE: Configuring authInterrupts in next.config.js\nDESCRIPTION: This snippet shows how to enable the experimental `authInterrupts` configuration option in the `next.config.js` file. This option is required to use the `forbidden` function.  The configuration enables the feature by setting `authInterrupts` to `true` within the `experimental` object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    authInterrupts: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress open command to package.json\nDESCRIPTION: Adds a `cypress:open` script to the `package.json` file.  This script allows users to easily open the Cypress testing suite using `npm run cypress:open`.  It depends on Cypress being installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"cypress:open\": \"cypress open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Component with Link Navigation in Next.js\nDESCRIPTION: Implements a component for rendering blog post links using the Next.js Link component. This demonstrates how to implement client-side navigation between pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default async function Post({ post }) {\n  const posts = await getPosts()\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.slug}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default async function Post({ post }) {\n  const posts = await getPosts()\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.slug}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Combining Constants with Export Assertions\nDESCRIPTION: This snippet shows how to import a constant 'dog' using assertions, declare 'cat', and create 'CHIMERA' as the combination of both. It exports the combined result.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as dog } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nconst cat = \"cat\";\nconst CHIMERA = cat + dog;\nexport { CHIMERA };\nexport { cat as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { CHIMERA as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of cookies() in Cached Function\nDESCRIPTION: Example showing problematic implementation where cookies are accessed inside a cached function, which would invalidate the cache on every request.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nasync function getExampleData() {\n  \"use cache\"\n  const isLoggedIn = (await cookies()).has('token')\n  ...\n}\n\nexport default async function Page() {\n  const data = await getExampleData()\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-google-maps-embed example. It sets up the project with the necessary files and dependencies for embedding a Google Maps component. The resulting application is named with-google-maps-embed-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-google-maps-embed with-google-maps-embed-app\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Root Layout - TypeScript\nDESCRIPTION: This code snippet shows how to load a third-party script in the root layout of a Next.js application using TypeScript. The script will load on every route. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Module Part 6: URL Library Import\nDESCRIPTION: This JavaScript snippet imports the URL library, used for handling URL-related operations within the Next.js application, likely used for extracting pathnames or manipulating URLs during routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport '../../lib/url';\n\n```\n\n----------------------------------------\n\nTITLE: Client-Side Data Fetching in Next.js\nDESCRIPTION: Implements client-side data fetching using React hooks (useState and useEffect). Includes loading state handling and async data fetching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState, useEffect } from 'react'\n\nexport function Posts() {\n  const [posts, setPosts] = useState(null)\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await fetch('https://api.vercel.app/blog')\n      const data = await res.json()\n      setPosts(data)\n    }\n    fetchPosts()\n  }, [])\n\n  if (!posts) return <div>Loading...</div>\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useState, useEffect } from 'react'\n\nexport function Posts() {\n  const [posts, setPosts] = useState(null)\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await fetch('https://api.vercel.app/blog')\n      const data = await res.json()\n      setPosts(data)\n    }\n    fetchPosts()\n  }, [])\n\n  if (!posts) return <div>Loading...</div>\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS styles in CSS\nDESCRIPTION: This CSS snippet defines global styles for the `body` element, setting font family, padding, max-width, and margin. It is meant to be used as a global stylesheet for a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/css-global.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"body {\\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\\n    'Arial', sans-serif;\\n  padding: 20px 20px 60px;\\n  max-width: 680px;\\n  margin: 0 auto;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This snippet outlines how to start the development server for the Next.js application using npm or Yarn. This is crucial for local development, allowing developers to view changes in real time in the browser on the designated localhost URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application named `i18n-routing-pages-app` based on the `i18n-routing-pages` example. It initializes the project with the necessary configuration and dependencies for demonstrating internationalized routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example i18n-routing-pages i18n-routing-pages-app\n```\n\n----------------------------------------\n\nTITLE: Configuring authInterrupts in next.config.ts\nDESCRIPTION: This snippet shows how to enable the experimental `authInterrupts` configuration option in the `next.config.ts` file. This option is required to use the `forbidden` function. The configuration enables the feature by setting `authInterrupts` to `true` within the `experimental` object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    authInterrupts: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with rosetta example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the `with-i18n-rosetta` example.  It downloads and executes the create-next-app package and sets up a new project named `with-i18n-rosetta-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-i18n-rosetta with-i18n-rosetta-app\n```\n\n----------------------------------------\n\nTITLE: Embedding Styles with JSX Tags in Next.js\nDESCRIPTION: This snippet demonstrates the incorrect and correct usage of `<style jsx>` tags in a Next.js component. The snippet highlights the necessity of placing `<style jsx>` tags at the root of the component to prevent errors. It shows two examples: the first with nested `<style jsx>` tags and the second with correctly placed tags. Required dependencies include React and styled-jsx. Inputs include JSX structured components, and the output is a styled component with correctly applied CSS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/nested-styled-jsx-tags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => (\n  <div>\n    <p>\n      Hello world\n      <style jsx>{`\n        p {\n          color: white;\n        }\n      `}</style>\n    </p>\n    <style global jsx>{`\n      body {\n        background: black;\n      }\n    `}</style>\n  </div>\n)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => (\n  <div>\n    <p>Hello world</p>\n    <style jsx>{`\n      p {\n        color: white;\n      }\n    `}</style>\n    <style global jsx>{`\n      body {\n        background: black;\n      }\n    `}</style>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting structuredError Function\nDESCRIPTION: Exports the structuredError function which prepares error objects with refined information using getProperError and parsed stack trace. Inputs the error object and outputs a structured error format with name, message, and stack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function structuredError(e) {\n    e = getProperError(e);\n    return {\n        name: e.name,\n        message: e.message,\n        stack: typeof e.stack === \"string\" ? parseStackTrace(e.stack) : []\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the image-secure-compute example. It downloads the example and sets up a new project with the specified name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example image-secure-compute image-secure-compute-app\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Effect Function\nDESCRIPTION: This snippet defines a function named 'effect' that accepts a name as a parameter and pushes it into the 'effects' array. The function is also exported for use in other modules. The snippet relies on the 'effects' array declared earlier.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function effect(name) {\n    effects.push(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Xata using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application pre-configured to work with Xata. It bootstraps the project using the `with-xata` example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm create next-app --example with-xata with-xata-app\n```\n\n----------------------------------------\n\nTITLE: Entrypoints Definition\nDESCRIPTION: This section defines the entrypoints for various modules and exports within the prerendering system. It maps module evaluation indices to their corresponding exported functions or values, which are crucial for understanding how different parts of the system are accessed and utilized.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ModuleEvaluation\": 8,\n    \"Export(\n        \\\"Postpone\\\",\n    )\": 12,\n    \"Export(\n        \\\"createPostponedAbortSignal\\\",\n    )\": 16,\n    \"Export(\n        \\\"createPrerenderState\\\",\n    )\": 9,\n    \"Export(\n        \\\"formatDynamicAPIAccesses\\\",\n    )\": 15,\n    \"Export(\n        \\\"markCurrentScopeAsDynamic\\\",\n    )\": 10,\n    \"Export(\n        \\\"trackDynamicDataAccessed\\\",\n    )\": 11,\n    \"Export(\n        \\\"trackDynamicFetch\\\",\n    )\": 13,\n    \"Export(\n        \\\"usedDynamicAPIs\\\",\n    )\": 14,\n    \"Exports\": 17,\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Non-UI Content in Next.js - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to generate an RSS feed in a GET route. It returns an XML response with a structured RSS format suitable for feed readers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET() {\n  return new Response(\n    `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n\n</rss>`,\n    {\n      headers: {\n        'Content-Type': 'text/xml',\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Default PostCSS configuration for Next.js (JSON)\nDESCRIPTION: This is the default PostCSS configuration used by Next.js. It includes `postcss-flexbugs-fixes` and `postcss-preset-env` with specific Autoprefixer settings to ensure flexbox compatibility.  It disables custom properties and targets stage 3 features. Requires `postcss-flexbugs-fixes` and `postcss-preset-env` as installed dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"postcss-flexbugs-fixes\",\n    [\n      \"postcss-preset-env\",\n      {\n        \"autoprefixer\": {\n          \"flexbox\": \"no-2009\"\n        },\n        \"stage\": 3,\n        \"features\": {\n          \"custom-properties\": false\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Prefetching in Next.js Link Component\nDESCRIPTION: This snippet demonstrates how to opt out of the automatic prefetching behavior in Next.js Link components by setting `prefetch={false}`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prefetch-true-deprecated.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Link prefetch={false}>\n```\n\n----------------------------------------\n\nTITLE: Debugging Tests with Browser Visibility\nDESCRIPTION: Command to run tests with the browser window visible for debugging purposes, replacing 'test-start' with 'testonly-start'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm testonly-start test/e2e/app-dir/app/\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Fonts with CSS Variables in Next.js\nDESCRIPTION: This snippet shows how to import a Google font and set it up with a CSS variable in a Next.js application. The Inter font is imported and configured with the variable option for use with external CSS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n\nconst inter = Inter({\n  variable: '--font-inter',\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n\nconst inter = Inter({\n  variable: '--font-inter',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with Expo TypeScript Using NPX\nDESCRIPTION: Command to create a new Next.js application with Expo TypeScript template using npx create-next-app\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-expo-typescript with-expo-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Config (Wildcard Hostname)\nDESCRIPTION: This code snippet demonstrates using a wildcard pattern for the hostname in `remotePatterns` within the `next.config.js` file. It enables loading images from any subdomain of example.com.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with Next.js\nDESCRIPTION: This snippet demonstrates how to utilize a local image with the `next/image` component in a Next.js application, showcasing automatic dimension assignment and optional placeholder functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Goober using pnpm\nDESCRIPTION: This command employs pnpm to scaffold a new Next.js application initialized with the Goober example. It executes create next-app, specifying the example and the project name. The newly created application will be named 'with-goober-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-goober with-goober-app\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Cache (Bash)\nDESCRIPTION: This bash command demonstrates how to disable the ESLint cache when running `next lint`. This is useful when your ESLint rules depend on more than the contents of a single source file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnext lint --no-cache\n```\n\n----------------------------------------\n\nTITLE: Re-throwing Errors with unstable_rethrow - TypeScript\nDESCRIPTION: This snippet shows how to utilize the unstable_rethrow function to re-throw internal errors caught in the first fetch call. In a scenario where notFound() is called, using unstable_rethrow allows the error to propagate correctly, ensuring Next.js renders the appropriate component instead of suppressing the error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_rethrow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport { notFound, unstable_rethrow } from 'next/navigation'\n\nexport default async function Page() {\n  try {\n    const post = await fetch('https://.../posts/1').then((res) => {\n      if (res.status === 404) notFound()\n      if (!res.ok) throw new Error(res.statusText)\n      return res.json()\n    })\n  } catch (err) {\n    unstable_rethrow(err)\n    console.error(err)\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 using pnpm\nDESCRIPTION: Command to upgrade Next.js to version 9 using pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@9\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with cms-payload example using pnpm\nDESCRIPTION: This command leverages `pnpm` to set up a new Next.js application based on the `cms-payload` example. The resulting project will be contained within the `cms-payload-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-payload cms-payload-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with AMP Example (pnpm)\nDESCRIPTION: Uses pnpm to create a new Next.js application based on the AMP example.  This command sets up the project with the required files for AMP support. It uses the 'amp' example and names the new application 'amp-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example amp amp-app\n```\n\n----------------------------------------\n\nTITLE: Enabling AVIF Image Support in Next.js\nDESCRIPTION: This code snippet demonstrates how to enable AVIF image support in Next.js. If the browser doesn't support AVIF, it falls back to the original image format. It is recommended to use WebP for most use cases.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/avif'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Variable Example - JavaScript\nDESCRIPTION: This snippet initializes 'foobar' and exports it as 'a', allowing it to be accessible in other modules by its new name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet foobar = \"foo\";\nexport { foobar as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with rosetta example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the `with-i18n-rosetta` example.  It leverages pnpm's create command to initialize a new project named `with-i18n-rosetta-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-i18n-rosetta with-i18n-rosetta-app\n```\n\n----------------------------------------\n\nTITLE: Using replace Prop with Link Component in App Router (JavaScript)\nDESCRIPTION: Example of using the replace prop with the Next.js Link component in App Router. When replace is set to true, the component will replace the current history state instead of adding a new URL to the browser's history stack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting ResponseCookies Class - JavaScript\nDESCRIPTION: This snippet imports and exports the ResponseCookies class, which manages cookie operations in HTTP responses, enhancing the handling of cookies within the Next.js framework's server environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { ResponseCookies } from './cookies';\nexport { ResponseCookies as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js Sitecore XM Cloud App using npx\nDESCRIPTION: This command initializes a Next.js application using the provided Sitecore XM Cloud example. Dependencies include Node.js and npm. It creates a new folder named 'cms-sitecore-xmcloud-app' with the setup for a Sitecore-connected Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app\n```\n\n----------------------------------------\n\nTITLE: Initializing after Function in React Server Component Layout\nDESCRIPTION: Demonstrates using the `after` function to execute a logging function after a layout is rendered and sent to the user. Compatible with both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { after } from 'next/server'\n// Custom logging function\nimport { log } from '@/app/utils'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  after(() => {\n    // Execute after the layout is rendered and sent to the user\n    log()\n  })\n  return <>{children}</>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { after } from 'next/server'\n// Custom logging function\nimport { log } from '@/app/utils'\n\nexport default function Layout({ children }) {\n  after(() => {\n    // Execute after the layout is rendered and sent to the user\n    log()\n  })\n  return <>{children}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Constant from Imported Variable - JavaScript\nDESCRIPTION: This snippet imports 'foobar' and creates a constant called 'foo', which it then exports. This illustrates pulling a value from an import and making it available through export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nconst foo = foobar;\nexport { foo as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching for GET Route Handlers in Next.js\nDESCRIPTION: Example of implementing caching for a GET route handler using the 'force-static' dynamic option. This demonstrates how to fetch data from an external API and cache the response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'force-static'\n\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-static'\n\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode with Yarn\nDESCRIPTION: These commands first install the required node modules using `yarn install` and then start the Next.js development server using `yarn dev`.  This makes the application available for local development and testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Default Meta Tags for Next.js Pages\nDESCRIPTION: This HTML snippet is used for providing the default `<meta>` tags required for character set and viewport settings in Next.js applications. These tags are automatically included even if a route does not define metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Priority for Largest Contentful Paint Image\nDESCRIPTION: This snippet adds the `priority` attribute to an image, which is recommended for the Largest Contentful Paint (LCP) to help with page load performance improvements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n        priority\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Regenerator Runtime in ECMAScript 2015\nDESCRIPTION: This code snippet shows how to import the regenerator-runtime module using ECMAScript 2015 syntax. It assigns 'regeneratorRuntime' to be used for handling generator and async functions, assuming a module system that supports ES6 imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ECMAScript 2015\nimport regeneratorRuntime from \"regenerator-runtime\";\n```\n\n----------------------------------------\n\nTITLE: Implementing BubbledError Type Check in JavaScript\nDESCRIPTION: Implementation of a utility function to check if an error is a BubbledError instance. This helper function is used for error handling within the tracing system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { s as BubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nfunction isBubbledError(error) {\n    if (typeof error !== 'object' || error === null) return false;\n    return error instanceof BubbledError;\n}\nexport { isBubbledError as t } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Sass example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application using the with-sass example template. It automatically sets up Sass integration and installs all project dependencies. The with-sass-app parameter determines the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-sass with-sass-app\n```\n\n----------------------------------------\n\nTITLE: Running Dev Server\nDESCRIPTION: This code snippet shows the command to run the Next.js development server, usually using npm. This command initiates the build and serves the Next.js application for local development. Requires Node.js environment with npm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_6\n\nLANGUAGE: Terminal\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Segment Analytics using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-segment-analytics example. It sets up the basic project structure and dependencies for integrating Segment Analytics. The new application will be named 'with-segment-analytics-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-segment-analytics with-segment-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Using Unauthorized Function in Dashboard Page - JSX\nDESCRIPTION: This code snippet demonstrates how to use the unauthorized function within a dashboard page to check user authentication and render the Unauthorized component if the session is invalid. It's tailored for JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { unauthorized } from 'next/navigation'\n\nexport default async function DashboardPage() {\n  const session = await verifySession()\n\n  if (!session) {\n    unauthorized()\n  }\n\n  return <div>Dashboard</div>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Import of OpenTelemetry API - JavaScript\nDESCRIPTION: Conditionally imports the OpenTelemetry API based on the runtime environment (`edge` or otherwise). If an error occurs during import in the default branch, it falls back to an alternative import.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (process.env.NEXT_RUNTIME === 'edge') {\n    api = require('@opentelemetry/api');\n} else {\n    try {\n        api = require('@opentelemetry/api');\n    } catch (err) {\n        api = require('next/dist/compiled/@opentelemetry/api');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GraphQL Hooks example (pnpm)\nDESCRIPTION: This command utilizes `create next-app` with pnpm to bootstrap a new Next.js application using the `with-graphql-hooks` example. It installs the necessary dependencies and sets up the project structure for working with GraphQL Hooks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-graphql-hooks with-graphql-hooks-app\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in Server Component with ORM (Next.js)\nDESCRIPTION: This example shows how to fetch data in a Next.js Server Component using an ORM or database client. It retrieves blog posts from a database and renders them as a list.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { db, posts } from '@/lib/db'\n\nexport default async function Page() {\n  const allPosts = await db.select().from(posts)\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { db, posts } from '@/lib/db'\n\nexport default async function Page() {\n  const allPosts = await db.select().from(posts)\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Queue Array in Javascript\nDESCRIPTION: This code snippet initializes an empty array named `queue`. This array is likely used as a queue to store tasks or messages that need to be processed sequentially. It provides a mechanism for managing asynchronous operations or deferred executions within the module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst queue = [];\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command utilizes npm to create a new Next.js application with a basic CSS example.  It bootstraps the application, sets up necessary dependencies, and provides a starting point for developing with CSS Modules. The application will be named 'basic-css-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example basic-css basic-css-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Other Metadata - JSX\nDESCRIPTION: This code snippet demonstrates how to configure custom metadata using the `other` property within the `metadata` export in a Next.js layout or page file. It sets a custom meta tag with name \"custom\" and content \"meta\".\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_64\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  other: {\n    custom: 'meta',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Next.js JavaScript\nDESCRIPTION: In this JavaScript snippet, the search results page accesses the search query using the 'searchParams' which is passed as a prop. It uses 'getSearchResults' to fetch data related to the query and renders the data accordingly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getSearchResults } from '@/lib/search'\n\nexport default async function SearchPage({ searchParams }) {\n  const results = await getSearchResults((await searchParams).query)\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Secret Environment Variable\nDESCRIPTION: This snippet shows how to define an environment variable for storing the session secret key. Environment variables are used to store sensitive information securely and make it accessible to the application without hardcoding it in the source code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nSESSION_SECRET=your_secret_key\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with i18n routing using pnpm\nDESCRIPTION: This command uses pnpm to execute `create next-app` and bootstraps a new Next.js application with the internationalized routing example. The `i18n-routing` argument specifies the example to use, and `i18n-routing-app` is the name of the new application to be created.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example i18n-routing i18n-routing-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with GTM Example (Yarn)\nDESCRIPTION: This command initializes a new Next.js application using the `with-google-tag-manager` example from the Next.js repository. It utilizes `create next-app` via `yarn` to bootstrap the project with the specified template and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-google-tag-manager with-google-tag-manager-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Response (Incorrect)\nDESCRIPTION: Illustrates the incorrect ways of creating responses directly in Next.js Middleware, which is no longer supported as of version v12.2+. These methods include creating responses with text, streams, buffers, and JSON data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew Response('a text value')\nnew Response(streamOrBuffer)\nnew Response(JSON.stringify(obj), { headers: 'application/json' })\nNextResponse.json()\n```\n\n----------------------------------------\n\nTITLE: Console Enhancement Implementation\nDESCRIPTION: Implements console output enhancement by wrapping standard console methods. Adds stack traces and formatting markers for improved debugging.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst improveConsole = (name, stream, addStack)=>{\n    const original = console[name];\n    const stdio = process[stream];\n    console[name] = (...args)=>{\n        stdio.write(`TURBOPACK_OUTPUT_B\\n`);\n        original(...args);\n        if (addStack) {\n            const stack = new Error().stack?.replace(/^.+\\n.+\\n/, \"\") + \"\\n\";\n            stdio.write(\"TURBOPACK_OUTPUT_S\\n\");\n            stdio.write(stack);\n        }\n        stdio.write(\"TURBOPACK_OUTPUT_E\\n\");\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Items from Modules - JavaScript\nDESCRIPTION: This snippet showcases the exporting of functions and variables from the module, which encapsulates the API for interacting with 'order' and 'shared'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport { func } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export func\"\n};\nexport { order } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export order\"\n};\nexport { shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export shared\"\n};\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component (app directory)\nDESCRIPTION: Defines a basic Next.js page component using the `app` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/about` page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests using npm\nDESCRIPTION: This snippet illustrates how to run the Jest tests in the created Next.js application using npm. The command will trigger the Jest testing framework and output the test results. Ensure that Jest is properly configured in the project before running the command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uncaught Exception Handler\nDESCRIPTION: Sets up a global uncaught exception handler that sends errors through the IPC connection.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nprocess.on(\"uncaughtException\", (err)=>{\n    IPC.sendError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Redirect Function Implementation\nDESCRIPTION: Demonstrates the use of the redirect function in Server Components for handling server-side redirects based on conditions or authentication states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  if (!id) {\n    redirect('/login')\n  }\n\n  const team = await fetchTeam(id)\n  if (!team) {\n    redirect('/join')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Emotion (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application pre-configured with Emotion. It leverages the `create-next-app` tool and specifies the `with-emotion-swc` example. The new app will be created in a directory named `with-emotion-swc-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-emotion-swc with-emotion-swc-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with MongoDB Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application using the `with-mongodb` example. It initializes a project named `with-mongodb-app` based on the specified example template. Ensure npm is installed before running this command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mongodb with-mongodb-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (pnpm)\nDESCRIPTION: This command creates a new Next.js application using the `with-apivideo` example. It uses pnpm to execute the `create-next-app` command, scaffolding the project with the specified example and naming the new application `with-apivideo-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-apivideo with-apivideo-app\n```\n\n----------------------------------------\n\nTITLE: On-demand Revalidation with revalidatePath in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates on-demand revalidation using the revalidatePath function in a Server Action. It invalidates the cache for the /posts route when a new post is created.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  // Invalidate the /posts route in the cache\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Fauna Example (yarn)\nDESCRIPTION: Uses `create next-app` command from Yarn to create a new Next.js application based on `with-fauna` example. The created application is named `with-fauna-app`. This installs all needed dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-fauna with-fauna-app\n```\n\n----------------------------------------\n\nTITLE: Blog Component with External Data Requirement\nDESCRIPTION: Example of a component that requires external data before it can be pre-rendered. This component displays a list of blog posts that need to be fetched from an external source.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with i18n routing using yarn\nDESCRIPTION: This command uses yarn to execute `create next-app` and bootstraps a new Next.js application with the internationalized routing example. The `i18n-routing` argument specifies the example to use, and `i18n-routing-app` is the name of the new application to be created.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example i18n-routing i18n-routing-app\n```\n\n----------------------------------------\n\nTITLE: Run Next.js development server (npm)\nDESCRIPTION: This command uses npm to execute the 'dev' script defined in the project's package.json. The purpose is to start the Next.js development server, allowing developers to view and test the application locally. It typically starts the server on localhost.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app (npm)\nDESCRIPTION: This command creates a new Next.js application using the `with-apivideo` example. It uses npm to execute the `create-next-app` command, scaffolding the project with the specified example and naming the new application `with-apivideo-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-apivideo with-apivideo-app\n```\n\n----------------------------------------\n\nTITLE: Blog Context Provider Implementation\nDESCRIPTION: Context provider setup for handling blog data promises and providing them to child components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { createContext, useContext } from 'react'\n\nexport const BlogContext = createContext<Promise<any> | null>(null)\n\nexport function BlogProvider({\n  children,\n  blogPromise,\n}: {\n  children: React.ReactNode\n  blogPromise: Promise<any>\n}) {\n  return (\n    <BlogContext.Provider value={blogPromise}>{children}</BlogContext.Provider>\n  )\n}\n\nexport function useBlogContext() {\n  const context = useContext(BlogContext)\n  if (!context) {\n    throw new Error('useBlogContext must be used within a BlogProvider')\n  }\n  return context\n}\n```\n\n----------------------------------------\n\nTITLE: Using Button Component\nDESCRIPTION: This snippet shows the use of the previously imported Button component. It is utilized within MDX, allowing JSX components to be embedded with markdown content. The button rendered shows a greeting with a waving hand emoji.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/pages/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n\\n# MDX + Next.js\\n\\nLook, a button! 👇\\n\\n<Button>👋 Hello</Button>\\n\n```\n\n----------------------------------------\n\nTITLE: Pass Image Src Property to Img Tag - TSX\nDESCRIPTION: This code demonstrates how to pass the `src` property of the image object to the `<img>` tag in Next.js. This is necessary because static image imports return an object in Next.js, not a string URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n```\n\n----------------------------------------\n\nTITLE: Checking Active Links with usePathname\nDESCRIPTION: Use the usePathname hook to determine and style active links by comparing the current pathname with the link's href.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Next.js - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to implement a route handler to receive webhooks. It captures the request payload and handles exceptions, returning success or error responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST(request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll to Top on Route Change in Next.js - JSX\nDESCRIPTION: This example demonstrates how to use the useRouter hook to navigate without resetting the scroll position to the top of the page by passing a second argument with scroll set to false.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Linking to Dynamic Paths with Interpolation in Next.js\nDESCRIPTION: This example shows how to create dynamic links using interpolation in Next.js. It demonstrates mapping over an array of posts and generating links with dynamic slugs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database URL and Creating Auth Token\nDESCRIPTION: Instructions for fetching the database URL and creating an authorization token, essential for deploying the application on Vercel. The URL is used as an environment variable `TURSO_DB_URL`, while the auth token is assigned to `TURSO_DB_TOKEN` during deployment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nturso db show <database-name> --url\n```\n\nLANGUAGE: bash\nCODE:\n```\nturso db tokens create <database-name>\n```\n\n----------------------------------------\n\nTITLE: Register OpenTelemetry in instrumentation.js\nDESCRIPTION: Registers OpenTelemetry for observability. This function is called once when a new Next.js server instance is initiated. It imports `registerOTel` from `@vercel/otel` and calls it with the application name 'next-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dog Variable in JavaScript\nDESCRIPTION: This snippet modifies the `dog` variable by appending a string to it. It demonstrates how to directly change the value of an imported variable in a Turbopack module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as dog } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -0\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 1\\n};\\ndog += \"!\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Quill.js Example using npm\nDESCRIPTION: This command initializes a new Next.js application using the 'with-quill-js' example from the Next.js repository. It uses npm to execute the create-next-app tool and creates a new directory named 'with-quill-js-app' containing the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-quill-js with-quill-js-app\n```\n\n----------------------------------------\n\nTITLE: Attempting to Import Server Component into Client Component in JavaScript\nDESCRIPTION: This JavaScript snippet mirrors the TypeScript one, showcasing the same unsupported pattern. Importing a Server Component into a Client Component will result in an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n\nexport default function ClientComponent({ children }) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <> \n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      <ServerComponent />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Turbopack Entrypoints Configuration\nDESCRIPTION: Defines the entrypoints for Turbopack, specifying module evaluation and export references. It maps various export identifiers to their respective part numbers in the Turbopack bundling process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ModuleEvaluation: 8,\n    Export(\n        \"external1\",\n    ): 0,\n    Export(\n        \"external2\",\n    ): 10,\n    Export(\n        \"foo\",\n    ): 4,\n    Export(\n        \"foobar\",\n    ): 11,\n    Exports: 12,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with react-multi-carousel Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a Next.js application from the react-multi-carousel example template. It sets up a new project called 'with-react-multi-carousel-app' using the specified example. The command assumes that Yarn is installed and available in the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-multi-carousel with-react-multi-carousel-app\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in Server Component with fetch API (Next.js)\nDESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Server Component using the fetch API. It retrieves blog posts from an API and renders them as a list.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Routes for Multiple Locales in Next.js\nDESCRIPTION: This code demonstrates how to use generateStaticParams to create static routes for multiple locales in a Next.js root layout, with both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n\nexport default async function RootLayout({\n  children,\n  params,\n}: Readonly<{\n  children: React.ReactNode\n  params: Promise<{ lang: 'en-US' | 'de' }>\n}>) {\n  return (\n    <html lang={(await params).lang}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n\nexport default async function RootLayout({ children, params }) {\n  return (\n    <html lang={(await params).lang}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Apollo using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named 'with-apollo-app' using the 'with-apollo' example. It bootstraps the project with the necessary dependencies and configuration for Apollo integration. It requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-apollo with-apollo-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Relay Modern example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the Relay Modern example. It initializes a project named 'with-relay-modern-app' using the specified example template.  Dependencies include create-next-app and npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-relay-modern with-relay-modern-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Relay Modern example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the Relay Modern example. It initializes a project named 'with-relay-modern-app' using the specified example template.  Dependencies include create-next-app and Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-relay-modern with-relay-modern-app\n```\n\n----------------------------------------\n\nTITLE: MSW Initialization using yarn\nDESCRIPTION: This command initializes Mock Service Worker in the public directory. It's used to generate the `mockServiceWorker.js` file, which is essential for MSW to intercept requests in the browser. This uses the yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn msw init public/\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Relay Modern example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the Relay Modern example. It initializes a project named 'with-relay-modern-app' using the specified example template. Dependencies include create-next-app and pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-relay-modern with-relay-modern-app\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Application\nDESCRIPTION: These commands install dependencies and start the Next.js development server. The `npm install` and `yarn install` commands install dependencies, and `npm run dev` and `yarn dev` start the development server.  Choose the set of commands appropriate for the package manager you are using.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies in Next.js Route Handlers\nDESCRIPTION: Example of reading and setting cookies in a Route Handler using the 'cookies' function from next/headers. This demonstrates how to access and manipulate cookies in both TypeScript and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const cookieStore = await cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token.value}` },\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function GET(request) {\n  const cookieStore = await cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token}` },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Conflicting Public and Page File Structure in Bash\nDESCRIPTION: This code snippet demonstrates a folder structure where a public file and a page file share the same name, which leads to conflicts in Next.js applications. Renaming one of the conflicting files is suggested to resolve the issue.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-public-file-page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfilename=\"Folder structure\"\npublic/\n  hello\npages/\n  hello.js\n```\n\n----------------------------------------\n\nTITLE: Copying and Exporting Variables - JavaScript\nDESCRIPTION: The snippet copies a variable 'foobar' into 'foobarCopy'. It allows for subsequent operations while also preparing 'foobarCopy' for export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nlet foobarCopy = foobar;\nexport { foobarCopy as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration Example\nDESCRIPTION: This code snippet demonstrates a basic `next.config.js` file with type checking.  It exports a configuration object that can be customized with various Next.js options. It's useful for ensuring configuration correctness and preventing errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app\nDESCRIPTION: This code snippet shows the basic initialization of a Next.js application using the `next()` function. It demonstrates how to create an instance of the Next.js application for use in a custom server setup. The app instance will handle requests to your next.js pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-server-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"server.js\"\nconst app = next()\n```\n```\n\n----------------------------------------\n\nTITLE: Adding to .gitignore\nDESCRIPTION: This snippet demonstrates how to add Next.js specific files and folders to your `.gitignore` to prevent them from being committed to your repository.  This includes the `.next` directory, the `next-env.d.ts` file, and the distribution folder.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_25\n\nLANGUAGE: txt\nCODE:\n```\n# ...\n.next\nnext-env.d.ts\ndist\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Cosmic Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js application using the `cms-cosmic` example.  The commands are shown for npm, yarn, and pnpm. Choose the package manager you prefer.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-cosmic cms-cosmic-app\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Tags from External Data in JavaScript\nDESCRIPTION: Shows how to apply cache tags from fetched data in JavaScript. This example tags cache entries with 'bookings-data' and uses ID from data fetched asynchronously.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_cacheTag as cacheTag } from 'next/cache'\n\nexport async function Bookings({ type = 'haircut' }) {\n  async function getBookingsData() {\n    'use cache'\n    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)\n    cacheTag('bookings-data', data.id)\n    return data\n  }\n  return //...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in _app.js\nDESCRIPTION: This code snippet demonstrates how to load a third-party script in the custom `_app.js` file in Next.js Pages Router. The script will load on every page. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Cosmic Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js application using the `cms-cosmic` example.  The commands are shown for npm, yarn, and pnpm. Choose the package manager you prefer.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-cosmic cms-cosmic-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with React Toolbox (Yarn)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with the React Toolbox example. It utilizes Yarn as the package manager. This command generates the necessary project files and sets up the environment for the example application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-toolbox with-react-toolbox-app\n```\n\n----------------------------------------\n\nTITLE: Updated User Agent Detection in Next.js Middleware\nDESCRIPTION: Updated implementation using the new userAgent function from next/server to detect device types. This is the recommended approach for handling user agent detection in Next.js middleware.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-parse-user-agent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n\n  request.nextUrl.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(request.nextUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Image src in Next.js\nDESCRIPTION: This snippet demonstrates how to access the `src` property of an image object in Next.js when using the standard `<img>` tag.  In Next.js, importing an image returns an object, so you need to access the `src` property to get the image URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env File\nDESCRIPTION: This snippet demonstrates how to define environment variables within a `.env` file. These variables can then be accessed within the Next.js application using `process.env`. The variables defined here are `DB_HOST`, `DB_USER`, and `DB_PASS`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n```\n\n----------------------------------------\n\nTITLE: Custom Components with Styled-components in JavaScript\nDESCRIPTION: Demonstrates the use of custom components with styled-components in a JavaScript Next.js setup, emphasizing the importance of passHref for compatibility. It requires 'next/link' and 'styled-components'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\nimport styled from 'styled-components'\n\n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n\nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n\nexport default NavLink\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Page Extensions in Next.js\nDESCRIPTION: This code snippet shows how to configure custom page extensions in the next.config.js file. It allows for supporting different file extensions for page components or including non-page files in the pages directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/page-without-valid-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Custom Page Extensions](/docs/pages/api-reference/config/next-config-js/pageExtensions)\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Yarn\nDESCRIPTION: This snippet shows the commands to install dependencies and start the Next.js development server using Yarn. `yarn install` installs the required packages, while `yarn dev` starts the development server, usually on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Passing Server Actions as props to Client Components in TypeScript\nDESCRIPTION: This example shows how to accept a Server Action as a prop in a Client Component with TypeScript type definitions, which can then be used with a form's action attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nexport default function ClientComponent({\n  updateItemAction,\n}: {\n  updateItemAction: (formData: FormData) => void\n}) {\n  return <form action={updateItemAction}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata in Next.js (Javascript)\nDESCRIPTION: This code defines metadata for a page in Next.js using JavaScript. It exports a `metadata` object to configure the page's `<head>` elements such as the title. This is used to set SEO-related data for the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Cosmic Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js application using the `cms-cosmic` example.  The commands are shown for npm, yarn, and pnpm. Choose the package manager you prefer.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-cosmic cms-cosmic-app\n```\n\n----------------------------------------\n\nTITLE: Using Localized Dictionary in Next.js Page Component\nDESCRIPTION: This snippet shows how to use the getDictionary function to fetch and apply localized strings in a Next.js page component, with both TypeScript and JavaScript versions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDictionary } from './dictionaries'\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ lang: 'en' | 'nl' }>\n}) {\n  const { lang } = await params\n  const dict = await getDictionary(lang) // en\n  return <button>{dict.products.cart}</button> // Add to Cart\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDictionary } from './dictionaries'\n\nexport default async function Page({ params }) {\n  const { lang } = await params\n  const dict = await getDictionary(lang) // en\n  return <button>{dict.products.cart}</button> // Add to Cart\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Server Action\nDESCRIPTION: This snippet demonstrates how to implement basic authentication in a Server Action. It checks if a user is signed in before allowing the action to proceed, throwing an error if the user is not authenticated.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { auth } from './lib'\n\nexport function addItem() {\n  const { user } = auth()\n  if (!user) {\n    throw new Error('You must be signed in to perform this action')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Fonts with Next.js Font Module\nDESCRIPTION: Shows how to use local fonts with the next/font/local module. This example demonstrates importing and applying a local font file to the root layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\nconst myFont = localFont({\n  src: './my-font.woff2',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\nconst myFont = localFont({\n  src: './my-font.woff2',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Packing Next.js without Build Step\nDESCRIPTION: Command to pack Next.js without running the build and install steps, useful when already running in dev mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next --no-build\n```\n\n----------------------------------------\n\nTITLE: Convert Absolute Image Imports in Next.js\nDESCRIPTION: This snippet shows how to update absolute import paths for images imported from the `/public` directory to relative imports when migrating to Next.js. This is necessary because Next.js handles static assets differently.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport logo from '/logo.png'\n\n// After\nimport logo from '../public/logo.png'\n```\n\n----------------------------------------\n\nTITLE: Constants Import for Next.js Tracing (JS)\nDESCRIPTION: Imports tracing-related constants from the constants file, which likely includes allowed span lists and other configuration values used by the tracing implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport './constants';\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 10 using Bun\nDESCRIPTION: Command to upgrade Next.js to version 10 using Bun package manager. This will update the next package in your project's dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@10\n```\n\n----------------------------------------\n\nTITLE: Building and starting a Next.js app with Yarn\nDESCRIPTION: These commands build and start the Next.js application using Yarn. `yarn build` optimizes the application for production deployment, while `yarn start` launches the production server. This assumes the Next.js project has already been created and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn start\n```\n\n----------------------------------------\n\nTITLE: URL Alphabet Import\nDESCRIPTION: Imports the URL-safe alphabet for ID generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { urlAlphabet } from './url-alphabet/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Presets for SWC Fallback in Next.js\nDESCRIPTION: This code snippet provides a Babel configuration to be used as a fallback when SWC fails to load. It is particularly useful when SWC compatibility issues arise. The configuration specifies 'next/babel' as a preset to ensure that Next.js specific functionalities are properly handled.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/failed-loading-swc.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"next/babel\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Image Imports in Next.js Configuration\nDESCRIPTION: Configuration to disable the new static image import feature in Next.js 11 if using custom image optimization packages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Post Data by ID in Next.js JavaScript\nDESCRIPTION: In this JavaScript snippet, a Next.js page fetches and renders post data using an ID parameter extracted from dynamic routes. The 'getPost' function handles data retrieval.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getPost } from '@/posts/data'\n\nexport default async function PostPage({ params }) {\n  const { id } = await params\n  const data = await getPost(id)\n\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      {/* ... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Memoized Data for Both Metadata and Page Rendering (JavaScript)\nDESCRIPTION: Illustrates how to use a memoized data fetch function for both metadata generation and page rendering in JavaScript, ensuring efficient data fetching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getPost } from '@/app/lib/data'\n\nexport async function generateMetadata({ params }) {\n  const post = await getPost(params.slug)\n  return {\n    title: post.title,\n    description: post.description,\n  }\n}\n\nexport default async function Page({ params }) {\n  const post = await getPost(params.slug)\n  return <div>{post.title}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with rosetta example using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application based on the `with-i18n-rosetta` example. It utilizes yarn's create command to bootstrap a new project named `with-i18n-rosetta-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-i18n-rosetta with-i18n-rosetta-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GraphQL-React example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the `with-graphql-react` example. It initializes a project named `with-graphql-react-app` with all necessary dependencies and configurations for GraphQL-React integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-graphql-react with-graphql-react-app\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Structured Error Utility\nDESCRIPTION: Re-exports the structured error utility function. This module provides access to the error structuring functionality that is used for formatting errors before sending them back to the Rust process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nexport { structuredError };\n```\n\n----------------------------------------\n\nTITLE: Implementing useReportWebVitals in Pages with Next.js\nDESCRIPTION: This example shows how to use the useReportWebVitals hook in a Next.js application within the pages router. The hook logs core web vital metrics to the console. The imported useReportWebVitals from 'next/web-vitals' is used in a custom MyApp component. Requires next/web-vitals package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Storybook example\nDESCRIPTION: This command uses `create-next-app` to generate a new Next.js application pre-configured with Storybook. It utilizes an example template to include the necessary Storybook setup and configurations. The `with-storybook-app` argument specifies the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-storybook with-storybook-app\n```\n\n----------------------------------------\n\nTITLE: Grid Gap Implementation\nDESCRIPTION: Implements responsive gap handling for grid layouts with theme-based spacing units. Includes prop types and filtering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const gap = (props)=>{\n    if (props.gap !== undefined && props.gap !== null) {\n        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');\n        const styleFromPropValue = (propValue)=>({\n                gap: getValue(transformer, propValue)\n            });\n        return handleBreakpoints(props, props.gap, styleFromPropValue);\n    }\n    return null;\n};\n\ngap.propTypes = process.env.NODE_ENV !== 'production' ? {\n    gap: responsivePropType\n} : {};\n\ngap.filterProps = [\n    'gap'\n];\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js App with Jest using npx\nDESCRIPTION: This snippet shows how to create a new Next.js application configured with Jest using npx. It uses the example 'with-jest-babel' to set up the application correctly. The expected output is a new application folder with all necessary configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-jest-babel with-jest-babel-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with cache-handler-redis example\nDESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cache-handler-redis` example. They use `create-next-app` with npm, Yarn, and pnpm respectively to initialize the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cache-handler-redis cache-handler-redis-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cache-handler-redis cache-handler-redis-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cache-handler-redis cache-handler-redis-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-prefetching' example.  It sets up a new project directory named 'with-prefetching-app' containing all required dependencies and configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-prefetching with-prefetching-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Example Configuration\nDESCRIPTION: This snippet demonstrates how to initialize a Next.js application using predefined example configuration from Builder.io. It supports multiple package managers, allowing flexibility depending on the user's preference.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-builder-io cms-builder-io-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-builder-io cms-builder-io-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-builder-io cms-builder-io-app\n```\n\n----------------------------------------\n\nTITLE: Extracting i18n Messages with npm\nDESCRIPTION: This npm script extracts default messages from the source code and generates the `en.json` file in the `lang/` directory.  This file serves as the source of truth for translations and is used by translation services.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run i18n:extract\n```\n\n----------------------------------------\n\nTITLE: Configuring Makeswift API Key\nDESCRIPTION: This code snippet demonstrates how to configure the Makeswift API key and host in the `.env.local` file. It highlights the addition of `MAKESWIFT_API_HOST` and `MAKESWIFT_SITE_API_KEY` environment variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-- MAKESWIFT_API_HOST=\n-- MAKESWIFT_SITE_API_KEY=\n++ MAKESWIFT_API_HOST=https://api.makeswift.com\n++ MAKESWIFT_SITE_API_KEY=<YOUR_MAKESWIFT_SITE_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Importing Server Functions in a Client Component with TypeScript\nDESCRIPTION: Example of importing and using a Server Function in a Client Component. This client-side component uses the 'use client' directive and imports the fetchUsers Server Function to execute it when a button is clicked.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport { fetchUsers } from '../actions'\n\nexport default function MyButton() {\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named `i18n-routing-pages-app` using the `i18n-routing-pages` example. It sets up the project with the configuration and dependencies needed for internationalized routing features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example i18n-routing-pages i18n-routing-pages-app\n```\n\n----------------------------------------\n\nTITLE: Exporting Core TurboPack Utilities in JavaScript\nDESCRIPTION: Combines and re-exports the IPC and structuredError utilities from different TurboPack parts. This module acts as an aggregator for the core TurboPack JavaScript utilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nexport { IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export IPC\"\n};\nexport { structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export structuredError\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with EdgeDB example - Bash\nDESCRIPTION: This command creates a new Next.js application using the `with-edgedb` example.  It uses `create-next-app` to bootstrap the project with the specified example and project name. The resulting project will be located in the `with-edgedb-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-edgedb with-edgedb-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Client-side State in JavaScript\nDESCRIPTION: JavaScript version of the Counter component using useState hook for managing click count state. Shows the implementation of a Client Component with the 'use client' directive.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/02-client-components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Headers in Next.js Route Handlers\nDESCRIPTION: Example of reading and setting headers in a Route Handler using the 'headers' function from next/headers. This demonstrates how to access and manipulate headers in both TypeScript and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const headersList = await headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport async function GET(request) {\n  const headersList = await headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting ReflectAdapter Class\nDESCRIPTION: Imports the ReflectAdapter class from the adapters/reflect module and re-exports it with a named export. Uses TurboPack module assertion syntax for part declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { ReflectAdapter } from './adapters/reflect';\nexport { ReflectAdapter as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using 'use server' Directive at File Level in TypeScript\nDESCRIPTION: Example of implementing a file with the 'use server' directive at the top, marking all functions in the file to be executed on the server side. This example shows creating a user in a database using TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function createUser(data: { name: string; email: string }) {\n  const user = await db.user.create({ data })\n  return user\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function d3 and Exporting it via TurboPack in JavaScript\nDESCRIPTION: This snippet defines `d3` and employs the same export technique seen in previous snippets, affirming the use of TurboPack for module management.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction d3() {}\nexport { d3 as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Docker\nDESCRIPTION: This command initializes a new Next.js application with Docker support using create-next-app. It provides three different package managers (npm, Yarn, and pnpm) for bootstrapping the application template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-docker nextjs-docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-docker nextjs-docker\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-docker nextjs-docker\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File (Bash)\nDESCRIPTION: This command copies the example environment configuration file to a local environment file.  This allows for customizing the environment variables without affecting the original example file and prevents the local configuration from being committed to version control.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Returning Non-UI Content in Next.js - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the generation of an RSS feed response in a GET request. It returns XML content that is compliant with the RSS feed format.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  return new Response(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n\n</rss>`)\n}\n```\n\n----------------------------------------\n\nTITLE: Using getStaticProps for Data Fetching in Next.js\nDESCRIPTION: Illustrates how to use getStaticProps for data fetching when using next export or output: 'export' in next.config.js. It fetches data from an API and includes a revalidation period.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch('https://api.vercel.app/blog')\n  const data = await res.json()\n\n  return {\n    props: { data },\n    revalidate: 60,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Paste and TypeScript using pnpm\nDESCRIPTION: This command employs pnpm to generate a new Next.js application based on the 'with-paste-typescript' example.  The project will be pre-configured with Paste components and TypeScript support. The new application's directory will be 'with-paste-typescript-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-paste-typescript with-paste-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This snippet shows the commands to start the Next.js development server using npm, yarn, pnpm, or bun. The server will run on localhost:3000 by default, and any changes to the code will be automatically reflected in the browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Layout with Client Component Integration (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to integrate a Client Component within a Layout. The Client Component will re-render on navigation allowing access to hooks like `usePathname`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientComponent } from '@/app/ui/ClientComponent'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <ClientComponent />\n      {/* Other Layout UI */}\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Nhost Example (pnpm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-nhost-auth-realtime-graphql` example. It employs `create next-app` with pnpm to bootstrap the project. `nhost-app` is the name assigned to the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-nhost-auth-realtime-graphql nhost-app\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Next.js component\nDESCRIPTION: This JSX snippet shows how to import and use CSS Modules in a Next.js component. It imports a CSS Module file (`styles.module.css`) and applies the styles to a specific component using the `className` attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/css-global.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from '../../styles.module.css'\\n\\nexport default function Home() {\\n  return <div className={styles.container}>Hello World</div>\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Server Functions in a Client Component with JavaScript\nDESCRIPTION: Example of importing and using a Server Function in a Client Component. This client-side component uses the 'use client' directive and imports the fetchUsers Server Function to execute it when a button is clicked.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport { fetchUsers } from '../actions'\n\nexport default function MyButton() {\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Session Cookie - TypeScript\nDESCRIPTION: This snippet deletes the 'session' cookie using the `next/headers` cookies API, effectively logging out the user. It imports 'server-only' and the `cookies` function from `next/headers`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport async function deleteSession() {\n  const cookieStore = await cookies()\n  cookieStore.delete('session')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with cxs using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the with-cxs example. It utilizes Yarn to execute the create next-app package and sets up the project with the necessary dependencies and configurations for using cxs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-cxs with-cxs-app\n```\n\n----------------------------------------\n\nTITLE: Basic Not Found Component Implementation in Next.js (JavaScript)\nDESCRIPTION: A basic implementation of the not-found.js component in JavaScript for a blog route that renders a custom 404 Not Found page with a link to return to the home page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring htmlLimitedBots in Next.js with TypeScript\nDESCRIPTION: TypeScript example showing how to configure the htmlLimitedBots option in next.config.ts to specify a list of user agents that should receive blocking metadata. The example demonstrates setting a pipe-separated list of bot names.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/htmlLimitedBots.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst config: NextConfig = {\n  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Elasticsearch Example\nDESCRIPTION: These commands use create-next-app to bootstrap a new Next.js application using the with-elasticsearch example.  It shows how to use npm, yarn, and pnpm to create the application. The created app will be named with-elasticsearch-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-elasticsearch with-elasticsearch-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-elasticsearch with-elasticsearch-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-elasticsearch with-elasticsearch-app\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting validateURL Function\nDESCRIPTION: Imports the validateURL function from the utils module and re-exports it with a named export. Uses TurboPack module assertion syntax for part declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { validateURL } from '../utils';\nexport { validateURL as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation with Styled Components - TypeScript\nDESCRIPTION: This snippet shows how to use the StyledComponentsRegistry in a Next.js root layout to apply styled-components styles to all children components, using TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with @next/env - JavaScript\nDESCRIPTION: This JavaScript snippet uses the `@next/env` package to load environment variables from `.env*` files.  It retrieves the project directory using `process.cwd()` and then calls `loadEnvConfig` to load the environment variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { loadEnvConfig } from '@next/env'\n\nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n```\n\n----------------------------------------\n\nTITLE: Valid Config: Static Boolean - Next.js JavaScript\nDESCRIPTION: This snippet demonstrates valid `config` definitions where `config.amp` is assigned a static boolean value. This is allowed as the value is not dynamic and is directly defined within the object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {\n  amp: true,\n}\n\nexport const config = {\n  amp: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dictionary Loader Function in TypeScript and JavaScript\nDESCRIPTION: This code defines a getDictionary function that dynamically imports localized dictionaries based on the requested locale. It supports both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only'\n\nconst dictionaries = {\n  en: () => import('./dictionaries/en.json').then((module) => module.default),\n  nl: () => import('./dictionaries/nl.json').then((module) => module.default),\n}\n\nexport const getDictionary = async (locale: 'en' | 'nl') =>\n  dictionaries[locale]()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\n\nconst dictionaries = {\n  en: () => import('./dictionaries/en.json').then((module) => module.default),\n  nl: () => import('./dictionaries/nl.json').then((module) => module.default),\n}\n\nexport const getDictionary = async (locale) => dictionaries[locale]()\n```\n\n----------------------------------------\n\nTITLE: Overwriting Encryption Key in Next.js\nDESCRIPTION: This snippet shows how to set the persistent encryption key for Next.js Server Actions using an environment variable. Ensure that the key is AES-GCM encrypted to maintain security across multiple server instances.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/failed-to-find-server-action.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY = 'your-aes-gcm-encrypted-key';\n```\n\n----------------------------------------\n\nTITLE: Migrating Link Component from Next.js 12 to 13\nDESCRIPTION: Example showing the difference between the Link component usage in Next.js 12 vs 13. In Next.js 13, the Link component no longer requires manually adding an <a> tag as a child.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n\n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Loading Third-Party Scripts with Next.js Script Component\nDESCRIPTION: This snippet demonstrates how to use the Next.js Script component to load third-party scripts asynchronously. It imports the Script component from 'next/script' and uses it within a React functional component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-sync-scripts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nfunction Home() {\n  return (\n    <div class=\"container\">\n      <Script src=\"https://third-party-script.js\"></Script>\n      <div>Home Page</div>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Reflux Example (Yarn)\nDESCRIPTION: This command uses `create next-app` with Yarn to create a new Next.js application based on the `with-reflux` example. It initializes a new project directory named `with-reflux-app` with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-reflux with-reflux-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Short-lived Caches in Next.js\nDESCRIPTION: Demonstrates how to implement caching with different lifetimes for optimal prerendering and client-side caching behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getDashboard() {\n  \"use cache\"\n  // This cache will revalidate after 1 second. It is so short\n  // Next.js won't prerender it on the server but the client router\n  // can reuse the result for up to 30 seconds unless the user manually refreshes\n  cacheLife('seconds')\n  return db.query(...)\n}\n\nexport default async function Page() {\n  const data = await getDashboard(token);\n  return <Dashboard data={data}>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getDashboard() {\n  \"use cache\"\n  // This cache will revalidate after 1 minute. It's long enough that\n  // Next.js will still produce a fully or partially prerendered page\n  cacheLife('minutes')\n  return db.query(...)\n}\n\nexport default async function Page() {\n  const data = await getDashboard(token);\n  return <Dashboard data={data}>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting NextURL Class\nDESCRIPTION: Imports the NextURL class from the next-url module and re-exports it with a named export. Uses TurboPack module assertion syntax for part declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { NextURL } from '../next-url';\nexport { NextURL as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: License information for undici/lib/web/websocket/frame.js\nDESCRIPTION: This snippet shows the license information for the `frame.js` file within the `undici` library. It indicates that the code is licensed under the MIT License and credits Einar Otto Stangvik as the author.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/fetch.js.LEGAL.txt#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n\"/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using pnpm\nDESCRIPTION: This command utilizes pnpm's create next-app to scaffold a new Next.js project with the 'with-passport' example. It creates a directory named 'with-passport-app' containing the boilerplate code for the authentication example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-passport with-passport-app\n```\n\n----------------------------------------\n\nTITLE: Using a Dynamic Component with Suspense in TypeScript\nDESCRIPTION: Example of a TypeScript page that properly implements PPR by wrapping a dynamic User component with Suspense and providing a fallback skeleton component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Specific Cloud Provider Image Loader Examples\nDESCRIPTION: Collection of image loader configurations for various cloud providers and image optimization services, demonstrating how to generate dynamic image URLs with width, quality, and format parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/images.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://example.com/${params.join(',')}${src}`\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default function imgixLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('auto', params.getAll('auto').join(',') || 'format')\n  params.set('fit', params.get('fit') || 'max')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 50).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Absolute Image Import Paths - TSX\nDESCRIPTION: This code shows how to convert absolute import paths for images from `/public` to relative imports in Next.js. This ensures that the image is correctly resolved during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport logo from '/logo.png'\n\n// After\nimport logo from '../public/logo.png'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Emotion (pnpm)\nDESCRIPTION: This command utilizes pnpm to initialize a new Next.js application with Emotion.  It uses `create next-app` along with the `with-emotion-swc` example to scaffold the project.  The new app will be located in the `with-emotion-swc-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-emotion-swc with-emotion-swc-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with React Toolbox (pnpm)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with the React Toolbox example.  It uses pnpm as the package manager.  This sets up a new Next.js project with all the required dependencies and configuration for the React Toolbox example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-toolbox with-react-toolbox-app\n```\n\n----------------------------------------\n\nTITLE: Download GraphQL schema (pnpm)\nDESCRIPTION: This command uses pnpm to execute the 'schema' script defined in the project's package.json. The purpose is to download the schema introspection data from the configured Relay endpoint. This assumes that 'schema' script is properly configured to fetch the schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm schema\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting Node.js Net Module\nDESCRIPTION: Imports the createConnection function from the node:net module and re-exports it with a different name using TurboPack's module system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { createConnection } from \"node:net\";\nexport { createConnection as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts with Next.js Font Module\nDESCRIPTION: Demonstrates how to use Google Fonts with the next/font module. This example shows importing and applying a Google Font to the root layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Geist } from 'next/font/google'\n\nconst geist = Geist({\n  subsets: ['latin'],\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={geist.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Geist } from 'next/font/google'\n\nconst geist = Geist({\n  subsets: ['latin'],\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={geist.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with FingerprintJS Pro Example (Yarn)\nDESCRIPTION: This command uses `create-next-app` with Yarn to generate a new Next.js project pre-configured with the FingerprintJS Pro example. It requires Yarn to be installed. The project will be created in a directory named `with-fingerprintjs-pro-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app\n```\n\n----------------------------------------\n\nTITLE: Setting Umbraco Heartcore environment variables\nDESCRIPTION: This code block represents the structure of the .env.local file, demonstrating the required environment variables for connecting to Umbraco Heartcore.  It highlights `UMBRACO_PROJECT_ALIAS`, `UMBRACO_API_KEY`, and `UMBRACO_PREVIEW_SECRET`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUMBRACO_PROJECT_ALIAS=...\nUMBRACO_API_KEY=...\nUMBRACO_PREVIEW_SECRET=...\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Video.js Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-videojs example. It bootstraps the project with necessary dependencies and configurations for Video.js integration. The new application will be named with-videojs-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-videojs with-videojs-app\n```\n\n----------------------------------------\n\nTITLE: Import Chart component and define year variable\nDESCRIPTION: This snippet imports the Chart component from \"./snowfall.js\" and defines a constant variable 'year' with the value 2018. The Chart component is presumably responsible for rendering a visual representation of snowfall data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/tests/node-file-trace/integration/mdx/example.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Chart } from \"./snowfall.js\";\nexport const year = 2018;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Next.js\nDESCRIPTION: This snippet illustrates how to configure Tailwind CSS in a Next.js project by updating the tailwind.config.js file to include relevant directories, enabling the use of Tailwind styles in the app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Images with Next.js Image Component\nDESCRIPTION: Illustrates how to use remote images with the Next.js Image component. This example shows the need to manually specify width and height for remote images.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Download GraphQL schema (npm)\nDESCRIPTION: This command uses npm to execute the 'schema' script defined in the project's package.json. The purpose is to download the schema introspection data from the configured Relay endpoint. This assumes that 'schema' script is properly configured to fetch the schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run schema\n```\n\n----------------------------------------\n\nTITLE: Manually Upgrading Next.js and React Dependencies\nDESCRIPTION: Manually updates Next.js, React, React DOM, and ESLint configuration to their latest versions using npm. This approach requires you to handle any breaking changes yourself.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-upgrading.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Using a Dynamic Component with Suspense in JavaScript\nDESCRIPTION: Example of a JavaScript page that properly implements PPR by wrapping a dynamic User component with Suspense and providing a fallback skeleton component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using Yarn\nDESCRIPTION: This command utilizes Yarn's create next-app to scaffold a new Next.js project with the 'with-passport' example. It creates a directory named 'with-passport-app' containing the boilerplate code for the authentication example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-passport with-passport-app\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Umbraco App\nDESCRIPTION: This snippet details the environment variables required to run the Next.js app properly. It includes the Umbraco server URL and API Keys necessary for configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_TLS_REJECT_UNAUTHORIZED=0\nUMBRACO_SERVER_URL='https://localhost:12345'\nUMBRACO_DELIVERY_API_KEY='my-secret-api-key'\nUMBRACO_PREVIEW_SECRET='my-preview-secret'\n```\n\n----------------------------------------\n\nTITLE: Layout with Client Component Integration (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to integrate a Client Component within a Layout. The Client Component will re-render on navigation allowing access to hooks like `usePathname`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ClientComponent } from '@/app/ui/ClientComponent'\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <ClientComponent />\n      {/* Other Layout UI */}\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BLOG_URL environment variable\nDESCRIPTION: This command sets the BLOG_URL environment variable in the `.env` file.  The URL should point to the deployed blog application on Vercel. This allows the 'home' app to rewrite requests to the 'blog' app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Replace this URL with the URL of your blog app\nBLOG_URL=\"https://with-zones-blog.vercel.app\"\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Playwright Example (Yarn)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with a pre-configured Playwright setup. It utilizes the `--example` flag to specify the `with-playwright` example. It requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-playwright with-playwright-app\n```\n\n----------------------------------------\n\nTITLE: Replacing URL with Next.js Link in JavaScript\nDESCRIPTION: Shows how to prevent adding a new entry to the history stack with the replace prop of the Link component in JavaScript. Utilizes standard Next.js setup and enhances URL handling in applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/about\" replace>\n      About us\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Export of Async Functions - JavaScript\nDESCRIPTION: This snippet provides a correct example of exporting an async function in a 'use server' file. It demonstrates the appropriate way to define functions that can be accessed as Server Actions in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-use-server-value.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\"\n\n// ✅ This is correct: an async function is exported.\nexport async function getServerData() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Drupal example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'cms-drupal-app' based on the 'cms-drupal' example. Pnpm offers efficient dependency management for the Next.js project initialization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-drupal cms-drupal-app\n```\n\n----------------------------------------\n\nTITLE: Running Jest tests using npm, yarn, or pnpm\nDESCRIPTION: These are example commands which can be used to run the tests using `npm`, `yarn`, or `pnpm`.  The correct command depends on which package manager is used for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n# or\nyarn test\n# or\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Enabling AVIF Support in Next.js\nDESCRIPTION: This snippet enables support for the AVIF image format in Next.js and sets it as a fallback to the original image format if the browser does not support AVIF. This helps improve image compression while maintaining support for legacy formats.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/avif'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Redis example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'roadmap' based on the 'with-redis' example. This bootstraps the project with the necessary dependencies and configuration for using Redis with Upstash.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-redis roadmap\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with pnpm\nDESCRIPTION: This snippet provides instructions for creating a new Next.js application using pnpm while utilizing the 'hello-world' example. pnpm must be installed. The command facilitates the creation of a new Next.js project setup in the specified location.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example hello-world hello-world-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Nhost Example (npm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-nhost-auth-realtime-graphql` example. It leverages `create-next-app` with npm to bootstrap the project.  `nhost-app` is the name assigned to the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-nhost-auth-realtime-graphql nhost-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Electron App with Next.js Using Yarn\nDESCRIPTION: The code snippet shows how to initialize a Next.js application tailored for Electron using Yarn's create command. Similar to npm, this command establishes the app's foundational structure for immediate development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-electron with-electron-app\n```\n\n----------------------------------------\n\nTITLE: Using 'use server' Directive at File Level in JavaScript\nDESCRIPTION: Example of implementing a file with the 'use server' directive at the top, marking all functions in the file to be executed on the server side. This example shows creating a user in a database using JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function createUser(data) {\n  const user = await db.user.create({ data })\n  return user\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing URL with Next.js Link in TypeScript\nDESCRIPTION: Describes how to use the replace property of the Link component in TypeScript to avoid adding a new history entry. Uses Next.js dependencies and provides examples within a functional component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/about\" replace>\n      About us\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Next.js - TypeScript\nDESCRIPTION: This TypeScript snippet provides an implementation for receiving and processing webhooks. It captures the payload and handles errors gracefully, returning appropriate responses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up PropTypes for rowGap Styling Function\nDESCRIPTION: Implements prop type validation for the rowGap styling function using responsivePropType. The validation is only applied in non-production environments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i as rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nimport responsivePropType from './responsivePropType';\nrowGap.propTypes = process.env.NODE_ENV !== 'production' ? {\n    rowGap: responsivePropType\n} : {};\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cache Tag in Next.js TypeScript\nDESCRIPTION: Covers using the revalidateTag function in a TypeScript file to purge a cache entry tagged with 'my-data'. This snippet is part of an async submit function designed to revalidate tagged cache data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('my-data')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB CLI - Windows (Powershell)\nDESCRIPTION: This command installs the EdgeDB CLI on Windows using PowerShell. It downloads and executes a PowerShell script from the EdgeDB website using `iwr` (Invoke-WebRequest) and `iex` (Invoke-Expression). The script handles the installation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$ iwr https://ps1.edgedb.com -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with XState\nDESCRIPTION: This command bootstraps a new Next.js application using the with-xstate example. It utilizes create-next-app with pnpm to initialize the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-xstate with-xstate-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the cms-dotcms example.  It initializes the project in a directory named cms-dotcms-app.  It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-dotcms cms-dotcms-app\n```\n\n----------------------------------------\n\nTITLE: Disallowed: Re-exporting all exports in Next.js page\nDESCRIPTION: This code snippet demonstrates the disallowed pattern of re-exporting all exports from another file within a Next.js page.  This can cause issues because server-side code (like imports from 'fs') can be accidentally included in the browser bundle.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport * from '...'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Sitefinity example\nDESCRIPTION: This command initializes a new Next.js application using the cms-sitefinity example. It utilizes yarn to execute the create next-app command with the specified example and target directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-sitefinity cms-sitefinity-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for Azure Pipelines uses the Cache task to cache the Next.js cache directory. It should be added prior to the task that executes next build.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: Cache@2\n  displayName: 'Cache .next/cache'\n  inputs:\n    key: next | $(Agent.OS) | yarn.lock\n    path: '$(System.DefaultWorkingDirectory)/.next/cache'\n```\n\n----------------------------------------\n\nTITLE: Exporting Function c1_3 and Calling c1_1 in JavaScript\nDESCRIPTION: This snippet defines and exports the function `c1_3`, which relies on `c1_1` and `d2`. This showcases circular dependencies between the functions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function c1_3() {\n    return c1_1(d2);\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Next.js App with Plasmic Example (Yarn)\nDESCRIPTION: This command uses the `create next-app` tool with Yarn to bootstrap a new Next.js application using the `cms-plasmic` example. It creates a new directory named `cms-plasmic-app` containing the project files. Requires Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-plasmic cms-plasmic-app\n```\n\n----------------------------------------\n\nTITLE: Referencing Next.js SWC Package for Windows ARM64\nDESCRIPTION: Package name reference for the Windows ARM64 MSVC-compiled binary of the Next.js SWC compiler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/win32-arm64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@next/swc-win32-arm64-msvc\n```\n\n----------------------------------------\n\nTITLE: Other Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the custom metadata configuration. It includes a `<meta>` tag with the specified name and content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_65\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"custom\" content=\"meta\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Error Boundary in Next.js with JavaScript\nDESCRIPTION: JavaScript implementation of an error boundary component for handling runtime errors in Next.js route segments. Provides same functionality as TypeScript version but without type definitions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client' // Error boundaries must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Sass example using npm\nDESCRIPTION: This command uses npx to create a new Next.js application based on the with-sass example. It sets up the project with the necessary Sass configurations and dependencies. The with-sass-app argument specifies the directory where the new application will be created.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-sass with-sass-app\n```\n\n----------------------------------------\n\nTITLE: Using Global MDX Component\nDESCRIPTION: Example showing how to use a globally provided Marker component within an MDX file\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/provider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Marker />\n```\n\n----------------------------------------\n\nTITLE: Importing custom matchers in Jest setup (JavaScript)\nDESCRIPTION: This JavaScript snippet imports the `@testing-library/jest-dom` module to make custom matchers available in Jest tests. This allows developers to utilize custom matchers to improve assertion expressiveness during testing by only importing once in a setup file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@testing-library/jest-dom'\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This is commonly done to create a local environment configuration file from a template, ensuring that sensitive information is not committed to version control.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Conditional Request Handling in Next.js Middleware (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of conditional request handling in middleware, applying different rewrites based on the request path without TypeScript type definitions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Vanilla Extract using NPX\nDESCRIPTION: This command uses NPX to create a new Next.js application based on the Vanilla Extract example. It sets up a project named 'with-vanilla-extract-app' using the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-vanilla-extract with-vanilla-extract-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application named 'my-blog' using the 'blog' example. It sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example blog my-blog\n```\n\n----------------------------------------\n\nTITLE: Next.js Index Page Component (Pages Router)\nDESCRIPTION: Defines a Next.js index page component within the `pages` directory using the Pages Router. It renders a heading and a link to the about page. Requires Next.js and `next/link`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending MDX File Extensions\nDESCRIPTION: Next.js MDX configuration to support both .md and .mdx file extensions for compilation\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst withMDX = require('@next/mdx')({\n  extension: /\\.(md|mdx)$/,\n})\nmodule.exports = withMDX()\n```\n\n----------------------------------------\n\nTITLE: Using devlow-bench CLI Options (Bash)\nDESCRIPTION: This snippet shows various command-line options for executing devlow-bench, including filtering scenarios, outputting results, and accessing help. This facilitates customized scenario execution and result processing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: devlow-bench [options] <scenario files>\n  --scenario=<filter>, -s=<filter>   Only run the scenario with the given name\n  --interactive, -i                  Select scenarios and variants interactively\n  --<prop>=<value>                   Filter by any variant property defined in scenarios\n  --json=<path>, -j=<path>           Write the results to the given path as JSON\n  --console                          Print the results to the console\n  --datadog[=<hostname>]             Upload the results to Datadog\n                                     (requires DATADOG_API_KEY environment variables)\n  --help, -h, -?                     Show this help\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 14 with PNPM\nDESCRIPTION: Command to upgrade Next.js to version 14 using PNPM package manager. Includes installation of React 18 and ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i next@next-14 react@18 react-dom@18 && pnpm i eslint-config-next@next-14 -D\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with AMP Example (Yarn)\nDESCRIPTION: Uses Yarn to create a new Next.js application based on the AMP example. This command initializes the project with the necessary files and configurations for AMP support. It clones the 'amp' example template and names the new application 'amp-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example amp amp-app\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js MDX Configuration\nDESCRIPTION: Simple Next.js configuration file for enabling MDX support with default settings\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst withMDX = require('@next/mdx')()\nmodule.exports = withMDX()\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Next.js\nDESCRIPTION: Git commands to stage and commit changes to the local development branch with a descriptive message.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"DESCRIBE_YOUR_CHANGES_HERE\"\n```\n\n----------------------------------------\n\nTITLE: Initial Cat Value Export\nDESCRIPTION: Exports the initial value of the cat variable\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialCat = cat;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses `create next-app` with Yarn to bootstrap a Next.js application using the `with-linaria` example. The new application will be named `with-linaria-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-linaria with-linaria-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with dynamic-import example (pnpm)\nDESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application based on the `with-dynamic-import` example. It creates a directory named `with-dynamic-import-app` containing the new project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-dynamic-import with-dynamic-import-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with urql example (npm)\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-urql-app' based on the 'with-urql' example. It downloads and executes the create-next-app package to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-urql with-urql-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Reflux Example (npm)\nDESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `with-reflux` example. It initializes a new project directory named `with-reflux-app` with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-reflux with-reflux-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses `create next-app` with Yarn to bootstrap a Next.js project configured to use Storyblok CMS. It creates a new directory `cms-storyblok-app` with the required files and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-storyblok cms-storyblok-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Segment Analytics using NPX\nDESCRIPTION: This command initializes a new Next.js application with the 'with-segment-analytics-pages-router' example using npx. It clones the example and sets up the necessary project structure for integrating Segment Analytics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-segment-analytics-pages-router with-segment-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Migrating to Async Dynamic APIs in Next.js\nDESCRIPTION: Codemod to transform dynamic APIs (cookies(), headers(), draftMode()) that are now asynchronous to be properly awaited or wrapped with React.use() if applicable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies, headers } from 'next/headers'\nconst token = cookies().get('token')\n\nfunction useToken() {\n  const token = cookies().get('token')\n  return token\n}\n\nexport default function Page() {\n  const name = cookies().get('name')\n}\n\nfunction getHeader() {\n  return headers().get('x-foo')\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react'\nimport {\n  cookies,\n  headers,\n  type UnsafeUnwrappedCookies,\n  type UnsafeUnwrappedHeaders,\n} from 'next/headers'\nconst token = (cookies() as unknown as UnsafeUnwrappedCookies).get('token')\n\nfunction useToken() {\n  const token = use(cookies()).get('token')\n  return token\n}\n\nexport default async function Page() {\n  const name = (await cookies()).get('name')\n}\n\nfunction getHeader() {\n  return (headers() as unknown as UnsafeUnwrappedHeaders).get('x-foo')\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with @next/env - TypeScript\nDESCRIPTION: This TypeScript snippet uses the `@next/env` package to load environment variables from `.env*` files. It retrieves the project directory using `process.cwd()` and then calls `loadEnvConfig` to load the environment variables.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadEnvConfig } from '@next/env'\n\nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n```\n\n----------------------------------------\n\nTITLE: Correcting Path Parameter in Next.js app.render() Method\nDESCRIPTION: When using the app.render() method in Next.js, ensure that the path parameter always starts with a forward slash ('/') to avoid unexpected behavior. This applies to the third argument of app.render(req, res, path).\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/render-no-starting-slash.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.render(req, res, '/your-path')\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Styletron using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the Styletron example.  It initializes a project named 'with-styletron-app' using the 'with-styletron' example template. Requires Node.js and npm installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-styletron with-styletron-app\n```\n\n----------------------------------------\n\nTITLE: Next.js About Page Component (Pages Router)\nDESCRIPTION: Defines a Next.js about page component within the `pages` directory using the Pages Router. It renders a heading and a link to the home page.  Requires Next.js and `next/link`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe API Keys\nDESCRIPTION: This code shows the placeholder for Stripe Publishable and Secret keys inside the `.env.local` file. These are essential for the application to interact with Stripe's API.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>\nSTRIPE_SECRET_KEY=<replace-with-your-secret-key>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Paste and TypeScript using npx\nDESCRIPTION: This command uses npx to create a new Next.js application with the specified example template (with-paste-typescript).  It bootstraps the project with Paste and TypeScript configurations. The resulting application will be named 'with-paste-typescript-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-paste-typescript with-paste-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with useRouter Hook\nDESCRIPTION: Shows how to use the useRouter hook in Client Components for programmatic navigation. This approach is useful when navigation needs to be triggered by events or conditions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated User Agent Detection in Next.js Middleware\nDESCRIPTION: Example showing the deprecated way of accessing user agent information using req.ua in Next.js middleware. This approach is no longer supported and should be updated.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-parse-user-agent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'\n\n  request.nextUrl.searchParams.set('viewport', viewport)\n  return NextResponse.rewrites(request.nextUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Watching URL Changes with componentDidUpdate in Next.js\nDESCRIPTION: This example demonstrates how to watch for URL changes using the componentDidUpdate lifecycle method in a class component when using shallow routing in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ncomponentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.counter !== prevProps.router.query.counter) {\n    // fetch data based on the new query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Segment Analytics using Yarn\nDESCRIPTION: This command initializes a new Next.js application with the 'with-segment-analytics-pages-router' example using Yarn. It clones the example and sets up the necessary project structure for integrating Segment Analytics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-segment-analytics-pages-router with-segment-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Cypress E2E Configuration (JavaScript)\nDESCRIPTION: Configures Cypress for End-to-End (E2E) testing using JavaScript. Defines the `setupNodeEvents` function within the `e2e` configuration block.  Requires the `cypress` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode (npm)\nDESCRIPTION: This command starts the Next.js application in development mode using npm. It allows developers to preview and test the application locally before deployment. The app will typically run on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating Static Parameters with Empty Array in Next.js\nDESCRIPTION: Configures generateStaticParams to return an empty array, which means no paths will be rendered at build time. Instead, all paths will be statically rendered the first time they're visited.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  return []\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Next.js Page Props Using Browser DevTools\nDESCRIPTION: Command to inspect the page props data passed to a Next.js page by parsing the __NEXT_DATA__ element content in browser developer tools.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/large-page-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.parse(document.getElementById(\"__NEXT_DATA__\").textContent)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Shows the structure of the `.env.local` file needed to connect with the Prepr API. Includes placeholders for production and preview tokens and a preview secret.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPREPRIO_API=https://graphql.prepr.io/graphql\nPREPRIO_PRODUCTION_TOKEN='your Production access token'\nPREPRIO_PREVIEW_TOKEN='your Preview access token'\nPREPRIO_PREVIEW_SECRET='your secret id'\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions Error Handling in Next.js\nDESCRIPTION: Server action implementation that handles form submission errors and redirects. Uses form validation and returns error messages instead of throwing exceptions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function createUser(prevState: any, formData: FormData) {\n  const res = await fetch('https://...')\n  const json = await res.json()\n\n  if (!res.ok) {\n    return { message: 'Please enter a valid email' }\n  }\n\n  redirect('/dashboard')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function createUser(prevState, formData) {\n  const res = await fetch('https://...')\n  const json = await res.json()\n\n  if (!res.ok) {\n    return { message: 'Please enter a valid email' }\n  }\n\n  redirect('/dashboard')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Class for Bubble Handling\nDESCRIPTION: Defines a custom BubbledError class that extends Error to handle bubbled errors with additional properties for bubble and result data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nclass BubbledError extends Error {\n    constructor(bubble, result){\n        super();\n        this.bubble = bubble;\n        this.result = result;\n    }\n}\nexport { BubbledError as s } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Locally for Development\nDESCRIPTION: Commands to install dependencies and start Next.js development server locally. Requires npm, Yarn, or pnpm, based on the selected command. Results in a live blog development server running on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install && yarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application using the api-routes-apollo-server example. It bootstraps the project with the necessary dependencies and configurations for integrating Apollo GraphQL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example api-routes-apollo-server api-routes-apollo-server-app\n```\n\n----------------------------------------\n\nTITLE: Using NextRequest in Route Handlers\nDESCRIPTION: Demonstrates how to use the NextRequest object in a Route Handler, which is an extension of the Web Request API that provides additional functionality like access to cookies and an extended URL object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const url = request.nextUrl\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  const url = request.nextUrl\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Headers in Next.js - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the configuration of CORS headers in a GET route. It sets the necessary headers to allow various HTTP methods and origins.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: This command copies the example environment file (`env.local.example`) to a local environment file (`.env.local`). This allows you to configure environment variables specific to your local development environment.  The `.env.local` file is typically ignored by Git.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with TakeShape Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the cms-takeshape example. It bootstraps the project with the necessary files and dependencies to connect to TakeShape.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-takeshape cms-takeshape-app\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Replacement Example (JSX)\nDESCRIPTION: This code snippet illustrates how Next.js replaces `process.env.customKey` with its actual value ('my-value') during the build process. This replacement happens due to the webpack DefinePlugin.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/env.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <h1>The value of customKey is: {process.env.customKey}</h1>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <h1>The value of customKey is: {'my-value'}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Next.js Components\nDESCRIPTION: Shows how to use CSS Modules to import component-scoped CSS files in Next.js. This approach provides CSS isolation and prevents style conflicts between components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-css-tags.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './extra.module.css'\n\nexport class Home {\n  render() {\n    return (\n      <div>\n        <button type=\"button\" className={styles.active}>\n          Open\n        </button>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Route Handlers - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates accessing environment variables within a Next.js Route Handler. It connects to a database using variables defined in the `.env` file such as `DB_HOST`, `DB_USER`, and `DB_PASS`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Next.js\nDESCRIPTION: This snippet demonstrates how to import CSS Modules into a Next.js component for scoped styling, ensuring unique class names to prevent collisions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Symlink Testing Setup for Next.js\nDESCRIPTION: Explains the purpose of testing Next.js behavior when files are symbolic links, particularly in build orchestration environments like Bazel's sandbox.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/production/app-dir/symbolic-file-links/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Symbolic File Links\n\nThis test represents what the Next.js file structure may look like when run\nunder a build orchestrator, such as bazel, where its sandbox sets up all files\nto be symlinks to their original source.\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Data Access with use cache Directive\nDESCRIPTION: Corrected implementation that uses the 'use cache' directive to enable data caching for prerendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { db } from './db'\n\nexport async function generateViewport() {\n  \"use cache\"\n  const { width, initialScale } = await db.query('viewport-size')\n  return {\n    width,\n    initialScale,\n  }\n}\n\nexport default async function Layout({ children }) {\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with React Hook Form Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application with the 'with-react-hook-form' example. It bootstraps the project with the necessary dependencies and configurations for integrating React Hook Form.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-hook-form with-react-hook-form-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Reflexjs using pnpm\nDESCRIPTION: This command uses pnpm to execute create next-app with the with-reflexjs example. It creates a new Next.js application named with-reflexjs-app with Reflexjs pre-configured. This requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-reflexjs with-reflexjs-app\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Behavior with Link Component in App Router (TypeScript)\nDESCRIPTION: Example of disabling default scroll behavior with the Next.js Link component in App Router. Setting scroll to false prevents Next.js from scrolling to the top of the page after navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Files Synchronously in Node.js\nDESCRIPTION: This snippet illustrates the use of `fs.readFileSync` to read a file synchronously in Node.js. It uses 'unknown' as a parameter, indicating that this should be replaced with a valid file path string for functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfs.readFileSync(unknown);\n```\n\n----------------------------------------\n\nTITLE: Named Exports with TurboPack Part Identifiers\nDESCRIPTION: Exports specific named imports with TurboPack's part assertion system. Used to expose the IPC and structuredError functionality to other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport { IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export IPC\"\n};\nexport { structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export structuredError\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Fela using npx\nDESCRIPTION: This command utilizes npx to create a new Next.js application using the 'with-fela' example. It bootstraps the project, setting up the necessary files and configurations for Fela integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-fela with-fela-app\n```\n\n----------------------------------------\n\nTITLE: Page Component (App Router)\nDESCRIPTION: A simple Next.js component utilizing the app router which renders a heading and a link. This is tested in the accompanying test snippet. Located in app/page.js\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npx to create a new Next.js application with a custom Babel configuration. The `--example` flag specifies the 'with-custom-babel-config' example, and 'with-custom-babel-config-app' is the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-custom-babel-config with-custom-babel-config-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Ghost Example (npx)\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js application using the Ghost CMS example. It creates a new directory named `cms-ghost-app` with the necessary files and configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-ghost cms-ghost-app\n```\n\n----------------------------------------\n\nTITLE: Tagging Data in Next.js Component with JavaScript\nDESCRIPTION: Illustrates how to use cacheTag in a JavaScript component function to tag 'bookings-data'. It includes fetching data asynchronously and applying cache tags.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_cacheTag as cacheTag } from 'next/cache'\n\nexport async function Bookings({ type = 'haircut' }) {\n  'use cache'\n  cacheTag('bookings-data')\n\n  async function getBookingsData() {\n    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)\n    return data\n  }\n\n  return //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with React Hook Form Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the 'with-react-hook-form' example.  It bootstraps the project with the necessary dependencies and configurations for integrating React Hook Form.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-hook-form with-react-hook-form-app\n```\n\n----------------------------------------\n\nTITLE: Identifying React Portal Elements\nDESCRIPTION: Demonstrates how to identify a React Portal element created with ReactDOM.createPortal using isPortal and typeOf against the ReactIs.Portal constant.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as ReactIs from 'react-is';\n\nconst div = document.createElement(\"div\");\nconst portal = ReactDOM.createPortal(<div />, div);\n\nReactIs.isPortal(portal); // true\nReactIs.typeOf(portal) === ReactIs.Portal; // true\n```\n\n----------------------------------------\n\nTITLE: Umbraco Delivery API Configuration\nDESCRIPTION: This snippet shows how to configure the Umbraco Delivery API in the appsettings.json file. The Delivery API must be enabled to fetch blog data for the static site.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Umbraco\": {\n    \"CMS\": {\n      \"DeliveryApi\": {\n        \"Enabled\": true,\n        \"ApiKey\": \"my-secret-api-key\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing ImproveConsole on Various Console Methods\nDESCRIPTION: Executes the improveConsole function for each specified console method such as error, warn, log, and more to improve debugging output with stack traces. This includes various console methods across stdout and stderr.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimproveConsole(\"error\", \"stderr\", true);\nimproveConsole(\"warn\", \"stderr\", true);\nimproveConsole(\"count\", \"stdout\", true);\nimproveConsole(\"trace\", \"stderr\", false);\nimproveConsole(\"log\", \"stdout\", true);\nimproveConsole(\"group\", \"stdout\", true);\nimproveConsole(\"groupCollapsed\", \"stdout\", true);\nimproveConsole(\"table\", \"stdout\", true);\nimproveConsole(\"debug\", \"stdout\", true);\nimproveConsole(\"info\", \"stdout\", true);\nimproveConsole(\"dir\", \"stdout\", true);\nimproveConsole(\"dirxml\", \"stdout\", true);\nimproveConsole(\"timeEnd\", \"stdout\", true);\nimproveConsole(\"timeLog\", \"stdout\", true);\nimproveConsole(\"timeStamp\", \"stdout\", true);\nimproveConsole(\"assert\", \"stderr\", true);\n```\n\n----------------------------------------\n\nTITLE: Caching a Page with Nested Components (JavaScript)\nDESCRIPTION: Demonstrates how 'use cache' at the page level in JavaScript affects nested components. The Users component inherits the caching behavior from the parent Page component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n'use cache'\n\nasync function Users() {\n  const users = await fetch('/api/users')\n  // loop through users\n}\n\nexport default function Page() {\n  return (\n    <main>\n      <Users />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Kea example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-kea' example. It requires Node.js and pnpm to be installed. The new application will be created in a directory named 'with-kea-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-kea with-kea-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a Next.js project configured to use Storyblok CMS. It creates a new directory `cms-storyblok-app` with the required files and dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-storyblok cms-storyblok-app\n```\n\n----------------------------------------\n\nTITLE: Configuring deviceSizes in next.config.js\nDESCRIPTION: This snippet demonstrates the configuration of deviceSizes in next.config.js to specify expected device widths for serving images in a responsive format. The default list of sizes serves as breakpoints.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring PORT from Process Arguments\nDESCRIPTION: Declares a constant PORT by reading from process.argv, expecting a port argument to be passed when the script is invoked. This port is utilized for establishing IPC connections.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst PORT = process.argv[2];\n```\n\n----------------------------------------\n\nTITLE: Implementing default.js with params in JavaScript for Next.js Parallel Routes\nDESCRIPTION: This code demonstrates how to implement a default.js file in JavaScript that receives dynamic route parameters. The params prop is a promise that must be awaited to access the parameter values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Default({ params }) {\n  const { artist } = await params\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Reflexjs using yarn\nDESCRIPTION: This command uses yarn to execute create next-app with the with-reflexjs example. It creates a new Next.js application named with-reflexjs-app with Reflexjs pre-configured. This requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-reflexjs with-reflexjs-app\n```\n\n----------------------------------------\n\nTITLE: Executing cra-to-next Codemod in Next.js\nDESCRIPTION: This codemod migrates a Create React App project to Next.js, creating a Pages Router and necessary config to match behavior. It uses client-side only rendering initially to prevent compatibility issues.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod cra-to-next\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This code snippet demonstrates how to start the Next.js development server using npm, yarn, pnpm, or bun. The development server allows for real-time updates as you modify the application's code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/js/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Server Function Error Handling in Next.js\nDESCRIPTION: Demonstrates handling expected errors in a server action using form data submission. Returns error messages instead of throwing exceptions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nexport async function createPost(prevState: any, formData: FormData) {\n  const title = formData.get('title')\n  const content = formData.get('content')\n\n  const res = await fetch('https://api.vercel.app/posts', {\n    method: 'POST',\n    body: { title, content },\n  })\n  const json = await res.json()\n\n  if (!res.ok) {\n    return { message: 'Failed to create post' }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nexport async function createPost(prevState, formData) {\n  const title = formData.get('title')\n  const content = formData.get('content')\n\n  const res = await fetch('https://api.vercel.app/posts', {\n    method: 'POST',\n    body: { title, content },\n  })\n  const json = await res.json()\n\n  if (!res.ok) {\n    return { message: 'Failed to create post' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with static export (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the 'with-static-export' example. It simplifies the process of starting a project with pre-configured static export settings. The app will be named 'with-static-export-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nyarn create next-app --example with-static-export with-static-export-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with static export (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application with the 'with-static-export' example. It simplifies the process of starting a project with pre-configured static export settings. The app will be named 'with-static-export-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app --example with-static-export with-static-export-app\n```\n\n----------------------------------------\n\nTITLE: Setting Priority Property on Next.js Image Component\nDESCRIPTION: Example of setting the priority property on a Next.js Image component. When set to true, Next.js will preload the image and disable lazy loading, which is recommended for images that are the Largest Contentful Paint element.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\npriority={false} // {false} | {true}\n```\n\n----------------------------------------\n\nTITLE: Correct Link Component Usage in Next.js\nDESCRIPTION: Example showing the correct way to use Next.js Link component by passing children, either as direct text content or with an anchor tag when using legacyBehavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-no-children.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <>\n      <Link href=\"/about\">To About</Link>\n      // or\n      <Link href=\"/about\" legacyBehavior>\n        <a>To About</a>\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TurboPack Parts in JavaScript Part 1\nDESCRIPTION: This snippet imports a TurboPack part and exports a renamed variable. It asserts the inclusion of another part and a variable, facilitating the tracking and management of module relations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { upper } from \"module\";\nexport { upper as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Next.js - TypeScript\nDESCRIPTION: This snippet allows the retrieval of query parameters from a NextRequest instance in a GET route. It shows how to access the 'query' parameter from the URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest } from 'next/server'\n\nexport function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Neo4j example using pnpm\nDESCRIPTION: This command utilizes pnpm to generate a new Next.js application from the `with-neo4j` example.  It initializes the project with all dependencies configured for a Neo4j-integrated Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-neo4j with-neo4j-app\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting getPathname Function in Next.js\nDESCRIPTION: Imports the getPathname function from the URL utility module and re-exports it for use in other parts of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport { getPathname } from '../../lib/url';\nexport { getPathname as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB project - Bash\nDESCRIPTION: This command initializes an EdgeDB project. It uses the `edgedb project init` command to set up a local EdgeDB instance and apply migrations defined in the `dbschema/migrations` directory.  It requires the EdgeDB CLI to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project init\n```\n\n----------------------------------------\n\nTITLE: Running Prismic Slice Machine\nDESCRIPTION: This command starts the Slice Machine app, allowing users to view and manage pre-made content models in a local development environment. Slice Machine should be available on http://localhost:9999 after starting.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run slicemachine\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting GetProperError Function\nDESCRIPTION: Imports the getProperError function from the error module and re-exports it using TurboPack's variable assertion system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getProperError } from \"./error\";\nexport { getProperError as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Module Part 0: React Import\nDESCRIPTION: This JavaScript snippet represents the first module part, importing the 'react' library. This is a fundamental dependency for components within the Next.js application and related prerendering processes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react';\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js project based on the `with-graphql-gateway` example. It will create a directory named `with-graphql-gateway-app` with the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-graphql-gateway with-graphql-gateway-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with MSW example using npx\nDESCRIPTION: This command creates a new Next.js application using the `with-msw` example. It bootstraps a project with Mock Service Worker already configured for API mocking.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-msw with-msw-app\n```\n\n----------------------------------------\n\nTITLE: Exporting BubbledError from Module Part\nDESCRIPTION: Exports the BubbledError class from another module part, which is used for handling errors that need to bubble up through the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { s as BubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nexport { BubbledError };\n\n```\n\n----------------------------------------\n\nTITLE: Structured Error Handler Implementation\nDESCRIPTION: Creates a structured error object with name, message, and parsed stack trace. Uses getProperError for error normalization and parseStackTrace for stack parsing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function structuredError(e) {\n    e = getProperError(e);\n    return {\n        name: e.name,\n        message: e.message,\n        stack: typeof e.stack === \"string\" ? parseStackTrace(e.stack) : []\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Prefetching Routes with <Link> Component in Next.js\nDESCRIPTION: This snippet demonstrates how the <Link> component can be used to prefetch routes automatically as they become visible in the user's viewport, and how to configure prefetching behavior via the prefetch prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Link href=\"/route\" prefetch={true}>Link Text</Link>\n```\n\n----------------------------------------\n\nTITLE: Importing Server Functions in Client Components with TypeScript\nDESCRIPTION: Shows how to import and use Server Functions in a Client Component with TypeScript. The Server Function is imported from a separate file and used as a form action.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { createPost } from '@/app/actions'\n\nexport function Button() {\n  return <button formAction={createPost}>Create</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Prepr Example\nDESCRIPTION: This snippet shows how to create a Next.js application using the Prepr example template. It utilizes `npx`, `yarn`, and `pnpm` package managers to bootstrap the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-prepr cms-prepr-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-prepr cms-prepr-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-prepr cms-prepr-app\n```\n\n----------------------------------------\n\nTITLE: Uninstalling node-sass using npm\nDESCRIPTION: This code snippet shows the command to remove the 'node-sass' package from your project dependencies using npm. This is suggested to resolve conflicts between 'sass' and 'node-sass'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/duplicate-sass.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall node-sass\n```\n\n----------------------------------------\n\nTITLE: Importing Node Streams in JavaScript\nDESCRIPTION: This snippet imports the 'stream' module from Node.js. This module is essential for working with stream-based APIs, enabling various stream functionalities such as readable and writable streams.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stream from 'node:stream';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of React Hook in Server Component (JSX)\nDESCRIPTION: This code snippet shows the incorrect usage of a React client hook (useEffect) in a Server Component, which causes an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\n\nexport default function Example() {\n  useEffect(() => {\n    console.log('in useEffect')\n  })\n  return <p>Hello world</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Graph Nodes and Relationships\nDESCRIPTION: Cypher queries for inserting movie, person, and relationship data into a Neo4j graph database. Includes multiple movie datasets with actors, directors, and their respective roles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_2\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE (DavidM:Person {name:'David Morse', born:1953})\n```\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE (TheGreenMile:Movie {title:'The Green Mile', released:1999, tagline:'Walk a mile you'll never forget.'})\n```\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE\n(TomH)-[:ACTED_IN {roles:['Paul Edgecomb']}]->(TheGreenMile)\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Span Attributes Store in JavaScript\nDESCRIPTION: Creation of a Map to store root span attributes for the Next.js tracing system. This allows for storing and retrieving span attributes across the application's execution context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootSpanAttributesStore = new Map();\nexport { rootSpanAttributesStore as k } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser APIs in Client Component\nDESCRIPTION: This code illustrates how to safely access browser APIs like `window` in a Next.js Client Component.  It uses the `useEffect` hook to ensure that the code accessing the `window` object only runs on the client-side, after the component has mounted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { useEffect } from 'react';\n\nexport default function ClientComponent() {\n  useEffect(() => {\n    // You now have access to `window`\n    console.log(window.innerHeight);\n  }, [])\n\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Dynamic Params Generation Using Parent Segment (JavaScript)\nDESCRIPTION: Generate child segment params using the parent segment's category parameter to fetch filtered products\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams({ params: { category } }) {\n  const products = await fetch(\n    `https://.../products?category=${category}`\n  ).then((res) => res.json())\n\n  return products.map((product) => ({\n    product: product.id,\n  }))\n}\n\nexport default function Page({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Internal Symbols and Constants\nDESCRIPTION: Defines internal symbols and redirect status codes used by the response handler\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst INTERNALS = Symbol('internal response');\n\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing getProperError from error module\nDESCRIPTION: Import the getProperError function from a local module named 'error'. It refines error objects for consistency across the application. Assumes './error' provides the getProperError function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getProperError } from \"./error\";\n```\n\n----------------------------------------\n\nTITLE: Generating EdgeQL query builder - Bash\nDESCRIPTION: This command generates the EdgeQL query builder for TypeScript. It uses the `npx edgeql-js` command to create TypeScript files in the `dbschema/edgeql-js` directory. Requires the `edgeql-js` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npx edgeql-js\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Based on Route Parameters in Next.js\nDESCRIPTION: Example showing how to display content based on the dynamic route parameters in a Next.js page component. The params object is awaited to access the specific route segment values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  return <h1>Blog Post: {slug}</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { slug } = await params\n  return <h1>Blog Post: {slug}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Suspense Boundary for Real-time Data in Next.js\nDESCRIPTION: Shows how to implement Suspense boundaries for components that need to access data on every user request, including proper fallback UI implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getLatestTransactions() {\n  return db.query(...)\n}\n\nexport default async function Page() {\n  const transactions = await getLatestTransactions(token);\n  return <TransactionList transactions={transactions}>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\n\nasync function TransactionList() {\n  const transactions = await db.query(...)\n  return ...\n}\n\nfunction TransactionSkeleton() {\n  return <ul>...</ul>\n}\n\nexport default async function Page() {\n  return (\n    <Suspense fallback={<TransactionSkeleton />}>\n      <TransactionList/>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Page and Metadata Functions for Async Props\nDESCRIPTION: Codemod to transform page and metadata functions to handle async props for params and searchParams in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// page.tsx\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: { slug: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}) {\n  const { value } = searchParams\n  if (value === 'foo') {\n    // ...\n  }\n}\n\nexport function generateMetadata({ params }: { params: { slug: string } }) {\n  const { slug } = params\n  return {\n    title: `My Page - ${slug}`,\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// page.tsx\nexport default async function Page(props: {\n  params: Promise<{ slug: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const searchParams = await props.searchParams\n  const { value } = searchParams\n  if (value === 'foo') {\n    // ...\n  }\n}\n\nexport async function generateMetadata(props: {\n  params: Promise<{ slug: string }>\n}) {\n  const params = await props.params\n  const { slug } = params\n  return {\n    title: `My Page - ${slug}`,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheets in Next.js\nDESCRIPTION: This snippet demonstrates how to import an external CSS stylesheet from an npm package into a Next.js application layout.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Route Behavior in Next.js\nDESCRIPTION: This snippet shows how to export a config object to customize the behavior of an API route, including body parsing limits and external resolver settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '1mb',\n    },\n  },\n  // Specifies the maximum allowed duration for this function to execute (in seconds)\n  maxDuration: 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with react-bootstrap using yarn\nDESCRIPTION: This command uses yarn to execute create next-app with the with-react-bootstrap example. It creates a new Next.js application named 'with-react-bootstrap-app' with the react-bootstrap setup. The command requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-bootstrap with-react-bootstrap-app\n```\n\n----------------------------------------\n\nTITLE: MSW Initialization using npx\nDESCRIPTION: This command initializes Mock Service Worker in the public directory. It's used to generate the `mockServiceWorker.js` file, which is essential for MSW to intercept requests in the browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx msw init public/\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Jotai example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the Jotai example. It executes create next-app with the specified Jotai example into a new directory called with-jotai-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-jotai with-jotai-app\n```\n\n----------------------------------------\n\nTITLE: Identifying React StrictMode Elements\nDESCRIPTION: Shows how to check if an element is a React StrictMode component using isStrictMode and how to verify its type using typeOf against the ReactIs.StrictMode constant.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport * as ReactIs from 'react-is';\n\nReactIs.isStrictMode(<React.StrictMode />); // true\nReactIs.typeOf(<React.StrictMode />) === ReactIs.StrictMode; // true\n```\n\n----------------------------------------\n\nTITLE: Running Mocha tests with npm\nDESCRIPTION: This command executes the Mocha test suite using npm.  It assumes a 'test' script is defined in the `package.json` file to run the tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-wordpress cms-wordpress-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Patterns in Next.js\nDESCRIPTION: Shows how to configure allowed remote image patterns in next.config.js. This example demonstrates setting up a specific AWS S3 bucket as an allowed image source.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextConfig } from 'next'\n\nconst config: NextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n        search: '',\n      },\n    ],\n  },\n}\n\nexport default config\n```\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB CLI - macOS/Linux - Bash\nDESCRIPTION: This command installs the EdgeDB CLI on macOS or Linux. It downloads and executes a shell script from the EdgeDB website using `curl`. The script handles the installation process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint script to package.json\nDESCRIPTION: This JSON snippet adds a \"lint\" script to the package.json file. This script is used to run ESLint on the project. ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Module in Javascript\nDESCRIPTION: This code snippet imports the `IPC` object from the `./index` file. This likely sets up inter-process communication capabilities within the module. The imported `IPC` object is used for sending and receiving messages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IPC } from \"./index\";\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-wordpress cms-wordpress-app\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of React Hook by Converting to Client Component (JSX)\nDESCRIPTION: This code snippet demonstrates the correct way to use a React client hook by converting the component to a Client Component using the 'use client' directive at the top of the file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function Example() {\n  useEffect(() => {\n    console.log('in useEffect')\n  })\n  return <p>Hello world</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application with a custom Babel configuration. The `--example` flag specifies the 'with-custom-babel-config' example, and 'with-custom-babel-config-app' is the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-custom-babel-config with-custom-babel-config-app\n```\n\n----------------------------------------\n\nTITLE: Routing Configuration Between pages/ and app/ in Next.js\nDESCRIPTION: This snippet provides the guidelines on configuring routing during incremental migration between pages and the new app directory, including handling of dynamic routes and filtering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    clientRouterFilter: false,\n    clientRouterFilterAllowedRate: 0.01\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Server Function Execution with TypeScript\nDESCRIPTION: Shows how to redirect users to a different page after a Server Function completes in TypeScript. Uses the redirect function from Next.js navigation to send users to the posts page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function createPost(formData: FormData) {\n  // Update data\n  // ...\n\n  redirect('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables file\nDESCRIPTION: This command copies the example environment variable file (.env.local.example) to the actual environment variable file (.env.local).  This allows for local configuration without affecting the original example file, which is under version control.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the react-native-web example. It sets up the project with the necessary dependencies and configurations for using React Native Web in a Next.js environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-react-native-web with-react-native-web-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with a custom Babel configuration. The `--example` flag specifies the 'with-custom-babel-config' example, and 'with-custom-babel-config-app' is the name of the new application directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-custom-babel-config with-custom-babel-config-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server - Bash\nDESCRIPTION: This command runs the Next.js development server, allowing local access to the application through the browser. It assumes that all previous steps were successfully completed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Shallow Routing with Page Change in Next.js\nDESCRIPTION: This snippet illustrates the limitation of shallow routing when navigating to a new page in Next.js. It shows that shallow routing doesn't work for URL changes that involve loading a new page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nrouter.push('/?counter=10', '/about?counter=10', { shallow: true })\n```\n\n----------------------------------------\n\nTITLE: CSS Animation for Graceful Loading Indicator\nDESCRIPTION: CSS styles to create a smooth, delayed loading animation that prevents unnecessary visual flicker during quick route transitions\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.spinner {\n  /* ... */\n  opacity: 0;\n  animation:\n    fadeIn 500ms 100ms forwards,\n    rotate 1s linear infinite;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable x with Initial Value in Javascript\nDESCRIPTION: This snippet declares a variable 'x' using the 'let' keyword and initializes it with the value 0. It serves as the starting point for subsequent operations performed on 'x'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 0;\n```\n\n----------------------------------------\n\nTITLE: Other Metadata (array value) Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated when the custom metadata `other` field has an array value. A separate `<meta>` tag is generated for each value in the array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_67\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"custom\" content=\"meta1\" /> <meta name=\"custom\" content=\"meta2\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Cat from Turbopack Module in JavaScript\nDESCRIPTION: This snippet imports the `cat` variable and immediately exports it. It shows the direct export of variables from a Turbopack module without additional processing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as cat } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -5\\n};\\nexport { cat };\n```\n\n----------------------------------------\n\nTITLE: Enabling the Experimental Rust-based MDX Compiler\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the experimental Rust-based MDX compiler in a Next.js application. It shows how to configure the `mdxRs` flag within the `experimental` section of the `next.config.js` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware Function with TypeScript Types\nDESCRIPTION: TypeScript example showing how to properly type the request parameter in a middleware function using the NextRequest type from next/server. This ensures type safety when working with request properties.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Middleware logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Vitest example\nDESCRIPTION: This command uses `create-next-app` to scaffold a new Next.js project based on the `with-vitest` example. This is a quick way to start a Next.js project with Vitest already configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example with-vitest with-vitest-app\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with Styled Components Registry in JavaScript\nDESCRIPTION: This JavaScript example mirrors the TypeScript root layout wrapping, demonstrating similar structure to ensure styles are properly managed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/04-css-in-js.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BubbledError from JavaScript Module\nDESCRIPTION: Module that re-exports the BubbledError class for use throughout the Next.js application. This allows for consistent error handling in the tracing system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { s as BubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nexport { BubbledError };\n\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Next.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to access query parameters in a GET route using a plain request object. It retrieves the 'query' parameter from the request's URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport function GET(request) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Revalidation Period for Fetch Requests in Next.js\nDESCRIPTION: Uses the next.revalidate option to set the revalidation period in seconds for a fetch request. This will revalidate the Data Cache after the specified time period.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Revalidate at most after 1 hour\nfetch(`https://...`, { next: { revalidate: 3600 } })\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Cloudflare Turnstile Example (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application based on the Cloudflare Turnstile example.  It initializes a project named \"cloudflare-turnstile-app\" using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cloudflare-turnstile cloudflare-turnstile-app\n```\n\n----------------------------------------\n\nTITLE: Handling Process Uncaught Exceptions\nDESCRIPTION: Sets a process-level listener for uncaughtException to send errors through the IPC channel. It requires the IPC object to be correctly configured to handle error transmission.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.on(\"uncaughtException\", (err)=>{\n    IPC.sendError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode (Bash)\nDESCRIPTION: This code shows the commands to install dependencies and start the Next.js application in development mode. It shows how to use either npm or yarn to install dependencies and start the development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n\n# or\n\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with Meilisearch Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-meilisearch example. It initializes the project with all the necessary files and configurations to integrate with Meilisearch.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-meilisearch with-meilisearch-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with GraphCMS Example\nDESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the cms-graphcms example. It leverages create-next-app with npm, Yarn, and pnpm to set up the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-graphcms cms-graphcms-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-graphcms cms-graphcms-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-graphcms cms-graphcms-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Exports in JavaScript Part 10\nDESCRIPTION: A function to perform external modifications to variables is defined and exported, encapsulating state adjustment within a TurboPack managed module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nfunction external2() {\n    foobar += \".\";\n}\nexport { external2 };\nexport { external2 as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React Packages using Yarn\nDESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using Yarn. It performs the same function as the npm command but uses the Yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Cloudflare Turnstile Example (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the Cloudflare Turnstile example. It initializes a project named \"cloudflare-turnstile-app\" using the specified example from the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cloudflare-turnstile cloudflare-turnstile-app\n```\n\n----------------------------------------\n\nTITLE: Ordering Operations & Sharing - JavaScript\nDESCRIPTION: This module provides various exports of functions and objects, allowing for manipulation of state across different parts of the application via modularize practices.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nexport { shared }; \n```\n\n----------------------------------------\n\nTITLE: Declaring Effects Array\nDESCRIPTION: This snippet declares an empty array named 'effects' which will be used to store effects names. It uses ES6 module syntax to export the 'effects' array so it can be imported in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const effects = [];\n```\n\n----------------------------------------\n\nTITLE: Exporting Function from Module - JavaScript\nDESCRIPTION: This function, 'external1', combines the result of calling 'internal' with the value of 'foobar'. It exports the 'external1' function for use in other modules. Dependencies include 'internal' and 'foobar'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function external1() {\n    return internal() + foobar;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Next.js SWC package for Darwin x64\nDESCRIPTION: This code snippet defines the package name for the Next.js SWC compiler binary targeting x86_64 macOS (Darwin) systems. It is used to identify and install the correct platform-specific implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/darwin-x64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@next/swc-darwin-x64`\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Module Parts in TurboPack (JavaScript)\nDESCRIPTION: This snippet demonstrates how TurboPack imports and exports specific parts of modules. It uses assertions to specify the TurboPack part being imported or exported.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as c1_3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nexport { c1_3 };\n```\n\n----------------------------------------\n\nTITLE: Running Development Server (npm)\nDESCRIPTION: This command starts both the Next.js development server (`next dev`) and the Convex development environment (`convex dev`). This allows for simultaneous development on the frontend and backend. It requires npm and a Convex account.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with pnpm\nDESCRIPTION: This command utilizes pnpm to set up a new Next.js application, incorporating the ReactMD and Typescript example. It offers an efficient method for project initialization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-react-md-typescript with-react-md-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Enabling useCache Experimental Flag in Next.js Configuration\nDESCRIPTION: This code demonstrates how to enable the useCache experimental flag in the next.config.ts file. When enabled, it allows the use of the 'use cache' directive independently of dynamicIO.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/useCache.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    useCache: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Prerendering (PPR) in Next.js Routes\nDESCRIPTION: Enable Partial Prerendering (PPR) for a layout or page by exporting the experimental_ppr configuration variable. This feature allows parts of a page to be prerendered while others are rendered dynamically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const experimental_ppr = true\n// true | false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const experimental_ppr = true\n// true | false\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in YAML for Next.js Documentation\nDESCRIPTION: This YAML front matter defines metadata for a Next.js documentation page, including the title and description that will be used for SEO and page rendering purposes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Getting Started\ndescription: Learn how to create full-stack web applications with the Next.js App Router.\n---\n```\n\n----------------------------------------\n\nTITLE: Declaring clientComponentLoadCount Variable in JavaScript\nDESCRIPTION: This snippet declares a variable 'clientComponentLoadCount' initialized to 0, which tracks the number of times components have been loaded. No external dependencies are needed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet clientComponentLoadCount = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with WebAssembly Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a Next.js application based on the `with-webassembly` example. It supports npm, yarn, and pnpm as package managers. The app will be named `with-webassembly-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-webassembly/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-webassembly with-webassembly-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-webassembly with-webassembly-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-webassembly with-webassembly-app\n```\n\n----------------------------------------\n\nTITLE: Postpone Component for Next.js Server-Side Rendering\nDESCRIPTION: Defines a Postpone component that uses postponeWithTracking to handle postponing rendering in Next.js server-side rendering scenarios.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as postponeWithTracking } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nfunction Postpone({ reason, prerenderState, pathname }) {\n    postponeWithTracking(prerenderState, reason, pathname);\n}\nexport { Postpone };\nexport { Postpone as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Goober using npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the Goober example. It executes create-next-app with the specified example and project name. The resulting application will be named 'with-goober-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-goober with-goober-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command employs pnpm to generate a new Next.js application named 'with-polyfills-app' from the 'with-polyfills' example. It sets up the application to include the polyfills needed to support older browsers effectively.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-polyfills with-polyfills-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js app with Stitches using npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-stitches example. It executes the create-next-app command with the specified example and application name. The command requires npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-stitches with-stitches-app\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining metadata for a blog post including title, excerpt and publication date. Used for organizing and categorizing blog content in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/_posts/riders-of-rohan.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"The Riders of Rohan\"\nexcerpt: \"Aragorn, Legolas, and Gimli follow the trail of the Orcs and find\nseveral clues as to what happened with Merry and Pippin.\"\ndate: \"2021-02-01\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing sharp with yarn\nDESCRIPTION: This snippet demonstrates how to install the `sharp` package using yarn. It is an alternative solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sharp\n```\n\n----------------------------------------\n\nTITLE: Forwarding Stripe Webhooks\nDESCRIPTION: This command starts the Stripe CLI and configures it to forward webhooks to the specified local development server URL, which is crucial for testing webhook functionality during development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --forward-to localhost:3000/api/webhooks\n```\n\n----------------------------------------\n\nTITLE: Defining Function c1_2 and Calling c1_3 in JavaScript\nDESCRIPTION: This snippet defines the function `c1_2` which calls `c1_3`, adding a layer of interactivity among the functions. It is also hoisted and has an export statement.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction c1_2() {\n    return c1_3(d1);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Repository - Bash\nDESCRIPTION: This snippet demonstrates how to clone the Tigris Vercel starter repository from GitHub to your local machine. It is a prerequisite for setting up the local development environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tigrisdata/tigris-vercel-starter\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Prefetching in App Router\nDESCRIPTION: Configure prefetching behavior for Next.js Link component in App Router. Control route prefetching based on static or dynamic routes with different prefetch prop values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File for Configuration\nDESCRIPTION: This command copies the example environment variables file to a local version which will not be tracked by version control. This is essential for setting up the environment-specific configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Create Next.js App with MySQL Example\nDESCRIPTION: Uses `create-next-app` to generate a Next.js project pre-configured with a MySQL database connection. The available package managers are npm, yarn, and pnpm. The created app is named `nextjs-mysql`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mysql nextjs-mysql\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mysql nextjs-mysql\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mysql nextjs-mysql\n```\n\n----------------------------------------\n\nTITLE: Template Title Metadata (JSX)\nDESCRIPTION: This snippet illustrates using `title.template` to add a prefix or suffix to titles defined in child route segments in a JavaScript Next.js application. It requires a `title.default` to be defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n    default: 'Acme', // a default is required when creating a template\n  },\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'About',\n}\n\n// Output: <title>About | Acme</title>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Docker Compose\nDESCRIPTION: This snippet details the steps to start a development server for the Next.js app using Docker Compose. It creates a network for container communication, builds the development environment, and runs the development containers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a network, which allows containers to communicate\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my_network\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Build dev\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f compose.dev.yaml build\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Up dev\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f compose.dev.yaml up\n```\n\n----------------------------------------\n\nTITLE: Updating Search Form to Use SearchButton in Next.js JavaScript\nDESCRIPTION: This JavaScript example replaces the standard submit button in a Next.js search form with a 'SearchButton' component, offering visual cues during search action.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from 'next/form'\nimport { SearchButton } from '@/ui/search-button'\n\nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <SearchButton />\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Re-exporting default component only in Next.js\nDESCRIPTION: This code snippet demonstrates the recommended approach of re-exporting only the default component to resolve the error. This prevents accidental inclusion of server-side code in the browser build.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport { default } from './example-b'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application named 'with-polyfills-app' based on the 'with-polyfills' example. It ensures that the newly created application includes the necessary polyfills.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-polyfills with-polyfills-app\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Reusable Cache Profiles\nDESCRIPTION: Define custom cache profiles in Next.js configuration with specific stale, revalidate, and expire times\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextConfig: NextConfig = {\n  experimental: {\n    dynamicIO: true,\n    cacheLife: {\n      biweekly: {\n        stale: 60 * 60 * 24 * 14, // 14 days\n        revalidate: 60 * 60 * 24, // 1 day\n        expire: 60 * 60 * 24 * 14, // 14 days\n      },\n    },\n  },\n}\n\nmodule.exports = nextConfig\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  experimental: {\n    dynamicIO: true,\n    cacheLife: {\n      biweekly: {\n        stale: 60 * 60 * 24 * 14, // 14 days\n        revalidate: 60 * 60 * 24, // 1 day\n        expire: 60 * 60 * 24 * 14, // 14 days\n      },\n    },\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action that accepts additional arguments in TypeScript\nDESCRIPTION: This snippet shows how to define a Server Action that accepts both a user ID argument (passed via bind) and FormData from a form submission in TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nexport async function updateUser(userId: string, formData: FormData) {}\n```\n\n----------------------------------------\n\nTITLE: Creating gridTemplateAreas Styling Function\nDESCRIPTION: Defines the gridTemplateAreas styling function using the style utility to handle the 'gridTemplateAreas' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 26\n};\nconst gridTemplateAreas = style({\n    prop: 'gridTemplateAreas'\n});\nexport { gridTemplateAreas as q } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Userland Module\nDESCRIPTION: Imports a userland module, which likely contains custom application code. This snippet shows how user-defined code is integrated into the TurboPack system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nimport 'VAR_USERLAND';\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js MDX app with bun\nDESCRIPTION: This command utilizes bunx to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires bun to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example mdx mdx-app\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js development server using pnpm\nDESCRIPTION: This command starts the Next.js development server using pnpm.  It executes the \"dev\" script specified in package.json which starts the server, typically on localhost:3000. pnpm must be installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: License Attribution for formdata-polyfill in Next.js\nDESCRIPTION: This comment provides license attribution for the formdata-polyfill library used in the body.js file of the undici/lib/web/fetch directory. It specifies the MIT License and credits Jimmy Wärting as the author.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/load.js.LEGAL.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n```\n\n----------------------------------------\n\nTITLE: Using React Server/Client Directives\nDESCRIPTION: Example of React directives for defining server and client boundaries in Next.js applications. The 'use client' directive marks code for client-side execution, while 'use server' specifies server-side computation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\n\"use server\"\n```\n\n----------------------------------------\n\nTITLE: Creating gridAutoColumns Styling Function\nDESCRIPTION: Defines the gridAutoColumns styling function using the style utility to handle the 'gridAutoColumns' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 22\n};\nconst gridAutoColumns = style({\n    prop: 'gridAutoColumns'\n});\nexport { gridAutoColumns as m } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Forcing Static Rendering with Route Segment Config in Next.js\nDESCRIPTION: Uses the dynamic route segment config option set to 'force-static' to ensure a route is always statically rendered, regardless of the data fetching methods used within it.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/04-caching/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport const dynamic = 'force-static'\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body in Next.js - JavaScript\nDESCRIPTION: This JavaScript example shows how to read the request body and return it as a JSON response from a POST route, utilizing the Web API methods to parse the body.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST(request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring clientComponentLoadStart Variable in JavaScript\nDESCRIPTION: This snippet declares a variable 'clientComponentLoadStart' initialized to 0, used to track the start time of component loading. No external dependencies are required for this declaration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet clientComponentLoadStart = 0;\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Next.js Application with Umbraco Example\nDESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application using the Umbraco CMS example. It covers the use of npm, Yarn, or pnpm to create the app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-umbraco umbraco-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-umbraco umbraco-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-umbraco umbraco-app\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands to begin the development server for a Next.js project, enabling local testing and viewing of changes immediately at http://localhost:3000. Both npm and Yarn are supported.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the 'api-routes-cors' example. It sets up a project with the necessary configurations for API routes and CORS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example api-routes-cors api-routes-cors-app\n```\n\n----------------------------------------\n\nTITLE: Forwarding Search Parameters to a Table Component in JavaScript\nDESCRIPTION: Example of a JavaScript page that passes searchParams to a child component, allowing the dynamic behavior to be isolated in the child component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Table } from './table'\n\nexport default function Page({ searchParams }) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Table searchParams={searchParams} />\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the 'api-routes-cors' example. It sets up a project with the necessary configurations for API routes and CORS.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example api-routes-cors api-routes-cors-app\n```\n\n----------------------------------------\n\nTITLE: Importing Server Actions in Client Components using TypeScript\nDESCRIPTION: This snippet demonstrates how to import Server Actions from a separate file into a Client Component and use them in an event handler in TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { create } from './actions'\n\nexport function Button() {\n  return <button onClick={() => create()}>Create</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with pnpm\nDESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `with-axiom` example. It initializes the project using pnpm. The resulting project is named `with-axiom-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-axiom with-axiom-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with Yarn\nDESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `with-axiom` example. It initializes the project using Yarn. The resulting project is named `with-axiom-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-axiom with-axiom-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Ionic example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application based on the 'with-ionic' example. It scaffolds a project named 'with-ionic-app' in the current directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-ionic with-ionic-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using create-next-app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application named 'image-app' based on the 'image-component' example. It initializes a new project with the specified template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example image-component image-app\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Client-Side Component in Server Component\nDESCRIPTION: Example showing how using a third-party component that relies on client-side features directly in a Server Component will cause an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Carousel } from 'acme-carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/* Error: `useState` can not be used within Server Components */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Carousel } from 'acme-carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Error: `useState` can not be used within Server Components */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Components in Next.js - JavaScript (MJS)\nDESCRIPTION: This snippet provides the JavaScript (Module) version of the configuration for styled-components in Next.js, making sure the necessary compiler settings are applied.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nconst nextConfig = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n\nexport default nextConfig\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout with NavigationBlockerProvider in Next.js\nDESCRIPTION: This snippet shows how to wrap the entire application with the NavigationBlockerProvider in the root layout component of a Next.js app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationBlockerProvider } from './contexts/navigation-blocker'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationBlockerProvider } from './contexts/navigation-blocker'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Promote PlanetScale Branch to Production\nDESCRIPTION: Promotes a PlanetScale branch (typically `main`) to be the production branch. Replace `<DATABASE_NAME>` and `<BRANCH_NAME>` with the appropriate values. This step is required for deploying the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npscale branch promote <DATABASE_NAME> <BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Defining Child Component with Shorter Cache Profile\nDESCRIPTION: Shows a child component using a shorter 'hours' cache lifecycle, which will override the parent's longer cache duration\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Child component\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport async function ChildComponent() {\n  'use cache'\n  cacheLife('hours')\n  return <div>Child Content</div>\n\n  // This component's cache will respect the shorter 'hours' profile\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Suspense Boundary Check in Next.js Configuration\nDESCRIPTION: Configuration example showing how to disable the missingSuspenseWithCSRBailout check in Next.js version 14.x. This is not recommended but provided as a temporary solution if needed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    missingSuspenseWithCSRBailout: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the api-routes-middleware example.  It initializes the project with the specified example and names the new application api-routes-middleware-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example api-routes-middleware api-routes-middleware-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with XState\nDESCRIPTION: This command bootstraps a new Next.js application using the with-xstate example. It utilizes create-next-app with Yarn to initialize the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-xstate with-xstate-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Turbopack loaders example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-turbopack-loaders' example. It sets up a new project with the necessary configurations for using Turbopack loaders.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-turbopack-loaders with-turbopack-loaders-app\n```\n\n----------------------------------------\n\nTITLE: Copy Local Environment Example File\nDESCRIPTION: Copies a sample local environment configuration file to an active local environment file. Requires the existence of '.env.local.example'. This snippet copies configuration templates, enabling local environment variable setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp -i .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Compatible Href and As Values in Next.js\nDESCRIPTION: This snippet shows a correct implementation of the `next/link` component with compatible `href` and `as` values, ensuring that the dynamic routing works properly without triggering an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/incompatible-href-as.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page(props) {\n  return (\n    <>\n      <Link href=\"/[post]\" as=\"/post-1\">\n        <a>Valid link</a>\n      </Link>\n    </>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Auto-fixing linting errors\nDESCRIPTION: This command attempts to automatically fix linting errors reported by ESLint and Prettier. It applies predefined rules to adjust code formatting and style to comply with project standards, reducing the need for manual corrections.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"pnpm lint-fix\"\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety for Viewport Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to add type safety to the generateViewport function in TypeScript by specifying its return type as Viewport.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport function generateViewport(): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IPC Connection Implementation\nDESCRIPTION: Creates an IPC connection handler with packet management, buffering, and message passing capabilities. Implements send/receive functionality with error handling and ready state management.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createIpc(port) {\n    const socket = createConnection(port, \"127.0.0.1\");\n    const packetQueue = [];\n    const recvPromiseResolveQueue = [];\n    function pushPacket(packet) {\n        const recvPromiseResolve = recvPromiseResolveQueue.shift();\n        if (recvPromiseResolve != null) {\n            recvPromiseResolve(JSON.parse(packet.toString(\"utf8\")));\n        } else {\n            packetQueue.push(packet);\n        }\n    }\n    let state = {\n        type: \"waiting\"\n    };\n    let buffer = Buffer.alloc(0);\n    socket.once(\"connect\", ()=>{\n        socket.on(\"data\", (chunk)=>{\n            buffer = Buffer.concat([\n                buffer,\n                chunk\n            ]);\n            loop: while(true){\n                switch(state.type){\n                    case \"waiting\":\n                        {\n                            if (buffer.length >= 4) {\n                                const length = buffer.readUInt32BE(0);\n                                buffer = buffer.subarray(4);\n                                state = {\n                                    type: \"packet\",\n                                    length\n                                };\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                    case \"packet\":\n                        {\n                            if (buffer.length >= state.length) {\n                                const packet = buffer.subarray(0, state.length);\n                                buffer = buffer.subarray(state.length);\n                                state = {\n                                    type: \"waiting\"\n                                };\n                                pushPacket(packet);\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    });\n    socket.once(\"close\", ()=>{\n        process.exit(0);\n    });\n    function send(message) {\n        const packet = Buffer.from(JSON.stringify(message), \"utf8\");\n        const length = Buffer.alloc(4);\n        length.writeUInt32BE(packet.length);\n        socket.write(length);\n        return new Promise((resolve, reject)=>{\n            socket.write(packet, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    function sendReady() {\n        const length = Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return new Promise((resolve, reject)=>{\n            socket.write(length, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    return {\n        async recv () {\n            const packet = packetQueue.shift();\n            if (packet != null) {\n                return JSON.parse(packet.toString(\"utf8\"));\n            }\n            const result = await new Promise((resolve)=>{\n                recvPromiseResolveQueue.push((result)=>{\n                    resolve(result);\n                });\n            });\n            return result;\n        },\n        send (message) {\n            return send(message);\n        },\n        sendReady,\n        async sendError (error) {\n            try {\n                await send({\n                    type: \"error\",\n                    ...structuredError(error)\n                });\n            } catch (err) {\n                console.error(\"failed to send error back to rust:\", err);\n                process.exit(1);\n            }\n            process.exit(0);\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MDBReact example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the MDBReact example. It uses the create next-app command and specifies the with-mdbreact example. The resulting application will be named with-mdbreact-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mdbreact with-mdbreact-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Function to Modify Order - JavaScript\nDESCRIPTION: This function, named 'func', pushes the string 'd' into the 'order' array, illustrating the function's side effect of modifying the global state.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function func() {\n    order.push(\"d\");\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress E2E Configuration (TypeScript)\nDESCRIPTION: Configures Cypress for End-to-End (E2E) testing using TypeScript. Defines the `setupNodeEvents` function within the `e2e` configuration block.  Requires the `cypress` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Custom AMP Validator (JS)\nDESCRIPTION: This code snippet demonstrates how to configure a custom AMP validator in `next.config.js`. It defines a `validator` property within the `amp` object, pointing to the path of the custom validator script.  This allows overriding the default AMP validation process with a custom implementation. Requires a separate JavaScript file for the validator implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  amp: {\n    validator: './custom_validator.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with next-sitemap example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-next-sitemap example. It automates the setup process, including installing necessary dependencies and configuring the project structure. The target directory is specified as with-next-sitemap-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-next-sitemap with-next-sitemap-app\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js Route Module Dependencies\nDESCRIPTION: A collection of module import parts for Next.js route modules with TurboPack. These code snippets represent different parts of the module system, importing necessary dependencies and exporting them with TurboPack variable assertions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../../server/future/route-modules/pages/module.compiled';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\nexport { PagesRouteModule as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport '../../server/future/route-kind';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { RouteKind } from '../../server/future/route-kind';\nexport { RouteKind as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Running Development Server - Bash Commands\nDESCRIPTION: This snippet shows the commands to start a Next.js development server using npm, yarn, pnpm, or bun. It requires Node.js and a package manager to be installed. The server runs on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/ts/README-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Migrating to Built-in next/font Codemod\nDESCRIPTION: Command-line tool to automatically update font imports and remove @next/font package from Next.js projects. Helps developers transition to the built-in font optimization system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/built-in-next-font.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @next/codemod built-in-next-font .\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Domains in Next.js pre-12.3.0\nDESCRIPTION: Legacy configuration for next/image component using the domains array. This simpler approach only allows specifying allowed hostnames without additional pattern matching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    domains: ['assets.example.com'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Next.js app with TypeScript and GraphQL\nDESCRIPTION: This code snippet shows how to create a new Next.js application using `create-next-app` with the `with-typescript-graphql` example. It shows the usage with npm, yarn, and pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-typescript-graphql with-typescript-graphql-app\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid UTF-8 Source Code Parsing Error\nDESCRIPTION: Captures an unexpected error during source code reading, specifically related to invalid UTF-8 byte sequence conversion\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/error/issues/Reading source code for parsing failed-073388.txt#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nerror - [load] [project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/error/input/broken.js  Reading source code for parsing failed\\n  An unexpected error happened while trying to read the source code to parse: failed to convert rope into string\\n\\n  Caused by:\\n  - invalid utf-8 sequence of 1 bytes from index 1\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with MDBReact example using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the MDBReact example.  It utilizes the create next-app command and specifies the with-mdbreact example. The resulting application will be named with-mdbreact-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mdbreact with-mdbreact-app\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 5 (prod)\nDESCRIPTION: Part 5 of the production build. It imports `shared` as `c`, imports a previous part, and defines/exports `b`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nconst b = {\n    shared,\n    b: \"bbbbbbbbbbb\"\n};\nexport { b };\nexport { b as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using create-next-app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application named 'image-app' based on the 'image-component' example. It initializes a new project with the specified template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example image-component image-app\n```\n\n----------------------------------------\n\nTITLE: Checking if a Cookie Exists - JS\nDESCRIPTION: This snippet illustrates how to use the `has` method to verify the existence of a specific cookie in a Next.js page component. It retrieves the cookie store asynchronously for this check.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  const hasCookie = cookieStore.has('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command leverages pnpm to create a fresh Next.js application with a basic CSS example template. The command initializes the project structure, manages dependencies, and provides the boilerplate code to start building. The application is created under the 'basic-css-app' directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example basic-css basic-css-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with npm\nDESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `with-axiom` example. It initializes the project using npm. The resulting project is named `with-axiom-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-axiom with-axiom-app\n```\n\n----------------------------------------\n\nTITLE: Terminal Output Example\nDESCRIPTION: This is an example of terminal output showing a Next.js configuration error. It indicates that the configuration file contains an unexpected property. It helps developers pinpoint and correct typos or invalid configuration options in `next.config.js`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nThe root value has an unexpected property, rewritess, which is not in the list of allowed properties\n```\n\n----------------------------------------\n\nTITLE: Declaring Shared Object with Side Effects - JavaScript\nDESCRIPTION: This snippet creates a constant 'shared' that contains an effect; it pushes the string 'b' into the 'order' array when 'shared' is instantiated.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const shared = {\n    effect: order.push(\"b\")\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Actions in Next.js v13\nDESCRIPTION: Configuration to enable Server Actions in Next.js version 13. This setting is not needed for Next.js 14+ where Server Actions are enabled by default.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverActions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst config = {\n  experimental: {\n    serverActions: true,\n  },\n}\n\nmodule.exports = config\n```\n\n----------------------------------------\n\nTITLE: Merged Export of Multiple Module Parts in TurboPack (JavaScript)\nDESCRIPTION: This snippet shows the merged result of exporting multiple module parts (c1_3 and c2_2) in TurboPack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as c1_3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nimport { h as c2_2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nexport { c1_3 };\nexport { c2_2 };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incompatible Href and As Values in Next.js\nDESCRIPTION: This snippet illustrates an incompatible usage of the `next/link` component where the `href` uses dynamic routing but the `as` value does not provide the expected parameters. This results in a rendering error when trying to navigate.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/incompatible-href-as.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page(props) {\n  return (\n    <>\n      <Link href=\"/[post]\" as=\"/post-1/comments\">\n        <a>Invalid link</a>\n      </Link>\n    </>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Link Component with passHref in Next.js\nDESCRIPTION: Demonstrates how to properly create a custom styled link component using next/link with passHref and legacyBehavior props. The example shows integration with styled-components and proper href forwarding to the underlying anchor tag.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-passhref.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\nimport styled from 'styled-components'\n\nconst StyledLink = styled.a`\n  color: red;\n`\n\nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <StyledLink>{name}</StyledLink>\n    </Link>\n  )\n}\n\nexport default NavLink\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Benchmark in Markdown\nDESCRIPTION: Commands for installing dependencies and running the benchmark script. This snippet shows the basic steps to set up and execute the benchmarking process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nRun `pnpm install`, `pnpm bench` and profit.\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Phase 4\nDESCRIPTION: This mermaid diagram represents the module dependencies in phase 4. It shows the different items and their dependencies, visualizing the flow of data and execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item10[\"export a\"];\n    Item11;\n    Item11[\"export b\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item6 --> Item2;\n    Item6 --> Item3;\n    Item6 --> Item5;\n    Item7 --> Item6;\n    Item7 --> Item4;\n    Item8 --> Item6;\n    Item8 -.-> Item7;\n    Item9 --> Item8;\n    Item9 --> Item6;\n    Item10 --> Item8;\n    Item11 --> Item9;\n```\n\n----------------------------------------\n\nTITLE: Packing and Unpacking Local Next.js Version for Testing\nDESCRIPTION: Commands to build a release version of Next.js, package it, and install it in a test application to overcome Turbopack symlink limitations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next --release && pnpm unpack-next path/to/project\n```\n\n----------------------------------------\n\nTITLE: Passing Node.js Arguments to Next.js Commands\nDESCRIPTION: The code demonstrates how to pass Node.js arguments to Next.js commands using the `NODE_OPTIONS` environment variable. This allows developers to modify Node.js behavior when running Next.js commands, useful for debugging or applying specific Node.js settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='--throw-deprecation' next\n```\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='-r esm' next\n```\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='--inspect' next\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Component in Next.js\nDESCRIPTION: This JavaScript snippet demonstrates the importation of a Content component from a local module, and then its rendering in a JSX structure. It requires the Content component to be defined in a file named content.js located in the same directory. The snippet uses ES6 module syntax and JSX, suggesting a modern JavaScript build environment, typically provided by a framework like Next.js. There are no parameters and it does not handle any inputs, as it is a basic rendering setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/app-css/app/mdx/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Content } from './content'\\n\\n<Content />\n```\n\n----------------------------------------\n\nTITLE: Exporting IPC Instance\nDESCRIPTION: Exports an IPC instance created by invoking createIpc with PORT. It establishes an IPC mechanism using the specified port. Depends on PORT being properly defined and an active network environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const IPC = createIpc(parseInt(PORT, 10));\n```\n\n----------------------------------------\n\nTITLE: Installing sharp with pnpm\nDESCRIPTION: This snippet demonstrates how to install the `sharp` package using pnpm. It is an alternative solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sharp\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Ionic example using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application based on the 'with-ionic' example. It scaffolds a project named 'with-ionic-app' in the current directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-ionic with-ionic-app\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependency\nDESCRIPTION: This command installs the latest version of the Next.js package as a project dependency. It utilizes the npm package manager to add Next.js to the project's `node_modules` directory and update the `package.json` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Related Links in YAML Frontmatter\nDESCRIPTION: This YAML frontmatter snippet demonstrates how to use the `related` field to specify additional resources, enhancing navigability in documentation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrelated:\n  description: Learn how to quickly get started with your first application.\n  links:\n    - app/building-your-application/routing/defining-routes\n    - app/building-your-application/data-fetching\n    - app/api-reference/file-conventions/page\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware with Regex Path Exclusions\nDESCRIPTION: Example showing how to use regex patterns in middleware configuration to exclude specific paths from middleware execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|favicon.ico).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action that accepts additional arguments in JavaScript\nDESCRIPTION: This snippet shows how to define a Server Action that accepts both a user ID argument (passed via bind) and FormData from a form submission in JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nexport async function updateUser(userId, formData) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npx to create a new Next.js application with the react-remove-properties example. It clones the example and sets up a new project directory called react-remove-properties-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example react-remove-properties react-remove-properties-app\n```\n\n----------------------------------------\n\nTITLE: Exporting PostCSS Configuration as an Object (Correct)\nDESCRIPTION: This snippet demonstrates the correct way to export PostCSS configuration as a plain object. It uses process.env to access environment information for determining plugin configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-function.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    'postcss-plugin': process.env.NODE_ENV === 'production' ? {} : false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gridRow Styling Function\nDESCRIPTION: Defines the gridRow styling function using the style utility to handle the 'gridRow' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 20\n};\nconst gridRow = style({\n    prop: 'gridRow'\n});\nexport { gridRow as k } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Google Analytics using pnpm\nDESCRIPTION: This command creates a new Next.js application with the Google Analytics example using pnpm. It initializes a new project named 'with-google-analytics-app' using the specified example from the Next.js repository. Requires pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-google-analytics with-google-analytics-app\n```\n\n----------------------------------------\n\nTITLE: JSX Chart component usage\nDESCRIPTION: This JSX snippet demonstrates how to use the imported Chart component within a Next.js application.  It sets the 'year' property of the Chart component to the value of the 'year' variable (2018) and the 'color' property to \"#fcb32c\".\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/tests/node-file-trace/integration/mdx/example.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Chart year={year} color=\"#fcb32c\" />\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running Next.js in development mode using npm\nDESCRIPTION: These commands install the project dependencies using npm and then start the Next.js development server. This allows the user to view the website in a local environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-prefetching' example. It creates a directory named 'with-prefetching-app' containing the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-prefetching with-prefetching-app\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Server Function Execution with JavaScript\nDESCRIPTION: Demonstrates redirecting users to a different page after a Server Function completes in JavaScript. Uses the redirect function from Next.js navigation to send users to the posts page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function createPost(formData) {\n  // Update data\n  // ...\n\n  redirect('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright test\nDESCRIPTION: This command installs the `@playwright/test` package as a development dependency.  Playwright test is used for end-to-end testing and provides the necessary APIs for writing tests and interacting with the browser.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @playwright/test\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Compiled using npx\nDESCRIPTION: This command uses npx to create a new Next.js application configured with the Compiled CSS-in-JS library. It downloads and executes the create-next-app package with the 'with-compiled-css' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-compiled-css with-compiled-css-app\n```\n\n----------------------------------------\n\nTITLE: Using onNavigate Event Handler\nDESCRIPTION: Implement an onNavigate event handler to intercept and potentially prevent client-side navigation, with specific behavior during SPA navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link\n      href=\"/dashboard\"\n      onNavigate={(e) => {\n        console.log('Navigating...')\n        // e.preventDefault()\n      }}\n    >\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Next.js Sitecore XM Cloud App using pnpm\nDESCRIPTION: This command initializes a new Next.js project with Sitecore XM Cloud using pnpm. It requires Node.js and pnpm to be installed. The project is created in a directory called 'cms-sitecore-xmcloud-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Default Export\nDESCRIPTION: Re-exports the default export from a TurboPack part. This snippet demonstrates how default exports are handled across TurboPack parts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as __TURBOPACK__default__export__ } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -12\n};\nexport { __TURBOPACK__default__export__ as default };\n\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with WebWorker Example (pnpm)\nDESCRIPTION: This command initializes a new Next.js application using the 'with-web-worker' example. It uses pnpm to execute the create next-app command and sets up a project named 'with-web-worker-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-web-worker with-web-worker-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using npx with Markdoc example\nDESCRIPTION: This command initializes a new Next.js application named 'markdoc-app' using the Markdoc example from the create-next-app tool. It leverages npx to execute the command directly without requiring global installation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example markdoc markdoc-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Google Analytics using npx\nDESCRIPTION: This command creates a new Next.js application with the Google Analytics example using npx. It initializes a new project named 'with-google-analytics-app' using the specified example from the Next.js repository. Requires npx to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-google-analytics with-google-analytics-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental NFT Next.js Plugin in next.config.js\nDESCRIPTION: Configuration of the Node File Tracing plugin with experimental options for Next.js applications. Allows customization of logging and tracing behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/turbo-tracing-next-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createNodeFileTrace } = require(\"@vercel/experimental-nft-next-plugin\");\n\nconst withNodeFileTrace = createNodeFileTrace({\n  // experimental nft options\n  log: {\n    all: true,\n  },\n});\n\nmodule.exports = withNodeFileTrace({\n  // next config\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the api-routes-middleware example. It initializes the project with the specified example and names the new application api-routes-middleware-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example api-routes-middleware api-routes-middleware-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js app with Stripe TypeScript example (pnpm)\nDESCRIPTION: This command initializes a new Next.js application using the `with-stripe-typescript` example from the Next.js repository. It uses `create-next-app` via `pnpm` to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-stripe-typescript with-stripe-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Importing Server Actions in Client Components using JavaScript\nDESCRIPTION: This snippet demonstrates how to import Server Actions from a separate file into a Client Component and use them in an event handler in JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { create } from './actions'\n\nexport function Button() {\n  return <button onClick={() => create()}>Create</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the ReactMD and Typescript example. It streamlines the project setup with pre-configured settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-react-md-typescript with-react-md-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependency (Yarn)\nDESCRIPTION: This command installs TypeScript as a development dependency using Yarn. It is essential for adding TypeScript support to a project. The `--save-dev` flag ensures it's added to `devDependencies` in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Starting Tigris Local Development Environment - Bash\nDESCRIPTION: This snippet starts the Tigris local development server. It's a critical step to ensure that the backend services for the application are running.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntigris dev start\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application named 'with-mocha-app' based on the 'with-mocha' example.  It initializes a project with pre-configured Mocha testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mocha with-mocha-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application named 'with-i18n-next-intl-app' using the 'with-i18n-next-intl' example. It requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-i18n-next-intl with-i18n-next-intl-app\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Flow (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application with Flow, using the 'with-flow' example. It requires pnpm to be installed. The new application will be created in a directory named 'with-flow-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-flow with-flow-app\n```\n\n----------------------------------------\n\nTITLE: Identifying React Fragment Elements\nDESCRIPTION: Shows how to check if an element is a React Fragment using isFragment and how to verify its type using typeOf against the ReactIs.Fragment constant.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport * as ReactIs from 'react-is';\n\nReactIs.isFragment(<></>); // true\nReactIs.typeOf(<></>) === ReactIs.Fragment; // true\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Vanilla Extract using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the Vanilla Extract example. It initializes a project named 'with-vanilla-extract-app' utilizing the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-vanilla-extract with-vanilla-extract-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Jotai example using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the Jotai example. It executes the create next-app package and clones the specified Jotai example into a new directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-jotai with-jotai-app\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation with Styled Components - JavaScript\nDESCRIPTION: This is the JavaScript version of using StyledComponentsRegistry in the root layout of a Next.js application, ensuring global styles are applied correctly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: TurboPack Module Export System\nDESCRIPTION: Exports modules using TurboPack's specialized export syntax with variable assertions. Enables targeted exports of specific components from the module system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport { improveConsole as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in Development Mode\nDESCRIPTION: These commands set up the application to run in development mode using either npm or yarn. This starts the development server, allowing live previews of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js development server using npm\nDESCRIPTION: This command starts the Next.js development server using npm.  It executes the \"dev\" script defined in the package.json file, typically starting the server on localhost:3000.  npm must be installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Framer Motion Example (pnpm)\nDESCRIPTION: This command creates a new Next.js application, pre-configured with the Framer Motion example, using the `create-next-app` tool. It uses pnpm as the package manager for installation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-framer-motion with-framer-motion-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js MDX app with npx\nDESCRIPTION: This command utilizes npx to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires npx to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example mdx mdx-app\n```\n\n----------------------------------------\n\nTITLE: Using Wrapped Client Components in Server Components\nDESCRIPTION: Example showing how to use a properly wrapped third-party component within a Server Component after it has been marked as a Client Component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Carousel from './carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Carousel from './carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for UI Kitten Components\nDESCRIPTION: Configuration setup in next.config.js to enable transpilation of external packages using next-transpile-modules\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withExpo } = require(\"@expo/next-adapter\");\nconst withPlugins = require(\"next-compose-plugins\");\nconst withTM = require(\"next-transpile-modules\")([\n  // Add the name of your package here...\n  \"@ui-kitten/components\",\n]);\n\nmodule.exports = withPlugins([withTM, [withExpo, { projectRoot: __dirname }]], {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Random Generator\nDESCRIPTION: Implements custom random string generation with specified alphabet and size.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet customRandom = (alphabet, size, getRandom)=>{\n    let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1;\n    let step = Math.ceil((1.6 * mask * size) / alphabet.length);\n    return ()=>{\n        let id = '';\n        while(true){\n            let bytes = getRandom(step);\n            let i = step;\n            while(i--){\n                id += alphabet[bytes[i] & mask] || '';\n                if (id.length === size) return id;\n            }\n        }\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Running blog app with pnpm\nDESCRIPTION: These commands navigate to the `blog` directory, install dependencies using pnpm, and start the development server. The blog app will be accessible at http://localhost:4000/blog.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd blog\npnpm install && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: TypeScript Template Component Definition\nDESCRIPTION: Defines a basic template component in TypeScript that wraps child components within a div element. Used for rendering page or layout children with a unique key on each navigation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/template.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Electron App with Next.js Using pnpm\nDESCRIPTION: This snippet portrays the use of pnpm to configure a Next.js application designed for Electron. It streamlines the setup process by utilizing pnpm's package management features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-electron with-electron-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yoga Design System using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application with the Yoga Design System example. It initializes a project named `with-yoga-app` using the `with-yoga` example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-yoga with-yoga-app\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Dev Server\nDESCRIPTION: These commands install the project dependencies and start the Next.js development server. The commands utilize npm, Yarn, and pnpm respectively. The development server is typically accessible at `http://localhost:3000`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running home app with pnpm\nDESCRIPTION: These commands navigate to the `home` directory, install dependencies using pnpm, and start the development server. The home app will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd home\npnpm install && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Configuration (TypeScript)\nDESCRIPTION: Configures Cypress for Component Testing using TypeScript.  Specifies Next.js as the framework and webpack as the bundler.  Requires the `cypress` package to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Locales Using next/link in Next.js\nDESCRIPTION: This snippet demonstrates how to use the next/link component to transition between different locales in a Next.js application. It shows how to specify a different locale using the locale prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/another\" locale=\"fr\">\n      To /fr/another\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running Next.js in development mode using Yarn\nDESCRIPTION: These commands install project dependencies with Yarn, then start the Next.js development server, allowing users to preview the site locally.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js with Turbopack\nDESCRIPTION: This bash command starts the Next.js development server using Turbopack for faster local development. Turbopack is a bundler that can be used instead of Webpack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --turbopack\n```\n\n----------------------------------------\n\nTITLE: Updating Search Form to Use SearchButton in Next.js TypeScript\nDESCRIPTION: In this TypeScript snippet, the search form integrates the 'SearchButton' component to replace the submit button. The SearchButton provides dynamic feedback during the search process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Form from 'next/form'\nimport { SearchButton } from '@/ui/search-button'\n\nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <SearchButton />\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Console Calls in Next.js Compiler\nDESCRIPTION: This snippet demonstrates how to configure the Next.js Compiler to remove console calls from the codebase. Configurations allow for the exclusion of certain console types, such as errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    removeConsole: true,\n  },\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    removeConsole: {\n      exclude: ['error'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Meta Tags in HTML\nDESCRIPTION: Shows the default meta tags that Next.js automatically adds to every route, including charset and viewport configuration for proper rendering across devices.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Options in Next.js with TypeScript\nDESCRIPTION: This snippet shows how to configure Sass options in a Next.js project using TypeScript. It sets up additional data and specifies the Sass implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/sassOptions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst sassOptions = {\n  additionalData: `\n    $var: red;\n  `,\n}\n\nconst nextConfig: NextConfig = {\n  sassOptions: {\n    ...sassOptions,\n    implementation: 'sass-embedded',\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Parameters in JavaScript\nDESCRIPTION: This JavaScript snippet defines viewport parameters, including width and scaling options, within a viewport object for use in Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported but less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n```\n\n----------------------------------------\n\nTITLE: File Operation Utilities with devlow-bench (JavaScript)\nDESCRIPTION: Demonstrates waiting for a file to exist using devlow-bench's waitForFile function. Useful for scenarios dependent on file availability.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waitForFile } from \"devlow-bench/file\";\n\n// wait for file to exist\nawait waitForFile(\"/path/to/file\", /* timeout = */ 30000);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with pnpm\nDESCRIPTION: This command leverages pnpm to generate a new Next.js application utilizing the DatoCMS example. The new project is initialized in a directory named cms-datocms-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-datocms cms-datocms-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-yarn-workspaces example. It initializes the project with the specified example and names the application with-yarn-workspaces-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-yarn-workspaces with-yarn-workspaces-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Next.js Page Component\nDESCRIPTION: A simple example of a Next.js page component exported from a file in the pages directory. This component renders a div with the text 'About' and will be accessible at the /about route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction About() {\n  return <div>About</div>\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge API Route for Proxy Requests\nDESCRIPTION: Example of using Edge API Routes to handle proxy requests with header forwarding.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest } from 'next/server'\n\nexport const config = {\n  runtime: 'edge',\n}\n\nexport default async function handler(req: NextRequest) {\n  const authorization = req.cookies.get('authorization')\n  return fetch('https://backend-api.com/api/protected', {\n    method: req.method,\n    headers: {\n      authorization,\n    },\n    redirect: 'manual',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Processing FormData in Server Functions with JavaScript\nDESCRIPTION: Demonstrates processing FormData in a JavaScript Server Function. The function extracts title and content fields from the FormData object for database operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nexport async function createPost(formData) {\n  const title = formData.get('title')\n  const content = formData.get('content')\n\n  // Update data\n  // Revalidate cache\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StackTrace Parser\nDESCRIPTION: Imports the stacktrace-parser module from a compiled directory, using TurboPack's part system for module loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport \"../compiled/stacktrace-parser\";\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Couchbase example\nDESCRIPTION: These commands demonstrate how to create a new Next.js application using the Couchbase example.  It provides instructions for using npm, yarn, and pnpm to bootstrap the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-couchbase with-couchbase-app\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Function Call in Javascript\nDESCRIPTION: This code declares a constant variable `value` and initializes it with the result of calling `externalFunction()`. It shows a variable declaration and a call to an external function which may have side effects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = externalFunction();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Options in Next.js with JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Sass options in a Next.js project using JavaScript. It sets up additional data and specifies the Sass implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/sassOptions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nconst sassOptions = {\n  additionalData: `\n    $var: red;\n  `,\n}\n\nconst nextConfig = {\n  sassOptions: {\n    ...sassOptions,\n    implementation: 'sass-embedded',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js development server using bun\nDESCRIPTION: This command starts the Next.js development server using bun. It runs the \"dev\" script defined in the package.json file, which typically starts the server on localhost:3000. Bun must be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Exporting Constant DOG Using Assertions\nDESCRIPTION: This snippet imports 'dog' from another module using assertions and exports it as constant 'DOG'. It demonstrates module interoperability.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as dog } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nconst DOG = dog;\nexport { DOG };\nexport { DOG as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic User Component with Cookies in TypeScript\nDESCRIPTION: Example of a dynamic TypeScript component that reads cookies from the request, which requires Suspense wrapping when used with PPR.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function User() {\n  const session = (await cookies()).get('session')?.value\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Metadata in Next.js Layout File (TypeScript)\nDESCRIPTION: Demonstrates how to define static metadata in a Next.js layout file using TypeScript. This example shows adding a title and description to a blog route.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My Blog',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Inline Script using dangerouslySetInnerHTML\nDESCRIPTION: This code snippet demonstrates how to use an inline script with the Script component by using the `dangerouslySetInnerHTML` prop. Requires `next/script` dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles\nDESCRIPTION: This snippet shows how to define global styles for the body element, which will be applied to all pages in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with filbert-js example using pnpm\nDESCRIPTION: This command utilizes pnpm to create a Next.js application based on the provided filbert-js example. pnpm efficiently manages node_modules and executes the create-next-app script.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-filbert with-filbert-app\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Development Server (Yarn)\nDESCRIPTION: These commands install the project dependencies using Yarn and then start the Next.js development server. Requires Yarn to be installed. The server will typically run on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic User Component with Cookies in JavaScript\nDESCRIPTION: Example of a dynamic JavaScript component that reads cookies from the request, which requires Suspense wrapping when used with PPR.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function User() {\n  const session = (await cookies()).get('session')?.value\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Development Server (npm)\nDESCRIPTION: These commands install the project dependencies using npm and then start the Next.js development server. Requires npm to be installed.  The server will typically run on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Slate.js example using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-slate-app' using the 'with-slate' example.  It bootstraps a project with pre-configured Slate.js integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-slate with-slate-app\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage in Next.js\nDESCRIPTION: Demonstrates how to use the Next.js Link component for client-side navigation between routes. The Link component extends HTML anchor tags with prefetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Types for Xata\nDESCRIPTION: This command generates type definitions based on your Xata database schema, providing type safety for your Next.js application when interacting with Xata. Requires the Xata CLI to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nxata codegen\n```\n\n----------------------------------------\n\nTITLE: Using Style Property with Next.js Image Component\nDESCRIPTION: Example of applying custom CSS styles to a Next.js Image component using the style property. This shows how to create a circular profile image with a border.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst imageStyle = {\n  borderRadius: '50%',\n  border: '1px solid #fff',\n}\n\nexport default function ProfileImage() {\n  return <Image src=\"...\" style={imageStyle} />\n}\n```\n\n----------------------------------------\n\nTITLE: Copying the .env.local.example file\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is used to store environment variables for the Next.js application. It is excluded from version control.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GET Route Handler in Next.js\nDESCRIPTION: Demonstrates how to create a simple GET route handler that returns a JSON response with a 'Hello World' message. This is the most basic implementation of a Route Handler in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET() {\n  return Response.json({ message: 'Hello World' })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  return Response.json({ message: 'Hello World' })\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlogNavLink in Server Component Layout\nDESCRIPTION: Demonstrates importing a client component with useSelectedLayoutSegment into a server-side layout\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div>\n      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div>{children}</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Umbraco Heartcore example\nDESCRIPTION: These commands create a new Next.js application using the cms-umbraco-heartcore example.  They use npx, yarn, or pnpm to bootstrap the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app\n```\n\n----------------------------------------\n\nTITLE: Creating Prerender State in Next.js\nDESCRIPTION: Defines and exports a function to create a prerender state object with debug skeleton information and dynamic accesses tracking.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createPrerenderState(isDebugSkeleton) {\n    return {\n        isDebugSkeleton,\n        dynamicAccesses: []\n    };\n}\nexport { createPrerenderState };\nexport { createPrerenderState as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Default Export Assertion in JavaScript\nDESCRIPTION: This snippet is responsible for exporting the default module using Turbopack's assertion syntax. It includes assertions to ensure correct module usage during evaluation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { default } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export default\"\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body in Next.js - TypeScript\nDESCRIPTION: This snippet demonstrates how to read the JSON body from a request in a POST route using standard Web API methods. It returns the parsed JSON as a response.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Parameters in Client-Side Rendering with Next.js\nDESCRIPTION: This component, `SearchBar`, utilizes the `useSearchParams` hook from Next.js to retrieve search parameters in a React component. When rendered in a static context, it can lead to unexpected client-side rendering behavior if not wrapped in a Suspense boundary. This snippet includes a console log to demonstrate search value retrieval.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/deopted-into-client-rendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will not be logged on the server when using static rendering\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Skypack to Import a Package\nDESCRIPTION: This snippet illustrates how to use Skypack to import a package and invoke it within a React component using the `useEffect` hook.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from 'https://cdn.skypack.dev/canvas-confetti'\nimport { useEffect } from 'react'\n\nexport default () => {\n  useEffect(() => {\n    confetti()\n  })\n  return <p>Hello</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Function in JavaScript\nDESCRIPTION: The snippet declares an exportable function 'external1' which calls 'internal' and concatenates its result to 'foobar', returning the complete string. It requires 'internal' and 'foobar'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function external1() {\n    return internal() + foobar;\n}\n\n```\n\n----------------------------------------\n\nTITLE: XML Output from Programmatically Generated Sitemap\nDESCRIPTION: The resulting XML output from the programmatically generated sitemap, showing how the JavaScript/TypeScript object is converted to standard sitemap XML format.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Defining Static/Dynamic Metadata (TSX)\nDESCRIPTION: This snippet demonstrates how to define static metadata using the `metadata` object and dynamic metadata using the `generateMetadata` function in a TypeScript Next.js application.  It shows the basic structure for exporting either a static `Metadata` object or an asynchronous `generateMetadata` function that accepts parameters. The function's return value is an object that defines the page's metadata, such as the title.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\n// either Static metadata\nexport const metadata: Metadata = {\n  title: '...',\n}\n\n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Detection Helper Function - JavaScript\nDESCRIPTION: Defines a function `isBubbledError` to check whether an error is an instance of the `BubbledError` class. Returns a boolean indicating the result.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function isBubbledError(error) {\n    if (typeof error !== 'object' || error === null) return false;\n    return error instanceof BubbledError;\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Export with Turbopack\nDESCRIPTION: Defines and exports a variable named 'foobar' using Turbopack's variable assertion. This snippet illustrates how to declare and re-export variables, vital for modular JavaScript applications in a Turbopack environment, demanding compatibility with Turbopack's module approach. This enables modular export functionality but requires Turbopack support.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet foobar = \"foo\";\nexport { foobar as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Viewport in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a generateViewport function in TypeScript, which returns a Viewport object. The function accepts an object containing route parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Container in Next.js _app.js (Before)\nDESCRIPTION: This code snippet shows the incorrect implementation of the custom <App> component in Next.js before the fix. It imports and uses the deprecated <Container> component from `next/app`, which causes the \"App Container Deprecated\" error in Next.js versions 9.0.4 and later.  The `MyApp` class extends `App` and renders the `Component` wrapped within the `Container`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-container-deprecated.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport App, { Container } from 'next/app'\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props\n    return (\n      <Container>\n        <Component {...pageProps} />\n      </Container>\n    )\n  }\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Incorrect Next.js Link Usage with Multiple Children\nDESCRIPTION: Example showing incorrect implementation of Next.js Link component where multiple anchor tags are passed as children, which causes an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-multiple-children.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/about\">\n      <a>To About</a>\n      <a>Second To About</a>\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Markdown Frontmatter for Next.js Page\nDESCRIPTION: Defines the frontmatter metadata for a Next.js page, specifying the page type, title, and creation date. This metadata is used by Next.js and Nextra to properly render the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: page\ntitle: About\ndate: 2021-03-19\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with Supabase Starter Template using NPX\nDESCRIPTION: Command to create a new Next.js application using the Supabase Starter template with NPX. This initializes a project with all the necessary configurations for Supabase integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-supabase with-supabase-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with create-next-app using npx\nDESCRIPTION: This command initializes a new Next.js application named `github-pages-app` using the `github-pages` example from the `create-next-app` tool. The command uses npx to execute the create-next-app package.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example github-pages github-pages-app\n```\n\n----------------------------------------\n\nTITLE: Next.js Logging Configuration for Cache Debugging\nDESCRIPTION: Configuration for enabling detailed fetch logging in Next.js development environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Project Selection\nDESCRIPTION: This command illustrates the prompt during interactive project creation, specifically asking whether to initialize a TypeScript project.  Selecting 'Yes' configures the project with TypeScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✔ Would you like to use TypeScript? … No / Yes\n```\n\n----------------------------------------\n\nTITLE: Enabling TypedRoutes in Next.js Configuration\nDESCRIPTION: This configuration enables experimental support for statically typed links in Next.js projects. This feature requires using the App Router and TypeScript in your project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/typedRoutes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring trailingSlash in Next.js Configuration\nDESCRIPTION: This snippet shows how to set the trailingSlash option to true in the next.config.js file. This configuration redirects URLs without trailing slashes to their counterparts with trailing slashes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/trailingSlash.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Config: Re-export - Next.js JavaScript\nDESCRIPTION: This code snippet shows an invalid `config` because it is re-exported from another module. The `config` object must be directly defined in the current module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Re-exported `config` is not allowed\nexport { config } from '../config'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-rbx-bulma-pro example. It initializes a project named with-rbx-bulma-pro-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Knex Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-knex` example. It shows how to initialize a new project using npm, yarn or pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-knex with-knex-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Grafbase Example using pnpm\nDESCRIPTION: This command initializes a new Next.js application based on the 'with-grafbase' example, utilizing pnpm as the package manager, and names the new project 'with-grafbase-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-grafbase with-grafbase-app\n```\n\n----------------------------------------\n\nTITLE: NextRouter Import Example\nDESCRIPTION: Example showing the correct import path for useRouter hook based on usage context. For app directory, use next/navigation and for pages directory, use next/compat/router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-router-not-mounted.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// For app directory\nimport { useRouter } from 'next/navigation'\n\n// For pages directory\nimport { useRouter } from 'next/compat/router'\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Webpack Configuration\nDESCRIPTION: This snippet shows how to update the Next.js configuration by removing the deprecated 'future.webpack5' option, as webpack 5 is the default now. It is essential for maintaining compatibility with the latest Next.js versions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/future-webpack5-moved-to-webpack5.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  future: {\n    webpack5: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Middleware Function Definition\nDESCRIPTION: Minimal example of defining a middleware function in JavaScript. This shows the basic structure of a middleware function that can be used to process requests before they reach the route handlers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function middleware(request) {\n  // Middleware logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Phase 1\nDESCRIPTION: This mermaid diagram represents the module dependencies in phase 1. It shows the different items and their dependencies, visualizing the flow of data and execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item10[\"export a\"];\n    Item11;\n    Item11[\"export b\"];\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Next.js (npm)\nDESCRIPTION: These commands install the necessary dependencies for the Next.js application using npm and then start the development server. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-rbx-bulma-pro example. It initializes a project named with-rbx-bulma-pro-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Knex Example\nDESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-knex` example. It shows how to initialize a new project using npm, yarn or pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-knex with-knex-app\n```\n\n----------------------------------------\n\nTITLE: Exporting isBubbledError Utility Function\nDESCRIPTION: Exports a utility function to check if an error is a bubbled error, which helps in determining how to handle the error in spans.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t as isBubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nexport { isBubbledError };\n\n```\n\n----------------------------------------\n\nTITLE: Exporting a Constant from a Module\nDESCRIPTION: This snippet exports the constant 'DOG', which references the previously declared variable 'dog'. It shows how to make a variable available for import in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const DOG = dog;\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File\nDESCRIPTION: This command copies the example environment variables file to a local environment variables file. This allows the user to configure the application with their own Elasticsearch credentials. The `.env.local` file will be ignored by Git.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with PostCSS\nDESCRIPTION: This JavaScript module configures PostCSS to use the `@tailwindcss/postcss` plugin. This is necessary for Tailwind CSS to generate its styles during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"/** @type {import('tailwindcss').Config} */\nexport default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n  },\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Global CSS in Next.js\nDESCRIPTION: Global CSS applies styles across the entire application. This example demonstrates creating a global CSS file and importing it in the root layout to apply styles to all routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Import Error Handling in JavaScript\nDESCRIPTION: A Jest test that verifies module resolution failure when attempting to require a non-existent file, ensuring proper error throwing behavior\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/comptime/issues/__l___Module not found____c__ Can't resolve __c_'.-809a40.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"importing a not existing file should throw\", () => {\n  // This is a check to make sure that the following tests would fail if they require(\"fail\")\n  expect(() => {\n    require(\"./not-existing-file\");\n  }).toThrow();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction maybeReturn(x) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Size Metadata in Next.js (TypeScript/JavaScript)\nDESCRIPTION: Shows how to configure the size metadata for generated icons in Next.js. This metadata is used to set the appropriate size attributes in the HTML output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const size = { width: 32, height: 32 }\n\nexport default function Icon() {}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command employs pnpm to generate a new Next.js app utilizing the 'with-prefetching' example. The resulting project will be located in the 'with-prefetching-app' directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-prefetching with-prefetching-app\n```\n\n----------------------------------------\n\nTITLE: Defining Server Functions in a Separate File with TypeScript\nDESCRIPTION: Demonstrates how to define Server Functions in a dedicated TypeScript file by placing the 'use server' directive at the top of the file, making all exports Server Functions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nexport async function createPost() {}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 1 (prod)\nDESCRIPTION: This represents part 1 of the production build. It imports a previous turbopack part and then declares and exports variable `value2`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nconst value2 = externalObject.propertyWithGetter;\nexport { value2 as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI Cache for Next.js Builds\nDESCRIPTION: This YAML configuration for Travis CI specifies directories to be cached, including the Yarn cache, node_modules, and the Next.js cache directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  directories:\n    - $HOME/.cache/yarn\n    - node_modules\n    - .next/cache\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Hello World Page in JavaScript\nDESCRIPTION: This snippet defines a simple static page that renders the text 'hello world!'. It is intended to be served statically using Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Hello() {\n  return 'hello world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sass Options in Next.js Configuration\nDESCRIPTION: These examples show how to configure Sass options in next.config.js, specifically setting additionalData to define global Sass variables across the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  sassOptions: {\n    additionalData: `$var: red;`,\n  },\n}\n\nexport default nextConfig\n```\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nconst nextConfig = {\n  sassOptions: {\n    additionalData: `$var: red;`,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Image Imports in Next.js\nDESCRIPTION: This code snippet shows how to disable static image imports in `next.config.js`. This is useful if static image imports conflict with other plugins that expect imports to behave differently.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TurboPack Module Import Parts in JavaScript\nDESCRIPTION: A collection of TurboPack module import parts that establish the dependency relationships between different modules in the system. These parts ensure proper module loading order for the CSS grid implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport './style';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nexport { style as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport './compose';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport compose from './compose';\nexport { compose as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport './spacing';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { createUnaryUnit } from './spacing';\nexport { createUnaryUnit as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getValue } from './spacing';\nexport { getValue as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport './breakpoints';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport { handleBreakpoints } from './breakpoints';\nexport { handleBreakpoints as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport './responsivePropType';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 9\n};\nimport responsivePropType from './responsivePropType';\nexport { responsivePropType as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Using next/image with basePath\nDESCRIPTION: Example of configuring an image source with the basePath prefix to ensure correct image rendering when deployed under a sub-path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nfunction Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/docs/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Manifest Metadata HTML Output\nDESCRIPTION: This code shows the HTML output generated from the manifest metadata configuration. It includes a `<link>` tag for the web application manifest with the appropriate `rel` and `href` attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"manifest\" href=\"https://nextjs.org/manifest.json\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Fela using Yarn\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application using the 'with-fela' example.  It sets up the required project structure with the Fela styling solution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-fela with-fela-app\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests using pnpm\nDESCRIPTION: This snippet presents the command to run Jest tests in the Next.js application using pnpm. This step is crucial for ensuring that all tests are executed correctly in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Correct Next.js Link Usage with Single Child\nDESCRIPTION: Example showing the correct implementation of Next.js Link component with a single anchor tag child, which is the recommended approach before Next.js 13.0.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-multiple-children.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/about\">\n      <a>To About</a>\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with Supabase Starter Template using PNPM\nDESCRIPTION: Command to create a new Next.js application using the Supabase Starter template with PNPM. Sets up a project with all required configurations for Supabase integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-supabase with-supabase-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Plausible using pnpm\nDESCRIPTION: This command initializes a new Next.js application with the Plausible analytics example. It uses `create next-app` via `pnpm` to bootstrap the project with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-plausible with-plausible-app\n```\n\n----------------------------------------\n\nTITLE: Mermaid Graph for Phase 2 to 4 Dependencies\nDESCRIPTION: Demonstrates the expanded dependencies and export relationships among module items through Phases 2 to 4 with inclusion of mutual dependencies visualized in a directed graph setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item3[\"export RouteKind\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item3 --> Item1;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Latest Version using npm\nDESCRIPTION: This command upgrades Next.js to the latest version (>= 14.1.0) to remove the warning about Webpack Build Worker automatic opt-out. It uses npm to install the latest version of Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/webpack-build-worker-opt-out.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Server on Reserved Port\nDESCRIPTION: These examples demonstrate starting a Next.js server (in production or development mode) on port 4045, which is reserved for the Network Paging Protocol. This will result in an error as the port is reserved.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/reserved-port.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnext start -p 4045\n```\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --port 4045\n```\n\n----------------------------------------\n\nTITLE: Copying environment file\nDESCRIPTION: This command copies the example environment file `.env.local.example` to `.env.local`.  This allows users to configure the application with their specific API keys and settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Components HMR Cache in JavaScript\nDESCRIPTION: Configuration example showing how to disable the server components HMR cache using JavaScript in next.config.js. The serverComponentsHmrCache option is set under the experimental configuration object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverComponentsHmrCache.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverComponentsHmrCache: false, // defaults to true\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Calling c2_2 for Side Effects in JavaScript\nDESCRIPTION: This snippet invokes the function `c2_2`, similarly causing its dependencies to execute within the module, showcasing how function calls propagate.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nc2_2();\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application using the with-babel-macros example. It sets up the project with the required babel-macros configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-babel-macros with-babel-macros-app\n```\n\n----------------------------------------\n\nTITLE: Final Query for Actor-Movie-Director Relationships\nDESCRIPTION: A Neo4j Cypher query to match actors who have acted in movies directed by specific directors, with a limit of 10 results.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_3\n\nLANGUAGE: cypher\nCODE:\n```\nWITH TomH as a\nMATCH (a)-[:ACTED_IN]->(m)<-[:DIRECTED]-(d) RETURN a,m,d LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching with TypeScript in Next.js\nDESCRIPTION: Example of using TypeScript with async data fetching in a Next.js page component. Demonstrates type-safe data fetching without serialization requirements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n  return res.json()\n}\n\nexport default async function Page() {\n  const name = await getData()\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Experimental Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Next.js to enable the experimental authInterrupts option using JavaScript. This configuration is essential for employing the unauthorized function in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    authInterrupts: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Export Star with CommonJS Modules\nDESCRIPTION: Warning about using export * with a CommonJS module that has runtime-only exports. Recommends manually listing exports or converting to ESM.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/async-modules/export-all/issues/unexpected export __star__-9b505f.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from \"[project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/async-modules/export-all/input/exports.js\"\n```\n\n----------------------------------------\n\nTITLE: App Directory Next.js MDX Configuration\nDESCRIPTION: Comprehensive Next.js MDX configuration for the app directory with plugin and page extension support\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst withMDX = require('@next/mdx')({\n  options: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n})\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'js', 'jsx', 'md', 'mdx'],\n  reactStrictMode: true,\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: These commands install project dependencies using npm, yarn or pnpm. It ensures all necessary packages are installed before running the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Loading Indicator with useLinkStatus\nDESCRIPTION: Client-side hook to conditionally render a loading spinner during route navigation. Must be used as a descendant of a Link component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useLinkStatus } from 'next/link'\n\nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role=\"status\" aria-label=\"Loading\" className=\"spinner\" />\n  ) : null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Turbopack ECMAScript Test Snapshots with Cargo\nDESCRIPTION: Command to run cargo tests for the turbopack-ecmascript package with the UPDATE environment variable set to 1, which will update the snapshot tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUPDATE=1 cargo test -p turbopack-ecmascript\n```\n\n----------------------------------------\n\nTITLE: Transforming Anonymous Component with name-default-component Codemod\nDESCRIPTION: This example demonstrates how the name-default-component codemod transforms an anonymous function component into a named component. The component name is derived from the file name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function () {\n  return <div>Hello World</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MyComponent() {\n  return <div>Hello World</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with filbert-js example using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application from the filbert-js example. Yarn manages dependencies and executes the create-next-app script.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-filbert with-filbert-app\n```\n\n----------------------------------------\n\nTITLE: Entrypoints Object for Module Evaluation\nDESCRIPTION: Defines a JSON-like structure mapping module evaluations and exports to identifiers. This assists in managing module export evaluations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    ModuleEvaluation: 3,\n    Export(\n        \"a\",\n    ): 0,\n    Export(\n        \"b\",\n    ): 1,\n    Exports: 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Contentlayer example using Yarn\nDESCRIPTION: This command uses `create-next-app` with Yarn to create a new Next.js application based on the `with-contentlayer` example. It sets up a project named `with-contentlayer-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-contentlayer with-contentlayer-app\n```\n\n----------------------------------------\n\nTITLE: Running Small Stateless Component Benchmark\nDESCRIPTION: Command to run a benchmark test for a stateless application that renders a simple h1 heading. This test executes 3000 HTTP requests to measure performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bench:stateless\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Grafbase Example using Yarn\nDESCRIPTION: This command initializes a new Next.js application using the 'with-grafbase' example. It leverages Yarn as the package manager to create a project called 'with-grafbase-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-grafbase with-grafbase-app\n```\n\n----------------------------------------\n\nTITLE: Development Module Implementation\nDESCRIPTION: Complete module implementation for development environment including imports, exports, and TurboPack configurations\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport \"next/server\";\nconst GET = (req)=>{\n    return NextResponse.json({\n        pathname: req.nextUrl.pathname\n    });\n};\nexport { GET };\nexport { GET as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-next-page-transitions example. It utilizes pnpm's create command to set up the project structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-next-page-transitions with-next-page-transitions-app\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables in JavaScript Part 11\nDESCRIPTION: This snippet imports a variable and exports it directly. It focuses on re-export mechanics for a TurboPack-managed module environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nexport { foobar };\n```\n\n----------------------------------------\n\nTITLE: Generating Viewport in JavaScript\nDESCRIPTION: This snippet illustrates how to define a generateViewport function in JavaScript that returns a Viewport object. It takes an object with route parameters as an argument.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-passport-and-next-connect example. It bootstraps the project with the necessary files and configurations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Configuration\nDESCRIPTION: Shell command to copy the example environment configuration file to a local environment file, which will be used for Mux API credentials\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Fetch Function in JavaScript\nDESCRIPTION: This snippet exports the fetch function as the default export of the module, allowing other modules to import it directly. This is useful for integrating the fetch function into other parts of an application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default fetch;\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with External Function - JavaScript\nDESCRIPTION: This snippet declares a constant 'x1' that holds the result of calling 'externalFunction()'. It serves to show how variables capture external function outputs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst x1 = externalFunction();\n```\n\n----------------------------------------\n\nTITLE: Install Next.js dependency in Terminal\nDESCRIPTION: This command installs the latest version of Next.js in the existing project. It adds Next.js as a dependency to the project, enabling the use of Next.js features and functionalities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_0\n\nLANGUAGE: Terminal\nCODE:\n```\nnpm install next@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Framer Motion Example (npm)\nDESCRIPTION: This command uses the `create-next-app` tool to bootstrap a new Next.js application pre-configured with the Framer Motion example. It leverages npm as the package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-framer-motion with-framer-motion-app\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Next.js Deployment Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about deploying Next.js applications. Defines the page title, navigation title, description and source path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/01-getting-started/11-deploying.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to deploy your Next.js application\nnav_title: Deploying\ndescription: Learn how to deploy your Next.js application.\nsource: app/getting-started/deploying\n---\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 4 (prod)\nDESCRIPTION: Part 4 of the production build. It imports `shared` as `c` and then creates and exports object `a`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nconst a = {\n    shared,\n    a: \"aaaaaaaaaaa\"\n};\nexport { a as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Gap Implementation\nDESCRIPTION: Implementation of the gap styling function that handles theme-based spacing values and responsive breakpoints\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst gap = (props)=>{\n    if (props.gap !== undefined && props.gap !== null) {\n        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');\n        const styleFromPropValue = (propValue)=>({\n                gap: getValue(transformer, propValue)\n            });\n        return handleBreakpoints(props, props.gap, styleFromPropValue);\n    }\n    return null;\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Template Component Definition\nDESCRIPTION: Defines a basic template component in JavaScript that wraps child components within a div element. Provides similar functionality to the TypeScript version with simpler prop handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/template.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Template({ children }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the Zustand example. It initializes a project named `with-zustand-app` based on the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-zustand with-zustand-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with EdgeDB example - Bash\nDESCRIPTION: This command creates a new Next.js application using the `with-edgedb` example. It uses `create next-app` via `pnpm` to bootstrap the project with the specified example and project name. The resulting project will be located in the `with-edgedb-app` directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-edgedb with-edgedb-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Reflux Example (pnpm)\nDESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application based on the `with-reflux` example. It initializes a new project directory named `with-reflux-app` with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-reflux with-reflux-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Counter Component in JavaScript\nDESCRIPTION: JavaScript version of the counter component using the 'use client' directive with React useState hook.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Archives Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the archives metadata configuration. It includes a `<link>` tag with `rel=\"archives\"`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"archives\" href=\"https://nextjs.org/13\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yoga Design System using npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the Yoga Design System example. It initializes a project named `with-yoga-app` using the `with-yoga` example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-yoga with-yoga-app\n```\n\n----------------------------------------\n\nTITLE: Defining Page-Specific Content in Next.js Documentation\nDESCRIPTION: This snippet demonstrates how to use a custom React component to wrap content specific to the Pages Router in Next.js documentation. It allows for conditional rendering of content based on the router being used.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Kontent.ai Example (Yarn)\nDESCRIPTION: This command uses the `create next-app` utility with Yarn to bootstrap a new Next.js application using the `cms-kontent-ai` example. It creates a new directory named `cms-kontent-app` containing the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-kontent-ai cms-kontent-app\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 9 Implementation\nDESCRIPTION: Imports 'foobarCopy' from Part 6 and modifies it by appending 'Unused'. This demonstrates Turbopack's handling of variable modifications across module boundaries.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nfoobarCopy += \"Unused\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Prefix for Next.js Zone\nDESCRIPTION: This snippet shows how to configure the assetPrefix in next.config.js to avoid conflicts with other zones. It sets the prefix for assets like JavaScript and CSS files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  assetPrefix: '/blog-static',\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server without Multistage Builds\nDESCRIPTION: This snippet details how to run the production server without using multistage builds, resulting in a larger final image size. It includes steps to create a network, build, and run the Docker containers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Create a network, which allows containers to communicate\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my_network\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Build prod without multistage\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f compose.prod-without-multistage.yaml build\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Up prod without multistage in detached mode\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f compose.prod-without-multistage.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Assets Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the assets metadata configuration. It includes a `<link>` tag with `rel=\"assets\"`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"assets\" href=\"https://nextjs.org/assets\" />\n```\n\n----------------------------------------\n\nTITLE: Valid Config: Empty Object - Next.js JavaScript\nDESCRIPTION: This code snippet demonstrates a valid usage of the `config` export in Next.js. The `config` is an empty object, which is a valid starting point. Additional properties can be added to the object as long as they meet the static and constant value criteria.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using npm\nDESCRIPTION: This command uses npm to create a new Next.js application with the Zustand example. It initializes a project named `with-zustand-app` based on the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-zustand with-zustand-app\n```\n\n----------------------------------------\n\nTITLE: WebSocket Protocol Determination Function\nDESCRIPTION: Function to determine WebSocket protocol (ws/wss) based on the asset prefix URL or current location protocol.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getSocketProtocol(assetPrefix) {\n    let protocol = location.protocol;\n    try {\n        protocol = new URL(assetPrefix).protocol;\n    } catch (_) {}\n    return protocol === \"http:\" ? \"ws\" : \"wss\";\n}\n```\n\n----------------------------------------\n\nTITLE: Copying environment variable file\nDESCRIPTION: This command copies the example environment variable file to a local environment file.  This allows local configuration without affecting the original example file, and the .env.local file is git ignored.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic API Route in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript equivalent of creating a simple API route that returns a JSON response with a status code of 200.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with reactstrap using npx\nDESCRIPTION: This command uses npx to create a new Next.js application using the with-reactstrap example. It bootstraps a new project with the necessary dependencies and configuration to use reactstrap.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-reactstrap with-reactstrap-app\n```\n\n----------------------------------------\n\nTITLE: Import Image component in Next.js\nDESCRIPTION: Imports the `Image` component from the `next/image` module. This component is used for optimized image rendering in Next.js applications. It's a prerequisite for using the `<Image>` tag in the markdown content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 using bun\nDESCRIPTION: Command to upgrade Next.js to version 9 using bun package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@9\n```\n\n----------------------------------------\n\nTITLE: Creating Social Media Links with HTML in Markdown\nDESCRIPTION: Implements a contact section using HTML div element within Markdown to display social media links and contact information. This demonstrates how HTML can be embedded within Markdown content in Next.js with Nextra.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  Twitter [@yourname](https://twitter.com/yourname)\n  <br />\n  GitHub [@yourname](https://github.com/yourname)\n  <br />\n  Instagram [@yourname](https://instagram.com/yourname)\n  <br />\n  Email your@name.com\n</div>\n```\n\n----------------------------------------\n\nTITLE: App Directory MDX Components Configuration\nDESCRIPTION: MDX components configuration file for customizing and extending MDX components in the app directory\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// mdx-components.js\nexport function useMDXComponents(components) {\n  return components\n  // Allows customizing built-in components, e.g. to add styling.\n  // return {\n  //   h1: ({ children }) => <h1 style={{ fontSize: \"100px\" }}>{children}</h1>,\n  //   ...components,\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Reproduction Template with NPX\nDESCRIPTION: Command to create a new Next.js reproduction template project using NPX package runner\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example reproduction-template reproduction-app\n```\n\n----------------------------------------\n\nTITLE: Specifying Next.js SWC Binary for Linux ARM64 MUSL\nDESCRIPTION: This code snippet defines the package name for the Linux ARM64 MUSL binary of the @next/swc package. It is used to specify the correct binary version for Next.js SWC compilation on Linux ARM64 systems using the MUSL library.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/linux-arm64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@next/swc-linux-arm64-musl`\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic API Asynchronously in Client Component\nDESCRIPTION: This code snippet demonstrates how to access dynamic API properties asynchronously in a Client Component using React.use() in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport * as React from 'react'\n\nfunction Page({ params }) {\n  // asynchronous access of `params.id`.\n  const { id } = React.use(params)\n  return <p>ID: {id}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prerender State\nDESCRIPTION: Creates initial prerender state object with debug skeleton flag\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createPrerenderState(isDebugSkeleton) {\n    return {\n        isDebugSkeleton,\n        dynamicAccesses: []\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Get Environment with Defaults\nDESCRIPTION: Function to retrieve global environment configuration with default settings merged from predefined environment\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getEnv() {\n    var globalEnv = parseEnvironment(_globalThis);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Chakra UI using pnpm\nDESCRIPTION: This command employs pnpm to create a new Next.js application with Chakra UI, named 'with-chakra-ui-app'. It is based on the 'with-chakra-ui' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-chakra-ui with-chakra-ui-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js App with Orbit-components using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application bootstrapped with the Orbit-components example. It utilizes the create next-app tool provided by Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-orbit-components with-orbit-components-app\n```\n\n----------------------------------------\n\nTITLE: Defining Function c2_3 and Calling c2_1 in JavaScript\nDESCRIPTION: This snippet captures the function `c2_3` which recursively refers to `c2_1`, creating a potential cycle and increasing the complexity of function interaction.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction c2_3() {\n    return c2_1();\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cache After Server Function Updates with JavaScript\nDESCRIPTION: Demonstrates revalidating the Next.js cache after data updates in a JavaScript Server Function. Uses revalidatePath to refresh cached data on the posts path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(formData) {\n  'use server'\n  // Update data\n  // ...\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Icon with Content Type Configuration\nDESCRIPTION: Shows the HTML head output generated by Next.js when an icon has content type metadata configured. The type attribute reflects the MIME type specified in the contentType export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/png\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the with-cookies-next example.  It initializes a new project directory named 'with-cookies-next-app' with the specified example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-cookies-next with-cookies-next-app\n```\n\n----------------------------------------\n\nTITLE: Using onLoad Callback with Next.js Image Component\nDESCRIPTION: Example of using the onLoad callback with Next.js Image component. This callback is triggered once the image is completely loaded and the placeholder is removed, providing access to the event object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Image onLoad={(e) => console.log(e.target.naturalWidth)} />\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build Commands\nDESCRIPTION: Commands needed to properly build and export a Next.js application. A production build must be created with 'next build' before running 'next export', or use 'next dev' for development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-export-no-build-id.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnext export\n```\n\nLANGUAGE: bash\nCODE:\n```\nnext build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnext dev\n```\n\n----------------------------------------\n\nTITLE: Spawning Node Child Process with Unknown Arguments\nDESCRIPTION: Synchronous child process spawn using unspecified/unknown arguments, which could pose security and predictability risks\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1001__ import(FreeVar(Math)[__quo__ra-759cc1.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchild_process.spawnSync(\"node\", [unknown, unknown]);\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Radix UI using Yarn\nDESCRIPTION: This command creates a new Next.js application using the radix-ui example template. It utilizes yarn to execute create next-app with the specified example and project name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example radix-ui radix-ui-app\n```\n\n----------------------------------------\n\nTITLE: Run Seed Script\nDESCRIPTION: Executes the seed script to populate the database with initial data (Product and Category data).  The available package managers are npm, yarn, and pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run seed\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn seed\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm seed\n```\n\n----------------------------------------\n\nTITLE: Exporting SpanKind from Module Part\nDESCRIPTION: Exports the SpanKind enum from another module part, which defines different types of spans in the tracing system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h as SpanKind } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nexport { SpanKind };\n\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version for Partial Prerendering Preview\nDESCRIPTION: To use the experimental Partial Prerendering Preview feature, you need to install the latest canary version of Next.js. This command installs the canary version using npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/ppr-preview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@canary\n```\n\n----------------------------------------\n\nTITLE: Importing React (JavaScript)\nDESCRIPTION: This module imports the React library. It serves as a foundational dependency for other modules that utilize React components and functionalities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react';\n\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: These commands install the necessary dependencies for the Next.js project. They illustrate the use of `yarn`, `npm`, and `pnpm` package managers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n# or\nnpm install\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Assigning a Constant Value to x in Javascript\nDESCRIPTION: This snippet assigns the constant value 100 to the variable x, overwriting its previous value. It's a direct assignment with a literal value.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nx = 100;\n```\n\n----------------------------------------\n\nTITLE: Configuration Pattern for Next.js Image Loader\nDESCRIPTION: Example showing the configuration pattern needed in next.config.js when using custom image loaders. The loader configuration must be paired with a corresponding loader prop in the Image component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-missing-loader.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  images: {\n    loader: 'custom'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in NextResponse - JavaScript\nDESCRIPTION: Generates a response with a JSON body, including an HTTP status code. This functionality is relevant for handling API errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Chakra UI using Yarn\nDESCRIPTION: This command utilizes Yarn to create a new Next.js application with Chakra UI, named 'with-chakra-ui-app'. It uses the 'with-chakra-ui' example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-chakra-ui with-chakra-ui-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with reactstrap using yarn\nDESCRIPTION: This command uses yarn to create a new Next.js application using the with-reactstrap example. It sets up a new project with the necessary dependencies for reactstrap integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-reactstrap with-reactstrap-app\n```\n\n----------------------------------------\n\nTITLE: Defining Regenerator Runtime Globally in ECMAScript 2015\nDESCRIPTION: This snippet demonstrates how to define 'regeneratorRuntime' globally in an ECMAScript 2015 environment. Importing 'regenerator-runtime/runtime' ensures that the runtime functionality is available throughout the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ECMAScript 2015\nimport \"regenerator-runtime/runtime\";\n```\n\n----------------------------------------\n\nTITLE: Running Next.js with WebAssembly Instead of Native Addons\nDESCRIPTION: Command to run Next.js while forcing it to use the WebAssembly binary instead of native Node.js addons. This is useful for testing the WASM build.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='--no-addons'\n```\n\n----------------------------------------\n\nTITLE: Problematic Page Export in Next.js\nDESCRIPTION: Example showing a page export that the codemod cannot properly analyze for params/searchParams usage\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// the codemod cannot find the actual Page component so the Page may still have remaining\n// synchronous access to params and searchParams\n\n// @next-codemod-error\nexport * from '.../some-file'\n```\n\n----------------------------------------\n\nTITLE: Understanding Next.js Favicon HTML Output\nDESCRIPTION: Shows the HTML head output generated by Next.js when using the favicon.ico file convention. The favicon is rendered as a link element with appropriate attributes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the active-class-name example. It initializes the project in a directory named active-class-name-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example active-class-name active-class-name-app\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting parseStackTrace Function\nDESCRIPTION: Imports the parse function from 'stacktrace-parser' and re-exports it as 'parseStackTrace'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { parse as parseStackTrace } from \"../compiled/stacktrace-parser\";\nexport { parseStackTrace as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Installing XState Inspect\nDESCRIPTION: This command installs the @xstate/inspect package, which provides debugging and visualization tools for XState. It's installed using Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode using pnpm\nDESCRIPTION: These commands start the Next.js development server. It can be run using npm, yarn, or pnpm. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-next-page-transitions example. It leverages Yarn's create command to initialize the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-next-page-transitions with-next-page-transitions-app\n```\n\n----------------------------------------\n\nTITLE: Seeding the database - Bash\nDESCRIPTION: This command seeds the EdgeDB database. It executes the `seed.ts` TypeScript file using `ts-node`.  It requires `ts-node` to be installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npx ts-node seed.ts\n```\n\n----------------------------------------\n\nTITLE: Using Icons in MDX Documentation\nDESCRIPTION: This snippet showcases the usage of custom icons like `<Check />` and `<Cross />` in MDX documentation, enhancing the visual representation of the content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<Check size={18} />\n<Cross size={18} />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with ESLint using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-eslint-app' with ESLint pre-configured. It uses the 'with-eslint' example from the create-next-app tool.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-eslint with-eslint-app\n```\n\n----------------------------------------\n\nTITLE: Soft Navigation Implementation in Next.js\nDESCRIPTION: This snippet describes the implementation of soft navigation in Next.js which allows for maintaining client-side state and preventing full page reloads between navigations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst linkClickHandler = () => {\n  // Logic to handle soft navigation\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Object with Variable in Javascript\nDESCRIPTION: This code exports a constant `b` as an object containing `shared` and a string. This is similar to the previous export, using a different variable and string.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const b = {\n    shared,\n    b: \"bbbbbbbbbbb\"\n};\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in NextResponse - TypeScript\nDESCRIPTION: Generates a response with a JSON body, along with an HTTP status code. Useful for error handling in API routes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File\nDESCRIPTION: This command copies the example environment variable file (.env.local.example) to a local environment file (.env.local).  This allows for local configuration without affecting the example file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Generating VAPID keys using web-push\nDESCRIPTION: This command generates VAPID keys using the web-push CLI.  These keys are required for secure push notifications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nweb-push generate-vapid-keys\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 1 Implementation\nDESCRIPTION: A simple module that imports the 'module' dependency. This part serves as a basic dependency import without defining or exporting any variables or functions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"module\";\n```\n\n----------------------------------------\n\nTITLE: Updating React Packages to Latest Version using bun\nDESCRIPTION: This command updates the React and React DOM packages to the latest versions using bun. It provides an alternative using the bun package manager to update React and React DOM.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Importing createConnection from Node.js net Module\nDESCRIPTION: Imports the createConnection function from the Node.js 'net' module and re-exports it as 'a'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { createConnection } from \"node:net\";\nexport { createConnection as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Icon with Size Configuration\nDESCRIPTION: Shows the HTML head output generated by Next.js when an icon has size metadata configured. The sizes attribute reflects the dimensions specified in the size export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" sizes=\"32x32\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Client Component Loader Components\nDESCRIPTION: Module that exports client component loader related functions and utilities using Turbopack module system\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport { wrapClientComponentLoader } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export wrapClientComponentLoader\"\n};\nexport { getClientComponentLoaderMetrics } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getClientComponentLoaderMetrics\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with ESLint using yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application named 'with-eslint-app' with ESLint pre-configured. It uses the 'with-eslint' example from the create-next-app tool.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-eslint with-eslint-app\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperTokens with Next.js using create-supertokens-app (PNPM)\nDESCRIPTION: Command to create a Next.js application with SuperTokens authentication using the official SuperTokens CLI tool with PNPM, allowing further customization during setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm create-supertokens-app@latest --frontend=next\n```\n\n----------------------------------------\n\nTITLE: Correct Token Caching Implementation in Next.js\nDESCRIPTION: Improved implementation where random UUID generation is moved inside the cached function scope.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getCachedDate(token: string) {\n  \"use cache\"\n  const token = crypto.getRandomUUID()\n  return db.query(token, ...)\n}\n\nexport default async function Page() {\n  const data = await getCachedData();\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Constant from Variable - JavaScript\nDESCRIPTION: This snippet declares a constant 'foo' initialized with the value of 'foobar', and then exports it. This provides access to 'foo' outside the module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = foobar;\n\n```\n\n----------------------------------------\n\nTITLE: Initialize Postpone Check\nDESCRIPTION: Checks if React.unstable_postpone function is available\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasPostpone = typeof React.unstable_postpone === 'function';\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using pnpm with Markdoc example\nDESCRIPTION: This command initializes a new Next.js application named 'markdoc-app' using the Markdoc example from the create-next-app tool. It leverages pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example markdoc markdoc-app\n```\n\n----------------------------------------\n\nTITLE: Installing web-push globally using npm\nDESCRIPTION: This command installs the web-push package globally using npm, which is required for generating VAPID keys.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g web-push\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application from Public GitHub Repository\nDESCRIPTION: Shows how to create a Next.js project using an example from any public GitHub repository by providing the full repository URL.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example \"https://github.com/.../\" [your-project-name]\n```\n\n----------------------------------------\n\nTITLE: Pinterest Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the Pinterest metadata configuration. It includes a `<meta>` tag for Pinterest Rich Pins.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_63\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"pinterest-rich-pin\" content=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Packages\nDESCRIPTION: This command installs Tailwind CSS, the Tailwind CSS PostCSS plugin, and PostCSS as development dependencies. These packages are required to use Tailwind CSS in a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install -D tailwindcss @tailwindcss/postcss postcss\"\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Mantine using npx\nDESCRIPTION: This command uses npx to create a new Next.js application pre-configured with the Mantine example. It leverages the create-next-app tool to scaffold the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mantine with-mantine-app\n```\n\n----------------------------------------\n\nTITLE: Mermaid Graph for Phase 1 Dependencies\nDESCRIPTION: Depicts the structure of item relationships and dependencies in Phase 1 using Mermaid language. Item3 relates to the export of RouteKind.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item3[\"export RouteKind\"];\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js DynamicIO in JavaScript\nDESCRIPTION: Sets up the next.config.js file to enable dynamicIO, which is required to leverage cache management features using cacheTag in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  experimental: {\n    dynamicIO: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Exporting a Combined Constant from Variables\nDESCRIPTION: This snippet exports the constant 'CHIMERA', which is the concatenation of the constants 'cat' and 'dog'. It demonstrates the ability to export computed values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const CHIMERA = cat + dog;\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Grid System\nDESCRIPTION: Imports required dependencies including style utilities, composition helpers, spacing functions and breakpoint handlers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport style from './style';\nimport compose from './compose';\nimport { createUnaryUnit, getValue } from './spacing';\nimport { handleBreakpoints } from './breakpoints';\nimport responsivePropType from './responsivePropType';\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version via npm\nDESCRIPTION: This snippet provides the command to install the canary version of Next.js using npm, enabling users to test the latest features and bug fixes before they are released as stable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/opening-an-issue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@canary\n```\n\n----------------------------------------\n\nTITLE: Static Generation without Data in Next.js\nDESCRIPTION: An example of a Next.js page using Static Generation without fetching any external data. This page will be pre-rendered at build time as a single HTML file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction About() {\n  return <div>About</div>\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Request-time Operations with Next.js Connection API\nDESCRIPTION: Shows how to properly handle request-time operations using the Next.js connection API and Suspense for loading states.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const currentTime = Date.now()\n  if (currentTime > someTriggerDate) {\n    return <SpecialBanner />\n  } else {\n    return <NormalBanner />\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { connection } from 'next/server'\n\nasync function BannerSkeleton() {\n  ...\n}\n\nexport default async function Page() {\n  return <Suspense fallback={<BannerSkeleton />}>\n    <DynamicBanner />\n  </Suspense>\n}\n\nasync function DynamicBanner() {\n  await connection();\n  const currentTime = Date.now();\n  if (currentTime > someTriggerDate) {\n    return <SpecialBanner />\n  } else {\n    return <NormalBanner />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing next-rspack using yarn\nDESCRIPTION: This snippet provides the command to install the next-rspack package using yarn, an alternative method to npm for installing dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add next-rspack\n```\n\n----------------------------------------\n\nTITLE: Module Entry Point Declaration\nDESCRIPTION: This snippet represents a module entry point configuration that includes export references for the 'effect' function and 'effects' array, along with a promise resolution to ensure all asynchronous calls are completed before the module evaluation is finalized.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Promise.resolve();\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Using PagesOnly Component in Markdown\nDESCRIPTION: A comment demonstrating how to use the PagesOnly component to add content specific to the Pages Router in shared documentation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Route Source in JavaScript\nDESCRIPTION: This code snippet demonstrates how to correctly format a custom route's source property in JavaScript using regex. It changes the format of a negative lookahead regex condition to conform to path-to-regexp's required syntax.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-route-source.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"source\": \"/feedback/((?!general).*)\",\\n  \"destination\": \"/feedback/general\"}\n```\n\n----------------------------------------\n\nTITLE: Migrating next/head Usage\nDESCRIPTION: Examples showing how to migrate from next/head component to the new built-in SEO support in the app directory\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'next/head'\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My Page Title',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Third-Party Components as Client Components\nDESCRIPTION: Example showing how to wrap a third-party component that uses client-side features in a custom Client Component to make it usable in Server Components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { Carousel } from 'acme-carousel'\n\nexport default Carousel\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { Carousel } from 'acme-carousel'\n\nexport default Carousel\n```\n\n----------------------------------------\n\nTITLE: Installing CSP Example with PNPM\nDESCRIPTION: Creates a new Next.js application with strict CSP implementation using pnpm create next-app command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-strict-csp with-strict-csp-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using npx\nDESCRIPTION: This command uses npx to create a new Next.js application named 'with-mocha-app' based on the 'with-mocha' example. It initializes a project with pre-configured Mocha testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mocha with-mocha-app\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles in Next.js\nDESCRIPTION: This CSS snippet defines global styles for the body element, including font family, padding, max-width, and margin. It's intended to be used as a shared stylesheet for all pages in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-styled-jsx-in-document.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mocha tests with Yarn\nDESCRIPTION: This command executes the Mocha test suite using Yarn.  It assumes a 'test' script is defined in the `package.json` file to run the tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Component\nDESCRIPTION: Client-side error boundary component for handling uncaught exceptions with reset functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Allow All Crawlers Access\nDESCRIPTION: This robots.txt configuration instructs all user-agents to allow crawling of the entire website.  This means search engines and other bots are permitted to index all content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/app-dir-export/app/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Copying .env.local.example to .env.local\nDESCRIPTION: This command copies the example environment variable file to a local environment file.  This allows users to define local environment variables for development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app using Yarn with Markdoc example\nDESCRIPTION: This command initializes a new Next.js application named 'markdoc-app' using the Markdoc example from the create-next-app tool. It leverages Yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example markdoc markdoc-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Parent Component with Cache Directive\nDESCRIPTION: Demonstrates a parent component using the 'use cache' directive with a days-long cache lifecycle\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Parent component\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\nimport { ChildComponent } from './child'\n\nexport async function ParentComponent() {\n  'use cache'\n  cacheLife('days')\n\n  return (\n    <div>\n      <ChildComponent />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Object with Random Value and Side Effects\nDESCRIPTION: Generates a shared object containing a random number and triggers a side effect during object creation\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst shared = {\n    random,\n    effect: order.push(\"b\")\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Next.js Route Handlers\nDESCRIPTION: Example of implementing redirects in a Route Handler using the 'redirect' function from next/navigation. This demonstrates how to perform redirects in both TypeScript and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  redirect('https://nextjs.org/')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  redirect('https://nextjs.org/')\n}\n```\n\n----------------------------------------\n\nTITLE: File System Read with Unknown Path\nDESCRIPTION: Reading file synchronously with an unspecified file path, which could lead to potential file access errors or security vulnerabilities\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1001__ import(FreeVar(Math)[__quo__ra-759cc1.txt#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfs.readFileSync(unknown);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreadFileSync(unknown);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with NextRequest\nDESCRIPTION: This snippet demonstrates how to delete a cookie using the `delete` method of the `request.cookies` object in Next.js. It deletes the cookie named 'experiments'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns true for deleted, false is nothing is deleted\nrequest.cookies.delete('experiments')\n```\n\n----------------------------------------\n\nTITLE: Exporting Let Variable in JavaScript\nDESCRIPTION: This snippet declares a variable 'foobar' and exports it. The variable is initialized with the string 'foo', and it ensures 'foobar' is writable and exportable across modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport let foobar = \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: Synchronous Token Access Before Migration\nDESCRIPTION: Example of problematic synchronous token access code that needs to be migrated to async in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// This function is sync and the codemod won't make it async\n// because it doesn't know about every callsite that uses it.\nexport function getToken() {\n  // @next-codemod-error ...\n  return cookies().get('token')\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getToken } from '.../token-utils'\n\nexport default function Page() {\n  const token = getToken();\n  validateToken(token)\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing withamp-to-config Codemod in Next.js\nDESCRIPTION: This codemod transforms the withAmp HOC into Next.js 9 page configuration. It replaces the HOC usage with a config export for AMP pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod withamp-to-config\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Module\nDESCRIPTION: Imports the error handling module from the current directory using TurboPack's part system for module loading.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport \"./error\";\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Mantine using Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application configured with the Mantine example. It relies on the create next app utility to create project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mantine with-mantine-app\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Development Script Flag\nDESCRIPTION: Modifies the development script flag in Next.js to use the updated Turbopack flag. This change reflects the latest CLI syntax for enabling Turbopack during development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/change-turbo-to-turbopack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --turbopack\n```\n\n----------------------------------------\n\nTITLE: Using cacheTag in Next.js with JavaScript\nDESCRIPTION: Illustrates the application of cacheTag in a JavaScript environment. It tags the cache entry with 'my-data' in the getData async function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_cacheTag as cacheTag } from 'next/cache'\n\nexport async function getData() {\n  'use cache'\n  cacheTag('my-data')\n  const data = await fetch('/api/data')\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring basePath in Next.js Configuration\nDESCRIPTION: Set the base path for the entire Next.js application by modifying the next.config.js file. This allows deployment under a specific sub-path like '/docs'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting getProperError Function\nDESCRIPTION: Imports the getProperError function from the 'error' module and re-exports it.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { getProperError } from \"./error\";\nexport { getProperError as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Grafbase Example using npm\nDESCRIPTION: This command initializes a new Next.js application using the 'with-grafbase' example. It uses npm to create a project named 'with-grafbase-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-grafbase with-grafbase-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Test Setup with E2E Utilities\nDESCRIPTION: Sets up a test environment for Next.js using e2e-utils, configuring test files and test suite initialization\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTestSetup } from 'e2e-utils'\n\ndescribe('{{name}}', () => {\n  const { next } = nextTestSetup({\n    files: __dirname,\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Mux Video Example\nDESCRIPTION: Command-line instructions for creating a new Next.js project using the Mux Video example template with various package managers\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-mux-video with-mux-video-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-mux-video with-mux-video-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mux-video with-mux-video-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example with-mux-video with-mux-video-app\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Route Handler in Next.js\nDESCRIPTION: Basic example of creating a GET route handler in TypeScript and JavaScript. This demonstrates the minimal setup required for handling GET requests in a Next.js app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {}\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc for Type Safety in JavaScript\nDESCRIPTION: This code snippet shows how to add type safety to a viewport object in JavaScript using JSDoc syntax for defining the type.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import(\"next\").Viewport} */\nexport const viewport = {\n  themeColor: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 4\nDESCRIPTION: This code snippet represents part 4 of a JavaScript module. It exports `b` and `a` using a turbopack variable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport { b } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export b\"\n};\nexport { a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export a\"\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety for Viewport Object in TypeScript\nDESCRIPTION: This snippet shows how to add type safety to a viewport object in TypeScript by importing the Viewport type from Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticate PlanetScale CLI\nDESCRIPTION: Authenticates the PlanetScale CLI to allow interaction with your PlanetScale account. This step is a prerequisite for creating and managing databases and passwords.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npscale auth login\n```\n\n----------------------------------------\n\nTITLE: Fill Pool Implementation\nDESCRIPTION: Implements buffer pool management for efficient random byte generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet fillPool = (bytes)=>{\n    if (!pool || pool.length < bytes) {\n        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\n        crypto.randomFillSync(pool);\n        poolOffset = 0;\n    } else if (poolOffset + bytes > pool.length) {\n        crypto.randomFillSync(pool);\n        poolOffset = 0;\n    }\n    poolOffset += bytes;\n};\n```\n\n----------------------------------------\n\nTITLE: Download GraphQL schema (Yarn)\nDESCRIPTION: This command uses Yarn to execute the 'schema' script defined in the project's package.json. The purpose is to download the schema introspection data from the configured Relay endpoint. This assumes that 'schema' script is properly configured to fetch the schema.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn schema\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version\nDESCRIPTION: Updates your Next.js installation to the canary version, which includes the latest experimental features that are not yet in a stable release.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-upgrading.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@canary\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies - Bash\nDESCRIPTION: This command installs the npm dependencies for the project. It uses the `npm install` command to install all the dependencies listed in the `package.json` file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$  npm install\n```\n\n----------------------------------------\n\nTITLE: Defining Image Content Type in TypeScript\nDESCRIPTION: Specifies the content type for images in TypeScript to identify the image format as PNG, ensuring correct handling across platforms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const contentType = 'image/png'\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with XState\nDESCRIPTION: This command bootstraps a new Next.js application using the with-xstate example. It utilizes create-next-app with npm to initialize the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-xstate with-xstate-app\n```\n\n----------------------------------------\n\nTITLE: Initializing useSelectedLayoutSegments Client Component in TypeScript\nDESCRIPTION: A TypeScript implementation of a client component using useSelectedLayoutSegments to display active route segments as a list of list items.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegments } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n\n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Cookie Value in NextResponse - TypeScript\nDESCRIPTION: Fetches the value of a specified cookie name from the response. If the cookie is not found, it returns undefined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// { name: 'show-banner', value: 'false', Path: '/home' }\nresponse.cookies.get('show-banner')\n```\n\n----------------------------------------\n\nTITLE: Initializing useSelectedLayoutSegments Client Component in JavaScript\nDESCRIPTION: A JavaScript implementation of a client component using useSelectedLayoutSegments to display active route segments as a list of list items.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegments } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n\n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Intercepted Login Modal Component\nDESCRIPTION: Implements an intercepted login route that wraps the Login component inside a Modal for inline rendering\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Modal } from '@\\/app\\/ui\\/modal'\nimport { Login } from '@\\/app\\/ui\\/login'\n\nexport default function Page() {\n  return (\n    <Modal>\n      <Login \\/>\n    </Modal>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from '@\\/app\\/ui\\/modal'\nimport { Login } from '@\\/app\\/ui\\/login'\n\nexport default function Page() {\n  return (\n    <Modal>\n      <Login \\/>\n    </Modal>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: These commands start the Next.js development server using npm, yarn or pnpm.  It allows local development and testing of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Mantine using pnpm\nDESCRIPTION: This command creates a Next.js app with the Mantine example using pnpm. It employs the create-next-app tool to generate the project structure and files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-mantine with-mantine-app\n```\n\n----------------------------------------\n\nTITLE: Installing next-rspack using npm\nDESCRIPTION: This snippet provides the command to install the next-rspack package using npm, which is necessary for replacing webpack with Rspack in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install next-rspack\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies by Setting Empty Value\nDESCRIPTION: Shows how to delete a cookie by setting its value to an empty string using the cookies().set() method in Next.js server actions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function delete(data) {\n  (await cookies()).set('name', '')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function delete(data) {\n  (await cookies()).set('name', '')\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing to Order Array Again - JavaScript\nDESCRIPTION: This statement pushes the string 'c' into the 'order' array, illustrating another update to the shared state during execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\norder.push(\"c\");\n```\n\n----------------------------------------\n\nTITLE: Analyzing Export Star Limitation in CommonJS\nDESCRIPTION: Warning about using export * with a CommonJS module that has runtime-only exports, suggesting manual export listing or ESM rewrite\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-script/issues/unexpected export __star__-13c450.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from \"./exported.cjs\"\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using Yarn\nDESCRIPTION: This command installs the project's dependencies using Yarn. It is a prerequisite for running the development server and other project-related tasks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building Next.js Project for Testing\nDESCRIPTION: Command to build the Next.js project before running tests. This step is necessary to ensure all components are compiled and ready for testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Altering Variable Value in JavaScript\nDESCRIPTION: This code changes the 'foobar' variable by appending the value of 'bar' to it. It reads current values of 'bar' and 'foobar' and modifies 'foobar'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfoobar += bar;\n\n```\n\n----------------------------------------\n\nTITLE: Running Production Tests for App Router\nDESCRIPTION: Command to run tests in the 'test/e2e/app-dir/app' test suite in production mode, which uses 'next build' and 'next start'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm test-start test/e2e/app-dir/app/\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with urql example (yarn)\nDESCRIPTION: This command uses yarn to create a new Next.js application named 'with-urql-app' based on the 'with-urql' example. It uses the create next-app package to generate the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-urql with-urql-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js development server\nDESCRIPTION: These commands install dependencies and start the Next.js development server. The first command uses npm, while the second uses yarn to install dependencies and then runs the development server. These commands assume Node.js and either npm or yarn are installed and configured.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect Script Usage in Head - JSX\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the `next/script` component inside the `next/head` component. It imports `Script` and `Head` from `next/script` and `next/head` respectively, and attempts to render the `Script` component within the `Head` component. This structure will cause an error in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-component-in-head.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\nimport Head from 'next/head'\n\nexport default function Index() {\n  return (\n    <Head>\n      <title>Next.js</title>\n      <Script src=\"/my-script.js\" />\n    </Head>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Convex Example (pnpm)\nDESCRIPTION: This command utilizes pnpm to create a new Next.js application based on the Convex example. It configures the project for Convex integration, and necessitates pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example convex convex-app\n```\n\n----------------------------------------\n\nTITLE: Corrected Multi-match Route Configuration\nDESCRIPTION: Demonstrates the correct way to configure a multi-match route by adding the * to the destination parameter\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-multi-match.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  source: '/:path*',\n  destination: '/another/:path*'\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Next.js Stable Release\nDESCRIPTION: Command for repository maintainers to publish a new stable version of Next.js. This command prompts for the version type (major, minor, or patch) following semantic versioning principles.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm publish-stable\n```\n\n----------------------------------------\n\nTITLE: Contentful Draft Mode API Route URL\nDESCRIPTION: This code snippet shows the URL structure for the Contentful draft mode API route, including the secret and slug parameters. The CONTENTFUL_PREVIEW_SECRET is used to authorize the request, and the slug identifies the content to preview.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"http://localhost:3000/api/draft?secret=<CONTENTFUL_PREVIEW_SECRET>&slug={entry.fields.slug}\"\n```\n\n----------------------------------------\n\nTITLE: Synchronous Params Access in Next.js Component (Incorrect Implementation)\nDESCRIPTION: Example showing problematic synchronous access of params and searchParams in a Next.js component that will be exported as a Page component\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// This component ends up being the Page component even though it is defined outside of\n// page.js due to how it is reexported in page.js\nexport default function ComponentThatWillBeExportedAsPage({ params, searchParams }) {\n  const { slug } = params;\n  const { page } = searchParams\n  return <RenderList slug={slug} page={page}>\n}\n```\n\n----------------------------------------\n\nTITLE: Tigris Schema Definition File - TypeScript\nDESCRIPTION: This snippet describes the Tigris schema definition for the to-do list app. The schema is defined in TypeScript and includes a single collection, `todoItems`, for storing to-do items. This structure is important for data handling and entity representation in the app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// db/models/todoItems.ts\n// The to-do list app has a single collection `todoItems` that stores the to-do items. The Collection gets automatically provisioned by the setup script.\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with yarn\nDESCRIPTION: This command creates a new Next.js application using the `with-sitemap` example. It leverages `create-next-app` via yarn. The created app will be named `with-sitemap-app`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-sitemap with-sitemap-app\n```\n\n----------------------------------------\n\nTITLE: Next.js Home Component (pages directory)\nDESCRIPTION: Defines a basic Next.js home component using the `pages` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/about` page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter in Next.js\nDESCRIPTION: Markdown frontmatter block that defines the page title using YAML syntax. This is commonly used in Next.js pages to specify metadata.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/app/posts/hello-world.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello World\n---\n```\n\n----------------------------------------\n\nTITLE: Creating and Relating Movie and Person Nodes in Neo4j (Cypher)\nDESCRIPTION: The snippet includes several Neo4j Cypher queries that create nodes representing movies and persons, and it defines various relationships between them such as ACTED_IN, DIRECTED, PRODUCED, and WROTE. Each node is created using the CREATE statement, specifying properties like movie title, release year, or person's birth date. The snippet establishes many-to-many relationships showing actors' roles in movies or directors' involvement in film creation. The code operates under the assumption that a Neo4j database environment is set up and the Cypher language is supported.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\n(TomH)-[:ACTED_IN {roles:['Joe Fox']}]->(YouveGotMail),\n(MegR)-[:ACTED_IN {roles:['Kathleen Kelly']}]->(YouveGotMail),\n(GregK)-[:ACTED_IN {roles:['Frank Navasky']}]->(YouveGotMail),\n(ParkerP)-[:ACTED_IN {roles:['Patricia Eden']}]->(YouveGotMail),\n(DaveC)-[:ACTED_IN {roles:['Kevin Jackson']}]->(YouveGotMail),\n(SteveZ)-[:ACTED_IN {roles:['George Pappas']}]->(YouveGotMail),\n(NoraE)-[:DIRECTED]->(YouveGotMail)\n\nCREATE (SleeplessInSeattle:Movie {title:'Sleepless in Seattle', released:1993, tagline:'What if someone you never met, someone you never saw, someone you never knew was the only someone for you?'})\nCREATE (RitaW:Person {name:'Rita Wilson', born:1956})\nCREATE (BillPull:Person {name:'Bill Pullman', born:1953})\nCREATE (VictorG:Person {name:'Victor Garber', born:1949})\nCREATE (RosieO:Person {name:\"Rosie O'Donnell\", born:1962})\nCREATE\n(TomH)-[:ACTED_IN {roles:['Sam Baldwin']}]->(SleeplessInSeattle),\n(MegR)-[:ACTED_IN {roles:['Annie Reed']}]->(SleeplessInSeattle),\n(RitaW)-[:ACTED_IN {roles:['Suzy']}]->(SleeplessInSeattle),\n(BillPull)-[:ACTED_IN {roles:['Walter']}]->(SleeplessInSeattle),\n(VictorG)-[:ACTED_IN {roles:['Greg']}]->(SleeplessInSeattle),\n(RosieO)-[:ACTED_IN {roles:['Becky']}]->(SleeplessInSeattle),\n(NoraE)-[:DIRECTED]->(SleeplessInSeattle)\n\nCREATE (JoeVersustheVolcano:Movie {title:'Joe Versus the Volcano', released:1990, tagline:'A story of love, lava and burning desire.'})\nCREATE (JohnS:Person {name:'John Patrick Stanley', born:1950})\nCREATE (Nathan:Person {name:'Nathan Lane', born:1956})\nCREATE\n(TomH)-[:ACTED_IN {roles:['Joe Banks']}]->(JoeVersustheVolcano),\n(MegR)-[:ACTED_IN {roles:['DeDe', 'Angelica Graynamore', 'Patricia Graynamore']}]->(JoeVersustheVolcano),\n(Nathan)-[:ACTED_IN {roles:['Baw']}]->(JoeVersustheVolcano),\n(JohnS)-[:DIRECTED]->(JoeVersustheVolcano)\n\nCREATE (WhenHarryMetSally:Movie {title:'When Harry Met Sally', released:1998, tagline:'Can two friends sleep together and still love each other in the morning?'})\nCREATE (BillyC:Person {name:'Billy Crystal', born:1948})\nCREATE (CarrieF:Person {name:'Carrie Fisher', born:1956})\nCREATE (BrunoK:Person {name:'Bruno Kirby', born:1949})\nCREATE\n(BillyC)-[:ACTED_IN {roles:['Harry Burns']}]->(WhenHarryMetSally),\n(MegR)-[:ACTED_IN {roles:['Sally Albright']}]->(WhenHarryMetSally),\n(CarrieF)-[:ACTED_IN {roles:['Marie']}]->(WhenHarryMetSally),\n(BrunoK)-[:ACTED_IN {roles:['Jess']}]->(WhenHarryMetSally),\n(RobR)-[:DIRECTED]->(WhenHarryMetSally),\n(RobR)-[:PRODUCED]->(WhenHarryMetSally),\n(NoraE)-[:PRODUCED]->(WhenHarryMetSally),\n(NoraE)-[:WROTE]->(WhenHarryMetSally)\n\nCREATE (ThatThingYouDo:Movie {title:'That Thing You Do', released:1996, tagline:'In every life there comes a time when that thing you dream becomes that thing you do'})\nCREATE (LivT:Person {name:'Liv Tyler', born:1977})\nCREATE\n(TomH)-[:ACTED_IN {roles:['Mr. White']}]->(ThatThingYouDo),\n(LivT)-[:ACTED_IN {roles:['Faye Dolan']}]->(ThatThingYouDo),\n(Charlize)-[:ACTED_IN {roles:['Tina']}]->(ThatThingYouDo),\n(TomH)-[:DIRECTED]->(ThatThingYouDo)\n\nCREATE (TheReplacements:Movie {title:'The Replacements', released:2000, tagline:'Pain heals, Chicks dig scars... Glory lasts forever'})\nCREATE (Brooke:Person {name:'Brooke Langton', born:1970})\nCREATE (Gene:Person {name:'Gene Hackman', born:1930})\nCREATE (Orlando:Person {name:'Orlando Jones', born:1968})\nCREATE (Howard:Person {name:'Howard Deutch', born:1950})\nCREATE\n(Keanu)-[:ACTED_IN {roles:['Shane Falco']}]->(TheReplacements),\n(Brooke)-[:ACTED_IN {roles:['Annabelle Farrell']}]->(TheReplacements),\n(Gene)-[:ACTED_IN {roles:['Jimmy McGinty']}]->(TheReplacements),\n(Orlando)-[:ACTED_IN {roles:['Clifford Franklin']}]->(TheReplacements),\n(Howard)-[:DIRECTED]->(TheReplacements)\n\nCREATE (RescueDawn:Movie {title:'RescueDawn', released:2006, tagline:\"Based on the extraordinary true story of one man's fight for freedom\"})\nCREATE (ChristianB:Person {name:'Christian Bale', born:1974})\nCREATE (ZachG:Person {name:'Zach Grenier', born:1954})\nCREATE\n(MarshallB)-[:ACTED_IN {roles:['Admiral']}]->(RescueDawn),\n(ChristianB)-[:ACTED_IN {roles:['Dieter Dengler']}]->(RescueDawn),\n(ZachG)-[:ACTED_IN {roles:['Squad Leader']}]->(RescueDawn),\n(SteveZ)-[:ACTED_IN {roles:['Duane']}]->(RescueDawn),\n(WernerH)-[:DIRECTED]->(RescueDawn)\n\nCREATE (TheBirdcage:Movie {title:'The Birdcage', released:1996, tagline:'Come as you are'})\nCREATE (MikeN:Person {name:'Mike Nichols', born:1931})\nCREATE\n(Robin)-[:ACTED_IN {roles:['Armand Goldman']}]->(TheBirdcage),\n(Nathan)-[:ACTED_IN {roles:['Albert Goldman']}]->(TheBirdcage),\n(Gene)-[:ACTED_IN {roles:['Sen. Kevin Keeley']}]->(TheBirdcage),\n(MikeN)-[:DIRECTED]->(TheBirdcage)\n\nCREATE (Unforgiven:Movie {title:'Unforgiven', released:1992, tagline:\"It's a hell of a thing, killing a man\"})\nCREATE (RichardH:Person {name:'Richard Harris', born:1930})\nCREATE (ClintE:Person {name:'Clint Eastwood', born:1930})\nCREATE\n(RichardH)-[:ACTED_IN {roles:['English Bob']}]->(Unforgiven),\n(ClintE)-[:ACTED_IN {roles:['Bill Munny']}]->(Unforgiven),\n(Gene)-[:ACTED_IN {roles:['Little Bill Daggett']}]->(Unforgiven),\n(ClintE)-[:DIRECTED]->(Unforgiven)\n\nCREATE (JohnnyMnemonic:Movie {title:'Johnny Mnemonic', released:1995, tagline:'The hottest data on earth. In the coolest head in town'})\nCREATE (Takeshi:Person {name:'Takeshi Kitano', born:1947})\nCREATE (Dina:Person {name:'Dina Meyer', born:1968})\nCREATE (IceT:Person {name:'Ice-T', born:1958})\nCREATE (RobertL:Person {name:'Robert Longo', born:1953})\nCREATE\n(Keanu)-[:ACTED_IN {roles:['Johnny Mnemonic']}]->(JohnnyMnemonic),\n(Takeshi)-[:ACTED_IN {roles:['Takahashi']}]->(JohnnyMnemonic),\n(Dina)-[:ACTED_IN {roles:['Jane']}]->(JohnnyMnemonic),\n(IceT)-[:ACTED_IN {roles:['J-Bone']}]->(JohnnyMnemonic),\n(RobertL)-[:DIRECTED]->(JohnnyMnemonic)\n\nCREATE (CloudAtlas:Movie {title:'Cloud Atlas', released:2012, tagline:'Everything is connected'})\nCREATE (HalleB:Person {name:'Halle Berry', born:1966})\nCREATE (JimB:Person {name:'Jim Broadbent', born:1949})\nCREATE (TomT:Person {name:'Tom Tykwer', born:1965})\nCREATE (DavidMitchell:Person {name:'David Mitchell', born:1969})\nCREATE (StefanArndt:Person {name:'Stefan Arndt', born:1961})\nCREATE\n(TomH)-[:ACTED_IN {roles:['Zachry', 'Dr. Henry Goose', 'Isaac Sachs', 'Dermot Hoggins']}]->(CloudAtlas),\n(Hugo)-[:ACTED_IN {roles:['Bill Smoke', 'Haskell Moore', 'Tadeusz Kesselring', 'Nurse Noakes', 'Boardman Mephi', 'Old Georgie']}]->(CloudAtlas),\n(HalleB)-[:ACTED_IN {roles:['Luisa Rey', 'Jocasta Ayrs', 'Ovid', 'Meronym']}]->(CloudAtlas),\n(JimB)-[:ACTED_IN {roles:['Vyvyan Ayrs', 'Captain Molyneux', 'Timothy Cavendish']}]->(CloudAtlas),\n(TomT)-[:DIRECTED]->(CloudAtlas),\n(LillyW)-[:DIRECTED]->(CloudAtlas),\n(LanaW)-[:DIRECTED]->(CloudAtlas),\n(DavidMitchell)-[:WROTE]->(CloudAtlas),\n(StefanArndt)-[:PRODUCED]->(CloudAtlas)\n\nCREATE (TheDaVinciCode:Movie {title:'The Da Vinci Code', released:2006, tagline:'Break The Codes'})\nCREATE (IanM:Person {name:'Ian McKellen', born:1939})\nCREATE (AudreyT:Person {name:'Audrey Tautou', born:1976})\nCREATE (PaulB:Person {name:'Paul Bettany', born:1971})\nCREATE (RonH:Person {name:'Ron Howard', born:1954})\nCREATE\n(TomH)-[:ACTED_IN {roles:['Dr. Robert Langdon']}]->(TheDaVinciCode),\n(IanM)-[:ACTED_IN {roles:['Sir Leight Teabing']}]->(TheDaVinciCode),\n(AudreyT)-[:ACTED_IN {roles:['Sophie Neveu']}]->(TheDaVinciCode),\n(PaulB)-[:ACTED_IN {roles:['Silas']}]->(TheDaVinciCode),\n(RonH)-[:DIRECTED]->(TheDaVinciCode)\n\nCREATE (VforVendetta:Movie {title:'V for Vendetta', released:2006, tagline:'Freedom! Forever!'})\nCREATE (NatalieP:Person {name:'Natalie Portman', born:1981})\nCREATE (StephenR:Person {name:'Stephen Rea', born:1946})\nCREATE (JohnH:Person {name:'John Hurt', born:1940})\nCREATE (BenM:Person {name: 'Ben Miles', born:1967})\nCREATE\n(Hugo)-[:ACTED_IN {roles:['V']}]->(VforVendetta),\n(NatalieP)-[:ACTED_IN {roles:['Evey Hammond']}]->(VforVendetta),\n(StephenR)-[:ACTED_IN {roles:['Eric Finch']}]->(VforVendetta),\n(JohnH)-[:ACTED_IN {roles:['High Chancellor Adam Sutler']}]->(VforVendetta),\n(BenM)-[:ACTED_IN {roles:['Dascomb']}]->(VforVendetta),\n(JamesM)-[:DIRECTED]->(VforVendetta),\n(LillyW)-[:PRODUCED]->(VforVendetta),\n(LanaW)-[:PRODUCED]->(VforVendetta),\n(JoelS)-[:PRODUCED]->(VforVendetta),\n(LillyW)-[:WROTE]->(VforVendetta),\n(LanaW)-[:WROTE]->(VforVendetta)\n\nCREATE (SpeedRacer:Movie {title:'Speed Racer', released:2008, tagline:'Speed has no limits'})\nCREATE (EmileH:Person {name:'Emile Hirsch', born:1985})\nCREATE (JohnG:Person {name:'John Goodman', born:1960})\nCREATE (SusanS:Person {name:'Susan Sarandon', born:1946})\nCREATE (MatthewF:Person {name:'Matthew Fox', born:1966})\nCREATE (ChristinaR:Person {name:'Christina Ricci', born:1980})\nCREATE (Rain:Person {name:'Rain', born:1982})\nCREATE\n(EmileH)-[:ACTED_IN {roles:['Speed Racer']}]->(SpeedRacer),\n(JohnG)-[:ACTED_IN {roles:['Pops']}]->(SpeedRacer),\n(SusanS)-[:ACTED_IN {roles:['Mom']}]->(SpeedRacer),\n(MatthewF)-[:ACTED_IN {roles:['Racer X']}]->(SpeedRacer),\n(ChristinaR)-[:ACTED_IN {roles:['Trixie']}]->(SpeedRacer),\n(Rain)-[:ACTED_IN {roles:['Taejo Togokahn']}]->(SpeedRacer),\n(BenM)-[:ACTED_IN {roles:['Cass Jones']}]->(SpeedRacer),\n(LillyW)-[:DIRECTED]->(SpeedRacer),\n(LanaW)-[:DIRECTED]->(SpeedRacer),\n(LillyW)-[:WROTE]->(SpeedRacer),\n(LanaW)-[:WROTE]->(SpeedRacer),\n(JoelS)-[:PRODUCED]->(SpeedRacer)\n\nCREATE (NinjaAssassin:Movie {title:'Ninja Assassin', released:2009, tagline:'Prepare to enter a secret world of assassins'})\nCREATE (NaomieH:Person {name:'Naomie Harris'})\nCREATE\n(Rain)-[:ACTED_IN {roles:['Raizo']}]->(NinjaAssassin),\n(NaomieH)-[:ACTED_IN {roles:['Mika Coretti']}]->(NinjaAssassin),\n(RickY)-[:ACTED_IN {roles:['Takeshi']}]->(NinjaAssassin),\n(BenM)-[:ACTED_IN {roles:['Ryan Maslow']}]->(NinjaAssassin),\n(JamesM)-[:DIRECTED]->(NinjaAssassin),\n(LillyW)-[:PRODUCED]->(NinjaAssassin),\n(LanaW)-[:PRODUCED]->(NinjaAssassin),\n(JoelS)-[:PRODUCED]->(NinjaAssassin)\n\nCREATE (TheGreenMile:Movie {title:'The Green Mile', released:1999, tagline:\"Walk a mile you'll never forget.\"})\nCREATE (MichaelD:Person {name:'Michael Clarke Duncan', born:1957})\n```\n\n----------------------------------------\n\nTITLE: App Links Metadata Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section of the page based on the app links metadata configuration. It includes meta tags with `al:` properties for iOS, Android, and web.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"al:ios:url\" content=\"https://nextjs.org/ios\" />\n<meta property=\"al:ios:app_store_id\" content=\"app_store_id\" />\n<meta property=\"al:android:package\" content=\"com.example.android/package\" />\n<meta property=\"al:android:app_name\" content=\"app_name_android\" />\n<meta property=\"al:web:url\" content=\"https://nextjs.org/web\" />\n<meta property=\"al:web:should_fallback\" content=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Using next-rspack with next-compose-plugins\nDESCRIPTION: This snippet demonstrates how to use next-compose-plugins to integrate next-rspack alongside other plugins in a Next.js project. It showcases the modularity and ease of configuration when combining multiple plugins.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst withPlugins = require('next-compose-plugins')\nconst withRspack = require('next-rspack')\n\nmodule.exports = withPlugins([\n  [withRspack],\n  // your other plugins here\n])\n```\n\n----------------------------------------\n\nTITLE: Bottom-Up Dynamic Params Generation for Multiple Segments (TypeScript)\nDESCRIPTION: Generate static params for both category and product segments by fetching products data and mapping to route params\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n\nexport default function Page({\n  params,\n}: {\n  params: Promise<{ category: string; product: string }>\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting toNodeOutgoingHttpHeaders Function - JavaScript\nDESCRIPTION: This snippet imports and exports the toNodeOutgoingHttpHeaders function, transforming headers into a format compatible with Node.js. It facilitates the proper handling of headers in the server-side context of Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { toNodeOutgoingHttpHeaders } from '../utils';\nexport { toNodeOutgoingHttpHeaders as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Marking Dynamic Scope in Next.js Server-Side Rendering\nDESCRIPTION: Defines a function to mark the current scope as dynamic during server-side rendering, handling various scenarios such as static generation and prerendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport { getPathname } from '../../lib/url';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nimport { g as postponeWithTracking } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nfunction markCurrentScopeAsDynamic(store, expression) {\n    const pathname = getPathname(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        return;\n    } else if (store.dynamicShouldError) {\n        throw new StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (store.prerenderState) {\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\nexport { markCurrentScopeAsDynamic };\nexport { markCurrentScopeAsDynamic as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Multiplying Variable x by 2 in Javascript\nDESCRIPTION: This snippet multiplies the value of the variable 'x' by 2 using the multiplication assignment operator. This is another common arithmetic operation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nx *= 2;\n```\n\n----------------------------------------\n\nTITLE: Updating Link Component Usage\nDESCRIPTION: Example showing the difference between Next.js 12 and 13 Link component implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n\n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Production Module Parts\nDESCRIPTION: Generated production code showing the final module structure with Turbopack-specific optimizations\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/export-named/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as __TURBOPACK__reexport__cat__ } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nimport \"./lib\";\nexport { __TURBOPACK__reexport__cat__ as fakeCat };\nexport { };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { cat as __TURBOPACK__reexport__cat__ } from \"./lib\";\nexport { __TURBOPACK__reexport__cat__ as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { fakeCat } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export fakeCat\"\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import Example - JavaScript\nDESCRIPTION: Example showing how to import the SWR package, which needs to be installed via npm or yarn first.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWR from 'swr'\n```\n\n----------------------------------------\n\nTITLE: Assigning x + a + 5 to Variable x in Javascript\nDESCRIPTION: This snippet assigns the sum of 'x', 'a', and 5 to the variable 'x'. This combines variable access, addition, and assignment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nx = x + a + 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with HTTP2 Example using Yarn\nDESCRIPTION: This command sets up a new Next.js application with the HTTP2 example. Yarn must be installed as the package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-http2 with-http2-app\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler for Opt-in Mode (TypeScript)\nDESCRIPTION: Configuration in next.config.ts to set the React Compiler to 'annotation' compilation mode for opt-in usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    reactCompiler: {\n      compilationMode: 'annotation',\n    },\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Image Size in JavaScript\nDESCRIPTION: Defines the image size in JavaScript for Open Graph and Twitter images, specifying width and height to ensure consistent display dimensions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const size = { width: 1200, height: 630 }\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Constant Variable - JavaScript\nDESCRIPTION: This snippet declares a constant variable 'bar' initialized with the string value 'bar'. It serves internal purposes within the module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bar = \"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: BubbledError Type Check Utility\nDESCRIPTION: Implements a type guard function to check if an error is an instance of BubbledError, providing type safety for error handling.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { s as BubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nfunction isBubbledError(error) {\n    if (typeof error !== 'object' || error === null) return false;\n    return error instanceof BubbledError;\n}\nexport { isBubbledError as t } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Running Next.js development server\nDESCRIPTION: These commands install dependencies and then starts the Next.js development server.  It provides both npm and yarn alternatives.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Sharp Version in Next.js Project\nDESCRIPTION: This command updates the 'sharp' package to the latest version in your Next.js project, enabling AVIF support for image optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sharp@latest\n```\n\n----------------------------------------\n\nTITLE: Executing url-to-withrouter Codemod in Next.js\nDESCRIPTION: This codemod transforms the deprecated automatically injected url property on top-level pages to use withRouter and the router property it injects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod url-to-withrouter\n```\n\n----------------------------------------\n\nTITLE: Async Cookies API Usage in Next.js 15\nDESCRIPTION: Example showing both recommended async and temporary sync usage of the cookies API in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\n// Before\nconst cookieStore = cookies()\nconst token = cookieStore.get('token')\n\n// After\nconst cookieStore = await cookies()\nconst token = cookieStore.get('token')\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies, type UnsafeUnwrappedCookies } from 'next/headers'\n\n// Before\nconst cookieStore = cookies()\nconst token = cookieStore.get('token')\n\n// After\nconst cookieStore = cookies() as unknown as UnsafeUnwrappedCookies\n// will log a warning in dev\nconst token = cookieStore.get('token')\n```\n\n----------------------------------------\n\nTITLE: Development Module Parts in JavaScript\nDESCRIPTION: These snippets represent different parts of the module in development mode. They include imports, conditional execution, and exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { baz } from './module';\nimport './module';\nif (1 + 1 == 3) {\n    baz();\n}\nexport { };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { baz } from './module';\nexport { baz as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Function d1 in JavaScript\nDESCRIPTION: This snippet defines a function named `d1`, which does not take any parameters and has no implementation. It is a simple hoisted function declaration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction d1() {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable y and Assigning x Value in Javascript\nDESCRIPTION: This snippet declares a variable 'y' and assigns it the current value of variable 'x'. This demonstrates variable assignment and dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet y = x;\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS in Next.js\nDESCRIPTION: This command installs the necessary packages to use Tailwind CSS with Next.js, including tailwindcss and its PostCSS integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss @tailwindcss/postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Configuring PPR in next.config.ts\nDESCRIPTION: TypeScript configuration for enabling Partial Prerendering incrementally in Next.js by setting the PPR option to 'incremental' in next.config.ts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring PPR in next.config.js\nDESCRIPTION: JavaScript configuration for enabling Partial Prerendering incrementally in Next.js by setting the PPR option to 'incremental' in next.config.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Starting the application - Bash\nDESCRIPTION: This command starts the Next.js application in development mode. It uses the `yarn dev` command to start the development server, typically running on http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Generate Bundle Analysis Report\nDESCRIPTION: Generates a bundle analysis report by setting the `ANALYZE` environment variable to `true` during the build process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nANALYZE=true npm run build\n# or\nANALYZE=true yarn build\n# or\nANALYZE=true pnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Salesforce Commerce Cloud template using npm\nDESCRIPTION: Command to bootstrap a Next.js application with Salesforce Commerce Cloud integration using npx create-next-app with the with-sfcc example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-sfcc nextjs-sfcc-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with Yarn\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-portals example. It specifies the example and the application name.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-portals with-portals-app\n```\n\n----------------------------------------\n\nTITLE: Path Matching Patterns in Next.js Rewrites\nDESCRIPTION: Examples of different path matching patterns including basic parameter matching, wildcard matching, and regex matching\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n      },\n    ]\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*',\n      },\n    ]\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-blog/:post(\\\\d{1,})',\n        destination: '/blog/:post',\n      },\n    ]\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 3\nDESCRIPTION: This code snippet represents part 3 of a JavaScript module. It imports `a` as `e` from a previous module and exports it as `a`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nexport { a };\n```\n\n----------------------------------------\n\nTITLE: Exporting Complex Objects with Shared References\nDESCRIPTION: Creates and exports objects that reference the shared context, demonstrating module interconnectedness\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const a = {\n    shared,\n    a: \"aaaaaaaaaaa\"\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const b = {\n    shared,\n    b: \"bbbbbbbbbbb\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Metadata Exports\nDESCRIPTION: This snippet demonstrates how to export image metadata configuration for Open Graph and Twitter images in Next.js using TypeScript and JavaScript.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const alt = 'My images alt text'\n\nexport default function Image() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const alt = 'My images alt text'\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Function with Export in JavaScript\nDESCRIPTION: The 'external2' function appends a period to 'foobar'. This function is exportable, and this modification changes 'foobar' in place.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport function external2() {\n    foobar += \".\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Performance Tracking Variables\nDESCRIPTION: Declares variables for tracking client component loading performance metrics including start time, total load time, and count of loads.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet clientComponentLoadStart = 0;\nlet clientComponentLoadTimes = 0;\nlet clientComponentLoadCount = 0;\n```\n\n----------------------------------------\n\nTITLE: Importing ClientComponent in JavaScript\nDESCRIPTION: This code imports the ClientComponent from a relative path. It is intended to utilize client-side component functionalities in the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ClientComponent } from '../../ClientComponent';\n\n```\n\n----------------------------------------\n\nTITLE: Importing Upper Function - JavaScript\nDESCRIPTION: This snippet imports the 'upper' function from a specified module. It's required for string manipulation within the file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { upper } from \"module\";\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebAssembly Modules for Next.js\nDESCRIPTION: Command to copy built WebAssembly modules into node_modules for local testing. This needs to be run after building the WASM target.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scripts/setup-wasm.mjs\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Next.js Development\nDESCRIPTION: Command to install LLD (the LLVM linker) and Clang on Linux systems, which are required by rust-rocksdb dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install lld clang\n```\n\n----------------------------------------\n\nTITLE: Enabling React Compiler in Next.js Configuration (TypeScript)\nDESCRIPTION: Configuration to enable the React Compiler in next.config.ts file. This sets the experimental.reactCompiler option to true.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    reactCompiler: true,\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Importing a Turbopack Part in Javascript\nDESCRIPTION: This snippet imports a Turbopack part. This indicates the usage of Turbopack's module bundling features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Running Cypress for the first time\nDESCRIPTION: Executes the `cypress:open` script defined in `package.json` to open the Cypress testing suite. Requires the `cypress:open` script to be defined in `package.json`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:open\n```\n\n----------------------------------------\n\nTITLE: Manipulating Variable - JavaScript\nDESCRIPTION: This snippet increments the value of 'foobar' by combining it with the value of 'bar'. It modifies the state of 'foobar', demonstrating variable manipulation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfoobar += bar;\n\n```\n\n----------------------------------------\n\nTITLE: Patching a Project with Local Next.js Version\nDESCRIPTION: Alternative command to directly patch a test project with local Next.js changes without creating a tarball, requiring previous overrides setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm patch-next path/to/project\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Next.js with Formspree\nDESCRIPTION: Commands to install project dependencies and start the Next.js development server locally. Runs the application on localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-formspree/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install dependencies\nnpm install\n\n# Run next locally at localhost:3000\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Link in Next.js Documentation\nDESCRIPTION: This code snippet demonstrates how to create a markdown link to the feature request discussion template in the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/triaging.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[this template](https://github.com/vercel/next.js/discussions/new?category=ideas)\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version\nDESCRIPTION: Command to explicitly install the canary release of Next.js, which contains the latest features and bugfixes that haven't been published to the stable channel yet.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@canary\n```\n\n----------------------------------------\n\nTITLE: Top-Down Dynamic Params Generation for Category Segment (JavaScript)\nDESCRIPTION: Generate static params for category segments by fetching products data and mapping to route params\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n  }))\n}\n\nexport default function Layout({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Dependencies with npm\nDESCRIPTION: Installation command for MDX dependencies using npm package manager for Next.js projects\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/mdx @mdx-js/loader @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Migrating Authentication Middleware (Before)\nDESCRIPTION: Example of old middleware implementation for authentication that returns JSON responses directly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n\nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n\n  return NextResponse.json({ message: 'Auth required' }, { status: 401 })\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Order Array with Push Operations\nDESCRIPTION: Demonstrates sequential push operations that modify the shared order array with side effects\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\norder.push(\"a\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\norder.push(\"b\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\norder.push(\"c\");\n```\n\n----------------------------------------\n\nTITLE: Installing Local Next.js Dependencies\nDESCRIPTION: Command to add local Next.js, React, and React-DOM dependencies from the monorepo to your application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing-using-local-app.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add ./path/to/next.js/{packages/next,node_modules/{react,react-dom}}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Yarn\nDESCRIPTION: This command uses Yarn to generate a new Next.js application with a basic CSS example. It sets up the project, installs dependencies, and offers a foundation for building with CSS Modules. The new application will be located in a folder named 'basic-css-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example basic-css basic-css-app\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/runtime with yarn\nDESCRIPTION: This snippet demonstrates how to install the @babel/runtime package using yarn.  It uses the `yarn add` command to add the package to the project's dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@babel/runtime/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/runtime\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with PostCSS in Next.js\nDESCRIPTION: This configuration adds the @tailwindcss/postcss plugin to the PostCSS configuration, enabling Tailwind CSS processing in the Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Twitter Image Alt Text\nDESCRIPTION: This snippet demonstrates how to set alt text for a Twitter image using a separate .txt file and the resulting HTML output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nAbout Acme\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"twitter:image:alt\" content=\"About Acme\" />\n```\n\n----------------------------------------\n\nTITLE: Importing JSX Runtime Components\nDESCRIPTION: Imports JSX runtime components from React including jsx, jsxs and Fragment utilities for JSX transformation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Next.js Documentation\nDESCRIPTION: YAML frontmatter block defining the title and description for a Next.js documentation page about data fetching capabilities.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data Fetching\ndescription: Learn how to fetch, cache, revalidate, and mutate data with Next.js.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from URLs\nDESCRIPTION: This snippet demonstrates how to import specific named exports directly from an external URL in a Next.js component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a, b, c } from 'https://example.com/assets/some/module.js'\n```\n\n----------------------------------------\n\nTITLE: Parameter Handling in Next.js Rewrites\nDESCRIPTION: Examples of handling URL parameters in rewrites, showing automatic query parameter passing and manual parameter configuration\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-about/:path*',\n        destination: '/about',\n      },\n    ]\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/docs/:path*',\n        destination: '/:path*',\n      },\n    ]\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/:first/:second',\n        destination: '/:first?second=:second',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants in JavaScript\nDESCRIPTION: This snippet declares a constant 'dog' and assigns it the string value 'dog'. It illustrates a basic variable declaration using 'const'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dog = \"dog\";\n```\n\n----------------------------------------\n\nTITLE: Importing URL Utility in Next.js\nDESCRIPTION: Imports the URL utility module for handling URL-related operations in Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport '../../lib/url';\n```\n\n----------------------------------------\n\nTITLE: Redirecting in NextResponse - TypeScript\nDESCRIPTION: Creates a redirect response to the specified URL, allowing for URL construction and modification prior to redirection.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nreturn NextResponse.redirect(new URL('/new', request.url))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Link Component Usage in Next.js\nDESCRIPTION: Example showing incorrect usage of Next.js Link component where no children are passed, which leads to an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-no-children.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <>\n      <Link href=\"/about\" legacyBehavior></Link>\n      // or\n      <Link href=\"/about\" legacyBehavior />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Order Array in JavaScript\nDESCRIPTION: Declares a global empty array that will be mutated throughout the module's lifecycle\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const order = [];\n```\n\n----------------------------------------\n\nTITLE: Installing FCM Example with PNPM\nDESCRIPTION: Command to create a new Next.js application with Firebase Cloud Messaging example using PNPM package manager\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app\n```\n\n----------------------------------------\n\nTITLE: Logging Object to Console in Javascript\nDESCRIPTION: This snippet logs the `shared` object to the console. It shows a simple logging of an object, indicating a read dependency on that object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(shared);\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to Variable x in Javascript\nDESCRIPTION: This snippet assigns a new value to the variable 'x'. In this case, 'x' is assigned the numerical value of 1.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nx = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (Bun)\nDESCRIPTION: This command uses Bun to create a new Next.js application with the mdx-remote example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app --example mdx-remote mdx-remote-app\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Server for Benchmarking\nDESCRIPTION: Command to start the Next.js server before running any benchmark tests. This must be executed prior to running any benchmark commands.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 14 with Bun\nDESCRIPTION: Command to upgrade Next.js to version 14 using Bun package manager. Includes installation of React 18 and ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@next-14 react@18 react-dom@18 && bun add eslint-config-next@next-14 -D\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp via npm\nDESCRIPTION: This command installs the Sharp library using npm, which is essential for image optimization in production environments of a Next.js project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sharp\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 14 with NPM\nDESCRIPTION: Command to upgrade Next.js to version 14 using NPM package manager. Includes installation of React 18 and ESLint configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@next-14 react@18 react-dom@18 && npm i eslint-config-next@next-14 -D\n```\n\n----------------------------------------\n\nTITLE: Dynamic API Routes in Next.js\nDESCRIPTION: Implementation of dynamic API routes using route parameters, demonstrating how to access and use dynamic route values.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { pid } = req.query\n  res.end(`Post: ${pid}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const { pid } = req.query\n  res.end(`Post: ${pid}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Next.js application with the mdx-remote example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example mdx-remote mdx-remote-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Auth Slot Behavior\nDESCRIPTION: Creates a default component for the auth slot that returns null, ensuring the modal is not rendered when inactive\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Default() {\n  return null\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Default() {\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Variable in JavaScript\nDESCRIPTION: The snippet modifies the 'foobar' variable by appending the string 'foo'. It reads the current 'foobar' value and updates it accordingly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfoobar += \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Page Component\nDESCRIPTION: Illustrates a basic page component in Next.js using JavaScript, highlighting the structure for incorporating dynamic parameters.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Page({ params }) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp via yarn\nDESCRIPTION: This command installs the Sharp library using yarn, for use in Next.js production environments to optimize images.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sharp\n```\n\n----------------------------------------\n\nTITLE: Installing FCM Example with NPX\nDESCRIPTION: Command to create a new Next.js application with Firebase Cloud Messaging example using npx create-next-app\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app\n```\n\n----------------------------------------\n\nTITLE: Type-Safe API Route Handler\nDESCRIPTION: Example of implementing a type-safe API route handler with Next.js built-in types.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Development Environment Variables - Bash\nDESCRIPTION: This command pulls development environment variables configured in the Vercel project settings into a `.env.local` file for local development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nvercel env pull\n```\n\n----------------------------------------\n\nTITLE: Cloning Stencil Component Starter Repository\nDESCRIPTION: Commands to clone the Stencil component starter repository, navigate to the project directory, and remove the original remote.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ionic-team/stencil-component-starter.git my-component\ncd my-component\ngit remote rm origin\n```\n\n----------------------------------------\n\nTITLE: Incorrect AMP Bind Attribute Syntax\nDESCRIPTION: Original problematic syntax that causes JSX parsing errors when using dynamic property binding in AMP components\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/amp-bind-jsx-alt.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n[prop]='something'\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Image Codemod in Next.js\nDESCRIPTION: Command to run the next-image-to-legacy-image codemod which automatically converts next/image imports to next/legacy/image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-upgrade-to-13.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod next-image-to-legacy-image .\n```\n\n----------------------------------------\n\nTITLE: Migrating Dashboard Layout to App Directory\nDESCRIPTION: Converting the dashboard layout to use the new app directory structure with Client and Server Components\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <p>My Page</p>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport default function DashboardLayout({ children }) {\n  return (\n    <div>\n      <h2>My Dashboard</h2>\n      {children}\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport DashboardLayout from './DashboardLayout'\n\nexport default function Layout({ children }) {\n  return <DashboardLayout>{children}</DashboardLayout>\n}\n```\n\n----------------------------------------\n\nTITLE: Production Module Implementation\nDESCRIPTION: Complete module implementation for production environment with TurboPack-specific exports and runtime configurations\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst runtime = \"edge\";\nexport { runtime };\nexport { runtime as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Key Generation Solution in Next.js\nDESCRIPTION: Improved implementation using asynchronous key generation with Promise.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { generateKey } from 'node:crypto'\n\nexport default async function Page() {\n  const key = await new Promise(resolve => generateKey('hmac', { ... }, key => resolve(key)))\n  const digestedData = await digestDataWithKey(data, key);\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with npm\nDESCRIPTION: This command uses `create-next-app` with npm to bootstrap a Next.js application using the `with-cypress` example.  It initializes a new project named `with-cypress-app` in the current directory. It requires npm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-cypress with-cypress-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with TakeShape Example (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Next.js application based on the cms-takeshape example. It bootstraps the project with the necessary files and dependencies to connect to TakeShape.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example cms-takeshape cms-takeshape-app\n```\n\n----------------------------------------\n\nTITLE: Importing TurboPack Parts in JavaScript\nDESCRIPTION: This snippet illustrates importing parts using TurboPack assertions and logging a variable. The dependencies include various TurboPack parts which are asserted with specific part numbers. It primarily emphasizes module evaluation and variable manipulation within an imported scope.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nconsole.log(foobarCopy);\nfoobarCopy += \"Unused\";\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Prefetching in Pages Router\nDESCRIPTION: Configure prefetching behavior for Next.js Link component in Pages Router. Control route and data prefetching in production environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Dynamic Data Access in Next.js Server-Side Rendering\nDESCRIPTION: Defines a function to track dynamic data access during server-side rendering, handling various scenarios such as caching, static generation, and prerendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport { getPathname } from '../../lib/url';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nimport { g as postponeWithTracking } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nfunction trackDynamicDataAccessed(store, expression) {\n    const pathname = getPathname(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        throw new Error(`Route ${pathname} used \"${expression}\" inside a function cached with \"unstable_cache(...)\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \"${expression}\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`);\n    } else if (store.dynamicShouldError) {\n        throw new StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (store.prerenderState) {\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\nexport { trackDynamicDataAccessed };\nexport { trackDynamicDataAccessed as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Component in JavaScript for Next.js\nDESCRIPTION: This snippet shows how to implement a loading component in JavaScript for Next.js. It exports a default function that returns a basic loading message, which can be replaced with a custom loading skeleton component.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/loading.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring generateBuildId in next.config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `generateBuildId` option in `next.config.js`.  It defines an asynchronous function that returns a custom build ID, in this case, the Git hash from the environment variables. This ensures a consistent build ID across different environments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/generateBuildId.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Framer Motion Example (Yarn)\nDESCRIPTION: This command utilizes `create-next-app` to generate a new Next.js application with the Framer Motion example. It employs Yarn as the package manager for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-framer-motion with-framer-motion-app\n```\n\n----------------------------------------\n\nTITLE: Running Storybook for Dev Overlay\nDESCRIPTION: The snippet demonstrates how to start the Storybook server for local development of UI components in the Next.js dev overlay. The server runs at http://localhost:6006 and requires the 'pnpm' package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/react-dev-overlay/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: Reporting Measurements with devlow-bench (JavaScript)\nDESCRIPTION: Shows how to use measureTime and reportMeasurement functions to capture and report timing and custom metrics within scenarios, supporting optional parameters for enhanced measurement control.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { measureTime, reportMeasurement } from \"devlow-bench\";\n\n// Measure a time\nawait measureTime(\"name of the timing\", {\n  /* optional options */\n});\n\n// Report some other measurement\nawait reportMeasurement(\"name of the measurement\", value, unit, {\n  /* optional options */\n});\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect PostCSS Configuration (require)\nDESCRIPTION: This code snippet shows an incorrect PostCSS configuration where plugins are loaded using `require`. The corrected example demonstrates the proper string-based plugin name configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pluginA = require('postcss-plugin-a')\nmodule.exports = {\n  plugins: [require('postcss-plugin'), pluginA],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with GraphQL Hooks example\nDESCRIPTION: This command utilizes `create-next-app` to bootstrap a new Next.js application using the `with-graphql-hooks` example. It installs the necessary dependencies and sets up the project structure for working with GraphQL Hooks.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-graphql-hooks with-graphql-hooks-app\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp via pnpm\nDESCRIPTION: This command installs the Sharp library using pnpm, necessary for image optimization when running Next.js in production mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sharp\n```\n\n----------------------------------------\n\nTITLE: Determining Valid React Element Types\nDESCRIPTION: Demonstrates how to use the isValidElementType function to check if various values are valid React element types, including HTML tags, class components, function components, and contexts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport * as ReactIs from \"react-is\";\n\nclass ClassComponent extends React.Component {\n  render() {\n    return React.createElement(\"div\");\n  }\n}\n\nconst FunctionComponent = () => React.createElement(\"div\");\n\nconst ForwardRefComponent = React.forwardRef((props, ref) =>\n  React.createElement(Component, { forwardedRef: ref, ...props })\n);\n\nconst Context = React.createContext(false);\n\nReactIs.isValidElementType(\"div\"); // true\nReactIs.isValidElementType(ClassComponent); // true\nReactIs.isValidElementType(FunctionComponent); // true\nReactIs.isValidElementType(ForwardRefComponent); // true\nReactIs.isValidElementType(Context.Provider); // true\nReactIs.isValidElementType(Context.Consumer); // true\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry API Import for Next.js (JS)\nDESCRIPTION: Imports the OpenTelemetry API package based on the runtime environment. Uses either the edge runtime version or the Node.js version with a fallback to the Next.js compiled version.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as api } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nif (process.env.NEXT_RUNTIME === 'edge') {\n    api = require('@opentelemetry/api');\n} else {\n    try {\n        api = require('@opentelemetry/api');\n    } catch (err) {\n        api = require('next/dist/compiled/@opentelemetry/api');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing add-missing-react-import Codemod in Next.js\nDESCRIPTION: This codemod transforms files that do not import React to include the import, enabling the new React JSX transform to work. It adds the necessary React import to components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod add-missing-react-import\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation (JavaScript)\nDESCRIPTION: JavaScript implementation of the required root layout component in the app directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning another Value to Variable x in Javascript\nDESCRIPTION: This snippet assigns a new value to the variable 'x'. Here, 'x' is assigned the numerical value of 2.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nx = 2;\n```\n\n----------------------------------------\n\nTITLE: Facebook Metadata (admins) Output - HTML\nDESCRIPTION: This HTML code snippet shows the output generated in the `<head>` section based on the Facebook metadata configuration with admins.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_59\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"fb:admins\" content=\"12345678\" />\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Disk Compression Agents\nDESCRIPTION: Script to install launch agents on MacOS that automatically apply APFS disk compression to node_modules and target directories.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/LaunchAgents/install-macos-agents.sh\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode using yarn\nDESCRIPTION: These commands install the project dependencies and then start the Next.js development server using yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: HMR Message Sending Function\nDESCRIPTION: Function to send data through the WebSocket connection if it exists and is open.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function sendMessage(data) {\n    if (!source || source.readyState !== source.OPEN) return;\n    return source.send(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens with Next.js using create-next-app\nDESCRIPTION: Command to bootstrap a Next.js application with SuperTokens authentication using npx create-next-app with the with-supertokens example template.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-supertokens with-supertokens-app\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version for PPR\nDESCRIPTION: Command to install the canary version of Next.js, which is required to use the experimental Partial Prerendering feature.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@canary\n```\n\n----------------------------------------\n\nTITLE: Browser-Based Content Verification\nDESCRIPTION: Uses browser automation to navigate and verify page content through CSS element selection\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('should work using browser', async () => {\n  const browser = await next.browser('/')\n  expect(await browser.elementByCss('p').text()).toBe('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (pnpm)\nDESCRIPTION: These commands install the project dependencies using pnpm and then start the development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Localized Dictionaries in JSON\nDESCRIPTION: These JSON snippets show examples of localized dictionaries for English and Dutch, containing translated strings for various UI elements.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": {\n    \"cart\": \"Add to Cart\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": {\n    \"cart\": \"Toevoegen aan Winkelwagen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Directory in Turbopack\nDESCRIPTION: Example showing how to configure the root directory for module resolution in Turbopack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path')\nmodule.exports = {\n  turbopack: {\n    root: path.join(__dirname, '..')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Accessibility Plugin Configuration\nDESCRIPTION: Integrated ESLint rules for catching accessibility issues in Next.js projects using eslint-plugin-jsx-a11y\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/accessibility.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Default accessibility linting rules\n// - aria-props\n// - aria-proptypes\n// - aria-unsupported-elements\n// - role-has-required-aria-props\n// - role-supports-aria-props\n```\n\n----------------------------------------\n\nTITLE: Installing CSP Example with Yarn\nDESCRIPTION: Creates a new Next.js application with strict CSP implementation using yarn create next-app command.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-strict-csp with-strict-csp-app\n```\n\n----------------------------------------\n\nTITLE: Fixing Router Method Calls in Function Components\nDESCRIPTION: Demonstrates how to move router method calls to useEffect hook to prevent pre-rendering errors in function components\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-router-instance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct approach\nuseEffect(() => {\n  router.push('/some-path');\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Synchronous Request Access in Next.js Route Handler\nDESCRIPTION: Example showing incorrect synchronous access of request headers in a Next.js GET route handler without awaiting connection first\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function GET(request) {\n  const requestHeaders = request.headers\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running MacOS Compression Manually\nDESCRIPTION: Command to manually run the MacOS compression script for node_modules and target directories to save disk space.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/macos-compress.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Resolution Aliases\nDESCRIPTION: Example of setting up module resolution aliases in Turbopack for package and conditional imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  turbopack: {\n    resolveAlias: {\n      underscore: 'lodash',\n      mocha: { browser: 'mocha/browser-entry.js' },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Router Method Calls in Class Components\nDESCRIPTION: Shows how to move router method calls to componentDidMount lifecycle method to avoid pre-rendering issues in class components\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-router-instance.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct approach\ncomponentDidMount() {\n  this.props.router.push('/some-path');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in development mode using npm\nDESCRIPTION: These commands install the project dependencies and then start the Next.js development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Development Module Part 1\nDESCRIPTION: Exports 'cat' variable directly and as 'b' with Turbopack variable assertion\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cat = \"cat\";\nexport { cat };\nexport { cat as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests in SWC Package\nDESCRIPTION: Shell commands for running tests in the SWC package, with options to update snapshots and fixtures\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\n\n# Update snapshots and fixtures for tests\nUPDATE=1 cargo test\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Loader in Turbopack\nDESCRIPTION: Example of configuring the @svgr/webpack loader for handling SVG files in Turbopack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  turbopack: {\n    rules: {\n      '*.svg': {\n        loaders: ['@svgr/webpack'],\n        as: '*.js',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Next.js Route Modules\nDESCRIPTION: Imports essential Next.js route modules and types including AppRouteRouteModule and RouteKind\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppRouteRouteModule } from '../../server/future/route-modules/app-route/module.compiled';\nimport { RouteKind } from '../../server/future/route-kind';\n```\n\n----------------------------------------\n\nTITLE: JavaScript Configuration with JSDoc Types\nDESCRIPTION: Demonstrates how to add TypeScript checking to next.config.js using JSDoc annotations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Copying Auth0 Environment Variables Template\nDESCRIPTION: Command to copy the example environment variables file to create a local configuration for Auth0 settings.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Exporting gridAutoRows from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridAutoRows styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport { n as gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -24\n};\nexport { gridAutoRows };\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Version 10 using pnpm\nDESCRIPTION: Command to upgrade Next.js to version 10 using pnpm package manager. This will update the next package in your project's dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@10\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary getInitialProps from Custom App Component in Next.js\nDESCRIPTION: This code snippet shows an example of a redundant getInitialProps implementation in a custom App component that can be safely removed. The implementation simply passes page props through without adding functionality, which unnecessarily disables Automatic Static Optimization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/opt-out-automatic-prerendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyApp extends App {\n  // Remove me, I do nothing!\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Next.js Migration Guide\nDESCRIPTION: This snippet defines the frontmatter for a Next.js migration guide page. It sets the title as 'Migrating' and provides a description explaining the purpose of the guide.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Migrating\ndescription: Learn how to migrate from popular frameworks to Next.js\n---\n```\n\n----------------------------------------\n\nTITLE: Full HTML Content Rendering Test\nDESCRIPTION: Renders complete HTML and checks for specific content using string containment\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('should work with html', async () => {\n  const html = await next.render('/')\n  expect(html).toContain('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/runtime with npm\nDESCRIPTION: This snippet demonstrates how to install the @babel/runtime package using npm.  It uses the `npm install` command with the `--save` flag to add the package to the project's dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@babel/runtime/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/runtime\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for UI Kitten\nDESCRIPTION: Command to install necessary dependencies for transpiling packages like @ui-kitten/components\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D next-compose-plugins next-transpile-modules\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app using create-next-app with npm\nDESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-youtube-embed' example. It utilizes the create-next-app tool to bootstrap the project with the specified example and project name. The resulting application will be named 'with-youtube-embed-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-youtube-embed with-youtube-embed-app\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration (with Babel)\nDESCRIPTION: This JavaScript configuration file is a comprehensive setup for Jest when using Babel with Next.js. It configures coverage collection, module name mapping for CSS, images, and module aliases, along with test environment and transforms using babel-jest. This configuration allows Jest to properly handle and test Next.js components with CSS modules, static assets, and absolute imports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  collectCoverage: true,\n  // on node 14.x coverage provider v8 offers good speed and more or less good report\n  coverageProvider: 'v8',\n  collectCoverageFrom: [\n    '**/*.{js,jsx,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**',\n    '!<rootDir>/out/**',\n    '!<rootDir>/.next/**',\n    '!<rootDir>/*.config.js',\n    '!<rootDir>/coverage/**',\n  ],\n  moduleNameMapper: {\n    // Handle CSS imports (with CSS modules)\n    // https://jestjs.io/docs/webpack#mocking-css-modules\n    '^.+\\.module\\.(css|sass|scss)$': 'identity-obj-proxy',\n\n    // Handle CSS imports (without CSS modules)\n    '^.+\\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',\n\n    // Handle image imports\n    // https://jestjs.io/docs/webpack#handling-static-assets\n    '^.+\\.(png|jpg|jpeg|gif|webp|avif|ico|bmp|svg)$': `<rootDir>/__mocks__/fileMock.js`,\n\n    // Handle module aliases\n    '^@/components/(.*)$': '<rootDir>/components/$1',\n\n    // Handle @next/font\n    '@next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Handle next/font\n    'next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Disable server-only\n    'server-only': `<rootDir>/__mocks__/empty.js`,\n  },\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\n  testEnvironment: 'jsdom',\n  transform: {\n    // Use babel-jest to transpile tests with the next/babel preset\n    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object\n    '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],\n  },\n  transformIgnorePatterns: [\n    '/node_modules/',\n    '^.+\\.module\\.(css|sass|scss)$',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Export in JavaScript\nDESCRIPTION: This snippet exports nothing. It might be used as a placeholder or to signify end of module exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridAutoRows Function\nDESCRIPTION: Re-exports the gridAutoRows styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { n as gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -24\n};\nexport { gridAutoRows };\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridAutoColumns Function\nDESCRIPTION: Re-exports the gridAutoColumns styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { m as gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -23\n};\nexport { gridAutoColumns };\n```\n\n----------------------------------------\n\nTITLE: Production Module Configuration\nDESCRIPTION: Production environment module configuration that matches the development setup, initializing Turbopack and exporting an empty object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.turbopack = {};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 6 (prod)\nDESCRIPTION: Part 6 of the production build. Imports `a` as `e` and exports it as `a`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -4\n};\nexport { a };\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Preview Build from Specific Pull Request\nDESCRIPTION: JSON configuration to use a Next.js preview build from a specific Pull Request in a project's package.json.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"next\": \"https://vercel-packages.vercel.app/next/prs/66445/next\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash for next export in Next.js 9\nDESCRIPTION: Configuration to revert to previous behavior of exporting pages with trailing slash in next.config.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables example file\nDESCRIPTION: This command copies the example environment variables file to a local environment file. This file will be ignored by Git.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Unpacking Next.js Tarballs into Project\nDESCRIPTION: Command to extract Next.js tarballs directly into a project's node_modules directory, bypassing the package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm unpack-next ~/shadcn-ui\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Rewrite Configuration\nDESCRIPTION: Demonstrates basic URL rewrite configuration in next.config.js to map /about to the root path /\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Server and Client Components in JavaScript\nDESCRIPTION: JavaScript version of server and client component composition example.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Header from './header'\nimport Counter from './counter' // This is a Client Component\n\nexport default function Page() {\n  return (\n    <div>\n      <Header />\n      <Counter />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Test File Paths\nDESCRIPTION: File paths for testing metadata completion, type warnings, and client component restrictions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/development/typescript-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp/metadata/completion\napp/metadata/missing-type-warning\napp/metadata/client\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in MDX\nDESCRIPTION: Demonstrates importing a custom Button component from the components directory to use within MDX content.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from '../components/button.js'\n```\n\n----------------------------------------\n\nTITLE: Exporting gridColumn from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridColumn styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport { j as gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nexport { gridColumn };\n```\n\n----------------------------------------\n\nTITLE: Configuring Output File Tracing Root in Monorepo\nDESCRIPTION: Next.js configuration to set the tracing root directory for monorepo setups.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // this includes files from the monorepo base two directories up\n  outputFileTracingRoot: path.join(__dirname, '../../'),\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Export Statement in JavaScript\nDESCRIPTION: This snippet contains an empty export statement. It serves as a placeholder for future exports in modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Unpacking Next.js Tarball into Test Project\nDESCRIPTION: Command to unpack the previously generated Next.js tarballs into a test project's node_modules directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm unpack-next path/to/project\n```\n\n----------------------------------------\n\nTITLE: Removing Static Export Configuration in next.config.js\nDESCRIPTION: Removes the `output: 'export'` configuration to enable server-side rendering capabilities\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-export.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reactStrictMode: true\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Next.js Configuration with MDX\nDESCRIPTION: Next.js MDX configuration showing how to add custom webpack configuration alongside MDX support\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst withMDX = require('@next/mdx')()\nmodule.exports = withMDX({\n  webpack(config, options) {\n    return config\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Forms App with Yarn\nDESCRIPTION: Command to create a new Next.js application with forms example using Yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example next-forms next-forms-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Forms App with NPX\nDESCRIPTION: Command to create a new Next.js application with forms example using NPX package runner.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example next-forms next-forms-app\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Version in package.json\nDESCRIPTION: Example of how to set webpack version resolution in package.json to meet Next.js minimum requirement of v5.15.0\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-webpack-5-version.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"webpack\": \"^5.15.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript File Path References\nDESCRIPTION: File paths referencing client components and error handling components for testing prop serialization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/development/typescript-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp/client.tsx#ClientComponent\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp/error.tsx#Error\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp/global-error.tsx#GlobalError\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Kontent.ai Example (pnpm)\nDESCRIPTION: This command uses the `create next-app` utility with pnpm to bootstrap a new Next.js application using the `cms-kontent-ai` example. It creates a new directory named `cms-kontent-app` containing the project files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example cms-kontent-ai cms-kontent-app\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with WebWorker Example (Yarn)\nDESCRIPTION: This command initializes a new Next.js application using the 'with-web-worker' example. It uses Yarn to execute the create next-app command and sets up a project named 'with-web-worker-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-web-worker with-web-worker-app\n```\n\n----------------------------------------\n\nTITLE: Mixed Node.js and React Component Export - Next.js\nDESCRIPTION: Example demonstrating problematic mixing of Node.js-specific code with React components in the same module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Redis from 'ioredis'\n\nconst redis = new Redis(process.env.REDIS_URL)\n\nexport function MyComponent() {\n  return <h1>Hello</h1>\n}\n\nexport default redis\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport redis, { MyComponent } from '../lib/redis'\n\nexport async function getStaticProps() {\n  const message = await redis.get('message')\n  return {\n    message,\n  }\n}\n\nexport default function Home() {\n  return <MyComponent />\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Variable x to Console in Javascript\nDESCRIPTION: This snippet uses 'console.log()' to output the current value of the variable 'x' to the console. This action is performed multiple times throughout the provided code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(x);\n```\n\n----------------------------------------\n\nTITLE: Compiling Next.js Changes in Markdown\nDESCRIPTION: Instructions for compiling changes made to Next.js before running the benchmark. This step ensures that any local modifications are included in the benchmarking process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nNote: if you made some changes to Next.js, make sure you compiled them by running at the root of the monorepo either `pnpm dev` or `pnpm build --force`.\n```\n\n----------------------------------------\n\nTITLE: Import, Copy, and Export Module Parts with Assertions\nDESCRIPTION: This JavaScript code imports and copies variable states with assertions, while managing exports in a Turbopack environment. Its dependencies include Turbopack configurations and access to specified parts, aligning with Turbopack's requirements for import management, and focusing on efficient variable handling. It enforces execution under Turbopack's guidelines.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nlet foobarCopy = foobar;\nexport { foobarCopy as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Bundle Analyzer Options\nDESCRIPTION: Configuration to disable automatic opening of the analyzer report in the default browser\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n  openAnalyzer: false,\n})\nmodule.exports = withBundleAnalyzer({})\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Parameters in Next.js Routes\nDESCRIPTION: Control how dynamic route segments not generated with generateStaticParams are handled. This replaces the fallback option from getStaticPaths in the pages directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamicParams = true // true | false,\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamicParams = true // true | false,\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Middleware with NextURL Clone\nDESCRIPTION: Demonstrates the recommended approach for URL handling in Next.js Middleware by cloning NextURL and modifying its pathname. This method properly handles configuration settings like basePath and locale.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-relative-urls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl.clone()\n  url.pathname = '/dest'\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Key Generation Example in Next.js\nDESCRIPTION: Example showing problematic synchronous key generation implementation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { generateKeySync } from 'node:crypto'\n\nexport default async function Page() {\n  const key = generateKeySync('hmac', { ... })\n  const digestedData = await digestDataWithKey(data, key);\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Run Relay compiler (Yarn)\nDESCRIPTION: This command uses Yarn to execute the 'relay' script defined in the project's package.json. The purpose is to perform Relay ahead-of-time compilation, which is required after any edits to components that query data with Relay. It ensures optimal performance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn relay\n```\n\n----------------------------------------\n\nTITLE: Turbopack Entrypoints Configuration for Next.js Tracing (JS)\nDESCRIPTION: Defines the entrypoints for the Next.js tracing module in Turbopack configuration. Specifies which exports are available from this module for consumption by other parts of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ModuleEvaluation: 6,\n    Export(\n        \"BubbledError\",\n    ): 10,\n    Export(\n        \"SpanKind\",\n    ): 11,\n    Export(\n        \"SpanStatusCode\",\n    ): 9,\n    Export(\n        \"getTracer\",\n    ): 6,\n    Export(\n        \"isBubbledError\",\n    ): 12,\n    Exports: 13,\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Property Access in Javascript\nDESCRIPTION: This snippet declares a constant `value2` and assigns to it the value of `externalObject.propertyWithGetter`. This could trigger a getter with potential side effects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst value2 = externalObject.propertyWithGetter;\n```\n\n----------------------------------------\n\nTITLE: Handling Incompatible href and as in Next.js\nDESCRIPTION: This snippet represents an incorrect usage of the next/link component in Next.js, where a relative href is paired with an external as value, which triggers an error when the link is clicked. The as value should also be relative or absent for external URLs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-relative-url-external-as.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page(props) {\n  return (\n    <>\n      <Link href=\"/invalid\" as=\"mailto:john@example.com\">\n        <a>Invalid link</a>\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Request Handler\nDESCRIPTION: Defines an API route handler for GET requests that returns the current pathname in JSON format using NextResponse\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const GET = (req)=>{\n    return NextResponse.json({\n        pathname: req.nextUrl.pathname\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding .next and next-env.d.ts to .gitignore\nDESCRIPTION: This snippet shows how to update the `.gitignore` file to exclude the `.next` directory (Next.js build output) and the `next-env.d.ts` file (Next.js environment type definitions). This prevents these generated files from being committed to version control.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_22\n\nLANGUAGE: txt\nCODE:\n```\n# ...\n.next\nnext-env.d.ts\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Middleware Function in Next.js\nDESCRIPTION: Example of exporting a middleware function as a default export instead of a named export. This demonstrates an alternative way to define middleware in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of default export\nexport default function middleware(request) {\n  // Middleware logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Span Error Handling in JavaScript\nDESCRIPTION: Implementation of closeSpanWithError function that handles tracing span errors, including special handling for bubbled errors. This utility function is used to properly close spans with appropriate error information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t as isBubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nimport { g as SpanStatusCode } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nconst closeSpanWithError = (span, error)=>{\n    if (isBubbledError(error) && error.bubble) {\n        span.setAttribute('next.bubble', true);\n    } else {\n        if (error) {\n            span.recordException(error);\n        }\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error == null ? void 0 : error.message\n        });\n    }\n    span.end();\n};\nexport { SpanStatusCode };\nexport { closeSpanWithError as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Unmigratable Dynamic API Usage in Next.js\nDESCRIPTION: This code snippet shows an example of a dynamic API usage that cannot be automatically migrated by the codemod and requires manual intervention.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport function MyCookiesComponent() {\n  const c =\n    /* @next-codemod-error Manually await this call and refactor the function to be async */\n    cookies()\n  return c.get('name')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Route Kind\nDESCRIPTION: Imports RouteKind enum for defining route types and configurations in Next.js\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RouteKind } from '../../server/future/route-kind';\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Reproduction Template with PNPM\nDESCRIPTION: Command to create a new Next.js reproduction template project using PNPM package manager\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example reproduction-template reproduction-app\n```\n\n----------------------------------------\n\nTITLE: Importing Pages Route Module\nDESCRIPTION: Imports the PagesRouteModule from Next.js server route modules for page routing configuration\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\n```\n\n----------------------------------------\n\nTITLE: Debug Environment Configuration for Next.js Cache\nDESCRIPTION: Environment variable configuration for enabling cache debugging in Next.js production environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PRIVATE_DEBUG_CACHE=1\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Utilities in Next.js\nDESCRIPTION: Imports default environment and parsing utilities from a custom environment module for global configuration management\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DEFAULT_ENVIRONMENT, parseEnvironment } from '../../utils/environment';\n```\n\n----------------------------------------\n\nTITLE: Configuring PPR in Next.js JavaScript Config\nDESCRIPTION: JavaScript configuration for enabling incremental Partial Prerendering in next.config.js\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Import Statement\nDESCRIPTION: Imports the 'upper' function from an external module with hoisting and side effects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { upper } from \"module\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component in Next.js\nDESCRIPTION: This snippet shows how to import the `Image` component from Next.js for image optimization purposes.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Environment\nDESCRIPTION: Command to start the development server with watch mode for code changes during Next.js development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Server Component Error Handling\nDESCRIPTION: Example of handling fetch errors in a Server Component by returning an error message.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!res.ok) {\n    return 'There was an error.'\n  }\n\n  return '...'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function Page() {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!res.ok) {\n    return 'There was an error.'\n  }\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Font Package Reference\nDESCRIPTION: Package name reference for Next.js built-in font system that enables automatic self-hosting and optimization of font files.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/font/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@next/font\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Reproduction Template with Yarn\nDESCRIPTION: Command to create a new Next.js reproduction template project using Yarn package manager\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example reproduction-template reproduction-app\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler Babel Plugin\nDESCRIPTION: Command to install the babel-plugin-react-compiler package using npm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install babel-plugin-react-compiler\n```\n\n----------------------------------------\n\nTITLE: Importing Fetch Utilities\nDESCRIPTION: Imports patch-fetch utility for customizing fetch behavior in the route module\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch';\n```\n\n----------------------------------------\n\nTITLE: External Function Export 1\nDESCRIPTION: Exports a function that combines result of internal() with foobar value.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport function external1() {\n    return internal() + foobar;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Bug Report Template with Yarn\nDESCRIPTION: Command to create a new Next.js bug report template project using Yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example reproduction-template-pages reproduction-app\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with Expo TypeScript Using PNPM\nDESCRIPTION: Command to create a new Next.js application with Expo TypeScript template using pnpm create\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-expo-typescript with-expo-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Exporting validateURL Function - JavaScript\nDESCRIPTION: This snippet imports and exports the validateURL function, which ensures that the provided URLs are valid for the context of the Next.js application. It is critical for maintaining routing integrity and preventing errors due to invalid URLs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { validateURL } from '../utils';\nexport { validateURL as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Internal Function Definition\nDESCRIPTION: Defines a function that calls imported 'upper' function with foobar as argument.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction internal() {\n    return upper(foobar);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch in Next.js\nDESCRIPTION: Git command to create a new branch from the canary branch for local development work.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b MY_BRANCH_NAME origin/canary\n```\n\n----------------------------------------\n\nTITLE: Code Formatting and Preparation\nDESCRIPTION: Command for formatting Rust code before submission to ensure consistent code style\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo fmt\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Canary Release using pnpm\nDESCRIPTION: This command upgrades Next.js to the latest canary release using pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add next@canary\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with Expo TypeScript Using Yarn\nDESCRIPTION: Command to create a new Next.js application with Expo TypeScript template using yarn create\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-expo-typescript with-expo-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Getter Function - Dog Variable\nDESCRIPTION: Defines a function that returns the dog variable value\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDog() {\n    return dog;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary getInitialProps from Next.js Custom App (JSX)\nDESCRIPTION: This code snippet shows an example of a getInitialProps implementation in a custom App component that can be safely removed. This implementation simply passes props to the rendered component without adding functionality, causing Automatic Static Optimization to be disabled unnecessarily.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/opt-out-auto-static-optimization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyApp extends App {\n  // Remove me, I do nothing!\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contentful Revalidation API Route URL\nDESCRIPTION: This snippet represents the structure of the URL for the revalidation API endpoint.  The YOUR_VERCEL_DEPLOYMENT_URL is a placeholder for the actual URL of the deployed Vercel application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"https://<YOUR_VERCEL_DEPLOYMENT_URL>/api/revalidate\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Bundler Benchmarks\nDESCRIPTION: Advanced benchmark filtering to compare specific bundlers or benchmark suites, providing granular performance testing\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench -p turbopack-bench -p turbopack-cli -- \"hmr_to_eval/(Turbopack CSR|Vite)\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench -p turbopack-bench -- \"bench_hydration/Next\\.js canary Turbo RSC\"\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Plugin Dependencies\nDESCRIPTION: Command to install required dependencies for the TypeScript plugin fixture.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/development/typescript-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with create-next-app (pnpm)\nDESCRIPTION: This command uses pnpm to set up a new Next.js application from the with-shallow-routing example. The create-next-app tool scaffolds the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-shallow-routing with-shallow-routing-app\n```\n\n----------------------------------------\n\nTITLE: Copying .env.local.example to .env.local\nDESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This allows you to create a local environment configuration file without modifying the original example file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration with Promise in Next.js\nDESCRIPTION: This code snippet shows an example of a next.config.js file where the webpack function returns a Promise, which is not supported in Next.js versions prior to 12.0.10. The error arises because Next.js expects the webpack function to return the configuration directly, not a Promise that resolves to the configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/promise-in-next-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: async function (config) {\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example GitHub Pages URL\nDESCRIPTION: Example of what the URL looks like when deployed to GitHub Pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<github-user-name>.github.io/<github-project-name>/\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Auth0 App with npm\nDESCRIPTION: Command to bootstrap a Next.js application with Auth0 integration using npm and create-next-app.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example auth0 auth0-app\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Canary Release using npm\nDESCRIPTION: This command upgrades Next.js to the latest canary release using npm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@canary\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Stable Release using pnpm\nDESCRIPTION: This command upgrades Next.js to the latest stable release using pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm add next@latest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js to Stable Release using npm\nDESCRIPTION: This command upgrades Next.js to the latest stable release using npm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@latest\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Assignment\nDESCRIPTION: Appends the value of 'bar' to 'foobar' using compound assignment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfoobar += bar;\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Stencil Project\nDESCRIPTION: Commands to install project dependencies and start the Stencil development server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Buffer Pool Variables\nDESCRIPTION: Declares variables for managing the random bytes buffer pool.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet pool, poolOffset;\n```\n\n----------------------------------------\n\nTITLE: Constant Export Declaration\nDESCRIPTION: Exports a constant 'foo' referencing the value of foobar variable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = foobar;\n\n```\n\n----------------------------------------\n\nTITLE: Custom Alphabet Function\nDESCRIPTION: Creates a custom ID generator with specified alphabet and size.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet customAlphabet = (alphabet, size)=>customRandom(alphabet, size, random);\n```\n\n----------------------------------------\n\nTITLE: Module Dependency Graph\nDESCRIPTION: Mermaid diagram showing the dependency relationships between modules in different phases.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js and React Dependencies using pnpm\nDESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@11 react@17 react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Development Module Configuration\nDESCRIPTION: Development environment module configuration that initializes Turbopack and exports an empty object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.turbopack = {};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading Next.js and React Dependencies using yarn\nDESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@11 react@17 react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Get Environment without Defaults\nDESCRIPTION: Function to retrieve raw global environment configuration without default settings\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getEnvWithoutDefaults() {\n    return parseEnvironment(_globalThis);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding id to Next.js Script component\nDESCRIPTION: This code snippet demonstrates how to properly use the `next/script` component with inline JavaScript content by adding the required `id` attribute. The script tag includes inline JavaScript code that logs 'Hello world!' to the console. This resolves the error caused by missing `id` attribute.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/inline-script-id.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <Script id=\"my-script\">{`console.log('Hello world!');`}</Script>\n      <Component {...pageProps} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message: Module not found in Next.js\nDESCRIPTION: This is the error message that Next.js throws when a module (in this case, 'fs') cannot be resolved in the browser environment.  This typically happens when server-side code is inadvertently included in the client-side bundle due to incorrect import or export patterns.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nModule not found: Can't resolve 'fs' in './pages/example-b.js'\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with pnpm\nDESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-i18n-next-intl-app' using the 'with-i18n-next-intl' example. It requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app --example with-i18n-next-intl with-i18n-next-intl-app\n```\n\n----------------------------------------\n\nTITLE: Enabling pnpm for Next.js Development\nDESCRIPTION: Command to enable pnpm package manager for Next.js development. This is a prerequisite step before installing dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable pnpm\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridTemplateAreas Function\nDESCRIPTION: Re-exports the gridTemplateAreas styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { q as gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -27\n};\nexport { gridTemplateAreas };\n```\n\n----------------------------------------\n\nTITLE: Creating Notes in MDX\nDESCRIPTION: This snippet explains how to create informative notes in MDX documentation using blockquote styles, providing a structured format for conveying additional information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n> **Good to know**: This is a single line note.\n\n> **Good to know**:\n>\n> - We also use this format for multi-line notes.\n> - There are sometimes multiple items worth knowing or keeping in mind.\n```\n\n----------------------------------------\n\nTITLE: AMP HTML Link (JSX)\nDESCRIPTION: This code snippet shows how Next.js automatically insert a link to the AMP version of your page in the HTML version.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<link rel=\"amphtml\" href=\"/about.amp.html\" />\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Automatic Locale Prefixing in Next.js\nDESCRIPTION: This example shows how to opt-out of automatically handling locale prefixing when using next/link in Next.js. It's useful when you have a href that already includes the locale.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/fr/another\" locale={false}>\n      To /fr/another\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Next.js Tarball for Testing\nDESCRIPTION: Command to generate a tarball of the local Next.js version for testing in other projects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next\n```\n\n----------------------------------------\n\nTITLE: Initializing Xata in the project\nDESCRIPTION: This command initializes Xata within the newly created Next.js project, linking it to your Xata workspace. Requires the Xata CLI to be installed.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nxata init\n```\n\n----------------------------------------\n\nTITLE: Creating gridArea Styling Function\nDESCRIPTION: Defines the gridArea styling function using the style utility to handle the 'gridArea' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 27\n};\nconst gridArea = style({\n    prop: 'gridArea'\n});\nexport { gridArea };\nexport { gridArea as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Cat Variable in JavaScript\nDESCRIPTION: This snippet defines a constant `cat` with the value 'cat' and exports it using Turbopack assertions. It illustrates the process of exporting simple variables in a module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet cat = \"cat\";\\nexport { cat as e } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting NextResponse Class from Part - JavaScript\nDESCRIPTION: This snippet exports the NextResponse class from a specific TURBOPACK_PART, which may include various boilerplate or pre-processing required for the class definition. It allows modular loading and better organization of code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport { NextResponse } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export NextResponse\"\n};\n```\n\n----------------------------------------\n\nTITLE: Install Prompt Component - TypeScript\nDESCRIPTION: This React component provides a prompt for iOS users to install the app to their home screen. It checks if the device is iOS and if the app is already running in standalone mode. If the app is not already installed on an iOS device, it displays instructions on how to add it to the home screen.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction InstallPrompt() {\n  const [isIOS, setIsIOS] = useState(false)\n  const [isStandalone, setIsStandalone] = useState(false)\n\n  useEffect(() => {\n    setIsIOS(\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream\n    )\n\n    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches)\n  }, [])\n\n  if (isStandalone) {\n    return null // Don't show install button if already installed\n  }\n\n  return (\n    <div>\n      <h3>Install App</h3>\n      <button>Add to Home Screen</button>\n      {isIOS && (\n        <p>\n          To install this app on your iOS device, tap the share button\n          <span role=\"img\" aria-label=\"share icon\">\n            {' '}\n            ⎋{' '}\n          </span>\n          and then \"Add to Home Screen\"\n          <span role=\"img\" aria-label=\"plus icon\">\n            {' '}\n            ➕{' '}\n          </span>.\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default function Page() {\n  return (\n    <div>\n      <PushNotificationManager />\n      <InstallPrompt />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Complete Grid Styling System\nDESCRIPTION: Composes all the individual grid-related styling functions into a unified grid utility that can be used to apply all grid properties at once. This acts as the main export for the grid styling system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport compose from './compose';\nimport { g as gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -11\n};\nimport { h as columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nimport { i as rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport { j as gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nimport { k as gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nimport { l as gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -22\n};\nimport { m as gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -23\n};\nimport { n as gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -24\n};\nimport { o as gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -25\n};\nimport { p as gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -26\n};\nimport { q as gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -27\n};\nimport { r as gridArea } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -28\n};\nconst grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\nconst __TURBOPACK__default__export__ = grid;\nexport { __TURBOPACK__default__export__ as default };\nexport { grid as s } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { __TURBOPACK__default__export__ as t } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Exporting Another Function - JavaScript\nDESCRIPTION: This snippet defines and exports 'external2', which alters 'foobar' by appending a period to it. The export statement makes 'external2' available externally.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport function external2() {\n    foobar += \".\";\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting SpanKind from JavaScript Module\nDESCRIPTION: Module that re-exports the SpanKind enum from OpenTelemetry for use in the Next.js tracing system. SpanKind indicates the relationship between the span and its parent.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h as SpanKind } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nexport { SpanKind };\n\n```\n\n----------------------------------------\n\nTITLE: Problematic Math.random() Usage in Next.js Page Component\nDESCRIPTION: Example showing incorrect implementation of random value generation during prerendering, which causes an error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-random.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const products = await getCachedProducts()\n  const randomSeed = Math.random()\n  const randomizedProducts = randomize(products, randomSeed)\n  return <ProductsView products={randomizedProducts} />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js Net Module\nDESCRIPTION: Imports the node:net module which provides an asynchronous network API for creating stream-based TCP servers and clients.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"node:net\";\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependencies\nDESCRIPTION: Command to install all required dependencies for Next.js development using pnpm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: External Function Export 2\nDESCRIPTION: Exports a function that appends a period to foobar value.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function external2() {\n    foobar += \".\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Next.js Dependencies\nDESCRIPTION: Command to update Next.js and React dependencies to their latest versions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pnpm\nDESCRIPTION: This command runs the Vitest tests in the project using pnpm.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Crypto Module Import\nDESCRIPTION: Imports the Node.js crypto module for secure random number generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport crypto from 'crypto';\n```\n\n----------------------------------------\n\nTITLE: Development Module Merged Evaluation\nDESCRIPTION: Merged module evaluation code in development environment\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nconsole.log(a);\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: String Concatenation - Dog Variable\nDESCRIPTION: Appends exclamation mark to dog variable\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndog += \"!\";\n```\n\n----------------------------------------\n\nTITLE: Console Output - Dog Variable\nDESCRIPTION: Logs the value of dog variable to console\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(dog);\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbopack in JavaScript\nDESCRIPTION: Example of basic Turbopack configuration in a Next.js JavaScript configuration file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  turbopack: {\n    // ...\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Starting Standalone Server\nDESCRIPTION: Command to start the minimal standalone server locally.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode .next/standalone/server.js\n```\n\n----------------------------------------\n\nTITLE: Mocking style imports for Jest\nDESCRIPTION: This JavaScript module exports an empty object, `{}`. It serves as a mock for CSS or style imports in Jest tests.  By mocking style imports with an empty object, tests can avoid the complexities and side effects of real stylesheets, ensuring a cleaner and more predictable testing environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {}\n```\n\n----------------------------------------\n\nTITLE: Using Button Component in MDX\nDESCRIPTION: Shows how to use the imported Button component within MDX content with children text.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>👋 Hello</Button>\n```\n\n----------------------------------------\n\nTITLE: Checking for React.unstable_postpone Availability in Next.js\nDESCRIPTION: Imports React and checks for the availability of the unstable_postpone function, exporting the result as a boolean.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nconst hasPostpone = typeof React.unstable_postpone === 'function';\nexport { hasPostpone as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Declaring and Exporting Constants with Assertions in JavaScript\nDESCRIPTION: This part declares a constant 'dog' and exports it using a default import assert. It uses Turbopack variables for module exportation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dog = \"dog\";\nexport { dog as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Regenerator Runtime Globally in CommonJS\nDESCRIPTION: This code snippet illustrates how to ensure that 'regeneratorRuntime' is defined globally in a CommonJS environment. By requiring 'regenerator-runtime/runtime', it allows the use of generator and async functions without needing to import the runtime in every file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// CommonJS\nrequire(\"regenerator-runtime/runtime\");\n```\n\n----------------------------------------\n\nTITLE: Crypto Pool Filling Function in JavaScript\nDESCRIPTION: Implements a function 'fillPool' that manages a buffer of random bytes using the Node.js 'crypto' library. It dynamically allocates or refills the pool to ensure sufficient bytes for randomness. The pool size multiplier is set to 128, a key parameter influencing the total buffer allocation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { c as poolOffset } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -6\\n};\\nimport { d as pool } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -5\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 0\\n};\\nimport crypto from 'crypto';\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 2\\n};\\nconst POOL_SIZE_MULTIPLIER = 128;\\nlet fillPool = (bytes)=>{\\n    if (!pool || pool.length < bytes) {\\n        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\\n        crypto.randomFillSync(pool);\\n        poolOffset = 0;\\n    } else if (poolOffset + bytes > pool.length) {\\n        crypto.randomFillSync(pool);\\n        poolOffset = 0;\\n    }\\n    poolOffset += bytes;\\n};\\nexport { POOL_SIZE_MULTIPLIER as e } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\\nexport { fillPool as f } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: Variable Copy Declaration\nDESCRIPTION: Creates a copy of foobar value in new variable foobarCopy.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet foobarCopy = foobar;\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Module Count in Benchmark\nDESCRIPTION: Environment variable configuration to modify the number of modules tested in the benchmark, allowing scalable performance testing\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nTURBOPACK_BENCH_COUNTS=5000 cargo bench -p turbopack-bench\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Stencil Components\nDESCRIPTION: Command to execute unit tests for the Stencil components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Local Constant Declaration\nDESCRIPTION: Declares a local constant 'bar' with string value.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bar = \"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: Console Log Statement\nDESCRIPTION: Logs the value of foobarCopy to the console.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(foobarCopy);\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Import with Environment Check\nDESCRIPTION: This conditional import is contingent upon the NEXT_RUNTIME environment variable and attempts to load an OpenTelemetry API package. If the preferred package isn't available, it defaults to a compiled version. This approach requires environment configuration and Node.js API management familiarity.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as api } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nif (process.env.NEXT_RUNTIME === 'edge') {\n    api = require('@opentelemetry/api');\n} else {\n    try {\n        api = require('@opentelemetry/api');\n    } catch (err) {\n        api = require('next/dist/compiled/@opentelemetry/api');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Assignment\nDESCRIPTION: Assigns an empty arrow function to variable 'a'\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\na = ()=>{};\n```\n\n----------------------------------------\n\nTITLE: Cat Variable Export\nDESCRIPTION: Declares and exports a cat string variable\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport let cat = \"cat\";\n```\n\n----------------------------------------\n\nTITLE: Console Log Statement\nDESCRIPTION: Logs variable 'a' to the console\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(a);\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Next.js\nDESCRIPTION: This snippet imports a button component from a relative path and uses it within a Next.js page. It demonstrates the use of MDX to render JSX components seamlessly in a markdown-like syntax. The button simply displays the text 'Hello' with an emoji.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Button from \\\"../components/button.js\\\";\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Configuration for Next.js\nDESCRIPTION: This snippet demonstrates the updated Next.js configuration where 'future.webpack5' is replaced by 'webpack5'. This change is crucial for ensuring that Next.js applications use the latest webpack features and optimizations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/future-webpack5-moved-to-webpack5.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack5: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Error Object Property Definition in Javascript\nDESCRIPTION: Code showing how the plugin transforms Error objects to include a non-enumerable but configurable __NEXT_ERROR_CODE property. This allows for error tracking while keeping the error code hidden from console logs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/next-error-code-swc-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty(new Error(...), \"__NEXT_ERROR_CODE\", { value: $code, enumerable: false, configurable: true })\n```\n\n----------------------------------------\n\nTITLE: Importing Core Dependencies\nDESCRIPTION: Imports essential dependencies including React and custom error handling components\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout';\nimport { getPathname } from '../../lib/url';\n```\n\n----------------------------------------\n\nTITLE: Cloning the Next.js Repository\nDESCRIPTION: GitHub CLI command to clone the Next.js repository with optimizations for faster cloning, downloading only recent commits from the canary branch.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone vercel/next.js -- --filter=blob:none --branch canary --single-branch\n```\n\n----------------------------------------\n\nTITLE: Defining a Fetch Function in JavaScript\nDESCRIPTION: This snippet defines an empty function named 'fetch'. This function can later be implemented to perform specific operations related to stream or data fetching.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetch() {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Function stringifyCookie - JavaScript\nDESCRIPTION: This snippet imports and exports the stringifyCookie utility function, which is used for formatting cookie values into a proper string format suitable for HTTP headers. It ensures that the cookies can be transmitted correctly between the server and client.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { stringifyCookie } from '../../web/spec-extension/cookies';\nexport { stringifyCookie as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack in Next.js\nDESCRIPTION: This code snippet modifies the Webpack configuration in a Next.js application within the `next.config.js` file. It shows how to push a new plugin to the Webpack configuration and stresses the importance of returning the modified configuration object. The dependencies include Node.js and Webpack, with parameters such as `config`, `buildId`, `dev`, `isServer`, `defaultLoaders` and `webpack` being used within the function. The modified configuration should be returned to avoid errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/undefined-webpack-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {\n    // Note: we provide webpack above so you should not `require` it\n    // Perform customizations to webpack config\n    config.plugins.push(new webpack.IgnorePlugin(/\\/__tests__\\//))\n\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running home app with npm\nDESCRIPTION: These commands navigate to the `home` directory, install dependencies using npm, and start the development server. The home app will be accessible at http://localhost:3000.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd home\nnpm install && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 8 Implementation\nDESCRIPTION: This module imports 'foobarCopy', Part 1, Part 7, and 'other', then logs the value of 'foobarCopy'. It demonstrates Turbopack's module evaluation process with console output.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nconsole.log(foobarCopy);\nimport \"other\";\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Uncached Database Query in generateViewport\nDESCRIPTION: Example showing problematic implementation where generateViewport accesses uncached database data.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { db } from './db'\n\nexport async function generateViewport() {\n  const { width, initialScale } = await db.query('viewport-size')\n  return {\n    width,\n    initialScale,\n  }\n}\n\nexport default async function Layout({ children }) {\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Next.js from Source with pnpm\nDESCRIPTION: Command to build the entire Next.js project including all type definitions and packages. This triggers the taskr build process that handles compilation, bundling, and type generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing Named Export from Module in JavaScript\nDESCRIPTION: This snippet demonstrates importing a named export 'baz' from a local module file. It's a hoisted import statement with potential side effects.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { baz } from './module';\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Image Domains in Next.js\nDESCRIPTION: This code snippet shows how to configure allowed image domains in the `next.config.js` file. This is used to specify the hostnames from which external images can be loaded. Note that this is deprecated and `remotePatterns` should be used instead.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Userland Module\nDESCRIPTION: Imports all exports from the userland module and re-exports them. This snippet demonstrates how user-defined code is made available to other parts of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nexport { userland as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the migration guide documentation page, defining the title, navigation title, description, and source path.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/migrating/from-create-react-app.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to migrate from Create React App to Next.js\nnav_title: Create React App\ndescription: Learn how to migrate your existing React application from Create React App to Next.js.\nsource: app/guides/migrating/from-create-react-app\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting All Grid-related Functions\nDESCRIPTION: Creates a unified export of all individual grid-related styling functions and the composed grid utility, allowing users to import either individual functions or the complete system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexport { gap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gap\"\n};\nexport { columnGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export columnGap\"\n};\nexport { rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export rowGap\"\n};\nexport { gridArea } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridArea\"\n};\nexport { default } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export default\"\n};\nexport { gridAutoColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridAutoColumns\"\n};\nexport { gridAutoFlow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridAutoFlow\"\n};\nexport { gridAutoRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridAutoRows\"\n};\nexport { gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridColumn\"\n};\nexport { gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridRow\"\n};\nexport { gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridTemplateAreas\"\n};\nexport { gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridTemplateColumns\"\n};\nexport { gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export gridTemplateRows\"\n};\n```\n\n----------------------------------------\n\nTITLE: NextResponse Class Implementation\nDESCRIPTION: Core implementation of NextResponse class with cookie handling, middleware support, and utility methods for redirects and rewrites\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport class NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        const headers = this.headers;\n        const cookies = new ResponseCookies(headers);\n        const cookiesProxy = new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case 'delete':\n                    case 'set':\n                        {\n                            return (...args)=>{\n                                const result = Reflect.apply(target[prop], target, args);\n                                const newHeaders = new Headers(headers);\n                                if (result instanceof ResponseCookies) {\n                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));\n                                }\n                                handleMiddlewareField(init, newHeaders);\n                                return result;\n                            };\n                        }\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n        this[INTERNALS] = {\n            cookies: cookiesProxy,\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeOutgoingHttpHeaders(headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for('edge-runtime.inspect.custom')]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === 'object' ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set('Location', validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-rewrite', validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-next', '1');\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defined Internal Function - JavaScript\nDESCRIPTION: A function 'internal' that calls the imported 'upper' function with 'foobar' as an argument. It illustrates how to define and use functions that depend on imported modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction internal() {\n    return upper(foobar);\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Next.js Middleware Implementation\nDESCRIPTION: Shows the old event-based Middleware implementation that is now deprecated. This version uses the event parameter and event.respondWith() pattern which should no longer be used.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-new-signature.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(event) {\n  if (event.request.nextUrl.pathname === '/blocked') {\n    event.respondWith(\n      new NextResponse(null, {\n        status: 403,\n      })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module import in Javascript\nDESCRIPTION: This Javascript snippet imports a module named './index'. It is assumed that the module exports a class or functions to be used in the current module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"./index\\\";\n\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 using npm\nDESCRIPTION: Command to upgrade Next.js to version 9 using npm package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@9\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 using yarn\nDESCRIPTION: Command to upgrade Next.js to version 9 using yarn package manager.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@9\n```\n\n----------------------------------------\n\nTITLE: Module Part 3 and Merged Evaluation\nDESCRIPTION: Empty export statement for module evaluation\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Starting Temporal Worker\nDESCRIPTION: Command to start the Temporal worker process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-worker\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Token Access After Migration\nDESCRIPTION: Corrected implementation showing proper async/await usage for token access in Next.js 15.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Page() {\n  return (await cookies()).get(token)\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getToken } from '.../token-utils'\n\nexport default async function Page() {\n  const token = await getToken();\n  validateToken(token)\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Paragraph in MDX\nDESCRIPTION: Demonstrates embedding a basic HTML paragraph tag within an MDX document\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>Have p tag!</p>\n```\n\n----------------------------------------\n\nTITLE: Building Next.js in Release Mode\nDESCRIPTION: Command to generate a tarball of the local Next.js version built in release mode for testing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next --release\n```\n\n----------------------------------------\n\nTITLE: Grid System Composition\nDESCRIPTION: Composes all grid-related style functions into a single unified grid system utility.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\n\nexport default grid;\n```\n\n----------------------------------------\n\nTITLE: Create Next.js app with Flow (npm)\nDESCRIPTION: This command uses npm to create a new Next.js application with Flow, using the 'with-flow' example.  It requires npm to be installed.  The new application will be created in a directory named 'with-flow-app'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-flow with-flow-app\n```\n\n----------------------------------------\n\nTITLE: Running Snapshot Tests with nextest\nDESCRIPTION: This command uses `cargo nextest` to run snapshot tests. The `-E` flag specifies a filter expression to select only tests that contain the substring 'test(snapshot)'. This allows running only the snapshot tests.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo nextest run -E 'test(snapshot)'\n```\n\n----------------------------------------\n\nTITLE: Installing react-is Package with Yarn and NPM\nDESCRIPTION: Command-line instructions for installing the react-is package using either Yarn or NPM package managers.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Yarn\nyarn add react-is\n\n# NPM\nnpm install react-is\n```\n\n----------------------------------------\n\nTITLE: Console Log Output\nDESCRIPTION: Logging variable a to console\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(a);\n```\n\n----------------------------------------\n\nTITLE: Exporting isBubbledError Utility from JavaScript Module\nDESCRIPTION: Module that re-exports the isBubbledError utility function for checking error types within the Next.js application. This enables consistent error type checking throughout the codebase.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t as isBubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nexport { isBubbledError };\n\n```\n\n----------------------------------------\n\nTITLE: Code Block Example (React Component)\nDESCRIPTION: This TypeScript snippet shows a minimum working example of a React component using the Next.js `<Link>` component. It includes the necessary `import` statement and the component itself, ensuring that the code can be copied and pasted and run without additional configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Registry - JavaScript\nDESCRIPTION: This JavaScript snippet sets up a StyledComponentsRegistry similarly to the TypeScript version, ensuring correct handling of styles in a Next.js environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Object 'a' with Shared State in JavaScript\nDESCRIPTION: Defines and exports an object 'a', which includes the shared state and a string property. It depends on 'shared' being defined previously. This involves exporting the state configuration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const a = {\n    shared,\n    a: \"aaaaaaaaaaa\"\n};\n```\n\n----------------------------------------\n\nTITLE: Module Part 3: DynamicServerError Export\nDESCRIPTION: This JavaScript snippet exports `DynamicServerError` from the `hooks-server-context` module. This error is likely used to indicate situations where dynamic behavior is encountered during static generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nexport { DynamicServerError as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Snapshot test (App Router)\nDESCRIPTION: This snippet shows an example of a snapshot test for the Page component when using the App Router.  It renders the Page component and compares the rendered output to a stored snapshot.  If there are any unexpected changes, the test will fail.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '@testing-library/react'\nimport Page from '../app/page'\n\nit('renders homepage unchanged', () => {\n  const { container } = render(<Page />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 3 Implementation\nDESCRIPTION: Defines and exports the 'foobar' variable. This part initializes a string variable and exports it as 'a', demonstrating Turbopack's variable declaration and named export functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nlet foobar = \"foo\";\nexport { foobar as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Tracing Components with Turbopack Integration (JS)\nDESCRIPTION: Exports various tracing-related components from other parts of the application using Turbopack's module system. This includes getTracer, SpanStatusCode, BubbledError, SpanKind, and isBubbledError.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport { getTracer } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export getTracer\"\n};\nexport { SpanStatusCode } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export SpanStatusCode\"\n};\nexport { BubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export BubbledError\"\n};\nexport { SpanKind } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export SpanKind\"\n};\nexport { isBubbledError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export isBubbledError\"\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Metadata (JSX - Pages Router)\nDESCRIPTION: This JavaScript code imports an MDX file and its exported metadata in a Next.js application using the Pages Router. The metadata is logged to the console and the MDX content is rendered, showing how to access and utilize data from the MDX file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming App Router Route Segment Config Runtime Value\nDESCRIPTION: Codemod to transform the Route Segment Config 'runtime' value from 'experimental-edge' to 'edge' in Next.js App Router.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const runtime = 'experimental-edge'\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const runtime = 'edge'\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable z and Assigning x Value in Javascript\nDESCRIPTION: This snippet declares a variable 'z' and assigns it the current value of variable 'x'. This also demonstrates variable assignment and dependency.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet z = x;\n```\n\n----------------------------------------\n\nTITLE: Component Case Sensitivity Example - React/JSX\nDESCRIPTION: Demonstrates how incorrect casing in import paths can cause module not found errors in React components.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MyComponent() {\n  return <h1>Hello</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Note how `components/MyComponent` exists but `Mycomponent` without the capital `c` is imported\nimport MyComponent from '../components/Mycomponent'\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional DevTool in Next.js Webpack\nDESCRIPTION: Demonstrates how to safely configure webpack devtool settings by applying custom configurations only in production builds. This prevents performance regressions in development mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/improper-devtool.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: (config, options) => {\n    if (!options.dev) {\n      config.devtool = options.isServer ? false : 'your-custom-devtool'\n    }\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Another Element to Order Array in JavaScript\nDESCRIPTION: This code snippet pushes 'c' to the 'order' array, showcasing another side effect operation on the order collection. The 'order' array must be declared beforehand.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\norder.push(\"c\");\n```\n\n----------------------------------------\n\nTITLE: Building Dependency Graph for Phase 3 with Mermaid\nDESCRIPTION: This Mermaid code constructs the dependency graph for Phase 3, highlighting the same nodes and interactions with an extension illustrating additional dependencies compared to Phase 2. The graph visually represents relationships central for process continuity in development. Inputs are graph nodes and edges; output is a visual graph representation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item4;\n    Item2;\n    Item5;\n    Item3;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item29[\"export structuredError\"];\n    Item30;\n    Item30[\"export IPC\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item9 --> Item3;\n    Item9 -.-> Item6;\n    Item9 -.-> Item5;\n    Item9 -.-> Item4;\n    Item9 -.-> Item7;\n    Item10 --> Item8;\n    Item10 --> Item9;\n    Item10 -.-> Item6;\n    Item10 -.-> Item5;\n    Item10 -.-> Item4;\n    Item10 -.-> Item7;\n    Item11 --> Item10;\n    Item11 -.-> Item6;\n    Item11 -.-> Item5;\n    Item11 -.-> Item4;\n    Item11 -.-> Item7;\n    Item12 --> Item11;\n    Item12 -.-> Item6;\n    Item12 -.-> Item5;\n    Item12 -.-> Item4;\n    Item12 -.-> Item7;\n    Item13 --> Item12;\n    Item13 -.-> Item6;\n    Item13 -.-> Item5;\n    Item13 -.-> Item4;\n    Item13 -.-> Item7;\n    Item14 --> Item12;\n    Item14 --> Item13;\n    Item14 -.-> Item6;\n    Item14 -.-> Item5;\n    Item14 -.-> Item4;\n    Item14 -.-> Item7;\n    Item15 --> Item12;\n    Item15 --> Item14;\n    Item15 -.-> Item6;\n    Item15 -.-> Item5;\n    Item15 -.-> Item4;\n    Item15 -.-> Item7;\n    Item16 --> Item12;\n    Item16 --> Item15;\n    Item16 -.-> Item6;\n    Item16 -.-> Item5;\n    Item16 -.-> Item4;\n    Item16 -.-> Item7;\n    Item17 --> Item12;\n    Item17 --> Item16;\n    Item17 -.-> Item6;\n    Item17 -.-> Item5;\n    Item17 -.-> Item4;\n    Item17 -.-> Item7;\n    Item18 --> Item12;\n    Item18 --> Item17;\n    Item18 -.-> Item6;\n    Item18 -.-> Item5;\n    Item18 -.-> Item4;\n    Item18 -.-> Item7;\n    Item19 --> Item12;\n    Item19 --> Item18;\n    Item19 -.-> Item6;\n    Item19 -.-> Item5;\n    Item19 -.-> Item4;\n    Item19 -.-> Item7;\n    Item20 --> Item12;\n    Item20 --> Item19;\n    Item20 -.-> Item6;\n    Item20 -.-> Item5;\n    Item20 -.-> Item4;\n    Item20 -.-> Item7;\n    Item21 --> Item12;\n    Item21 --> Item20;\n    Item21 -.-> Item6;\n    Item21 -.-> Item5;\n    Item21 -.-> Item4;\n    Item21 -.-> Item7;\n    Item22 --> Item12;\n    Item22 --> Item21;\n    Item22 -.-> Item6;\n    Item22 -.-> Item5;\n    Item22 -.-> Item4;\n    Item22 -.-> Item7;\n    Item23 --> Item12;\n    Item23 --> Item22;\n    Item23 -.-> Item6;\n    Item23 -.-> Item5;\n    Item23 -.-> Item4;\n    Item23 -.-> Item7;\n    Item24 --> Item12;\n    Item24 --> Item23;\n    Item24 -.-> Item6;\n    Item24 -.-> Item5;\n    Item24 -.-> Item4;\n    Item24 -.-> Item7;\n    Item25 --> Item12;\n    Item25 --> Item24;\n    Item25 -.-> Item6;\n    Item25 -.-> Item5;\n    Item25 -.-> Item4;\n    Item25 -.-> Item7;\n    Item26 --> Item12;\n    Item26 --> Item25;\n    Item26 -.-> Item6;\n    Item26 -.-> Item5;\n    Item26 -.-> Item4;\n    Item26 -.-> Item7;\n    Item27 --> Item12;\n    Item27 --> Item26;\n    Item27 -.-> Item6;\n    Item27 -.-> Item5;\n    Item27 -.-> Item4;\n    Item27 -.-> Item7;\n    Item28 --> Item12;\n    Item28 --> Item27;\n    Item28 -.-> Item6;\n    Item28 -.-> Item5;\n    Item28 -.-> Item4;\n    Item28 -.-> Item7;\n    Item29 --> Item7;\n    Item30 --> Item11;\n    Item30 --> Item10;\n    Item7 --> Item6;\n    Item7 --> Item5;\n    Item8 --> Item4;\n    Item8 --> Item7;\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Patterns in Next.js Config\nDESCRIPTION: Example configuration for next.config.js that demonstrates how to properly set up localPatterns for the next/image component. This configuration allows image URLs matching the specified pathname pattern to be processed by the image optimization feature.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-localpatterns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    localPatterns: [\n      {\n        pathname: '/assets/**',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Console Output for TurboPack in JavaScript\nDESCRIPTION: Improves console output by wrapping standard console methods with TurboPack-specific formatting. Adds stack traces to most console methods and surrounds output with special markers that can be recognized by the TurboPack system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nconst improveConsole = (name, stream, addStack)=>{\n    const original = console[name];\n    const stdio = process[stream];\n    console[name] = (...args)=>{\n        stdio.write(`TURBOPACK_OUTPUT_B\\n`);\n        original(...args);\n        if (addStack) {\n            const stack = new Error().stack?.replace(/^.+\\n.+\\n/, \"\") + \"\\n\";\n            stdio.write(\"TURBOPACK_OUTPUT_S\\n\");\n            stdio.write(stack);\n        }\n        stdio.write(\"TURBOPACK_OUTPUT_E\\n\");\n    };\n};\nimproveConsole(\"error\", \"stderr\", true);\nimproveConsole(\"warn\", \"stderr\", true);\nimproveConsole(\"count\", \"stdout\", true);\nimproveConsole(\"trace\", \"stderr\", false);\nimproveConsole(\"log\", \"stdout\", true);\nimproveConsole(\"group\", \"stdout\", true);\nimproveConsole(\"groupCollapsed\", \"stdout\", true);\nimproveConsole(\"table\", \"stdout\", true);\nimproveConsole(\"debug\", \"stdout\", true);\nimproveConsole(\"info\", \"stdout\", true);\nimproveConsole(\"dir\", \"stdout\", true);\nimproveConsole(\"dirxml\", \"stdout\", true);\nimproveConsole(\"timeEnd\", \"stdout\", true);\nimproveConsole(\"timeLog\", \"stdout\", true);\nimproveConsole(\"timeStamp\", \"stdout\", true);\nimproveConsole(\"assert\", \"stderr\", true);\nexport { improveConsole as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Generating Local Package Builds\nDESCRIPTION: Command to locally generate builds for each package in the Next.js repository.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next\n```\n\n----------------------------------------\n\nTITLE: Defining Internal and External Functions in JavaScript Part 9\nDESCRIPTION: The snippet defines internal and external functions that manipulate and combine imported variables. It involves nested function calls directly contributing to TurboPack variable usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { upper } from \"module\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nfunction internal() {\n    return upper(foobar);\n}\nfunction external1() {\n    return internal() + foobar;\n}\nexport { external1 };\nexport { internal as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { external1 as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Dynamic Rendering Utilities (JavaScript)\nDESCRIPTION: This module exports a collection of functions related to dynamic rendering and static generation, including `createPrerenderState`, `markCurrentScopeAsDynamic`, `trackDynamicDataAccessed`, `Postpone`, `trackDynamicFetch`, `usedDynamicAPIs`, `formatDynamicAPIAccesses`, and `createPostponedAbortSignal`. These functions are essential for managing dynamic content and optimization during static site generation in Next.js.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport { createPrerenderState } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export createPrerenderState\\\"\n};\nexport { markCurrentScopeAsDynamic } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export markCurrentScopeAsDynamic\\\"\n};\nexport { trackDynamicDataAccessed } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export trackDynamicDataAccessed\\\"\n};\nexport { Postpone } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export Postpone\\\"\n};\nexport { trackDynamicFetch } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export trackDynamicFetch\\\"\n};\nexport { usedDynamicAPIs } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export usedDynamicAPIs\\\"\n};\nexport { formatDynamicAPIAccesses } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export formatDynamicAPIAccesses\\\"\n};\nexport { createPostponedAbortSignal } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export createPostponedAbortSignal\\\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Combined Constants with Export Assertions\nDESCRIPTION: This snippet exports the constants 'CHIMERA' and 'DOG' directly from the imports with assertions to ensure proper structure in module exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport { CHIMERA } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export CHIMERA\"\n};\nexport { DOG } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export DOG\"\n};\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Variable Name Instead of Module\nDESCRIPTION: Demonstrates the correct way to declare a module-like variable by using a different variable name to avoid conflicts with the reserved 'module' keyword\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-assign-module-variable.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet myModule = {...}\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression in Next.js\nDESCRIPTION: Configuration to disable default compression in a Next.js application. Recommended only if compression is already configured on the server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/compress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compress: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Unknown Source\nDESCRIPTION: Attempting to dynamically import a module with an unspecified source, which triggers a linting warning about high dynamism\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1001__ import(FreeVar(Math)[__quo__ra-759cc1.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport(unknown);\n```\n\n----------------------------------------\n\nTITLE: Exporting Object with Variable in Javascript\nDESCRIPTION: This code exports a constant `a` as an object containing `shared` and a string. This demonstrates how variables are exported as part of an object.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const a = {\n    shared,\n    a: \"aaaaaaaaaaa\"\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Modules Using Deprecated next/dynamic Pattern\nDESCRIPTION: Example showing the deprecated pattern of loading multiple components simultaneously using the modules and render pattern in next/dynamic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-modules.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst HelloBundle = dynamic({\n  modules: () => {\n    const components = {\n      Hello1: () => import('../components/hello1').then((m) => m.default),\n      Hello2: () => import('../components/hello2').then((m) => m.default),\n    }\n\n    return components\n  },\n  render: (props, { Hello1, Hello2 }) => (\n    <div>\n      <h1>{props.title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  ),\n})\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n\n----------------------------------------\n\nTITLE: Importing NextResponse from next/server\nDESCRIPTION: Imports the NextResponse utility from Next.js server package for handling API responses\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n```\n\n----------------------------------------\n\nTITLE: Referencing File Path in Next.js Repository\nDESCRIPTION: This code snippet shows how to reference a specific file path within the Next.js repository using markdown syntax.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/triaging.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`examples`](https://github.com/vercel/next.js/tree/canary/examples)\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridTemplateColumns Function\nDESCRIPTION: Re-exports the gridTemplateColumns styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { o as gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -25\n};\nexport { gridTemplateColumns };\n```\n\n----------------------------------------\n\nTITLE: Creating Playwright tests with MSW\nDESCRIPTION: This snippet demonstrates how to use MSW (Mock Service Worker) with Playwright in Next.js's experimental test mode to mock HTTP requests. It defines a test that sets up MSW handlers to intercept requests to `http://my-db/product/shoe` and return a mock JSON response, while allowing other requests to passthrough.  It also shows how to override MSW handlers within a specific test.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  test,\n  expect,\n  http,\n  HttpResponse,\n  passthrough,\n} from 'next/experimental/testmode/playwright/msw'\n\ntest.use({\n  mswHandlers: [\n    [\n      http.get('http://my-db/product/shoe', () => {\n        return HttpResponse.json({\n          title: 'A shoe',\n        })\n      }),\n      // allow all non-mocked routes to pass through\n      http.all('*', () => {\n        return passthrough()\n      }),\n    ],\n    { scope: 'test' }, // or 'worker'\n  ],\n})\n\ntest('/product/shoe', async ({ page, msw }) => {\n  msw.use(\n    http.get('http://my-db/product/boot', () => {\n      return HttpResponse.json({\n        title: 'A boot',\n      })\n    })\n  )\n\n  await page.goto('/product/boot')\n\n  await expect(page.locator('body')).toHaveText(/Boot/)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Phase Graphs in Mermaid\nDESCRIPTION: This mermaid diagram captures different phases of module export operations, illustrating relationships among items like 'export BubbledError' and 'export SpanKind'. It is used to visualize transitions and interactions within the module's lifecycle, containing node connections denoting dependencies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item18[\"export BubbledError\"];\n    Item19;\n    Item19[\"export isBubbledError\"];\n    Item20;\n    Item20[\"export getTracer\"];\n    Item21;\n    Item21[\"export SpanStatusCode\"];\n    Item22;\n    Item22[\"export SpanKind\"];\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated User Agent Access in Next.js Middleware\nDESCRIPTION: Example showing the deprecated method of accessing user agent information directly through req.ua in Next.js middleware. This approach is no longer supported and needs to be updated.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-user-agent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Final Merged Module Evaluation in JavaScript with Turbopack\nDESCRIPTION: The final merged module evaluation that imports 'foobarCopy', Parts 1 and 7, and 'other'. It logs the value of 'foobarCopy' and exports nothing, representing the bundled result of Turbopack's processing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 7\n};\nimport \"other\";\nconsole.log(foobarCopy);\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Building Dependency Graph for Phase 4 with Mermaid\nDESCRIPTION: In this phase, the Mermaid diagram extends the portrayal of item dependencies by following similar syntax patterns as previous phases, with nuanced connections observed in components. This snippet is key in documenting comprehensive system structures visually. Node and edge inputs enhance visualization; outputs consolidate understanding into diagrammatic forms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item4;\n    Item2;\n    Item5;\n    Item3;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item29[\"export structuredError\"];\n    Item30;\n    Item30[\"export IPC\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item9 --> Item3;\n    Item9 -.-> Item6;\n    Item9 -.-> Item5;\n    Item9 -.-> Item4;\n    Item9 -.-> Item7;\n    Item10 --> Item8;\n    Item10 --> Item9;\n    Item10 -.-> Item6;\n    Item10 -.-> Item5;\n    Item10 -.-> Item4;\n    Item10 -.-> Item7;\n    Item11 --> Item10;\n    Item11 -.-> Item6;\n    Item11 -.-> Item5;\n    Item11 -.-> Item4;\n    Item11 -.-> Item7;\n    Item12 --> Item11;\n    Item12 -.-> Item6;\n    Item12 -.-> Item5;\n    Item12 -.-> Item4;\n    Item12 -.-> Item7;\n    Item13 --> Item12;\n    Item13 -.-> Item6;\n    Item13 -.-> Item5;\n    Item13 -.-> Item4;\n    Item13 -.-> Item7;\n    Item14 --> Item12;\n    Item14 --> Item13;\n    Item14 -.-> Item6;\n    Item14 -.-> Item5;\n    Item14 -.-> Item4;\n    Item14 -.-> Item7;\n    Item15 --> Item12;\n    Item15 --> Item14;\n    Item15 -.-> Item6;\n    Item15 -.-> Item5;\n    Item15 -.-> Item4;\n    Item15 -.-> Item7;\n    Item16 --> Item12;\n    Item16 --> Item15;\n    Item16 -.-> Item6;\n    Item16 -.-> Item5;\n    Item16 -.-> Item4;\n    Item16 -.-> Item7;\n    Item17 --> Item12;\n    Item17 --> Item16;\n    Item17 -.-> Item6;\n    Item17 -.-> Item5;\n    Item17 -.-> Item4;\n    Item17 -.-> Item7;\n    Item18 --> Item12;\n    Item18 --> Item17;\n    Item18 -.-> Item6;\n    Item18 -.-> Item5;\n    Item18 -.-> Item4;\n    Item18 -.-> Item7;\n    Item19 --> Item12;\n    Item19 --> Item18;\n    Item19 -.-> Item6;\n    Item19 -.-> Item5;\n    Item19 -.-> Item4;\n    Item19 -.-> Item7;\n    Item20 --> Item12;\n    Item20 --> Item19;\n    Item20 -.-> Item6;\n    Item20 -.-> Item5;\n    Item20 -.-> Item4;\n    Item20 -.-> Item7;\n    Item21 --> Item12;\n    Item21 --> Item20;\n    Item21 -.-> Item6;\n    Item21 -.-> Item5;\n    Item21 -.-> Item4;\n    Item21 -.-> Item7;\n    Item22 --> Item12;\n    Item22 --> Item21;\n    Item22 -.-> Item6;\n    Item22 -.-> Item5;\n    Item22 -.-> Item4;\n    Item22 -.-> Item7;\n    Item23 --> Item12;\n    Item23 --> Item22;\n    Item23 -.-> Item6;\n    Item23 -.-> Item5;\n    Item23 -.-> Item4;\n    Item23 -.-> Item7;\n    Item24 --> Item12;\n    Item24 --> Item23;\n    Item24 -.-> Item6;\n    Item24 -.-> Item5;\n    Item24 -.-> Item4;\n    Item24 -.-> Item7;\n    Item25 --> Item12;\n    Item25 --> Item24;\n    Item25 -.-> Item6;\n    Item25 -.-> Item5;\n    Item25 -.-> Item4;\n    Item25 -.-> Item7;\n    Item26 --> Item12;\n    Item26 --> Item25;\n    Item26 -.-> Item6;\n    Item26 -.-> Item5;\n    Item26 -.-> Item4;\n    Item26 -.-> Item7;\n    Item27 --> Item12;\n    Item27 --> Item26;\n    Item27 -.-> Item6;\n    Item27 -.-> Item5;\n    Item27 -.-> Item4;\n    Item27 -.-> Item7;\n    Item28 --> Item12;\n    Item28 --> Item27;\n    Item28 -.-> Item6;\n    Item28 -.-> Item5;\n    Item28 -.-> Item4;\n    Item28 -.-> Item7;\n    Item29 --> Item7;\n    Item30 --> Item11;\n    Item30 --> Item10;\n    Item7 --> Item6;\n    Item7 --> Item5;\n    Item8 --> Item4;\n    Item8 --> Item7;\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript Declaration Files\nDESCRIPTION: Command to compile declaration files from TypeScript, which needs to be run periodically if types get outdated during development.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm types\n```\n\n----------------------------------------\n\nTITLE: Implementing a Shared Layout Component in Next.js\nDESCRIPTION: A reusable layout component that includes navigation and footer components. This pattern allows for consistent UI elements across multiple pages while rendering page-specific content via the children prop.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Navbar from './navbar'\nimport Footer from './footer'\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <Navbar />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting run function in Javascript (Turbopack)\nDESCRIPTION: This JavaScript code exports the `run` function from a Turbopack part. The assertion `__turbopack_part__: \"export run\"` is specific to Turbopack, indicating that this part contributes to exporting the `run` function.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport { run } from \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: \\\"export run\\\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Acceptable Image Formats in Next.js\nDESCRIPTION: This code snippet shows how to configure acceptable image formats in `next.config.js`. The Image Optimization API uses the browser's `Accept` header to determine the best output format. The order of formats in the array matters; the first match is used.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Complete NextResponse Implementation with Middleware Support\nDESCRIPTION: Full implementation of the NextResponse class which extends the standard Response object with Next.js specific functionality. Includes utilities for handling redirects, rewrites, cookies, custom inspection, and middleware operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validateURL } from '../utils';\nimport { NextURL } from '../next-url';\nimport { toNodeOutgoingHttpHeaders } from '../utils';\nimport { ResponseCookies } from './cookies';\nimport { stringifyCookie } from '../../web/spec-extension/cookies';\nimport { ReflectAdapter } from './adapters/reflect';\nimport '../../web/spec-extension/cookies';\nimport '../next-url';\nimport '../utils';\nimport './adapters/reflect';\nimport './cookies';\nconst INTERNALS = Symbol('internal response');\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error('request.headers must be an instance of Headers');\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set('x-middleware-request-' + key, value);\n            keys.push(key);\n        }\n        headers.set('x-middleware-override-headers', keys.join(','));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        const headers = this.headers;\n        const cookies = new ResponseCookies(headers);\n        const cookiesProxy = new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case 'delete':\n                    case 'set':\n                        {\n                            return (...args)=>{\n                                const result = Reflect.apply(target[prop], target, args);\n                                const newHeaders = new Headers(headers);\n                                if (result instanceof ResponseCookies) {\n                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));\n                                }\n                                handleMiddlewareField(init, newHeaders);\n                                return result;\n                            };\n                        }\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n        this[INTERNALS] = {\n            cookies: cookiesProxy,\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeOutgoingHttpHeaders(headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for('edge-runtime.inspect.custom')]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === 'object' ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set('Location', validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-rewrite', validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set('x-middleware-next', '1');\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\nexport { NextResponse };\nexport { INTERNALS as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { REDIRECTS as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { handleMiddlewareField as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { NextResponse as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Renaming Environment File in Markdown\nDESCRIPTION: Instructions for renaming the environment file and adding required tokens. This step is crucial for setting up the benchmarking script with the necessary Vercel credentials.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRename the provided `./env.local` file to `./env` and fill in the required `VERCEL_TEST_TOKEN` and `VERCEL_TEST_TEAM` values. You can find and generate those from vercel.com.\n```\n\n----------------------------------------\n\nTITLE: Grid Properties Implementation\nDESCRIPTION: Defines style-based property handlers for various grid properties like gridColumn, gridRow, gridAutoFlow etc.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const gridColumn = style({\n    prop: 'gridColumn'\n});\n\nexport const gridRow = style({\n    prop: 'gridRow'\n});\n\nexport const gridAutoFlow = style({\n    prop: 'gridAutoFlow'\n});\n\nexport const gridAutoColumns = style({\n    prop: 'gridAutoColumns'\n});\n\nexport const gridAutoRows = style({\n    prop: 'gridAutoRows'\n});\n\nexport const gridTemplateColumns = style({\n    prop: 'gridTemplateColumns'\n});\n\nexport const gridTemplateRows = style({\n    prop: 'gridTemplateRows'\n});\n\nexport const gridTemplateAreas = style({\n    prop: 'gridTemplateAreas'\n});\n\nexport const gridArea = style({\n    prop: 'gridArea'\n});\n```\n\n----------------------------------------\n\nTITLE: Fetch-Based Response Testing\nDESCRIPTION: Retrieves page content via fetch and verifies response text contains expected content\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('should work with fetch', async () => {\n  const res = await next.fetch('/')\n  const html = await res.text()\n  expect(html).toContain('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Corrected PostCSS Configuration (instantiated)\nDESCRIPTION: This code snippet shows the corrected PostCSS configuration for the previous incorrect example. It properly nests the plugin name and configuration within an array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // Pay attention to this nested array. The first index is the plugin name,\n    // the second index is the configuration.\n    [\n      'postcss-plugin',\n      {\n        optionA: '...',\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Entrypoints for Module Evaluation\nDESCRIPTION: This snippet defines a structure for managing entry points with indices for each module. It creates a relationship map using key-value pairs without explicit JavaScript execution. Each key represents a symbolic name pointing to its corresponding module index.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    ModuleEvaluation: 7,\n    Export(\n        \"external1\",\n    ): 9,\n    Export(\n        \"external2\",\n    ): 10,\n    Export(\n        \"foo\",\n    ): 3,\n    Export(\n        \"foobar\",\n    ): 11,\n    Exports: 12,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting GET Function in JavaScript\nDESCRIPTION: This code defines a function named GET which returns a JSON response composed of the types of ClientComponent and MyModuleClientComponent. The function utilizes the NextResponse module to format the response properly.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function GET() {\n    return NextResponse.json({\n        clientComponent: typeof ClientComponent,\n        myModuleClientComponent: typeof MyModuleClientComponent\n    });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Function Call in JavaScript\nDESCRIPTION: This snippet shows a conditional statement that calls the imported 'baz' function if an impossible condition is met. It has side effects and reads the 'baz' variable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (1 + 1 == 3) {\n    baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Error Handling in TurboPack\nDESCRIPTION: Creates a structured representation of an error with parsed stack trace for better error reporting. Converts any error into a consistent format with name, message, and parsed stack trace array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction structuredError(e) {\n    e = getProperError(e);\n    return {\n        name: e.name,\n        message: e.message,\n        stack: typeof e.stack === \"string\" ? parseStackTrace(e.stack) : []\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Document\nDESCRIPTION: Exports the custom Document class as the default export.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default MyDocument;\n```\n\n----------------------------------------\n\nTITLE: Property Assignment in Javascript\nDESCRIPTION: This code assigns the value 42 to the property `externalObject.propertyWithSetter`. This operation likely has side effects, depending on the implementation of the setter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexternalObject.propertyWithSetter = 42;\n```\n\n----------------------------------------\n\nTITLE: Development Module Code\nDESCRIPTION: Combined module code including variable assignments, function declaration, logging and exports\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\na = ()=>{};\nfunction a() {}\nconsole.log(a);\nexport { a as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Hoisting Default Export from Userland\nDESCRIPTION: Imports helpers and userland modules, then hoists and exports the default export from userland. This snippet shows how default exports are handled in the TurboPack system.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { hoist } from './helpers';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nconst __TURBOPACK__default__export__ = hoist(userland, 'default');\nexport { __TURBOPACK__default__export__ as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Tracking Dynamic Fetch in Next.js Server-Side Rendering\nDESCRIPTION: Defines a function to track dynamic fetch operations during server-side rendering, using postponeWithTracking when appropriate.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as postponeWithTracking } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -14\n};\nfunction trackDynamicFetch(store, expression) {\n    if (!store.prerenderState || store.isUnstableCacheCallback) return;\n    postponeWithTracking(store.prerenderState, expression, store.urlPathname);\n}\nexport { trackDynamicFetch };\nexport { trackDynamicFetch as k } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Using the New UserAgent Helper in Next.js Middleware\nDESCRIPTION: Migration from using the integrated user agent on the request object to the new dedicated userAgent helper. This change reduces middleware size by 17kb by making user agent parsing opt-in.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration\nDESCRIPTION: Declaration of variable a using var keyword\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a;\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting with Assertions in JavaScript\nDESCRIPTION: This snippet imports a module part and the Stream module while also exporting various elements from the current module using assertions. It includes exporting the Stream, streamDestructionSupported, and fetch function with designated names.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '__TURBOPACK_PART__' assert { __turbopack_part__: 0 };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stream from 'node:stream';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { Stream as a } from '__TURBOPACK_VAR__' assert { __turbopack_var__: true };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetch() {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst __TURBOPACK__default__export__ = fetch;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { __TURBOPACK__default__export__ as default };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { streamDestructionSupported as b } from '__TURBOPACK_VAR__' assert { __turbopack_var__: true };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { fetch as c } from '__TURBOPACK_VAR__' assert { __turbopack_var__: true };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { __TURBOPACK__default__export__ as d } from '__TURBOPACK_VAR__' assert { __turbopack_var__: true };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridTemplateRows Function\nDESCRIPTION: Re-exports the gridTemplateRows styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { p as gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -26\n};\nexport { gridTemplateRows };\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Custom Server\nDESCRIPTION: This JSON snippet shows how to configure the npm scripts in `package.json` to use the custom server. It defines the `dev`, `build`, and `start` scripts to point to the custom server file (`server.js`) for development and production environments.  The `start` script sets the `NODE_ENV` environment variable to `production` before running the server.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import/Export with TurboPack in Javascript\nDESCRIPTION: Exports a function run from a turbopack part. The assertion provides metadata for TurboPack during module processing. This allows for selective export and optimization within the turbopack build environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport { run } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export run\"\n};\n```\n\n----------------------------------------\n\nTITLE: Development Module Part 0\nDESCRIPTION: Exports 'dog' variable as 'DOG' and 'a' with Turbopack variable assertion\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dog = \"dog\";\nexport { dog as DOG };\nexport { dog as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Checking Stream Destruction Support in JavaScript\nDESCRIPTION: This snippet checks if the 'destroy' method is available in the Readable prototype of the Stream module, storing the result in a constant variable named 'streamDestructionSupported'. This is important for ensuring stream compatibility.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n```\n\n----------------------------------------\n\nTITLE: Grid Style Properties Implementation\nDESCRIPTION: Implementation of various grid-related style properties using the style utility function\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst gridColumn = style({\n    prop: 'gridColumn'\n});\n\nconst gridRow = style({\n    prop: 'gridRow'\n});\n\nconst gridAutoFlow = style({\n    prop: 'gridAutoFlow'\n});\n\nconst gridAutoColumns = style({\n    prop: 'gridAutoColumns'\n});\n\nconst gridAutoRows = style({\n    prop: 'gridAutoRows'\n});\n\nconst gridTemplateColumns = style({\n    prop: 'gridTemplateColumns'\n});\n\nconst gridTemplateRows = style({\n    prop: 'gridTemplateRows'\n});\n\nconst gridTemplateAreas = style({\n    prop: 'gridTemplateAreas'\n});\n\nconst gridArea = style({\n    prop: 'gridArea'\n});\n```\n\n----------------------------------------\n\nTITLE: getServerSideProps Return Value in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates the correct structure for the return value of the `getServerSideProps` function in Next.js using TypeScript. It shows that `getServerSideProps` should return an object with a `props` property, which is an object containing the data to be passed to the page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getserversideprops-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return {\n    props: { [key: string]: any }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Source Variable\nDESCRIPTION: Declares a global source variable to store WebSocket connection instance.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet source;\n```\n\n----------------------------------------\n\nTITLE: Static Rendering - All paths at runtime (JSX)\nDESCRIPTION: This code snippet demonstrates how to statically render all paths at runtime by returning an empty array from `generateStaticParams`. This ensures that no routes are generated during the build process and that all routes are rendered the first time they are visited.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```jsx filename=\"app/blog/[slug]/page.js\"\nexport async function generateStaticParams() {\n  return []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Pool Size Configuration\nDESCRIPTION: Defines the multiplier for the buffer pool size to optimize memory usage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst POOL_SIZE_MULTIPLIER = 128;\n```\n\n----------------------------------------\n\nTITLE: HMR Message Listener Registration\nDESCRIPTION: Function to add callback handlers for HMR messages to the eventCallbacks array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function addMessageListener(cb) {\n    eventCallbacks.push(cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Concatenation and Export in Turbopack Part\nDESCRIPTION: Handles a variable reassignment using concatenation and utilizes Turbopack's part system to manage exports, requiring a Turbopack-compatible JavaScript environment. It highlights how module components interact within Turbopack constructs, demonstrating dynamic variable management and export within the Turbopack framework.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nconst bar = \"bar\";\nfoobar += bar;\nexport { bar as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Variable x as a in Javascript\nDESCRIPTION: This snippet exports the variable 'x' as 'a' from a module, utilizing a Turbopack-specific assertion.  This pattern is used for module bundling and dependency management within Turbopack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport { x as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Module Part 1: React Export\nDESCRIPTION: This JavaScript snippet defines a module part that imports another module part and exports `React` under the alias `a`.  It relies on Turbopack's part and variable replacement mechanisms.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nexport { React as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js Image Component\nDESCRIPTION: Imports the Image component from Next.js which provides optimized image loading and rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/photos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from \"next/image\";\n```\n\n----------------------------------------\n\nTITLE: Declaring and Exporting Variable - JavaScript\nDESCRIPTION: This snippet declares a variable 'foobar' with the string value 'foo'. It then exports 'foobar' for use in other modules. This allows for external access to its value.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport let foobar = \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: Random Bytes Generator\nDESCRIPTION: Generates random bytes using the buffer pool.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet random = (bytes)=>{\n    fillPool((bytes -= 0));\n    return pool.subarray(poolOffset - bytes, poolOffset);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing createIpc Function for Inter-Process Communication\nDESCRIPTION: Defines a function to create an IPC connection with methods for sending and receiving messages, and handling errors.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { createConnection } from \"node:net\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nfunction createIpc(port) {\n    const socket = createConnection(port, \"127.0.0.1\");\n    const packetQueue = [];\n    const recvPromiseResolveQueue = [];\n    function pushPacket(packet) {\n        const recvPromiseResolve = recvPromiseResolveQueue.shift();\n        if (recvPromiseResolve != null) {\n            recvPromiseResolve(JSON.parse(packet.toString(\"utf8\")));\n        } else {\n            packetQueue.push(packet);\n        }\n    }\n    let state = {\n        type: \"waiting\"\n    };\n    let buffer = Buffer.alloc(0);\n    socket.once(\"connect\", ()=>{\n        socket.on(\"data\", (chunk)=>{\n            buffer = Buffer.concat([\n                buffer,\n                chunk\n            ]);\n            loop: while(true){\n                switch(state.type){\n                    case \"waiting\":\n                        {\n                            if (buffer.length >= 4) {\n                                const length = buffer.readUInt32BE(0);\n                                buffer = buffer.subarray(4);\n                                state = {\n                                    type: \"packet\",\n                                    length\n                                };\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                    case \"packet\":\n                        {\n                            if (buffer.length >= state.length) {\n                                const packet = buffer.subarray(0, state.length);\n                                buffer = buffer.subarray(state.length);\n                                state = {\n                                    type: \"waiting\"\n                                };\n                                pushPacket(packet);\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    });\n    socket.once(\"close\", ()=>{\n        process.exit(0);\n    });\n    function send(message) {\n        const packet = Buffer.from(JSON.stringify(message), \"utf8\");\n        const length = Buffer.alloc(4);\n        length.writeUInt32BE(packet.length);\n        socket.write(length);\n        return new Promise((resolve, reject)=>{\n            socket.write(packet, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    function sendReady() {\n        const length = Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return new Promise((resolve, reject)=>{\n            socket.write(length, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    return {\n        async recv () {\n            const packet = packetQueue.shift();\n            if (packet != null) {\n                return JSON.parse(packet.toString(\"utf8\"));\n            }\n            const result = await new Promise((resolve)=>{\n                recvPromiseResolveQueue.push((result)=>{\n                    resolve(result);\n                });\n            });\n            return result;\n        },\n        send (message) {\n            return send(message);\n        },\n        sendReady,\n        async sendError (error) {\n            try {\n                await send({\n                    type: \"error\",\n                    ...structuredError(error)\n                });\n            } catch (err) {\n                console.error(\"failed to send error back to rust:\", err);\n                process.exit(1);\n            }\n            process.exit(0);\n        }\n    };\n}\nconst PORT = process.argv[2];\nconst IPC = createIpc(parseInt(PORT, 10));\nexport { createIpc as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { PORT as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { IPC as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Logging Dog Variable in JavaScript\nDESCRIPTION: This snippet demonstrates usage of the `dog` variable by logging its value multiple times to the console. It shows how to effectively utilize imported variables within the execution scope.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as dog } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -0\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 1\\n};\\nimport \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: 4\\n};\\nconsole.log(dog);\\nconsole.log(dog);\\nconsole.log(dog);\\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Hoisting Next.js Page Components and Data Fetching Methods\nDESCRIPTION: Implementation of hoisting mechanism for Next.js page components and data fetching functions. These code snippets extract various functions from userland code and re-export them with proper naming for the Next.js runtime.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { hoist } from './helpers';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nconst __TURBOPACK__default__export__ = hoist(userland, 'default');\nexport { __TURBOPACK__default__export__ as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { hoist } from './helpers';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 12\n};\nconst getStaticProps = hoist(userland, 'getStaticProps');\nexport { getStaticProps as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport { hoist } from './helpers';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 14\n};\nconst getServerSideProps = hoist(userland, 'getServerSideProps');\nexport { getServerSideProps as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Client Component Loader Metrics in JavaScript\nDESCRIPTION: Defines a function to get and optionally reset client component loader metrics. Dependencies include specific Turbopack parts for importing metrics. The function returns loader metrics or resets them if specified in options.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { c as clientComponentLoadCount } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport { a as clientComponentLoadStart } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nimport { b as clientComponentLoadTimes } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nfunction getClientComponentLoaderMetrics(options = {}) {\n    const metrics = clientComponentLoadStart === 0 ? undefined : {\n        clientComponentLoadStart,\n        clientComponentLoadTimes,\n        clientComponentLoadCount\n    };\n    if (options.reset) {\n        clientComponentLoadStart = 0;\n        clientComponentLoadTimes = 0;\n        clientComponentLoadCount = 0;\n    }\n    return metrics;\n}\nexport { getClientComponentLoaderMetrics };\nexport { getClientComponentLoaderMetrics as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Initial Cat Variable in JavaScript\nDESCRIPTION: This snippet imports the variable `cat`, assigns it to a new variable `initialCat`, and exports it. This shows how to reference imported variables and make them available for other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as cat } from \"__TURBOPACK_PART__\" assert {\\n    __turbopack_part__: -5\\n};\\nconst initialCat = cat;\\nexport { initialCat };\\nexport { initialCat as f } from \"__TURBOPACK_VAR__\" assert {\\n    __turbopack_var__: true\\n};\n```\n\n----------------------------------------\n\nTITLE: Logging and Exporting Variables in JavaScript Part 7\nDESCRIPTION: This snippet focuses on importing, logging, and exporting a variable using console logs. It shows variable retrieval and diagnostics within a TurboPack context.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nconsole.log(foobarCopy);\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Importing with Assertions in Turbopack JavaScript\nDESCRIPTION: This snippet demonstrates importing several Turbopack module parts using assertions to manage module parts by their identifiers. It imports different modules and uses the imported content, such as logging and modifying variables. Dependencies include Turbopack syntax, JavaScript runtime, and access to the imported modules. The code demonstrates efficient module management, but assumes availability of specified module parts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { e as foobarCopy } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -5\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nconsole.log(foobarCopy);\nfoobarCopy += \"Unused\";\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Defining filterProps for rowGap Styling Function\nDESCRIPTION: Sets up the filterProps array for the rowGap function to specify which props this function should process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i as rowGap } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 18\n};\nrowGap.filterProps = [\n    'rowGap'\n];\nexport { rowGap };\n```\n\n----------------------------------------\n\nTITLE: Migrating EdgeDB with DSN - Bash\nDESCRIPTION: This command migrates the EdgeDB instance using a specified DSN (Data Source Name). It utilizes the `edgedb migrate` command, providing the DSN and disabling TLS security checks with `--tls-security insecure`. The command is executed from within the project directory.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nedgedb migrate --dsn <your-instance-dsn> --tls-security insecure\n```\n\n----------------------------------------\n\nTITLE: Importing hooks-server-context (JavaScript)\nDESCRIPTION: This module imports the `hooks-server-context` from the `../../client/components` directory. It suggests that the module relies on React Context or hooks that are intended to be used server-side.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 0\n};\nimport '../../client/components/hooks-server-context';\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Variables in JavaScript Part 2\nDESCRIPTION: This code snippet initializes a variable and exports it with a different name using TurboPack variable assertions. It shows how to handle exports through TurboPack conditional algorithmic assertions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet foobar = \"foo\";\nexport { foobar as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Callbacks Array\nDESCRIPTION: Creates an array to store event callback functions for HMR events.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventCallbacks = [];\n```\n\n----------------------------------------\n\nTITLE: Importing Constants - JavaScript\nDESCRIPTION: This snippet imports `LogSpanAllowList` and `NextVanillaSpanAllowlist` from a local module called `constants`. These constants are likely used for span management and tracing operations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LogSpanAllowList, NextVanillaSpanAllowlist } from './constants';\n```\n\n----------------------------------------\n\nTITLE: Creating Package Tarballs\nDESCRIPTION: Command to create tarballs for Next.js packages, which will be written to a 'tarballs' directory in the repository root.\nSOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack-next --tar\n```\n\n----------------------------------------\n\nTITLE: Importing Module with Side Effects - JavaScript\nDESCRIPTION: This snippet imports a module solely for its side effects without binding any identifiers. It's a method to ensure the module's code runs.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"other\";\n\n```\n\n----------------------------------------\n\nTITLE: Renaming Next.js Image Imports\nDESCRIPTION: Codemod to safely rename 'next/image' imports to 'next/legacy/image' and 'next/future/image' to 'next/image' in Next.js 13.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image1 from 'next/image'\nimport Image2 from 'next/future/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// 'next/image' becomes 'next/legacy/image'\nimport Image1 from 'next/legacy/image'\n// 'next/future/image' becomes 'next/image'\nimport Image2 from 'next/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental NFT Next.js Plugin\nDESCRIPTION: Installation instructions for the Vercel experimental NFT Next.js plugin using different package managers\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/turbo-tracing-next-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @vercel/experimental-nft-next-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @vercel/experimental-nft-next-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @vercel/experimental-nft-next-plugin\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Customizing Next.js Document in JavaScript\nDESCRIPTION: This snippet demonstrates the import of essential components from Next.js's document package, enabling custom server-side rendering behavior, particularly by altering initial props and HTML document structure. Dependencies include 'next/document' and 'react/jsx-runtime'. The key parameters involve the Next.js Document context and style modifications for customization.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nimport Document from 'next/document';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Html } from 'next/document';\nimport { Head } from 'next/document';\nimport { Main } from 'next/document';\nimport { NextScript } from 'next/document';\nclass MyDocument extends Document {\n    static async getInitialProps(ctx) {\n        const initialProps = await Document.getInitialProps(ctx);\n        return {\n            ...initialProps,\n            styles: _jsxs(_Fragment, {\n                children: [\n                    initialProps.styles,\n                    _jsx(\"style\", {\n                        dangerouslySetInnerHTML: {\n                            __html: `html { background: hotpink; }`\n                        }\n                    })\n                ]\n            })\n        };\n    }\n    render() {\n        return _jsxs(Html, {\n            children: [\n                _jsx(Head, {}),\n                _jsxs(\"body\", {\n                    children: [\n                        _jsx(Main, {}),\n                        _jsx(NextScript, {})\n                    ]\n                })\n            ]\n        });\n    }\n}\nconst __TURBOPACK__default__export__ = MyDocument;\nexport { __TURBOPACK__default__export__ as default };\nexport { MyDocument as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { __TURBOPACK__default__export__ as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Copying and Exporting Variables in JavaScript Part 5\nDESCRIPTION: This snippet involves importing a part and copying a variable for export. It highlights variable duplication and management within the TurboPack system for further processing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nlet foobarCopy = foobar;\nexport { foobarCopy as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration - Cat\nDESCRIPTION: Declares a constant variable 'cat' with string value\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cat = \"cat\";\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Scope Marking\nDESCRIPTION: Marks current scope as dynamic and handles various rendering scenarios\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function markCurrentScopeAsDynamic(store, expression) {\n    const pathname = getPathname(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        return;\n    } else if (store.dynamicShouldError) {\n        throw new StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (store.prerenderState) {\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Multiple User Agents in TypeScript\nDESCRIPTION: A TypeScript implementation for creating custom rules for different search engine bots. It defines specific crawling rules for Googlebot and blocks Applebot and Bingbot from crawling the site.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: '/private/',\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Part 7 (prod)\nDESCRIPTION: Part 7 of the production build. Exports `b` and `a` from their respective parts.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport { b } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export b\"\n};\nexport { a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export a\"\n};\n```\n\n----------------------------------------\n\nTITLE: Corrected PostCSS Configuration (require)\nDESCRIPTION: This code snippet shows the corrected PostCSS configuration for the previous incorrect example, using string-based plugin names.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['postcss-plugin', 'postcss-plugin-a'],\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Reassignment and Export in JavaScript\nDESCRIPTION: This snippet binds and exports a variable with value copying and reassignment, leveraging Turbopack's part system for modularity. Requires a Turbopack-conforming environment for compatibility and execution, restructuring exports to conform to dynamic requirements, but mandates access to Turbopack clauses.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nconst foo = foobar;\nexport { foo };\nexport { foo as c } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Constant Variable in JavaScript\nDESCRIPTION: This code exports a constant variable 'foo' initialized with the value of 'foobar'. Variable 'foo' is declared and bound to 'foobar', relying on 'foobar' to be available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = foobar;\n\n```\n\n----------------------------------------\n\nTITLE: Chimera Getter Function Export\nDESCRIPTION: Exports a function that concatenates cat and dog variables\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getChimera() {\n    return cat + dog;\n}\n```\n\n----------------------------------------\n\nTITLE: Final Module State Representation\nDESCRIPTION: This snippet represents the final configuration for module exports and evaluations, summarizing the output items in the module, including their identifiers and the nature of their exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait Promise.resolve();\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Exporting PostCSS Configuration as a Function (Incorrect)\nDESCRIPTION: This snippet shows the incorrect way of exporting PostCSS configuration as a function. It uses a function to determine plugin configuration based on the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-function.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  plugins: {\n    'postcss-plugin': env === 'production' ? {} : false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Module Part and Export Manipulation in JavaScript\nDESCRIPTION: This snippet imports a module part and exports it under another alias using Turbopack constructs, highlighting module restructuring and variable aliasing. Dependencies include the availability of Turbopack-specific module parts and JavaScript execution environment. It demonstrates internal handling of module parts, crucial for dynamic module configurations. Assumes Turbopack compatibility.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"module\";\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Analysis Command\nDESCRIPTION: Bash command to trigger bundle analysis during the build process by setting an environment variable\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nANALYZE=true yarn build\n```\n\n----------------------------------------\n\nTITLE: Function and Variable Export Management in JS\nDESCRIPTION: This JavaScript code snippet focuses on conditionally exporting variables and functions within Turbopack's environment using dynamic imports. It depends on module integration capabilities facilitated by Turbopack, emphasizing dynamic function calls and managed variable updates. Necessitates adherence to Turbopack-defined module structures for execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nfunction external2() {\n    foobar += \".\";\n}\nexport { external2 };\nexport { external2 as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Postponing with Tracking in Next.js (JavaScript)\nDESCRIPTION: The `postponeWithTracking` function is responsible for handling the postponement of rendering in Next.js when dynamic data access is detected during prerendering. It creates a reason string indicating why the rendering needs to be postponed, records the dynamic access information (including stack trace and expression), and then calls `React.unstable_postpone` to trigger the postponement. It also includes `assertPostpone` which throws an error if `React.unstable_postpone` isn't defined, indicating a version mismatch.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 6\n};\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 7\n};\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 5\n};\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 3\n};\nconst hasPostpone = typeof React.unstable_postpone === 'function';\nfunction postponeWithTracking(prerenderState, expression, pathname) {\n    assertPostpone();\n    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;\n    prerenderState.dynamicAccesses.push({\n        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,\n        expression\n    });\n    React.unstable_postpone(reason);\n}\nfunction assertPostpone() {\n    if (!hasPostpone) {\n        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);\n    }\n}\nexport { hasPostpone as e } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\nexport { postponeWithTracking as f } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\nexport { assertPostpone as g } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Turbopack Module Part 5 Implementation\nDESCRIPTION: This module imports 'foobar', defines 'bar', and modifies 'foobar' by concatenating 'bar'. Demonstrates how Turbopack handles variable modification and exports.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nconst bar = \"bar\";\nfoobar += bar;\nexport { bar as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js app with next-translate using yarn\nDESCRIPTION: This command utilizes yarn to generate a new Next.js application, incorporating the next-translate example. It sets up the project using the defined example and assigns a name to the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app --example with-next-translate with-next-translate-app\n```\n\n----------------------------------------\n\nTITLE: Defining Post Frontmatter in YAML for Next.js\nDESCRIPTION: This YAML frontmatter defines metadata for a Next.js post, including the content type, post title, and publication date. This metadata is typically used by Next.js to determine how to render and organize content pages.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: posts\ntitle: Posts\ndate: 2021-03-18\n---\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: This command runs the Vitest tests in the project using Yarn.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Enhancing Console Methods for Debugging in TurboPack\nDESCRIPTION: Improves console output by wrapping native console methods to add markers and stack traces. Each console method is modified to write specific markers before and after output, enabling better debugging in TurboPack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst improveConsole = (name, stream, addStack)=>{\n    const original = console[name];\n    const stdio = process[stream];\n    console[name] = (...args)=>{\n        stdio.write(`TURBOPACK_OUTPUT_B\\n`);\n        original(...args);\n        if (addStack) {\n            const stack = new Error().stack?.replace(/^.+\\n.+\\n/, \"\") + \"\\n\";\n            stdio.write(\"TURBOPACK_OUTPUT_S\\n\");\n            stdio.write(stack);\n        }\n        stdio.write(\"TURBOPACK_OUTPUT_E\\n\");\n    };\n};\nimproveConsole(\"error\", \"stderr\", true);\nimproveConsole(\"warn\", \"stderr\", true);\nimproveConsole(\"count\", \"stdout\", true);\nimproveConsole(\"trace\", \"stderr\", false);\nimproveConsole(\"log\", \"stdout\", true);\nimproveConsole(\"group\", \"stdout\", true);\nimproveConsole(\"groupCollapsed\", \"stdout\", true);\nimproveConsole(\"table\", \"stdout\", true);\nimproveConsole(\"debug\", \"stdout\", true);\nimproveConsole(\"info\", \"stdout\", true);\nimproveConsole(\"dir\", \"stdout\", true);\nimproveConsole(\"dirxml\", \"stdout\", true);\nimproveConsole(\"timeEnd\", \"stdout\", true);\nimproveConsole(\"timeLog\", \"stdout\", true);\nimproveConsole(\"timeStamp\", \"stdout\", true);\nimproveConsole(\"assert\", \"stderr\", true);\n```\n\n----------------------------------------\n\nTITLE: Simple Text Content\nDESCRIPTION: A minimal text string with a simple greeting\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/dynamic-routing/public/hello+copy.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhello world +\n```\n\n----------------------------------------\n\nTITLE: Blog Page Component with Data Dependencies\nDESCRIPTION: A Next.js page component that displays a list of blog posts. This example shows a component that requires external data before it can be pre-rendered, indicated by a TODO comment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Blog\n```\n\n----------------------------------------\n\nTITLE: Using Router.onAppUpdated for Navigation - JavaScript\nDESCRIPTION: This snippet shows how to use the Router.onAppUpdated hook to navigate to a new route. The hook is used to update the location href to initiate navigation, but has limitations as it does not support waiting for asynchronous operations. No dependencies are listed, and inputs are limited to the nextRoute parameter. It's an approach that has been deprecated and should be replaced.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-on-app-updated-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nRouter.onAppUpdated = function (nextRoute) {\n  location.href = nextRoute\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from withAmp to Config Object in Next.js 9\nDESCRIPTION: Example of migrating from withAmp higher-order component to page-level configuration object for AMP pages in Next.js 9.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n  // or\n  amp: 'hybrid',\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Example with Syntax Error\nDESCRIPTION: Example of invalid JSON syntax showing a missing comma or closing brace. The error occurs in line 3 where a comment is used, which is not valid in JSON.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/json/issues/Code generation for chunk item errored-1c3f39.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nested\": {\n    \"this-is\": \"invalid\" // lint-staged will remove trailing commas, so here's a comment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Export with Assertions in Javascript\nDESCRIPTION: Imports a Turbopack part, imports IPC from \"./index\", and conditionally exports IPC as 'a' from another Turbopack variable based on an assertion. This showcases the conditional module loading and exporting capabilities with specific Turbopack features.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { IPC } from \"./index\";\nexport { IPC as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Production Module Parts in JavaScript\nDESCRIPTION: These snippets represent different parts of the module in production mode. They are identical to the development parts in this case.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { baz } from './module';\nimport './module';\nif (1 + 1 == 3) {\n    baz();\n}\nexport { };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { baz } from './module';\nexport { baz as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Duplicated Variable\nDESCRIPTION: The snippet updates 'foobarCopy' by appending the string 'Unused' to it. This change reflects on 'foobarCopy' only.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfoobarCopy += \"Unused\";\n\n```\n\n----------------------------------------\n\nTITLE: Dog Reference Object Export\nDESCRIPTION: Creates and exports an object containing dog variable references and accessor functions\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dogRef = {\n    initial: dog,\n    get: getDog,\n    set: setDog\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect UUID Generation in Next.js\nDESCRIPTION: Example showing problematic direct UUID generation without connection awareness.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  const uuid = crypto.randomUUID()\n  return <RequestId id={uuid}>\n}\n```\n\n----------------------------------------\n\nTITLE: Javascript Module Merged (prod)\nDESCRIPTION: Merged JavaScript modules for production. Imports shared, sets external property, and logs shared. \nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { c as shared } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nexternalObject.propertyWithSetter = 42;\nconsole.log(shared);\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Invalid Async Client Component Example\nDESCRIPTION: Example showing the incorrect usage of async function in a Client Component that triggers the error.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\n// This will cause an error\nasync function ClientComponent() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing to Order Array - JavaScript\nDESCRIPTION: This statement demonstrates a direct manipulation of the 'order' array by pushing the string 'a' into it, showcasing a side effect that alters the shared array.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\norder.push(\"a\");\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Within Turbopack Modules\nDESCRIPTION: Utilizing Turbopack assertions, this JavaScript snippet imports and exports module components with aliasing and conditional variable exports. It is executed in a Turbopack-based application and depends on predefined modules structured for Turbopack syntax. The code manages configurations but constrains exports to Turbopack specifications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { upper } from \"module\";\nexport { upper as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting DynamicServerError in Next.js\nDESCRIPTION: Imports the DynamicServerError from the hooks-server-context and re-exports it for use in other parts of the application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { DynamicServerError } from '../../client/components/hooks-server-context';\nexport { DynamicServerError as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting ReflectAdapter Class - JavaScript\nDESCRIPTION: This snippet imports and exports the ReflectAdapter class, which is presumably used for adapting reflection-based operations within Next.js. Its details may relate to optimizing performance and inter-operability across different environments.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { ReflectAdapter } from './adapters/reflect';\nexport { ReflectAdapter as i } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing PagesRouteModule\nDESCRIPTION: Imports necessary modules and initializes a PagesRouteModule with configuration. This snippet shows how route modules are set up in the Next.js and TurboPack integration.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { RouteKind } from '../../server/future/route-kind';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nimport App from 'VAR_MODULE_APP';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport Document from 'VAR_MODULE_DOCUMENT';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 22\n};\nconst routeModule = new PagesRouteModule({\n    definition: {\n        kind: RouteKind.PAGES,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        bundlePath: '',\n        filename: ''\n    },\n    components: {\n        App,\n        Document\n    },\n    userland\n});\nexport { routeModule };\nexport { routeModule as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Importing NextResponse from next/server in JavaScript\nDESCRIPTION: This snippet imports the NextResponse module from the 'next/server' package. The purpose of this import is to handle server-side responses in Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server';\n\n```\n\n----------------------------------------\n\nTITLE: Exporting gridTemplateAreas from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridTemplateAreas styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { q as gridTemplateAreas } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -27\n};\nexport { gridTemplateAreas };\n```\n\n----------------------------------------\n\nTITLE: Show Command Identifier\nDESCRIPTION: Simple text file containing the command name 'show', likely used as a placeholder or command identifier in the Next.js project structure\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/production/standalone-mode/required-server-files/data.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nshow\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Class - JavaScript\nDESCRIPTION: Defines a custom error class `BubbledError` that extends the native `Error` class. It includes additional properties for handling bubble and result information.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class BubbledError extends Error {\n    constructor(bubble, result){\n        super();\n        this.bubble = bubble;\n        this.result = result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting NextURL Class - JavaScript\nDESCRIPTION: This snippet imports and exports the NextURL class, which is used for URL handling within the Next.js framework. It provides an interface for working with URLs in the context of server-side rendering and routing.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { NextURL } from '../next-url';\nexport { NextURL as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Module Part 2 - Export References\nDESCRIPTION: Exports variables from TurboPack parts with specific assertions\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport { a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export a\"\n};\nexport { b } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export b\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Exporting gridRow from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridRow styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport { k as gridRow } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -21\n};\nexport { gridRow };\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Retrieval Function\nDESCRIPTION: Exports function to retrieve client component loading metrics with optional reset functionality. Returns undefined if tracking hasn't started.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getClientComponentLoaderMetrics(options = {}) {\n    const metrics = clientComponentLoadStart === 0 ? undefined : {\n        clientComponentLoadStart,\n        clientComponentLoadTimes,\n        clientComponentLoadCount\n    };\n    if (options.reset) {\n        clientComponentLoadStart = 0;\n        clientComponentLoadTimes = 0;\n        clientComponentLoadCount = 0;\n    }\n    return metrics;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MDX Page Header in Next.js\nDESCRIPTION: A basic MDX page heading using markdown syntax, demonstrating the simplest form of MDX content in a Next.js application.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/app-types/src/app/mdx-test/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# I'm a MDX page\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Reference to the Next.js SWC package name for Linux x64 GNU systems\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/linux-x64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@next/swc-linux-x64-gnu\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Variables from Modules - JavaScript\nDESCRIPTION: This snippet imports 'upper' from a module, then exports it under a different name, 'd', demonstrating variable renaming during the export process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 1\n};\nimport { upper } from \"module\";\nexport { upper as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: CSS Red Text Styling\nDESCRIPTION: This CSS snippet defines a class named 'red'.  Any HTML element assigned this class will have its text color set to red. It can be used to quickly apply red text styling throughout a webpage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/rsc-webpack-loader/app/loader-rule/a.txt#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\n.red {\n  color: red;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Require with Unknown Module\nDESCRIPTION: Loading a module dynamically with an unresolved/unknown module path, which can cause runtime resolution and potential security issues\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1001__ import(FreeVar(Math)[__quo__ra-759cc1.txt#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(unknown);\n```\n\n----------------------------------------\n\nTITLE: Exporting NextResponse Class Using TurboPack Assertions\nDESCRIPTION: Exports the NextResponse class from a specific TurboPack part using module assertions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport { NextResponse } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export NextResponse\"\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using next/compat/router in getServerSideProps\nDESCRIPTION: This code snippet demonstrates using `next/compat/router` within `getServerSideProps` in the `pages` directory. This avoids errors when rendering components outside of the usual Next.js context. It allows the component to gracefully handle cases where the router is not immediately available.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server'\nimport { useRouter } from 'next/compat/router'\nconst MyComponent = () => {\n  const router = useRouter() // may be null or a NextRouter instance\n  // ...\n}\nexport async function getServerSideProps() {\n  const renderedComponent = renderToString(<MyComponent />)\n  return {\n    props: {\n      renderedComponent,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Production Module Code\nDESCRIPTION: Production version of the module code, identical to development version\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\na = ()=>{};\nfunction a() {}\nconsole.log(a);\nexport { a as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n\n```\n\n----------------------------------------\n\nTITLE: Module Part 7: getPathname Export\nDESCRIPTION: This JavaScript snippet exports the `getPathname` function, which is used to extract the pathname from a URL. It relies on Turbopack's part and variable replacement.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport { getPathname } from '../../lib/url';\nexport { getPathname as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Handling HMR WebSocket in Express\nDESCRIPTION: This JavaScript code snippet shows how to handle the Webpack HMR WebSocket connection in a custom Express server. It uses `app.all` to ensure that all requests to `/_next/webpack-hmr` are passed to the Next.js request handler.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.all('/_next/webpack-hmr', (req, res) => {\n  nextjsRequestHandler(req, res)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Matcher in TypeScript\nDESCRIPTION: This TypeScript snippet showcases how to format the matcher property in middleware configuration to avoid errors with negative lookahead regex. It follows the same correction approach as the custom route source.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-route-source.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config = {\\n  matcher: \"/feedback/((?!general).*)\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RouteKind Enum in JavaScript\nDESCRIPTION: Initializes the RouteKind Enum, assigning string values to represent various route types. It reads and writes to the RouteKind object and demonstrates side-effects within an IIFE (Immediately Invoked Function Expression) to encapsulate the Enum assignment logic.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function(RouteKind) {\n    RouteKind[\"PAGES\"] = \"PAGES\";\n    RouteKind[\"PAGES_API\"] = \"PAGES_API\";\n    RouteKind[\"APP_PAGE\"] = \"APP_PAGE\";\n    RouteKind[\"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {}));\n```\n\n----------------------------------------\n\nTITLE: Building Dependency Graph for Phase 2 with Mermaid\nDESCRIPTION: This code snippet defines a Mermaid diagram outlining dependencies of various project items in Phase 2. It involves both directional and dotted lines to signify strong and weak dependencies respectively, between project components. Prerequisites include understanding of Mermaid chart syntax and integration. Inputs are nodes and edges representing items; output is a graphical display.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item4;\n    Item2;\n    Item5;\n    Item3;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item29[\"export structuredError\"];\n    Item30;\n    Item30[\"export IPC\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item9 --> Item3;\n    Item9 -.-> Item6;\n    Item9 -.-> Item5;\n    Item9 -.-> Item4;\n    Item9 -.-> Item7;\n    Item10 --> Item8;\n    Item10 --> Item9;\n    Item10 -.-> Item6;\n    Item10 -.-> Item5;\n    Item10 -.-> Item4;\n    Item10 -.-> Item7;\n    Item11 --> Item10;\n    Item11 -.-> Item6;\n    Item11 -.-> Item5;\n    Item11 -.-> Item4;\n    Item11 -.-> Item7;\n    Item12 --> Item11;\n    Item12 -.-> Item6;\n    Item12 -.-> Item5;\n    Item12 -.-> Item4;\n    Item12 -.-> Item7;\n    Item13 --> Item12;\n    Item13 -.-> Item6;\n    Item13 -.-> Item5;\n    Item13 -.-> Item4;\n    Item13 -.-> Item7;\n    Item14 --> Item12;\n    Item14 --> Item13;\n    Item14 -.-> Item6;\n    Item14 -.-> Item5;\n    Item14 -.-> Item4;\n    Item14 -.-> Item7;\n    Item15 --> Item12;\n    Item15 --> Item14;\n    Item15 -.-> Item6;\n    Item15 -.-> Item5;\n    Item15 -.-> Item4;\n    Item15 -.-> Item7;\n    Item16 --> Item12;\n    Item16 --> Item15;\n    Item16 -.-> Item6;\n    Item16 -.-> Item5;\n    Item16 -.-> Item4;\n    Item16 -.-> Item7;\n    Item17 --> Item12;\n    Item17 --> Item16;\n    Item17 -.-> Item6;\n    Item17 -.-> Item5;\n    Item17 -.-> Item4;\n    Item17 -.-> Item7;\n    Item18 --> Item12;\n    Item18 --> Item17;\n    Item18 -.-> Item6;\n    Item18 -.-> Item5;\n    Item18 -.-> Item4;\n    Item18 -.-> Item7;\n    Item19 --> Item12;\n    Item19 --> Item18;\n    Item19 -.-> Item6;\n    Item19 -.-> Item5;\n    Item19 -.-> Item4;\n    Item19 -.-> Item7;\n    Item20 --> Item12;\n    Item20 --> Item19;\n    Item20 -.-> Item6;\n    Item20 -.-> Item5;\n    Item20 -.-> Item4;\n    Item20 -.-> Item7;\n    Item21 --> Item12;\n    Item21 --> Item20;\n    Item21 -.-> Item6;\n    Item21 -.-> Item5;\n    Item21 -.-> Item4;\n    Item21 -.-> Item7;\n    Item22 --> Item12;\n    Item22 --> Item21;\n    Item22 -.-> Item6;\n    Item22 -.-> Item5;\n    Item22 -.-> Item4;\n    Item22 -.-> Item7;\n    Item23 --> Item12;\n    Item23 --> Item22;\n    Item23 -.-> Item6;\n    Item23 -.-> Item5;\n    Item23 -.-> Item4;\n    Item23 -.-> Item7;\n    Item24 --> Item12;\n    Item24 --> Item23;\n    Item24 -.-> Item6;\n    Item24 -.-> Item5;\n    Item24 -.-> Item4;\n    Item24 -.-> Item7;\n    Item25 --> Item12;\n    Item25 --> Item24;\n    Item25 -.-> Item6;\n    Item25 -.-> Item5;\n    Item25 -.-> Item4;\n    Item25 -.-> Item7;\n    Item26 --> Item12;\n    Item26 --> Item25;\n    Item26 -.-> Item6;\n    Item26 -.-> Item5;\n    Item26 -.-> Item4;\n    Item26 -.-> Item7;\n    Item27 --> Item12;\n    Item27 --> Item26;\n    Item27 -.-> Item6;\n    Item27 -.-> Item5;\n    Item27 -.-> Item4;\n    Item27 -.-> Item7;\n    Item28 --> Item12;\n    Item28 --> Item27;\n    Item28 -.-> Item6;\n    Item28 -.-> Item5;\n    Item28 -.-> Item4;\n    Item28 -.-> Item7;\n    Item29 --> Item7;\n    Item30 --> Item11;\n    Item30 --> Item10;\n```\n\n----------------------------------------\n\nTITLE: Exporting Object 'b' in JavaScript\nDESCRIPTION: Similar to 'a', this snippet exports object 'b', incorporating the shared object with a unique string property. Requires 'shared' to be pre-defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const b = {\n    shared,\n    b: \"bbbbbbbbbbb\"\n};\n```\n\n----------------------------------------\n\nTITLE: Module Part 0 - Variable Export\nDESCRIPTION: Declares and exports variable 'a' with TurboPack variable assertion\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = \"a\";\nexport { a };\nexport { a as a } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Declaring RouteKind Enum in JavaScript\nDESCRIPTION: Defines the variable RouteKind as an Enum with different routing categories like PAGES, PAGES_API, APP_PAGE, and APP_ROUTE in JavaScript. This snippet simply declares RouteKind without any initialization or modification.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport var RouteKind;\n```\n\n----------------------------------------\n\nTITLE: Module Exports\nDESCRIPTION: Export declarations for variables including named exports and re-exports with TurboPack assertions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/grouping/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const y = x;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { y } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export y\"\n};\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration - Dog\nDESCRIPTION: Declares a constant variable 'dog' with string value\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dog = \"dog\";\n\n```\n\n----------------------------------------\n\nTITLE: Creating gridAutoRows Styling Function\nDESCRIPTION: Defines the gridAutoRows styling function using the style utility to handle the 'gridAutoRows' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 23\n};\nconst gridAutoRows = style({\n    prop: 'gridAutoRows'\n});\nexport { gridAutoRows as n } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Content\nDESCRIPTION: This snippet demonstrates the basic structure of an MDX file, including plain text content. It shows how text can be directly included within an MDX document.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/pages/pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\n\"# Hello World\\n\\nThis is MDX!\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Pages Router Directory in Next.js\nDESCRIPTION: Demonstrates the correct file structure for a Next.js project using the Pages Router. It shows the separation of components, pages, and styles directories.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n  .\n  ├── components/\n  │   └── Header.js\n  ├── pages/\n  │   ├── about.js\n  │   └── index.js\n  └── styles/\n      └── globals.css\n```\n\n----------------------------------------\n\nTITLE: Incrementing Variable - JavaScript\nDESCRIPTION: This snippet appends the string 'foo' to the existing value of 'foobar'. It shows the ability to alter string variables dynamically.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfoobar += \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: Defining Function d2 in JavaScript\nDESCRIPTION: This snippet defines a function named `d2` similar to `d1`, with no parameters and no implementation, also hoisted.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction d2() {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting stringifyCookie Function\nDESCRIPTION: Imports the stringifyCookie function from the cookies spec extension and re-exports it with a named export. Uses TurboPack module assertion syntax for part declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { stringifyCookie } from '../../web/spec-extension/cookies';\nexport { stringifyCookie as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Next.js About Page Component (app directory)\nDESCRIPTION: Defines a basic Next.js about page component using the `app` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/` (home) page.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Postpone with Tracking in Next.js Server-Side Rendering\nDESCRIPTION: Implements the postponeWithTracking function to handle postponing rendering and tracking dynamic accesses during server-side rendering.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport { l as assertPostpone } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -17\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nfunction postponeWithTracking(prerenderState, expression, pathname) {\n    assertPostpone();\n    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;\n    prerenderState.dynamicAccesses.push({\n        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,\n        expression\n    });\n    React.unstable_postpone(reason);\n}\nexport { postponeWithTracking as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Path of runtime.js\nDESCRIPTION: This code snippet provides a method to obtain the absolute file system path of 'runtime.js' in the regenerator-runtime package. It is useful for debugging or for configuring build tools that require the path to this file.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"regenerator-runtime/path\").path\n```\n\n----------------------------------------\n\nTITLE: Exporting gridTemplateRows from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridTemplateRows styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport { p as gridTemplateRows } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -26\n};\nexport { gridTemplateRows };\n```\n\n----------------------------------------\n\nTITLE: Manipulating and Exporting Variables in JavaScript Part 4\nDESCRIPTION: In this snippet, a part is imported and its variable is modified. It demonstrates the dynamic modification and exporting of string concatenated variables using TurboPack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nconst bar = \"bar\";\nfoobar += bar;\nexport { bar as d } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting React.unstable_postpone Availability in Next.js\nDESCRIPTION: Defines a function to assert the availability of React.unstable_postpone, throwing an error if it's not defined.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as hasPostpone } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -8\n};\nfunction assertPostpone() {\n    if (!hasPostpone) {\n        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);\n    }\n}\nexport { assertPostpone as l } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Re-exporting IPC Module\nDESCRIPTION: Re-exports the IPC (Inter-Process Communication) module after importing the error handling. This module serves as an entry point for other modules that need access to the IPC functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { g as IPC } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -7\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nexport { IPC };\n```\n\n----------------------------------------\n\nTITLE: Creating gridTemplateColumns Styling Function\nDESCRIPTION: Defines the gridTemplateColumns styling function using the style utility to handle the 'gridTemplateColumns' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 24\n};\nconst gridTemplateColumns = style({\n    prop: 'gridTemplateColumns'\n});\nexport { gridTemplateColumns as o } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting App Component\nDESCRIPTION: Imports the App component from a custom module and exports it as a named export. This snippet demonstrates how the main App component is handled in the TurboPack setup.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nimport App from 'VAR_MODULE_APP';\nexport { App as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing XState Inspect\nDESCRIPTION: This imports the `inspect` function from the `@xstate/inspect` package. This function is used to initialize the XState inspector.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inspect } from \"@xstate/inspect\";\n```\n\n----------------------------------------\n\nTITLE: Creating Pages Route Module Instance\nDESCRIPTION: Instantiates a PagesRouteModule with specific route definition, components, and userland module\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const routeModule = new PagesRouteModule({\n    definition: {\n        kind: RouteKind.PAGES,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        bundlePath: '',\n        filename: ''\n    },\n    components: {\n        App,\n        Document\n    },\n    userland\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Imported Variables in JavaScript\nDESCRIPTION: Exports an imported variable, utilizing Turbopack's module system to streamline module part integrations. This snippet operates within a JavaScript runtime needing Turbopack configurations, concentrating on direct exportation once imported under expected conditions, combing modular JavaScript that adheres to Turbopack's methodologies.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nexport { foobar };\n```\n\n----------------------------------------\n\nTITLE: Manually updating React and React DOM versions in package.json\nDESCRIPTION: This JSON snippet shows how to manually update the React and React DOM versions in the package.json file to the minimum suggested versions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-version.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Variable and Exporting Function - JavaScript\nDESCRIPTION: This snippet imports 'foobar', defines 'external2' to change its value, and provides exports for further modifications outside of this module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nfunction external2() {\n    foobar += \".\";\n}\nexport { external2 };\nexport { foobar };\nexport { external2 as h } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Phase 3\nDESCRIPTION: This mermaid diagram represents the module dependencies in phase 3. It shows the different items and their dependencies, visualizing the flow of data and execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item2;\n    Item3;\n    Item4;\n    Item5;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item10[\"export a\"];\n    Item11;\n    Item11[\"export b\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item6 --> Item2;\n    Item6 --> Item3;\n    Item6 --> Item5;\n    Item7 --> Item6;\n    Item7 --> Item4;\n    Item8 --> Item6;\n    Item8 -.-> Item7;\n    Item9 --> Item8;\n    Item9 --> Item6;\n    Item10 --> Item8;\n    Item11 --> Item9;\n```\n\n----------------------------------------\n\nTITLE: Formatting Dynamic API Accesses (JavaScript)\nDESCRIPTION: The `formatDynamicAPIAccesses` function formats the dynamic API accesses stored in the `prerenderState` into a readable string. It filters accesses with a valid stack trace, cleans up the stack trace by removing irrelevant lines related to Next.js internals and node modules, and then formats the remaining stack trace along with the expression that triggered the dynamic access.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatDynamicAPIAccesses(prerenderState) {\n    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === 'string' && access.stack.length > 0).map(({ expression, stack })=>{\n        stack = stack.split('\\n').slice(4).filter((line)=>{\n            if (line.includes('node_modules/next/')) {\n                return false;\n            }\n            if (line.includes(' (<anonymous>)')) {\n                return false;\n            }\n            if (line.includes(' (node:')) {\n                return false;\n            }\n            return true;\n        }).join('\\n');\n        return `Dynamic API Usage Debug - ${expression}:\\n${stack}`;\n    });\n}\nexport { formatDynamicAPIAccesses };\nexport { formatDynamicAPIAccesses as n } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Export Flow Diagram in Phase 4\nDESCRIPTION: This snippet contains a Mermaid diagram for phase 4, outlining the export sequence of CSS grid properties. It clarifies how properties like gridColumn, columnGap, and rowGap are exported, demonstrating their hierarchical dependency and flow for phase 4.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item6;\n    Item2;\n    Item7;\n    Item3;\n    Item8;\n    Item9;\n    Item4;\n    Item10;\n    Item5;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item30;\n    Item31;\n    Item32;\n    Item32[\"export gap\"];\n    Item33;\n    Item33[\"export columnGap\"];\n    Item34;\n    Item34[\"export rowGap\"];\n    Item35;\n    Item35[\"export gridColumn\"];\n    Item36;\n    Item36[\"export gridRow\"];\n    Item37;\n    Item37[\"export gridAutoFlow\"];\n    Item38;\n    Item38[\"export gridAutoColumns\"];\n    Item39;\n    Item39[\"export gridAutoRows\"];\n    Item40;\n    Item40[\"export gridTemplateColumns\"];\n    Item41;\n    Item41[\"export gridTemplateRows\"];\n    Item42;\n    Item42[\"export gridTemplateAreas\"];\n    Item43;\n    Item43[\"export gridArea\"];\n    Item44;\n    Item44[\"export default\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item5 --> Item4;\n    Item12 --> Item8;\n    Item12 --> Item9;\n    Item12 --> Item10;\n    Item12 --> Item5;\n    Item13 --> Item12;\n    Item13 --> Item11;\n    Item14 --> Item13;\n    Item14 --> Item12;\n    Item15 --> Item8;\n    Item15 --> Item9;\n    Item15 --> Item10;\n    Item15 --> Item13;\n    Item16 --> Item15;\n    Item16 --> Item11;\n    Item17 --> Item16;\n    Item17 --> Item15;\n    Item18 --> Item8;\n    Item18 --> Item9;\n    Item18 --> Item10;\n    Item18 --> Item16;\n    Item19 --> Item18;\n    Item19 --> Item11;\n    Item20 --> Item19;\n    Item20 --> Item18;\n    Item21 --> Item6;\n    Item21 --> Item19;\n    Item22 --> Item6;\n    Item22 --> Item21;\n    Item23 --> Item6;\n    Item23 --> Item22;\n    Item24 --> Item6;\n    Item24 --> Item23;\n    Item25 --> Item6;\n    Item25 --> Item24;\n    Item26 --> Item6;\n    Item26 --> Item25;\n    Item27 --> Item6;\n    Item27 --> Item26;\n    Item28 --> Item6;\n    Item28 --> Item27;\n    Item29 --> Item6;\n    Item29 --> Item28;\n    Item30 --> Item7;\n    Item30 --> Item14;\n    Item30 --> Item12;\n    Item30 --> Item17;\n    Item30 --> Item15;\n    Item30 --> Item20;\n    Item30 --> Item18;\n    Item30 --> Item21;\n    Item30 --> Item22;\n    Item30 --> Item23;\n    Item30 --> Item24;\n    Item30 --> Item25;\n    Item30 --> Item26;\n    Item30 --> Item27;\n    Item30 --> Item28;\n    Item30 --> Item29;\n    Item31 --> Item30;\n    Item32 --> Item14;\n    Item32 --> Item12;\n    Item33 --> Item17;\n    Item33 --> Item15;\n    Item34 --> Item20;\n    Item34 --> Item18;\n    Item35 --> Item21;\n    Item36 --> Item22;\n    Item37 --> Item23;\n    Item38 --> Item24;\n    Item39 --> Item25;\n    Item40 --> Item26;\n    Item41 --> Item27;\n    Item42 --> Item28;\n    Item43 --> Item29;\n    Item44 --> Item31;\n```\n\n----------------------------------------\n\nTITLE: Building Static Storybook\nDESCRIPTION: These commands build a static version of the Storybook documentation.  They use `npm`, `yarn`, or `pnpm` to execute the `build-storybook` script defined in the `package.json` file.  The resulting static files are placed in the `storybook-static` directory, ready for deployment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-storybook\n# or\nyarn build-storybook\n# or\npnpm build-storybook\n```\n\n----------------------------------------\n\nTITLE: Defining and Running Scenarios with describe() (JavaScript)\nDESCRIPTION: This snippet illustrates how to define and execute a scenario using the describe() method from devlow-bench. It takes a name, properties, and a function to run the scenario and supports property value combinations for test coverage.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe } from \"devlow-bench\";\n\ndescribe(\n  \"my scenario\",\n  {\n    /* property options */\n  },\n  async (\n    {\n      /* property values */\n    }\n  ) => {\n    // run the scenario\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables from a Part in JavaScript\nDESCRIPTION: Exports variables `a` and `b` from parts using assert configuration for turbopack. This is useful for modularizing code and managing dependencies with `__TURBOPACK_PART__`.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { a } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export a\"\n};\nexport { b } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export b\"\n};\n```\n\n----------------------------------------\n\nTITLE: Temporal Activity Logging Example\nDESCRIPTION: Example output from Temporal activity logging showing inventory reservation and payment processing steps.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nReserving 2 of item B102\nCharging user 123 for 2 of item B102\n```\n\n----------------------------------------\n\nTITLE: Setter Function - Dog Variable\nDESCRIPTION: Defines a function that sets a new value for the dog variable\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setDog(newDog) {\n    dog = newDog;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing Variable in JavaScript\nDESCRIPTION: A new variable 'foobarCopy' is declared and assigned the current value of 'foobar'. It acts as a duplicate or snapshot of 'foobar'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet foobarCopy = foobar;\n\n```\n\n----------------------------------------\n\nTITLE: Importing createConnection from Node.js Net\nDESCRIPTION: Import the createConnection function from the 'net' module in Node.js. This function is necessary for establishing TCP connections for IPC. Does not take any direct parameters. Expect net module's availability on the environment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createConnection } from \"node:net\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Next.js SWC Windows x64 MSVC Package in Markdown\nDESCRIPTION: Shows the reference to the Windows x64 MSVC binary package for the Next.js SWC compiler. This package contains platform-specific binaries compiled for x86_64-pc-windows-msvc architecture.\nSOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/win32-x64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@next/swc-win32-x64-msvc\n```\n\n----------------------------------------\n\nTITLE: Creating gridTemplateRows Styling Function\nDESCRIPTION: Defines the gridTemplateRows styling function using the style utility to handle the 'gridTemplateRows' CSS property.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport style from './style';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 25\n};\nconst gridTemplateRows = style({\n    prop: 'gridTemplateRows'\n});\nexport { gridTemplateRows as p } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Math Expression in Markdown\nDESCRIPTION: This snippet shows how to define an inline math expression using backticks in Markdown. It represents the mathematical symbol for lift coefficient.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/rehype-plugin/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```math\nC_L\n```\n```\n\n----------------------------------------\n\nTITLE: Creating IPC Connection with Node.js Socket\nDESCRIPTION: Defines createIpc function to manage bi-directional communication over sockets, handling incoming and outgoing messages, and managing connection state. It requires a port number and establishes a connection using createConnection.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createIpc(port) {\n    const socket = createConnection(port, \"127.0.0.1\");\n    const packetQueue = [];\n    const recvPromiseResolveQueue = [];\n    function pushPacket(packet) {\n        const recvPromiseResolve = recvPromiseResolveQueue.shift();\n        if (recvPromiseResolve != null) {\n            recvPromiseResolve(JSON.parse(packet.toString(\"utf8\")));\n        } else {\n            packetQueue.push(packet);\n        }\n    }\n    let state = {\n        type: \"waiting\"\n    };\n    let buffer = Buffer.alloc(0);\n    socket.once(\"connect\", ()=>{\n        socket.on(\"data\", (chunk)=>{\n            buffer = Buffer.concat([\n                buffer,\n                chunk\n            ]);\n            loop: while(true){\n                switch(state.type){\n                    case \"waiting\":\n                        {\n                            if (buffer.length >= 4) {\n                                const length = buffer.readUInt32BE(0);\n                                buffer = buffer.subarray(4);\n                                state = {\n                                    type: \"packet\",\n                                    length\n                                };\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                    case \"packet\":\n                        {\n                            if (buffer.length >= state.length) {\n                                const packet = buffer.subarray(0, state.length);\n                                buffer = buffer.subarray(state.length);\n                                state = {\n                                    type: \"waiting\"\n                                };\n                                pushPacket(packet);\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    });\n    socket.once(\"close\", ()=>{\n        process.exit(0);\n    });\n    function send(message) {\n        const packet = Buffer.from(JSON.stringify(message), \"utf8\");\n        const length = Buffer.alloc(4);\n        length.writeUInt32BE(packet.length);\n        socket.write(length);\n        return new Promise((resolve, reject)=>{\n            socket.write(packet, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    function sendReady() {\n        const length = Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return new Promise((resolve, reject)=>{\n            socket.write(length, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    return {\n        async recv () {\n            const packet = packetQueue.shift();\n            if (packet != null) {\n                return JSON.parse(packet.toString(\"utf8\"));\n            }\n            const result = await new Promise((resolve)=>{\n                recvPromiseResolveQueue.push((result)=>{\n                    resolve(result);\n                });\n            });\n            return result;\n        },\n        send (message) {\n            return send(message);\n        },\n        sendReady,\n        async sendError (error) {\n            try {\n                await send({\n                    type: \"error\",\n                    ...structuredError(error)\n                });\n            } catch (err) {\n                console.error(\"failed to send error back to rust:\", err);\n                process.exit(1);\n            }\n            process.exit(0);\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dynamic File System Operations - Node.js - JavaScript\nDESCRIPTION: This snippet demonstrates a highly dynamic use of the fs.readFileSync function with unknown parameters, which is not recommended due to unpredictability and potential security issues. It highlights potential issues with reading files in a dynamic manner without explicit parameters, leading to unpredictable behavior.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-7dbc77.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.readFileSync(unknown);\n```\n\n----------------------------------------\n\nTITLE: Importing Static Generation Bailout in Next.js\nDESCRIPTION: Imports the static-generation-bailout module for handling static generation errors in Next.js applications.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport '../../client/components/static-generation-bailout';\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Front Matter in Markdown\nDESCRIPTION: This snippet defines the front matter for a blog post using YAML syntax within Markdown. It includes the title, an excerpt describing the content, and the publication date.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/_posts/prancing-pony.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"At the Sign of the Prancing Pony\"\nexcerpt: \"The Hobbits reach the The Prancing Pony inn at Bree, where Frodo uses\na false name, Underhill.\"\ndate: \"2021-03-03\"\n---\n```\n\n----------------------------------------\n\nTITLE: Module Entrypoints Definition\nDESCRIPTION: Defines the entrypoints for the module, including ModuleEvaluation and exports for IPC and structuredError functionality.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    ModuleEvaluation: 9,\n    Export(\n        \"IPC\",\n    ): 10,\n    Export(\n        \"structuredError\",\n    ): 11,\n    Exports: 12,\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting React (JavaScript)\nDESCRIPTION: This module imports and then exports React.  This allows other modules to import React through this module and it also creates a variable aliased to 'a'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"__TURBOPACK_PART__\\\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nexport { React as a } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Fuzzponent CLI Options Documentation\nDESCRIPTION: Comprehensive list of command line options for the Fuzzponent tool. Includes parameters for controlling hierarchy depth, random seed, output directory, component name length, number of children per component, and file extensions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/bench/fuzzponent/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOptions:\n      --help       Show help                                           [boolean]\n      --version    Show version number                                 [boolean]\n  -d, --depth      component hierarchy depth                 [number] [required]\n  -s, --seed       prng seed                                 [number] [required]\n  -o, --outdir     the directory where components should be written\n     [string] [default: \"/Users/timneutkens/projects/next.js/bench/nested-deps\"]\n      --minLen     the smallest acceptable component name length\n                                                          [number] [default: 18]\n      --maxLen     the largest acceptable component name length\n                                                          [number] [default: 24]\n      --minChild   the smallest number of acceptable component children\n                                                           [number] [default: 4]\n      --maxChild   the largest number of acceptable component children\n                                                          [number] [default: 80]\n      --extension  extension to use for generated components\n                                                       [string] [default: \"jsx\"]\n```\n\n----------------------------------------\n\nTITLE: License Attribution for ws Library in Next.js\nDESCRIPTION: This comment provides license attribution for the ws library used in the frame.js file of the undici/lib/web/websocket directory. It specifies the MIT License and credits Einar Otto Stangvik as the author.\nSOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/load.js.LEGAL.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */\n```\n\n----------------------------------------\n\nTITLE: Implementing Forbidden Component in Next.js (JavaScript)\nDESCRIPTION: This code snippet shows how to create a Forbidden component in Next.js using JavaScript. It renders the same UI as the TypeScript version, with a heading, message, and a link to return home when access is forbidden.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/forbidden.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Forbidden() {\n  return (\n    <div>\n      <h2>Forbidden</h2>\n      <p>You are not authorized to access this resource.</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: String Append Operation\nDESCRIPTION: Appends the string 'foo' to the foobar variable.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfoobar += \"foo\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing Variable a as x in Javascript\nDESCRIPTION: This snippet imports a variable 'a' and renames it to 'x' within the module's scope. It uses Turbopack-specific syntax for importing modules and assertions.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as x } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Dynamic APIs Usage (JavaScript)\nDESCRIPTION: The `usedDynamicAPIs` function determines whether any dynamic APIs have been used during prerendering by checking the length of the `dynamicAccesses` array in the `prerenderState`. This indicates if the page relies on dynamic data that prevents static generation.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction usedDynamicAPIs(prerenderState) {\n    return prerenderState.dynamicAccesses.length > 0;\n}\nexport { usedDynamicAPIs };\nexport { usedDynamicAPIs as m } from \\\"__TURBOPACK_VAR__\\\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Assignment\nDESCRIPTION: Simple assignment of value 1 to variable a\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\na = 1;\n```\n\n----------------------------------------\n\nTITLE: Importing TurboPack Parts and Checking React Postpone Support\nDESCRIPTION: Module evaluation code that imports TurboPack parts and React, then checks for the existence of the React.unstable_postpone function. This is used to determine if the postpone feature is available in the current React version.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport React from 'react';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nconst hasPostpone = typeof React.unstable_postpone === 'function';\nexport { hasPostpone as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Throwing Undefined Error in JavaScript (Next.js)\nDESCRIPTION: This snippet illustrates how throwing an undefined error can occur in a Next.js application. It outlines an example function that throws a variable that hasn't been initialized, leading to an incorrect error handling scenario. Developers should ensure valid error instances are thrown to avoid confusion.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/threw-undefined.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getData() {\n  let error\n  throw error\n}\n\nfunction Page() {\n  const error = data?.error || null\n  throw error\n}\n```\n\n----------------------------------------\n\nTITLE: Calling c1_3 and c2_2 for Side Effects in JavaScript\nDESCRIPTION: This snippet initiates a call to the `c1_3` function, which triggers its interdependencies. It serves as a side effect trigger for functional execution.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nc1_3();\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Test Template with Placeholder\nDESCRIPTION: A Jest test suite template that uses a {{name}} placeholder for the test description. Contains a single test case that verifies type checking using expect assertion.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/unit/example.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('{{name}}', () => {\n  it('should work', async () => {\n    expect(typeof 'hello').toBe('string')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'use memo' Directive in React Component (JavaScript)\nDESCRIPTION: Example of using the 'use memo' directive in a React component to opt-in for compilation when in annotation mode.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  'use memo'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting getClientComponentLoaderMetrics Function in JavaScript\nDESCRIPTION: The function 'getClientComponentLoaderMetrics' retrieves the current metrics of client component loading. It returns an object with metrics if loading has occurred, and can reset the counters based on the options parameter. The function depends on the variables for load metrics.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getClientComponentLoaderMetrics(options = {}) {\n    const metrics = clientComponentLoadStart === 0 ? undefined : {\n        clientComponentLoadStart,\n        clientComponentLoadTimes,\n        clientComponentLoadCount\n    };\n    if (options.reset) {\n        clientComponentLoadStart = 0;\n        clientComponentLoadTimes = 0;\n        clientComponentLoadCount = 0;\n    }\n    return metrics;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Function c2_2 and Calling c2_3 in JavaScript\nDESCRIPTION: This snippet defines `c2_2` that calls `c2_3`, illustrating dependency management within the functions while being exportable through TurboPack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport function c2_2() {\n    return c2_3();\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Setup (JavaScript)\nDESCRIPTION: This code demonstrates setting up the root layout in a Next.js application using JavaScript. It imports a server-side function `getUser` to fetch user data and passes the resulting promise to a `UserProvider` component. The `userPromise` is not awaited, allowing Next.js to start data fetching early on the server. This example improves performance by initiating data fetching in the root layout, avoiding client waterfalls.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserProvider } from './user-provider'\nimport { getUser } from './user' // some server-side function\n\nexport default function RootLayout({ children }) {\n  let userPromise = getUser() // do NOT await\n\n  return (\n    <html lang=\"en\">\n      <body>\n        <UserProvider userPromise={userPromise}>{children}</UserProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Export of Single Module Part in TurboPack (JavaScript)\nDESCRIPTION: This snippet demonstrates the merged result of exporting a single module part (c1_3) in TurboPack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { e as c1_3 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -0\n};\nexport { c1_3 };\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Internal Function - JavaScript\nDESCRIPTION: This snippet imports 'upper' from a module and defines an 'internal' function that uses it with 'foobar'. This function is exported for external use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -3\n};\nimport { upper } from \"module\";\nfunction internal() {\n    return upper(foobar);\n}\nexport { internal as b } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable a and Assigning x Value in Javascript\nDESCRIPTION: This snippet declares a variable 'a' and assigns it the current value of variable 'x'. This is similar to the declarations of variables 'y' and 'z'.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = x;\n```\n\n----------------------------------------\n\nTITLE: Importing TurboPack Part and App Module\nDESCRIPTION: Imports a TurboPack part and a custom App module. This snippet sets up the basic structure for importing TurboPack parts and application-specific modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport 'VAR_MODULE_APP';\n\n```\n\n----------------------------------------\n\nTITLE: Implementing IPC Communication with Socket for TurboPack in JavaScript\nDESCRIPTION: Creates an IPC connection using Node.js sockets with methods for sending and receiving JSON messages. Includes packet handling with length-prefixed protocol, error reporting capabilities, and buffer management for asynchronous communication.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { d as structuredError } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -6\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { createConnection } from \"node:net\";\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nfunction createIpc(port) {\n    const socket = createConnection(port, \"127.0.0.1\");\n    const packetQueue = [];\n    const recvPromiseResolveQueue = [];\n    function pushPacket(packet) {\n        const recvPromiseResolve = recvPromiseResolveQueue.shift();\n        if (recvPromiseResolve != null) {\n            recvPromiseResolve(JSON.parse(packet.toString(\"utf8\")));\n        } else {\n            packetQueue.push(packet);\n        }\n    }\n    let state = {\n        type: \"waiting\"\n    };\n    let buffer = Buffer.alloc(0);\n    socket.once(\"connect\", ()=>{\n        socket.on(\"data\", (chunk)=>{\n            buffer = Buffer.concat([\n                buffer,\n                chunk\n            ]);\n            loop: while(true){\n                switch(state.type){\n                    case \"waiting\":\n                        {\n                            if (buffer.length >= 4) {\n                                const length = buffer.readUInt32BE(0);\n                                buffer = buffer.subarray(4);\n                                state = {\n                                    type: \"packet\",\n                                    length\n                                };\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                    case \"packet\":\n                        {\n                            if (buffer.length >= state.length) {\n                                const packet = buffer.subarray(0, state.length);\n                                buffer = buffer.subarray(state.length);\n                                state = {\n                                    type: \"waiting\"\n                                };\n                                pushPacket(packet);\n                            } else {\n                                break loop;\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    });\n    socket.once(\"close\", ()=>{\n        process.exit(0);\n    });\n    function send(message) {\n        const packet = Buffer.from(JSON.stringify(message), \"utf8\");\n        const length = Buffer.alloc(4);\n        length.writeUInt32BE(packet.length);\n        socket.write(length);\n        return new Promise((resolve, reject)=>{\n            socket.write(packet, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    function sendReady() {\n        const length = Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return new Promise((resolve, reject)=>{\n            socket.write(length, (err)=>{\n                process.stderr.write(`TURBOPACK_OUTPUT_D\\n`);\n                process.stdout.write(`TURBOPACK_OUTPUT_D\\n`);\n                if (err != null) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    return {\n        async recv () {\n            const packet = packetQueue.shift();\n            if (packet != null) {\n                return JSON.parse(packet.toString(\"utf8\"));\n            }\n            const result = await new Promise((resolve)=>{\n                recvPromiseResolveQueue.push((result)=>{\n                    resolve(result);\n                });\n            });\n            return result;\n        },\n        send (message) {\n            return send(message);\n        },\n        sendReady,\n        async sendError (error) {\n            try {\n                await send({\n                    type: \"error\",\n                    ...structuredError(error)\n                });\n            } catch (err) {\n                console.error(\"failed to send error back to rust:\", err);\n                process.exit(1);\n            }\n            process.exit(0);\n        }\n    };\n}\nconst PORT = process.argv[2];\nconst IPC = createIpc(parseInt(PORT, 10));\nexport { createIpc as e } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { PORT as f } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { IPC as g } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Server Component with Blog Provider\nDESCRIPTION: Server component implementation that creates a blog data promise and provides it through the BlogProvider.\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlogProvider } from './context'\n\nexport default function Page() {\n  const blogPromise = fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n\n  return (\n    <BlogProvider blogPromise={blogPromise}>\n      <BlogPosts />\n    </BlogProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Additional Module Parts in TurboPack (JavaScript)\nDESCRIPTION: This snippet shows another example of importing and exporting module parts in TurboPack, using a different part identifier.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h as c2_2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -1\n};\nexport { c2_2 };\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Pages Route Module\nDESCRIPTION: Module evaluation for a Next.js pages route module. This code imports necessary components and initializes a PagesRouteModule with route definition, App and Document components, and userland code.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 2\n};\nimport { RouteKind } from '../../server/future/route-kind';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 8\n};\nimport App from 'VAR_MODULE_APP';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 6\n};\nimport Document from 'VAR_MODULE_DOCUMENT';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 10\n};\nimport * as userland from 'VAR_USERLAND';\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 22\n};\nconst routeModule = new PagesRouteModule({\n    definition: {\n        kind: RouteKind.PAGES,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        bundlePath: '',\n        filename: ''\n    },\n    components: {\n        App,\n        Document\n    },\n    userland\n});\nexport { routeModule };\nexport { routeModule as r } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\nexport { };\n```\n\n----------------------------------------\n\nTITLE: Update TypeScript Types for GROQ Queries\nDESCRIPTION: This command updates TypeScript types in a Next.js project whenever a GROQ query is modified. It relies on the project having npm scripts configured with 'typegen'. The command updates types based on current query structures. Outputs updated type definitions for the project.\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typegen\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Final\nDESCRIPTION: This is the final mermaid diagram, outlining the dependencies between the created items.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    N0[\"Items: [ItemId(0, Normal), ItemId(1, VarDeclarator(0)), ItemId(2, VarDeclarator(0)), ItemId(4, VarDeclarator(0)), ItemId(5, VarDeclarator(0))] \"];\n    N1[\"Items: [ItemId(3, Normal), ItemId(6, Normal), ItemId(7, VarDeclarator(0))] \"];\n    N2[\"Items: [ItemId(8, VarDeclarator(0)), ItemId(Export((&quot;b&quot;, #2), &quot;b&quot;))] \"];\n    N3[\"Items: [ItemId(Export((&quot;a&quot;, #2), &quot;a&quot;))] \"];\n    N1 --> N0;\n    N3 --> N1;\n    N2 --> N0;\n    N2 --> N1;\n```\n\n----------------------------------------\n\nTITLE: Managing String Concatenation in Module Parts\nDESCRIPTION: This snapshot performs string concatenation, amending 'foobar' within a Turbopack module environment to illustrate manipulation of imported variables. Dependencies include a TurboPack-compatible setup, accommodating string operations and integration with module parts. This is constrained to scenarios compatible with edit operations via Turbopack.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { b as foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -2\n};\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 4\n};\nfoobar += \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Re-exporting gridColumn Function\nDESCRIPTION: Re-exports the gridColumn styling function for use in other modules.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { j as gridColumn } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -20\n};\nexport { gridColumn };\n```\n\n----------------------------------------\n\nTITLE: Using cacheLife in Next.js Component\nDESCRIPTION: Demonstrates how to import and use the cacheLife function within a component with the 'use cache' directive\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use cache'\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport default async function Page() {\n  cacheLife('hours')\n  return <div>Page</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use cache'\nimport { unstable_cacheLife as cacheLife } from 'next/cache'\n\nexport default async function Page() {\n  cacheLife('hours')\n  return <div>Page</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Re-exporting ResponseCookies Class\nDESCRIPTION: Imports the ResponseCookies class from the cookies module and re-exports it with a named export. Uses TurboPack module assertion syntax for part declarations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: 0\n};\nimport { ResponseCookies } from './cookies';\nexport { ResponseCookies as j } from \"__TURBOPACK_VAR__\" assert {\n    __turbopack_var__: true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Exporting from TurboPack for Effects\nDESCRIPTION: This snippet imports the 'effects' array from another TurboPack part and re-exports it, effectively optimizing module handling with assertions. It utilizes ES module syntax and relies on TurboPack's specific export structure.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport { effect } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export effect\"\n};\nexport { effects } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export effects\"\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Alt Text for Open Graph Image\nDESCRIPTION: A simple text string that demonstrates what alt text for an Open Graph image might look like. Alt text helps with accessibility and SEO by providing a text description of the image.\nSOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/metadata/app/opengraph/static/opengraph-image.alt.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA alt txt for og\n```\n\n----------------------------------------\n\nTITLE: Exporting gridTemplateColumns from TurboPack Part in JavaScript\nDESCRIPTION: A re-export of the gridTemplateColumns styling function from a TurboPack part module.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport { o as gridTemplateColumns } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: -25\n};\nexport { gridTemplateColumns };\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Content Instructions for Documentation\nDESCRIPTION: An HTML comment that provides instructions for editing the documentation page content, explaining that the content is generated from the source specified in the frontmatter.\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/04-styling/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Conditional Export Configuration with Assertions\nDESCRIPTION: Defines exports based on Turbopack's entrypoints and configurations, portrayed in JSON-structured declarations. The snippet's setup requires a JavaScript infrastructure compatible with Turbopack, remaining relatively static in execution but essential for outlining entrypoint contributions. Presupposes established entrypoint allocations.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#2025-04-21_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { foo } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foo\"\n};\nexport { external1 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external1\"\n};\nexport { external2 } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export external2\"\n};\nexport { foobar } from \"__TURBOPACK_PART__\" assert {\n    __turbopack_part__: \"export foobar\"\n};\n```\n\n----------------------------------------\n\nTITLE: Export Flow Diagram in Phase 3\nDESCRIPTION: This Mermaid diagram represents phase 3 of exporting CSS grid properties, detailing how properties such as gridColumn and columnGap are progressively exported. It helps illustrate the dependencies and flow among these properties during the third phase of the export process.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item6;\n    Item2;\n    Item7;\n    Item3;\n    Item8;\n    Item9;\n    Item4;\n    Item10;\n    Item5;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item30;\n    Item31;\n    Item32;\n    Item32[\"export gap\"];\n    Item33;\n    Item33[\"export columnGap\"];\n    Item34;\n    Item34[\"export rowGap\"];\n    Item35;\n    Item35[\"export gridColumn\"];\n    Item36;\n    Item36[\"export gridRow\"];\n    Item37;\n    Item37[\"export gridAutoFlow\"];\n    Item38;\n    Item38[\"export gridAutoColumns\"];\n    Item39;\n    Item39[\"export gridAutoRows\"];\n    Item40;\n    Item40[\"export gridTemplateColumns\"];\n    Item41;\n    Item41[\"export gridTemplateRows\"];\n    Item42;\n    Item42[\"export gridTemplateAreas\"];\n    Item43;\n    Item43[\"export gridArea\"];\n    Item44;\n    Item44[\"export default\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item4 --> Item3;\n    Item5 --> Item4;\n    Item12 --> Item8;\n    Item12 --> Item9;\n    Item12 --> Item10;\n    Item12 --> Item5;\n    Item13 --> Item12;\n    Item13 --> Item11;\n    Item14 --> Item13;\n    Item14 --> Item12;\n    Item15 --> Item8;\n    Item15 --> Item9;\n    Item15 --> Item10;\n    Item15 --> Item13;\n    Item16 --> Item15;\n    Item16 --> Item11;\n    Item17 --> Item16;\n    Item17 --> Item15;\n    Item18 --> Item8;\n    Item18 --> Item9;\n    Item18 --> Item10;\n    Item18 --> Item16;\n    Item19 --> Item18;\n    Item19 --> Item11;\n    Item20 --> Item19;\n    Item20 --> Item18;\n    Item21 --> Item6;\n    Item21 --> Item19;\n    Item22 --> Item6;\n    Item22 --> Item21;\n    Item23 --> Item6;\n    Item23 --> Item22;\n    Item24 --> Item6;\n    Item24 --> Item23;\n    Item25 --> Item6;\n    Item25 --> Item24;\n    Item26 --> Item6;\n    Item26 --> Item25;\n    Item27 --> Item6;\n    Item27 --> Item26;\n    Item28 --> Item6;\n    Item28 --> Item27;\n    Item29 --> Item6;\n    Item29 --> Item28;\n    Item30 --> Item7;\n    Item30 --> Item14;\n    Item30 --> Item12;\n    Item30 --> Item17;\n    Item30 --> Item15;\n    Item30 --> Item20;\n    Item30 --> Item18;\n    Item30 --> Item21;\n    Item30 --> Item22;\n    Item30 --> Item23;\n    Item30 --> Item24;\n    Item30 --> Item25;\n    Item30 --> Item26;\n    Item30 --> Item27;\n    Item30 --> Item28;\n    Item30 --> Item29;\n    Item31 --> Item30;\n    Item32 --> Item14;\n    Item32 --> Item12;\n    Item33 --> Item17;\n    Item33 --> Item15;\n    Item34 --> Item20;\n    Item34 --> Item18;\n    Item35 --> Item21;\n    Item36 --> Item22;\n    Item37 --> Item23;\n    Item38 --> Item24;\n    Item39 --> Item25;\n    Item40 --> Item26;\n    Item41 --> Item27;\n    Item42 --> Item28;\n    Item43 --> Item29;\n    Item44 --> Item31;\n```\n\n----------------------------------------\n\nTITLE: Assigning Sum of y and z to x in Javascript\nDESCRIPTION: This snippet assigns the sum of variables 'y' and 'z' to the variable 'x'. It involves an arithmetic operation and assignment.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nx = y + z;\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js net Module\nDESCRIPTION: Imports the 'net' module from Node.js, which is used for creating network connections.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"node:net\";\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Graph for Next.js Project Phase 3\nDESCRIPTION: This Mermaid graph diagram shows the dependency relationships between 30 items in Phase 3 of a Next.js project. It builds upon Phase 2, maintaining the same structure but adds new dependencies for Item7 and Item8.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#2025-04-21_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Item1;\n    Item4;\n    Item2;\n    Item5;\n    Item3;\n    Item6;\n    Item7;\n    Item8;\n    Item9;\n    Item10;\n    Item11;\n    Item12;\n    Item13;\n    Item14;\n    Item15;\n    Item16;\n    Item17;\n    Item18;\n    Item19;\n    Item20;\n    Item21;\n    Item22;\n    Item23;\n    Item24;\n    Item25;\n    Item26;\n    Item27;\n    Item28;\n    Item29;\n    Item29[\"export structuredError\"];\n    Item30;\n    Item30[\"export IPC\"];\n    Item2 --> Item1;\n    Item3 --> Item2;\n    Item9 --> Item3;\n    Item9 -.-> Item6;\n    Item9 -.-> Item5;\n    Item9 -.-> Item4;\n    Item9 -.-> Item7;\n    Item10 --> Item8;\n    Item10 --> Item9;\n    Item10 -.-> Item6;\n    Item10 -.-> Item5;\n    Item10 -.-> Item4;\n    Item10 -.-> Item7;\n    Item11 --> Item10;\n    Item11 -.-> Item6;\n    Item11 -.-> Item5;\n    Item11 -.-> Item4;\n    Item11 -.-> Item7;\n    Item12 --> Item11;\n    Item12 -.-> Item6;\n    Item12 -.-> Item5;\n    Item12 -.-> Item4;\n    Item12 -.-> Item7;\n    Item13 --> Item12;\n    Item13 -.-> Item6;\n    Item13 -.-> Item5;\n    Item13 -.-> Item4;\n    Item13 -.-> Item7;\n    Item14 --> Item12;\n    Item14 --> Item13;\n    Item14 -.-> Item6;\n    Item14 -.-> Item5;\n    Item14 -.-> Item4;\n    Item14 -.-> Item7;\n    Item15 --> Item12;\n    Item15 --> Item14;\n    Item15 -.-> Item6;\n    Item15 -.-> Item5;\n    Item15 -.-> Item4;\n    Item15 -.-> Item7;\n    Item16 --> Item12;\n    Item16 --> Item15;\n    Item16 -.-> Item6;\n    Item16 -.-> Item5;\n    Item16 -.-> Item4;\n    Item16 -.-> Item7;\n    Item17 --> Item12;\n    Item17 --> Item16;\n    Item17 -.-> Item6;\n    Item17 -.-> Item5;\n    Item17 -.-> Item4;\n    Item17 -.-> Item7;\n    Item18 --> Item12;\n    Item18 --> Item17;\n    Item18 -.-> Item6;\n    Item18 -.-> Item5;\n    Item18 -.-> Item4;\n    Item18 -.-> Item7;\n    Item19 --> Item12;\n    Item19 --> Item18;\n    Item19 -.-> Item6;\n    Item19 -.-> Item5;\n    Item19 -.-> Item4;\n    Item19 -.-> Item7;\n    Item20 --> Item12;\n    Item20 --> Item19;\n    Item20 -.-> Item6;\n    Item20 -.-> Item5;\n    Item20 -.-> Item4;\n    Item20 -.-> Item7;\n    Item21 --> Item12;\n    Item21 --> Item20;\n    Item21 -.-> Item6;\n    Item21 -.-> Item5;\n    Item21 -.-> Item4;\n    Item21 -.-> Item7;\n    Item22 --> Item12;\n    Item22 --> Item21;\n    Item22 -.-> Item6;\n    Item22 -.-> Item5;\n    Item22 -.-> Item4;\n    Item22 -.-> Item7;\n    Item23 --> Item12;\n    Item23 --> Item22;\n    Item23 -.-> Item6;\n    Item23 -.-> Item5;\n    Item23 -.-> Item4;\n    Item23 -.-> Item7;\n    Item24 --> Item12;\n    Item24 --> Item23;\n    Item24 -.-> Item6;\n    Item24 -.-> Item5;\n    Item24 -.-> Item4;\n    Item24 -.-> Item7;\n    Item25 --> Item12;\n    Item25 --> Item24;\n    Item25 -.-> Item6;\n    Item25 -.-> Item5;\n    Item25 -.-> Item4;\n    Item25 -.-> Item7;\n    Item26 --> Item12;\n    Item26 --> Item25;\n    Item26 -.-> Item6;\n    Item26 -.-> Item5;\n    Item26 -.-> Item4;\n    Item26 -.-> Item7;\n    Item27 --> Item12;\n    Item27 --> Item26;\n    Item27 -.-> Item6;\n    Item27 -.-> Item5;\n    Item27 -.-> Item4;\n    Item27 -.-> Item7;\n    Item28 --> Item12;\n    Item28 --> Item27;\n    Item28 -.-> Item6;\n    Item28 -.-> Item5;\n    Item28 -.-> Item4;\n    Item28 -.-> Item7;\n    Item29 --> Item7;\n    Item30 --> Item11;\n    Item30 --> Item10;\n    Item7 --> Item6;\n    Item7 --> Item5;\n    Item8 --> Item4;\n    Item8 --> Item7;\n```\n\n----------------------------------------\n\nTITLE: Logging statement in Javascript\nDESCRIPTION: This snippet logs the string \"Hello\" to the console. It's a simple statement that demonstrates a basic side effect.\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello\");\n```"
  }
]