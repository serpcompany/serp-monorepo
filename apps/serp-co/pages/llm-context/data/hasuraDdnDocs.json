[
  {
    "owner": "hasura",
    "repo": "ddn-docs",
    "content": "TITLE: Running Introspect Command for Data Connectors\nDESCRIPTION: This shell command is used to introspect a data source using a specified data connector. It requires the Docker daemon to be running to function properly and updates configuration files with source schema details necessary for Hasura metadata. The command is applicable for any data connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/introspect-a-source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect <name_of_connector>\n```\n\n----------------------------------------\n\nTITLE: Sample DataConnectorLink Configuration in YAML\nDESCRIPTION: Example configuration showing the basic structure of a DataConnectorLink including URL specification, headers, and schema definition. This demonstrates how to configure a data connector with its core components including capabilities for queries and mutations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/data-connector-links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: data_connector\n  url:\n    singleUrl:\n      value: http://data_connector:8100\n  headers: {}\n  schema:\n    version: v0.1\n    schema:\n      scalar_types: {}\n      object_types: {}\n      collections: []\n      functions: []\n      procedures: []\n    capabilities:\n      version: 0.1.3\n      capabilities:\n        query:\n          nested_fields: {}\n          variables: {}\n        mutation: {}\n```\n\n----------------------------------------\n\nTITLE: Nested Object Filtering in Hasura GraphQL\nDESCRIPTION: Shows how to filter both parent and nested objects using where clauses. Filters authors based on their articles' ratings and then filters the returned articles again.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI interaction in TypeScript\nDESCRIPTION: TypeScript function to generate SEO descriptions using OpenAI's API. It sets up the OpenAI client, defines the prompt, and processes the response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst OPENAI_API_KEY =\n  \"your_openai_api_key\";\n\nconst client = new OpenAI({\n  apiKey: OPENAI_API_KEY,\n});\n\n/**\n* @readonly\n*/\nexport async function generateSeoDescription(input: string): Promise<string | null> {\n  const response = await client.chat.completions.create({\n    messages: [\n      {\n        role: \"system\",\n        content:\n          \"You are a senior marketing associate. Take the product description provided and improve upon it to rank well with SEO.\",\n      },\n      { role: \"user\", content: input },\n    ],\n    model: \"gpt-4o\",\n  });\n\n  return response.choices[0].message.content;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from GraphQL Mutation\nDESCRIPTION: This JSON object represents the expected response from the GraphQL mutation, showing the number of affected rows and the updated post information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updatePostTitlesByAge\": {\n      \"affectedRows\": 2,\n      \"returning\": [\n        {\n          \"id\": 1,\n          \"title\": \"My First Post - age 25\"\n        },\n        {\n          \"id\": 2,\n          \"title\": \"Another Post - age 25\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypePermissions for Field-Level Access Control in YAML\nDESCRIPTION: This code demonstrates how to configure TypePermissions to specify which fields of the Users model are accessible to different roles. It shows allowed fields for both 'admin' and 'user' roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/1-simple-user-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Users\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - createdAt\n          - email\n          - favoriteArtist\n          - id\n          - isEmailVerified\n          - lastSeen\n          - name\n          - password\n          - updatedAt\n    - role: user\n      output:\n        allowedFields:\n          - createdAt\n          - email\n          - favoriteArtist\n          - id\n          - isEmailVerified\n          - lastSeen\n          - name\n          - password\n          - updatedAt\n```\n\n----------------------------------------\n\nTITLE: Configuring TypePermissions for Role-Based Field Access\nDESCRIPTION: This snippet defines TypePermissions for an Orders type, allowing admin role to access all fields while restricting the user role from accessing the deliveryDate field. This demonstrates field-level access control based on JWT roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Orders\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - createdAt\n          - deliveryDate\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n  # highlight-start\n    - role: user\n      output:\n        allowedFields:\n          - createdAt\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Initializing Parent Project and Git Repository for Hasura DDN\nDESCRIPTION: Creates a new local project for the parent supergraph and initializes a git repository. This sets up the foundation for coordinating multiple subgraphs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init parent-project && cd parent-project && git init\n```\n\n----------------------------------------\n\nTITLE: Query Users with Posts using GraphQL\nDESCRIPTION: This GraphQL query retrieves a list of users along with their associated posts. It selects the `id` and `name` fields for each user, as well as the `title` field for each post related to the user. The query demonstrates how the relationship between users and posts can be used to retrieve nested data in a single request.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"query UsersWithPosts {\\n  users {\\n    id\\n    posts {\\n      title\\n    }\\n    name\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Type Permission Role Configuration in YAML\nDESCRIPTION: Example showing type permission configuration for a user role with input and output permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\noutput:\n  allowedFields:\n    - article_id\n    - author_id\ninput:\n  fieldPresets:\n    - field: author_id\n      value:\n        sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Build Local Supergraph\nDESCRIPTION: Create an immutable build of the supergraph for local development.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Using _or Operator for Flexible Filtering in Hasura GraphQL\nDESCRIPTION: This code snippet shows how to use the '_or' operator to filter articles either with a rating above 4 or published after January 1, 2018. This allows for flexible querying against multiple criteria. The output includes articles meeting either condition. It requires a Hasura backend with articles data having rating and publication date attributes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/boolean-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery ArticlesPublishedAfterCertainDateAndRatedMoreThanFour {\n  articles (\n    where: {\n      _or: [\n        {rating: {_gte: 4}},\n        {published_on: {_gte: \"2018-01-01\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    rating\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with Nested Relationships\nDESCRIPTION: JSON response showing posts with their nested user information, demonstrating the relationship between the two models in the API response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"id\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Parameterized Native Query JSON Configuration\nDESCRIPTION: This snippet illustrates a parameterized native query configuration in JSON format for Hasura. It includes an SQL statement that accepts a parameter and defines the expected columns and their types. Understanding this structure is crucial for implementing dynamic queries that require user input.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/native-operations/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Authors using GraphQL in Hasura DDN\nDESCRIPTION: GraphQL query to fetch posts along with their associated authors. This demonstrates the use of relationships between the 'posts' and 'users' tables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPostsWithAuthors {\n  posts {\n    postId\n    title\n    content\n    user {\n      age\n      name\n      userId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Configuration Schema Types\nDESCRIPTION: Defines the structure and properties for configuring different aspects of a GraphQL schema including field names, type names, and operator configurations for features like filtering, sorting, and aggregation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/graphql-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `filterInputFieldName` | [GraphQlFieldName] | true | The name of the filter input parameter |\n| `countFieldName` | [GraphQlFieldName] | true | The name of the _count field |\n| `countDistinctFieldName` | [GraphQlFieldName] | true | The name of the _count_distinct field |\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelGraphQlDefinition in YAML\nDESCRIPTION: Example YAML configuration for ModelGraphQlDefinition, showing how to set up selectUniques, selectMany, and aggregate queries for a GraphQL API based on an Article model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nselectUniques:\n  - queryRootField: ArticleByID\n    uniqueIdentifier:\n      - article_id\n    description: Description for the select unique ArticleByID\nselectMany:\n  queryRootField: ArticleMany\n  description: Description for the select many ArticleMany\norderByExpressionType: Article_Order_By\naggregate:\n  queryRootField: ArticleAggregate\n  description: Aggregate over Articles\n```\n\n----------------------------------------\n\nTITLE: Configuring EC-based JWT Authentication with X509 Certificate\nDESCRIPTION: This example shows how to set up JWT authentication using ECDSA algorithm with a 256-bit key. The public key is provided as an X509 certificate.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: ES256\n          key:\n            value: '\"-----BEGIN CERTIFICATE-----\\nMIIBbjCCARWgAwIBAgIUGn02F6Y6s88dDGmIfwiNxWxDjhswCgYIKoZIzj0EAwIw\\nDTELMAkGA1UEBhMCSU4wHhcNMjMwNTI0MTAzNTI4WhcNMjgwNTIyMTAzNTI4WjAN\\nMQswCQYDVQQGEwJJTjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBFbP6OfrkG0\\n4y93Icpy+MF4FINkfavVFPCOZhKL1H/OkGe5DgSIycKp8w9aJmoHhB1sB3QTugfn\\nRWm5nU/TzsajUzBRMB0GA1UdDgQWBBSaqFjzps1qG+x2DPISjaXTWsTOdDAfBgNV\\nHSMEGDAWgBSaqFjzps1qG+x2DPISjaXTWsTOdDAPBgNVHRMBAf8EBTADAQH/MAoG\\nCCqGSM49BAMCA0cAMEQCIBDHHWa/uLAVdGFEk82auTmw995+MsRwv52VXLw2Z+ji\\nAiAXzOWIcGN8p25uhUN/7v9gEcADGIS4yUiv8gsn/Jk2ow==\\n-----END CERTIFICATE-----'\n```\n\n----------------------------------------\n\nTITLE: Native Query MongoDB Pipeline Example\nDESCRIPTION: This example shows a MongoDB aggregation pipeline configuration for a native query. It defines a pipeline that joins data from the 'Artist' and 'Album' collections, groups the results by 'ArtistId', and projects the desired fields. The pipeline uses `$lookup`, `$unwind`, `$group`, and `$project` aggregation stages.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ArtistWAlbumCount\",\n  \"representation\": \"collection\",\n  \"inputCollection\": \"Artist\",\n  \"description\": \"Artists including their album count\",\n  \"arguments\": {},\n  \"resultDocumentType\": \"ArtistWAlbumCount\",\n  \"objectTypes\": {\n    \"ArtistWAlbumCount\": {\n      \"fields\": {\n        \"ArtistId\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"Name\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        },\n        \"AlbumCount\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"_id\": {\n          \"type\": {\n            \"scalar\": \"objectId\"\n          }\n        }\n      }\n    }\n  },\n  \"pipeline\": [\n    {\n      \"$lookup\": {\n        \"from\": \"Album\",\n        \"localField\": \"ArtistId\",\n        \"foreignField\": \"ArtistId\",\n        \"as\": \"Albums\"\n      }\n    },\n    { \"$unwind\": \"$Albums\" },\n    {\n      \"$group\": {\n        \"_id\": \"$ArtistId\",\n        \"id\": { \"$first\": \"$_id\" },\n        \"Name\": { \"$first\": \"$Name\" },\n        \"AlbumCount\": { \"$count\": {} }\n      }\n    },\n    {\n      \"$project\": {\n        \"_id\": \"$id\",\n        \"ArtistId\": \"$_id\",\n        \"Name\": 1,\n        \"AlbumCount\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Query to PostgreSQL Connector Configuration\nDESCRIPTION: Uses the Hasura DDN CLI to add the native query to the PostgreSQL connector's configuration. This step integrates the SQL file into the connector setup.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_pg/connector.yaml \\\n  -- \\\n  native-operation create \\\n  --operation-path native_operations/queries/order_users_of_same_age.sql \\\n  --kind query\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregated Data of Posts with Hasura DDN\nDESCRIPTION: This snippet demonstrates how to fetch a list of posts along with aggregated data using an aggregation query. The aggregation query retrieves each post's ID and title while also returning the total count of posts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/aggregation-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<GraphiQLIDE\n  query={`query PostsAndAggregate {\n    posts {\n    id\n    title\n  }\n  postsAggregate {\n    _count\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\"\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\"\n      },\n      {\n        \"id\": 5,\n        \"title\": \"Charlie has more to say\"\n      }\n    ],\n    \"postsAggregate\": {\n      \"_count\": 5\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Pool Parameters\nDESCRIPTION: Configures connection pooling behavior with options for maximum connections, timeout settings, and connection lifecycle management. This example shows the default values for the pool settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"poolSettings\":\n  {\n    \"maxConnections\": 50,          // Maximum number of pool connections\n    \"poolTimeout\": 30,             // Maximum time to acquire a connection from the pool (seconds)\n    \"checkConnectionAfterIdle\": 60 // Time at which an idle connection will be checked as still being alive (seconds / null)\n    \"idleTimeout\": 180,            // Time at which an idle connection will be released from the pool (seconds)\n    \"connectionLifetime\": 600,     // Maximum time for an individual connection (seconds)\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in GraphQL Queries for Hasura\nDESCRIPTION: This example demonstrates how to use aliases in GraphQL to rename result fields. It fetches all articles, top-rated articles, and worst-rated article in a single query with different names.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles {\n  articles {\n    title\n    rating\n  }\n  topTwoArticles: articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    title\n    rating\n  }\n  worstArticle: articles(\n    order_by: {rating: asc},\n    limit: 1\n  ) {\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Hasura DDN with YAML\nDESCRIPTION: Example YAML configuration for JWT authentication in Hasura DDN. Defines JWT mode with claims configuration, token location, encryption key, audience, allowed time skew, and issuer information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            value: ultra-secret-very-secret-super-secret-key\n      audience: [\"myapp-1234\", \"myapp-6789\"]\n      allowedSkew: 60\n      issuer: https://my-auth-server.com\n```\n\n----------------------------------------\n\nTITLE: Requesting User Data with Global ID GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates requesting user data using a Global ID. It fetches a user object by ID, providing both the unique database ID and the Global ID. The query facilitates querying across the entire supergraph, simplifying data retrieval and cache handling.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  userById(user_id: 1) {\n    id # This is the global ID of the object in the supergraph\n    user_id # This is the unique identifier of object. Eg: a row in a table.\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Data with Relationships\nDESCRIPTION: GraphQL query demonstrating how to fetch posts with their related user information using the relationship defined in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n    user {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding All Models in DDN\nDESCRIPTION: Command to add all available models from a connector link using wildcard.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector_link_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subgraph to Supergraph Configuration\nDESCRIPTION: Command to add a newly created subgraph to the supergraph's configuration file, linking the subgraph.yaml file to the main supergraph.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph add <subgraph-name> --subgraph ./<subgraph-name>/subgraph.yaml --target-supergraph ./supergraph.yaml\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Non-Optimized Relationship Comparison\nDESCRIPTION: Sample GraphQL query showing a relationship comparison scenario where the data connector lacks relation_comparisons capability. The query demonstrates the structure that will be processed at the query engine level rather than being pushed down to the data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/performance-relationship-comparisons.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  books(where: { author: { name: { _eq: \"Alice Johnson\" } } }) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Client Credentials Configuration\nDESCRIPTION: This YAML snippet configures OAuth 2.0 client credentials flow. It specifies the `tokenUrl`, `clientId`, `clientSecret`, and scopes. Environment variables are used for sensitive values, such as `OAUTH2_CLIENT_ID` and `OAUTH2_CLIENT_SECRET`. The access token will be refreshed automatically by the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsecuritySchemes:\n  petstore_auth:\n    type: oauth2\n    flows:\n      clientCredentials:\n        tokenUrl:\n          value: http://localhost:4444/oauth2/token\n        clientId:\n          env: OAUTH2_CLIENT_ID\n        clientSecret:\n          env: OAUTH2_CLIENT_SECRET\n        scopes:\n          read:pets: read your pets\n          write:pets: modify pets in your account\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Payload with Hasura Custom Claims\nDESCRIPTION: Example JWT payload that includes the required Hasura custom claims. It specifies admin as the default role, allows both user and admin roles, and includes a custom user ID that can be used with permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1735916718,\n  \"exp\": 1796916677,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"admin\",\n    \"x-hasura-allowed-roles\": [\"user\", \"admin\"],\n    \"x-hasura-user-id\": 1234\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords in Go\nDESCRIPTION: Implement a function to hash passwords using bcrypt in Go. This function defines input arguments and output result types, and uses bcrypt to generate the hashed password.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"golang.org/x/crypto/bcrypt\"\n\n  \"hasura-ndc.dev/ndc-go/types\"\n)\n\n// HashPasswordArguments defines the input arguments for the function\ntype HashPasswordArguments struct {\n  Password string `json:\"password\"`\n}\n\n// HashPasswordResult defines the output result for the function\ntype HashPasswordResult string\n\n// ProcedureHashPassword hashes a password string and returns it as a string result\nfunc ProcedureHashPassword(ctx context.Context, state *types.State, arguments *HashPasswordArguments) (*HashPasswordResult, error) {\n  hashedPassword, err := bcrypt.GenerateFromPassword([]byte(arguments.Password), bcrypt.DefaultCost)\n  if err != nil {\n    return nil, fmt.Errorf(\"failed to hash password: %v\", err)\n  }\n\n  // Add your own logic here to hit your Hasura endpoint and perform an insertion\n\n  result := HashPasswordResult(string(hashedPassword))\n  return &result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Permissions with Argument Presets in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure command permissions for a 'delete_user_by_id' command. It shows how to set up different permissions for admin and user roles, including an argument preset for the user role to enforce a pre-check condition.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/command-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: delete_user_by_id\n  # highlight-start\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: pre_check\n          value:\n            booleanExpression:\n              fieldComparison:\n                field: is_invincible\n                operator: _eq\n                value:\n                  literal: false\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Implementing LifecyclePluginHook Configuration in YAML\nDESCRIPTION: Example configuration for a lifecycle plugin hook that implements pre-parse functionality with custom headers and request configuration. The plugin hook is configured with environment variables for URL and authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: cloudflare allowlist\n  url:\n    valueFromEnv: ALLOW_LIST_URL\n  pre: parse\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            valueFromEnv: M_AUTH_KEY\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Defining BigQuery Table Structure in JSON Configuration\nDESCRIPTION: This comprehensive snippet demonstrates how to define a BigQuery table structure in the configuration, including table name, description, columns with their types and properties, primary keys, and foreign key relationships. It showcases BigQuery-specific data types like GEOGRAPHY and ARRAY.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/bigquery/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\n    {\n      \"name\": \"mydataset.customers\",\n      \"description\": \"Customer information table\",\n      \"category\": \"TABLE\",\n      \"columns\": [\n        {\n          \"name\": \"customer_id\",\n          \"description\": \"Unique customer identifier\",\n          \"type\": {\n            \"scalar_type\": \"INT64\"\n          },\n          \"nullable\": false,\n          \"auto_increment\": false,\n          \"is_primarykey\": true\n        },\n        {\n          \"name\": \"name\",\n          \"description\": \"Customer name\",\n          \"type\": {\n            \"scalar_type\": \"STRING\"\n          },\n          \"nullable\": false,\n          \"auto_increment\": false\n        },\n        {\n          \"name\": \"location\",\n          \"description\": \"Geographic location\",\n          \"type\": {\n            \"scalar_type\": \"GEOGRAPHY\"\n          },\n          \"nullable\": true,\n          \"auto_increment\": false\n        },\n        {\n          \"name\": \"tags\",\n          \"description\": \"Customer tags\",\n          \"type\": {\n            \"array_type\": {\n              \"scalar_type\": \"STRING\"\n            }\n          },\n          \"nullable\": true,\n          \"auto_increment\": false\n        }\n      ],\n      \"primary_keys\": [\"customer_id\"],\n      \"foreign_keys\": {\n        \"fk_customer_order\": {\n          \"column_mapping\": {\n            \"customer_id\": \"customer_id\"\n          },\n          \"foreign_collection\": \"mydataset.orders\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in GraphQL Queries for Hasura\nDESCRIPTION: This example shows how to create and use fragments in GraphQL to organize and reuse common field selections. It defines an 'articleFields' fragment and uses it in multiple query sections.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment articleFields on articles {\n  id\n  title\n}\nquery getArticles {\n  articles {\n    ...articleFields\n  }\n  topTwoArticles: articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    ...articleFields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Data Connectors with Language SDKs\nDESCRIPTION: Hasura provides SDKs for developing custom data connectors in multiple programming languages to support unique data sources not natively covered\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Rust](https://github.com/hasura/ndc-sdk-rs)\n- [TypeScript](https://github.com/hasura/ndc-sdk-typescript)\n- [Python](https://github.com/hasura/ndc-sdk-python)\n- [Go](https://github.com/hasura/ndc-sdk-go)\n```\n\n----------------------------------------\n\nTITLE: Performing Delete Mutation with Hasura API using GraphQL\nDESCRIPTION: This snippet demonstrates how to delete an object in a data source using the Hasura DDN API. It targets the object by using a unique key as defined in the source schema. The mutation returns the number of rows affected by the operation. Prerequisites include having appropriate access to the GraphQL endpoint and knowledge of the source schema to identify objects by key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/mutations/delete-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation DeletePost {\\n  deletePostsById(keyId: \\\"6\\\") {\\n    affectedRows\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching List of Authors with GraphQL\nDESCRIPTION: Query to fetch a list of authors with their IDs and names from the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/simple-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery Authors {\n  authors {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filtering with Where Clause in Hasura GraphQL\nDESCRIPTION: Demonstrates how to filter authors by name using the where argument with equality operator. Uses the _eq operator to match exact author name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { name: { _eq: \"Sidney\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura DDN Local Services\nDESCRIPTION: Command to start the local Hasura DDN Engine and PostgreSQL connector services using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Defining Users Model in YAML\nDESCRIPTION: This YAML snippet defines a Users model with fields, data source, filter expressions, orderable fields, and GraphQL configurations. It specifies how the model can be queried and ordered in the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Model\nversion: v1\ndefinition:\n  name: Users\n  objectType: Users\n  source:\n    dataConnectorName: my_pg\n    collection: users\n  filterExpressionType: UsersBoolExp\n  orderableFields:\n    - fieldName: id\n      orderByDirections:\n        enableAll: true\n    - fieldName: name\n      orderByDirections:\n        enableAll: true\n    - fieldName: email\n      orderByDirections:\n        enableAll: true\n    - fieldName: createdAt\n      orderByDirections:\n        enableAll: true\n  graphql:\n    selectMany:\n      queryRootField: users\n    selectUniques:\n      - queryRootField: usersById\n        uniqueIdentifier:\n          - id\n    orderByExpressionType: UsersOrderBy\n```\n\n----------------------------------------\n\nTITLE: Executing Nested GraphQL Query with Relationships in Hasura DDN\nDESCRIPTION: This GraphQL query demonstrates how to fetch posts with their related user data using a defined relationship in Hasura DDN. The query retrieves post details (id, title, content) along with nested user information (id, name, age) in a single request.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n    user {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Hasura DDN Project\nDESCRIPTION: Command to scaffold a new local Hasura DDN project directory and navigate into it.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Single Field Sorting in Hasura JSON:API\nDESCRIPTION: Shows how to fetch all articles sorted by title in ascending order. Includes both the HTTP request and the JSON response format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/sorting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?sort=title\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Articles\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"A First Article\",\n        \"created_at\": \"2023-01-02T12:00:00Z\"\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"B Second Article\",\n        \"created_at\": \"2023-01-01T12:00:00Z\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Articles Relationship in GraphQL\nDESCRIPTION: Shows how to fetch authors and their related articles using an array (one-to-many) relationship in Hasura GraphQL. The query returns author ID, name, and a nested list of their articles with IDs and titles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/nested-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsAndArticles {\n  authors {\n    id\n    name\n    articles {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI interaction in Python\nDESCRIPTION: Python function to generate SEO descriptions using OpenAI's API. It sets up the OpenAI client, defines the prompt, and processes the response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom openai import OpenAI\n\nconnector = FunctionConnector()\n\n# We can store this in the project's .env file and referene it here\nOPENAI_API_KEY = \"your_openai_api_key\"\nclient = OpenAI(\n    api_key=OPENAI_API_KEY,\n)\n\n@connector.register_query\ndef generate_seo_description(input: str) -> str:\n    response = client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[\n            {\"role\": \"system\", \"content\": \"You are a senior marketing associate. Take the product description provided and improve upon it to rank well with SEO.\"},\n            {\"role\": \"user\", \"content\": input}\n        ],\n    )\n    return response.choices[0].message.content\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Mutation for MongoDB in Hasura DDN\nDESCRIPTION: Example of a delete mutation that removes an artist from a MongoDB collection. The mutation accepts an artistId parameter to identify which record to delete and returns success metrics including ok status and count of affected records.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"deleteArtist\",\n  \"description\": \"Example of a database delete using a native mutation\",\n  \"resultType\": {\n    \"object\": \"DeleteArtist\"\n  },\n  \"arguments\": {\n    \"artistId\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    }\n  },\n  \"objectTypes\": {\n    \"DeleteArtist\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"delete\": \"Artist\",\n    \"deletes\": [\n      {\n        \"q\": {\n          \"ArtistId\": \"{{ artistId }}\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Boolean Expression Type in YAML\nDESCRIPTION: Example showing how to configure a scalar boolean expression type for String comparisons with equals and is_null operators. Includes data connector mapping for PostgreSQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v1\ndefinition:\n  name: String_comparison_exp_with_eq_and_is_null\n  operand:\n    scalar:\n      type: String\n      comparisonOperators:\n        - name: equals\n          argumentType: String!\n      dataConnectorOperatorMapping:\n        - dataConnectorName: postgres\n          dataConnectorScalarType: varchar\n          operatorMapping:\n            equals: _eq\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: String_comparison_exp_with_eq_and_is_null\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for MongoDB Collections\nDESCRIPTION: This snippet shows how to define the schema for a MongoDB collection used by the Hasura connector, detailing the structure of the schema JSON file, including collection types and object types with their respective fields. It specifies the data types for each field within the collections.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"users\",\n  \"collections\": {\n    \"users\": {\n      \"type\": \"users\"\n    }\n  },\n  \"objectTypes\": {\n    \"users\": {\n      \"fields\": {\n        \"_id\": {\n          \"type\": {\n            \"scalar\": \"objectId\"\n          }\n        },\n        \"email\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        },\n        \"name\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        },\n        \"password\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Comparison Operators in Hasura Data Connector (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the 'comparisonOperatorMapping' option, which maps database operators to exposed names in the data connector schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n\"comparisonOperatorMapping\":\n  [\n    { \"operatorName\": \"=\", \"exposedName\": \"_eq\", \"operatorKind\": \"equal\" },\n    { \"operatorName\": \"<=\", \"exposedName\": \"_lte\", \"operatorKind\": \"custom\" },\n    ...,\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring GET Authentication Webhook in YAML\nDESCRIPTION: Example configuration for a GET authentication webhook, specifying the URL and custom headers to be forwarded.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmethod: GET\nurl:\n  value: http://auth_hook:3050/validate-request\ncustomHeadersConfig:\n  headers:\n    forward:\n      - Authorization\n    additional:\n      user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Deploying a Supergraph with Hasura DDN CLI\nDESCRIPTION: This bash command builds and deploys data connectors and updates necessary URLs in the .env.cloud file. It finalizes deployment by creating and deploying a new supergraph build. No additional prerequisites are necessary other than the DDN CLI, and parameters are handled within the command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/01-create-a-project.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Applying a Supergraph Build\nDESCRIPTION: This snippet details the command to apply a previously created supergraph build to a project. It is crucial for deploying changes to the relevant environments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build apply <build-id>\n```\n\n----------------------------------------\n\nTITLE: Connection URI Example - YAML\nDESCRIPTION: This example demonstrates how to define the connection URI for the SQL Server database. The connection URI can be provided as a literal value or sourced from an environment variable for enhanced security and flexibility. The example demonstrates how to set the connection string directly.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"connectionUri\": \"Server=<Hostname>,<port>;Uid=<username>;Database=<databasename>;Pwd=<password>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelPermissions in Hasura\nDESCRIPTION: Example demonstrating row-level security implementation using ModelPermissions. Shows how to restrict data access based on user ID using session variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: author_id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Adding Single Model in DDN\nDESCRIPTION: Command to add a specific model from a connector link and collection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector_link_name> <collection_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring CommandPermissions in Hasura\nDESCRIPTION: Example showing how to configure command execution permissions with argument presets. Demonstrates conditional deletion based on a field value check.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: delete_user_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: pre_check\n          value:\n            booleanExpression:\n              fieldComparison:\n                field: is_invincible\n                operator: _eq\n                value:\n                  literal: false\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Configuration - JSON\nDESCRIPTION: This JSON snippet outlines the structure of the configuration file for the Hasura Elasticsearch connector. It contains the definition of indices and their respective mappings, which are crucial for the integration. The `indices` section specifies types and fields, while the `queries` section is currently reserved for future use.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/elasticsearch/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"indices\": {\n    \"customers\": {\n      \"mappings\": {\n        \"properties\": {\n          \"customer_id\": {\n            \"type\": \"keyword\"\n          },\n          \"email\": {\n            \"type\": \"keyword\"\n          },\n          \"location\": {\n            \"type\": \"geo_point\"\n          },\n          \"name\": {\n            \"fields\": {\n              \"raw\": {\n                \"ignore_above\": 256,\n                \"type\": \"keyword\"\n              }\n            },\n            \"type\": \"text\"\n          }\n        }\n      }\n    }\n  },\n  \"queries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Article Query\nDESCRIPTION: Query demonstrating pagination by fetching 2 articles with an offset of 1.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/simple-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery TwoArticlesAfterFirst {\n  articles(limit: 2, offset: 1) {\n    title\n    article_id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Users Query\nDESCRIPTION: This JSON represents the expected response from the GraphQL query, showing original names and their uppercase versions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"name\": \"Alice\",\n        \"shoutName\": \"ALICE\"\n      },\n      {\n        \"name\": \"Bob\",\n        \"shoutName\": \"BOB\"\n      },\n      {\n        \"name\": \"Charlie\",\n        \"shoutName\": \"CHARLIE\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Join Query in PostgreSQL\nDESCRIPTION: SQL query to test the relationship between 'posts' and 'users' tables by joining them and retrieving post details with author information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- Fetch all posts with user information\nSELECT\n  posts.id AS post_id,\n  posts.title,\n  posts.content,\n  posts.created_at,\n  users.name AS author\nFROM\n  posts\nJOIN\n  users ON posts.user_id = users.id;\n```\n\n----------------------------------------\n\nTITLE: Executing createUser Mutation in GraphQL\nDESCRIPTION: Demonstrates how to run the 'createUser' mutation using GraphQL to add a new user to the MongoDB database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateUser {\n  createUser(age: 25, name: \"Peter\") {\n    n\n    ok\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Source in DDN CLI\nDESCRIPTION: Command to inspect and fetch latest resources from a data source using the DDN connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Response Format for Multiple Queries in Hasura GraphQL\nDESCRIPTION: This JSON response shows the structured data returned from a multiple query request. The response contains two arrays under the data object - one for authors and one for articles, each containing their respective fields as requested in the query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/multiple-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 1,\n        \"name\": \"Justin\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Beltran\"\n      }\n    ],\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"title\": \"sit amet\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"a nibh\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Credentials in YAML\nDESCRIPTION: This snippet shows how to enable dynamic credentials and configure other runtime parameters in the `configuration.yaml` file.  The `dynamicCredentials` flag enables users to pass storage client credentials directly in GraphQL requests.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/dynamic-credentials.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# configuration.yaml\nruntime:\n  maxDownloadSizeMBs: 2\ngenerator:\n  promptqlCompatible: true\n  dynamicCredentials: true\nclients: []\"\n```\n\n----------------------------------------\n\nTITLE: Insert Single Object with GraphQL\nDESCRIPTION: This GraphQL mutation inserts a single user object into the `users` table with the specified name and age. The mutation then returns the `id`, `name`, and `age` of the newly inserted user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/mutations/insert-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertUser {\n  insertUsers(objects: {name: \"Martin\", age: 40}) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertUsers\": {\n      \"returning\": [\n        {\n          \"id\": 4,\n          \"name\": \"Martin\",\n          \"age\": 40\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Data Connector\nDESCRIPTION: Set up a new data connector for PostgreSQL database connection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init my_connector -i\n```\n\n----------------------------------------\n\nTITLE: Logical Operators Syntax in JSON for Filtering\nDESCRIPTION: Shows the JSON structure for using logical operators ($and, $or) in filter expressions. It demonstrates how to combine multiple filter conditions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/filters.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$and | $or\": [\n    filter_expression_object,\n    filter_expression_object\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize DDN Project\nDESCRIPTION: Create a new project on Hasura DDN for deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Authenticate the Hasura DDN CLI to access Hasura Cloud resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Posts in GraphQL\nDESCRIPTION: This GraphQL query retrieves users along with their associated posts, demonstrating the newly created relationship. It includes user details and post information for each user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithPosts {\n  users {\n    name\n    age\n    posts {\n      content\n      title\n      userId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Users\nDESCRIPTION: GraphQL query to retrieve user information from the MongoDB database through Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    userId\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating MongoDB Collection with Comments Data\nDESCRIPTION: This snippet creates a new 'comments' collection in MongoDB and inserts multiple documents into it. Each document represents a comment with fields for comment_id, comment text, user_id, and post_id.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createCollection(\"comments\");\ndb.comments.insertMany([\n  {\n    comment_id: 1,\n    comment: \"Great post! Really enjoyed reading this.\",\n    user_id: 1,\n    post_id: 2,\n  },\n  {\n    comment_id: 2,\n    comment: \"Thanks for sharing your thoughts!\",\n    user_id: 2,\n    post_id: 1,\n  },\n  {\n    comment_id: 3,\n    comment: \"Interesting perspective.\",\n    user_id: 3,\n    post_id: 1,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Query Table via GraphQL\nDESCRIPTION: This GraphQL query retrieves all fields (id, comment, user_id, post_id) from the 'comments' table.  This demonstrates how to access data through the DDN supergraph using GraphQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  comments {\n    id\n    comment\n    user_id\n    post_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Format of metadata.json file\nDESCRIPTION: This JSON structure defines the format required for the `metadata.json` file. It contains general information about the connector like namespace, description, title, logo, tags, and latest version, the connector author's information, as well as whether it is verified, hosted by Hasura or open source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"overview\\\": {\\n    \\\"namespace\\\": \\\"your_namespace\\\",\\n    \\\"description\\\": \\\"A brief description of your connector\\\",\\n    \\\"title\\\": \\\"Your Connector Title\\\",\\n    \\\"logo\\\": \\\"logo.png\\\",\\n    \\\"tags\\\": [],\\n    \\\"latest_version\\\": \\\"v1.0.0\\\"\\n  },\\n  \\\"author\\\": {\\n    \\\"support_email\\\": \\\"support@example.com\\\",\\n    \\\"homepage\\\": \\\"https://www.example.com\\\",\\n    \\\"name\\\": \\\"Your Organization Name\\\"\\n  },\\n  \\\"is_verified\\\": false,\\n  \\\"is_hosted_by_hasura\\\": false,\\n  \\\"source_code\\\": {\\n    \\\"is_open_source\\\": true,\\n    \\\"repository\\\": \\\"https://github.com/your-org/your-connector-repo\\\"\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Editing MongoDB Native Mutation for User Creation in JSON\nDESCRIPTION: This snippet shows how to modify an existing native mutation JSON configuration to add a new 'role' field when creating a user document. It includes the structure for arguments, result types, and the insert command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"createUser\",\n  \"description\": \"Create a new user with name and age\",\n  \"resultType\": {\n    \"object\": \"CreateUserResult\"\n  },\n  \"arguments\": {\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    },\n    \"age\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"role\": {\n      \"type\": {\n        \"nullable\": {\n          \"scalar\": \"string\"\n        }\n      }\n    } // add an argument\n  },\n  \"objectTypes\": {\n    \"CreateUserResult\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"insert\": \"users\",\n    \"documents\": [\n      {\n        \"name\": \"{{ name }}\",\n        \"age\": \"{{ age }}\",\n        \"role\": \"{{ role }}\",\n        \"user_id\": {\n          \"$size\": {\n            \"$ifNull\": [\n              {\n                \"$objectToArray\": \"$$ROOT\"\n              },\n              []\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Connector Configuration in YAML for DDN\nDESCRIPTION: This YAML snippet demonstrates how to configure a connector in a DDN project. It specifies the connector type, version, name, associated subgraph, source, context, and environment variable mappings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/build-configs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: MY_CONNECTOR\n  subgraph: app\n  source: hasura/postgres:v1.1.1\n  context: .\n  envMapping:\n    CONNECTION_URI:\n      fromEnv: APP_MY_CONNECTOR_CONNECTION_URI\n    HASURA_SERVICE_TOKEN_SECRET:\n      fromEnv: APP_MY_CONNECTOR_HASURA_SERVICE_TOKEN_SECRET\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT:\n      fromEnv: APP_MY_CONNECTOR_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\n    OTEL_SERVICE_NAME:\n      fromEnv: APP_MY_CONNECTOR_OTEL_SERVICE_NAME\n```\n\n----------------------------------------\n\nTITLE: Defining a Database Schema Configuration in JSON\nDESCRIPTION: This JSON snippet defines the schema configuration for a database collection named 'users'. It includes object types, fields types, and their descriptions, specifically how to structure the schema and types using JSON format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/type-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"users\",\n  \"collections\": {\n    \"users\": {\n      \"type\": \"users\"\n    }\n  },\n  \"objectTypes\": {\n    \"users\": {\n      \"fields\": {\n        \"_id\": {\n          \"type\": { \"scalar\": \"objectId\" },\n          \"description\": \"primary key\"\n        },\n        \"name\": {\n          \"type\": { \"scalar\": \"string\" }\n        },\n        \"metadata\": {\n          \"type\": \"extendedJSON\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Supergraph Build on Hasura DDN\nDESCRIPTION: This snippet creates a build for each connector and subgraph within the project on Hasura DDN. It prepares all necessary components for deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/deploy-to-ddn.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Building a Supergraph without Rebuilding Connectors\nDESCRIPTION: This command creates a new build of the supergraph without rebuilding the connectors. This allows for faster iteration when only changes to the supergraph schema or configuration are needed. The output will include the build version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --no-build-connectors\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector - CLI Command\nDESCRIPTION: This snippet illustrates how to initialize a PostgreSQL data connector using the Hasura CLI to create a minimal configuration file (`configuration.json`). It expects a connection string provided via an environment variable named `CONNECTION_URI`. The command generates essential connection settings in the configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector plugin --connector connector.yaml -- --help\n```\n\n----------------------------------------\n\nTITLE: Filtering with Less Than or Equal Operator\nDESCRIPTION: Example of using _lte operator to filter products by price\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProductsPriceLessThanOrEqualTo10 {\n  products(where: { price: { _lte: 10 } }) {\n    name\n    price\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JWT Decoded Payload for Hasura DDN\nDESCRIPTION: Sample JSON structure showing a decoded JWT payload with standard claims (iat, exp) and Hasura-specific claims in the defined namespace. Includes user roles, permissions, and custom identifiers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1735916718,\n  \"exp\": 1796916677,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-allowed-roles\": [\"user\", \"admin\"],\n    \"x-hasura-user-id\": \"123\",\n    \"x-hasura-org-id\": \"456\",\n    \"x-hasura-custom\": \"custom-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Post with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation demonstrates how to insert a new post for a user. It includes the post's content, title, userId, and id, and returns the inserted data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertSinglePost {\n  insertPostsOne(\n    object: {\n      content: \"I am an expert in Bird Law and I demand satisfaction.\"\n      title: \"Charlie has more to say\"\n      userId: 3\n      id: 5\n    }\n  ) {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors and Articles with Multiple Arguments in GraphQL\nDESCRIPTION: GraphQL query that fetches authors and their published articles using multiple arguments including where clause for filtering published articles, order_by for sorting by publication date, and limit to restrict the number of results. The query returns author details along with their 2 most recently published articles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/multiple-arguments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsAndArticles {\n  authors {\n    id\n    name\n    articles(\n      where: {is_published: {_eq: true}},\n      order_by: {published_on: desc},\n      limit: 2\n    ) {\n      id\n      title\n      is_published\n      published_on\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 1,\n        \"name\": \"Justin\",\n        \"articles\": [\n          {\n            \"is_published\": true,\n            \"id\": 16,\n            \"title\": \"sem duis aliquam\",\n            \"published_on\": \"2018-02-14\"\n          },\n          {\n            \"is_published\": true,\n            \"id\": 15,\n            \"title\": \"vel dapibus at\",\n            \"published_on\": \"2018-01-02\"\n          }\n        ]\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Beltran\",\n        \"articles\": [\n          {\n            \"is_published\": true,\n            \"id\": 2,\n            \"title\": \"a nibh\",\n            \"published_on\": \"2018-06-10\"\n          },\n          {\n            \"is_published\": true,\n            \"id\": 9,\n            \"title\": \"sit amet\",\n            \"published_on\": \"2017-05-16\"\n          }\n        ]\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Sidney\",\n        \"articles\": [\n          {\n            \"is_published\": true,\n            \"id\": 6,\n            \"title\": \"sapien ut\",\n            \"published_on\": \"2018-01-08\"\n          },\n          {\n            \"is_published\": true,\n            \"id\": 11,\n            \"title\": \"turpis eget\",\n            \"published_on\": \"2017-04-14\"\n          }\n        ]\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Anjela\",\n        \"articles\": [\n          {\n            \"is_published\": true,\n            \"id\": 1,\n            \"title\": \"sit amet\",\n            \"published_on\": \"2017-08-09\"\n          },\n          {\n            \"is_published\": true,\n            \"id\": 3,\n            \"title\": \"amet justo morbi\",\n            \"published_on\": \"2017-05-26\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Service Account via Hasura DDN CLI\nDESCRIPTION: Command to login to Hasura DDN CLI using a service account token for authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/service-accounts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login --access-token <service-account-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig with JWT Mode in Hasura\nDESCRIPTION: This code snippet shows how to configure the AuthConfig object in Hasura to enable JWT authentication. It uses the BearerAuthorization token location format with a fixed HS256 secret key stored in an environment variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            valueFromEnv: AUTH_SECRET\n```\n\n----------------------------------------\n\nTITLE: JWT Claims Configuration with Literal Values (YAML)\nDESCRIPTION: This YAML configuration demonstrates setting `x-hasura-default-role` and `x-hasura-allowed-roles` claims to literal values directly within the Hasura configuration.  `x-hasura-user-id` is still mapped via JSON path.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nclaimsConfig: \n  locations:\n    x-hasura-default-role: \n      literal: user\n    x-hasura-allowed-roles: \n      literal: [\"user\", \"editor\"]\n    x-hasura-user-id:\n      path:\n        path: /user/id\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Related Orders Across Subgraphs\nDESCRIPTION: GraphQL query to retrieve users from the customers subgraph along with their related orders from the billing subgraph. This demonstrates cross-subgraph relationships in action.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_USERS_AND_ORDERS {\n  customers_users {\n    id\n    name\n    orders {\n      id\n      createdAt\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Location Configuration: Cookie (YAML)\nDESCRIPTION: This YAML snippet configures Hasura to extract the JWT from a cookie. The `type` is set to `Cookie`, and the `name` specifies the name of the cookie containing the JWT.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntokenLocation: \n  type: Cookie\n  name: cookie_name\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with GraphqlConfig in YAML\nDESCRIPTION: Example configuration showing how to customize the GraphQL schema generation in Hasura. This includes settings for query/mutation root types, input field names, filter operators, and sorting configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/graphql-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GraphqlConfig\nversion: v1\ndefinition:\n  query:\n    rootOperationTypeName: Query\n    argumentsInput:\n      fieldName: args\n    limitInput:\n      fieldName: limit\n    offsetInput:\n      fieldName: offset\n    filterInput:\n      fieldName: where\n      operatorNames:\n        and: _and\n        or: _or\n        not: _not\n        isNull: _is_null\n    orderByInput:\n      fieldName: order_by\n      enumDirectionValues:\n        asc: Asc\n        desc: Desc\n      enumTypeNames:\n        - directions:\n            - Asc\n            - Desc\n          typeName: OrderBy\n  mutation:\n    rootOperationTypeName: Mutation\n  apolloFederation:\n    enableRootFields: false\n```\n\n----------------------------------------\n\nTITLE: Querying the expanded table with transformed name\nDESCRIPTION: This GraphQL query demonstrates how to use the 'shoutName' function to transform a name (e.g., 'Alice') into uppercase. It is an example of how to call functions exposed by the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ShoutTheName {\n  shoutName(name: \"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Table Definitions for Configuration - JSON\nDESCRIPTION: This snippet illustrates how to define tables within the configuration object, including attributes like name, type, columns, and their corresponding metadata, allowing for structured data representation in the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableName\": \"DOCS.PUBLIC.USERS\",\n  \"tableType\": \"TABLE\",\n  \"description\": null,\n  \"columns\": [\n    {\n      \"name\": \"AGE\",\n      \"description\": null,\n      \"type\": \"NUMBER\",\n      \"numeric_precision\": 38,\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": null\n    },\n    {\n      \"name\": \"NAME\",\n      \"description\": null,\n      \"type\": \"TEXT\",\n      \"numeric_precision\": null,\n      \"numeric_scale\": null,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": null\n    },\n    {\n      \"name\": \"ID\",\n      \"description\": null,\n      \"type\": \"NUMBER\",\n      \"numeric_precision\": 38,\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": true,\n      \"is_primarykey\": null\n    }\n  ],\n  \"pks\": [],\n  \"fks\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Filters with _and Operator in Hasura GraphQL\nDESCRIPTION: This example illustrates using the '_and' operator to filter articles published within the year 2017. It demonstrates how to combine multiple conditions in a single query. The expected output is a list of articles published within the specified timeframe. The query requires a Hasura GraphQL instance with articles data containing publication dates.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/boolean-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery ArticlesPublishedInCertainYear {\n  articles (\n    where: {\n      _and: [\n        { published_on: {_gte: \"2017-01-01\"}},\n        { published_on: {_lte: \"2017-12-31\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Model Permissions for Row Access in Hasura DDN (YAML)\nDESCRIPTION: This snippet demonstrates how to create a `ModelPermissions` object to restrict row-level access in Hasura DDN. It shows how to allow users to only access their own records in the `Users` model by comparing the `id` field with the `x-hasura-user-id` session variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# e.g., Users.hml\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Users\n  permissions:\n    # admin is present by default\n    - role: admin\n      select:\n        filter: null\n    #highlight-start\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n    #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Permissions for Articles in YAML\nDESCRIPTION: This YAML configuration sets up model permissions for the Articles model. It grants full access to the admin role and restricts user access to only their own articles based on the author_id field matching the user's session variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/model-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  # highlight-start\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: author_id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Keyset Cursor-based Pagination in GraphQL\nDESCRIPTION: Demonstrates keyset cursor-based pagination using a where clause instead of offset for better performance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsGreaterThanFive {\n  authors(\n    limit: 5,\n    where: { id: {_gt: 5} }\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Article Query\nDESCRIPTION: Query to filter articles whose title contains the word 'The' using the _like operator.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/simple-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesWithTitleThe {\n  articles(where: {title: {_like: \"The\"}}) {\n    title\n    article_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Supergraph Build\nDESCRIPTION: This snippet illustrates how to create a supergraph build using the DDN CLI. This command is essential for initiating the build process in the CI/CD workflow.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Configuring TypePermissions for Public Access in Hasura DDN\nDESCRIPTION: This YAML snippet demonstrates how to set up TypePermissions to control which fields are publicly accessible for an Events model in Hasura DDN. It shows permissions for both admin and public roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/2-public-access-role.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Events\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - id\n          - owner_id\n          - created_at\n          - updated_at\n          - is_live\n          - title\n          - date\n          - description\n    - role: public\n      output:\n        allowedFields:\n          - id\n          - is_live\n          - title\n          - date\n          - description\n```\n\n----------------------------------------\n\nTITLE: Container Authorization Check Error Message\nDESCRIPTION: This snippet provides an example of an error message encountered during the introspection of a data source when the GitHub access token is outdated.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nERR Failed building the container: exit status 17\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with Hasura DDN CLI\nDESCRIPTION: This bash command initializes a new project on Hasura DDN, provisioning a new project and setting local context. No additional dependencies are required apart from the DDN CLI. The command outputs the project name and console URL. Inputs are provided via CLI arguments, and outputs are displayed in the terminal.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/01-create-a-project.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Logical AND Operator Filtering Example in Hasura JSON:API\nDESCRIPTION: Demonstrates the use of the logical AND operator in filtering, combining multiple conditions. It filters articles based on rating and publication status.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/filters.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?filter={\"$and\":[{\"rating\":{\"$gte\":4}},{\"published\":{\"$eq\":true}}]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Article\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"Featured Article\",\n        \"rating\": 4.5,\n        \"published\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type with Field Mappings in YAML\nDESCRIPTION: Example of defining an Author object type with fields, global ID configuration, GraphQL settings, and data connector mappings. Includes field definitions for author properties and mapping to database columns.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Author\n  fields:\n    - name: author_id\n      type: Int!\n      description: The id of the author\n    - name: first_name\n      type: String\n      description: The first name of the author\n    - name: last_name\n      type: String\n      description: The last name of the author\n    - name: biography\n      type: String\n      description: AI generated biography for the author\n      arguments:\n        - name: ai_model\n          argumentType: String!\n          description: The AI model to use for generating the biography\n  description: An author of a book\n  globalIdFields:\n    - author_id\n  graphql:\n    typeName: Author\n  dataConnectorTypeMapping:\n    - dataConnectorName: my_db\n      dataConnectorObjectType: author\n      fieldMapping:\n        author_id:\n          column:\n            name: id\n    - dataConnectorName: my_vector_db\n      dataConnectorObjectType: author\n      fieldMapping:\n        biography:\n          column:\n            name: biography\n            argumentMapping:\n              ai_model: model\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Permissions in YAML\nDESCRIPTION: This YAML snippet defines Type Permissions for the 'article' type in a supergraph. It allows the 'admin' role to access 'article_id', 'author_id', and 'title' fields, while the 'user' role can only access 'article_id' and 'title'. This configuration restricts access to the 'author_id' field for users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/type-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: article\n  permissions:\n    # highlight-start\n    - role: admin\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n          - title\n    - role: user\n      output:\n        allowedFields:\n          - article_id\n          - title\n  # highlight-end\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Movie Search Query in JSON\nDESCRIPTION: This JSON configuration defines a native query named `moviesSearch` for performing approximate nearest neighbor search on movie data. It specifies input arguments such as genres, year range, number of candidates, and limit. The configuration also defines the structure of the result documents, including fields like title, plot, genres, year, and score.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/vector-search.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"moviesSearch\",\n  \"representation\": \"function\",\n  \"inputCollection\": \"embedded_movies\",\n  \"description\": \"Movies approximate nearest neighbor search\",\n  \"arguments\": {\n    \"ninGenres\": {\n      \"type\": {\n        \"arrayOf\": {\n          \"scalar\": \"string\"\n        }\n      }\n    },\n    \"inGenres\": {\n      \"type\": {\n        \"arrayOf\": {\n          \"scalar\": \"string\"\n        }\n      }\n    },\n    \"gteYear\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"lteYear\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"numCandidates\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"limit\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    }\n  },\n  \"resultDocumentType\": \"MoviesSearch\",\n  \"objectTypes\": {\n    \"MoviesSearch\": {\n      \"fields\": {\n        \"__value\": {\n          \"type\": {\n            \"arrayOf\": {\n              \"object\": \"MoviesSearchOutput\"\n            }\n          }\n        }\n      }\n    },\n    \"MoviesSearchOutput\": {\n      \"fields\": {\n        \"title\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        },\n        \"plot\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        },\n        \"genres\": {\n          \"type\": {\n            \"arrayOf\": {\n              \"scalar\": \"string\"\n            }\n          }\n        },\n        \"year\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"score\": {\n          \"type\": {\n            \"scalar\": \"double\"\n          }\n        }\n      }\n    }\n  },\n  \"pipeline\": [\n    {\n      \"$vectorSearch\": {\n        \"index\": \"vector-search-tutorial\",\n        \"path\": \"plot_embedding\",\n        \"filter\": {\n          \"$and\": [\n            {\n              \"genres\": {\n                \"$nin\": \"{{ ninGenres }}\",\n                \"$in\": \"{{ inGenres }}\"\n              }\n            },\n            {\n              \"year\": {\n                \"$gte\": \"{{ gteYear }}\",\n                \"$lte\": \"{{ lteYear }}\"\n              }\n            }\n          ]\n        },\n        \"queryVector\": [\n          -0.020156775, -0.024996493, 0.010778184, -0.030058576, -0.03309321, 0.0031229265, -0.022772837, 0.0028351594,\n          0.00036870153, -0.02820117, 0.016245758, 0.0036232488, 0.0020519753, -0.0076454473, 0.0073380596,\n          -0.007377301, 0.039267123, -0.013433489, 0.01428371, -0.017279103, -0.028358135, 0.0020160044, 0.00856761,\n          0.009653277, 0.0107912645, -0.026683854, 0.009594415, -0.020182934, 0.018077003, -0.015709465, 0.003310956,\n          0.0014878864, -0.015971072, -0.002411684, -0.029561523, -0.030450987, -0.013106481, -0.005385822,\n          -0.018652538, 0.012642129, -0.005189617, 0.018835662, -0.0048102876, -0.0261214, -0.016167276, -0.007972456,\n          0.0023381072, -0.010058766, -0.009012341, 0.008358325, 0.018665617, 0.02163485, -0.012975678, -0.010745483,\n          -0.002571918, -0.014479915, 0.007226877, 0.015003128, 0.013165343, -0.028279653, 0.0053727417, -0.020588424,\n          -0.017383745, 0.023518417, 0.01262905, -0.011922712, 0.007638907, -0.0073249796, -0.014859244, -0.00001101736,\n          0.017043658, 0.010111088, 0.0074623227, 0.009555174, 0.008338705, -0.002240005, -0.0010603234, -0.004973792,\n          0.003391073, 0.021543289, 0.013341927, 0.0005980159, 0.010693162, 0.005336771, 0.016062634, 0.005768421,\n          0.005186347, 0.039790336, 0.0021942237, -0.0026275094, 0.010431555, 0.0042151334, -0.0050359233, 0.025768232,\n          -0.021451725, 0.01833861, -0.01836477, -0.013433489, 0.030006256, -0.014793842, 0.017475309, 0.0020585153,\n          -0.012975678, -0.017266022, -0.01593183, -0.014257549, 0.0010676811, -0.007887433, -0.0045911926,\n          0.00012303676, -0.0014976967, 0.03552615, 0.0065630507, -0.037435878, 0.011929252, -0.00939167, 0.016768971,\n          0.01223664, 0.007789331, -0.037200432, 0.013145722, 0.00896002, 0.021857215, 0.010333453, 0.021582529,\n          -0.007089534, -0.007154935, -0.02485261, 0.0040254686, -0.00088864425, 0.023466095, -0.020719228,\n          -0.006690584, -0.021006994, -0.018286288, 0.025545865, -0.0096598165, 0.008803056, -0.023021365, -0.040078104,\n          0.015408617, 0.017043658, -0.011242535, 0.0063537657, -0.026618453, 0.0071614753, -0.014623798, 0.00067322777,\n          -0.00083427917, -0.028070368, 0.03714811, -0.004529061, 0.0054087127, 0.0028727653, 0.008384486, 0.010026066,\n          -0.006190262, -0.0002493436, 0.0029953935, -0.026226042, -0.018417092, 0.009941043, 0.0036494094, -0.00982332,\n          0.013551212, 0.02574207, -0.0022645304, -0.0006004685, 0.012805633, -0.024303235, 0.008194821, -0.014179068,\n          -0.02977081, 0.003095131, -0.0015941641, 0.029953934, 0.0052680993, 0.025388902, -0.031392768, -0.021386323,\n          0.014898485, 0.022419669, 0.00897964, 0.013243824, 0.006854088, 0.0066415328, -0.003839074, -0.01877026,\n          0.021216279, -0.015055449, -0.0015508354, 0.013211124, -0.008783435, 0.0052157775, -0.68938524, -0.01221702,\n          -0.04125533, -0.016232677, 0.020039052, -0.0026422248, -0.0037050007, 0.0064682183, -0.0047579664,\n          0.0032749851, -0.0035382267, 0.031942144, -0.00035643874, -0.011628405, -0.043086577, -0.0196074,\n          -0.0066088317, -0.014872325, 0.028331975, 0.010294212, -0.013930541, 0.031994462, -0.018626377, 0.017462227,\n          0.026343765, -0.010274592, 0.0046827546, -0.029430721, -0.011746128, 0.0024362097, 0.0023054064, 0.0027730279,\n          -0.002406779, 0.003917556, 0.059436977, 0.008665713, -0.0018901062, 0.06037876, 0.017880797, 0.05185039,\n          0.0067102043, -0.020300657, 0.005604917, 0.018704858, 0.012073136, 0.0144145135, 0.012413224, -0.0074819434,\n          0.015801027, -0.0061412104, 0.008613391, -0.0039077457, -0.0036232488, 0.008469507, 0.014087505, 0.0124066835,\n          0.019267311, -0.002573553, 0.005055544, -0.009417831, -0.009103903, 0.011150973, -0.012046975, 0.0058567133,\n          -0.0053727417, 0.018260127, -0.005588567, 0.015591742, 0.007495024, -0.02567667, 0.024211673, 0.021386323,\n          -0.012890656, -0.016114954, 0.009515933, 0.009679437, 0.025532786, -0.0076454473, -0.02575515, 0.008319084,\n          -0.0068410076, -0.017082898, -0.026173722, -0.0049901423, 0.01918883, -0.008646091, -0.031759016, 0.014820003,\n          0.011850771, 0.01836477, 0.012700991, -0.0011437106, 0.005058814, 0.0151993325, -0.0060692686, 0.027416352,\n          0.0037344315, 0.0013546307, 0.018325528, -0.03152357, -0.008809595, 0.014649959, -0.008345244, 0.0066415328,\n          -0.005523165, 0.0043492066, -0.0015892589, 0.0048855, 0.034453563, -0.03837766, 0.0068410076, -0.0042151334,\n          -0.0067429054, 0.0055689462, -0.011733048, -0.0212032, 0.016847452, -0.0022220195, 0.0059351954, -0.00449963,\n          0.02251123, -0.01020265, 0.023361452, -0.0032455544, 0.016180357, 0.0049443613, -0.0064747585, -0.03259616,\n          0.012321662, 0.020104453, 0.009954124, -0.019411195, 0.0048102876, -0.000392614, 0.012184318, 0.0044276887,\n          0.005634348, -0.020562263, 0.015722545, -0.005179807, -0.0067952266, 0.0027861083, 0.0024198592,\n          -0.0020585153, 0.0018525004, -0.045100946, -0.010176489, -0.012956058, 0.0013497255, 0.0105361985,\n          0.003796563, -0.0106016, -0.013126101, 0.0050359233, 0.015003128, -0.0075800456, -0.015722545, -0.01755379,\n          -0.00978408, -0.02940456, 0.017606111, 0.016612006, -0.016912855, 0.025441224, 0.0054741143, 0.00448001,\n          0.009470152, 0.015382457, -0.008332164, -0.019123428, 0.024564842, 0.016860534, 0.008286383, -0.007141855,\n          0.006559781, 0.016625088, -0.01840401, -0.011602244, -0.00489858, -0.0073184394, -0.008809595, -0.0018459603,\n          -0.01629808, -0.005542786, 0.0064257076, 0.010379234, 0.014663039, 0.034872133, -0.013355007, 0.027285548,\n          0.011654565, -0.004032009, 0.02323065, -0.02653997, -0.0009941043, 0.002946342, 0.010667001, 0.008345244,\n          0.018626377, 0.04821406, 0.031392768, 0.010281132, 0.026069079, 0.002735422, 0.01182461, -0.01593183,\n          0.006585941, -0.010071847, 0.024564842, -0.0025261368, 0.004293615, -0.0068606283, -0.0066448026,\n          -0.0074100015, -0.0014347476, 0.021530207, -0.010418476, 0.018495573, -0.0034924455, -0.014165987,\n          -0.004784127, -0.012472086, 0.004417878, -0.0030313642, -0.010084927, -0.010954768, 0.01508161, 0.0010047321,\n          0.0042347535, -0.03345946, -0.00027346043, 0.014793842, -0.019882087, 0.012772933, 0.021490967, 0.0031932332,\n          0.0093589695, 0.00090172456, 0.0048102876, 0.0070045115, -0.0045584915, 0.015840268, 0.024342475,\n          -0.0091300635, 0.0039796876, 0.003796563, 0.025022654, -0.008103259, -0.025022654, 0.03021554, -0.008201361,\n          -0.0070502926, 0.0011821339, 0.021072397, 0.004849529, -0.02495725, 0.012184318, 0.0019228071, -0.007226877,\n          0.020562263, 0.018861823, -0.0017593032, 0.01345965, 0.0022727058, 0.003023189, -0.026971621, -0.0030558899,\n          0.017723834, -0.01998673, -0.010608139, 0.011491061, -0.025179617, 0.0069652707, 0.003924096, 0.021177039,\n          0.0045650317, -0.0009973744, 0.007586586, -0.004032009, -0.008129419, -0.010091467, -0.04279881, 0.019790525,\n          0.01595799, 0.0044309585, -0.0033747226, -0.018665617, -0.012818714, -0.016206518, 0.014113666, -0.0020912162,\n          0.01427063, -0.020248337, -0.0112752365, -0.020588424, -0.011039791, 0.008744194, -0.015147011, 0.0022269245,\n          -0.010438096, -0.0017772885, -0.028750544, -0.008861917, -0.016991336, 0.033668745, 0.034636687, 0.009888723,\n          0.0023953337, 0.006991431, -0.003346927, 0.003103306, -0.0044571194, 0.011249076, 0.0033779927, 0.00012446742,\n          -0.0027027212, -0.025859794, -0.011942333, 0.02694546, 0.028227331, 0.0064289775, -0.03385187, -0.020719228\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Function in TypeScript\nDESCRIPTION: TypeScript function that uses Google Cloud Translate API to translate text. It takes target language and content as parameters and returns the translated text.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v2 } from \"@google-cloud/translate\";\n\n// This can also be stored as an environment variable\n// in the connector's .env file.\nconst CLOUD_TRANSLATION_API_KEY = \"your_cloud_translation_api_key\";\n\n/**\n* @readonly\n*/\nexport async function translateText(targetLanguage: string, content: string): Promise<string> {\n  const translate = new v2.Translate({ key: CLOUD_TRANSLATION_API_KEY });\n  const [translation] = await translate.translate(content, targetLanguage);\n  return translation;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura DDN Services\nDESCRIPTION: Starts the local Hasura DDN Engine and DuckDB connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating Command Permissions for Mutation Access in Hasura DDN (YAML)\nDESCRIPTION: This snippet demonstrates how to create a `CommandPermission` object to control which roles can execute specific commands in Hasura DDN. The example shows how to allow the `user` role to execute the `UpdateUsersById` command, but only for their own record by setting the `keyId` argument using the `x-hasura-user-id` session variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: UpdateUsersById # Specify the existing command\n  permissions:\n    - role: admin\n      allowExecution: true\n      #highlight-start\n    - role: user\n      allowExecution: true\n      argumentPresets: # Specify the arguments and their values which need to be passed to the command\n        - argument: keyId\n          value:\n            sessionVariable: \"x-hasura-user-id\" # The value of the argument must equal the session variable\n      #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims for Public Access in Authentication Service\nDESCRIPTION: This JSON snippet demonstrates how to set up JWT claims in an authentication service to define a public role for unauthenticated access.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/2-public-access-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"public\",\n    \"x-hasura-allowed-roles\": [\"public\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from a Nested GraphQL Query\nDESCRIPTION: This shows the expected JSON response from the nested GraphQL query. It returns a list of posts with their IDs, titles, content, and the details of the associated user for each post, demonstrating how relationship data is structured in the response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"examplePosts\": [\n      {\n        \"postId\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"userId\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"postId\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"userId\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"postId\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"userId\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"postId\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"userId\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregated Data on Nested Objects with Hasura DDN\nDESCRIPTION: This snippet shows how to perform a nested query using aggregation on the relationship between users and their posts. It retrieves user details along with a count of their respective posts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/aggregation-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<GraphiQLIDE\n  query={`query ArticlesSummaryByAuthor {\n  usersById(id: \"1\") {\n    id\n    name\n    postsAggregate {\n      _count\n    }\n    posts {\n      id\n      title\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"usersById\": {\n      \"id\": 1,\n      \"name\": \"Alice\",\n      \"postsAggregate\": {\n        \"_count\": 2\n      },\n      \"posts\": [\n        {\n          \"id\": 1,\n          \"title\": \"My First Post\"\n        },\n        {\n          \"id\": 2,\n          \"title\": \"Another Post\"\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Formatting Datetime Objects in TypeScript for Hasura DDN\nDESCRIPTION: This TypeScript function converts a date string to a formatted, human-readable string. It uses the toLocaleString method to format the date with specific options for year, month, day, hour, and minute.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-format-datetime-objects.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* @readonly\n*/\nexport function formattedDate(dateString: string): string {\n  const date = new Date(dateString);\n  return date.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: true,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Databricks Connector Configuration Structure\nDESCRIPTION: Defines the structure of the JSON configuration object required for the Hasura Databricks connector.  It specifies the `connection_uri`, `tables`, `primary_keys`, and `foreign_keys` properties. The `connection_uri` specifies an environment variable (`JDBC_URL`) for the JDBC connection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/databricks/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"variable\": \"JDBC_URL\"\n  },\n  \"tables\": [],\n  \"primary_keys\": [],\n  \"foreign_keys\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Credentials for S3-Compatible Client - YAML\nDESCRIPTION: Defines a YAML configuration for an S3-compatible client using static credentials. The `accessKeyId` and `secretAccessKey` are sourced from environment variables, facilitating secure access management.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - type: s3\n    authentication:\n      type: static\n      accessKeyId:\n        env: ACCESS_KEY_ID\n      secretAccessKey:\n        env: SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Filtering Books by Author Name in GraphQL Query\nDESCRIPTION: This query demonstrates filtering by object relationship fields. It retrieves books where the author's name is 'Alice Johnson', showing how to filter on object relationship fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/nested-objects.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  books (\n    where: {\n      author: {\n        name: { _eq: \"Alice Johnson\" }\n      }\n    }\n  ) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation Keys in Hasura DDN\nDESCRIPTION: This YAML snippet explains how to mark a Hasura DDN type with Apollo Federation keys. The keys uniquely identify an entity, defined in the 'definition.graphql' for an 'ObjectType'. This step is crucial for enabling the type to be resolved by Apollo Federation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napolloFederation:\n  keys: # The fields that uniquely identifies the entity\n    - fields:\n        - id\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable to Lambda Connector using DDN CLI\nDESCRIPTION: This command adds a custom environment variable to a specific connector. It updates the .env file, connector.yaml, and compose.yaml to ensure the variable is available across the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/add-env-vars-to-a-lambda.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector env add <connector_name> --env FOO=bar\n```\n\n----------------------------------------\n\nTITLE: Pre-Parse Plugin Route Handler Implementation\nDESCRIPTION: TypeScript implementation of the pre-parse plugin route handler that logs session information before query execution.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { Router, Request, Response } from \"express\";\nimport { PreParseRequest } from \"../types\";\n\nconst router = Router();\n\nrouter.post(\"/\", (req: Request<any, any, PreParseRequest>, res: Response): void => {\n  console.log(\n    `This is running before the request is parsed! The user making this request is of role ${req.body.session.role}.`\n  );\n  res.status(204).send();\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Replacing the functions.ts contents\nDESCRIPTION: This TypeScript snippet replaces the contents of functions.ts with a function that converts a name to uppercase. It illustrates basic function definition in TypeScript, including type annotations and return types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * @readonly\n */\nexport function shoutName(name: string): string {\n  return name.toUpperCase();\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Project Init Usage Examples\nDESCRIPTION: Examples showing how to initialize a new DDN project with auto-generated name and how to configure using an existing project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a new Hasura DDN project (with an auto-generated name) with subgraphs based on your local directory\n ddn project init\n\n# Configure the local directory to use an existing Hasura DDN project creating subgraphs on the DDN project as necessary\n ddn project init --with-project myproject\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles Using _like Operator in GraphQL\nDESCRIPTION: Demonstrates how to use the _like operator to fetch articles containing a specific word in their title. This example searches for articles containing 'amet' in a case-sensitive manner.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesWithAmetInTitle {\n  articles(\n    where: {title: {_like: \"%amet%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Object-to-Model Relationship Definition in YAML\nDESCRIPTION: Demonstrates a basic relationship configuration between orders and customers, mapping customerId fields to enable nested queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: customer\n  sourceType: orders\n  target:\n    model:\n      name: customers\n      subgraph: customers\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: customerId\n      target:\n        modelField:\n          - fieldName: customerId\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Project Locally\nDESCRIPTION: Command to create a local build of the Hasura DDN project, which generates JSON files in the engine/build directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal Configuration - YAML Format\nDESCRIPTION: This snippet demonstrates the structure of a minimal `configuration.json` file for initializing the PostgreSQL connector. It specifies only the version and connection settings, which include a connection URI using an environment variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{ \"version\": \"5\", \"connectionSettings\": { \"connectionUri\": { \"variable\": \"CONNECTION_URI\" } } }\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Hasura AuthConfig\nDESCRIPTION: An example of AuthConfig using JWT mode for authentication, specifying claims configuration, token location, and the JWT secret key stored as an environment variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            valueFromEnv: AUTH_SECRET\n```\n\n----------------------------------------\n\nTITLE: Initializing a Connector in Hasura DDN (CLI)\nDESCRIPTION: This command initializes a new connector within a Hasura DDN project. It prompts the user to select a connector from a list and enter required values. The connector initialization process relies on the Hasura DDN CLI tool.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init <your_name_for_the_connector> -i\n```\n\n----------------------------------------\n\nTITLE: Decoding Global ID Format Explanation\nDESCRIPTION: This code snippet explains the format and decoding of a Global ID, which is a base64 encoded string containing version, typename, and ID information. Fully understanding this format is crucial for creating unique identifiers across the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\neyJ2ZXJzaW9uIjoxLCJ0eXBlbmFtZSI6IlVzZXJzIiwiaWQiOnsidXNlcl9pZCI6IjEifX0=\n```\n\n----------------------------------------\n\nTITLE: Defining HeadersResponse Type in TypeScript\nDESCRIPTION: Creates a helper type 'HeadersResponse' in TypeScript to include both headers and the actual response value from a function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype HeadersResponse<T> = {\n  headers: sdk.JSONValue\n  response: T\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products with Optimized Descriptions\nDESCRIPTION: This GraphQL query retrieves a list of products, including their original and AI-optimized descriptions, from a Hasura supergraph. It relies on a relationship mapping established within the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProductsWithOptimizedDescriptions {\n  products {\n    id\n    description\n    optimizedDescription\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Subgraph with DDN CLI\nDESCRIPTION: Command to initialize a new subgraph in a local project directory using the DDN CLI. Creates a new subdirectory with the specified subgraph name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph init <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Querying Posts in GraphQL\nDESCRIPTION: GraphQL query to fetch all posts with their id, title, and content from the PostgreSQL database through the Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships using DDN CLI\nDESCRIPTION: This command adds relationships based on foreign keys. It requires the connector link name and collection name as arguments, and supports flags for specifying the subgraph, foreign key collection, and foreign key name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn relationship add <connector-link-name> <collection-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Stripe Products Response\nDESCRIPTION: Sample JSON response from querying Stripe products, showing an array of products with their IDs, names, and descriptions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getProducts\": {\n      \"data\": [\n        {\n          \"id\": \"3bef8a40-3c33-11ee-bb29-070df467ec94\",\n          \"name\": \"Tee\",\n          \"description\": \"A great t-shirt!\"\n        },\n        {\n          \"id\": \"e0a70b16-65b6-11ed-8788-8fa2504d64a3\",\n          \"name\": \"Sticker Sheet\",\n          \"description\": \"Who doesn't love stickers??\"\n        },\n        {\n          \"id\": \"a44eda7c-65b6-11ed-997b-53b5bdb7117e\",\n          \"name\": \"Hasuras in The Cloud Tee\",\n          \"description\": \"The cloud for your cloud.\"\n        },\n        {\n          \"id\": \"8aa93f86-65b6-11ed-901c-f320d4e17bb2\",\n          \"name\": \"Dark Furry Logo Tee\",\n          \"description\": \"Furry for furries.\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Caching Plugin\nDESCRIPTION: Docker Compose configuration that sets up Redis and the caching plugin services. Includes port mappings, volume mounts, and network settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/caching/how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  image: redis:latest\n  ports:\n    - 6379:6379\n\ncaching:\n  build:\n    context: https://github.com/hasura/engine-plugin-caching.git\n  ports:\n    - 8787:8787\n  extra_hosts:\n    - local.hasura.dev=host-gateway\n  volumes:\n    - ./globals/plugins/caching-config.js:/app/src/config.js\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Text Search Using _ilike in GraphQL\nDESCRIPTION: Shows how to perform case-insensitive text search using the _ilike operator to find users with 'john' in their name, regardless of capitalization.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithNameLike {\n  users(where: { name: { _ilike: \"%john%\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Definition in Connector Configuration\nDESCRIPTION: Shows a detailed table definition with column specifications, primary keys, and foreign key relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableName\": \"Album\",\n  \"tableType\": \"TABLE\",\n  \"columns\": [\n    {\n      \"name\": \"AlbumId\",\n      \"type\": \"int\",\n      \"nullable\": false,\n      \"auto_increment\": true,\n      \"is_primarykey\": true\n    }\n  ],\n  \"pks\": [\"AlbumId\"],\n  \"fks\": {\n    \"FK_AlbumArtistId\": {\n      \"foreign_collection\": \"Artist\",\n      \"column_mapping\": {\n        \"ArtistId\": \"ArtistId\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Filtering with _regex in GraphQL\nDESCRIPTION: Shows how to use regex pattern matching with the _regex operator to find articles containing specific letter patterns in their titles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesWithRegex {\n  articles(\n    where: {title: {_regex: \"[ae]met\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Post Data via GraphQL Mutation in Hasura DDN\nDESCRIPTION: This GraphQL mutation inserts a new post for a user named Charlie. It demonstrates how to use the generated API to create new data, including relationships between tables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertSinglePost {\n  insertPosts(\n    objects: {\n      content: \"I am an expert in Bird Law and I demand satisfaction.\"\n      title: \"Charlie has more to say\"\n      userId: \"3\"\n    }\n  ) {\n    returning {\n      id\n      title\n      content\n      user {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Object with Nested Response using GraphQL\nDESCRIPTION: This GraphQL mutation inserts a new post into the `posts` table with the specified content, title, and user ID.  The mutation retrieves nested data; it returns the `id` and `title` of the inserted post, along with the `id` and `name` of the associated user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/mutations/insert-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertPost {\n  insertPosts(objects: {content: \"A little bit more information.\", title: \"A New Post\", userId: \"1\"}) {\n    returning {\n      id\n      title\n      user {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertPosts\": {\n      \"returning\": [\n        {\n          \"id\": 6,\n          \"title\": \"A New Post\",\n          \"user\": {\n            \"id\": 1,\n            \"name\": \"Alice\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Permissions in YAML\nDESCRIPTION: Example showing how to define command permissions with role-based access control and argument presets.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: get_article_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: id\n          value:\n            literal: 100\n```\n\n----------------------------------------\n\nTITLE: Sorting Nested Objects in GraphQL Queries\nDESCRIPTION: Fetches authors sorted by name and their articles sorted by rating. The example demonstrates how to apply sorting at multiple levels in a nested query structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/sorting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsAndArticlesSorted {\n  authors (order_by: {name: Asc}) {\n    id\n    name\n    articles(order_by: {rating: Desc}) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Author Name in GraphQL Query\nDESCRIPTION: This example demonstrates how to filter articles based on the nested author name field. It uses the _eq operator to match articles where the author's name is 'Sam Jones'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/nested-objects.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(where: { author: { name: { _eq: \"Sam Jones\" } } }) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EdDSA-based JWT Authentication with X509 Certificate\nDESCRIPTION: This configuration shows how to set up JWT authentication using EdDSA algorithm with an Ed25519 variant key. The public key is provided as an X509 certificate.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: Ed25519\n          key:\n            value: '-----BEGIN CERTIFICATE REQUEST-----\\nMIIBAzCBtgIBADAnMQswCQYDVQQGEwJERTEYMBYGA1UEAwwPd3d3LmV4YW1wbGUu\\nY29tMCowBQYDK2VwAyEA/9DV/InajW02Q0tC/tyr9mCSbSnNP1txICXVJrTGKDSg\\nXDBaBgkqhkiG9w0BCQ4xTTBLMAsGA1UdDwQEAwIEMDATBgNVHSUEDDAKBggrBgEF\\nBQcDATAnBgNVHREEIDAegg93d3cuZXhhbXBsZS5jb22CC2V4YW1wbGUuY29tMAUG\\nAytlcANBAKbTqnTyPcf4ZkVuq2tC108pBGY19VgyoI+PP2wD2KaRz4QAO7Bjd+7S\\nljyJoN83UDdtdtgb7aFgb611gx9W4go=\\n-----END CERTIFICATE REQUEST-----'\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project\nDESCRIPTION: Creates a new Hasura DDN project using the DDN CLI. This command sets up the initial project structure for adding custom logic.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init lambda-tutorial\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Table\nDESCRIPTION: This SQL snippet creates a new table named 'comments' in the 'public' schema with columns for id, comment, user_id, and post_id. It also inserts sample data into the 'comments' table for demonstration purposes. The 'id' column is defined as the primary key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.comments (\n  id serial PRIMARY KEY,\n  comment text NOT NULL,\n  user_id integer NOT NULL,\n  post_id integer NOT NULL\n);\n\nINSERT INTO public.comments (comment, user_id, post_id)\nVALUES\n  ('Great post! Really enjoyed reading this.', 1, 2),\n  ('Thanks for sharing your thoughts!', 2, 1),\n  ('Interesting perspective.', 3, 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Region Routing in Hasura DDN for PostgreSQL\nDESCRIPTION: This snippet shows how to configure a data connector for multi-region routing in Hasura DDN, currently supported only for the PostgreSQL connector.  The `regionConfiguration` property allows specifying different regions with their respective modes (e.g., ReadWrite, ReadOnly) and environment variable mappings for each region. This setup enables fetching data from the closest data source to the user, reducing latency.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/region-routing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: my_connector\n  subgraph: my_subgraph\n  source: hasura/connector_name:<version>\n  context: .\n  #highlight-start\n  regionConfiguration:\n    - region: <region1: region from the list below>\n      mode: ReadWrite\n      envMapping:\n          <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n              fromEnv: <CONNECTOR_ENV_VAR_REGION_1> # e.g. Env Var set as DB read write replica URL in region1\n    - region: <region2: region from the list below>\n      mode: ReadOnly\n      envMapping:\n          <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n              fromEnv: <CONNECTOR_ENV_VAR_REGION_2> # e.g. Env Var set as DB read only replica URL in region2\n    - region: <region3: region from the list below>\n      mode: ReadOnly\n      envMapping:\n          <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n              fromEnv: <CONNECTOR_ENV_VAR_REGION_3> # e.g. Env Var set as DB read only replica URL in region3\n  #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining BigQuery Connector Configuration Structure in JSON\nDESCRIPTION: This snippet outlines the overall structure of the configuration object for the BigQuery connector. It includes fields for connection URI, connection pool settings, schemas, tables, functions, and native operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/bigquery/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"value\": \"...\",\n    \"variable\": \"...\"\n  },\n  \"connection_pool_settings\": {\n    \"max_connections\": 10,\n    \"min_idle\": 1,\n    \"connection_timeout\": 30000,\n    \"initialization_fail_timeout\": 30000\n  },\n  \"schemas\": [\"public\"],\n  \"tables\": [...],\n  \"functions\": [],\n  \"native_operations\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Complex GraphQL Query with Nested Relationships in Hasura\nDESCRIPTION: This GraphQL query demonstrates fetching Album data with nested Artist and Track relationships, including both local and remote relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Album {\n    AlbumId\n    ArtistId\n    Artist {\n      # a remote relationship\n      ArtistId\n    }\n    Tracks {\n      # a local relationship\n      TrackId\n      Album {\n        # a remote relationship\n        AlbumId\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Permissions with Argument Preset for Article Retrieval in YAML\nDESCRIPTION: This YAML configuration sets up command permissions for a 'get_article_by_id' command. It allows full access for the admin role and restricts the user role to execute the command with a preset argument 'id' of 100.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/command-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: get_article_by_id\n  # highlight-start\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: id\n          value:\n            literal: 100\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining a Subgraph Configuration in YAML\nDESCRIPTION: A detailed subgraph.yaml configuration file that specifies the subgraph name, generator settings, included paths, environment variable mappings, and connector references. This configuration sets up a subgraph named 'app' with environment variables for connector authorization and URLs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/build-configs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: app\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n  envMapping:\n    APP_MY_CONNECTOR_AUTHORIZATION_HEADER:\n      fromEnv: APP_MY_CONNECTOR_AUTHORIZATION_HEADER\n    APP_MY_CONNECTOR_READ_URL:\n      fromEnv: APP_MY_CONNECTOR_READ_URL\n    APP_MY_CONNECTOR_WRITE_URL:\n      fromEnv: APP_MY_CONNECTOR_WRITE_URL\n  connectors:\n    - path: connector/my_connector/connector.yaml\n      connectorLinkName: my_connector\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Hasura Plugin Requests\nDESCRIPTION: TypeScript type definitions for the request payloads expected from Hasura DDN in both pre-parse and pre-response hooks.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nexport type PreParseRequest = {\n  session: {\n    role: string;\n    variables: Record<string, any>;\n  };\n  rawRequest: {\n    query: string;\n    variables: Record<string, any> | null;\n    operationName: string | null;\n  };\n};\n\nexport type PreResponseRequest = {\n  response: {\n    data: unknown;\n  };\n  session: {\n    role: string;\n    variables: Record<string, any> | null;\n  };\n  rawRequest: {\n    query: string;\n    variables: Record<string, any> | null;\n    operationName: string | null;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Example Inline Native Query JSON Configuration\nDESCRIPTION: This snippet provides an example of an inline native query configuration in JSON format for Hasura. It includes a simple SQL command and specifies the resultant column with its type. This example is essential for users to understand how to structure inline queries for their applications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/native-operations/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn connector-link update Command in Bash\nDESCRIPTION: Examples showing how to update a DataConnectorLink schema and how to update while adding all resources to the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update the schema of a DataConnectorLink 'mydb' for Subgraph config 'app'\n ddn connector-link update mydb --subgraph ./app/subgraph.yaml\n\n# Update the schema of a DataConnectorLink 'mydb' and add all Models, Commands and Relationships to the metadata for Subgraph config 'app'\n ddn connector-link update mydb --add-all-resources --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Negative Regex Filtering with _nregex in GraphQL\nDESCRIPTION: Shows how to use the _nregex operator to exclude records matching a regular expression pattern, finding users whose names don't start with 'J'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithNRegex {\n  users(where: { name: { _nregex: \"/^J/\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Claims Configuration with JSON Paths (YAML)\nDESCRIPTION: This YAML configuration maps `x-hasura-allowed-roles`, `x-hasura-default-role`, and `x-hasura-user-id` claims to specific JSON paths within the JWT payload. The `path` property specifies the JSON pointer to the claim.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclaimsConfig: \n  locations:\n    x-hasura-default-role: \n      path:\n        path: /hasura/all_roles/0\n    x-hasura-allowed-roles: \n      path:\n        path: /hasura/all_roles\n    x-hasura-user-id:\n      path:\n        path: /user/id\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with GraphQL in Hasura DDN\nDESCRIPTION: This GraphQL query fetches posts from the database, including their id, title, and content. It demonstrates how to query the posts model after setting up the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nested GraphQL Query with Relationships in Hasura DDN\nDESCRIPTION: This GraphQL query fetches posts along with their associated user details, demonstrating the use of relationships in Hasura DDN. It retrieves the id, title, and content of posts, as well as the id, name, and age of the related user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n    user {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Mutation in GraphQL\nDESCRIPTION: Shows how to use the 'encode' function as a GraphQL mutation in the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation EncodeMutation {\n  encode(username: \"hasura\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN Subgraph Build Apply\nDESCRIPTION: Shows the basic command structure for applying a Subgraph build using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build apply <subgraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for Webhook Mode\nDESCRIPTION: YAML configuration for setting up webhook authentication mode in Hasura DDN. Defines webhook URL, method, and header forwarding rules.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    webhook:\n      url:\n        valueFromEnv: AUTH_WEBHOOK_URL\n      method: POST\n      customHeadersConfig:\n        body:\n          headers:\n            forward:\n              - authorization\n              - content-type\n        headers:\n          additional:\n            user-agent: \"Hasura DDN\"\n```\n\n----------------------------------------\n\nTITLE: Hasura AuthConfig JWT Configuration\nDESCRIPTION: YAML configuration for Hasura DDN AuthConfig using JWT mode with Auth0 JWKs integration. Specifies claims format, issuer, JWT key location, and token settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      issuer: \"<your Auth0 tenant's URL>\"\n      key:\n        jwkFromUrl: \"https://<your Auth0 tenant's URL>/.well-known/jwks.json\"\n      audience: [\"<your GraphQL endpoint>\"]\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Sorting Objects with order_by in GraphQL\nDESCRIPTION: Fetch a list of authors sorted by their names in ascending order. The order_by argument takes an object specifying the field to sort by and the direction (Asc or Desc).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/sorting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsSorted {\n  authors (\n    order_by: {name: Asc}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Claims for Hasura in Clerk\nDESCRIPTION: This JavaScript code snippet defines the JWT claims structure for Hasura integration in Clerk. It includes the Hasura namespace with user ID, default role, and allowed roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"claims.jwt.hasura.io\": {\n\t\t\"x-hasura-user-id\": \"{{user.id}}\",\n\t\t\"x-hasura-default-role\": \"user\",\n\t\t\"x-hasura-allowed-roles\": [\n\t\t\t\"user\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Notifications Using GraphQL in Hasura DDN\nDESCRIPTION: This GraphQL subscription automatically updates with new notifications for all users whenever they're added to the data source. It retrieves the id, creation timestamp, and message content for each notification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/subscriptions/select-many.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription AllNotificationSubscription {\n  notifications {\n    id\n    created_at\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with Author Relationship in GraphQL\nDESCRIPTION: Demonstrates fetching a list of articles along with their authors' names using an object (one-to-one) relationship in Hasura GraphQL. The query returns article ID, title, and the associated author's name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/nested-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesAndAuthors {\n  articles {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships\nDESCRIPTION: YAML configuration for defining relationships between users and posts\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: posts\n  sourceType: User\n  target:\n    command:\n      name: GetPosts\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        argument:\n          argumentName: userId\n```\n\n----------------------------------------\n\nTITLE: Defining TypeReference in Open DD\nDESCRIPTION: Explains the structure and usage of TypeReference in Open DD, including how to indicate nullable values and arrays. It uses string notation with specific syntax for non-nullable references and arrays.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#### TypeReference {#objecttype-typereference}\n\nA reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Webhook Server\nDESCRIPTION: Core implementation of the webhook authentication server using Express.js, including middleware setup, mock authentication, and route handlers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// Mock function to fetch user info from a token\nfunction fetchUserInfo(token) {\n  // In a real application, you would:\n  // 1. Validate the token\n  // 2. Query your database or auth service\n  // 3. Return user information\n  return {\n    role: \"user\",\n    userId: \"1\",\n    // Add any other user information needed for your permissions\n  };\n}\n\n// Health check endpoint\napp.get(\"/\", (req, res) => {\n  res.send(\"Webhook auth server is running\");\n});\n\n// Webhook endpoint for Hasura DDN\napp.post(\"/webhook\", (req, res) => {\n  // Extract the Authorization header\n  const token = req.headers.authorization;\n\n  if (!token) {\n    return res.status(401).json({\n      error: \"No authorization token provided\",\n    });\n  }\n\n  try {\n    // Fetch user information based on the token\n    const userInfo = fetchUserInfo(token);\n\n    // Return the Hasura variables\n    const hasuraVariables = {\n      \"X-Hasura-Role\": userInfo.role,\n      \"X-Hasura-User-Id\": userInfo.userId,\n      // Add any other variables needed for your permissions\n    };\n\n    res.json(hasuraVariables);\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error processing authentication request\",\n    });\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Webhook auth server running on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Sorted Article Query\nDESCRIPTION: Query to fetch articles sorted by article_id in descending order.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/simple-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesSorted {\n  articles(order_by: {article_id: Desc}) {\n    title\n    article_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context in DDN CLI\nDESCRIPTION: Command to switch between subgraph contexts using the path to the subgraph's configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn context set subgraph ./<subgraph-name>/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Relationship in Hasura DDN\nDESCRIPTION: Command to add a relationship between 'posts' and 'users' tables in Hasura DDN metadata, based on the existing foreign key in the PostgreSQL database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nddn relationship add my_pg \"posts\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Mutation for MongoDB in Hasura DDN\nDESCRIPTION: Example of an update mutation that modifies an existing artist in a MongoDB collection. The mutation accepts artistId and name parameters and updates the artist record identified by artistId, returning success metrics.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"updateArtist\",\n  \"description\": \"Example of a database update using a native mutation\",\n  \"resultType\": {\n    \"object\": \"UpdateArtist\"\n  },\n  \"arguments\": {\n    \"artistId\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    }\n  },\n  \"objectTypes\": {\n    \"UpdateArtist\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"update\": \"Artist\",\n    \"updates\": [\n      {\n        \"q\": {\n          \"ArtistId\": \"{{ artistId }}\"\n        },\n        \"u\": {\n          \"ArtistId\": \"{{ artistId }}\",\n          \"Name\": \"{{ name }}\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Subgraph GraphQL Query\nDESCRIPTION: Example GraphQL query demonstrating how to retrieve user data with their favorite product across subgraphs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    favorite_product {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating PostgreSQL Tables\nDESCRIPTION: SQL commands to create a 'users' table with basic schema and insert sample data. This establishes the initial database structure for the tutorial.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n--- Create the table\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  age INT NOT NULL\n);\n\n--- Insert some data\nINSERT INTO users (name, age) VALUES ('Alice', 25);\nINSERT INTO users (name, age) VALUES ('Bob', 30);\nINSERT INTO users (name, age) VALUES ('Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: Fetching Authors and Articles in a Single GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates how to fetch two unrelated data types (authors and articles) in a single request. It retrieves a limited list of authors with their IDs and names, and a limited list of articles with their IDs and titles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/multiple-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsAndArticles {\n  authors(limit: 2) {\n    id\n    name\n  }\n  articles(limit: 2) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command from Discovered Resources in DDN CLI\nDESCRIPTION: This command adds a specific command from the discovered resources to the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector_link_name> <operation_name>\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Native Mutation in JSON\nDESCRIPTION: Creates a JSON file defining a native MongoDB mutation 'createUser' that adds a new user with name and age to the database using an aggregation pipeline.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"createUser\",\n  \"description\": \"Create a new user with name and age\",\n  \"resultType\": {\n    \"object\": \"CreateUserResult\"\n  },\n  \"arguments\": {\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    },\n    \"age\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    }\n  },\n  \"objectTypes\": {\n    \"CreateUserResult\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"insert\": \"users\",\n    \"documents\": [\n      {\n        \"name\": \"{{ name }}\",\n        \"age\": \"{{ age }}\",\n        \"user_id\": {\n          \"$size\": {\n            \"$ifNull\": [\n              {\n                \"$objectToArray\": \"$$ROOT\"\n              },\n              []\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Validation Implementation\nDESCRIPTION: Example function for validating JWT tokens in a production environment using the jsonwebtoken library.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\");\n\nasync function validateToken(token) {\n  try {\n    // Remove 'Bearer ' prefix if present\n    const tokenValue = token.replace(\"Bearer \", \"\");\n\n    // Verify JWT token\n    const decoded = jwt.verify(tokenValue, process.env.JWT_SECRET);\n\n    // Check required claims\n    if (!decoded.sub || !decoded.role) {\n      throw new Error(\"Invalid token claims\");\n    }\n\n    // Check token expiration\n    if (decoded.exp && Date.now() >= decoded.exp * 1000) {\n      throw new Error(\"Token has expired\");\n    }\n\n    return decoded;\n  } catch (err) {\n    console.error(\"Token validation failed:\", err.message);\n    throw new Error(\"Invalid token\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation\nDESCRIPTION: This GraphQL mutation demonstrates how to use the newly created native mutation to update post titles based on user age.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdatePostTitlesByAge {\n  updatePostTitlesByAge(age: \"25\") {\n    affectedRows\n    returning {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Book Titles in GraphQL Query\nDESCRIPTION: This example shows how to filter results based on an array relationship. It retrieves authors who have written books with titles containing 'graphql', demonstrating filtering on array relationship fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/nested-objects.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors (\n    where: {\n      books: {\n        title: { _like: \"graphql\" }\n      }\n    }\n  ) {\n    id\n    name\n    books {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship in YAML for DDN\nDESCRIPTION: This YAML configuration defines a relationship between the 'Users' model and the 'shoutName' function, mapping the 'name' field to the function's argument.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: shoutName # Define a name to expose in the supergraph API\n  sourceType: Users # The existing source object type (which also defines the source model Users)\n  target:\n    command: # The target is a command\n      name: ShoutName # The name of the existing command we have defined in metadata\n      subgraph: app # The existing subgraph the command is defined in\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: name # The field on the source object type that we want to provide to the target command as an argument\n      target:\n        argument:\n          argumentName: name # The name of the argument on the target command that we want to map to the source field\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Notification Count Aggregates in GraphQL\nDESCRIPTION: This GraphQL subscription query automatically updates the aggregate count when new records are added to the notifications data source. It specifically tracks the total count of notifications using the _count aggregate function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/subscriptions/aggregates.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription NotificationSubscription {\n  notificationsAggregate {\n    _count\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token Using Clerk JavaScript SDK\nDESCRIPTION: This JavaScript code snippet demonstrates how to generate a JWT token using the Clerk JavaScript SDK. It retrieves a token based on a specified template named 'hasura'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = await session.getToken({ template: \"hasura\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authorization for Prometheus Connector\nDESCRIPTION: Establishes HTTP Bearer token authentication using an environment variable for credentials\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/auth.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconnection_settings:\n  authentication:\n    authorization:\n      type:\n        value: Bearer\n      credentials:\n        env: PROMETHEUS_AUTH_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Initializing Snowflake Connector\nDESCRIPTION: Initialize a Snowflake connector for the project. The user will be prompted to provide a JDBC connection string for Snowflake.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_snowflake -i\n```\n\n----------------------------------------\n\nTITLE: Describing Object Types in JSON\nDESCRIPTION: Illustrates the 'object_types' property, which provides type details for fields in collections. It includes both required and nullable fields using detailed type descriptors to aid in query processing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"multivector_collection\": {\n    \"fields\": {\n      \"id\": {\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"Int\"\n        }\n      },\n      \"score\": {\n        \"type\": {\n          \"type\": \"nullable\",\n          \"underlying_type\": {\n            \"type\": \"named\",\n            \"name\": \"Float\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Native Mutation for Updating Post Titles\nDESCRIPTION: This SQL script defines a native mutation that updates post titles based on the user's age. It uses parameterized input and returns updated post information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- native_operations/mutations/update_post_titles_by_age.sql\nUPDATE posts\nSET title = CASE\n    WHEN title ~ ' - age \\d+$' THEN regexp_replace(title, ' - age \\d+$', ' - age ' || {{ age }})\n    ELSE title || ' - age ' || {{ age }}\nEND\nFROM users\nWHERE posts.user_id = users.id\n    AND users.age = {{ age }}\nRETURNING\n    posts.id,\n    posts.title,\n    posts.user_id,\n    users.name,\n    users.age;\n```\n\n----------------------------------------\n\nTITLE: Region-Specific Resource Configuration\nDESCRIPTION: Example demonstrating how to override default resource limits for specific regions in a connector.yaml file. Shows the interaction between top-level and region-specific resource configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/connector-deployment-resources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefinition:\n  resources:\n    memory: 512M\n    cpu: 1\n  regionConfiguration:\n    - region: us-central1\n      resources:\n        memory: 128M\n        cpu: 2\n```\n\n----------------------------------------\n\nTITLE: Filtering Books by Author Name using GraphQL Relationship Comparison\nDESCRIPTION: Example GraphQL query demonstrating how to filter books based on their author's name using a relationship comparison. The query returns book IDs and titles where the author's name matches 'Alice Johnson'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/performance-relationship-comparisons.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  books(where: { author: { name: { _eq: \"Alice Johnson\" } } }) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL Queries for Hasura\nDESCRIPTION: This example demonstrates how to create dynamic queries using variables in GraphQL. It fetches articles by a specific author_id parameter, making the query reusable with different input values.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($author_id: Int!) {\n  articles(\n    where: { author_id: { _eq: $author_id } }\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Hasura DDN Project with Relationships\nDESCRIPTION: Rebuilds the Hasura DDN project after adding relationships and restarts services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Metadata\nDESCRIPTION: Commands to update connector metadata and track new Native Query resources\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector-link update chinook_pg --add-all-resources\n\n# Alternative method if connector is not running\nddn connector introspect chinook_pg\nddn model add chinook_pg \"artist_by_name_between\"\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram: Engine Plugins Execution Pipeline\nDESCRIPTION: Flowchart showing the execution pipeline of engine plugins including authentication, query parsing, execution, and response hooks.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph RL\n    Client[Client] -->|\"Request (/graphql)\"| Authentication\n    Authentication --> Query_Parsing_and_Planning[\"Query parsing and planning\"]\n    Query_Parsing_and_Planning --> Execute_Query[\"Execute query\"]\n    Execute_Query <-->|Fetch Data| Data_Connector[\"Data connector\"]\n    Execute_Query --> Post_Processing[\"Post-processing\"]\n    Post_Processing --> Pre_Response_Hooks[\"Pre-response hooks\"]\n    Post_Processing -->|Response| Client\n\n    subgraph DDN Engine\n        Authentication\n        Query_Parsing_and_Planning\n        Execute_Query\n        Post_Processing\n    end\n\n    Pre_Parse_Hooks[\"Pre-parse hooks\"] <--> Query_Parsing_and_Planning\n```\n\n----------------------------------------\n\nTITLE: Stored Procedures Example - JSON\nDESCRIPTION: This JSON snippet illustrates how to define stored procedures that can be used in the data connector. The example shows how to specify the procedure name, schema, arguments, return types, and descriptions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storedProcedures\": {\n    \"GetArtistsByName\": {\n      \"name\": \"GetArtistsByName\",\n      \"schema\": \"dbo\",\n      \"arguments\": {\n        \"Name\": {\n          \"name\": \"Name\",\n          \"type\": \"varchar\",\n          \"nullable\": \"nullable\",\n          \"isOutput\": false,\n          \"description\": null\n        }\n      },\n      \"returns\": {\n        \"CustomerId\": {\n          \"name\": \"CustomerId\",\n          \"type\": \"int\",\n          \"nullable\": \"nonNullable\",\n          \"description\": null\n        },\n        \"Phone\": {\n          \"name\": \"Phone\",\n          \"type\": \"varchar\",\n          \"nullable\": \"nonNullable\",\n          \"description\": null\n        },\n        \"TotalPurchases\": {\n          \"name\": \"TotalPurchases\",\n          \"type\": \"int\",\n          \"nullable\": \"nonNullable\",\n          \"description\": null\n        }\n      },\n      \"description\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords in TypeScript\nDESCRIPTION: Implement a function to hash passwords using bcrypt in TypeScript. This function generates a salt and hashes the password.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport bcrypt from \"bcryptjs\";\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n\n  // Add your own logic here to hit your Hasura endpoint and perform an insertion\n\n  return hashedPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector for Hasura DDN\nDESCRIPTION: Command to initialize a new PostgreSQL connector in interactive mode. This sets up the necessary files for connecting to a PostgreSQL database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_pg -i\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL - JSON Variables Format\nDESCRIPTION: This shows the JSON format for passing variables to a GraphQL query. It specifies an author_id value that will be used as a parameter in the query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"author_id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Google Cloud Storage\nDESCRIPTION: This GraphQL query demonstrates how to download a storage object from Google Cloud Storage (GCS) using dynamic credentials.  It specifies the `clientType` as `gcs` and includes `accessKeyId` and `secretAccessKey` which are generated HMAC keys.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/dynamic-credentials.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"query DownloadStorageObjectAsText {\n  downloadStorageObjectAsText(\n    clientType: \\\"gcs\\\"\n    accessKeyId: \\\"test-key\\\"\n    secretAccessKey: \\\"randomsecret\\\"\n    name: \\\"people-1000.csv\\\"\n    bucket: \\\"default\\\"\n  ) {\n    data\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting BigQuery Database\nDESCRIPTION: This command re-introspects the BigQuery database to update the schema representation after adding new tables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_bigquery\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Command to authenticate the Hasura DDN CLI before creating a new project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Paginating with Offset in GraphQL\nDESCRIPTION: Shows how to fetch 5 authors starting from the 6th record using both limit and offset arguments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsFromSixth {\n  authors(\n    limit: 5,\n    offset:5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Metadata Example\nDESCRIPTION: Complete example of a command metadata structure for retrieving the latest article, demonstrating all possible configuration options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Command\nversion: v1\ndefinition:\n  name: get_latest_article\n  outputType: commandArticle\n  arguments: []\n  source:\n    dataConnectorName: data_connector\n    dataConnectorCommand:\n      function: latest_article\n    argumentMapping: {}\n  graphql:\n    rootFieldName: getLatestArticle\n    rootFieldKind: Query\n  description: Get the latest article\n```\n\n----------------------------------------\n\nTITLE: Create relationship in metadata with YAML\nDESCRIPTION: This YAML configuration defines a relationship between a Customer model and an Orders model. It specifies the relationship type (Array) and the mapping between the customerId fields in both models, allowing you to query Orders from a Customer.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"---\nkind: Relationship\nversion: v1\ndefinition:\n  sourceType: Customers # The existing source object type which also defines the model\n  name: orders # A name we want to use when we query the Orders from the Customer\n  target:\n    model: # The target can be a model or a command\n      name: Orders # The existing model that we want to access when we query the Orders from the Customer\n      relationshipType: Array # The relationship type which can be Object or Array. Since a customer can have many orders, we use an Array.\n  mapping: # The mapping defines which field on the source object type maps to which field on the target model\n    - source:\n        fieldPath:\n          - fieldName: customerId # The existing field on the source object type that we want to map to the target model\n      target:\n        modelField:\n          - fieldName: customerId # The existing field on the target model that we want to map to the source object type\"\n```\n\n----------------------------------------\n\nTITLE: Raising Custom Error in Python Lambda Connector\nDESCRIPTION: Shows how to raise a custom UnprocessableContent error with a message and details using the Python connector SDK.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/errors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# There are different error types including: BadRequest, Forbidden, Conflict, UnprocessableContent, InternalServerError, NotSupported, and BadGateway\n@connector.register_query\ndef error():\n    raise UnprocessableContent(message=\"This is an error\", details={\"Error\": \"This is an error!\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Comparison in Python\nDESCRIPTION: Python function to compare a raw password with a hashed password using bcrypt. It uses the FunctionConnector from hasura_ndc to register the function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nimport bcrypt\n\nconnector = FunctionConnector()\n\n@connector.register_query\nasync def compare_password(password: str, hashed_password: str) -> bool:\n    return bcrypt.checkpw(password.encode(\"utf-8\"), hashed_password.encode(\"utf-8\"))\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Response for Fetching User by Global ID\nDESCRIPTION: This JSON snippet shows the GraphQL response when fetching a user using a Global ID. The response includes user details, confirming the user identity based solely on the Global ID.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"eyJ2ZXJzaW9uIjoxLCJ0eXBlbmFtZSI6IlVzZXJzIiwiaWQiOnsidXNlcl9pZCI6IjEifX0=\",\n    \"__typename\": \"User\",\n    \"name\": \"Bob\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DDN CLI\nDESCRIPTION: Command to install the new DDN CLI version 2\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init --dir <new-proj-dir>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd <new-proj-dir> && ddn context set supergraph ./supergraph.local.yaml\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Profile Age in GraphQL Query\nDESCRIPTION: This query filters users based on a field within an object type. It retrieves users whose profile age is greater than 30, demonstrating nested object type field filtering.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/nested-objects.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  users (\n    where: {\n      profile: {\n        age: { _gt: 30 }\n      }\n    }\n  ) {\n    id\n    name\n    profile {\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Posts\nDESCRIPTION: GraphQL query to retrieve post information from the MongoDB database through Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    userId\n    postId\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response for Users\nDESCRIPTION: JSON response from the users query showing the data returned from the PostgreSQL database through the Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"age\": 25\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"age\": 30\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Charlie\",\n        \"age\": 35\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship for Formatted Date in Hasura DDN\nDESCRIPTION: This YAML configuration creates a relationship between an Orders model and the FormattedDate command. It maps the createdAt field from the source to the dateString argument of the target command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-format-datetime-objects.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: formattedDate\n  sourceType: Orders\n  target:\n    command:\n      name: FormattedDate\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: createdAt\n      target:\n        argument:\n          argumentName: dateString\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Credentials for AWS S3 - YAML\nDESCRIPTION: Demonstrates how to configure AWS S3 client settings using static credentials. This setup will ensure that the required Access Key ID and Secret Access Key are securely referenced from environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - id: s3\n    type: s3\n    defaultBucket:\n      env: DEFAULT_BUCKET\n    authentication:\n      type: static\n      accessKeyId:\n        env: ACCESS_KEY_ID\n      secretAccessKey:\n        env: SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining Function Command in YAML\nDESCRIPTION: Example of defining a simple command called 'Hello' that takes a name parameter and returns a String. The command is exposed as a GraphQL query through a data connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Command\nversion: v1\ndefinition:\n  name: Hello\n  outputType: String!\n  arguments:\n    - name: name\n      type: String\n  source:\n    dataConnectorName: my_data_connector\n    dataConnectorCommand:\n      function: hello\n  graphql:\n    rootFieldName: hello\n    rootFieldKind: Query\n```\n\n----------------------------------------\n\nTITLE: Hasura JWT Config HMAC-SHA Example (YAML)\nDESCRIPTION: This YAML example demonstrates a complete JWT configuration for Hasura using HMAC-SHA algorithms.  It includes claims configuration, token location, and key configuration with a fixed algorithm and key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            value: 3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R\n```\n\n----------------------------------------\n\nTITLE: Apply Supergraph Build with DDN CLI\nDESCRIPTION: This command applies a specific supergraph build version to your Hasura DDN project, making it the active endpoint. The `<supergraph-build-version>` parameter specifies the version of the build to apply. Applying a build makes it the default one served by your Hasura DDN project endpoint.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/04-deploy-your-supergraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Build in Hasura DDN Cloud Project\nDESCRIPTION: Creates a build of the 'customers' subgraph on the cloud project. This step prepares the subgraph for integration into the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Configuring EdDSA-based JWT Authentication with Public Key in PEM Format\nDESCRIPTION: This example illustrates how to configure JWT authentication using EdDSA algorithm with an Ed25519 variant key. The public key is provided in PEM format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: Ed25519\n          key:\n            value: '-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAG9I+toAAJicilbPt36tiC4wi7E1Dp9rMmfnwdKyVXi0=\\n-----END PUBLIC KEY-----'\n```\n\n----------------------------------------\n\nTITLE: Tables Metadata Example - YAML\nDESCRIPTION: This example shows how to define the `tables` metadata. The `tables` metadata lists the database tables and views exposed through the data connector. It includes information about column names, types, nullability, uniqueness constraints, foreign relations and descriptions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"tables\":\n  {\n    \"Album\": // Exposed collection name\n      {\n         \"schemaName\": \"dbo\",\n        \"tableName\": \"Album\", // The actual name of the table in the database\n        \"columns\":\n          {\n            \"AlbumId\": // The exposed field name\n              {\n                \"name\": \"AlbumId\", // The actual name of the column in the table\n                \"type\": \"int\",\n                \"nullable\": \"nonNullable\",\n                \"description\": null,\n              },\n            \"ArtistId\":\n              {\n                \"name\": \"ArtistId\",\n                \"type\": \"int\",\n                \"nullable\": \"nonNullable\",\n                \"description\": null,\n              },\n            \"Title\":\n              {\n                \"name\": \"Title\",\n                \"type\": \"nvarchar\",\n                \"nullable\": \"nonNullable\",\n                \"description\": null,\n              },\n          },\n        \"uniquenessConstraints\": { \"PK_Album\": [\"AlbumId\"] },\n        \"foreignRelations\":\n          {\n            \"FK_AlbumArtistId\":\n              {\n                \"foreignTable\": \"Artist\",\n                \"columnMapping\": {\n                    \"ArtistId\": \"ArtistId\" // Column of this table : Column of the referenced table\n                }\n              },\n          },\n        \"description\": null,\n      },\n  }\n```\n\n----------------------------------------\n\nTITLE: Querying Users in GraphQL\nDESCRIPTION: Executes a GraphQL query to fetch all users from the Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Configuration in YAML\nDESCRIPTION: Specifies how database tables are exposed through the connector, including column definitions, constraints, and relationships. This example shows an Album table with its fields, constraints and relationships to other tables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"tables\":\n  {\n    \"Album\":\n      {\n        // Exposed collection name \"schemaName\": \"public\",\n        \"tableName\": \"Album\",\n        // The actual name of the table in the database \"columns\":\n          {\n            \"AlbumId\":\n              {\n                // The exposed field name \"name\": \"AlbumId\",\n                // The actual name of the column in the table \"type\": { \"scalarType\": \"int4\" },\n                \"nullable\": \"nonNullable\",\n                \"description\": \"The identifier of an album\",\n              },\n            \"ArtistId\":\n              {\n                \"name\": \"ArtistId\",\n                \"type\": { \"scalarType\": \"int4\" },\n                \"nullable\": \"nonNullable\",\n                \"description\": \"The id of the artist that authored the album\",\n              },\n            \"Title\":\n              {\n                \"name\": \"Title\",\n                \"type\": { \"scalarType\": \"varchar\" },\n                \"nullable\": \"nonNullable\",\n                \"description\": \"The title of an album\",\n              },\n          },\n        \"uniquenessConstraints\": { \"PK_Album\": [\"AlbumId\"] },\n        \"foreignRelations\":\n          {\n            \"FK_AlbumArtistId\":\n              {\n                \"foreignSchema\": \"public\",\n                \"foreignTable\": \"Artist\",\n                \"columnMapping\": { \"ArtistId\": // Column of this table \"ArtistId\" // Column of the referenced table },\n              },\n          },\n        \"description\": \"The record of all albums\",\n      },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA-based JWT Authentication with Public Key in PEM Format\nDESCRIPTION: This snippet demonstrates how to configure JWT authentication using RSA algorithm with a 512-bit key. The public key is provided in PEM format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: RS512\n          key:\n            value: '-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n```\n\n----------------------------------------\n\nTITLE: Configuring EC-based JWT Authentication with JWKs URL\nDESCRIPTION: This configuration demonstrates how to set up JWT authentication using ECDSA algorithm with a JWKs URL for retrieving the public key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        jwkFromUrl: https://www.gstatic.com/iap/verify/public_key-jwk\n```\n\n----------------------------------------\n\nTITLE: Python Auth0 Token Generation\nDESCRIPTION: Python script to generate service account access tokens from Auth0 using client credentials flow.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"<Auth0 domain>\")\n\npayload = \"{\\\"client_id\\\":\\\"<client id>\\\",\\\"client_secret\\\":\\\"<Auth0 Client Secret>\\\",\\\"audience\\\":\\\"<your GraphQL endpoint>\\\",\\\"grant_type\\\":\\\"client_credentials\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/oauth/token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n----------------------------------------\n\nTITLE: Metadata Generation Commands\nDESCRIPTION: Series of commands to introspect data source and generate metadata for entities, commands, and relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect <connector_name>\nddn model add <connector_name> '*'\nddn command add <connector_name> '*'\nddn relationship add <connector_name> '*'\n```\n\n----------------------------------------\n\nTITLE: Adding Stripe GetCheckoutSessions Command to DDN\nDESCRIPTION: Command to add the GetCheckoutSessions endpoint from Stripe's API as a command in the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_stripe GetCheckoutSessions\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration JSON for ClickHouse Native Query\nDESCRIPTION: This JSON configuration defines a native query named 'UserByName'. It specifies the query file location, exposes it as a collection, and defines the return type with 'id' and 'name' columns.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": {},\n  \"queries\": {\n    \"UserByName\": {\n      \"exposed_as\": \"collection\",\n      \"file\": \"queries/UserByName.sql\",\n      \"return_type\": {\n        \"kind\": \"definition\",\n        \"columns\": {\n          \"id\": \"Int32\",\n          \"name\": \"String\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments in MongoDB Native Queries\nDESCRIPTION: Example of how to define arguments in a native MongoDB query. Arguments can be referenced in the command using double braces syntax and are of specific scalar types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"arguments\": {\n  \"age\": {\n    \"type\": {\n      \"scalar\": \"int\"\n    }\n  },\n  \"name\": {\n    \"type\": {\n      \"scalar\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Supergraph in YAML\nDESCRIPTION: Defines the supergraph configuration for development environment, linking to subgraph configuration and metadata files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-environments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    # highlight-start\n    - globals/subgraph-development.yaml\n    # highlight-end\n    - my_subgraph/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenAPI Specification for JSON:API Endpoints\nDESCRIPTION: This HTTP GET request retrieves the OpenAPI specification for JSON:API endpoints. The response is a standard OpenAPI 3.1 specification in JSON format, describing all available endpoints, models, and operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/__schema\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Order Status in Remote Relationships\nDESCRIPTION: This query retrieves users who have completed orders using a remote relationship between users and orders. It demonstrates how to filter data across multiple data sources based on a nested field condition.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/nested-objects.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersCompletedOrders {\n  users(where: { orders: { status: { _eq: \"complete\" } } }) {\n    id\n    name\n    orders {\n      id\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting and Adding Commands\nDESCRIPTION: Introspects the connector and adds commands for the custom functions. This process generates metadata for each function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_ts\nddn command add my_ts hello\nddn command add my_ts encode\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console for Local Development\nDESCRIPTION: Opens the Hasura DDN Console in local development mode. This provides a graphical interface for exploring and testing the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Cross-Repository Relationship Example\nDESCRIPTION: YAML configuration showing how to define a relationship between User and Product types across different repositories.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: favorite_product\n  sourceType: User\n  target:\n    model:\n      name: Product\n      subgraph: products\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: user_favorite_product_id\n      target:\n        modelField:\n          - fieldName: id\n```\n\n----------------------------------------\n\nTITLE: Example Author-Articles Relationship Configuration\nDESCRIPTION: Example YAML configuration showing how to define a relationship between authors and their articles using the model target type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: Articles\n  sourceType: author\n  target:\n    model:\n      name: Articles\n      subgraph: null\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: author_id\n      target:\n        modelField:\n          - fieldName: author_id\n  description: Articles written by an author\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Comparison in TypeScript\nDESCRIPTION: TypeScript function to compare a raw password with a hashed password using bcrypt. It takes two string parameters and returns a boolean Promise.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport bcrypt from \"bcryptjs\";\n\n/**\n* @readonly\n*/\nexport async function comparePassword(password: string, hashedPassword: string): Promise<boolean> {\n  return await bcrypt.compare(password, hashedPassword);\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Hasura DDN CLI\nDESCRIPTION: Command used to authenticate the Hasura DDN CLI by launching a browser login window, providing access to Hasura Cloud resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Querying Stripe Products with GraphQL\nDESCRIPTION: GraphQL query to fetch all products from Stripe, including their ID, name, and description via the GetProducts command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_ALL_PRODUCTS {\n  getProducts {\n    data {\n      id\n      name\n      description\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Relationships in JSON:API Query\nDESCRIPTION: Example of fetching users along with multiple related resources (both posts and profile) using comma-separated values in the include parameter. This demonstrates how to include different relationship paths.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Users?include=posts,profile\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Search Products Based on Price and Vector\nDESCRIPTION: This GraphQL query snippet combines vector search with a price filter to return products that meet both criteria, demonstrating the flexibility of querying in Hasura.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/vector-search.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  productsVectorDistance(\n    args: { query_vector: \"<input vector>\" }\n    limit: 10\n    order_by: { distance: Asc }\n    where: { product: { price: { _gt: 500 } } }\n  ) {\n    id\n    distance\n    product {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting Elasticsearch Database Schema\nDESCRIPTION: Runs introspection on the Elasticsearch connector to discover indexes and their schemas, generating configuration for the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_es\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship in Hasura DDN Metadata\nDESCRIPTION: Adds a relationship between Posts and Users models in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: Posts\n  target:\n    model:\n      name: Users\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: id\n```\n\n----------------------------------------\n\nTITLE: GraphqlConfig with Apollo Federation Fields\nDESCRIPTION: This YAML example shows a complete 'graphql-config.hml' with Apollo Federation fields enabled. The 'apolloFederation.enableRootFields' is a necessary addition to support Apollo Federation capabilities in a Hasura DDN environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GraphqlConfig\nversion: v1\ndefinition:\n  query:\n    rootOperationTypeName: Query\n  mutation:\n    rootOperationTypeName: Mutation\n  apolloFederation:\n    enableRootFields: true\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI interaction in Go\nDESCRIPTION: Go function to generate SEO descriptions using OpenAI's API. It sets up the necessary structures, creates an HTTP request to OpenAI, and processes the response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n  \"bytes\"\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n  \"io/ioutil\"\n  \"net/http\"\n\n  \"hasura-ndc.dev/ndc-go/types\"\n)\n\ntype SEOArguments struct {\n  Input string `json:\"input\"`\n}\n\n// OpenAIRequest represents the request payload for OpenAI's Chat API\ntype OpenAIRequest struct {\n  Model    string    `json:\"model\"`\n  Messages []Message `json:\"messages\"`\n}\n\n// Message defines the structure for messages sent to OpenAI\ntype Message struct {\n  Role    string `json:\"role\"`\n  Content string `json:\"content\"`\n}\n\n// OpenAIResponse represents the response from OpenAI\ntype OpenAIResponse struct {\n  Choices []struct {\n    Message struct {\n      Content string `json:\"content\"`\n    } `json:\"message\"`\n  } `json:\"choices\"`\n}\n\n// GenerateSeoDescription sends a request to OpenAI and generates an SEO-optimized product description\nfunc FunctionGenerateSeoDescription(ctx context.Context, state *types.State, arguments *SEOArguments) (string, error) {\n  // We can store this in the project's .env file and reference it here\n  apiKey := \"your_openai_api_key\"\n\n  // Prepare the request payload\n  reqBody, _ := json.Marshal(OpenAIRequest{\n    Model: \"gpt-4\",\n    Messages: []Message{\n      {Role: \"system\", Content: \"You are a senior marketing associate. Take the product description provided and improve upon it to rank well with SEO.\"},\n      {Role: \"user\", Content: arguments.Input},\n    },\n  })\n\n  // Create a new request to the OpenAI Chat API\n  req, _ := http.NewRequest(\"POST\", \"https://api.openai.com/v1/chat/completions\", bytes.NewBuffer(reqBody))\n  req.Header.Set(\"Content-Type\", \"application/json\")\n  req.Header.Set(\"Authorization\", \"Bearer \"+apiKey)\n\n  client := &http.Client{}\n  resp, err := client.Do(req)\n  if err != nil {\n    return \"\", fmt.Errorf(\"failed to send request: %v\", err)\n  }\n  defer resp.Body.Close()\n\n  // Parse the response from OpenAI\n  body, _ := ioutil.ReadAll(resp.Body)\n  var openAIResp OpenAIResponse\n  json.Unmarshal(body, &openAIResp)\n\n  return openAIResp.Choices[0].Message.Content, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Datetime Objects in Python for Hasura DDN\nDESCRIPTION: This Python function uses the datetime module to parse an ISO format date string and format it into a human-readable string. It's registered as a query in a FunctionConnector for use in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-format-datetime-objects.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom datetime import datetime\n\nconnector = FunctionConnector()\n\n@connector.register_query\nasync def formatted_date(dateString: str) -> str:\n    date = datetime.fromisoformat(date_string)\n    return date.strftime(\"%B %d, %Y %I:%M %p\")\n\nif __name__ == \"__main__\":\n  start(connector)\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Data\nDESCRIPTION: GraphQL query demonstrating nested relationships between users and posts\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_USERS_AND_POSTS {\n  getUsers {\n    id\n    name\n    posts {\n      id\n      title\n      body\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Predicates with 'AND' in YAML\nDESCRIPTION: This snippet illustrates how to combine multiple predicates using the 'and' operator in YAML. It checks for both author_id equality and a specific title.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nand:\n  - fieldComparison:\n      field: author_id\n      operator: _eq\n      value:\n        sessionVariable: x-hasura-user-id\n  - fieldComparison:\n      field: title\n      operator: _eq\n      value:\n        literal: Hello World\n```\n\n----------------------------------------\n\nTITLE: Querying Order Tracking Details with GraphQL\nDESCRIPTION: Example GraphQL query demonstrating how to fetch order tracking and shipping details using command relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery TrackOrder {\n  trackOrder(orderId: \"ORD12345\") {\n    trackingNumber\n    shippingDetails {\n      carrier\n      estimatedDeliveryDate\n      currentStatus\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Structure for Turso Connector\nDESCRIPTION: The foundational structure of the Turso connector configuration object showing the three main components: collection_names, object_fields, and object_types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/turso/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"collection_names\": [],\n    \"object_fields\": {},\n    \"object_types\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Results Example\nDESCRIPTION: Shows how to fetch the first two articles using the page[limit] parameter with corresponding response format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?page[limit]=2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Articles\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"First Article\",\n        \"content\": \"Content of first article\"\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"Second Article\",\n        \"content\": \"Content of second article\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Elasticsearch Docker Container\nDESCRIPTION: Starts a local Elasticsearch container with security settings configured for development purposes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -p 127.0.0.1:9200:9200 -d --name elasticsearch \\\n  -e ELASTIC_PASSWORD=\"elastic\" \\\n  -e \"discovery.type=single-node\" \\\n  -e \"xpack.security.http.ssl.enabled=false\" \\\n  -e \"xpack.license.self_generated.type=trial\" \\\n  docker.elastic.co/elasticsearch/elasticsearch:8.17.1\n```\n\n----------------------------------------\n\nTITLE: Executing a Nested GraphQL Query with User Relationship\nDESCRIPTION: This GraphQL query retrieves posts with their related user information using a relationship. It demonstrates how to fetch nested data through the relationship between posts and users, retrieving post details along with the associated user's information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  examplePosts {\n    postId\n    title\n    content\n    user {\n      userId\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Users to Posts Relationship in DDN YAML\nDESCRIPTION: This YAML snippet defines a relationship from Users to Posts models in DDN. It specifies the relationship name, source and target models, and field mappings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: posts\n  sourceType: Users\n  target:\n    model:\n      name: Posts\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Filtering Date Values with Greater Than or Equal Operator\nDESCRIPTION: Example of using _gte operator to filter articles by publication date\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesPublishedAfterDate {\n  articles(\n    where: {published_on: {_gte: \"2018-01-01\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Customers Query\nDESCRIPTION: Expected JSON response from the GraphQL query showing customer data retrieved from Elasticsearch.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customers\": [\n      {\n        \"email\": \"john.doe@example.com\",\n        \"name\": \"John Doe\"\n      },\n      {\n        \"email\": \"jane.smith@example.com\",\n        \"name\": \"Jane Smith\"\n      },\n      {\n        \"email\": \"alice.j@example.com\",\n        \"name\": \"Alice Johnson\"\n      },\n      {\n        \"email\": \"bob.brown@example.com\",\n        \"name\": \"Bob Brown\"\n      },\n      {\n        \"email\": \"charlie.d@example.com\",\n        \"name\": \"Charlie Davis\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Native SQL Query for ClickHouse Connector\nDESCRIPTION: This SQL query selects all columns from the 'users' table in the 'default' schema where the 'name' column matches a provided parameter. It uses ClickHouse parameter syntax for the 'name' value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM \"default\".\"users\"\nWHERE \"users\".\"name\" = {name: String}\n```\n\n----------------------------------------\n\nTITLE: Adding Model to DDN in Shell\nDESCRIPTION: This command adds the newly created native mutation model to the DDN configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_pg update_post_titles_by_age\n```\n\n----------------------------------------\n\nTITLE: Defining Function Metadata - JSON\nDESCRIPTION: This snippet provides an example of how to specify function definitions in the configuration, detailing metadata like function name, argument signature, and associated comments to describe its functionality.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function_catalog\": \"PUBLIC\",\n  \"function_schema\": \"PUBLIC\",\n  \"function_name\": \"add\",\n  \"argument_signature\": \"(N NUMBER, M NUMBER)\",\n  \"data_type\": \"TABLE (N NUMBER, M NUMBER)\",\n  \"comment\": \"Adds two numbers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Plugin Configuration\nDESCRIPTION: JavaScript configuration file for the caching plugin that defines headers, Redis connection, OpenTelemetry settings, and cacheable queries with their TTL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/caching/how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Config = {\n  headers: {\n    \"hasura-m-auth\": \"zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ\",\n  },\n\n  redis_url: \"redis://redis:6379\",\n\n  otel_endpoint: process.env.GLOBALS_OTEL_EXPORTER_OTLP_ENDPOINT,\n  otel_headers: {},\n\n  queries_to_cache: [\n    {\n      query: ` query MyQuery {\n          customers {\n            firstName\n            lastName\n          }\n        }\n      `,\n      time_to_live: 600,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Field Comparison Filter Syntax in JSON\nDESCRIPTION: Illustrates the JSON structure for field comparison in filter expressions. It shows how to specify the field name, operator, and value for filtering.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/filters.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field_name\": {\n    \"$operator\": value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of DDN Connector Introspection\nDESCRIPTION: These examples demonstrate various ways to use the 'ddn connector introspect' command, including introspecting a specific connector, using a custom connector file path, and introspecting without updating the DataConnectorLink.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Introspect Connector my_db from Subgraph located at ./foo/subgraph.yaml and update DataConnectorLink\n ddn connector introspect my_db --subgraph ./foo/subgraph.yaml\n\n# Introspect Connector located at ./foo/my_db/connector.yaml\n ddn connector introspect --connector ./foo/my_db/connector.yaml\n\n# Introspect Connector my_db but do not update DataConnectorLink\n ddn connector introspect my_db --subgraph ./foo/subgraph.yaml --no-update-link\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query for Ranked Users\nDESCRIPTION: This GraphQL query retrieves users ranked by age, specifically for age 25, including their name, age, rank, and ID.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  usersRankedByAge(args: { age: 25 }) {\n    name\n    age\n    rank\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response JSON Data Structure\nDESCRIPTION: Example JSON response from a GraphQL users query, showing structured data with three user records containing id, name, and email fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"Alice\",\n      \"email\": \"alice@xyz.com\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Bob\",\n      \"email\": null\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Sam\",\n      \"email\": null\n    }\n    ]\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing a simple function connector in Python\nDESCRIPTION: This Python code defines a function connector using the 'hasura_ndc' library. It registers a query function 'shout_name' that takes a string as input and returns its uppercase version. The 'start' function from 'hasura_ndc' is used to initiate the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\n\nconnector = FunctionConnector()\n\n@connector.register_query\ndef shout_name(name: str) -> str:\n  return name.upper()\n\nif __name__ == \"__main__\":\n  start(connector)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reviews Aggregate Expressions\nDESCRIPTION: Defines aggregate expressions for Int4 and Reviews models, including average aggregation function mapping.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/aggregate-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: Int4_aggregate_exp\n  operand:\n    scalar:\n      aggregatedType: Int4\n      aggregationFunctions:\n        - name: avg\n          returnType: Numeric\n      dataConnectorAggregationFunctionMapping:\n        - dataConnectorName: my_connector\n          dataConnectorScalarType: int4\n          functionMapping:\n            avg:\n              name: avg\n  graphql:\n    selectTypeName: Int4_aggregate_fields\n\n---\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: Reviews_aggregate_exp\n  operand:\n    object:\n      aggregatedType: Reviews\n      aggregatableFields:\n        - fieldName: rating\n          aggregateExpression: Int4_aggregate_exp\n  graphql:\n    selectTypeName: Reviews_aggregate_fields\n  description: Aggregate over Reviews\n```\n\n----------------------------------------\n\nTITLE: Enhanced Object-to-Model Relationship with Description\nDESCRIPTION: Shows a complete relationship configuration between orders and customers, including a description field for documentation purposes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: customer\n  sourceType: orders\n  target:\n    model:\n      name: customers\n      subgraph: customers\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: customerId\n      target:\n        modelField:\n          - fieldName: customerId\n  description: The customer details for an order\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Credentials for Google Cloud Storage - YAML\nDESCRIPTION: This snippet illustrates how to configure access credentials for Google Cloud Storage using a service account credential in JSON format. It supports both inline values and file paths for credential management.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - type: gcs\n    projectId:\n      env: GOOGLE_PROJECT_ID\n    authentication:\n      type: credentials\n      # inline credentials\n      credentials:\n        value: '{\"type\": \"service_account\", ... }' # json string\n      # or a file path\n      # credentialsFile:\n      #   env: GOOGLE_STORAGE_CREDENTIALS_FILE\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics with GraphQL\nDESCRIPTION: Execute a GraphQL query to fetch Prometheus HTTP request metrics.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_REQUESTS_PER_SECOND {\n  prometheusHttpRequestsTotal(\n    args: { fn: [{ rate: \"1m\" }, { sum: [] }] }\n    where: { timestamp: { _gt: \"2025-03-26\" }, job: { _eq: \"prometheus\" } }\n  ) {\n    timestamp\n    value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving HTTP Headers in Go Lambda Function\nDESCRIPTION: Updates a 'hello' function in Go to receive HTTP request headers as part of the function arguments. The headers are passed as a map[string]string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype HelloArguments struct {\n  Headers map[string]string `json:\"headers,omitempty\"`\n  Name    string            `json:\"name\"`\n}\n\nfunc FunctionHello(ctx context.Context, state *types.State, arguments *HelloArguments) (string, error) {\n  log.Printf(\"request headers: %v\", arguments.Headers)\n  name := arguments.Name\n  if name == \"\" {\n    name = \"world\"\n  }\n  return \"hello \" + name, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Authorization Header in Execution Configuration in JSON\nDESCRIPTION: This JSON snippet demonstrates forwarding of headers during execution. It shows an endpoint referencing \"ANOTHER_GRAPHQL_ENDPOINT\" and specifies headers needed for the GraphQL API, particularly focusing on forwarding the \"Content-Type\" as JSON. Dependencies include environment configuration for the endpoint.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/graphql/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"execution\": {\n    \"endpoint\": {\n      \"valueFromEnv\": \"ANOTHER_GRAPHQL_ENDPOINT\"\n    },\n    \"headers\": {\n      \"Content-Type\": {\n        \"value\": \"application/json\"\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Array of Composite Type Column\nDESCRIPTION: Defines a column type that is an array of composite types in a table definition, combining both array and composite type specifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"type\": { \"arrayType\": { \"compositeType\": \"person_address\" } }\n```\n\n----------------------------------------\n\nTITLE: Sample Explain API Request with Album Query\nDESCRIPTION: Complete example of an Explain API request querying album tracks with variables and operation name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/explain HTTP/1.1\nContent-Type: application/json\n\n{\n  \"query\": \"query GetAlbumTracks($AlbumId: Int) {\\n  AlbumByID(AlbumId: $AlbumId) {\\n    Title\\n    Tracks {\\n      Name\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"AlbumId\": 1\n  },\n  \"operationName\": \"GetAlbumTracks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Objects with Post-Check in GraphQL (v2)\nDESCRIPTION: GraphQL mutation for inserting multiple objects into a table with a post-check for permissions. It takes an array of table objects and a boolean expression for post-check.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\nv2_insert_<table>(\n    objects: [<table-object>],\n    post_check: <boolexpr>\n)\n```\n\n----------------------------------------\n\nTITLE: Example Response from Cross-Subgraph Query in JSON\nDESCRIPTION: Example JSON response from the cross-subgraph query showing users and their related orders. This demonstrates how data from different subgraphs is combined in the API response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customers_users\": [\n      {\n        \"id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n        \"name\": \"Sean\",\n        \"orders\": [\n          {\n            \"id\": \"7ff13435-b590-4d6b-957f-f7fd39d4528a\",\n            \"createdAt\": \"2023-10-29T17:02:50.958076+00:00\",\n            \"status\": \"complete\"\n          }\n        ]\n      },\n      {\n        \"id\": \"82001336-65b7-11ed-b905-7fa26a16d198\",\n        \"name\": \"Rob\",\n        \"orders\": [\n          {\n            \"id\": \"9891596a-a732-4c1c-902c-1a112da48fec\",\n            \"createdAt\": \"2023-10-29T17:02:51.150084+00:00\",\n            \"status\": \"complete\"\n          }\n        ]\n      },\n      {\n        \"id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\",\n        \"name\": \"Marion\",\n        \"orders\": [\n          {\n            \"id\": \"85581445-752a-4aef-9684-b648eb5d5f42\",\n            \"createdAt\": \"2023-10-29T17:02:51.085229+00:00\",\n            \"status\": \"complete\"\n          }\n        ]\n      },\n      {\n        \"id\": \"8dea1160-65b7-11ed-b907-e3c5123cb650\",\n        \"name\": \"Sandeep\",\n        \"orders\": [\n          {\n            \"id\": \"c7406b75-6b24-41e4-9c5b-ff3feada9447\",\n            \"createdAt\": \"2023-10-29T17:02:50.889261+00:00\",\n            \"status\": \"processing\"\n          }\n        ]\n      },\n      {\n        \"id\": \"9bd9d300-65b7-11ed-b908-571fef22d2ba\",\n        \"name\": \"Abby\",\n        \"orders\": [\n          {\n            \"id\": \"98612470-1feb-4b91-88f7-9289d652ee87\",\n            \"createdAt\": \"2023-10-29T17:02:51.021317+00:00\",\n            \"status\": \"complete\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response with Relationship\nDESCRIPTION: JSON response showing the nested post and user data retrieved through the relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"postId\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"userId\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"postId\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"userId\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"postId\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"userId\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"postId\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"userId\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Users and Orders\nDESCRIPTION: Execute a GraphQL query to fetch users and their associated orders.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersAndOrders{\n  users {\n    id\n    name\n    email\n    orders {\n      id \n      created_at\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Connector - Shell\nDESCRIPTION: This snippet initializes a new PostgreSQL connector named 'my_postgres' within the DDN environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_postgres -i\n```\n\n----------------------------------------\n\nTITLE: Querying ClickHouse Table via GraphQL\nDESCRIPTION: Demonstrates a GraphQL query to fetch all fields from the 'comments' table. This query retrieves id, comment, user_id, and post_id for all entries in the table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  comments {\n    id\n    comment\n    user_id\n    post_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Format in Hasura JSON:API\nDESCRIPTION: Demonstrates the HTTP GET request format for sorting resources in Hasura's JSON:API implementation. It includes parameters for subgraph name, model name, and sorting fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/sorting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/<subgraph-name>/<model-name>?sort=<fields>\n```\n\n----------------------------------------\n\nTITLE: JWT Claims Configuration with JSON Paths and Default Value (YAML)\nDESCRIPTION: This YAML configuration extends the previous example by adding a `default` value for `x-hasura-user-id`. If the JSON path `/user/id` does not exist in the JWT, the specified default value is used.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclaimsConfig: \n  locations:\n    x-hasura-default-role: \n      path:\n        path: /hasura/all_roles/0\n    x-hasura-allowed-roles: \n      path:\n        path: /hasura/all_roles\n    x-hasura-user-id:\n      path:\n        path: /user/id\n        default: ujdh739kd\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Azure Blob Storage (Connection String)\nDESCRIPTION: This GraphQL query shows how to download a storage object from Azure Blob Storage using a connection string for authentication.  The `clientType` is set to `azblob`, and the `endpoint` contains the connection string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/dynamic-credentials.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n\"query DownloadStorageObjectAsText {\n  downloadStorageObjectAsText(\n    clientType: \\\"azblob\\\"\n    endpoint: \\\"AccountName=local;AccountKey=xxx;BlobEndpoint=default\\\"\n    name: \\\"people-1000.csv\\\"\n    bucket: \\\"default\\\"\n  ) {\n    data\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Fields Sorting in Hasura JSON:API\nDESCRIPTION: Demonstrates how to fetch articles sorted by created date in descending order and then by title in ascending order. Includes both the HTTP request and the JSON response format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/sorting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?sort=-created_at,title\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Articles\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"A First Article\",\n        \"created_at\": \"2023-01-02T12:00:00Z\"\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"title\": \"C Third Article\",\n        \"created_at\": \"2023-01-02T12:00:00Z\"\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"B Second Article\",\n        \"created_at\": \"2023-01-01T12:00:00Z\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elasticsearch Index as a Model in Hasura DDN\nDESCRIPTION: This command adds the 'transactions' index from Elasticsearch as a model in the Hasura DDN project, generating a new Hasura Metadata Language (HML) file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_es transactions\n```\n\n----------------------------------------\n\nTITLE: Executing Nested GraphQL Query with Relationships in Hasura DDN\nDESCRIPTION: This GraphQL query fetches posts along with their associated user details, demonstrating the use of relationships in Hasura DDN. It retrieves the id, title, and content of posts, as well as the id, name, and age of the associated user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  mydbPosts {\n    id\n    title\n    content\n    mydbUser {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Search Native Query in SQL\nDESCRIPTION: This SQL snippet defines a native query to compute the vector distance from a specified query vector for the 'products' table, facilitating vector searches through Hasura.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/vector-search.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\nid,\nvector <=> {{query_vector}} AS distance\nFROM products\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Federation in Hasura DDN\nDESCRIPTION: This YAML snippet demonstrates the configuration of a 'GraphqlConfig' file to enable Apollo Federation fields, allowing schema stitching in Apollo supergraph router. The key configuration is 'apolloFederation.enableRootFields' set to true, typically added in the 'supergraph/graphql-config.hml' file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napolloFederation:\n  enableRootFields: true\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with Hasura DDN CLI\nDESCRIPTION: Demonstrates the command used to build the entire supergraph with all its subgraphs and connectors using the Hasura DDN CLI. No additional arguments are needed for building all components collectively. This command outputs the necessary URLs to access the deployed connectors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/03-deploy-a-connector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Executing a Nested GraphQL Query with Relationships in Hasura DDN\nDESCRIPTION: This GraphQL query demonstrates how to fetch posts with their associated user data through a relationship. It retrieves the post details (ID, title, content) along with the related user information (ID, name, age).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    postId\n    title\n    content\n    user {\n      userId\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Configuration in YAML\nDESCRIPTION: This YAML snippet configures an API key security scheme. It defines the type as `apiKey`, specifies the environment variable `API_KEY` for the API key value, sets the location of the key as a header, and names the header `api_key`.  The environment variable `API_KEY` will be used at runtime.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecuritySchemes:\n  api_key:\n    type: apiKey\n    value:\n      env: API_KEY # the constant case of api_key\n    in: header\n    name: api_key\n```\n\n----------------------------------------\n\nTITLE: Filtering with _not Operator in Hasura GraphQL\nDESCRIPTION: This snippet demonstrates the use of the '_not' operator to filter authors who do not have published articles. The query relies on Hasura's boolean logic capabilities. It outputs authors whose articles are unpublished or who have no articles. Dependencies include a Hasura GraphQL setup with the relevant schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/boolean-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  authors(\n    where: {\n      _not: {\n        articles: { is_published: {_eq: true} }\n      }\n    }) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords in Python\nDESCRIPTION: Implement a function to hash passwords using bcrypt in Python. This function uses a FunctionConnector to register the mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nimport bcrypt\n\nconnector = FunctionConnector()\n\n@connector.register_mutation\nasync def hash_password(password: str) -> str:\n    salt = bcrypt.gensalt()\n    hashedPassword = bcrypt.hashpw(password.encode(\"utf-8\"), salt).decode(\"utf-8\")\n\n    # Add your own logic here to hit your Hasura endpoint and perform an insertion\n\n    return hashedPassword\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Articles by Author ID Query\nDESCRIPTION: Query to fetch articles using a specific author_id as a model argument.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/simple-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesByAuthor {\n  articles_by_author_id(author_id: \"2\") {\n      article_id\n      title\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating MySQL Table\nDESCRIPTION: Create a 'users' table in MySQL and insert sample data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the table\nCREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  age INT NOT NULL\n);\n\n-- Insert some data\nINSERT INTO users (name, age) VALUES ('Alice', 25);\nINSERT INTO users (name, age) VALUES ('Bob', 30);\nINSERT INTO users (name, age) VALUES ('Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection String\nDESCRIPTION: The connection string for connecting to a local MongoDB instance running in Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://local.hasura.dev:27017/my_database\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Object JSON\nDESCRIPTION: This snippet defines a JSON object for configuring the Hasura Oracle connector. It includes fields like jdbcUrl, jdbcProperties, schemas, tables, functions, and nativeQueries. The configuration is static during the lifetime of a data connector service instance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"\",\n  \"jdbcProperties\": {},\n  \"schemas\": [],\n  \"tables\": [],\n  \"functions\": [],\n  \"nativeQueries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an ObjectType in Hasura\nDESCRIPTION: Comprehensive example of an object type definition in Hasura DDN. This defines a 'CartItems' object with multiple fields, GraphQL naming configuration, and mappings to a PostgreSQL database connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: CartItems\n  fields:\n    - name: cartId\n      type: Uuid!\n    - name: createdAt\n      type: Timestamptz\n    - name: id\n      type: Uuid!\n    - name: productId\n      type: Uuid!\n    - name: quantity\n      type: Int4!\n    - name: updatedAt\n      type: Timestamptz\n  graphql:\n    typeName: CartItems\n    inputTypeName: CartItemsInput\n  dataConnectorTypeMapping:\n    - dataConnectorName: my_pg\n      dataConnectorObjectType: cart_items\n      fieldMapping:\n        cartId:\n          column:\n            name: cart_id\n        createdAt:\n          column:\n            name: created_at\n        id:\n          column:\n            name: id\n        productId:\n          column:\n            name: product_id\n        quantity:\n          column:\n            name: quantity\n        updatedAt:\n          column:\n            name: updated_at\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-Null Values in GraphQL Queries\nDESCRIPTION: This GraphQL query fetches articles that have a non-null value in the published_on field using the _is_null operator set to false. The query returns the id, title, and published_on fields for articles that meet this criteria.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery PublishedArticles {\n  articles(\n    where: {published_on: {_is_null: false}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"title\": \"sit amet\",\n        \"published_on\": \"2017-08-09\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"a nibh\",\n        \"published_on\": \"2018-06-10\"\n      },\n      {\n        \"id\": 3,\n        \"title\": \"amet justo morbi\",\n        \"published_on\": \"2017-05-26\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"vestibulum ac est\",\n        \"published_on\": \"2017-03-05\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Authentication in Hasura AuthConfig\nDESCRIPTION: An example of AuthConfig using webhook mode for authentication, specifying the webhook URL, HTTP method, and custom header configuration to forward or add headers to the webhook request.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    webhook:\n      url:\n        value: http://auth_hook:3050/validate-request\n      method: POST\n      customHeadersConfig:\n        body:\n          headers:\n            forward:\n              - authorization\n              - content-type\n        headers:\n          additional:\n            user-agent: \"Hasura DDN\"\n```\n\n----------------------------------------\n\nTITLE: Main Express Application for Hasura Plugin\nDESCRIPTION: TypeScript implementation of the main Express application file that sets up routes and middleware for the Hasura plugin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport express, { Request, Response, NextFunction } from \"express\";\nimport preparse from \"./routes/pre-parse\";\nimport preresponse from \"./routes/pre-response\";\n\nconst app = express();\nconst PORT = process.env.PORT || 4000;\n\n// Middleware to check for hasura-m-auth header\nconst checkHasuraMAuth = (req: Request, res: Response, next: NextFunction): void => {\n  const authHeader = req.header(\"hasura-m-auth\");\n  if (authHeader === \"super-secret-key\") {\n    next();\n  } else {\n    res.status(401).json({ error: \"Unauthorized: Invalid or missing header\" });\n  }\n};\n\n// Middleware\napp.use(express.json());\napp.use(checkHasuraMAuth);\n\n// Apply the middleware selectively for specific routes\napp.use(\"/pre-parse\", preparse);\napp.use(\"/pre-response\", preresponse);\n\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Connector with Local File System\nDESCRIPTION: YAML configuration for the storage connector to use the local file system with specified limits for uploads and downloads.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/hasura/ndc-storage/main/jsonschema/configuration.schema.json\nclients:\n  - id: fs\n    type: fs\n    defaultDirectory:\n      value: /home/nonroot/data\nconcurrency:\n  query: 5\n  mutation: 1\nruntime:\n  maxDownloadSizeMBs: 20\n  maxUploadSizeMBs: 20\ngenerator:\n  promptqlCompatible: false\n```\n\n----------------------------------------\n\nTITLE: Full Mutual TLS Configuration in YAML\nDESCRIPTION: This YAML snippet provides a complete configuration example for Mutual TLS, including options for file paths and base64-encoded strings for certificates, keys, and CA certificates. It also includes optional configurations for skipping server certificate verification, including system CA certificates, server name, and minimum/maximum TLS versions. All configurations values come from environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  servers:\n    - url:\n        env: PET_STORE_URL\n  securitySchemes:\n    mtls:\n      type: mutualTLS\n  tls:\n    # Path to the TLS cert to use for TLS required connections.\n    certFile:\n      env: PET_STORE_CERT_FILE\n    # Alternative to cert_file. Provide the certificate contents as a base64-encoded string instead of a filepath.\n    certPem:\n      env: PET_STORE_CERT_PEM\n    # Path to the TLS key to use for TLS required connections.\n    keyFile:\n      env: PET_STORE_KEY_FILE\n    # Alternative to key_file. Provide the key contents as a base64-encoded string instead of a filepath.\n    keyPem:\n      env: PET_STORE_KEY_PEM\n    # Path to the CA cert.\n    caFile:\n      env: PET_STORE_CA_FILE\n    # Alternative to ca_file. Provide the CA cert contents as a base64-encoded string instead of a filepath.\n    caPem:\n      env: PET_STORE_CA_PEM\n    # Additionally you can configure TLS to be enabled but skip verifying the server's certificate chain (optional).\n    insecureSkipVerify:\n      env: PET_STORE_INSECURE_SKIP_VERIFY\n      value: false\n    # Whether to load the system certificate authorities pool alongside the certificate authority (optional).\n    includeSystemCACertsPool:\n      env: PET_STORE_INCLUDE_SYSTEM_CA_CERT_POOL\n      value: false\n\n    ## ServerName requested by client for virtual hosting (optional).\n    serverName:\n      env: PET_STORE_SERVER_NAME\n\n    ## Minimum acceptable TLS version (optional).\n    minVersion: \"1.0\"\n\n    ## Maximum acceptable TLS version (optional).\n    maxVersion: \"1.3\"\n\n    ## Explicit cipher suites can be set. If left blank, a safe default list is used (optional).\n    # cipherSuites:\n    #   - TLS_AES_128_GCM_SHA256\n```\n\n----------------------------------------\n\nTITLE: Filtering Boolean Values with Equality Operator\nDESCRIPTION: Example of using _eq operator to filter articles by publication status\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery UnpublishedArticles {\n  articles(\n    where: {is_published: {_eq: false}}\n  ) {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Posts Table Schema\nDESCRIPTION: This JSON schema defines the structure for a 'posts' table in BigQuery with user_id, post_id, title, and content fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"user_id\",\n    \"type\": \"INTEGER\",\n    \"mode\": \"REQUIRED\"\n  },\n  {\n    \"name\": \"post_id\",\n    \"type\": \"INTEGER\",\n    \"mode\": \"REQUIRED\"\n  },\n  {\n    \"name\": \"title\",\n    \"type\": \"STRING\",\n    \"mode\": \"NULLABLE\",\n    \"maxLength\": \"255\"\n  },\n  {\n    \"name\": \"content\",\n    \"type\": \"STRING\",\n    \"mode\": \"NULLABLE\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout and Retry in YAML\nDESCRIPTION: This YAML configuration snippet specifies the global timeout and retry strategy for requests associated with each file. It includes parameters for timeout duration, retry attempts, and the HTTP status codes that will trigger retries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - file: swagger.json\n    spec: oas2\n    timeout:\n      # The time in seconds to wait before timeout\n      value: 30\n    retry:\n      times:\n        value: 1\n      delay:\n        # The default delay between each retry in milliseconds.\n        # The connector prefers the Retry-After header in the response if exists\n        value: 500\n      httpStatus: [429, 500, 502, 503]\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Region Routing in Hasura DDN\nDESCRIPTION: This snippet demonstrates how to configure a data connector to deploy to a specific region in Hasura DDN. The `regionConfiguration` property within the `Connector` object is used to specify the desired region and mode (e.g., ReadWrite). Specifying a region ensures the connector deploys to that region; otherwise, it will be randomly deployed to one of the supported regions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/region-routing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: my_connector\n  subgraph: my_subgraph\n  source: hasura/connector_name:<version>\n  context: .\n  #highlight-start\n  regionConfiguration:\n    - region: <region from the list below>\n      mode: ReadWrite\n      envMapping:\n        <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n          fromEnv: <CONNECTOR_ENV_VAR> # e.g. Env Var set as DB read write URL\n  #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Users Table\nDESCRIPTION: SQL command to create a 'users' table in the Snowflake database with id, name, and age columns.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id INT AUTOINCREMENT START 1 INCREMENT 1 PRIMARY KEY,\n  name STRING NOT NULL,\n  age INT NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelPermissions for User-Specific Data Access in YAML\nDESCRIPTION: This snippet shows how to set up ModelPermissions to allow users with the 'user' role to access only their own data from a Users model. It uses a session variable to match the user's ID with the 'id' field in the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/1-simple-user-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Users\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Movie Vector Search GraphQL Query\nDESCRIPTION: GraphQL query example demonstrating how to search movies using vector similarity with genre filters, year range constraints, and result limits.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/vector-search.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  moviesSearch(\n    ninGenres: [\"Drama\", \"Western\", \"Crime\"]\n    inGenres: [\"Action\", \"Adventure\", \"Family\"]\n    gteYear: 1960\n    lteYear: 2000\n    numCandidates: 200\n    limit: 2\n  ) {\n    genres\n    plot\n    score\n    year\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring POST Authentication Webhook in YAML\nDESCRIPTION: Example configuration for a POST authentication webhook, including URL, custom headers, and body configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nurl:\n  value: http://auth_hook:3050/validate-request\ncustomHeadersConfig:\n  headers:\n    forward: '*'\n    additional:\n      user-agent: hasura-ddn\n  body:\n    headers:\n      forward:\n        - Authorization\n      additional: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Types in Hasura Data Connector Metadata (YAML)\nDESCRIPTION: This snippet demonstrates how to define scalar types in the metadata, including their comparison operators and aggregation functions. It shows the structure for the 'bool' type as an example.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n\"scalar\":\n  {\n    \"bool\":\n      {\n        // The name that appears in the data connector schema \"typeName\": \"bool\",\n        \"schemaName\": \"pg_catalog\",\n        \"description\": null,\n        \"aggregateFunctions\":\n          {\n            \"bool_and\": { \"returnType\": \"bool\" },\n            \"bool_or\": { \"returnType\": \"bool\" },\n            \"every\": { \"returnType\": \"bool\" },\n          },\n        \"comparisonOperators\":\n          {\n            \"_eq\":\n              {\n                // The name that appears in the data connector schema \"operatorName\": \"=\",\n                // Name of the operator in the database \"operatorKind\": \"equal\",\n                // The canonical equality operator (for relationships) \"argumentType\": \"char\",\n                \"isInfix\":\n                  true // Indication of whether the operator is syntactically a binary // infix operator or a binary\n                  prefix-function,\n              },\n            \"_gt\":\n              {\n                \"operatorName\": \">\",\n                \"operatorKind\": \"custom\",\n                // A non-equality operator \"argumentType\": \"char\",\n                \"isInfix\": true,\n              },\n            ...,\n          },\n        \"typeRepresentation\": \"boolean\",\n      },\n  }\n```\n\n----------------------------------------\n\nTITLE: Model Permissions with Direct Filter in YAML\nDESCRIPTION: Example of model permissions with direct field comparison filter for role-based access.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: author_id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table in PostgreSQL\nDESCRIPTION: Creates a 'posts' table in PostgreSQL and inserts sample data with foreign key relationship to users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the posts table\nCREATE TABLE posts (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Insert some seed data\nINSERT INTO posts (user_id, title, content) VALUES\n  (1, 'My First Post', 'This is Alice''s first post.'),\n  (1, 'Another Post', 'Alice writes again!'),\n  (2, 'Bob''s Post', 'Bob shares his thoughts.'),\n  (3, 'Hello World', 'Charlie joins the conversation.');\n```\n\n----------------------------------------\n\nTITLE: Serving DDN Build and Launching Console\nDESCRIPTION: These commands start the Docker container for the DDN build and launch the local console interface.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Defining RelationshipType in GraphQL Schema\nDESCRIPTION: Specifies the type of relationship between objects in a GraphQL schema. It can be either 'Object' for selecting one related object or 'Array' for selecting multiple related objects from the target.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Value | Description |\n|-----|-----|\n| `Object` | Select one related object from the target. |\n| `Array` | Select multiple related objects from the target. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship in Hasura Metadata Language\nDESCRIPTION: YAML configuration for creating a relationship between Posts and Users models in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: Posts\n  target:\n    model:\n      name: Users\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for S3-compatible Storage\nDESCRIPTION: This GraphQL query demonstrates how to download a storage object from an S3-compatible service using dynamic credentials.  It includes the `clientType`, `endpoint`, `accessKeyId`, and `secretAccessKey` as arguments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/dynamic-credentials.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"query DownloadStorageObjectAsText {\n  downloadStorageObjectAsText(\n    clientType: \\\"s3\\\"\n    endpoint: \\\"http://minio:9000\\\"\n    accessKeyId: \\\"test-key\\\"\n    secretAccessKey: \\\"randomsecret\\\"\n    name: \\\"people-1000.csv\\\"\n    bucket: \\\"default\\\"\n  ) {\n    data\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Collection to Fields in JSON\nDESCRIPTION: Defines the 'object_fields' property mapping collection names to their respective fields. These fields correspond to the attributes available in each collection, providing necessary information for building queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"multivector_collection\": [\"name\", \"type\", \"id\", \"score\", \"vector\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Subgraph Relationship in HML\nDESCRIPTION: Adds a relationship between the Users model in the customers subgraph and the Orders model in the billing subgraph. This creates a connection between data across different subgraphs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: orders\n  sourceType: Users\n  target:\n    model:\n      subgraph: billing\n      name: Orders\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Vectors in JSON\nDESCRIPTION: The 'collection_vectors' property indicates whether collections support multi-vector search using a boolean. It is essential for collections requiring enhanced search capabilities.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraforming_plans\": true,\n  \"multivector_collection\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Google API Python Client to Requirements\nDESCRIPTION: Instruction to add the Google API Python Client package to the requirements.txt file for a Python lambda connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngoogle-api-python-client==v2.146.0\n```\n\n----------------------------------------\n\nTITLE: Build Supergraph API and Start Docker Container\nDESCRIPTION: These commands build the supergraph API using the `ddn` CLI and then start the Docker container to serve the API. `ddn supergraph build local` builds the supergraph based on the local configuration. `ddn run docker-start` starts the Docker container that serves the newly built supergraph API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn supergraph build local\\nddn run docker-start\"\n```\n\n----------------------------------------\n\nTITLE: Defining a ScalarType in Hasura\nDESCRIPTION: Example of a scalar type definition in Hasura DDN. This defines a custom scalar type named 'Uuid' that will be exposed in the GraphQL schema with the same name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ScalarType\nversion: v1\ndefinition:\n  name: Uuid\n  graphql:\n    typeName: Uuid\n```\n\n----------------------------------------\n\nTITLE: Filtering with In List Operator\nDESCRIPTION: Example of using _in operator to filter articles by specific rating values\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesRating1or3or5 {\n  articles(\n    where: {rating: {_in: [1,3,5]}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Relationship\nDESCRIPTION: GraphQL query that utilizes the relationship between Posts and Users to retrieve nested data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    postId\n    title\n    content\n    user {\n      userId\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Posts with User Relationship\nDESCRIPTION: This JSON snippet shows the expected response format when querying posts with user relationships. It includes post details along with nested user information for each post.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"id\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Credentials for Other S3-Compatible Services - YAML\nDESCRIPTION: This configuration allows setting up static credentials for other S3-compatible services. It includes the endpoint URL that needs to be specified alongside the credentials to ensure proper access.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - id: minio\n    type: s3\n    endpoint:\n      env: STORAGE_ENDPOINT\n    defaultBucket:\n      env: DEFAULT_BUCKET\n    authentication:\n      type: static\n      accessKeyId:\n        env: ACCESS_KEY_ID\n      secretAccessKey:\n        env: SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample GraphQL query to fetch user data from the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a cloud build\nDESCRIPTION: This command creates a build configuration for the cloud project and generates required artifacts for the v3-engine deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --self-hosted-data-plane --output-dir build-cloud --project <ddn-project-name> --out json\n```\n\n----------------------------------------\n\nTITLE: Updating Connection String in Environment Variables\nDESCRIPTION: The provided environment variable example illustrates updating a connection string for a cloud-hosted database. This is critical for ensuring the deployed API connects to the correct data source when the local and cloud environments differ. The parameter MY_SUBGRAPH_MY_PG_CONNECTION_URI must be adjusted to reflect the accurate database URI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/01-create-a-project.mdx#2025-04-17_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nMY_SUBGRAPH_MY_PG_CONNECTION_URI=\"postgresql://read_only_user:readonlyuser@35.236.11.122:5432/v3-docs-sample-app\"\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Structure for Trino Connector\nDESCRIPTION: The main configuration object structure for the Trino connector, showing all top-level fields including jdbcUrl, jdbcProperties, schemas, tables, functions, and nativeQueries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"\",\n  \"jdbcProperties\": {},\n  \"schemas\": [],\n  \"tables\": [],\n  \"functions\": [],\n  \"nativeQueries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Comments Query\nDESCRIPTION: This JSON object represents the expected response from the GraphQL query. It contains an array of comment objects, each with comment_id, comment text, user_id, and post_id fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comments\": [\n      {\n        \"comment_id\": 1,\n        \"comment\": \"Great post! Really enjoyed reading this.\",\n        \"user_id\": 1,\n        \"post_id\": 2\n      },\n      {\n        \"comment_id\": 2,\n        \"comment\": \"Thanks for sharing your thoughts!\",\n        \"user_id\": 2,\n        \"post_id\": 1\n      },\n      {\n        \"comment_id\": 3,\n        \"comment\": \"Interesting perspective.\",\n        \"user_id\": 3,\n        \"post_id\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Configuration in YAML\nDESCRIPTION: This YAML snippet configures Basic Authentication. It sets the `type` to `basic` and specifies the `Authorization` header. It also defines environment variables `PET_STORE_USERNAME` and `PET_STORE_PASSWORD` for the username and password, respectively. These environment variables will be used during runtime.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecuritySchemes:\n  basic:\n    type: basic\n    header: Authorization\n    username:\n      value: PET_STORE_USERNAME\n    password:\n      value: PET_STORE_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura DDN AuthConfig for JWT Validation with AWS Cognito (YAML)\nDESCRIPTION: This YAML configuration sets up the AuthConfig object for Hasura DDN to use JWT mode with AWS Cognito. It specifies the claims format, namespace location, and the JWKs URL for token validation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/2-aws-cognito.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: StringifiedJson\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        jwkFromUrl: \"https://cognito-idp.<your_region>.amazonaws.com/<your_region>_<your_user_pool_id>.well-known/jwks.json\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with User Relationship in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch posts along with related user information. It includes nested fields to retrieve user details for each post.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n    user {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Pagination in GraphQL\nDESCRIPTION: Illustrates how to implement pagination in nested objects by fetching authors and limiting their associated articles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsAndArticles {\n  authors {\n    id\n    name\n    articles (\n      limit: 2\n      offset: 0\n    ) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pre-parse Hook Response Flow in Mermaid\nDESCRIPTION: This diagram illustrates the sequence of events when a pre-parse hook returns a response, user error, or internal error, stopping further execution.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Initial as \"Initial Request\"\n    participant PreParseHook1 as \"Pre-parse Hook 1\"\n    participant PreParseHook2 as \"Pre-parse Hook 2\"\n    participant QueryParsingAndPlanning as \"Query Parsing and Planning\"\n\n    Client->>Initial: Send Request\n    Initial->>PreParseHook1: Forward to Pre-parse Hook 1\n    PreParseHook1-->>Initial: Response from Hook 1\n    Initial-->>Client: Return Response (Query not executed)\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Fields in GraphQL Queries\nDESCRIPTION: Fetches articles sorted by both the author's ID and name in descending order. This demonstrates how to sort by multiple fields from a related object.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/sorting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesSortedByAuthor {\n  articles (\n    order_by: {author: {id: Desc, name: Desc}}\n  ) {\n    id\n    rating\n    published_on\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding Turso Database\nDESCRIPTION: cURL command to create users table and seed initial data in Turso database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -X POST 'https://<db-name>-<your-username>.turso.io/v2/pipeline' \\\n    -H 'Authorization: Bearer <auth-token>' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"requests\": [\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, age INTEGER NOT NULL)\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO users (name, age) VALUES (\\\"Alice\\\", 25)\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO users (name, age) VALUES (\\\"Bob\\\", 30)\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO users (name, age) VALUES (\\\"Charlie\\\", 35)\"\n          }\n        },\n        {\n          \"type\": \"close\"\n        }\n      ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Oracle Connector\nDESCRIPTION: Command to initialize a new Oracle connector in the project with interactive prompts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_oracle -i\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Connection Object in MySQL Connector\nDESCRIPTION: Defines the core configuration object for the Hasura MySQL connector, including connection URL and properties. This is the primary structure for setting up database connectivity.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"\",\n  \"jdbcProperties\": {},\n  \"schemas\": [],\n  \"tables\": [],\n  \"functions\": [],\n  \"nativeQueries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Subgraph Relationship Definition\nDESCRIPTION: YAML configuration defining a relationship between models across different subgraphs, specifically linking Users to Orders in the billing subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: orders\n  sourceType: Users\n  target:\n    model:\n      subgraph: billing\n      name: Orders\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function in TypeScript Lambda Data Connector\nDESCRIPTION: This code snippet defines a 'shoutName' function in TypeScript that converts a given name to uppercase.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport function shoutName(name: string) {\n  return `${name.toUpperCase()}`;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: The resulting GraphQL query structure for the Hello command showing how to pass the name parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello(name: \"Hasura\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project\nDESCRIPTION: Commands to create a new directory and initialize a Node.js project with necessary dependencies.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hasura-webhook-auth\ncd hasura-webhook-auth\nnpm init -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Generating Metadata for DDN Project\nDESCRIPTION: Generates metadata files for models, commands, and relationships based on the introspected data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn model add <connector_name> '*'\nddn command add <connector_name> '*'\nddn relationship add <connector_name> '*'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection String for Sample Database\nDESCRIPTION: PostgreSQL connection string for accessing the sample database. This connection string is used by the PostgreSQL connector to connect to the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://read_only_user:readonlyuser@35.236.11.122:5432/v3-docs-sample-app\n```\n\n----------------------------------------\n\nTITLE: Hasura Lifecycle Plugin Configuration\nDESCRIPTION: YAML configuration for setting up pre-parse and pre-response lifecycle hooks in Hasura to integrate with the caching plugin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/caching/how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: parse\n  name: cache_get_test\n  url:\n    valueFromEnv: HASURA_CACHING_PRE_PARSE_URL\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ\n      rawRequest:\n        query: {}\n        variables: {}\n---\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: response\n  name: cache_set_test\n  url:\n    valueFromEnv: HASURA_CACHING_PRE_RESPONSE_URL\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: ModelPermissions Configuration\nDESCRIPTION: YAML configuration for defining model-level permissions and access controls.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Orders\n  permissions:\n    - role: admin\n      select:\n        filter: null\n        allowSubscriptions: true\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: userId\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Object Types Configuration Example for Turso Connector\nDESCRIPTION: Illustrates the detailed type information structure for fields in a collection, specifying the exact data type for each field in the 'users' table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/turso/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"users\": {\n    \"fields\": {\n      \"id\": {\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"Int\"\n        }\n      },\n      \"name\": {\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"String\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Ingress for v3-engine build\nDESCRIPTION: This YAML manifest creates a Kubernetes Ingress resource for a specific v3-engine build. It uses nginx-ingress for routing and cert-manager for TLS certificate provisioning with Let's Encrypt.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    certmanager.k8s.io/cluster-issuer: letsencrypt-prod\n  labels:\n    app: v3-engine-<build_version>\n  name: v3-engine-<build_version>\n  namespace: <namespace>\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: <domain>\n    http:\n      paths:\n      - backend:\n          service:\n            name: <v3-engine-helm-release-name>-v3-engine\n            port:\n              number: 3000\n        path: /\n        pathType: ImplementationSpecific\n  tls:\n  - hosts:\n    - <domain>\n    secretName: <domain>-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Example of Full Configuration - YAML Format\nDESCRIPTION: This snippet provides an example of a complete `configuration.json` file, including various settings like connection URI, metadata, and introspection options. It showcases the structure and key parameters that configure how the Hasura PostgreSQL connector interacts with the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"version\": \"5\",\n  \"$schema\": \"./schema.json\",\n  \"connectionSettings\":\n    {\n      \"connectionUri\": { \"variable\": \"CONNECTION_URI\" },\n      \"isolationLevel\": \"ReadCommitted\",\n      \"poolSettings\":\n        {\n          \"maxConnections\": 50,\n          \"poolTimeout\": 30,\n          \"idleTimeout\": 180,\n          \"connectionLifetime\": 600,\n          \"checkConnectionAfterIdle\": 60\n        }\n    },\n  \"mutationsVersion\": null,\n  \"metadata\":\n    {\n      \"tables\": {},\n      \"nativeOperations\": { \"queries\": {}, \"mutations\": {} },\n      \"types\": { \"scalar\": {}, \"composite\": {} }\n    },\n  \"introspectionOptions\":\n    {\n      \"excludedSchemas\":\n        [\"information_schema\", \"pg_catalog\", \"tiger\", \"crdb_internal\", \"columnar\", \"columnar_internal\"],\n      \"unqualifiedSchemasForTables\": [\"public\"],\n      \"unqualifiedSchemasForTypesAndProcedures\": [\"public\", \"pg_catalog\", \"tiger\"],\n      \"comparisonOperatorMapping\":\n        [\n          { \"operatorName\": \"=\", \"exposedName\": \"_eq\", \"operatorKind\": \"equal\" },\n          { \"operatorName\": \"<=\", \"exposedName\": \"_lte\", \"operatorKind\": \"custom\" }\n        ],\n      \"introspectPrefixFunctionComparisonOperators\": [\"box_above\", \"box_below\"],\n      \"typeRepresentations\": { \"bit\": \"string\", \"bool\": \"boolean\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Query with JSON Aggregation and Lateral Joins\nDESCRIPTION: A nested SQL query that performs JSON aggregation on album data using lateral joins and variable tables. The query includes coalescing to handle null values and custom type casting for variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN\nSELECT\n  coalesce(json_agg(\"%5_universe_agg\".\"universe\"), '[]') AS \"universe\"\nFROM\n  (\n    SELECT\n      row_to_json(\"%2_universe\") AS \"universe\"\n    FROM\n      json_to_recordset(cast($1 as json)) AS \"%0_%variables_table\"(\"%variable_order\" int)\n      CROSS JOIN LATERAL (\n        SELECT\n          *\n        FROM\n          (\n            SELECT\n              coalesce(json_agg(row_to_json(\"%3_rows\")), '[]') AS \"rows\"\n            FROM\n              (\n                SELECT\n                  \"%1_Album\".\"AlbumId\" AS \"AlbumId\"\n                FROM\n                  \"public\".\"Album\" AS \"%1_Album\"\n                WHERE\n                  (\n                    \"%1_Album\".\"AlbumId\" = cast(\"%0_%variables_table\".\"$AlbumId\" as int4)\n                  )\n              ) AS \"%3_rows\"\n          ) AS \"%3_rows\"\n      ) AS \"%2_universe\"\n    ORDER BY\n      \"%0_%variables_table\".\"%variable_order\" ASC\n  ) AS \"%5_universe_agg\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3-Compatible Storage Environment Variables in Hasura DDN\nDESCRIPTION: Environment variables needed for connecting to AWS S3 or S3-compatible storage services in Hasura DDN. Includes authentication credentials, endpoint URL, and default bucket configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV                 | Example                                    | Description                                              |\n| ------------------- | ------------------------------------------ | -------------------------------------------------------- |\n| `ACCESS_KEY_ID`     | `AKIAIOSFODNN7EXAMPLE`                     | Your AWS access key ID used to authenticate with S3.     |\n| `SECRET_ACCESS_KEY` | `wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY` | Your AWS secret access key used to authenticate with S3. |\n| `STORAGE_ENDPOINT`  | `https://s3.amazonaws.com`                 | The S3 service endpoint URL.                             |\n| `DEFAULT_BUCKET`    | `my-app-bucket`                            | The default S3 bucket name where files will be stored.   |\n```\n\n----------------------------------------\n\nTITLE: Model Field Deprecation in YAML\nDESCRIPTION: Shows how to configure field deprecation in a Hasura Model definition using YAML, including the deprecation of a selectCar query in favor of selectCarById.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/versioning.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: V1\ndefinition:\n  name: Cars\n  objectType: Car\n  orderableFields:\n    - Id\n  graphql:\n    selectUniques:\n      - queryRootField: selectCar\n        uniqueIdentifier:\n          - make\n          - model\n        deprecated:\n          reason: Use selectCarById instead\n      - queryRootField: selectCarById\n        uniqueIdentifier:\n          - Id\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  selectCar(make: String!, model: String): Car @deprecated(reason: \"use selectCarById instead\")\n  selectCarById(Id: ID!): Car\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Permissions in YAML\nDESCRIPTION: Example demonstrating type permissions configuration with role-based field access control.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: article\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n          - title\n    - role: user\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n```\n\n----------------------------------------\n\nTITLE: Login and Project Creation Commands\nDESCRIPTION: Commands to authenticate with Hasura Cloud and create a new DDN project on a specific data plane with a chosen plan.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Perform a ddn auth login using your personal Hasura Cloud account\nddn auth login\n\n# Create a project\nddn project create --data-plane-id <data-plane-id> --plan <plan-name>\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Development Console\nDESCRIPTION: Launches the DDN development console in local mode. This console provides an interface for interacting with the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying PostgreSQL Connector with DDN CLI\nDESCRIPTION: This command builds and deploys a PostgreSQL connector on Hasura DDN using the DDN CLI tool. It requires specifying the path to the connector's configuration file with the `--connector` argument. After running the command, the CLI returns read and write URLs for the deployed connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/postgreSQL/_deployment-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_pg/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Prefixes in YAML\nDESCRIPTION: Configuration example showing how to set custom prefixes for GraphQL root fields and type names in a subgraph.yaml file. This helps prevent naming collisions between different subgraphs in a Hasura DDN setup.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/subgraph-prefixing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: my_subgraph\n  generator:\n    rootPath: .\n    graphqlRootFieldPrefix: my_subgraph_\n    graphqlTypeNamePrefix: My_subgraph_\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Azure Blob Storage (Shared Key)\nDESCRIPTION: This GraphQL query illustrates how to download a storage object from Azure Blob Storage using a shared key for authentication. It includes the `clientType` as `azblob`, `endpoint`, `accessKeyId` (account name), and `secretAccessKey` (account key).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/dynamic-credentials.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"query DownloadStorageObjectAsText {\n  downloadStorageObjectAsText(\n    clientType: \\\"azblob\\\"\n    endpoint: \\\"https://local.hasura.dev:10000\\\"\n    accessKeyId: \\\"local\\\"\n    secretAccessKey: \\\"xxxx\\\"\n    name: \\\"people-1000.csv\\\"\n    bucket: \\\"default\\\"\n  ) {\n    data\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Standard Response Format Example\nDESCRIPTION: Example of the standard JSON:API response format showing user data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"User\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connection URI with Environment Variable - YAML\nDESCRIPTION: This example shows how to define the connection URI using an environment variable. This is a best practice for managing sensitive credentials. It allows you to avoid hardcoding secrets in your configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"connectionUri\": { \"variable\": \"CONNECTION_URI\" }\n```\n\n----------------------------------------\n\nTITLE: JWT Payload with JSON Claims Format for Hasura DDN\nDESCRIPTION: Example JWT payload using JSON format for Hasura claims within the specified namespace. This format is used when claimsFormat is set to 'Json' in the configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-allowed-roles\": [\"editor\", \"user\", \"mod\"],\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-user-id\": \"1234567890\",\n    \"x-hasura-org-id\": \"123\",\n    \"x-hasura-custom\": \"custom-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project\nDESCRIPTION: Command to create and scaffold a new Hasura DDN project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response for Posts\nDESCRIPTION: JSON response showing the post data retrieved from the MongoDB database through GraphQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"userId\": 1,\n        \"postId\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\"\n      },\n      {\n        \"userId\": 1,\n        \"postId\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\"\n      },\n      {\n        \"userId\": 2,\n        \"postId\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\"\n      },\n      {\n        \"userId\": 3,\n        \"postId\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Composite Types\nDESCRIPTION: SQL code for creating custom composite types in PostgreSQL that can be used in table definitions and queries. This example shows nested composition of types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE person_name AS\n  (\n    first_name text,\n    last_name text\n  );\n\nCREATE TYPE person_address AS\n  (\n    address_line_1 text,\n    address_line_2 text\n  );\n\nCREATE TYPE person AS\n  (\n    name person_name,\n    address person_address\n  );\n```\n\n----------------------------------------\n\nTITLE: Deleting a Row by Unique Constraint with Pre-Check in GraphQL (v2)\nDESCRIPTION: GraphQL mutation for deleting a single row from a table using a unique constraint. It includes parameters for the unique key columns and a pre-check for permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\nv2_delete_<table>_by_<column_and_...>(\n    key_<column1>: <value>,\n    key_<column2>: <value>,\n    ...,\n    pre_check: <boolexpr>\n)\n```\n\n----------------------------------------\n\nTITLE: JWT Key Configuration: JWK from URL (YAML)\nDESCRIPTION: This YAML snippet configures Hasura to fetch JWKs (JSON Web Keys) from a remote URL. The `jwkFromUrl` property specifies the URL where the JWKs are published.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nkey: \n  jwkFromUrl: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Posts with Authors Query in Hasura DDN\nDESCRIPTION: Example JSON response from the GraphQL query fetching posts with author details. This shows the structure of the data returned by the API, including nested user information for each post.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"postId\": \"1\",\n        \"title\": \"My First Post\",\n        \"content\": \"This is the first post for Alice.\",\n        \"user\": {\n          \"age\": \"25\",\n          \"name\": \"Alice\",\n          \"userId\": \"1\"\n        }\n      },\n      {\n        \"postId\": \"2\",\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"age\": \"25\",\n          \"name\": \"Alice\",\n          \"userId\": \"1\"\n        }\n      },\n      {\n        \"postId\": \"3\",\n        \"title\": \"Bobs Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"age\": \"30\",\n          \"name\": \"Bob\",\n          \"userId\": \"2\"\n        }\n      },\n      {\n        \"postId\": \"4\",\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"age\": \"35\",\n          \"name\": \"Charlie\",\n          \"userId\": \"3\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DataConnectorLink Add Command Examples\nDESCRIPTION: Examples showing how to add a DataConnectorLink to a specific Subgraph and configure its connector URL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add a DataConnectorLink to the Subgraph \"app\"\n ddn connector-link add mydb --subgraph ./app/subgraph.yaml\n\n# Add a DataConnectorLink to the Subgraph \"app\" and configure its connector URL as the Connector's local Docker service URL\n ddn connector-link add mydb --subgraph app/subgraph.yaml --configure-host http://local.hasura.dev:<port>\n```\n\n----------------------------------------\n\nTITLE: Defining a custom TypeScript function\nDESCRIPTION: This code defines a TypeScript function named `myCustomCode` that takes a string as input and returns a string. The `@readonly` tag indicates that this function should be exposed as a GraphQL query (NDC function), while omitting the tag would expose it as a GraphQL mutation (NDC procedure).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n\"/**\n * @readonly\n */\nexport function myCustomCode(myInput: string): string {\n  // Do something with the input\n  return \\\"My output\\\";\n}\"\n```\n\n----------------------------------------\n\nTITLE: Introspecting the connector\nDESCRIPTION: This bash command introspects the newly created connector 'my_ts', which is necessary to inspect its structure and ensure everything is set up correctly.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Transactions Index Mapping\nDESCRIPTION: Creates a new 'transactions' index in Elasticsearch with a complex schema for storing transaction data, including nested fields for transaction details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT \"http://localhost:9200/transactions/\" -u elastic:elastic -H 'Content-Type: application/json' -d'\n{\n  \"mappings\": {\n    \"properties\": {\n      \"transaction_id\": {\n        \"type\": \"keyword\"\n      },\n      \"timestamp\": {\n        \"type\": \"date\",\n        \"format\": \"strict_date_optional_time||epoch_millis\"\n      },\n      \"customer_id\": {\n        \"type\": \"keyword\"\n      },\n      \"transaction_details\": {\n        \"properties\": {\n          \"item_id\": {\n            \"type\": \"keyword\"\n          },\n          \"item_name\": {\n            \"type\": \"text\",\n            \"fields\": {\n              \"keyword\": {\n                \"type\": \"keyword\",\n                \"ignore_above\": 256\n              }\n            }\n          },\n          \"price\": {\n            \"type\": \"float\"\n          },\n          \"quantity\": {\n            \"type\": \"integer\"\n          },\n          \"currency\": {\n            \"type\": \"keyword\"\n          }\n        }\n      }\n    }\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Rules Configuration\nDESCRIPTION: Detailed rate limiting rules including Redis connection, time windows, role-based limits, and behavior configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/rate-limit/how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redis_url\": \"redis://redis:6379\",\n  \"rate_limit\": {\n    \"default_limit\": 10,\n    \"time_window\": 60,\n    \"excluded_roles\": [],\n    \"key_config\": {\n      \"from_headers\": [],\n      \"from_session_variables\": [],\n      \"from_role\": true\n    },\n    \"unavailable_behavior\": {\n      \"fallback_mode\": \"deny\"\n    },\n    \"role_based_limits\": [\n      {\n        \"role\": \"user\",\n        \"limit\": 11\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Relationship in YAML\nDESCRIPTION: YAML configuration that defines the relationship between trackOrder and shippingDetails commands, mapping tracking number fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: shippingDetails\n  sourceType: trackOrder\n  target:\n    command:\n      name: getShippingDetails\n      subgraph: orders\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: trackingNumber\n      target:\n        argument:\n          argumentName: trackingNumber\n  description: The shipping details for an order based on its tracking number\n```\n\n----------------------------------------\n\nTITLE: Marking a Model as Apollo Entity Source in Hasura DDN\nDESCRIPTION: This YAML snippet shows how to configure a 'Model' as an entity source for Apollo Federation. This configuration allows the model to serve as a source entity in a federated environment, by adding 'apolloFederation.entitySource: true' in the 'definition.graphql'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napolloFederation:\n  entitySource: true\n```\n\n----------------------------------------\n\nTITLE: MongoDB Vector Search Pipeline Configuration\nDESCRIPTION: MongoDB aggregation pipeline stages for vector similarity search including vector dimensions, candidate limits, and projection fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/vector-search.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$project\": {\n    \"_id\": 0,\n    \"title\": 1,\n    \"genres\": 1,\n    \"plot\": 1,\n    \"year\": 1,\n    \"score\": {\n      \"$meta\": \"vectorSearchScore\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Comparison Predicate in YAML\nDESCRIPTION: This snippet demonstrates how to create a field comparison predicate using YAML. It compares the 'author_id' field with a session variable 'x-hasura-user-id'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfieldComparison:\n  field: author_id\n  operator: _eq\n  value:\n    sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Including Nested Relationships in JSON:API Query\nDESCRIPTION: Example of fetching users along with their posts and the comments on those posts using dot notation in the include parameter. This demonstrates how to traverse deeper relationship paths.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Users?include=posts.comments\n```\n\n----------------------------------------\n\nTITLE: Executing Native Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates how to use the configured 'insertArtist' native mutation. It inserts a new artist into the database with specified 'artistId' and 'name' and expects a return object containing fields 'ok' and 'n' which indicate the result of the operation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-mutations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation MyMutation {\n  insertArtist(artistId: 10000, name: \"Pearl Jam\") {\n    ok\n    n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nested GraphQL Query with Relationships in Hasura DDN\nDESCRIPTION: This GraphQL query fetches posts from the 'mainDefaultPosts' table, including nested user data for each post. It demonstrates how to use relationships to retrieve associated data in a single query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  mainDefaultPosts {\n    id\n    title\n    content\n    user {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Datetime Objects in Go for Hasura DDN\nDESCRIPTION: This Go function parses a RFC3339 formatted date string and converts it to a human-readable format. It defines input arguments and output result types, and handles potential parsing errors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-format-datetime-objects.mdx#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"time\"\n\n  \"hasura-ndc.dev/ndc-go/types\"\n)\n\n// DatetimeArguments defines the input arguments for the function\ntype DatetimeArguments struct {\n  DateString string `json:\"date_string\"` // required argument\n}\n\n// DatetimeResult defines the output result for the function\ntype DatetimeResult string\n\n// FunctionFormattedDate formats a datetime string\nfunc FunctionFormattedDate(ctx context.Context, state *types.State, arguments *DatetimeArguments) (*DatetimeResult, error) {\n  date, err := time.Parse(time.RFC3339, arguments.DateString)\n  if err != nil {\n    return nil, fmt.Errorf(\"failed to parse date: %v\", err)\n  }\n\n  formattedDate := date.Format(\"January 02, 2006 03:04 PM\")\n  result := DatetimeResult(formattedDate)\n  return &result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting Database - Shell\nDESCRIPTION: This snippet introspects the PostgreSQL database associated with 'my_postgres' to understand its structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_postgres\nddn connector show-resources my_postgres\n```\n\n----------------------------------------\n\nTITLE: Basic Mutual TLS Configuration in YAML\nDESCRIPTION: This YAML snippet provides a basic configuration for Mutual TLS. It sets the server URL using the `PET_STORE_URL` environment variable, defines the `mtls` security scheme, and configures the TLS settings.  The TLS settings include the certificate, key, and CA certificate, loaded from environment variables as base64 encoded strings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  servers:\n    - url:\n        env: PET_STORE_URL\n  securitySchemes:\n    mtls:\n      type: mutualTLS\n  tls:\n    # Provide the certificate contents as a base64-encoded string.\n    certPem:\n      env: PET_STORE_CERT_PEM\n    # Provide the key contents as a base64-encoded string.\n    keyPem:\n      env: PET_STORE_KEY_PEM\n    # Provide the CA cert contents as a base64-encoded string.\n    caPem:\n      env: PET_STORE_CA_PEM\n    # Additionally you can configure TLS to be enabled but skip verifying the server's certificate chain (optional).\n    insecureSkipVerify:\n      env: PET_STORE_INSECURE_SKIP_VERIFY\n      value: false\n```\n\n----------------------------------------\n\nTITLE: Complex Query with Local and Remote Relationships in GraphQL\nDESCRIPTION: This GraphQL query demonstrates fetching user data, including local relationships (notifications) and remote relationships (favorite artists). The execution plan involves multiple steps including ModelSelect, ForEach, and HashJoin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  users {\n    name\n    # local relationship\n    notifications {\n      id\n      message\n    }\n    # remote relationship\n    user_to_favorite_artist {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting OpenAPI Document\nDESCRIPTION: Introspect the OpenAPI document to generate necessary files for the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_openapi\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt for TypeScript\nDESCRIPTION: Install the bcryptjs package for password hashing in TypeScript.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install bcryptjs\n```\n\n----------------------------------------\n\nTITLE: Adding Download Command to Metadata\nDESCRIPTION: Command to add the text file download capability to the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_storage \"download_storage_object_as_text\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ConnectorBuild Create Command\nDESCRIPTION: Practical example showing how to create a ConnectorBuild by specifying the path to a connector YAML configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a ConnectorBuild\n ddn connector build create --connector ./app/connector/my_connector/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Table as a Hasura Model\nDESCRIPTION: Command to track the 'posts' table from PostgreSQL as a model in Hasura DDN metadata, generating a corresponding HML file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_pg \"posts\"\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Object Structure - JSON\nDESCRIPTION: This snippet defines the structure of the configuration object required by the Hasura Snowflake connector. It outlines the necessary fields and their types, which include JDBC URL, properties, schemas, tables, functions, and native queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"\",\n  \"jdbcProperties\": {},\n  \"schemas\": [],\n  \"tables\": [],\n  \"functions\": [],\n  \"nativeQueries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Databricks Schema\nDESCRIPTION: SQL commands to create and populate a users table in Databricks.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE default.users (\n  id BIGINT GENERATED ALWAYS AS IDENTITY, name STRING NOT NULL, age INT NOT NULL\n);\n\nCOMMENT ON TABLE default.users IS 'The users table contains information about application users';\n\nINSERT INTO default.users (name, age) \nVALUES \n  ('Alice', 25), \n  ('Bob', 30), \n  ('Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Table as a Hasura Model\nDESCRIPTION: Command to track the 'users' table from PostgreSQL as a model in Hasura DDN metadata, generating a Hasura Metadata Language (HML) file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_pg users\n```\n\n----------------------------------------\n\nTITLE: Negative Pattern Matching with _nsimilar in GraphQL\nDESCRIPTION: Demonstrates the use of _nsimilar operator to exclude records matching a pattern, finding authors whose names don't begin with 'A' or 'C'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsNotWithAorC {\n  authors(\n    where: {name: {_nsimilar: \"(A|C)%\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Data Source Environment Variables in Hasura DDN\nDESCRIPTION: Environment variables required for connecting to a Qdrant vector database in Hasura DDN. Includes the connection string URL and API key parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| ---------------- | --------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `QDRANT_URL`     | `https://<cluster-id>.<region>.<host>:<port>` | The connection string for the Qdrant database, including the port. You can generate this by selecting `Connect` under the Cluster in your dashboard. |\n| `QDRANT_API_KEY` | `eyJ...`                                      | The Qdrant API key presented to you when the cluster was provisioned.                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Basic LifecyclePluginHook Implementation Example\nDESCRIPTION: A basic example showing the structure of a lifecycle plugin hook with a direct URL value instead of environment variables. This example demonstrates the minimal required configuration for a pre-parse plugin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: parse\n  name: test\n  url:\n    value: http://localhost:8080\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Configuration for Data Models in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure GraphQL representations for data models, including select unique queries, select many queries, and aggregations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nselectUniques:\n  - queryRootField: ArticleByID\n    uniqueIdentifier:\n      - article_id\n    description: Description for the select unique ArticleByID\nselectMany:\n  queryRootField: ArticleMany\n  description: Description for the select many ArticleMany\naggregate:\n  queryRootField: ArticleAggregate\n  description: Aggregate over Articles\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logic in Python\nDESCRIPTION: Implements 'hello' as a query and 'encode' as a mutation using Python. Decorators are used to specify the function types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom pydantic import BaseModel, Field\nfrom hasura_ndc.errors import UnprocessableContent\nfrom typing import Annotated\nimport base64\n\n\nconnector = FunctionConnector()\n\n@connector.register_query\ndef hello(name: str) -> str:\n    return f\"Hello {name}\"\n\n@connector.register_mutation\ndef encode(username: str) -> str:\n    return base64.b64encode(username.encode(\"utf-8\")).decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Show found relationships with DDN CLI\nDESCRIPTION: This command displays the relationships found by the DDN CLI for a specific connector. Replace `<connector_name>` with the actual name of the connector. It allows you to verify which relationships have been detected before adding them to your metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector show-resources <connector_name>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Native Query Structure in JSON for Hasura\nDESCRIPTION: This snippet defines the overall structure required for a native query in Hasura, including SQL expression, columns, parameters, and description. It outlines the necessary fields such as `sql`, `columns`, `arguments`, and `isProcedure`. The structure is essential for correctly representing queries that interact with the Oracle database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/native-operations/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"native_query_name\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"sql query\"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"parameter_name\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"column1_name\": {\n        \"type\": \"named\",\n        \"name\": \"column1_type\"\n      },\n      \"column2_name\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"column2_type\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"parameter_name\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"parameter_type\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Names Configuration Example for Turso Connector\nDESCRIPTION: Example showing how to specify collection names that will be included in the Turso connector configuration. Lists tables that the connector will be able to access.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/turso/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection_names\": [\"users\", \"posts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Launching DDN Console for Local Development\nDESCRIPTION: This bash command starts the DDN console for local development, allowing you to interact with your GraphQL API and execute queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: JDBC URL Configuration with Environment Variable\nDESCRIPTION: Demonstrates two methods of specifying the JDBC connection URL: as a direct string or as an environment variable reference. This allows for flexible and secure connection configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"jdbc:MySQL:thin:@//localhost:1521/xe?user=foo&password=bar\",\n  \"jdbcUrl\": { \"variable\": \"MYSQL_JDBC_URL\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Connector Configuration with YAML\nDESCRIPTION: This code demonstrates how to securely configure a data connector using the valueFromEnv option to reference environment variables instead of hardcoding sensitive information like URLs and authorization headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/help/security.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example of using valueFromEnv in a connector configuration\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: my_connector\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: MY_CONNECTOR_READ_URL # URL is stored as an env var\n      write:\n        valueFromEnv: MY_CONNECTOR_WRITE_URL # URL is stored as an env var\n  headers:\n    Authorization:\n      valueFromEnv: MY_CONNECTOR_AUTHORIZATION_HEADER # API Key/Secret is stored as an env var\n  schema: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Query with Table Reference in JSON\nDESCRIPTION: Extended JSON configuration example that demonstrates linking the 'ArtistByName' query directly to the 'Artist' table's schema, showcasing the use of table references for return types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/clickhouse/native-operations/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": {\n    \"Artist\": {\n      \"name\": \"Artist\",\n      \"schema\": \"default\",\n      \"comment\": \"\",\n      \"primary_key\": {\n        \"name\": \"ArtistId\",\n        \"columns\": [\"ArtistId\"]\n      },\n      \"return_type\": {\n        \"kind\": \"definition\",\n        \"columns\": {\n          \"ArtistId\": \"Int32\",\n          \"Name\": \"Nullable(String)\"\n        }\n      }\n    }\n  },\n  \"queries\": {\n    \"Name\": {\n      \"exposed_as\": \"collection\",\n      \"file\": \"queries/ArtistByName.sql\",\n      \"return_type\": {\n        \"kind\": \"table_reference\",\n        \"table_name\": \"Artist\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Secure $match Stage with $expr in MongoDB\nDESCRIPTION: Shows how to apply the $literal operator in a $match stage within an $expr context in MongoDB queries to ensure user inputs are treated as literal values, thus avoiding unintended matches or security breaches.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/security-best-practices.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"$match\": {\n      \"$expr\": {\n        \"$eq\": [\"$user_id\", { \"$literal\": \"{{ user_id}}\" }]\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Data Source Environment Variables in Hasura DDN\nDESCRIPTION: Environment variable configuration for connecting to a Snowflake database in Hasura DDN. Requires a JDBC URL with various parameters like account identifier, credentials, database, warehouse, schema, and role.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV        | Example                                                                                                                                                                                       | Description                         |\n| ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- |\n| `JDBC_URL` | `jdbc:snowflake://<account-identifier.<region>.snowflakecomputing.com?user=YOUR_USERNAME&&password=YOUR_PASSWORD&db=YOUR_DATABASE&warehouse=YOUR_WAREHOUSE&schema=YOUR_SCHEMA&role=YOUR_ROLE` | This connector requires a JDBC URL. |\n```\n\n----------------------------------------\n\nTITLE: Update Connector Link with New Resources\nDESCRIPTION: This shell command updates the connector link metadata to include the newly created native query. This step ensures that the native query is tracked and available for use in the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nddn connector-link update my_connector --add-all-resources\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Ingress for Project API\nDESCRIPTION: This YAML manifest creates a Kubernetes Ingress resource for the Project API. Unlike the build-specific ingress, this one is created once and reused as different builds are applied to the Project API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    certmanager.k8s.io/cluster-issuer: letsencrypt-prod\n  labels:\n    app: v3-engine\n  name: v3-engine\n  namespace: <namespace>\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: <domain>\n    http:\n      paths:\n      - backend:\n          service:\n            name: <v3-engine-project-api-helm-release-name>-v3-engine\n            port:\n              number: 3000\n        path: /\n        pathType: ImplementationSpecific\n  tls:\n  - hosts:\n    - <domain>\n    secretName: <domain>-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Creating Local Supergraph Build in Bash\nDESCRIPTION: Commands to set the context and create a new local supergraph build after migration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn context set-current-context local\nddn supergraph build local --output-dir engine\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Authentication\nDESCRIPTION: Commands for authenticating the DDN CLI using either a service account token or personal access token.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login --access-token <service-account-token>\n```\n\n----------------------------------------\n\nTITLE: Adding Lambda Function to DDN Metadata\nDESCRIPTION: Generates metadata for the 'shoutName' function in DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_ts shoutName\n```\n\n----------------------------------------\n\nTITLE: JWT Audience Configuration (YAML)\nDESCRIPTION: This YAML snippet configures the `audience` field for JWT verification. When set, Hasura checks the `aud` claim in the JWT against the specified audience values. It is a list of strings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition: \n  mode: \n    jwt:\n      # ...\n      audience: [\"myapp-1234\", \"myapp-6789\"]\n```\n\n----------------------------------------\n\nTITLE: Introspecting GraphQL Endpoint\nDESCRIPTION: Command to introspect the GraphQL endpoint and generate schema\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_graphql\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Connector with Hasura DDN CLI\nDESCRIPTION: This example illustrates how to build a specific connector by pointing to its configuration file. The command specifies the `--connector` flag followed by the path to the YAML configuration file of the connector. Ensure the correct path is provided for successful execution.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/03-deploy-a-connector.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_connector/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Commands in Bash\nDESCRIPTION: Demonstrates the typical command structure for the DDN CLI, showing how to use commands, subcommands, arguments, and flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn <command> <subcommand> <argument> --<flag> \"<flag_value>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Context with DDN CLI\nDESCRIPTION: Creates a new deployment context using the DDN CLI and configures the context file\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn context create-context deployment\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  deployment:\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env.deployment\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship in Hasura Metadata Using YAML\nDESCRIPTION: This YAML snippet defines a relationship in the Hasura metadata that links the 'ProductsVectorDistance' type to the main 'Products' model, enabling structured queries across different types in Hasura.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/vector-search.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: product\n  source: ProductsVectorDistance\n  target:\n    model:\n      name: Products\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: id\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Objects with GraphQL\nDESCRIPTION: This GraphQL mutation inserts multiple user objects into the `users` table.  It inserts two users, Josh and Victoria, with their respective names and ages.  The mutation returns the `id`, `name`, and `age` of each inserted user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/mutations/insert-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertMultipleUsers {\n  insertUsers(objects: [{name: \"Josh\", age: 38}, {name: \"Victoria\", age: 28}]) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertUsers\": {\n      \"returning\": [\n        {\n          \"id\": 5,\n          \"name\": \"Josh\",\n          \"age\": 38\n        },\n        {\n          \"id\": 6,\n          \"name\": \"Victoria\",\n          \"age\": 28\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Boolean Expression Type in YAML\nDESCRIPTION: Configuration for an object boolean expression type that defines how Album objects can be filtered, including field and relationship comparisons.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v2\ndefinition:\n  name: Album_bool_exp\n  operand:\n    object:\n      type: Album\n      comparableFields:\n        - fieldName: AlbumId\n          booleanExpressionType: Int_comparison_exp\n        - fieldName: ArtistId\n          booleanExpressionType: Int_comparison_exp_with_is_null\n        - fieldName: Address\n          booleanExpressionType: Address_bool_exp\n      comparableRelationships:\n        - relationshipName: artist\n          booleanExpressionType: Artist_bool_exp\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: Album_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Connector Configuration Example in YAML\nDESCRIPTION: An example of a connector configuration file that specifies how to build a data connector, including the connector type, name, source, and context information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v1\ndefinition:\n  name: mypg\n  source: hasura/postgres:v0.7.0\n  context: .\n  envFile: .env.local\n```\n\n----------------------------------------\n\nTITLE: Add all relationships to metadata with DDN CLI\nDESCRIPTION: This command adds all detected relationships for a given connector to your metadata using the DDN CLI. Replace `<connector_link_name>` with the connector link name. This is a convenient way to quickly add all detected relationships at once.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn relationship add <connector_link_name> \\\"*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Author by ID\nDESCRIPTION: Query to fetch a single author using their primary key ID.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/simple-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorById {\n  authorsById(id: 1) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object-to-Command Relationship Configuration\nDESCRIPTION: Illustrates how to define a relationship between a user object type and a command that retrieves user session information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: currentSession\n  sourceType: user\n  target:\n    command:\n      name: getLoggedInUserInfo\n      subgraph: users\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        argument:\n          argumentName: user_id\n  description: The current session information for the user\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Files for Contexts in Bash\nDESCRIPTION: Shows how to set environment files for local development and cloud builds using the localEnvFile and cloudEnvFile keys in the context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn context set localEnvFile .env\nddn context set cloudEnvFile .env.cloud\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Context in YAML for Hasura DDN\nDESCRIPTION: This YAML file specifies the default DDN project and file paths used by commands that accept project, supergraph, and subgraph flags. The values defined here are used as defaults but can be overridden by command-line flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncontext:\n  project: emerging-stag-9129\n  supergraph: ../supergraph.cloud.yaml\n  subgraph: ../app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Using GraphiQLIDE to Update User Age by ID - JavaScript\nDESCRIPTION: This snippet demonstrates how to use GraphiQLIDE to execute a GraphQL mutation that updates a user's age by their unique ID. It constructs a mutation string targeting a specific user with the keyId and specifies new values for the age field.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/mutations/update-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GraphiQLIDE from \"@site/src/components/GraphiQLIDE\";\n\n<GraphiQLIDE\n  query={`mutation UpdateUserAgeById {\n  updateUsersById(keyId: \\\"1\\\", updateColumns: {age: {set: \\\"26\\\"}}) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}`}  \n  response={`{\n  \\\"data\\\": {\n    \\\"updateUsersById\\\": {\n      \\\"returning\\\": [\n        {\n          \\\"id\\\": 1,\n          \\\"name\\\": \\\"Alice\\\",\n          \\\"age\\\": 26\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship in YAML\nDESCRIPTION: YAML configuration for creating a relationship between a Reviews model and the TranslateText command, enabling nested queries for translated content.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: translatedReview\n  sourceType: Reviews\n  target:\n    command:\n      name: TranslateText\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: text\n      target:\n        argument:\n          argumentName: content\n```\n\n----------------------------------------\n\nTITLE: Checking Available Resources\nDESCRIPTION: Command to display all available resources and their status for the storage connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_storage\n```\n\n----------------------------------------\n\nTITLE: Initializing DuckDB Connector Configuration Object\nDESCRIPTION: Base configuration structure for the Hasura DuckDB connector, defining the main metadata fields required for exposing database entities and querying capabilities.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/duckdb/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"collection_names\": [],\n    \"collection_aliases\": {},\n    \"object_types\": {},\n    \"functions\": [],\n    \"procedures\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database for Hasura\nDESCRIPTION: Command to introspect the PostgreSQL database structure into Hasura metadata, creating a representation of the database schema in configuration.json.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Data with GraphQL in Hasura DDN\nDESCRIPTION: This GraphQL query demonstrates how to fetch data from the newly added 'transactions' model, including nested fields like 'transactionDetails'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  transactions {\n    customerId\n    transactionId\n    transactionDetails {\n      currency\n      price\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connector in YAML for Hasura DDN\nDESCRIPTION: This YAML file specifies how to build a connector in Hasura DDN. It defines the connector name, source type, context directory, and environment file location required for introspecting and building the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v1\ndefinition:\n  name: mypg\n  source: hasura/postgres:v0.7.0\n  context: .\n  envFile: .env.local\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Environment Variables\nDESCRIPTION: This configuration snippet shows how to update the environment variables for a connector in the `.env.cloud` file. Replace the placeholders with the actual connection URI, authorization header, read URL, and write URL obtained from the connector build output.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nAPP_MY_CONNECTOR_CONNECTION_URI=\"<existing-connection-uri>\"\nAPP_MY_CONNECTOR_AUTHORIZATION_HEADER=\"<new-authorization-header>\"\nAPP_MY_CONNECTOR_READ_URL=\"<new-read-url>\"\nAPP_MY_CONNECTOR_WRITE_URL=\"<new-write-url>\"\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Cloud Connectors with Hasura DDN CLI - Bash\nDESCRIPTION: This code snippet demonstrates the CLI command used to build and deploy a Python connector within the Hasura DDN environment. It requires the path to the connector's configuration file and optionally includes paths for a subgraph's cloud environment file, the subgraph's configuration YAML file, and an update path for the connector's schema. The command outputs read and write URLs for the deployed connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/python/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_python/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for the \"hello\" Native Query\nDESCRIPTION: This GraphQL query demonstrates how to use the \"hello\" native query. It passes the string \"world\" as the value for the \"name\" argument and requests the `__value` field from the returned object.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  hello(name: \"world\") {\n    __value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Aggregation Pipeline to Connector Configuration using DDN CLI\nDESCRIPTION: This command uses the DDN CLI plugin for the MongoDB connector to add an aggregation pipeline to the connector's configuration. It specifies the connector file path, the path to the aggregation pipeline file, and the target collection name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector plugin \\\n  --connector subgraph_name/connector/connector_name/connector.yaml \\\n  -- native-query create path/to/aggregation_pipeline_filename.json \\\n  --collection collection_name\n```\n\n----------------------------------------\n\nTITLE: Defining Introspection Options in JSON\nDESCRIPTION: This snippet defines the introspectionOptions for the Hasura MongoDB connector, specifying settings such as sample size, validator schema inclusion, and nullability of schema elements. These options customize how introspection behaves during integration with the MongoDB database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"introspectionOptions\": {\n    \"sampleSize\": 100,\n    \"noValidatorSchema\": false,\n    \"allSchemaNullable\": true\n  },\n  \"serializationOptions\": {\n    \"extendedJsonMode\": \"relaxed\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Pre-Route Plugin Request in JSON\nDESCRIPTION: This JSON object illustrates a sample request sent to a pre-route plugin, including the path, method, query parameters, and request body.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/v1/rest/users/5\",\n  \"method\": \"POST\",\n  \"query\": \"limit=10&offset=0\"\n  \"body\": {\n    \"name_like\": \"%foo%\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Query Entry in Hasura Connector Configuration\nDESCRIPTION: This shell command creates an entry for the vector search native query in the Hasura connector configuration, allowing it to be recognized and utilized within Hasura's internal system.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/vector-search.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/my_pg/connector.yaml -- \nnative-operation create --operation-path native_operations/queries/products_vector_distance.sql --kind query\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector for Hasura DDN\nDESCRIPTION: Sets up a PostgreSQL connector for the 'customers' subgraph, using a sample database. This establishes the data source for the subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init customers_pg -i\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build in Hasura DDN\nDESCRIPTION: Applies the newly created supergraph build, making it live. This step requires subgraph admin or higher permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: JWT Key Configuration: Fixed Algorithm and Key (YAML)\nDESCRIPTION: This YAML snippet configures Hasura to use a fixed algorithm and key for verifying JWTs. The `algorithm` specifies the signing algorithm, and the `key` contains the actual key value or a reference to an environment variable containing the key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkey:\n  fixed:\n    algorithm: HS256\n    key:\n      value: ultra-secret-very-secret-super-secret-key\n      # valueFromEnv: AUTH_JWT_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining ModelName in GraphQL Schema\nDESCRIPTION: Specifies the name of the data model in a GraphQL schema. It is represented as a string value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Service Status\nDESCRIPTION: This GraphQL snippet demonstrates executing the 'service_up' native query defined in the Hasura configuration. It queries the service status for specific job and instance arguments. The 'where' clause applies filters based on timestamp constraints and job inclusion to refine results. The function is exposed as read-only in Hasura.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\\n  service_up(\\n    args: { step: \\\"1m\\\", job: \\\"node\\\", instance: \\\"node-exporter:9100\\\" }\\n    where: { timestamp: { _gt: \\\"2024-10-11T00:00:00Z\\\" }, job: { _in: [\\\"node\\\"] } }\\n  ) {\\n    job\\n    instance\\n    values {\\n      timestamp\\n      value\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logic in TypeScript\nDESCRIPTION: Defines two functions in TypeScript: 'hello' as a query and 'encode' as a mutation. The @readonly tag is used to specify the query function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @readonly Exposes the function as an NDC function (the function should only query data without making modifications)\n */\nexport function hello(name?: string) {\n  return `hello ${name ?? \"world\"}`;\n}\n\n/**\n * As this is missing the readonly tag, this will expose the function as an NDC procedure (the function will be exposed as a mutation in the API)\n */\nexport function encode(username: string) {\n  return Buffer.from(username).toString(\"base64\");\n}\n```\n\n----------------------------------------\n\nTITLE: Options for ddn model add Command in SASS\nDESCRIPTION: This snippet lists the specific options available for the 'ddn model add' command, including flags for CI mode, context, help, pattern matching, and subgraph specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for add\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Custom Command to DDN\nDESCRIPTION: Registers the custom insertUser command with the DDN framework.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_mongo insertUser\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection URI in YAML\nDESCRIPTION: Sets the database connection URI directly with authentication credentials embedded in the connection string. This URI follows the PostgreSQL connection string format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"connectionUri\": \"postgresql://user:password@host/databasename\"\n```\n\n----------------------------------------\n\nTITLE: Executing Basic GraphQL Query for Users\nDESCRIPTION: GraphQL query to fetch all users with their id, name, and age from the PostgreSQL database through the Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Structure in GraphQL\nDESCRIPTION: Defines the structure of time-series metrics for introspection from a Prometheus server using GraphQL schema. The schema includes labels, timestamp, and corresponding values for each metric point.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  <label_1>\n  <label_2>\n  # ...\n  timestamp\n  value\n  labels\n  values {\n    timestamp\n    value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running DDN Codemod for Config Upgrade\nDESCRIPTION: Command to upgrade existing Supergraph config v1 objects to v2 format in a project directory\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-supergraph-config-v1-to-v2 --dir <project-dir-path>\n```\n\n----------------------------------------\n\nTITLE: Building a Supergraph with Specific Subgraph Builds - Specific Supergraph Build\nDESCRIPTION: This command builds a supergraph using multiple specific subgraph builds and basing the rest of the supergraph build on a defined supergraph build. Replace `<subgraph-name>`, `<subgraph-build-version>`, and `<supergraph-build-version>` with the correct details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph-name>:<subgraph-build-version> --subgraph-version <subgraph-name>:<subgraph-build-version> --base-supergraph-version <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Types and Connector Representations\nDESCRIPTION: Sets up the necessary scalar type definitions and data connector representations for numeric aggregation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/aggregate-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ScalarType\nversion: v1\ndefinition:\n  name: Numeric\n  graphql:\n    typeName: Numeric\n\n---\nkind: DataConnectorScalarRepresentation\nversion: v1\ndefinition:\n  dataConnectorName: my_connector\n  dataConnectorScalarType: numeric\n  representation: Numeric\n  graphql:\n    comparisonExpressionTypeName: NumericComparisonExp\n```\n\n----------------------------------------\n\nTITLE: Complex Pagination with Sorting and Includes\nDESCRIPTION: Shows how to combine pagination with sorting and relationship includes in a single request.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?page[limit]=2&page[offset]=2&sort=-created_at&include=author\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Articles\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"title\": \"Third Article\",\n        \"content\": \"Content of third article\",\n        \"created_at\": \"2023-01-03T12:00:00Z\"\n      },\n      \"relationships\": {\n        \"author\": {\n          \"data\": {\n            \"type\": \"Authors\",\n            \"id\": \"3\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"4\",\n      \"attributes\": {\n        \"title\": \"Fourth Article\",\n        \"content\": \"Content of fourth article\",\n        \"created_at\": \"2023-01-02T12:00:00Z\"\n      },\n      \"relationships\": {\n        \"author\": {\n          \"data\": {\n            \"type\": \"Authors\",\n            \"id\": \"4\"\n          }\n        }\n      }\n    }\n  ],\n  \"included\": [\n    {\n      \"type\": \"Authors\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"name\": \"Author Three\"\n      }\n    },\n    {\n      \"type\": \"Authors\",\n      \"id\": \"4\",\n      \"attributes\": {\n        \"name\": \"Author Four\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Discovered Resources in DDN CLI\nDESCRIPTION: This command shows the resources discovered from the data source after introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Setting Private API Mode in Hasura DDN CLI\nDESCRIPTION: Command to set the API access mode to private using the DDN CLI. Private mode restricts access to project collaborators and requires x-hasura-ddn-token header.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/private-vs-public.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-api-access-mode private\n```\n\n----------------------------------------\n\nTITLE: Native Queries Definition - JSON\nDESCRIPTION: This snippet defines the structure for native queries in the configuration object, showcasing both inline and parameterized queries, including specifications for SQL components and expected output types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: Command to start the local Hasura DDN Engine and Oracle connector services using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Query SQL File for ClickHouse\nDESCRIPTION: Example of a SQL query file named 'ArtistByName.sql' that retrieves artist data by name from the database. It demonstrates the use of ClickHouse parameter syntax for dynamic value insertion.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/clickhouse/native-operations/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM \"default\".\"Artist\"\nWHERE \"Artist\".\"Name\" = {ArtistName: String}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Nested Object Fields in GraphQL\nDESCRIPTION: Fetches articles sorted by their author's IDs in descending order. This example demonstrates how to use fields from related objects (through object relationships) for sorting the primary query results.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/sorting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesSortedByAuthor {\n  articles (\n    order_by: {author: {id: Desc}}\n  ) {\n    id\n    rating\n    published_on\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global ID Source in Model Definition YAML\nDESCRIPTION: This configuration snippet in YAML enables Global ID source in a model definition by adding a flag in the definition section. This setting is crucial for models intended to utilize Global IDs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nglobalIdSource: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Mutations in JSON\nDESCRIPTION: This JSON snippet configures a native mutation named 'insertArtist', which inserts a document into the Artist collection in MongoDB. It specifies the mutation name, description, arguments, result types, and the command to be executed. The configuration uses placeholders for arguments, which must be carefully handled to prevent code injection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-mutations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"insertArtist\",\n  \"description\": \"Example of a database insert using a native mutation\",\n  \"resultType\": {\n    \"object\": \"InsertArtist\"\n  },\n  \"arguments\": {\n    \"artistId\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    }\n  },\n  \"objectTypes\": {\n    \"InsertArtist\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"insert\": \"Artist\",\n    \"documents\": [\n      {\n        \"ArtistId\": \"{{ artistId }}\",\n        \"Name\": \"{{ name }}\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bearer Auth Configuration in YAML\nDESCRIPTION: This YAML snippet configures Bearer Authentication.  It defines the type as `http`, the `Authorization` header, and sets the environment variable `PET_STORE_BEARER_TOKEN` for the bearer token value. The `scheme` is set to `bearer`, indicating a bearer token. The value of the environment variable `PET_STORE_BEARER_TOKEN` will be inserted at runtime.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsecuritySchemes:\n  bearer:\n    type: http\n    header: Authorization\n    value:\n      env: PET_STORE_BEARER_TOKEN\n    scheme: bearer\n```\n\n----------------------------------------\n\nTITLE: Building a Connector on Hasura DDN using ddn CLI\nDESCRIPTION: This command builds a connector and uploads it to the Hasura DDN infrastructure. The `<path-to-connector.yaml>` should be replaced with the actual path to the connector's YAML configuration file. The output will include the ConnectorBuild Id, Read URL, Write URL, and Authorization Header.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector <path-to-connector.yaml>\n```\n\n----------------------------------------\n\nTITLE: Response Format for Multiple Relationship Include\nDESCRIPTION: Example JSON response when including multiple relationships (posts and profile) in a users query. The included array contains both types of related resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"User\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"name\": \"John Doe\"\n      },\n      \"relationships\": {\n        \"posts\": {\n          \"data\": [{ \"type\": \"Post\", \"id\": \"1\" }]\n        },\n        \"profile\": {\n          \"data\": { \"type\": \"Profile\", \"id\": \"1\" }\n        }\n      }\n    }\n  ],\n  \"included\": [\n    {\n      \"type\": \"Post\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"First Post\"\n      }\n    },\n    {\n      \"type\": \"Profile\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"bio\": \"Software developer\",\n        \"location\": \"San Francisco\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Command Metadata with ddn CLI\nDESCRIPTION: This shell command generates metadata for a new command using the ddn CLI before building. It requires the ddn CLI and prior configurations set up.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nddn command add chinook_pg \"InsertArtist\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Properties for MongoDB Insert Operations\nDESCRIPTION: Example of a command configuration for a MongoDB insert operation. The command specifies the collection name and the document template with argument placeholders.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"command\": {\n  \"insert\": \"Artist\",\n  \"documents\": [\n    {\n      \"ArtistId\": \"{{ artistId }}\",\n      \"Name\": \"{{ name }}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Procedures in DuckDB Connector\nDESCRIPTION: Configuration of database procedures that can be executed through the connector, including procedure name, arguments, and description.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/duckdb/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"procedures\": [\n    {\n      \"name\": \"create_new_post\",\n      \"arguments\": {\n        \"user_id\": {\n          \"type\": {\n            \"type\": \"named\",\n            \"name\": \"Int\"\n          },\n          \"description\": \"The user ID for the new post\"\n        },\n        \"title\": {\n          \"type\": {\n            \"type\": \"named\",\n            \"name\": \"String\"\n          },\n          \"description\": \"The title of the new post\"\n        },\n        \"content\": {\n          \"type\": {\n            \"type\": \"named\",\n            \"name\": \"String\"\n          },\n          \"description\": \"The content of the new post\"\n        }\n      },\n      \"description\": \"Creates a new post in the database\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship in HML\nDESCRIPTION: YAML configuration for creating a relationship between the Posts and Users models in Hasura Metadata Language.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: ExamplePosts\n  target:\n    model:\n      name: ExampleUsers\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Getting Current Subgraph Context\nDESCRIPTION: Command to verify the current subgraph context in DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn context get subgraph\n```\n\n----------------------------------------\n\nTITLE: Introspecting Snowflake Database\nDESCRIPTION: Use the Hasura DDN CLI to introspect the Snowflake database and generate a schema representation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_snowflake\n```\n\n----------------------------------------\n\nTITLE: Native Mutation MongoDB Command Example\nDESCRIPTION: This JSON snippet illustrates an example of a native mutation command for MongoDB. The command inserts documents into the 'posts' collection. The `documents` key contains a placeholder `{{ documents }}` which will be replaced by the actual documents to be inserted during execution.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"insert\": \"posts\",\n  \"documents\": \"{{ documents }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Connector\nDESCRIPTION: Builds a Docker image for a specific data connector using its Dockerfile\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-connector -f <subgraph_name>/connector/<connector_name>/.hasura-connector/Dockerfile.<connector_name> <subgraph_name>/connector/<connector_name>/\n```\n\n----------------------------------------\n\nTITLE: Creating Type Permissions for Field Access in Hasura DDN (YAML)\nDESCRIPTION: This snippet illustrates how to create a `TypePermission` object to restrict field-level access in Hasura DDN. The example configures the `user` role to only access the `name` field of the `Users` type, while the `admin` role can access both `id` and `name` fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# e.g., Users.hml\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Users\n  permissions:\n    # admin is present by default\n    - role: admin\n      output:\n        allowedFields:\n          - id\n          - name\n    #highlight-start\n    - role: user\n      output:\n        allowedFields:\n          - name\n    #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Relationships in GraphQL with Hasura\nDESCRIPTION: This GraphQL query demonstrates fetching data from a Model and a remote relationship. The execution plan for this query will include a ForEach step to fetch additional data from the remote relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RemoteRelationship {\n  cities {\n    # Backed by a model\n    code\n    name\n    weather {\n      # Remote relationship\n      forecast\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Turso Data Source Environment Variables in Hasura DDN\nDESCRIPTION: Environment variables needed for connecting to a Turso database in Hasura DDN. Includes the connection URL using the libsql protocol and an authentication token available from the Turso dashboard.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV                | Example                             | Description                                                                                                                                        |\n| ------------------ | ----------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `TURSO_URL`        | `libsql://dbname-username.turso.io` | The connection string for the Turso database, using `libsql` protocol. You can generate this from the database's overview in your Turso dashboard. |\n| `TURSO_AUTH_TOKEN` | `eyJ...`                            | A Turso auth token with access to the same database; this is also available via the Turso dashboard.                                               |\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Forwarding in DataConnectorLink\nDESCRIPTION: Updates the DataConnectorLink metadata to forward specific HTTP headers to the lambda connector. This example forwards the 'X-Test-Header' to the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: my_ts\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: MY_SUBGRAPH_MY_TS_READ_URL\n      write:\n        valueFromEnv: MY_SUBGRAPH_MY_TS_WRITE_URL\n  headers:\n    Authorization:\n      valueFromEnv: MY_SUBGRAPH_MY_TS_AUTHORIZATION_HEADER\n  argumentPresets:\n    - argument: headers\n      value:\n        httpHeaders:\n          forward:\n            - X-Test-Header\n          additional: {}\n  schema: ...\n```\n\n----------------------------------------\n\nTITLE: JWT config with JSON path values and default example\nDESCRIPTION: This JSON example shows a JWT payload similar to the previous one. This example is used in conjunction with a configuration that specifies a default value for a claim that might not exist in the JWT.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"hasura\": {\n    \"all_roles\": [\"user\", \"editor\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Supergraph Manifest Configuration\nDESCRIPTION: Example of a SupergraphManifest in a legacy Hasura project. This file tells Hasura DDN how to construct a supergraph by specifying which subgraphs to include and environment file to use.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkind: SupergraphManifest\nversion: v1\ndefinition:\n  name: base\n  envfile: base.env.yaml\n  subgraphs:\n    - app\n```\n\n----------------------------------------\n\nTITLE: JDBC Properties Configuration for MySQL\nDESCRIPTION: Shows how to configure additional JDBC driver properties, such as enabling multiple statement execution in a single query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcProperties\": { \"allowMultiQueries\": \"true\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users Model with Custom Function in GraphQL\nDESCRIPTION: This GraphQL query fetches users' names and their uppercase versions using the 'shoutName' function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    name\n    shoutName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA-based JWT Authentication with X509 Certificate\nDESCRIPTION: This example shows how to set up JWT authentication using RSA algorithm with a 512-bit key. The public key is provided as an X509 certificate.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: RS512\n          key:\n            value: '-----BEGIN CERTIFICATE-----\\nMIIDHDCCAgSgAwIBAgIINw9gva8BPPIwDQYJKoZIhvcNAQEFBQAwMTEvMC0GA1UE\\nAxMmc2VjdXJldG9rZW4uc3lzdGVtLmdzZXJ2aWNlYWNjb3VudC5jb20wHhcNMTgQt7dIsMTIU9k1SUrFviZOGnmHWtIAw\\nmtYBcM9I0f9/ka45JIRp5Y1NKpAMFSShs7Wv0m1JS1kXQHdJsPSmjmDKcwnBe3R/\\nTU3foRRywR/3AJRM15FNjTqvUm7TeaW16LkkRoECAwEAAaM4MDYwDAYDVR0TAQH/\\nBAIwADAOBgNVHQ8BAf8EBAMCB4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwIwDQYJ\\nKoZIhvcNAQEFBQADggEBADfY2DEmc2gb8/pqMNWHYq/nTYfJPpK4VA9A0lFTNeoq\\nzmnbGwhKj24X+Nw8trsvkrKxHvCI1alDgBaCyzjGGvgOrh8X0wLtymp1yj6PWwee\\nR2ZPdUaB62TCzO0iRv7W6o39ey+mU/FyYRtxF0ecxG2a0KNsIyFkciXUAeC5UVDo\\nBNp678/SDDx9Ltuxc6h56a/hpBGf9Yzhr0RvYy3DmjBs6eopiGFmjnOKNxQrZ5t2\\n339JWR+yiGEAtoHqk/fINMf1An6Rung1xYowrm4guhCIVi5unAvQ89fq0I6mzPg6\\nLhTpeP0o+mVYrBmtYVpDpv0e71cfYowSJCCkod/9YbY=\\n-----END CERTIFICATE-----'\n```\n\n----------------------------------------\n\nTITLE: Avoid Using Arbitrary Stages in Native Queries\nDESCRIPTION: Demonstrates how improper substitution in native query constructs in MongoDB can lead to vulnerabilities. Highlights the risk of allowing uncontrolled custom query steps that users can manipulate, potentially causing data leakage or mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/security-best-practices.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"$match\": {\n      \"user_id\": { \"$eq\": \"{{ user_id }}\" }\n    }\n  },\n  \"{{ custom_query_steps }}\",\n  {\n    \"$project\": {\n      \"title\": true,\n      \"content\": true\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Related Tables in PostgreSQL\nDESCRIPTION: SQL commands to create a 'posts' table with a foreign key relationship to the 'users' table and insert sample data, establishing a one-to-many relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the posts table\nCREATE TABLE posts (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Insert some seed data\nINSERT INTO posts (user_id, title, content) VALUES\n  (1, 'My First Post', 'This is Alice''s first post.'),\n  (1, 'Another Post', 'Alice writes again!'),\n  (2, 'Bob''s Post', 'Bob shares his thoughts.'),\n  (3, 'Hello World', 'Charlie joins the conversation.');\n```\n\n----------------------------------------\n\nTITLE: Opening Local Console in Hasura DDN\nDESCRIPTION: Opens the local console for interacting with and testing the API. This provides a graphical interface for exploring and querying your local API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring GET Authentication Webhook Headers in YAML\nDESCRIPTION: Example configuration for headers to be sent to the GET authentication webhook.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  forward:\n    - Authorization\n  additional:\n    user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Setting Unqualified Schemas for Tables in Hasura Data Connector (YAML)\nDESCRIPTION: This snippet demonstrates how to set the 'unqualifiedSchemasForTables' option, which determines which schemas will have table metadata entries without schema name prefixes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n\"unqualifiedSchemasForTables\": [\n  \"public\"\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Response for Admin Access in Hasura DDN\nDESCRIPTION: This JSON snippet demonstrates the proper HTTP response format from a webhook that grants admin-level access. The response includes the X-Hasura-Role header set to 'admin', which gives the request full admin privileges.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/4-service-account.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-Role\": \"admin\",\n}\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Usage Example\nDESCRIPTION: This snippet shows how the bearer token is included in the `Authorization` header. The `{{PET_STORE_BEARER_TOKEN}}` placeholder is replaced with the actual value from the `PET_STORE_BEARER_TOKEN` environment variable at runtime.  It provides an example of the `Authorization` header.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nAuthorization: Bearer {{PET_STORE_BEARER_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Print Access Token Usage Examples\nDESCRIPTION: Examples showing how to print the access token as a plain string or JSON format to STDOUT.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Print the access token as a string to STDOUT\n ddn auth print-access-token\n\n# Print access token as a JSON to STDOUT\n ddn auth print-access-token --out json\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar OrderByExpression in Hasura\nDESCRIPTION: Demonstrates how to configure a scalar OrderByExpression that restricts string sorting to ascending order only. This example shows the basic structure and required fields for scalar type ordering.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/orderby-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: String_orderby_exp_asc\n  operand:\n    scalar:\n      orderedType: String\n      enableOrderByDirections:\n        enableSpecific:\n          - Asc\n  graphql:\n    expressionTypeName: StringOrderByExp\n```\n\n----------------------------------------\n\nTITLE: Defining Schemas for BigQuery Introspection in JSON\nDESCRIPTION: This snippet illustrates how to specify schemas (datasets in BigQuery) for introspection in the configuration object. This is optional and allows for limiting the scope of introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/bigquery/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"schema1\", \"schema2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Function Definition Structure for Trino Connector\nDESCRIPTION: Example of a database function definition in the Trino connector configuration, showing metadata like function name, arguments, return type, and comments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function_catalog\": \"public\",\n  \"function_schema\": \"public\",\n  \"function_name\": \"add\",\n  \"argument_signature\": \"(N NUMBER, M NUMBER)\",\n  \"data_type\": \"TABLE (N NUMBER, M NUMBER)\",\n  \"comment\": \"Adds two numbers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Options Inherited from Parent Commands in Hasura DDN CLI\nDESCRIPTION: This snippet shows the options that are inherited from parent commands when using the 'ddn connector build' command in Hasura DDN CLI. These include options for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Plugin TypeScript Configuration\nDESCRIPTION: TypeScript configuration for defining allowed queries and authentication headers\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Config = {\n  headers: {\n    \"hasura-m-auth\": \"your-strong-m-auth-key\",\n  },\n  allowlist: [\n    ...,\n    \"query MyQuery {\\n  getAuthorById(author_id: 10) {\\n    first_name\\n    id\\n    last_name\\n  }\\n}\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Table as Model in Hasura DDN\nDESCRIPTION: Tracks the 'users' table from the PostgreSQL database as a model in the DDN metadata. This makes the table available for querying in the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn models add customers_pg users\n```\n\n----------------------------------------\n\nTITLE: Configuration Object Structure - JSON\nDESCRIPTION: This code snippet shows the basic structure of the configuration object for the Hasura SQL Server data connector. It includes the version, connection string, and metadata sections, which define the data connector's behavior and the entities it exposes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"mssql_connection_string\": {\n    \"variable\": \"CONNECTION_URI\"\n  },\n  \"metadata\": {\n    \"tables\": {},\n    \"nativeQueries\": {},\n    \"nativeMutations\": {},\n    \"aggregateFunctions\": {},\n    \"comparisonOperators\": {},\n    \"storedProcedures\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Offset and Limit Combined Example\nDESCRIPTION: Demonstrates how to use both offset and limit parameters to implement page-based navigation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?page[limit]=2&page[offset]=2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Articles\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"title\": \"Third Article\",\n        \"content\": \"Content of third article\"\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"4\",\n      \"attributes\": {\n        \"title\": \"Fourth Article\",\n        \"content\": \"Content of fourth article\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Native Query Pipeline Example (With Arguments)\nDESCRIPTION: This JSON code demonstrates a 'pipeline' configuration within a Native Query that includes arguments. The arguments are used within MongoDB aggregation operators like `$abs`, `$binarySize`, `$ceil`, `$floor`, and `$divide`.  The arguments must be enclosed in double braces and double quotes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"pipeline\": [\n  {\n    \"$documents\": [\n      {\n        \"__value\": {\n          \"abs\": {\n            \"$abs\": \"{{ abs }}\"\n          },\n          \"binarySize\": {\n            \"$binarySize\": \"{{ binarySize }}\"\n          },\n          \"ceil\": {\n            \"$ceil\": \"{{ ceil }}\"\n          },\n          \"floor\": {\n            \"$floor\": \"{{ floor }}\"\n          },\n          \"divide\": {\n            \"$divide\": [\"{{ dividend }}\", \"{{ divisor }}\"]\n          }\n        }\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Building and Applying Single Subgraph\nDESCRIPTION: Commands for building and applying a single subgraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build create --subgraph-version <subgraph_name:subgraph_version> --base-supergraph-version <supergraph_version>\n```\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build apply --subgraph-version <subgraph_name:subgraph_version>\n```\n\n----------------------------------------\n\nTITLE: Filtering with Greater Than or Equal Operator\nDESCRIPTION: Example of using _gte operator to filter articles by rating\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesRatingGTE4 {\n  articles(\n    where: {rating: {_gte: 4}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect a MongoDB instance for a specific connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Testing UpdatePostsById Mutation for Owned Post in GraphQL\nDESCRIPTION: This GraphQL mutation tests updating a post owned by Alice (user ID 1), which should succeed and return the number of affected rows.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UPDATE_POST_TITLE {\n  updatePostsById(keyId: \"1\", updateColumns: { title: { set: \"This is not Alice's first post\" } }) {\n    affectedRows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stripe Checkout Sessions with GraphQL\nDESCRIPTION: GraphQL query to fetch checkout sessions from Stripe, including session ID, total amount, and nested customer details like name and email.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_CHECKOUT_SESSIONS {\n  getCheckoutSessions {\n    data {\n      id\n      amountTotal\n      customerDetails {\n        name\n        email\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Types in YAML\nDESCRIPTION: Defines custom composite types in the connector configuration, mapping PostgreSQL composite types to their respective fields and nested types. This structure enables complex data types in the connector schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n\"composite\":\n  {\n    \"person\":\n      {\n        \"name\": \"person\",\n        \"schema\": \"public\",\n        \"fields\":\n          {\n            \"address\": { \"name\": \"address\", \"type\": { \"compositeType\": \"person_address\" }, \"description\": null },\n            \"name\": { \"name\": \"name\", \"type\": { \"compositeType\": \"person_name\" }, \"description\": null },\n          },\n        \"description\": null,\n      },\n    \"person_address\":\n      {\n        \"name\": \"person_address\",\n        \"schema\": \"public\",\n        \"fields\":\n          {\n            \"address_line_1\": { \"name\": \"address_line_1\", \"type\": { \"scalarType\": \"text\" }, \"description\": null },\n            \"address_line_2\": { \"name\": \"address_line_2\", \"type\": { \"scalarType\": \"text\" }, \"description\": null },\n          },\n        \"description\": null,\n      },\n    \"person_name\":\n      {\n        \"name\": \"person_name\",\n        \"schema\": \"public\",\n        \"fields\":\n          {\n            \"first_name\": { \"name\": \"first_name\", \"type\": { \"scalarType\": \"text\" }, \"description\": null },\n            \"last_name\": { \"name\": \"last_name\", \"type\": { \"scalarType\": \"text\" }, \"description\": null },\n          },\n        \"description\": null,\n      },\n  }\n```\n\n----------------------------------------\n\nTITLE: Managing Supergraph Builds with Service Account\nDESCRIPTION: Commands to create and apply supergraph builds using the Hasura DDN CLI with service account authentication. Includes option for combining creation and application in a single command for CI/CD workflows.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/service-accounts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create supergraph build\nddn supergraph build create [flags]\n\n# Apply supergraph build\nddn supergraph build apply <supergraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Model to DDN\nDESCRIPTION: This command adds the 'comments' model from the 'my_mongo' MongoDB instance to DDN. This step is necessary to make the data available for querying through DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn model add my_mongo comments\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Supergraph\nDESCRIPTION: This command creates a new build of the Hasura DDN supergraph, incorporating the changes made to the project, such as the addition of new models.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Example Stripe Checkout Sessions Response\nDESCRIPTION: Sample JSON response from querying Stripe checkout sessions, showing session data with IDs, amounts, and nested customer details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getCheckoutSessions\": {\n      \"data\": [\n        {\n          \"id\": \"cs_test_<unique_identifier>\",\n          \"amountTotal\": 1000,\n          \"customerDetails\": {\n            \"name\": \"Rob\",\n            \"email\": \"robdemo@hasura.io\"\n          }\n        },\n        {\n          \"id\": \"cs_test_<unique_identifier>\",\n          \"amountTotal\": 1000,\n          \"customerDetails\": {\n            \"name\": \"Sandeep\",\n            \"email\": \"sandeepdemo@hasura.io\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship in DDN Metadata\nDESCRIPTION: Adds a Relationship object to the Users.hml file to connect the 'shoutName' function to the Users model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: shoutName # Define a name to expose in the supergraph API\n  sourceType: Users # The existing source object type (which also defines the source model Users)\n  target:\n    command: # The target is a command\n      name: ShoutName # The name of the existing command we have defined in metadata\n      subgraph: app # The existing subgraph the command is defined in\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: name # The field on the source object type that we want to provide to the target command as an argument\n      target:\n        argument:\n          argumentName: name # The name of the argument on the target command that we want to map to the source field\n```\n\n----------------------------------------\n\nTITLE: Updating Data Connector Link Configuration\nDESCRIPTION: YAML configuration for updating the connector URLs and authorization header in the data connector link. It uses environment variables for dynamic values.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/independent-connector-deployment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: <connector-link-name>\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: <CONNECTOR>_READ_URL\n      write:\n        valueFromEnv: <CONNECTOR>_WRITE_URL\n  headers:\n    Authorization:\n      valueFromEnv: <CONNECTOR>_AUTHORIZATION_HEADER\n  schema: ...\n```\n\n----------------------------------------\n\nTITLE: Filtering with Not Equal Operator\nDESCRIPTION: Example of using _neq operator to filter users by age\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersNotAge30 {\n  users(where: { age: { _neq: 30 } }) {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura AuthConfig for JWT Authentication\nDESCRIPTION: This YAML snippet shows how to update the Hasura AuthConfig to use JWT mode with Clerk. It specifies the JWT claims namespace, JWK URL, and token location in the request header.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        jwkFromUrl: \"https://<your-clerk-domain>/.well-known/jwks.json\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Building Local Hasura DDN Supergraph\nDESCRIPTION: Creates a local build of the supergraph. The build files are stored as JSON in the engine/build directory and used by the local Hasura DDN Engine.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: JWT Claims Configuration with Namespace for Hasura DDN\nDESCRIPTION: YAML snippet demonstrating how to configure JWT claims using the namespace approach. This configuration specifies the format and location of Hasura claims within the JWT payload.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclaimsConfig:\n  namespace:\n    claimsFormat: Json\n    location: /claims.jwt.hasura.io\n```\n\n----------------------------------------\n\nTITLE: Filtering Integer Values with Equality Operator\nDESCRIPTION: Example of using _eq operator to filter authors by ID\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorById {\n  authors(\n    where: {id: {_eq: 3}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt for Python\nDESCRIPTION: Add the bcrypt package to the requirements.txt file for Python implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbcrypt==4.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Object Types for MongoDB Native Queries\nDESCRIPTION: Example of how to define custom object types for MongoDB native queries when the return type is not already in the schema. The example defines a custom ArtistWAlbumCount type with various fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"objectTypes\": {\n  \"ArtistWAlbumCount\": {\n    \"fields\": {\n      \"ArtistId\": {\n        \"type\": {\n          \"scalar\": \"int\"\n        }\n      },\n      \"Name\": {\n        \"type\": {\n          \"scalar\": \"string\"\n        }\n      },\n      \"AlbumCount\": {\n        \"type\": {\n          \"scalar\": \"int\"\n        }\n      },\n      \"_id\": {\n        \"type\": {\n          \"scalar\": \"objectId\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upload Command to Metadata\nDESCRIPTION: Command to add the text file upload capability to the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_storage \"upload_storage_object_as_text\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Supergraph Configuration in YAML\nDESCRIPTION: A basic supergraph.yaml configuration file that specifies which subgraphs to include in the supergraph build. This configuration references two subgraph configuration files located at 'globals/subgraph.yaml' and 'app/subgraph.yaml'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/build-configs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Expected GraphQL Query Response\nDESCRIPTION: Expected JSON response from the GraphQL query showing customers and their orders with all related data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customers\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"email\": \"alice@example.com\",\n        \"orders\": [\n          {\n            \"id\": 1,\n            \"orderDate\": \"2025-01-14\",\n            \"totalAmount\": \"99.99\"\n          }\n        ]\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"email\": \"bob@example.com\",\n        \"orders\": [\n          {\n            \"id\": 2,\n            \"orderDate\": \"2025-01-14\",\n            \"totalAmount\": \"49.50\"\n          }\n        ]\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Charlie\",\n        \"email\": \"charlie@example.com\",\n        \"orders\": [\n          {\n            \"id\": 3,\n            \"orderDate\": \"2025-01-14\",\n            \"totalAmount\": \"75.00\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deployed Connector - Shell\nDESCRIPTION: This command initializes a connector in the 'Products' team's project, linking it to the existing Hasura PostgreSQL connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_postgres --hub-connector hasura/postgres\n```\n\n----------------------------------------\n\nTITLE: DDN Project Creation Examples\nDESCRIPTION: Examples showing how to create a project with auto-generated name and with a specific project name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a Project on Hasura DDN with auto-generated name\n ddn project create\n\n# Create a Project with name \"test-project\" on Hasura DDN\n ddn project create test-project\n```\n\n----------------------------------------\n\nTITLE: Fetch Specific Fields Example Request\nDESCRIPTION: Example HTTP GET request to fetch specific fields (title and content) from the Articles model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?fields[Article]=title,content\n```\n\n----------------------------------------\n\nTITLE: JSON Response of Users with Posts\nDESCRIPTION: This JSON represents the expected response from the GraphQL query, showing a list of users, each with their associated posts. Each user object contains an `id`, `name`, and a list of `posts`, where each post contains a `title`. This demonstrates the structure of the data returned when querying users and their related posts through the supergraph API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"data\\\": {\\n    \\\"users\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"Alice\\\"\\n        \\\"posts\\\": [\\n          {\\n            \\\"title\\\": \\\"My First Post\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"Another Post\\\"\\n          }\\n        ],\\n      },\\n      {\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"Bob\\\"\\n        \\\"posts\\\": [\\n          {\\n            \\\"title\\\": \\\"Bob's Post\\\"\\n          }\\n        ],\\n\\n      },\\n      {\\n        \\\"id\\\": 3,\\n        \\\"name\\\": \\\"Charlie\\\"\\n        \\\"posts\\\": [\\n          {\\n            \\\"title\\\": \\\"Hello World\\\"\\n          }\\n        ],\\n      }\\n    ]\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Query for Customers and Orders\nDESCRIPTION: GraphQL query to test the API by retrieving customers and their associated orders.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_CUSTOMERS_AND_ORDERS {\n  customers {\n    id\n    name\n    email\n    orders {\n      id\n      orderDate\n      totalAmount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Local Project to Existing Cloud Project in Hasura DDN\nDESCRIPTION: Links the local 'customers' subgraph project to the parent cloud project. This ensures that the subgraph can be integrated into the overall supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn project init --with-project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting Oracle Database\nDESCRIPTION: Command to update the introspection after adding the posts table to the Oracle database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_oracle\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Operations in JSON\nDESCRIPTION: Defines a custom SQL query that can be exposed as a queryable collection in the generated connector schema. This example filters Artists by their ID with a parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"queries\": {\n  \"artist_below_id\": {\n    \"sql\": {\n      \"inline\": \"SELECT * FROM public.\\\"Artist\\\" WHERE \\\"ArtistId\\\" < {{id}}\"\n    },\n    \"columns\": {\n      \"ArtistId\": {\n        \"name\": \"ArtistId\",\n        \"type\": {\n          \"scalarType\": \"int4\"\n        }\n      },\n      \"Name\": {\n        \"name\": \"Name\",\n        \"type\": {\n          \"scalarType\": \"varchar\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"id\": {\n        \"name\": \"id\",\n        \"type\": {\n          \"scalarType\": \"int4\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Data Source Environment Variables in Hasura DDN\nDESCRIPTION: Environment variable required for connecting to the Stripe API in Hasura DDN. Requires a secret bearer token that can be retrieved from the Stripe dashboard.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV                        | Example                               | Description                                                                                                                         |\n| -------------------------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `STRIPE_BEARER_AUTH_TOKEN` | `sk_<test\\|prod>_<unique_identifier>` | A **secret** key for your account, retrievable from your [API Keys dashboard in Stripe](https://dashboard.stripe.com/test/apikeys). |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Apollo Federation Architecture\nDESCRIPTION: This mermaid graph illustrates how clients interact with an Apollo Supergraph Router and multiple subgraphs, including a GraphQL API and Hasura DDN. It provides a high-level overview of data flow and architectural setup using Apollo Federation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n  clients(Clients);\n  router([Apollo Supergraph <br/>Router]);\n  serviceA[GraphQL API <br/>Subgraph A];\n  serviceB[Hasura DDN <br/>Subgraph B];\n  router --- serviceA & serviceB;\n  clients -.- router;\n  class clients secondary;\n```\n\n----------------------------------------\n\nTITLE: Examples of Using rename-graphql-prefixes Command\nDESCRIPTION: Example commands showing how to add prefixes to a subgraph and how to change an existing prefix without modifying the subgraph.yaml file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add root field and type name prefixes to the subgraph set in the context\n ddn codemod rename-graphql-prefixes --graphql-root-field 'app_' --graphql-type-name 'App_'\n\n# Change the root field prefix for the specified subgraph without modifying subgraph.yaml\n ddn codemod rename-graphql-prefixes --subgraph app/subgraph.yaml --graphql-root-field 'foo_' --from-graphql-root-field 'app_' --no-update-subgraph-config\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Connection URI with Environment Variable in JSON\nDESCRIPTION: This snippet shows how to specify the BigQuery connection URI using an environment variable in the configuration object. This approach allows for more flexible and secure credential management.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/bigquery/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"variable\": \"BIGQUERY_JDBC_URL\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Native Query SQL Implementation\nDESCRIPTION: SQL query demonstrating a Native Query with parameter interpolation to filter Artists by name and ID range\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM \"Artist\"\nWHERE \"Name\" LIKE '%' || {{name}} || '%'\n  AND \"ArtistId\" > {{lower_bound}}\n  AND \"ArtistId\" < {{upper_bound}}\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Table as a Model in Hasura DDN\nDESCRIPTION: Tracks the orders table from the PostgreSQL database as a model in the Hasura DDN metadata. This creates an Orders.hml file that represents the orders table in the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nddn models add billing_pg orders\n```\n\n----------------------------------------\n\nTITLE: Opening Local Console\nDESCRIPTION: Command to open the local Hasura console\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery JDBC Connection String\nDESCRIPTION: This is the format for the JDBC connection string used to connect to BigQuery, including project ID, dataset, and service account details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nAPP_MY_BIGQUERY_JDBC_URL=jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=your-project-id;DefaultDataset=your-dataset;OAuthType=0;OAuthServiceAcctEmail=your-service-account-email;OAuthPvtKey=/etc/connector/your-key.json\n```\n\n----------------------------------------\n\nTITLE: Adding Native Mutation to Configuration with ddn CLI\nDESCRIPTION: This shell command uses the ddn CLI to add a Native Mutation SQL file to the connector configuration as a mutation kind operation. It requires the ddn tool and appropriate file paths set up for the operation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/chinook_pg/connector.yaml -- \\\n  native-operation create --operation-path native_operations/mutations/insert_artist.sql --kind mutation\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'ddn command list' in Bash\nDESCRIPTION: An example showing how to list details about functions/procedures of a DataConnectorLink named 'mydb' and their corresponding Commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List details about the functions/procedures of DataConnectorLink `mydb`, and their corresponding Commands\n ddn command list mydb\n```\n\n----------------------------------------\n\nTITLE: Querying Users Data with GraphQL\nDESCRIPTION: Execute a GraphQL query to fetch all user data from the Snowflake database through Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  docsPublicUsers {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomTypeName in Open DD\nDESCRIPTION: Explains the CustomTypeName type in Open DD, which represents the name of a user-defined type. It is defined as a string value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### CustomTypeName {#objecttype-customtypename}\n\nThe name of a user-defined type.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Adding UserByName Model to DDN Project\nDESCRIPTION: This command adds the 'UserByName' model to the DDN project for the specified connector, incorporating the newly defined native query into the project's data model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn model add <connector_name> UserByName\n```\n\n----------------------------------------\n\nTITLE: Configuring TypePermissions in Hasura\nDESCRIPTION: Example showing how to define type-level permissions that control field access for different roles. The admin role has access to all fields while the user role has limited access.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: article\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n          - title\n    - role: user\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n```\n\n----------------------------------------\n\nTITLE: Defining Native Query for User Ranking in PostgreSQL\nDESCRIPTION: Creates a SQL file that defines a native query to rank users of the same age. It uses a window function to partition and rank users based on their age and name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- native_operations/queries/order_users_of_same_age.sql\nSELECT\n    id,\n    name,\n    age,\n    RANK() OVER (PARTITION BY age ORDER BY name ASC) AS rank_within_age\nFROM\n    users\nWHERE\n    age = {{ age }}\n```\n\n----------------------------------------\n\nTITLE: Setting JDBC Properties\nDESCRIPTION: Highlights how to set additional properties for the JDBC driver using key-value pairs within a JSON object. For instance, enabling multi-query execution in MySQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcProperties\": { \"allowMultiQueries\": \"true\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Mutations Example - JSON\nDESCRIPTION: This JSON snippet demonstrates how to define native SQL mutations. It illustrates the configuration of an `insert_artist_and_return_id` mutation. The example shows how to specify the SQL query, columns, arguments, and descriptions for the mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nativeMutations\": {\n    \"insert_artist_and_return_id\": {\n      \"sql\": \"INSERT INTO [dbo].[Artist] (ArtistId, Name) OUTPUT inserted.*  VALUES ({{ArtistId}}, {{Name}})\",\n      \"columns\": {\n        \"ArtistId\": {\n          \"name\": \"ArtistId\",\n          \"type\": \"int\",\n          \"nullable\": \"nonNullable\",\n          \"description\": null\n        },\n        \"Name\": {\n          \"name\": \"Name\",\n          \"type\": \"varchar\",\n          \"nullable\": \"nullable\",\n          \"description\": null,\n          \"castAs\": \"varchar(100)\"\n        }\n      },\n      \"arguments\": {\n        \"ArtistId\": {\n          \"name\": \"ArtistId\",\n          \"type\": \"int\",\n          \"nullable\": \"nonNullable\",\n          \"description\": null\n        },\n        \"Name\": {\n          \"name\": \"Name\",\n          \"type\": \"varchar\",\n          \"nullable\": \"nullable\",\n          \"description\": null\n        }\n      },\n      \"description\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Breaking Changes in GraphQL Schema\nDESCRIPTION: This snippet shows an example of a breaking change where a field is removed from the schema. It illustrates how such changes can affect client queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/graphql-schema-diff.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  sales_hello: String\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  // sales_hello field is removed\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Argument Preset for Command Permission in YAML\nDESCRIPTION: This example demonstrates how to set an argument preset for a command permission in YAML. It presets the 'user_id' argument with a session variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\nallowExecution: true\nargumentPresets:\n  - argument: user_id\n    value:\n      session_variable: x-hasura-user_id\n```\n\n----------------------------------------\n\nTITLE: Updating .env.cloud file for ClickHouse Connector\nDESCRIPTION: This snippet shows how to update the `.env.cloud` file with the necessary connection URI, username, and password for the ClickHouse data source. This is crucial for the cloud-hosted connector to communicate with the database. Replace the placeholder values with your actual credentials.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/clickHouse/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n\"CLICKHOUSE_URL=<clickhouse-connection-uri>\nCLICKHOUSE_USERNAME=<your-username>\nCLICKHOUSE_PASSWORD=<your-passowrd>\"\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Plugin Hook Configuration\nDESCRIPTION: YAML configuration for the plugin hook defining pre-route settings, path matching, and request/response handling.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: route\n  name: restified_endpoints\n  url:\n    valueFromEnv: RESTIFIED_ENDPOINTS_URL\n  config:\n    matchPath: \"/v1/api/rest/*\"\n    matchMethods: [\"GET\", \"POST\"]\n    request:\n      method: GET\n      headers:\n        forward:\n          - Authorization\n          - x-hasura-role\n          - x-hasura-ddn-token\n        additional:\n          hasura-m-auth:\n            valueFromEnv: M_AUTH_KEY\n      rawRequest:\n        path: {}\n        query: {}\n        method: {}\n        body: {}\n    response:\n      headers:\n        additional:\n          content-type:\n            value: application/json\n```\n\n----------------------------------------\n\nTITLE: Launch Data Response\nDESCRIPTION: Example JSON response from the launches query\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"launches\": [\n      {\n        \"id\": \"5eb87cd9ffd86e000604b32a\",\n        \"missionName\": \"FalconSat\"\n      },\n      {\n        \"id\": \"5eb87cdaffd86e000604b32b\",\n        \"missionName\": \"DemoSat\"\n      },\n      {\n        \"id\": \"5eb87cdbffd86e000604b32c\",\n        \"missionName\": \"Trailblazer\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Table as Hasura Model\nDESCRIPTION: Track the Snowflake 'users' table as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_snowflake DOCS.PUBLIC.USERS\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Login Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for using the 'ddn auth login' command. It can be used to authenticate the DDN CLI with a Hasura Cloud account, with an option to use an access token for headless or CI environments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login [flags]\n```\n\n----------------------------------------\n\nTITLE: Native Query Object Types Example\nDESCRIPTION: This example shows how to define object types for a native query. It defines an 'ArtistWAlbumCount' object type with fields such as 'ArtistId', 'Name', 'AlbumCount', and '_id', each with a specified scalar type.  This is useful when the result type of a native query is not already defined in the schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"objectTypes\": {\n    \"ArtistWAlbumCount\": {\n      \"fields\": {\n        \"ArtistId\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"Name\": {\n          \"type\": {\n            \"scalar\": \"string\"\n          }\n        },\n        \"AlbumCount\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"_id\": {\n          \"type\": {\n            \"scalar\": \"objectId\"\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph in YAML for Hasura DDN\nDESCRIPTION: This YAML file tells Hasura DDN how to construct a subgraph. It contains the subgraph name, generator configuration, and includePaths which specify directories and files containing metadata for the subgraph build.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v1\ndefinition:\n  name: app\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n```\n\n----------------------------------------\n\nTITLE: Opening Local Console\nDESCRIPTION: Open the local Hasura DDN console for querying and management.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring DataConnectorLink with Header Passthrough\nDESCRIPTION: YAML configuration for setting up header passthrough in a DataConnectorLink object, enabling forwarding of specific HTTP headers like X-Hasura-Admin-Secret and Authorization.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/graphql/header-passthrough.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: my_graphql\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: APP_GRAPHQL_READ_URL\n      write:\n        valueFromEnv: APP_GRAPHQL_WRITE_URL\n  schema:\n    # This is read from the connector schema configuration\n  argumentPresets:\n    - argument: headers\n      value:\n        httpHeaders:\n          forward:\n            - X-Hasura-Admin-Secret\n            - Authorization\n          additional: {}\n```\n\n----------------------------------------\n\nTITLE: Seeding BigQuery Users Table\nDESCRIPTION: This SQL query inserts sample data into the 'users' table in the BigQuery dataset.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO hasura_demo.users (user_id, name, age) VALUES (1, 'Alice', 25), (2, 'Bob', 30), (3, 'Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration: DDN Plugin Setup\nDESCRIPTION: Example YAML configuration for setting up a lifecycle plugin hook in DDN metadata, including URL configuration and request headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: cloudflare allowlist\n  url:\n    valueFromEnv: ALLOW_LIST_URL\n  pre: parse\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: \"your-strong-m-auth-key\"\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Home Page with Complex Relationships in GraphQL\nDESCRIPTION: This GraphQL query demonstrates various field access modes including direct queries, usage via relationships, and usage as arguments. It showcases filtering, sorting, pagination, and nested joins across databases.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/model-analytics/field.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProductHomePage {\n  topTShirtsInUS: products(\n    where: { countryOfOrigin: { _eq: \"US\" }, category: { name: { _eq: \"T-Shirts\" } } }\n    order_by: { category: { name: Asc } }\n    offset: 1\n    limit: 5\n  ) {\n    id\n    name\n    price\n    description\n    manufacturedBy: manufacturer {\n      name\n    }\n    latestOrders: orders {\n      createdAt\n      userActivity: user {\n        name\n      }\n    }\n    topReviews: reviews(\n      where: { createdAt: { _gt: \"2023-10-15\" } }\n      order_by: { rating: Desc }\n      limit: 3\n    ) {\n      rating\n      text\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example User JWT Payload for Testing\nDESCRIPTION: This JWT payload example sets the user role as default with a specific UUID for testing the permissions setup. This demonstrates the format for a JWT that would be sent with requests to the Hasura Engine.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1735916718,\n  \"exp\": 1796916677,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-allowed-roles\": [\"user\"],\n    \"x-hasura-user-id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DNS Resolution Debugging Command\nDESCRIPTION: This snippet shows how to enable debug logging when the connector service hangs or times out, which provides detailed logs for diagnosing DNS issues.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn introspect --log-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Copying BigQuery Service Account Key\nDESCRIPTION: This command moves the downloaded service account key file to the connector directory in the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmv /path/to/your/key.json app/connector/my_bigquery/key.json\n```\n\n----------------------------------------\n\nTITLE: Adding Model to Hasura DDN Project\nDESCRIPTION: Adds the newly created native query as a model to the Hasura DDN project, making it available for use in the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_pg order_users_of_same_age\n```\n\n----------------------------------------\n\nTITLE: Building DDN Supergraph\nDESCRIPTION: This command builds a new local supergraph in DDN. A supergraph combines multiple subgraphs into a single, queryable graph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Authentication for Prometheus Connector\nDESCRIPTION: Supports Google Cloud authentication through application credentials JSON or file path, with automatic credential loading from environment variable\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/auth.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconnection_settings:\n  authentication:\n    google:\n      # credentials:\n      #   env: GOOGLE_APPLICATION_CREDENTIALS_JSON\n      # credentials_file:\n      #   env: GOOGLE_APPLICATION_CREDENTIALS\n```\n\n----------------------------------------\n\nTITLE: Querying File Contents with GraphQL\nDESCRIPTION: GraphQL query to retrieve the contents of the previously uploaded text file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_TEXT_VALUE_FROM_OBJECT {\n  downloadStorageObjectAsText(name: \"sample.txt\") {\n    data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supergraph Configuration Example in YAML\nDESCRIPTION: An example of a supergraph configuration file that tells Hasura DDN how to construct the supergraph by specifying which subgraph configuration files to use.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.cloud.yaml\n    - app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTified GraphQL Endpoints in TypeScript\nDESCRIPTION: TypeScript configuration file that defines GraphQL server settings, headers, and RESTified endpoint mappings. Includes authentication header forwarding and endpoint path definitions with associated GraphQL queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Config = {\n  graphqlServer: {\n    headers: {\n      additional: {\n        \"Content-Type\": \"application/json\",\n      },\n      // Please make sure to forward the authentication headers here\n      forward: [\"hasura_cloud_pat\", \"x-hasura-ddn-token\"],\n    },\n  },\n  headers: {\n    \"hasura-m-auth\": \"your-strong-m-auth-key\",\n  },\n  restifiedEndpoints: [\n    ...,\n    {\n      path: \"/v1/api/rest/users\",\n      methods: [\"GET\", \"POST\"],\n      query: `\n        query MyQuery($limit: Int = 10, $offset: Int = 0) {\n          Users(limit: $limit, offset: $offset) {\n            Name\n          }\n        }\n      `,\n    }\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration Structure for GraphQL Connector in JSON\nDESCRIPTION: This JSON snippet describes the initial configuration setup for the GraphQL connector. It includes schema reference, endpoints for introspection and execution, both picking values from environment variables (\"GRAPHQL_ENDPOINT\"). The typical initialization results in creation of this structure automatically, dependent on a configuration schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/graphql/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"configuration.schema.json\",\n  \"introspection\": {\n    \"endpoint\": {\n      \"valueFromEnv\": \"GRAPHQL_ENDPOINT\"\n    }\n  },\n  \"execution\": {\n    \"endpoint\": {\n      \"valueFromEnv\": \"GRAPHQL_ENDPOINT\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Native Queries in Hasura Configuration\nDESCRIPTION: This snippet defines a native query named 'service_up' within the Hasura Prometheus connector's configuration.yaml file. It uses prepared variables for 'job' and 'instance' which are required fields in the query. The snippet specifies types for the arguments allowing dynamic input for querying Prometheus data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\\n  native_operations:\\n    queries:\\n      service_up:\\n        query: up{job=\\\"${job}\\\", instance=\\\"${instance}\\\"}\\n        labels:\\n          instance: {}\\n          job: {}\\n        arguments:\\n          instance:\\n            type: String\\n          job:\\n            type: String\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table in Oracle\nDESCRIPTION: SQL command to create a posts table with user_id, post_id, title, and content columns.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE posts (\n  user_id Number,\n  post_id Number,\n  title Varchar2(45),\n  content Varchar2(45)\n);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn context get-context in Bash\nDESCRIPTION: Examples showing how to use the 'ddn context get-context' command, including listing all contexts and getting details of a specific context named 'default'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get list of contexts\n ddn context get-context\n\n# Get details of context 'default'\n ddn context get-context default\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Inserting Artist\nDESCRIPTION: This GraphQL mutation demonstrates how to insert a new artist using the configured Native Mutation. It expects a variable 'name' and returns the ArtistId and Name of the inserted record.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  insert_artist(name: \"New Artist\") {\n    ArtistId\n    Name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelPermissions for Posts Model in YAML\nDESCRIPTION: This YAML snippet sets up ModelPermissions for the Posts model, granting the admin role full access to select operations without any filtering.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Posts\n  permissions:\n    - role: admin\n      select:\n        filter: null\n        allowSubscriptions: true\n```\n\n----------------------------------------\n\nTITLE: Tracking the function\nDESCRIPTION: This command adds or tracks the `myCustomCode` function within the connector `my_ts`. This step registers the function with the DDN system, making it available for use in GraphQL operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn command add my_ts myCustomCode\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Version Command in SASS\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'ddn version' command. They include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_version.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: JWT Issuer Configuration (YAML)\nDESCRIPTION: This YAML snippet configures the `issuer` field for JWT verification. When set, Hasura checks the `iss` claim in the JWT against the specified issuer value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition: \n  mode: \n    jwt:\n      # ...\n      issuer: https://my-auth-server.com\n```\n\n----------------------------------------\n\nTITLE: JWT config with JSON path values example\nDESCRIPTION: This JSON example shows a JWT payload where Hasura claims are located using JSON pointers within the token. The `user` and `hasura` objects contain the claims.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"user\": {\n    \"id\": \"ujdh739kd\"\n  },\n  \"hasura\": {\n    \"all_roles\": [\"user\", \"editor\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Error Response Example\nDESCRIPTION: This example shows the structure of a GraphQL API error response when a negative value is used as the `limit` argument. The response includes a `data` field set to null and an `errors` array containing an object with a `message` field that describes the error.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/errors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"Unexpected value: expecting NON-NEGATIVE 32-bit INT, but found: -10\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Add a relationship to metadata with DDN CLI\nDESCRIPTION: This command adds a relationship to your metadata using the DDN CLI. Replace `<connector_link_name>` with the connector link name and `<collection_name>` with the collection name. This command creates a relationship between the specified connector link and collection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn relationship add <connector_link_name> <collection_name>\"\n```\n\n----------------------------------------\n\nTITLE: Seeding MongoDB with User Data\nDESCRIPTION: Command to insert sample user data into the MongoDB database using mongosh shell.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it mongodb mongosh my_database --eval \"\ndb.users.insertMany([\n  { user_id: 1, name: 'Alice', age: 25 },\n  { user_id: 2, name: 'Bob', age: 30 },\n  { user_id: 3, name: 'Charlie', age: 35 }\n]);\n\"\n```\n\n----------------------------------------\n\nTITLE: Create DDN Build\nDESCRIPTION: This bash command uses the DDN CLI to create a new build of the supergraph in the local environment. This command compiles the data model and API configurations into a deployable format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating ClickHouse Table\nDESCRIPTION: Creates a new 'comments' table in ClickHouse with columns for id, comment, user_id, and post_id. The table uses MergeTree engine and is ordered by id. Sample data is inserted into the table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE comments (\n    id UInt32,\n    comment String,\n    user_id UInt32,\n    post_id UInt32\n)\nENGINE = MergeTree()\nORDER BY id;\n\nINSERT INTO comments (id, comment, user_id, post_id) VALUES\n    (1, 'Great post! Really enjoyed reading this.', 1, 2),\n    (2, 'Thanks for sharing your thoughts!', 2, 1),\n    (3, 'Interesting perspective.', 3, 1);\n```\n\n----------------------------------------\n\nTITLE: Basic GraphiQL Query Implementation in React\nDESCRIPTION: Demonstrates basic usage of the GraphiQLIDE component with a simple author query and response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/graphiql-ide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GraphiQLIDE from '@site/src/components/GraphiQLIDE';\n\n<GraphiQLIDE\n  query={`query AuthorById {\n  author_by_pk(id: 1) {\n    id\n    name\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"author_by_pk\": {\n      \"id\": 1,\n      \"name\": \"Justin\"\n    }\n  }\n}`}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring EC-based JWT Authentication with Public Key in PEM Format\nDESCRIPTION: This snippet demonstrates how to configure JWT authentication using ECDSA algorithm with a 256-bit key. The public key is provided in PEM format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: ES256\n          key:\n            value: '-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9\\nq9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==\\n-----END PUBLIC KEY-----'\n```\n\n----------------------------------------\n\nTITLE: Defining CommandName in Markdown\nDESCRIPTION: Defines the structure for a command name, which is represented as a string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n#### CommandName {#command-commandname}\n\nThe name of a command.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Model Permissions with Relationship Filter in YAML\nDESCRIPTION: Example of model permissions using relationship-based filtering for access control.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          relationship:\n            name: author\n            predicate:\n              fieldComparison:\n                field: id\n                operator: _eq\n                value:\n                  sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Hasura DDN Project\nDESCRIPTION: This command creates a new local Hasura DDN project and changes the directory to the new project folder.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Model to Hasura DDN\nDESCRIPTION: Adds the posts table as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_duckdb posts\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration JSON\nDESCRIPTION: JSON configuration for the RESTified endpoints plugin defining GraphQL server settings, headers, and endpoint mappings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"graphqlServer\": {\n    \"headers\": {\n      \"additional\": {\n        \"Content-Type\": \"application/json\"\n      },\n      \"forward\": [\"X-Hasura-Role\", \"Authorization\", \"X-Hasura-ddn-token\"]\n    }\n  },\n  \"headers\": {\n    \"hasura-m-auth\": \"zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ\"\n  },\n  \"restifiedEndpoints\": [\n    {\n      \"path\": \"/v1/api/rest/artistbyname/:name\",\n      \"methods\": [\"GET\", \"POST\"],\n      \"query\": \"query artistByName($name: String!) { artist(where: {name: {_eq: $name}}) { name }}\"\n    },\n    {\n      \"path\": \"/v1/api/rest/artists\",\n      \"methods\": [\"GET\", \"POST\"],\n      \"query\": \"query artists($limit: Int = 10, $offset: Int = 0) { artist(limit: $limit, offset: $offset) { name } }\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users Table\nDESCRIPTION: Verifies the creation of the 'users' table by querying all records.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String Authentication for Azure Blob Storage - YAML\nDESCRIPTION: This YAML configuration for Azure Blob Storage demonstrates setting up authentication using a connection string. It specifies the endpoint directly for accessing the storage account.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - type: azblob\n    endpoint: DefaultEndpointsProtocol=https;AccountName=storagesample;AccountKey=<account-key>\n    authentication:\n      type: connectionString\n```\n\n----------------------------------------\n\nTITLE: Filtering with Less Than Operator\nDESCRIPTION: Example of using _lt operator to filter users by age\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersAgeLessThan30 {\n  users(where: { age: { _lt: 30 }}) {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Names for DuckDB Connector\nDESCRIPTION: Example of specifying collection names that will be exposed for querying in the Hasura DuckDB connector. This is a required field that lists the available collections in the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/duckdb/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection_names\": [\"posts\", \"users\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase JWT Authentication\nDESCRIPTION: This snippet shows the configuration for Firebase JWT authentication in Hasura, including the JWKs URL, issuer, and audience settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: Header\n        name: Authorization\n      key:\n        jwkFromUrl: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\n      issuer: https://securetoken.google.com/<firebase-project-id>\n      audience: <firebase-project-id>\n```\n\n----------------------------------------\n\nTITLE: Add a Relationship with DDN\nDESCRIPTION: This command adds a relationship between two models based on a foreign key that was automatically detected. It uses the `ddn` CLI, specifying the data connector (`my_pg`) and the model (`users`) to create the relationship. This command establishes the connection between the `Users` and `Posts` models, allowing for related data to be queried together.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn relationship add my_pg users\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Customers Subgraph\nDESCRIPTION: Set of commands to initialize and configure the customers PostgreSQL connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init customers_pg -i\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect customers_pg\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn models add customers_pg users\n```\n\n----------------------------------------\n\nTITLE: Defining Global ID Fields in YAML\nDESCRIPTION: This YAML snippet demonstrates configuration for specifying which fields to use as sources for creating Global IDs. It exemplifies using `user_id` field to generate a unique global identifier.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobalIdFields: [user_id]\n```\n\n----------------------------------------\n\nTITLE: Sample Pre-Response Plugin Request in JSON\nDESCRIPTION: This JSON object represents a sample request sent to a pre-response plugin, including the query response, session information, and raw request details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"data\": {\n      \"getAuthorById\": {\n        \"first_name\": \"John\"\n      }\n    }\n  },\n  \"session\": {\n    \"role\": \"user\",\n    \"variables\": {\n      \"x-hasura-role\": \"user\",\n      \"x-hasura-user-id\": \"123\"\n    }\n  },\n  \"rawRequest\": {\n    \"query\": \"query MyQuery { getAuthorById(author_id: 10) { first_name } }\",\n    \"variables\": {},\n    \"operationName\": \"MyQuery\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Opens the local Hasura DDN console for querying.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Settings for Connector\nDESCRIPTION: Specifies the runtime configuration for the Prometheus connector, indicating response format settings for timestamps and values, as well as options to control grouping and unit representation of time metrics.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nruntime:\n  flat: false\n  unix_time_unit: s # enum: s, ms\n  format:\n    timestamp: rfc3339 # enum: rfc3339, unix\n    value: float64 # enum: string, float64\n```\n\n----------------------------------------\n\nTITLE: Querying Customers via GraphQL\nDESCRIPTION: Example GraphQL query to retrieve customer data from the Elasticsearch index through the Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  customers {\n    email\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Queries Configuration for Trino Connector\nDESCRIPTION: Examples of both inline and parameterized native queries in the Trino connector configuration, showing SQL definition, column types, and argument specifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Definition Structure for Trino Connector\nDESCRIPTION: Example of a table definition in the Trino connector configuration, showing details like columns, primary keys, and foreign key relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableName\": \"Album\",\n  \"tableType\": \"TABLE\",\n  \"description\": \"\",\n  \"columns\": [\n    {\n      \"name\": \"AlbumId\",\n      \"description\": \"\",\n      \"type\": \"int\",\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": true,\n      \"is_primarykey\": true\n    },\n    {\n      \"name\": \"Title\",\n      \"description\": \"\",\n      \"type\": \"varchar\",\n      \"numeric_scale\": null,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": false\n    },\n    {\n      \"name\": \"ArtistId\",\n      \"description\": \"\",\n      \"type\": \"int\",\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": false\n    }\n  ],\n  \"pks\": [\"AlbumId\"],\n  \"fks\": {\n    \"FK_AlbumArtistId\": {\n      \"foreign_collection\": \"Artist\",\n      \"column_mapping\": {\n        \"ArtistId\": \"ArtistId\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Model for MongoDB Native Query in DDN\nDESCRIPTION: This command adds a model for the native query in the DDN project, linking it to the specified connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Hasura Query Execution Plan JSON Response\nDESCRIPTION: This JSON response details the execution plan for the GraphQL query, including model selection, relationship handling, and SQL query generation for both the main query and nested relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"explain\": {\n    \"type\": \"sequence\",\n    \"value\": [\n      {\n        \"type\": \"modelSelect\",\n        \"value\": {\n          \"modelName\": \"Album\",\n          \"queryRequest\": {\n            \"collection\": \"Album\",\n            \"query\": {\n              \"fields\": {\n                \"AlbumId\": {\n                  \"type\": \"column\",\n                  \"column\": \"AlbumId\"\n                },\n                \"ArtistId\": {\n                  \"type\": \"column\",\n                  \"column\": \"ArtistId\"\n                },\n                \"__hasura_phantom_field__ArtistId\": {\n                  \"type\": \"column\",\n                  \"column\": \"ArtistId\"\n                },\n                \"Tracks\": {\n                  \"type\": \"relationship\",\n                  \"query\": {\n                    \"fields\": {\n                      \"TrackId\": {\n                        \"type\": \"column\",\n                        \"column\": \"TrackId\"\n                      },\n                      \"__hasura_phantom_field__AlbumId\": {\n                        \"type\": \"column\",\n                        \"column\": \"AlbumId\"\n                      }\n                    }\n                  },\n                  \"relationship\": \"[{\\\"subgraph\\\":\\\"connector_2\\\",\\\"name\\\":\\\"Album\\\"},\\\"Tracks\\\"]\",\n                  \"arguments\": {}\n                }\n              }\n            },\n            \"arguments\": {},\n            \"collection_relationships\": {\n              \"[{\\\"subgraph\\\":\\\"connector_2\\\",\\\"name\\\":\\\"Album\\\"},\\\"Tracks\\\"]\": {\n                \"column_mapping\": {\n                  \"AlbumId\": \"AlbumId\"\n                },\n                \"relationship_type\": \"array\",\n                \"target_collection\": \"Track\",\n                \"arguments\": {}\n              }\n            }\n          },\n          \"ndcExplain\": {\n            \"type\": \"response\",\n            \"value\": {\n              \"details\": {\n                \"Execution Plan\": \"Aggregate  (cost=2342.72..2342.73 rows=1 width=32)\\n  ->  Aggregate  (cost=2342.70..2342.71 rows=1 width=32)\\n        ->  Nested Loop Left Join  (cost=11.06..2341.65 rows=210 width=40)\\n              ->  Seq Scan on \\\"Album\\\" \\\"%0_Album\\\"  (cost=0.00..12.10 rows=210 width=8)\\n              ->  Subquery Scan on \\\"%3_rows\\\"  (cost=11.06..11.08 rows=1 width=32)\\n                    ->  Aggregate  (cost=11.06..11.07 rows=1 width=32)\\n                          ->  Bitmap Heap Scan on \\\"Track\\\" \\\"%2_Track\\\"  (cost=4.29..11.05 rows=2 width=8)\\n                                Recheck Cond: (\\\"%0_Album\\\".\\\"AlbumId\\\" = \\\"AlbumId\\\")\\n                                ->  Bitmap Index Scan on \\\"IFK_TrackAlbumId\\\"  (cost=0.00..4.29 rows=2 width=0)\\n                                      Index Cond: (\\\"AlbumId\\\" = \\\"%0_Album\\\".\\\"AlbumId\\\")\",\n                \"SQL Query\": \"EXPLAIN\\nSELECT\\n  coalesce(json_agg(row_to_json(\\\"%5_universe\\\")), '[]') AS \\\"universe\\\"\\nFROM\\n  (\\n    SELECT\\n      *\\n    FROM\\n      (\\n        SELECT\\n          coalesce(json_agg(row_to_json(\\\"%6_rows\\\")), '[]') AS \\\"rows\\\"\\n        FROM\\n          (\\n            SELECT\\n              \\\"%0_Album\\\".\\\"AlbumId\\\" AS \\\"AlbumId\\\",\\n              \\\"%0_Album\\\".\\\"ArtistId\\\" AS \\\"ArtistId\\\",\\n              \\\"%0_Album\\\".\\\"ArtistId\\\" AS \\\"__hasura_phantom_field__ArtistId\\\",\\n              \\\"%1_RELATIONSHIP_Tracks\\\".\\\"Tracks\\\" AS \\\"Tracks\\\"\\n            FROM\\n              \\\"public\\\".\\\"Album\\\" AS \\\"%0_Album\\\"\\n              LEFT OUTER JOIN LATERAL (\\n                SELECT\\n                  row_to_json(\\\"%1_RELATIONSHIP_Tracks\\\") AS \\\"Tracks\\\"\\n                FROM\\n                  (\\n                    SELECT\\n                      *\\n                    FROM\\n                      (\\n                        SELECT\\n                          coalesce(json_agg(row_to_json(\\\"%3_rows\\\")), '[]') AS \\\"rows\\\"\\n                        FROM\\n                          (\\n                            SELECT\\n                              \\\"%2_Track\\\".\\\"TrackId\\\" AS \\\"TrackId\\\",\\n                              \\\"%2_Track\\\".\\\"AlbumId\\\" AS \\\"__hasura_phantom_field__AlbumId\\\"\\n                            FROM\\n                              \\\"public\\\".\\\"Track\\\" AS \\\"%2_Track\\\"\\n                            WHERE\\n                              (\\\"%0_Album\\\".\\\"AlbumId\\\" = \\\"%2_Track\\\".\\\"AlbumId\\\")\\n                          ) AS \\\"%3_rows\\\"\\n                      ) AS \\\"%3_rows\\\"\\n                  ) AS \\\"%1_RELATIONSHIP_Tracks\\\"\\n              ) AS \\\"%1_RELATIONSHIP_Tracks\\\" ON ('true')\\n          ) AS \\\"%6_rows\\\"\\n      ) AS \\\"%6_rows\\\"\\n  ) AS \\\"%5_universe\\\"\"\n              }\n            }\n          }\n        }\n      },\n      {\n        \"type\": \"parallel\",\n        \"value\": [\n          {\n            \"type\": \"forEach\",\n            \"value\": {\n              \"type\": \"modelSelect\",\n              \"value\": {\n                \"modelName\": \"Artist\",\n                \"queryRequest\": {\n                  \"collection\": \"Artist\",\n                  \"query\": {\n                    \"fields\": {\n                      \"ArtistId\": {\n                        \"type\": \"column\",\n                        \"column\": \"ArtistId\"\n                      }\n                    },\n                    \"where\": {\n                      \"type\": \"binary_comparison_operator\",\n                      \"column\": {\n                        \"type\": \"column\",\n                        \"name\": \"ArtistId\",\n                        \"path\": []\n                      },\n                      \"operator\": {\n                        \"type\": \"equal\"\n                      },\n                      \"value\": {\n                        \"type\": \"variable\",\n                        \"name\": \"$ArtistId\"\n                      }\n                    }\n                  },\n                  \"arguments\": {},\n                  \"collection_relationships\": {},\n                  \"variables\": []\n                },\n                \"ndcExplain\": {\n                  \"type\": \"response\",\n                  \"value\": {\n                    \"details\": {\n                      \"Execution Plan\": \"\",\n                      \"SQL Query\": \"EXPLAIN\\nSELECT\\n  coalesce(json_agg(\\\"%5_universe_agg\\\".\\\"universe\\\"), '[]') AS \\\"universe\\\"\\nFROM\\n  (\\n    SELECT\\n      row_to_json(\\\"%2_universe\\\") AS \\\"universe\\\"\\n    FROM\\n      json_to_recordset(cast($1 as json)) AS \\\"%0_%variables_table\\\"(\\\"%variable_order\\\" int)\\n      CROSS JOIN LATERAL (\\n        SELECT\\n          *\\n        FROM\\n          (\\n            SELECT\\n              coalesce(json_agg(row_to_json(\\\"%3_rows\\\")), '[]') AS \\\"rows\\\"\\n            FROM\\n              (\\n                SELECT\\n                  \\\"%1_Artist\\\".\\\"ArtistId\\\" AS \\\"ArtistId\\\"\\n                FROM\\n                  \\\"public\\\".\\\"Artist\\\" AS \\\"%1_Artist\\\"\\n                WHERE\\n                  (\\n                    \\\"%1_Artist\\\".\\\"ArtistId\\\" = cast(\\\"%0_%variables_table\\\".\\\"$ArtistId\\\" as int4)\\n                  )\\n              ) AS \\\"%3_rows\\\"\\n          ) AS \\\"%3_rows\\\"\\n      ) AS \\\"%2_universe\\\"\\n    ORDER BY\\n      \\\"%0_%variables_table\\\".\\\"%variable_order\\\" ASC\\n  ) AS \\\"%5_universe_agg\\\"\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"type\": \"sequence\",\n            \"value\": [\n              {\n                \"type\": \"forEach\",\n                \"value\": {\n                  \"type\": \"modelSelect\",\n                  \"value\": {\n                    \"modelName\": \"Album\",\n                    \"queryRequest\": {\n                      \"collection\": \"Album\",\n                      \"query\": {\n                        \"fields\": {\n                          \"AlbumId\": {\n                            \"type\": \"column\",\n                            \"column\": \"AlbumId\"\n                          }\n                        },\n                        \"where\": {\n                          \"type\": \"binary_comparison_operator\",\n                          \"column\": {\n                            \"type\": \"column\",\n                            \"name\": \"AlbumId\",\n                            \"path\": []\n                          },\n                          \"operator\": {\n                            \"type\": \"equal\"\n                          },\n                          \"value\": {\n                            \"type\": \"variable\",\n                            \"name\": \"$AlbumId\"\n                          }\n                        }\n                      },\n                      \"arguments\": {},\n                      \"collection_relationships\": {},\n                      \"variables\": []\n                    },\n                    \"ndcExplain\": {\n                      \"type\": \"response\",\n                      \"value\": {\n                        \"details\": {\n                          \"Execution Plan\": \"\",\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Found Resources with DDN CLI\nDESCRIPTION: This command shows the resources found during the introspection process for a specific connector using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn auth print-promptql-secret-key in Bash\nDESCRIPTION: Examples demonstrating how to use the ddn auth print-promptql-secret-key command to print the PromptQL secret key. The first example shows the default usage, while the second shows how to output the key in JSON format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Print the PromptQL secret key of the project set in the context\n ddn auth print-promptql-secret-key\n\n# Print PromptQL secret key as JSON\n ddn auth print-promptql-secret-key --out json\n```\n\n----------------------------------------\n\nTITLE: Initializing Project - Shell\nDESCRIPTION: This command initializes a new DDN project to prepare for deploying the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Checking AWS CloudFormation Stack Existence\nDESCRIPTION: This Bash command checks if the Hasura Cloud BYOC CloudFormation stack already exists in the AWS account.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name hasura-cloud-byoc\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution in GraphQL with Hasura\nDESCRIPTION: This GraphQL query demonstrates parallel execution of steps. The execution plan will have a Parallel step as it can fetch Department and Census data in parallel.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery ParallelExecution {\n  cities {\n    # Backed by a model\n    code\n    name\n    departments {\n      # Remote relationship\n      name\n      ministers {\n        name\n      }\n    }\n    census {\n      # Remote relationship\n      data\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN\nDESCRIPTION: Command to introspect a MongoDB instance using the DDN connector framework. This helps discover available collections and schemas.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Array Column Type\nDESCRIPTION: Defines an array column type in a table definition, specifying that the column contains an array of values of a particular PostgreSQL data type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"type\": { \"arrayType\": { \"scalarType\": \"varchar\" } }\n```\n\n----------------------------------------\n\nTITLE: Negative Case-Insensitive Search Using _nilike in GraphQL\nDESCRIPTION: Demonstrates using the _nilike operator to exclude records containing specific text patterns, finding all users whose names don't contain 'John' case-insensitively.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithNameNotLike {\n  users(where: { name: { _nilike: \"%John%\" } }) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Oracle SQL*PLUS Shell\nDESCRIPTION: Docker command to access the SQL*PLUS shell in the Oracle container for executing SQL commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it oracle-server sqlplus example/mypassword@local.hasura.dev:1521/XEPDB1\n```\n\n----------------------------------------\n\nTITLE: Native Query Configuration with Inline and Parameterized Queries\nDESCRIPTION: Demonstrates two types of native query configurations: an inline query and a parameterized query with dynamic parameter handling.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [{\n        \"type\": \"text\",\n        \"value\": \"SELECT 1 AS result FROM DUAL\"\n      }]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    }\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\"type\": \"named\", \"name\": \"INT\"},\n      \"NAME\": {\"type\": \"nullable\", \"underlying_type\": {\"type\": \"named\", \"name\": \"STRING\"}}\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"type\": {\"type\": \"named\", \"name\": \"INT\"}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn model show\nDESCRIPTION: Available options specific to the 'ddn model show' command, including context selection, CI mode, pattern matching, and subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Basic JSON:API Error Response Structure\nDESCRIPTION: Demonstrates the basic structure of an error response containing status code and message in the errors array.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/errors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"404\",\n      \"detail\": \"invalid route or path\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Model Commands in Hasura DDN CLI\nDESCRIPTION: Options inherited from parent operations that apply to all model subcommands, including logging level, prompt control, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn context get-context in SASS\nDESCRIPTION: Lists the command-specific options available for the 'ddn context get-context' command, showing only the help flag in this case.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for get-context\n```\n\n----------------------------------------\n\nTITLE: Returning HTTP Headers in TypeScript Lambda Function\nDESCRIPTION: Modifies the 'hello' function to return both HTTP headers and the response using the HeadersResponse type. It adds a new header 'X-Test-ResponseHeader' to the response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/** @readonly */\nexport function hello(headers: sdk.JSONValue, name?: string): HeadersResponse<string> {\n  const headersMap = headers.value as Record<string, string>;\n  headersMap[\"X-Test-ResponseHeader\"] = \"I set this in the code\";\n  return {\n    headers: new sdk.JSONValue(headersMap),\n    response: `hello ${name ?? \"world\"}`\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use the Users model defined earlier. It shows filtering by name, ordering by creation date, and limiting the number of results. The query retrieves id, name, email, and createdAt fields for each user.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersQuery {\n  users(where: { name: { _eq: \"Bob\" } }, order_by: { createdAt: Asc }, limit: 10) {\n    id\n    name\n    email\n    createdAt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL and Adminer Docker Services\nDESCRIPTION: Command to start the PostgreSQL database and Adminer UI using Docker Compose for the local development environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_pg/compose.postgres-adminer.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Command using DDN CLI (Go)\nDESCRIPTION: This command updates a specific command named 'shoutName' for the 'my_go' connector. This allows for targeted updates to command metadata without affecting other commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"ddn command update my_go shoutName\"\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn connector build get in Sass Format\nDESCRIPTION: List of command-specific flags and options that can be used with the ddn connector build get command. These options allow filtering of ConnectorBuilds by connector, project, or subgraph, and control other aspects of command behavior.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                      Disables the use of context\n    --connector string        Path to Connector YAML config file\n    --connector-name string   Connector name\n-c, --context string          Name of the context to use. (default <current_context>)\n-h, --help                    help for get\n-p, --project string          DDN Project name\n    --schema                  Get NDC schema of ConnectorBuild\n    --subgraph-name string    Subgraph name\n```\n\n----------------------------------------\n\nTITLE: Provisioning Subgraphs in Hasura DDN Cloud Project\nDESCRIPTION: Creates two subgraphs ('customers' and 'billing') in the cloud project. This sets up the structure for independent development of these components.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn project subgraph create customers && ddn project subgraph create billing\n```\n\n----------------------------------------\n\nTITLE: Adding Trino Model to Hasura DDN Metadata\nDESCRIPTION: Tracks the 'users' table from Trino server as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_trino users\n```\n\n----------------------------------------\n\nTITLE: Returning HTTP Headers in Go Lambda Function\nDESCRIPTION: Updates the 'hello' function in Go to return both HTTP headers and the response using the HeadersResponse type. It adds a new header 'X-Test-ResponseHeader' to the response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc FunctionHello(ctx context.Context, state *State, arguments *HelloArguments) (HeadersResponse[string], error) {\n  headersMap := arguments.Headers\n  if headersMap == nil {\n    headersMap = map[string]string{}\n  }\n  headersMap[\"X-Test-ResponseHeader\"] = \"I set this in the code\"\n\n  name := arguments.Name\n  if name == \"\" {\n    name = \"world\"\n  }\n\n  return HeadersResponse[string]{\n    Headers:  headersMap,\n    Response: \"hello \" + name,\n  }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building the v3-engine Docker image\nDESCRIPTION: This command builds the Docker image for the v3-engine, tagging it with the user's registry and a specified version. This makes the image ready for use.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <your_registry>/v3-engine:<your_tag> .\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Connector in Hasura DDN\nDESCRIPTION: Command to initialize the Stripe connector in interactive mode, which prompts for configuration options and authentication details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_stripe -i\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Create a new local Hasura DDN project and navigate to its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Initializing Trino Connector\nDESCRIPTION: Initializes a Trino connector for the Hasura DDN project with a JDBC URL for PostgreSQL connection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_trino -i\n```\n\n----------------------------------------\n\nTITLE: Configuring Connector Tracing Variables in Hasura DDN\nDESCRIPTION: Environment variables required for self-hosted connectors to enable trace visibility in the DDN console. These variables set the OpenTelemetry exporter endpoint and authorization headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/traces.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT: \"https://gateway.otlp.hasura.io:443\"\nOTEL_EXPORTER_OTLP_HEADERS: \"Authorization=pat <personal-access-token>\"\n```\n\n----------------------------------------\n\nTITLE: Auth0 Service Account Token Response\nDESCRIPTION: Example JSON response format when generating a service account access token from Auth0.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"<service account access token>\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Types in JSON\nDESCRIPTION: This snippet shows how to create array types using JSON by encapsulating another type within an object that contains an 'arrayOf' property. Each element in the array adheres to the specified type, ensuring uniformity.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/type-expressions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"arrayOf\": { \"scalar\": \"string\" } }\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Buckets with GraphQL\nDESCRIPTION: GraphQL query to retrieve all available storage buckets from the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_ALL_BUCKETS {\n  storageBuckets(args: {}) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subgraph Configuration - YAML\nDESCRIPTION: YAML configuration for including the allowlist plugin in the subgraph and mapping environment variables\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: globals\n  ...\n  includePaths:\n    ...\n    - allowlist-plugin.hml\n  envMapping:\n    ALLOW_LIST_URL:\n      fromEnv: ALLOW_LIST_URL\n    M_AUTH_KEY:\n      fromEnv: M_AUTH_KEY\n```\n\n----------------------------------------\n\nTITLE: Aggregating Metrics with PromQL Functions\nDESCRIPTION: Illustrates how to perform metric aggregation using PromQL functions within a GraphQL query. This example applies the `rate` and `sum by job` functions to the 'process_cpu_seconds_total' metric.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  process_cpu_seconds_total(\n    where: { timestamp: { _gt: \"2024-09-24T10:00:00Z\" } }\n    args: { step: \"5m\", fn: [{ rate: \"5m\" }, { sum: [job] }] }\n  ) {\n    job\n    timestamp\n    value\n    values {\n      timestamp\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Response for Admin Requests in Hasura DDN\nDESCRIPTION: Example of a webhook response to Hasura DDN for admin-level requests. The response includes the X-Hasura-Role header set to 'admin'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/special-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-Role\": \"admin\",\n}\n```\n\n----------------------------------------\n\nTITLE: Object Fields Configuration for a Single Collection in Turso Connector\nDESCRIPTION: Demonstrates how to configure metadata for a collection's fields, including data types, primary keys, and other constraints for a 'users' table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/turso/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"users\": {\n    \"field_names\": [\"id\", \"name\", \"age\"],\n    \"field_types\": {\n      \"id\": \"Int\",\n      \"name\": \"String\",\n      \"age\": \"Int\"\n    },\n    \"primary_keys\": [\"id\"],\n    \"unique_keys\": [],\n    \"nullable_keys\": [],\n    \"foreign_keys\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring DataConnectorCommand in Markdown\nDESCRIPTION: Defines the structure for a data connector command, which can be backed by either a function or a procedure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#### DataConnectorCommand {#command-dataconnectorcommand}\n\nThe function/procedure in the data connector that backs this command.\n\n\n**Must have exactly one of the following fields:**\n\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `function` | [FunctionName](#command-functionname) | false | The name of a function backing the command. |\n| `procedure` | [ProcedureName](#command-procedurename) | false | The name of a procedure backing the command. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Aliases in DuckDB Connector\nDESCRIPTION: Mapping of collection names to their full database paths, allowing simplified referencing of collections within the connector configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/duckdb/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection_aliases\": {\n    \"posts\": \"data.main.posts\",\n    \"users\": \"data.main.users\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Self-Hosted Engine URL Command\nDESCRIPTION: Example showing how to set a project URL to 'example.com:3000' for a specific project using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set project URL to \"example.com:3000\" for project \"pet-lion-2649\"\n ddn project set-self-hosted-engine-url example.com:3000 --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Headers in DataConnectorLink\nDESCRIPTION: Updates the DataConnectorLink metadata to specify which headers returned by connector functions should be included in the HTTP response. It also sets the 'headersField' and 'resultField' properties.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: my_ts\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: MY_SUBGRAPH_MY_TS_READ_URL\n      write:\n        valueFromEnv: MY_SUBGRAPH_MY_TS_WRITE_URL\n  headers:\n    Authorization:\n      valueFromEnv: MY_SUBGRAPH_MY_TS_AUTHORIZATION_HEADER\n  argumentPresets:\n    - argument: headers\n      value:\n        httpHeaders:\n          forward:\n            - X-Test-Header\n          additional: {}\n  responseHeaders:\n    headersField: headers\n    resultField: response\n    forwardHeaders:\n      - X-Test-Header\n      - X-Test-ResponseHeader\n  schema: ...\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Regex Search Using _iregex in GraphQL\nDESCRIPTION: Demonstrates case-insensitive regular expression matching using _iregex to find users whose names match specific patterns regardless of case.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithRegex {\n  users(where: { name: { _iregex: \"/^joh?n$/i\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Oracle JDBC Connection URL\nDESCRIPTION: JDBC URL format for connecting to the Oracle database with authentication credentials.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:oracle:thin:@local.hasura.dev:1521/XEPDB1?user=example&password=mypassword\n```\n\n----------------------------------------\n\nTITLE: Default Deprecation Configuration\nDESCRIPTION: Shows how to use default deprecation without specifying a reason, which results in the standard 'No longer supported' message.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/versioning.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: V1\ndefinition:\n  name: Car\n  fields:\n    - name: Id\n      type: String\n    - name: make\n      type: String\n    - name: model\n      type: String\n    - name: engine\n      type: String\n      deprecated:\n        reason: null\n    - name: motor\n      type: String\n  graphql:\n    typeName: Car\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Car {\n  Id: String\n\n  model: String\n  engine: String @deprecated(reason: \"No longer supported\")\n  motor: String\n}\n```\n\n----------------------------------------\n\nTITLE: Descending Field Sorting in Hasura JSON:API\nDESCRIPTION: Shows how to fetch all articles sorted by views in descending order. Includes both the HTTP request and the JSON response format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/sorting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?sort=-views\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Articles\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"Popular Article\",\n        \"views\": 2000\n      }\n    },\n    {\n      \"type\": \"Articles\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"Less Popular Article\",\n        \"views\": 1500\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Command to open the local Hasura DDN console with GraphiQL explorer for testing queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Webhook Body in YAML\nDESCRIPTION: Example configuration for the body to be sent to the POST authentication webhook, specifying headers to be forwarded.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  forward:\n    - Authorization\n  additional: {}\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance in Hasura DDN\nDESCRIPTION: Executes the introspection process on the PostgreSQL instance to discover and analyze its schema and structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Request Format in Hasura JSON:API\nDESCRIPTION: Demonstrates the basic HTTP GET request format for implementing pagination using page[limit] and page[offset] parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/<subgraph-name>/<model-name>?page[limit]=<limit>&page[offset]=<offset>\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Supergraph Build in One Command\nDESCRIPTION: This snippet presents an optimized command to create and apply a supergraph build simultaneously, aimed at streamlining the CI/CD process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create --apply\n```\n\n----------------------------------------\n\nTITLE: Function Definition Configuration\nDESCRIPTION: Illustrates how to define a function within the connector configuration, including metadata like catalog, schema, name, and signature.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function_catalog\": \"public\",\n  \"function_schema\": \"public\",\n  \"function_name\": \"add\",\n  \"argument_signature\": \"(N NUMBER, M NUMBER)\",\n  \"data_type\": \"TABLE (N NUMBER, M NUMBER)\",\n  \"comment\": \"Adds two numbers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository\nDESCRIPTION: This snippet shows how to clone a public or private GitHub repository for DDN supergraph metadata. The public clone command requires a direct URL, while the private clone command uses a personal access token for authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-org>/<your-repo>.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://username:<pat>@github.com/<your-account-or-org>/<repo>.git\n```\n\n----------------------------------------\n\nTITLE: API Key Usage Example\nDESCRIPTION: This snippet demonstrates how the API key is used in the header. The `{{API_KEY}}` placeholder is replaced with the actual value of the `API_KEY` environment variable at runtime. It shows how to include the API key in the HTTP request.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\napi_key: {{API_KEY}}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Settings for Aggregation\nDESCRIPTION: Sets up the GraphQL configuration including aggregate settings for count and distinct count operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/aggregate-expressions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GraphqlConfig\nversion: v1\ndefinition:\n  query:\n    rootOperationTypeName: Query\n    argumentsInput:\n      fieldName: args\n    limitInput:\n      fieldName: limit\n    offsetInput:\n      fieldName: offset\n    filterInput:\n      fieldName: where\n      operatorNames:\n        and: _and\n        or: _or\n        not: _not\n        isNull: _is_null\n    orderByInput:\n      fieldName: order_by\n      enumDirectionValues:\n        asc: Asc\n        desc: Desc\n      enumTypeNames:\n        - directions:\n            - Asc\n            - Desc\n          typeName: OrderBy\n    aggregate:\n      filterInputFieldName: filter_input\n      countFieldName: _count\n      countDistinctFieldName: _count_distinct\n  mutation:\n    rootOperationTypeName: Mutation\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Lifecycle Plugin Hooks\nDESCRIPTION: YAML configuration for pre-parse and pre-response plugin hooks, defining the plugin endpoints and authentication headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: Pre-Parse Plugin\n  url:\n    valueFromEnv: PRE_PARSE_URL\n  pre: parse\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: \"super-secret-key\"\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n\n---\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: Pre-Response Plugin\n  url:\n    valueFromEnv: PRE_RESPONSE_URL\n  pre: response\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: \"super-secret-key\"\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Posts in GraphQL\nDESCRIPTION: This GraphQL query retrieves users with their associated posts, demonstrating the newly created relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithPosts {\n  users {\n    name\n    age\n    posts {\n      id\n      content\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic (Go)\nDESCRIPTION: Implements a 'shoutName' function in Go that converts a name to uppercase.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n\t\"context\"\n\t\"strings\"\n\n\t\"hasura-ndc.dev/ndc-go/types\"\n)\n\n// UppercaseNameArguments represents the input arguments for converting a Name to uppercase.\ntype UppercaseNameArguments struct {\n\tName string `json:\"Name\"`\n}\n\n// FunctionShoutName converts the Name to uppercase and returns it as a string.\nfunc FunctionShoutName(ctx context.Context, state *types.State, arguments *UppercaseNameArguments) (string, error) {\n\tuppercase := strings.ToUpper(arguments.Name)\n\treturn uppercase, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Command with DDN CLI in Shell\nDESCRIPTION: This snippet updates a specific command in a Python lambda connector using the DDN CLI. The 'ddn command update' command is employed with the connector name and the command to update as parameters. This requires the connector to have been previously introspected. The outcome is the updated command metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_py shout_name\n```\n\n----------------------------------------\n\nTITLE: Defining Schemas to Include\nDESCRIPTION: The snippet demonstrates how to specify which database schemas to include in the introspection process. If omitted, all schemas are considered by default.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"public\", \"other_schema\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Field Deprecation Example\nDESCRIPTION: Demonstrates basic field deprecation syntax in a GraphQL type definition for a Car type, showing how to mark the 'engine' field as deprecated in favor of 'motor'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/versioning.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Car {\n  id: ID!\n  make: String!\n  model: String!\n  engine: EngineSpec @deprecated(reason: \"Use field 'motor' instead\")\n  motor: MotorSpec\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that apply to all ddn connector commands, including log level configuration, prompt behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Options for DDN Supergraph Prune Command in SASS\nDESCRIPTION: These are the available options for the 'ddn supergraph prune' command. They include flags for disabling context use, specifying a context, performing a dry run, and setting the path to the Supergraph config file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_prune.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n    --dry-run             Perform a dry run only. The changes won't be applied\n-h, --help                help for prune\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Command Field Deprecation Configuration\nDESCRIPTION: Demonstrates how to deprecate a command in Hasura's metadata configuration with a specific deprecation reason.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/versioning.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Command\nversion: V1\ndefinition:\n  name: GetEngineSpec\n  outputType: Engine\n  graphql:\n    rootFieldName: getEngineSpec\n    rootFieldKind: Query\n    deprecated:\n      reason: \"Fuel Engines are no longer supported from Jan 01 2035\"\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  getEngineSpec: Engine @deprecated(reason: \"Fuel Engines are no longer supported from Jan 01 2035\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NoAuth Mode in YAML\nDESCRIPTION: Example configuration for running the engine without authentication, specifying a role and session variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrole: admin\nsessionVariables:\n  x-hasura-user-id: '100'\n```\n\n----------------------------------------\n\nTITLE: Using Concatenation in SQL LIKE Patterns - SQL\nDESCRIPTION: This snippet illustrates how to use string arguments in SQL LIKE predicates by concatenating the argument with pattern parts. The use of the `||` operator enables dynamic pattern matching with user-defined variables in Hasura Native Operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/syntax.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"Artist\" WHERE \"Name\" LIKE '%' || {{name}} || '%'\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn supergraph build local in SASS\nDESCRIPTION: These are the available options for the 'ddn supergraph build local' command, including flags for CI mode, context, environment variables, output directory, and supergraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for local\n    --output-dir string      Path to the engine directory to output the build artifacts. (defaults to `<project-root>/engine/build)\n    --supergraph string      Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Native Mutation for User Insertion\nDESCRIPTION: JSON configuration for a native mutation that inserts a user record into MongoDB. Defines the mutation name, arguments, result type structure, and the MongoDB command to execute.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// native_mutations/insert_user.json\n{\n  \"name\": \"insertUser\",\n  \"description\": \"Inserts a user record into the database\",\n\n  \"arguments\": {\n    \"name\": { \"type\": { \"scalar\": \"string\" } }\n  },\n\n  \"resultType\": {\n    \"object\": \"InsertUser\"\n  },\n  \"objectTypes\": {\n    \"InsertUser\": {\n      \"fields\": {\n        \"ok\": { \"type\": { \"scalar\": \"double\" } },\n        \"n\": { \"type\": { \"scalar\": \"int\" } }\n      }\n    }\n  },\n\n  \"command\": {\n    \"insert\": \"users\",\n    \"documents\": [{ \"name\": \"{{ name }}\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Request Format in Hasura JSON:API\nDESCRIPTION: Demonstrates the HTTP GET request format for filtering models in Hasura's JSON:API implementation. It shows how to structure the request URL with subgraph name, model name, and filter expression.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/filters.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/<subgraph-name>/<model-name>?filter=<expression>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Nested GraphQL Query in Hasura DDN\nDESCRIPTION: This JSON response shows the result of executing the nested query with relationships. It returns an array of posts, each containing its own metadata along with the complete user object that created the post, demonstrating how relationships work in the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"id\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Extended JSON Example\nDESCRIPTION: This code snippet shows an example of how a BSON integer value (3) is converted to JSON using the MongoDB Extended JSON specification. The result includes an inline type tag ($numberInt) to preserve type information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/extended-json.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$numberInt\": \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from GraphQL Query\nDESCRIPTION: This JSON object represents the expected response from the 'ShoutTheName' GraphQL query. It contains the 'data' field with the 'shoutName' key holding the uppercase value 'ALICE'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"shoutName\": \"ALICE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auth0 Service Account Credentials Exchange\nDESCRIPTION: JavaScript code for Auth0 Action that configures custom claims for service account access tokens during credentials exchange.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecuteCredentialsExchange = async (event, api) => {\n  const namespace = \"claims.jwt.hasura.io\";\n\n  const service_role = \"service_account\";\n\n  api.accessToken.setCustomClaim(namespace, {\n    \"x-hasura-default-role\": service_role,\n    \"x-hasura-allowed-roles\": [service_role],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for NoAuth Mode in YAML\nDESCRIPTION: This YAML snippet shows how to configure the AuthConfig file for NoAuth mode in Hasura DDN. It sets the role to 'admin' and leaves session variables empty.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: admin\n      sessionVariables: {}\n```\n\n----------------------------------------\n\nTITLE: Checking Enabled AWS Regions using AWS CLI\nDESCRIPTION: This command uses the AWS CLI to list all enabled regions in your AWS account. It's a prerequisite step to ensure the target deployment region is available.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws account get-regions --region-opt-status-contains ENABLED --query 'Regions[*].RegionName'\n```\n\n----------------------------------------\n\nTITLE: Defining ClickHouse Native Query Configuration\nDESCRIPTION: JSON configuration that specifies the SQL file path and return type structure for a ClickHouse native query. Defines the query exposure settings and expected column definitions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": {},\n  \"queries\": {\n    \"Name\": {\n      \"exposed_as\": \"collection\",\n      \"file\": \"path/to/sql_file_name.sql\",\n      \"return_type\": {\n        \"kind\": \"definition\",\n        \"columns\": {\n          \"column_name\": \"column_type\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Query GraphQL Usage Example\nDESCRIPTION: GraphQL query demonstrating how to invoke a Native Query with parameters\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  artist_by_name_between(name: \"Black\", lower_bound: 10, upper_bound: 50) {\n    ArtistId\n    Name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying AI-generated SEO Descriptions\nDESCRIPTION: This GraphQL snippet illustrates how to query an AI-generated SEO description using OpenAI's capabilities integrated with a Hasura supergraph. It assumes a previously defined function 'generateSeoDescription' taking a string input and returning a descriptive text.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery SimpleOpenAIQuery {\n  generateSeoDescription(input: \"A cool, red hat.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Building the GraphQL Connector using DDN CLI in Bash\nDESCRIPTION: This code snippet provides the command to build a GraphQL connector using the DDN CLI. It specifies the path to the connector's configuration file that needs to be provided for the build process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/graphQL/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_graphql/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Environment Variables - Bash\nDESCRIPTION: Environment variable configuration for the allowlist plugin\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nALLOW_LIST_URL=\"http://local.hasura.dev:8787\"\nM_AUTH_KEY=\"your-strong-m-auth-key\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example with Line Highlighting\nDESCRIPTION: A GraphQL query example showing filtered authors and their articles with a rating greater than 4. Includes line highlighting for specific query parts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn context unset Command\nDESCRIPTION: Examples demonstrating how to use the ddn context unset command to unset specific values in the context, such as project name and supergraph config file path.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Unset the Project name set in the context\n ddn context unset project\n\n# Unset the Supergraph config file path set in the context\n ddn context unset supergraph\n```\n\n----------------------------------------\n\nTITLE: Model Permission Role Configuration in YAML\nDESCRIPTION: Example showing model permission configuration for a user role with filters and argument presets.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\nselect:\n  filter:\n    fieldComparison:\n      field: author_id\n      operator: _eq\n      value:\n        sessionVariable: x-hasura-user-id\n  argument_presets:\n    - field: likes_dogs\n      value:\n        literal: true\n```\n\n----------------------------------------\n\nTITLE: Creating the releases directory with connector-packaging.json\nDESCRIPTION: This shows the required file structure for releases within a connector's directory.  The `connector-packaging.json` file contains metadata about the connector version, URI, and checksum. The release version follows semantic versioning (e.g., `v1.0.0`).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"registry/\\n  └── [namespace]/\\n      └── [connector-name]/\\n          └── releases/\\n              └── v1.0.0/\\n                  └── connector-packaging.json\"\n```\n\n----------------------------------------\n\nTITLE: JDBC Properties Configuration for Trino\nDESCRIPTION: Example of how to configure additional JDBC properties for the Trino connector, showing how to enable multiple statements in MySQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcProperties\": { \"allowMultiQueries\": \"true\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ClickHouse Model to DDN\nDESCRIPTION: Adds the 'comments' table from the 'my_clickhouse' instance as a model in DDN. This step integrates the ClickHouse table into the DDN ecosystem.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn model add my_clickhouse comments\n```\n\n----------------------------------------\n\nTITLE: Data Connector Scalar Representation Example in YAML\nDESCRIPTION: Example showing how to define a data connector scalar representation that maps a 'varchar' type from a data connector to the 'String' type in Open DD, with custom GraphQL configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/data-connector-links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndataConnectorName: data_connector\ndataConnectorScalarType: varchar\nrepresentation: String\ngraphql:\n  comparisonExpressionTypeName: String_Comparison_Exp\n```\n\n----------------------------------------\n\nTITLE: Example \"hello\" Native Query Configuration\nDESCRIPTION: This JSON configuration defines a simple native query named \"hello\" that takes a string argument \"name\" and returns a string value. It demonstrates the structure of a native query configuration file, including the name, representation, description, arguments, result document type, object types, and the aggregation pipeline.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello\",\n  \"representation\": \"function\",\n  \"description\": \"Basic test of native queries\",\n  \"arguments\": {\n    \"name\": { \"type\": { \"scalar\": \"string\" } }\n  },\n  \"resultDocumentType\": \"Hello\",\n  \"objectTypes\": {\n    \"Hello\": {\n      \"fields\": {\n        \"__value\": { \"type\": { \"scalar\": \"string\" } }\n      }\n    }\n  },\n  \"pipeline\": [\n    {\n      \"$documents\": [\n        {\n          \"__value\": { \"$literal\": \"{{ name }}\" }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Source Introspection in DDN\nDESCRIPTION: This command updates the introspection for a specific connector in DDN to reflect changes in the data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Docker Login Command to Update GitHub Token\nDESCRIPTION: This command is used to log in to Docker with a new GitHub Personal Access Token (PAT) which is necessary when the token used for the Docker credentials store is invalid.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho \"<GH_PAT>\" | docker login ghcr.io -u <YOUR_GITHUB_USERNAME> --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Launching DDN Services with New Mutation\nDESCRIPTION: Starts the DDN Docker container and console to serve the newly built API with the MongoDB mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Webhook Headers in YAML\nDESCRIPTION: Example configuration for headers to be forwarded and additional headers to be sent to the authentication webhook.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nforward:\n  - Authorization\nadditional:\n  user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Hasura DDN Project\nDESCRIPTION: These shell commands rebuild the Hasura DDN project after metadata changes. It creates a new build and restarts the services to apply the changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Specific Fields Query HTTP Request Format\nDESCRIPTION: HTTP GET request format for fetching specific fields from a model using the fields parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/<subgraph-name>/<model-name>?fields[<model-object-type>]=<field1>,<field2>\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Table in Adminer\nDESCRIPTION: SQL query to verify the data insertion by selecting all records from the 'users' table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Example of Using ddn connector setenv\nDESCRIPTION: Practical example showing how to set environment variables for a connector data source and run npm start with those variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set environment variables for the Connector data source\n ddn connector setenv --connector ./foo/my_db.connector.local.yaml -- npm run start\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Sample Transaction Data into Elasticsearch\nDESCRIPTION: Populates the transactions index with sample transaction data using Elasticsearch's bulk API, demonstrating the link to customers via customer_id.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \"http://localhost:9200/_bulk\" -u elastic:elastic -H 'Content-Type: application/json' -d'\n{ \"index\": { \"_index\": \"transactions\", \"_id\": \"1\" } }\n{ \"transaction_id\": \"TXN001\", \"timestamp\": \"2024-09-01T12:00:00\", \"customer_id\": \"CUST001\", \"transaction_details\": { \"item_id\": \"ITEM001\", \"item_name\": \"Laptop\", \"price\": 999.99, \"quantity\": 1, \"currency\": \"USD\" } }\n{ \"index\": { \"_index\": \"transactions\", \"_id\": \"2\" } }\n{ \"transaction_id\": \"TXN002\", \"timestamp\": \"2024-09-02T14:30:00\", \"customer_id\": \"CUST002\", \"transaction_details\": { \"item_id\": \"ITEM002\", \"item_name\": \"Smartphone\", \"price\": 599.99, \"quantity\": 2, \"currency\": \"USD\" } }\n{ \"index\": { \"_index\": \"transactions\", \"_id\": \"3\" } }\n{ \"transaction_id\": \"TXN003\", \"timestamp\": \"2024-09-03T09:45:00\", \"customer_id\": \"CUST003\", \"transaction_details\": { \"item_id\": \"ITEM003\", \"item_name\": \"Tablet\", \"price\": 299.99, \"quantity\": 1, \"currency\": \"USD\" } }\n{ \"index\": { \"_index\": \"transactions\", \"_id\": \"4\" } }\n{ \"transaction_id\": \"TXN004\", \"timestamp\": \"2024-09-04T16:15:00\", \"customer_id\": \"CUST004\", \"transaction_details\": { \"item_id\": \"ITEM004\", \"item_name\": \"Headphones\", \"price\": 199.99, \"quantity\": 1, \"currency\": \"USD\" } }\n{ \"index\": { \"_index\": \"transactions\", \"_id\": \"5\" } }\n{ \"transaction_id\": \"TXN005\", \"timestamp\": \"2024-09-05T11:30:00\", \"customer_id\": \"CUST005\", \"transaction_details\": { \"item_id\": \"ITEM005\", \"item_name\": \"Monitor\", \"price\": 149.99, \"quantity\": 2, \"currency\": \"USD\" } }\n'\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect a MongoDB instance named 'my_mongo'. It's typically used after modifying the native mutation to update the connector's understanding of the database structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI\nDESCRIPTION: Command to authenticate the Hasura DDN CLI\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Introspecting the connector\nDESCRIPTION: This command introspects the connector named `my_ts`. Introspection allows the system to understand the capabilities and structure of the connector, including its functions and schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector introspect my_ts\"\n```\n\n----------------------------------------\n\nTITLE: Delete and add relationship with DDN CLI\nDESCRIPTION: This command deletes an existing relationship and adds it again using the DDN CLI. Replace `<connector_link_name>` with the connector link name and `<collection_name>` with the collection name. This is one method to update a relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn relationship add <connector_link_name> <collection_name>\"\n```\n\n----------------------------------------\n\nTITLE: Relationship Field Deprecation\nDESCRIPTION: Demonstrates how to deprecate relationship fields in Hasura with a specific deprecation reason.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/versioning.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: V1\ndefinition:\n  name: engineSpec\n  source: Car\n  target:\n    command:\n    name: GetEngineSpec\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: engine\n      target:\n        argument:\n          argumentName: name\n  deprecated:\n    reason: Engines on cars are no longer supported from Jan 01 2035\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Car {\n  Id: String\n  make: String\n  model: String\n  engine: String @deprecated(reason: \"Use motor field instead\")\n  motor: String\n  engineSpec: Engine @deprecated(reason: \"Engines on cars are no longer supported from Jan 01 2035\")\n  motorSpec: Motor\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for DDN CLI\nDESCRIPTION: Lists the specific options available for the 'set-self-hosted-engine-url' command, including build version, CI mode, context, and project name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --build-version string   SupergraphBuild version (required)\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n-h, --help                   help for set-self-hosted-engine-url\n-p, --project string         DDN Project name\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Options\nDESCRIPTION: These options are available for the `ddn relationship add` command. They configure aspects such as context, foreign key filtering, help, pattern matching, and subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n    --fk-collection string   Only consider foreign keys defined on this collection\n    --fk-name string         Only consider foreign keys with this name\n-h, --help                   help for add\n    --pattern string         Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string        Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Tracking the function in Hasura DDN\nDESCRIPTION: Commands to generate metadata for the lambda connector and add the function to the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Cross-Subgraph Relationship Definition\nDESCRIPTION: YAML configuration defining relationships between models across different subgraphs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: orders\n  sourceType: Users\n  target:\n    model:\n      subgraph: billing\n      name: Orders\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types Structure in JSON\nDESCRIPTION: This snippet illustrates the structure of object types within JSON configuration, detailing how fields and their types are declared. Every field must specify its type by following the type expression syntax, with optional descriptions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/type-expressions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objectTypes\": {\n    \"users\": {\n      \"fields\": {\n        \"_id\": {\n          \"type\": { \"scalar\": \"objectId\" },\n          \"description\": \"primary key\"\n        },\n        \"name\": {\n          \"type\": { \"scalar\": \"string\" }\n        },\n        \"metadata\": {\n          \"type\": \"extendedJSON\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Native Queries using DDN CLI\nDESCRIPTION: This shell command lists all configured native queries for a given connector using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_connector/connector.yaml \\\n  -- native-query list\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context for Hasura DDN CLI\nDESCRIPTION: Sets the current context to the subgraph's configuration file, making subsequent CLI commands more concise. This command updates the .hasura/context.yaml file with your unique subgraph settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nddn context set subgraph ./billing/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Specifying Collection Names in JSON\nDESCRIPTION: Represents the 'collection_names' property in the configuration which is mandatory and lists table names included in the configuration. It ensures the inclusion of these collections in the database queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection_names\": [\"multivector_collection\", \"terraforming\", \"star_charts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Table as a Model\nDESCRIPTION: Command to track the posts table from Oracle as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_oracle \"EXAMPLE.POSTS\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Connector Resources\nDESCRIPTION: Command to check which database resources are available and their current status within the Hasura DDN connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Using the 'ddn command list' Command in Bash\nDESCRIPTION: The basic syntax for using the 'ddn command list' command to list details about functions/procedures of a DataConnectorLink and their corresponding Commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command list <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Connector Repository - Shell\nDESCRIPTION: This code snippet demonstrates how to create a directory for the PostgreSQL connector and initialize it as a supergraph repository.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir postgres-connector\ncd postgres-connector\nddn supergraph init .\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Data Connector in DDN\nDESCRIPTION: This command introspects the PostgreSQL data connector to fetch the latest resources, including the newly added native query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for MongoDB\nDESCRIPTION: YAML configuration for setting up a MongoDB container with Docker Compose.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  mongodb:\n    image: mongo:latest\n    container_name: mongodb\n    ports:\n      - \"27017:27017\"\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with _similar Operator in GraphQL\nDESCRIPTION: Shows how to use the _similar operator for pattern matching, finding authors whose names begin with either 'A' or 'C' using SQL-style pattern matching.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/text-search-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsWithAorC {\n  authors(\n    where: {name: {_similar: \"(A|C)%\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Commands for PostgreSQL Operations in Hasura DDN\nDESCRIPTION: This command adds all available operations (insert, update, delete) for the PostgreSQL tables in the project. It generates metadata files for these operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_pg \"*\"\n```\n\n----------------------------------------\n\nTITLE: Object Filter Examples in JSON\nDESCRIPTION: Examples demonstrating how to use object boolean expressions for filtering Album objects with various conditions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"album\": { \"AlbumId\": { \"equals\": 100 } } }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"album\": { \"Address\": { \"postcode\": { \"like\": \"N1\" } } } }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"album\": { \"artist\": { \"name\": { \"equals\": \"Madonna\" } } } }\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Nested GraphQL Query in Hasura DDN\nDESCRIPTION: This JSON represents the expected response from the nested GraphQL query. It includes an array of posts, each containing its own details and the associated user information, demonstrating the successful retrieval of related data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"id\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Metadata to Include Native Mutations\nDESCRIPTION: This shell command updates the metadata of the Hasura setup to include all resources related to the specified connector, which incorporates the defined native mutations. This is crucial for applying changes and making the mutations available through the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-mutations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector-link update <connector-name> --add-all-resources\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Predicate in YAML\nDESCRIPTION: This example shows how to define a relationship predicate in YAML. It filters objects based on a related 'author' model, comparing the 'id' field with a session variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrelationship:\n  name: author\n  predicate:\n    fieldComparison:\n      field: id\n      operator: _eq\n      value:\n        sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Setting Current Context with DDN CLI\nDESCRIPTION: Command syntax for setting the current context in DDN CLI. Requires specifying a context name as an argument and supports optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context set-current-context <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Command using DDN CLI\nDESCRIPTION: This command uses the DDN CLI to remove a specified command that is no longer needed. It requires the name of the command to be deleted.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn command remove <command_name>\n```\n\n----------------------------------------\n\nTITLE: Installing a connector using Helm\nDESCRIPTION: This command deploys a connector using Helm by specifying various parameters such as the release name, namespace, and image details. This is essential for connecting to the Kubernetes cluster.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install <connector-helm-release-name> \\\n  --set namespace=\"<namespace>\" \\\n  --set image.repository=\"<container_repository_path>\" \\\n  --set image.tag=\"<your_tag>\" \\\n  --set dataPlane.id=\"<data-plane-id>\" \\\n  --set dataPlane.key=\"<data-plane-key>\" \\\n  --set connectorEnvVars.<connector_env_variable>=\"<value>\" \\\n  hasura-ddn/<connector-type>\n```\n\n----------------------------------------\n\nTITLE: Hasura Context Configuration in YAML\nDESCRIPTION: An example of the context.yaml file that specifies default DDN project and file paths used by CLI commands. Located at .hasura/context.yaml in the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncontext:\n  project: emerging-stag-9129\n  supergraph: ../supergraph.cloud.yaml\n  subgraph: ../app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Running the DDN CLI rename-graphql-prefixes Command\nDESCRIPTION: Basic syntax for running the rename-graphql-prefixes command, which allows you to rename GraphQL root field and type name prefixes in metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod rename-graphql-prefixes [flags]\n```\n\n----------------------------------------\n\nTITLE: Filtering String Values with Equality Operator\nDESCRIPTION: Example of using _eq operator to filter authors by name\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorByName {\n  authors(\n    where: {name: {_eq: \"Sidney\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Database\nDESCRIPTION: Command to introspect the MongoDB database structure for use with Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Update Command in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for using the 'ddn update-cli' command. It can be used to update the CLI to the latest version or a specific version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn update-cli [flags]\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Supergraph\nDESCRIPTION: Creates a new build of the supergraph and starts the services. It also opens the local console for testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring noAuth Mode in Hasura AuthConfig\nDESCRIPTION: A basic example of an AuthConfig object using noAuth mode, which doesn't require authentication but allows setting a default role and session variables. Not recommended for production environments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: admin\n      sessionVariables: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Connector Region - YAML\nDESCRIPTION: This YAML snippet configures the region for the PostgreSQL connector deployment, setting it to 'gcp-us-west2'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nregionConfiguration:\n  - region: gcp-us-west2\n    mode: ReadWrite\n    envMapping:\n      CONNECTION_URI:\n        fromEnv: APP_MY_POSTGRES_CONNECTION_URI\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query\nDESCRIPTION: Example GraphQL query to fetch users data\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Local Hasura DDN API\nDESCRIPTION: Command to create a local build of the Hasura DDN API based on the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Supergraph API\nDESCRIPTION: These commands build the local supergraph and start the Docker container to serve the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Field Comparison Filtering Example in Hasura JSON:API\nDESCRIPTION: Provides an example of field comparison filtering, showing both the HTTP request and the JSON response. It filters articles based on a specific rating.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/filters.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?filter={\"rating\":{\"$eq\":5}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Article\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"Getting Started with JSON:API\",\n        \"rating\": 5,\n        \"published\": true\n      }\n    },\n    {\n      \"type\": \"Article\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"title\": \"Advanced Filtering\",\n        \"rating\": 5,\n        \"published\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing v3-engine using Helm for a specific build\nDESCRIPTION: This command installs v3-engine using Helm for a specific build version. It configures the namespace, container image, observability hostname, and data plane credentials provided by Hasura.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install <v3-engine-helm-release-name> \\\n  --set namespace=\"<namespace>\" \\\n  --set image.repository=\"<container_repository_path>\" \\\n  --set image.tag=\"<your_tag>\" \\\n  --set observability.hostName=\"<observability_hostname>\" \\\n  --set dataPlane.id=\"<data-plane-id>\" \\\n  --set dataPlane.key=\"<data-plane-key>\" \\\n  hasura-ddn/v3-engine\n```\n\n----------------------------------------\n\nTITLE: Building and Serving DDN Supergraph API\nDESCRIPTION: Builds the DDN supergraph API and starts the Docker container to serve it.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectBooleanExpressionType in YAML\nDESCRIPTION: This snippet demonstrates how to define an ObjectBooleanExpressionType in YAML format. It includes the kind, version, and definition properties, specifying details like name, object type, data connector information, and comparable fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectBooleanExpressionType\nversion: v1\ndefinition:\n  name: AuthorBoolExp\n  objectType: Author\n  dataConnectorName: my_db\n  dataConnectorObjectType: author\n  comparableFields:\n    - fieldName: article_id\n      operators:\n        enableAll: true\n    - fieldName: title\n      operators:\n        enableAll: true\n    - fieldName: author_id\n      operators:\n        enableAll: true\n  graphql:\n    typeName: Author_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Querying Terraforming Data\nDESCRIPTION: GraphQL query to fetch terraforming data with vector search capabilities.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_TERRAFORMING_DATA {\n  terraforming(args: {}) {\n    id\n    land\n    color\n    humidity\n    life\n    vector\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_TERRAFORMING_DATA_BASED_ON_VECTORS {\n  terraforming(args: { search: { vector: [0.5, 0.6, 0.7, 0.8], scoreThreshold: 0.1 } }, limit: 2) {\n    id\n    land\n    color\n    humidity\n    life\n    vector\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts Data with GraphQL\nDESCRIPTION: Execute a GraphQL query to fetch all posts data from the Snowflake database through Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  docsPublicPosts {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting DuckDB Database\nDESCRIPTION: Introspects the DuckDB database to generate Hasura metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_duckdb\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: Uses the DDN connector introspect command to analyze the MongoDB instance structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Creating a relationship in YAML\nDESCRIPTION: YAML configuration to create a relationship between a model and the custom business logic function in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: optimizedDescription\n  sourceType: Products\n  target:\n    command:\n      name: generateSeoDescription\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: description\n      target:\n        argument:\n          argumentName: input\n```\n\n----------------------------------------\n\nTITLE: Start DDN Services\nDESCRIPTION: This bash command uses the DDN CLI to start the services using Docker.  It's a common development workflow to deploy and test DDN services using Docker containers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Inherited Options - DDN CLI Fix Traces Environment Variables\nDESCRIPTION: Shows the additional options inherited from parent operations, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Inherited Options\nDESCRIPTION: Shows the options inherited from parent operations, including logging configuration and output formatting settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining User-Post Relationship\nDESCRIPTION: YAML configuration to create a relationship between posts and users models.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: MainDefaultPosts\n  target:\n    model:\n      name: MainDefaultUsers\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: id\n```\n\n----------------------------------------\n\nTITLE: Multiple Certificates Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure different TLS configurations for multiple servers. It defines two servers with different URLs and TLS settings. If the service has many servers, you can configure different TLS configurations for each server.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  servers:\n    - url:\n        env: PET_STORE_URL\n    - url:\n        env: PET_STORE_URL_2\n      tls:\n        certFile:\n          env: PET_STORE_CERT_FILE_2\n        # ...\n  securitySchemes:\n    mtls:\n      type: mutualTLS\n  tls:\n    certFile:\n      env: PET_STORE_CERT_FILE\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Example Script Usage\nDESCRIPTION: Example command demonstrating how to run the script with a specific directory and additional context for the AI model\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode improve-seo.js /supergraph-modeling 'Remember to focus on cloud-related keywords. Or add the copy from\nOverview.mdx for the section.'\n```\n\n----------------------------------------\n\nTITLE: Applying a Subgraph Build in Hasura DDN\nDESCRIPTION: Command for the main project owner/admin to apply a specific subgraph build version. This finalizes the integration of the subgraph into the main project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build apply <subgraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Showing Resources from Connector with DDN CLI in Shell\nDESCRIPTION: This snippet displays the resources discovered from a Python lambda connector using the DDN CLI. It requires the connector to be previously introspected. The command 'ddn connector show-resources' is utilized with the connector name. The output will list the resources available in the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_py\n```\n\n----------------------------------------\n\nTITLE: Configuring Unqualified Schemas for Types and Procedures in Hasura (YAML)\nDESCRIPTION: This snippet shows the configuration for 'unqualifiedSchemasForTypesAndProcedures', which determines schemas with type and comparison operator metadata entries without schema name prefixes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n\"unqualifiedSchemasForTypesAndProcedures\": [\n  \"public\",\n  \"pg_catalog\",\n  \"tiger\"\n],\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Aggregation Pipeline for User Ranking\nDESCRIPTION: This JSON file defines a native query that ranks users within their age group by name using a MongoDB aggregation pipeline. It includes input arguments, result document type, and the pipeline stages.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"usersRankedByAge\",\n  \"representation\": \"collection\",\n  \"description\": \"Rank users within their age group by name\",\n\n  \"inputCollection\": \"users\",\n\n  \"arguments\": {\n    \"age\": { \"type\": { \"scalar\": \"int\" } }\n  },\n\n  \"resultDocumentType\": \"UserRank\",\n  \"objectTypes\": {\n    \"UserRank\": {\n      \"fields\": {\n        \"_id\": { \"type\": { \"scalar\": \"objectId\" } },\n        \"name\": { \"type\": { \"scalar\": \"string\" } },\n        \"age\": { \"type\": { \"scalar\": \"int\" } },\n        \"rank\": { \"type\": { \"scalar\": \"int\" } }\n      }\n    }\n  },\n\n  \"pipeline\": [\n    {\n      \"$match\": {\n        \"age\": \"{{ age }}\"\n      }\n    },\n    {\n      \"$setWindowFields\": {\n        \"partitionBy\": \"$age\",\n        \"sortBy\": { \"name\": 1 },\n        \"output\": {\n          \"rank\": {\n            \"$rank\": {}\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trino Data Source Environment Variables in Hasura DDN\nDESCRIPTION: Environment variable configuration for connecting to a Trino database in Hasura DDN. Requires a JDBC URL with host, port, database, schema, and user parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV        | Example                                                          | Description                         |\n| ---------- | ---------------------------------------------------------------- | ----------------------------------- |\n| `JDBC_URL` | `jdbc:trino://<host>:<port>/<database>/<schema>?user=<username>` | This connector requires a JDBC URL. |\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for create-context\nDESCRIPTION: Available options specific to the create-context command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for create-context\n```\n\n----------------------------------------\n\nTITLE: Defining RelationshipName in GraphQL Schema\nDESCRIPTION: Specifies the name of the GraphQL relationship field in a schema. It is represented as a string value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph on Hasura DDN using Bash\nDESCRIPTION: This snippet shows how to create a subgraph in a Hasura DDN project. It assumes the presence of a project directory and local metadata specified in a 'supergraph.yaml' file. The 'ddn project subgraph create' command is used to deploy the subgraph, which should exist in the local metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/02-create-a-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph create my_subgraph\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI Auto-Completion for zsh on Linux\nDESCRIPTION: Command to set up permanent auto-completion for Hasura CLI in zsh on Linux systems.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn completion zsh > \"${fpath[1]}/_ddn\"\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect a PostgreSQL database. It identifies resources within the specified connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to Connector - Shell\nDESCRIPTION: This code adds models, commands, and relationships to the PostgreSQL connector for application needs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_postgres \"*\"\nddn command add my_postgres \"*\"\nddn relationship add my_postgres \"*\"\n```\n\n----------------------------------------\n\nTITLE: Querying the native operation\nDESCRIPTION: This GraphQL query demonstrates how to call the `myCustomCode` function. It passes \"My input\" as the `myInput` argument and expects a string response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n\"query MyCustomCode {\n  myCustomCode(myInput: \\\"My input\\\")\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment File for Data Connector Endpoints\nDESCRIPTION: Example of an environment file for a subgraph with multiple data connectors. The file contains read and write URLs for each connector that will be used in the subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_9\n\nLANGUAGE: env\nCODE:\n```\n<CONNECTOR_NAME_1>_READ_URL=<connector1-read-url>\n<CONNECTOR_NAME_1>_WRITE_URL=<connector1-write-url>\n<CONNECTOR_NAME_2>_READ_URL=<connector2-read-url>\n<CONNECTOR_NAME_2>_WRITE_URL=<connector2-write-url>\n```\n\n----------------------------------------\n\nTITLE: NDCExplain Structure Definition\nDESCRIPTION: JSON structure showing the format of NDCExplain responses from data connectors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n{\n  \"type\": \"response\" || \"error\" || \"notSupported\"\n  \"value\": <data connector specific response>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Query in JSON for Hasura\nDESCRIPTION: JSON configuration snippet for adding the 'ArtistByName.sql' query to the Hasura configuration. It specifies the file path, exposure type, and return type definition for the query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/clickhouse/native-operations/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": {},\n  \"queries\": {\n    \"Name\": {\n      \"exposed_as\": \"collection\",\n      \"file\": \"queries/ArtistByName.sql\",\n      \"return_type\": {\n        \"kind\": \"definition\",\n        \"columns\": {\n          \"ArtistId\": \"Int32\",\n          \"Name\": \"String\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DataConnectorLink Add Command Syntax\nDESCRIPTION: The basic command syntax for adding a new DataConnectorLink to a Subgraph using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link add <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Model in DDN\nDESCRIPTION: Command sequence to update an existing model to reflect changes in the data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn model update <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Subgraph with DDN CLI\nDESCRIPTION: Command to create a new subgraph in a cloud project using the DDN CLI, which adds the subgraph to the current context's cloud project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn project subgraph create <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentName in Markdown\nDESCRIPTION: Defines the structure for an argument name, which is represented as a string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n#### ArgumentName {#command-argumentname}\n\nThe name of an argument.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema and Sample Data\nDESCRIPTION: SQL commands to create customers and orders tables with relationships, and insert sample data for testing the plugin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n--- Create the customers table\nCREATE TABLE customers (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE NOT NULL\n);\n\n--- Create the orders table with a default value for order_date\nCREATE TABLE orders (\n  id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL REFERENCES customers(id),\n  order_date DATE NOT NULL DEFAULT CURRENT_DATE,\n  total_amount DECIMAL(10, 2) NOT NULL\n);\n\n--- Insert some data into customers\nINSERT INTO customers (name, email) VALUES ('Alice', 'alice@example.com');\nINSERT INTO customers (name, email) VALUES ('Bob', 'bob@example.com');\nINSERT INTO customers (name, email) VALUES ('Charlie', 'charlie@example.com');\n\n--- Insert some data into orders (order_date will use the default value if not provided)\nINSERT INTO orders (customer_id, total_amount) VALUES (1, 99.99);\nINSERT INTO orders (customer_id, total_amount) VALUES (2, 49.50);\nINSERT INTO orders (customer_id, total_amount) VALUES (3, 75.00);\n```\n\n----------------------------------------\n\nTITLE: Including a Single Relationship in JSON:API Query\nDESCRIPTION: Example of fetching all users and their posts in a single request using the 'include' parameter. The request demonstrates how to include posts related to users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Users?include=posts\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Table to DuckDB\nDESCRIPTION: Creates a posts table in DuckDB with a foreign key to users and inserts sample data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\necho \"\n-- Create a sequence for posts\nCREATE SEQUENCE posts_id_seq;\n-- Create the posts table\nCREATE TABLE posts (\n  id INTEGER PRIMARY KEY DEFAULT nextval('posts_id_seq'),\n  user_id INTEGER NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  content TEXT NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n-- Insert some seed data\nINSERT INTO posts (user_id, title, content) VALUES\n  (1, 'My First Post', 'This is Alice''s first post.'),\n  (1, 'Another Post', 'Alice writes again!'),\n  (2, 'Bob''s Post', 'Bob shares his thoughts.'),\n  (3, 'Hello World', 'Charlie joins the conversation.');\n\" | duckdb app/connector/my_duckdb/data.duckdb\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Sample Customer Data into Elasticsearch\nDESCRIPTION: Populates the customers index with sample data using Elasticsearch's bulk API, including customer details and geographical coordinates.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \"http://localhost:9200/_bulk\" -u elastic:elastic -H 'Content-Type: application/json' -d'\n{ \"index\": { \"_index\": \"customers\", \"_id\": \"1\" } }\n{ \"customer_id\": \"CUST001\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\", \"location\": { \"lat\": 40.7128, \"lon\": -74.0060 } }\n{ \"index\": { \"_index\": \"customers\", \"_id\": \"2\" } }\n{ \"customer_id\": \"CUST002\", \"name\": \"Jane Smith\", \"email\": \"jane.smith@example.com\", \"location\": { \"lat\": 34.0522, \"lon\": -118.2437 } }\n{ \"index\": { \"_index\": \"customers\", \"_id\": \"3\" } }\n{ \"customer_id\": \"CUST003\", \"name\": \"Alice Johnson\", \"email\": \"alice.j@example.com\", \"location\": { \"lat\": 51.5074, \"lon\": -0.1278 } }\n{ \"index\": { \"_index\": \"customers\", \"_id\": \"4\" } }\n{ \"customer_id\": \"CUST004\", \"name\": \"Bob Brown\", \"email\": \"bob.brown@example.com\", \"location\": { \"lat\": 48.8566, \"lon\": 2.3522 } }\n{ \"index\": { \"_index\": \"customers\", \"_id\": \"5\" } }\n{ \"customer_id\": \"CUST005\", \"name\": \"Charlie Davis\", \"email\": \"charlie.d@example.com\", \"location\": { \"lat\": 35.6895, \"lon\": 139.6917 } }\n'\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Connector Environment Variable Command Syntax\nDESCRIPTION: Shows the basic command structure for adding environment variables to a DDN connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector env add [flags]\n```\n\n----------------------------------------\n\nTITLE: Restarting Local Services\nDESCRIPTION: Command to restart the local services to apply the updated API build.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Remapping ID Field in ObjectType Definition YAML\nDESCRIPTION: This YAML snippet shows how to remap an existing `id` field to another field name. It exemplifies changing `id` to `user_id` within the ObjectType definition to comply with GraphQL spec requirements.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Users\n  globalIdFields: [user_id]\n  fields:\n    - name: user_id\n      type: Uuid!\n    - name: name\n      type: Text!\n  graphql:\n    typeName: Users\n    inputTypeName: UsersInput\n  dataConnectorTypeMapping:\n    - dataConnectorName: postgres_connector\n      dataConnectorObjectType: users\n      fieldMapping:\n        user_id:\n          column:\n            name: id\n        name:\n          column:\n            name: name\n```\n\n----------------------------------------\n\nTITLE: Running the GraphqlConfig Subscription Upgrade Command in Bash\nDESCRIPTION: Basic command syntax for upgrading GraphqlConfig to support subscriptions in DDN projects.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-subscriptions [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Databricks Connector\nDESCRIPTION: Command to initialize a Databricks connector in the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nddn connector init my_databricks -i\n```\n\n----------------------------------------\n\nTITLE: Command Examples in Bash\nDESCRIPTION: Examples showing how to run the codemod on the currently defined supergraph, a specific supergraph, or a specific subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-object-boolean-expression-types\n\n# Run on a specific supergraph\n ddn codemod upgrade-object-boolean-expression-types --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-object-boolean-expression-types --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying a Build on Hasura DDN\nDESCRIPTION: This command applies a specific build created for the project to make it the official API. The command requires a build version as a parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/deploy-to-ddn.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <build-version>\n```\n\n----------------------------------------\n\nTITLE: Creating ConnectorBuild using the DDN CLI\nDESCRIPTION: Basic syntax for creating a ConnectorBuild on Hasura DDN using the command line interface. The command requires a path to a connector configuration file in YAML format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector <path-to-connector-config-file-.yaml> [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating ModelPermissions for Public Access in Hasura DDN\nDESCRIPTION: Example of updating ModelPermissions to allow public access to an Events model. It includes permissions for both admin and public roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/special-roles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Events\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: public\n      select:\n        filter: null\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn subgraph build create Command in SASS\nDESCRIPTION: This code block lists the available options for the 'ddn subgraph build create' command, including flags for context, description, environment variables, and various build configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                             Disables the use of context\n-c, --context string                 Name of the context to use. (default <current_context>)\n-d, --description string             (Optional) description of the build\n-e, --env stringArray                Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray           Path to .env file. Can be repeated to provide multiple env files\n-h, --help                           help for create\n    --no-build-connectors            Do not recursively build all connectors in the subgraph and use their URLs for subgraph build. (default: false)\n-p, --project string                 DDN Project name\n    --self-hosted-data-plane         Is the data plane self hosted?\n    --subgraph string                Path to Subgraph config file\n    --target-env-file string         Env file to write the connector build URLs to.\n    --update-connector-link-schema   Update DataConnectorLink schema with the NDC schema of the connectors built recursively. (default: false)\n```\n\n----------------------------------------\n\nTITLE: Introspecting ClickHouse Instance with DDN CLI\nDESCRIPTION: Uses the DDN CLI to introspect the ClickHouse instance named 'my_clickhouse'. This step is necessary to analyze the database structure for DDN integration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_clickhouse\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample User Data into MongoDB\nDESCRIPTION: This bash command uses Docker to execute a MongoDB shell command that inserts sample user data into the 'users' collection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it mongodb mongosh my_database --eval \"\ndb.users.insertMany([\n  { user_id: 1, name: 'Dinesh', age: 25 },\n  { user_id: 2, name: 'Bertram', age: 25 },\n  { user_id: 3, name: 'Erlich', age: 25 }\n]);\n\"\n```\n\n----------------------------------------\n\nTITLE: Starting your services\nDESCRIPTION: This command starts the Docker services required for the application to run. It is essential for running a local instance of the application with all dependencies in place.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn context unset\nDESCRIPTION: Options specific to the ddn context unset command, including the ability to specify which context to modify using the -c or --context flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for unset\n```\n\n----------------------------------------\n\nTITLE: Removing a Connector using DDN CLI\nDESCRIPTION: This command removes a Connector, its corresponding DataConnectorLink, and all associated metadata objects. It can be used with various options to specify the Connector, Subgraph, and DataConnectorLink.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector remove <connector-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Function Object\nDESCRIPTION: Provides an example of defining a function within the configuration, detailing catalog, schema, name, signature, and return type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function_catalog\": \"public\",\n  \"function_schema\": \"public\",\n  \"function_name\": \"add\",\n  \"argument_signature\": \"(N NUMBER, M NUMBER)\",\n  \"data_type\": \"TABLE (N NUMBER, M NUMBER)\",\n  \"comment\": \"Adds two numbers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting Elasticsearch Data Source in Hasura DDN\nDESCRIPTION: This command re-introspects the Elasticsearch data source to update the schema and metadata with new changes, such as the addition of the 'transactions' index.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_es\n```\n\n----------------------------------------\n\nTITLE: Updating ModelPermissions for Public Access in Hasura DDN\nDESCRIPTION: This YAML snippet shows how to update ModelPermissions to allow public access to an Events model in Hasura DDN. It includes permissions for both admin and public roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/2-public-access-role.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Events\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: public\n      select:\n        filter: null\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Parent Operations\nDESCRIPTION: This code snippet outlines options inherited from parent operations that can be used with the 'ddn supergraph build diff' command such as log level and output format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Environment File in YAML\nDESCRIPTION: Example showing how to configure the local environment file path in the default context for local development.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Defining Command Permissions in YAML\nDESCRIPTION: This snippet shows how to define permissions for an OpenDD command using YAML. It specifies permissions for 'get_article_by_id' command for admin and user roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: get_article_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Query\nDESCRIPTION: Example GraphQL query to test the configured plugins, retrieving customer and order data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_CUSTOMERS_AND_ORDERS {\n  customers {\n    id\n    name\n    email\n    orders {\n      id\n      orderDate\n      totalAmount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook POST Request Body Example\nDESCRIPTION: Example JSON structure showing the format of headers forwarded in a POST request body to the webhook.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"Authorization\": \"Bearer some-token\",\n    \"Content-Type\": \"application/json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DuckDB Connector\nDESCRIPTION: Initializes a DuckDB connector for the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_duckdb -i\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Connector\nDESCRIPTION: Command to initialize a new GraphQL connector with interactive mode\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_graphql -i\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI with Hasura DDN\nDESCRIPTION: Command to authenticate the DDN CLI with Hasura to access cloud resources. This launches a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Plugin Upgrade Example Command\nDESCRIPTION: Example showing how to upgrade the ndc-postgres plugin to a newer version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade a plugin \"ndc-postgres\" to a newer version\n ddn plugins upgrade ndc-postgres\n```\n\n----------------------------------------\n\nTITLE: SQL Server Database Setup\nDESCRIPTION: SQL commands to create and populate a users table with sample data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-sqlserver.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (user_id int primary key, name varchar(255), age int);\nGO\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (user_id, name, age) VALUES (1, 'Alice', 25), (2, 'Bob', 30), (3, 'Charlie', 35);\nGO\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\nGO\n```\n\n----------------------------------------\n\nTITLE: Introspecting BigQuery Database\nDESCRIPTION: This command introspects the BigQuery database to generate a schema representation in the project configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_bigquery\n```\n\n----------------------------------------\n\nTITLE: Querying Local Relationships in GraphQL with Hasura\nDESCRIPTION: This GraphQL query demonstrates fetching data from a Model, including data across local relationships. The execution plan for this query will be a ModelSelect only.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery LocalRelationship {\n  cities {\n    # Backed by a model\n    code\n    name\n    state {\n      # Local relationship\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-Response Lifecycle Plugin Hook Configuration\nDESCRIPTION: Specifies the structure and required fields for pre-response stage lifecycle plugin hooks including URL configuration and request handling settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `pre` | `response` | true |  |\n| `name` | string | true | The name of the lifecycle plugin hook. |\n| `url` | [EnvironmentValue] | true | The URL to access the lifecycle plugin hook. |\n| `config` | [LifecyclePreResponsePluginHookConfig] | true | Configuration for the lifecycle plugin hook. |\n```\n\n----------------------------------------\n\nTITLE: Adding Model to DDN Connector\nDESCRIPTION: This command adds the 'usersRankedByAge' model to a specific connector using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn model add <connector_name> usersRankedByAge\n```\n\n----------------------------------------\n\nTITLE: Specifying JDBC URL\nDESCRIPTION: Shows the format for specifying the JDBC connection URL to connect to an Oracle database. The URL can be a direct string or reference an environment variable, enabling flexibility in configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"jdbc:oracle:thin:@//localhost:1521/xe?user=foo\\u0026password=bar\",\n  \"jdbcUrl\": { \"variable\": \"ORACLE_JDBC_URL\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Options inherited from parent commands including log level settings, prompt configuration, output format options, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship in Hasura DDN\nDESCRIPTION: Add a relationship between 'posts' and 'users' tables in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn relationship add my_mysql \"mydb.posts\"\n```\n\n----------------------------------------\n\nTITLE: Introspecting Stripe Account Schema\nDESCRIPTION: Command to introspect the Stripe account and generate a schema representation in Hasura Metadata Language (HML).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_stripe\n```\n\n----------------------------------------\n\nTITLE: Identifying Dangerous Changes in GraphQL Schema\nDESCRIPTION: This snippet highlights a dangerous change where the return type of a field is modified. This can lead to potential issues in client-side logic without breaking functionality.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/graphql-schema-diff.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  sales_count: Int\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  sales_count: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Native Mutation with ddn CLI\nDESCRIPTION: This shell command deletes a Native Mutation using the ddn CLI. It requires the connector yaml file and ddn tool set up.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/chinook_pg/connector.yaml -- \\\n  native-operation delete --name insert_artist --kind mutation\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Subgraph in YAML\nDESCRIPTION: Specifies the subgraph configuration for development environment, including path references to development-specific metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-environments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: globals\n  generator:\n    rootPath: .\n  # highlight-start\n  includePaths:\n    - metadata_development\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Cloud Configuration\nDESCRIPTION: Example of a supergraph.cloud.yaml file that configures the deployment of a supergraph to DDN cloud. The file specifies auth configuration and environment files for each subgraph in the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v1\ndefinition:\n  supergraph_globals:\n    generator:\n      rootPath: ./supergraph_globals\n    envFile: ./supergraph_globals/.env.supergraph_globals\n    includePaths:\n      #highlight-start\n      - ./supergraph_globals/auth-config.cloud.hml\n      #highlight-end\n      - ./supergraph_globals/compatibility-config.hml\n      - ./supergraph_globals/graphql-config.hml\n  subgraphs:\n    <subgraph-name>:\n      generator:\n        rootPath: <subgraph-name>/metadata\n      #highlight-start\n      envFile: <subgraph-name>/.env.cloud.<subgraph-name>\n      #highlight-end\n      includePaths:\n        - <subgraph-name>/metadata\n```\n\n----------------------------------------\n\nTITLE: Replacing DataConnectorLink - Shell\nDESCRIPTION: Copy the DataConnectorLink from the connector repository into the team’s metadata file to align with the deployed connector's database structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_postgres\nddn model add my_postgres \"*\"\nddn command add my_postgres \"*\"\nddn relationship add my_postgres \"*\"\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph in Hasura DDN\nDESCRIPTION: This shell command builds a new supergraph in Hasura DDN after configuring public access permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/2-public-access-role.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Build in Hasura DDN\nDESCRIPTION: Creates a subgraph build in the Hasura DDN cloud project. This command uploads the local metadata to the cloud and returns a build version that can be used in supergraph builds.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent operations\nDESCRIPTION: Shows the options that are inherited from parent operations, including log level configuration, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic (Python)\nDESCRIPTION: Implements a 'shoutName' function in Python that converts a name to uppercase.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom pydantic import BaseModel, Field\nfrom hasura_ndc.errors import UnprocessableContent\nfrom typing import Annotated\n\n\nconnector = FunctionConnector()\n\n@connector.register_query\ndef shoutName(name: str) -> str:\n    return f\"{name}\".upper()\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Supergraph Build Command\nDESCRIPTION: Command to rebuild the supergraph after configuration changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Showing Resources from Connector - Bash\nDESCRIPTION: This command demonstrates how to display the resources discovered from the specified Node.js lambda connector. The command requires the DDN CLI and takes the connector name 'my_ts' as input, returning a list of resources associated with that connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_ts\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn connector-link add-resources with Subgraph Parameter\nDESCRIPTION: An example showing how to add all models, commands and relationships from a DataConnectorLink named 'mydb' for a specific Subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all models, commands and relationships from the schema of DataConnectorLink 'mydb' for Subgraph config 'app'\n ddn connector-link add-resources mydb --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table Structure\nDESCRIPTION: Markdown tables defining required environment variables, their example values, and descriptions for each supported data connector. Each table includes connector-specific connection parameters and authentication details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV        | Example                                                                                                                                                                                               | Description                                       |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------- |\n| `JDBC_URL` | `jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=project-id;DefaultDataset=dataset;OAuthType=0;OAuthServiceAcctEmail=service-account-email;OAuthPvtKey=/etc/connector/key.json;` | The JDBC URL to connect to the BigQuery database. |\n```\n\n----------------------------------------\n\nTITLE: Querying Comments Data with GraphQL\nDESCRIPTION: This GraphQL query retrieves all comments from the 'comments' collection. It requests the comment_id, comment text, user_id, and post_id fields for each comment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  comments {\n    comment_id\n    comment\n    user_id\n    post_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Query Function Representation Example\nDESCRIPTION: This JSON configuration demonstrates a native query using the 'function' representation. It defines a function 'hello' that accepts a 'name' argument (string) and returns a single document with a '__value' field containing the provided name. The pipeline simply uses `$documents` to create a document with the passed-in name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello\",\n  \"representation\": \"function\",\n  \"description\": \"Basic test of native queries\",\n  \"arguments\": {\n    \"name\": { \"type\": { \"scalar\": \"string\" } }\n  },\n  \"resultDocumentType\": \"Hello\",\n  \"objectTypes\": {\n    \"Hello\": {\n      \"fields\": {\n        \"__value\": { \"type\": { \"scalar\": \"string\" } }\n      }\n    }\n  },\n  \"pipeline\": [\n    {\n      \"$documents\": [\n        {\n          \"__value\": \"{{ name }}\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Key Authentication for Azure Blob Storage - YAML\nDESCRIPTION: This snippet provides configuration details for using shared key authentication with Azure Blob Storage. The configuration requires the storage account name and the corresponding account key to authorize requests.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - type: azblob\n    authentication:\n      type: sharedKey\n      accountName:\n        env: AZURE_STORAGE_ACCOUNT_NAME\n      accountKey:\n        env: AZURE_STORAGE_ACCOUNT_KEY\n```\n\n----------------------------------------\n\nTITLE: Implementing Insert Mutation for MongoDB in Hasura DDN\nDESCRIPTION: Example of an insert mutation that adds a new artist to a MongoDB collection. The mutation accepts artistId and name parameters and returns success metrics including ok status and count of affected records.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n  \"name\": \"insertArtist\",\n  \"description\": \"Example of a database insert using a native mutation\",\n  \"resultType\": {\n    \"object\": \"InsertArtist\"\n  },\n  \"arguments\": {\n    \"artistId\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    }\n  },\n  \"objectTypes\": {\n    \"InsertArtist\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"insert\": \"Artist\",\n    \"documents\": [\n      {\n        \"ArtistId\": \"{{ artistId }}\",\n        \"Name\": \"{{ name }}\"\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: DDN Auth Logout Command Syntax\nDESCRIPTION: Basic command syntax for logging out of DDN CLI, with optional flags parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_logout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth logout [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Build for Customer Subgraph\nDESCRIPTION: Creates a subgraph build for the customer subgraph after adding the cross-subgraph relationship. This uploads the updated local metadata to the cloud.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Displaying MongoDB Resources with DDN\nDESCRIPTION: Shows the resources found in the MongoDB instance after introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\n----------------------------------------\n\nTITLE: Starting the services\nDESCRIPTION: This command starts the necessary services using Docker.  It's likely bringing up the Hasura engine, connectors, and other related components for the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn run docker-start\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Nested GraphQL Query in Hasura DDN\nDESCRIPTION: This JSON represents the expected response from the nested GraphQL query. It contains an array of posts, each including its details and the associated user information, demonstrating the successful execution of the relationship-based query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"mydbPosts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"mydbUser\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"mydbUser\": {\n          \"id\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"mydbUser\": {\n          \"id\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"mydbUser\": {\n          \"id\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing GraphQL Schema Changes with DDN CLI\nDESCRIPTION: This command compares the changes made to the GraphQL schema from one build version to another. It requires two build versions as parameters, along with optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build diff <build-version-1> <build-version-2> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypePermissions for UpdatePostsByIdResponse in YAML\nDESCRIPTION: This YAML snippet adds TypePermissions for the 'author' role on the UpdatePostsByIdResponse type, allowing access to the 'affectedRows' field.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: UpdatePostsByIdResponse\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - affectedRows\n          - returning\n    - role: author\n      output:\n        allowedFields:\n          - affectedRows\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Prefixing in Hasura DDN\nDESCRIPTION: Adds prefixing to the 'customers' subgraph configuration to prevent collisions of GraphQL root fields and types when building the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: customers\n  generator:\n    rootPath: .\n    namingConvention: graphql\n    graphqlRootFieldPrefix: customers_\n    graphqlTypeNamePrefix: customers_\n  includePaths:\n    - metadata\n```\n\n----------------------------------------\n\nTITLE: Command Help Options\nDESCRIPTION: Available help flags for the print-access-token command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for print-access-token\n```\n\n----------------------------------------\n\nTITLE: Examples of Subgraph Initialization\nDESCRIPTION: This snippet provides examples of how to use the 'ddn subgraph init' command to create a Subgraph named 'app'. It also shows how to initialize it in a specific directory and include it in multiple Supergraph config files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a Subgraph \"app\"\n ddn subgraph init app\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a Subgraph \"app\" in the directory \"./app\" and add it to Supergraph config files \"./supergraph.yaml\" and \"./supergraph.cloud.yaml\"\n ddn subgraph init app --dir ./app --target-supergraph ./supergraph.yaml --target-supergraph ./supergraph.cloud.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing MongoDB User Insertion GraphQL Mutation\nDESCRIPTION: Example GraphQL mutation that uses the custom insertUser command to add a user named 'Sam' to the MongoDB database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertUser {\n  insertUser(name: \"Sam\") {\n    ok\n    n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JDBC URL Configuration Options for Trino\nDESCRIPTION: Examples of how to configure the JDBC URL for connecting to a Trino database, showing both direct string configuration and environment variable reference options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"jdbc:trino://localhost:8090/xe?user=foo&password=bar\",\n  \"jdbcUrl\": { \"variable\": \"TRINO_JDBC_URL\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-Response Plugin Route Handler Implementation\nDESCRIPTION: TypeScript implementation of the pre-response plugin route handler that logs response data before it's sent to clients.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport { Router, Request, Response } from \"express\";\nimport { PreResponseRequest } from \"../types\";\n\nconst router = Router();\n\nrouter.post(\"/\", (req: Request<unknown, unknown, PreResponseRequest>, res: Response): void => {\n  const { response } = req.body;\n  console.log(\n    `\\n\\nThis is running after the request is logged via the webhook before the response is sent to the client! \\n\\n\n    Response Data: ${JSON.stringify(response.data, null, 2)}`\n  );\n\n  res.status(204).send();\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Supergraph Project\nDESCRIPTION: Creates a new project directory for the supergraph example and navigates into it.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init subgraph-example && cd subgraph-example\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn supergraph init Command\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn supergraph init' command to control logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting Model Permissions in Hasura Metadata Using YAML\nDESCRIPTION: This YAML snippet configures permissions for the 'ProductsVectorDistance' model, restricting access based on the manufacturer's ID to enhance security and data protection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/vector-search.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: ProductsVectorDistance\n  permissions:\n    - role: manufacturer\n      select:\n        filter:\n          relationship:\n            name: product\n            predicate:\n              fieldComparison:\n                field: manufacturer_id\n                operator: _eq\n                value:\n                  sessionVariable: x-hasura-manufacturer-id\n```\n\n----------------------------------------\n\nTITLE: Creating Project on Data Plane in DDN\nDESCRIPTION: Initializes a new project on the specified Data Plane with the chosen plan. Requires Data Plane ID and plan name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn project init --data-plane-id <data-plane-id> --plan <plan-name>\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn command remove\nDESCRIPTION: Available flags specific to the 'ddn command remove' command, including options for context, pattern matching, and subgraph specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for remove\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Creating Additional MySQL Table and Data\nDESCRIPTION: Create a 'posts' table in MySQL with a foreign key to 'users' and insert sample data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the posts table\nCREATE TABLE posts (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  content TEXT NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\n-- Insert some seed data\nINSERT INTO posts (user_id, title, content) VALUES\n  (1, 'My First Post', 'This is Alice\\'s first post.'),\n  (1, 'Another Post', 'Alice writes again!'),\n  (2, 'Bob\\'s Post', 'Bob shares his thoughts.'),\n  (3, 'Hello World', 'Charlie joins the conversation.');\n```\n\n----------------------------------------\n\nTITLE: Displaying MongoDB Resources with DDN CLI\nDESCRIPTION: Shows the resources discovered from the MongoDB instance after introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\n----------------------------------------\n\nTITLE: Querying Translated Reviews with GraphQL\nDESCRIPTION: GraphQL query to fetch reviews with their original text and Spanish translations, demonstrating the use of the created relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery ReviewQuery {\n  reviews {\n    id\n    text\n    translatedReview(targetLanguage: \"es\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Table as Hasura Model\nDESCRIPTION: Tracks the users table from DuckDB as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_duckdb users\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Mutations in Shell\nDESCRIPTION: Creates a new directory structure to store MongoDB native mutations for the DDN connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_mongo/native_operations/mutations/\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn codemod' Command in Sass\nDESCRIPTION: Shows the options inherited from parent operations for the 'ddn codemod' command. These include options for configuring log level, disabling prompts, specifying output format, and setting request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types in JSON\nDESCRIPTION: This JSON example defines object types as structured records with fixed string keys. The object type reference is signaled by an object containing an 'object' property which points to the object's name in the type expression.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/type-expressions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"object\": \"TypeName\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Relationship in Hasura DDN with Turso\nDESCRIPTION: This shell command adds a relationship between the 'posts' and 'users' tables in the Turso database. It utilizes the existing foreign key in the posts table to create the relationship.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn relationship add my_turso \"posts\"\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Errors in TypeScript Lambda Connector\nDESCRIPTION: Demonstrates how to throw custom errors with messages and metadata using the Hasura NDC Lambda SDK in TypeScript. Examples include Forbidden, Conflict, and UnprocessableContent errors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/errors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as sdk from \"@hasura/ndc-lambda-sdk\";\n\n/** @readonly */\nexport function updateResource(userRole: string): void {\n  if (userRole !== \"admin\") {\n    throw new sdk.Forbidden(\"User does not have permission to update this resource\", { role: userRole });\n  }\n  console.log(\"Resource updated successfully.\");\n}\n\n/** @readonly */\nexport function createResource(id: string, existingIds: string[]): void {\n  if (existingIds.includes(id)) {\n    throw new sdk.Conflict(\"Resource with this ID already exists\", { existingId: id });\n  }\n  console.log(\"Resource created successfully.\");\n}\n\n/** @readonly */\nexport function divide(x: number, y: number): number {\n  if (y === 0) {\n    throw new sdk.UnprocessableContent(\"Cannot divide by zero\", { myErrorMetadata: \"stuff\", x, y });\n  }\n  return x / y;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users in GraphQL\nDESCRIPTION: GraphQL query to fetch all users with their ID, name, and age from the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  exampleUsers {\n    userId\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Model Documentation Structure\nDESCRIPTION: Markdown structure showing the documentation layout for Hasura DDN Models, including frontmatter configuration and main content sections.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 6\nsidebar_label: Models\ndescription:\n  \"Explore the concept of Models in Hasura Data Domain, your link between the data sources and the generated API. Learn\n  about models, their structure, source configuration, and how they appear in the GraphQL API. Understand filterable\n  fields, orderable fields, data connector types, and how to configure them. Gain insights on unique identifiers and\n  their role in retrieving unique data objects from the model.\"\ntoc_max_heading_level: 4\nkeywords:\n  - hasura models\n  - data domain models\n  - hasura api\n  - graphql api configuration\n  - source configuration\n  - filterable fields\n  - orderable fields\n  - data connectors\n  - unique identifiers\nseoFrontMatterUpdated: true\n---\n```\n\n----------------------------------------\n\nTITLE: Receiving HTTP Headers in TypeScript Lambda Function\nDESCRIPTION: Modifies a 'hello' function to receive HTTP request headers as a parameter. The headers are passed as a JSON object and cast to a Record<string, string> type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as sdk from \"@hasura/ndc-lambda-sdk\";\n\n/** @readonly */\nexport function hello(headers: sdk.JSONValue, name?: string): string {\n  const headersMap = headers.value as Record<string, string>;\n  return `hello ${name ?? \"world\"}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Headers Forwarding in YAML\nDESCRIPTION: This YAML snippet enables header forwarding.  It sets `enabled` to `true` and specifies the `argumentField` as `headers`. This allows the connector to receive headers from the DDN engine, which is necessary for cookie authentication and other OAuth 2.0 flows.  It configures the settings to forward the headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\nforwardHeaders:\n  enabled: true\n  argumentField: headers\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Authenticate the Hasura DDN CLI to access Hasura Cloud resources. This command launches a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Command to initialize a new Hasura DDN project and navigate into its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Container\nDESCRIPTION: Start the Prometheus container using Docker Compose.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_prometheus/compose.prometheus.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Create a new local Hasura DDN project and navigate to its directory. This sets up the initial project structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: AWS Availability Zones Output Example\nDESCRIPTION: Example output showing the mapping between AWS zone IDs and zone names in table format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-----------------------------\n| DescribeAvailabilityZones |\n+-----------+---------------+\n| ZoneId    | ZoneName      |\n+-----------+---------------+\n| use1-az1  | us-east-1a    |\n| use1-az2  | us-east-1b    |\n| use1-az3  | us-east-1c    |\n+-----------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Creates a new local Hasura DDN project with the name 'my-project' and changes into the project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Project Get Command\nDESCRIPTION: Demonstrates how to list all projects and get details of a specific project using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all your Projects on Hasura DDN.\n ddn project get\n\n# Get details of a Project \"pet-lion-2649\" on Hasura DDN.\n ddn project get pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: DDN Model Update Command Examples\nDESCRIPTION: Examples demonstrating various ways to use the model update command, including updating all models, specific models, and using different subgraph configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update all Models using the subgraph set in current context\n ddn model update \"*\"\n\n# Update the Model \"Album\" in the \"app\" Subgraph\n ddn model update Album --subgraph ./app/subgraph.yaml\n\n# Update all the Models in the Subgraph \"app\"\n ddn model update \"*\" --subgraph ./app/subgraph.yaml\n\n# Update Models filtered by glob pattern in the Subgraph \"app\"\n ddn model update \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Prometheus Connector\nDESCRIPTION: Initialize a Prometheus connector for the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_prometheus -i\n```\n\n----------------------------------------\n\nTITLE: GCP Zones Output Example\nDESCRIPTION: Example output showing available zones in GCP's us-west2 region with their status.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME        REGION    STATUS\nus-west2-a  us-west2  UP\nus-west2-b  us-west2  UP\nus-west2-c  us-west2  UP\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Billing Subgraph Project in Hasura DDN\nDESCRIPTION: Creates a new local project directory with a billing subgraph and initializes a git repository for version control. This command scaffolds the necessary project structure for a Hasura DDN subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init billing-team --create-subgraph billing && cd billing-team && git init\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN\nDESCRIPTION: Uses DDN to introspect the MongoDB instance named 'my_mongo'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Starting Local DDN Services\nDESCRIPTION: Starts the local Hasura DDN engine and Elasticsearch connector services using Docker, making the GraphQL API available for testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating User-Post Relationship in Hasura\nDESCRIPTION: Defines a relationship between posts and users in Hasura metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: Posts\n  target:\n    model:\n      name: Users\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: id\n```\n\n----------------------------------------\n\nTITLE: Delete Subgraph Command Syntax\nDESCRIPTION: Basic command syntax for deleting a subgraph from a project using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph delete <subgraph-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn connector-link add-resources\nDESCRIPTION: The available options specific to the add-resources command, including context selection, CI mode, and subgraph specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for add-resources\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Adding Elasticsearch Index as DDN Model\nDESCRIPTION: Tracks the 'customers' index from Elasticsearch as a model in the Hasura DDN metadata, enabling it to be exposed through the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_es customers\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ConnectorBuild Create\nDESCRIPTION: Available flags and options specific to the 'ddn connector build create' command, including settings for CI environments, context selection, environment variables, and connector linking options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                             Disables the use of context\n    --connector string               Path to Connector YAML config file\n-c, --context string                 Name of the context to use. (default <current_context>)\n-e, --env stringArray                Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray           Path to .env file. Can be repeated to provide multiple env files\n-h, --help                           help for create\n-p, --project string                 DDN Project name\n    --target-connector-link string   DataConnectorLink to update with the schema from the ConnectorBuild\n    --target-env-file string         Path to the env file in which the Build URLs should be updated in\n    --target-subgraph string         Path to Subgraph config file containing target DataConnectorLink\n    --update-connector-link-schema   Update DataConnectorLink schema with the NDC schema of the built connector. (default: false)\n```\n\n----------------------------------------\n\nTITLE: Building the Hasura DDN Project Locally\nDESCRIPTION: Command to create a local build of the Hasura DDN project, which stores JSON files in the engine/build directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Deploy Supergraph\nDESCRIPTION: Build and deploy the supergraph to Hasura DDN cloud environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources Identified by DDN Connector\nDESCRIPTION: This command shows the list of resources identified by the DDN connector for a PostgreSQL database named 'my_pg'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: OAuth Token Validation Implementation\nDESCRIPTION: Example function for validating OAuth tokens with an external authentication provider.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require(\"node-fetch\");\n\nasync function validateOAuthToken(token) {\n  try {\n    const response = await fetch(\"https://your-auth-provider/oauth2/v1/tokeninfo\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: `access_token=${token}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(`OAuth validation failed: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    // Check token validity and required scopes\n    if (!data.active || !data.scope.includes(\"required-scope\")) {\n      throw new Error(\"Invalid or insufficient token permissions\");\n    }\n\n    return data;\n  } catch (err) {\n    console.error(\"OAuth validation failed:\", err.message);\n    throw new Error(\"Invalid OAuth token\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table\nDESCRIPTION: SQL commands to create and populate a posts table with relationships to users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncurl -L -X POST 'https://<db-name>-<your-username>.turso.io/v2/pipeline' \\\n    -H 'Authorization: Bearer <auth-token>' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"requests\": [\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"CREATE TABLE posts (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, title TEXT NOT NULL, content TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE)\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO posts (user_id, title, content) VALUES (1, \\\"My First Post\\\", \\\"This is Alice'\\'s first post.\\\")\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO posts (user_id, title, content) VALUES (1, \\\"Another Post\\\", \\\"Alice writes again!\\\")\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO posts (user_id, title, content) VALUES (2, \\\"Bob'\\'s Post\\\", \\\"Bob shares his thoughts.\\\")\"\n          }\n        },\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"INSERT INTO posts (user_id, title, content) VALUES (3, \\\"Hello World\\\", \\\"Charlie joins the conversation.\\\")\"\n          }\n        },\n        {\n          \"type\": \"close\"\n        }\n      ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: DDN Context Command Synopsis\nDESCRIPTION: The basic command syntax for getting the current context information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get-current-context [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table in Databricks\nDESCRIPTION: SQL commands to create and populate a posts table with relationships to users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE posts (\n  id BIGINT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),\n  user_id INT NOT NULL,\n  title STRING NOT NULL,\n  content STRING NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\nUSING DELTA\nTBLPROPERTIES (\n  'delta.feature.allowColumnDefaults' = 'supported'\n);\n\nCOMMENT ON TABLE default.posts IS 'Posts are written by users and mapped to them using their id column';\n\nINSERT INTO posts (user_id, title, content) VALUES\n  (1, 'My First Post', 'This is Alice''s first post.'),\n  (1, 'Another Post', 'Alice writes again!'),\n  (2, 'Bob''s Post', 'Bob shares his thoughts.'),\n  (3, 'Hello World', 'Charlie joins the conversation.');\n```\n\n----------------------------------------\n\nTITLE: Setting API Access Mode with DDN CLI - Bash\nDESCRIPTION: This command sets the API access mode for a Hasura DDN project to either public or private, depending on the user's choice. It requires a mode parameter ('public' or 'private') and optional flags for specifying a project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_set-api-access-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-api-access-mode <public|private> [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set the API access mode for the DDN project set in the context as private\n ddn project set-api-access-mode private\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set the API access mode for the DDN project set in the context as public\n ddn project set-api-access-mode public\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set the API access mode for the DDN project 'my-project-123' as private\n ddn project set-api-access-mode private --project my-project-123\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set the API access mode for the DDN project 'my-project-123' as public\n ddn project set-api-access-mode public --project my-project-123\n```\n\n----------------------------------------\n\nTITLE: Available Options for the install Command\nDESCRIPTION: List of specific flags available for the 'ddn plugins install' command, including help and version options. These flags customize the behavior of the install operation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for install\n    --version string   Version to be installed\n```\n\n----------------------------------------\n\nTITLE: Querying Dinosaurs Collection\nDESCRIPTION: GraphQL query to fetch dinosaur data and mutation to update a dinosaur record.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_JOHN_HAMMOND {\n  dinosaurs(args: {}) {\n    id\n    dinosaur\n    diet\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation MAKE_HIM_KING {\n  updateDinosaursOne(object: { id: 1, vector: [0.1, 0.2, 0.3, 0.4], dinosaur: \"T-Rex\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Building Local Hasura DDN Supergraph\nDESCRIPTION: Command to build the local version of the Hasura DDN supergraph based on the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Querying New Prometheus Metric with GraphQL\nDESCRIPTION: Execute a GraphQL query to fetch the newly added CPU seconds metric from Prometheus.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_CPU_PROCESS_TOTAL {\n  processCpuSecondsTotal(\n    args: { fn: [{ rate: \"1m\" }, { sum: [] }] }\n    where: { timestamp: { _gt: \"2025-03-26\" }, job: { _eq: \"prometheus\" } }\n  ) {\n    timestamp\n    value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response for Posts\nDESCRIPTION: JSON response from the posts query showing the data returned from the PostgreSQL database through the Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\"\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI package for TypeScript\nDESCRIPTION: Command to install the OpenAI package in the connector's directory for TypeScript implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install openai\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Supergraph for Testing Permissions\nDESCRIPTION: This shell command builds a local supergraph in Hasura DDN, allowing you to test the admin-level permissions you've configured through JWT or webhook authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/4-service-account.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting Snowflake Database\nDESCRIPTION: Update the Hasura DDN metadata by re-introspecting the Snowflake database after schema changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_snowflake\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Table as Model\nDESCRIPTION: This command adds the 'posts' table from BigQuery as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_bigquery posts\n```\n\n----------------------------------------\n\nTITLE: Add Supergraph Resources\nDESCRIPTION: Create metadata for models, commands, and relationships in the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn model add my_connector '*'\nddn command add my_connector '*'\nddn relationship add my_connector '*'\n```\n\n----------------------------------------\n\nTITLE: Update Connector Link for Native Query\nDESCRIPTION: This shell command adds the new native query to the supergraph by updating the metadata with the connector link. The `<connector-name>` needs to be replaced with the actual name of the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nddn connector-link update <connector-name> --add-all-resources\n```\n\n----------------------------------------\n\nTITLE: Listing all Subgraphs for a Project in Bash\nDESCRIPTION: This example demonstrates how to list all Subgraphs for a specific Hasura DDN Project using the 'ddn project subgraph get' command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph get --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Context Configuration Structure in YAML with v3 Scripting Support\nDESCRIPTION: Example of the new v3 context configuration structure showing script definitions for both bash and powershell environments. Includes configuration for supergraph, subgraph, and environment files along with a docker-start script example.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-context-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default:\n      supergraph: ../supergraph.yaml\n      subgraph: ../app/subgraph.yaml\n      localEnvFile: ../.env\n  scripts:\n    docker-start:\n      bash: HASURA_DDN_PAT=$(ddn auth print-access-token) docker compose --env-file .env up --build --pull always -d\n      powershell: $Env:HASURA_DDN_PAT = (ddn auth print-access-token); docker compose --env-file .env up --build --pull always -d\n```\n\n----------------------------------------\n\nTITLE: Adding Native Query to PostgreSQL Connector Configuration using DDN CLI\nDESCRIPTION: This command uses the DDN CLI plugin for the PostgreSQL connector to add a native query to the connector's configuration. It specifies the connector path, operation path, and sets the kind to 'query'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector plugin \\\n  --connector subgraph_name/connector/connector_name/connector.yaml \\\n  -- native-operation create \\\n  --operation-path path/to/sql_file_name.sql \\\n  --kind query\n```\n\n----------------------------------------\n\nTITLE: Initializing New Hasura DDN Project\nDESCRIPTION: Commands to create and navigate to a new Hasura DDN project directory\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Restarting Hasura DDN Project\nDESCRIPTION: Rebuild the Hasura DDN project and restart services after adding a new model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Engine and PostgreSQL Connector\nDESCRIPTION: Command to start the local Hasura DDN Engine and PostgreSQL connector services using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Defining AWS CloudFormation Template for Hasura Cloud BYOC\nDESCRIPTION: This YAML template defines the AWS resources, including IAM roles and policies, required for Hasura Cloud BYOC setup. It creates a bootstrap role with necessary permissions for EKS, EC2, IAM, and other AWS services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nResources:\n  BootstrapRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: HasuraCloudBYOC\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              AWS: arn:aws:iam::760537944023:role/PulumiDDNCli\n            Action: sts:AssumeRole\n            Condition:\n              StringEquals:\n                sts:ExternalId: hasura-cloud\n  BootstrapPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: HasuraCloudBYOC\n      Roles:\n        - !Ref BootstrapRole\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n              - ec2:DescribeAddresses\n              - ec2:DescribeAddressesAttribute\n              - ec2:DescribeAvailabilityZones\n              - ec2:DescribeInternetGateways\n              - ec2:DescribeNatGateways\n              - ec2:DescribeNetworkInterfaces\n              - ec2:DescribeRegions\n              - ec2:DescribeRouteTables\n              - ec2:DescribeSecurityGroupRules\n              - ec2:DescribeSecurityGroups\n              - ec2:DescribeSubnets\n              - ec2:DescribeTags\n              - ec2:DescribeVpcAttribute\n              - ec2:DescribeVpcs\n              - ec2:DescribeVpcEndpointServices\n              - ec2:DescribeVpcEndpoints\n              - eks:DeleteAddon\n              - eks:DescribeAddon\n              - eks:DescribeCluster\n              - eks:DescribeNodegroup\n              - eks:ListClusters\n              - iam:GetRole\n              - iam:GetServiceLinkedRoleDeletionStatus\n              - sqs:GetQueueAttributes\n            Resource: '*'\n          - Effect: Allow\n            Action:\n              - ec2:AllocateAddress\n              - ec2:AssociateAddress\n              - ec2:AssociateRouteTable\n              - ec2:CreateInternetGateway\n              - ec2:CreateNatGateway\n              - ec2:CreateRoute\n              - ec2:CreateRouteTable\n              - ec2:CreateSubnet\n              - ec2:CreateTags\n              - ec2:CreateVpc\n              - ec2:CreateSecurityGroup\n              - ec2:AuthorizeSecurityGroupIngress\n              - ec2:CreateVpcEndpoint\n              - eks:CreateCluster\n              - eks:CreateNodegroup\n              - globalaccelerator:CreateAccelerator\n              - globalaccelerator:CreateEndpointGroup\n              - globalaccelerator:CreateListener\n              - globalaccelerator:TagResource\n              - sqs:CreateQueue\n              - sqs:TagQueue\n              - acm:RequestCertificate\n              - events:PutRule\n              - events:TagResource\n              - iam:CreateOpenIDConnectProvider\n              - iam:TagOpenIDConnectProvider\n            Resource: '*'\n            Condition:\n              StringEquals:\n                aws:RequestTag/Created-By: HasuraCloud\n          - Effect: Allow\n            Action:\n              - ec2:CreateTags\n            Resource:\n              - !Sub arn:aws:ec2:*:${AWS::AccountId}:security-group/*\n            Condition:\n              StringEquals:\n                aws:RequestTag/karpenter.sh/discovery: dataplane\n          - Effect: Allow\n            Action:\n              - ec2:DeleteTags\n            Resource:\n              - !Sub arn:aws:ec2:*:${AWS::AccountId}:security-group/*\n            Condition:\n              StringEquals:\n                aws:ResourceTag/karpenter.sh/discovery: dataplane\n          - Effect: Allow\n            Action:\n              - eks:AssociateAccessPolicy\n              - eks:DisassociateAccessPolicy\n            Resource:\n              - !Sub arn:aws:eks:*:${AWS::AccountId}:access-entry/dataplane/*\n          - Effect: Allow\n            Action:\n              - iam:AttachRolePolicy\n              - iam:CreateInstanceProfile\n              - iam:CreatePolicy\n              - iam:CreateRole\n              - iam:DeleteInstanceProfile\n              - iam:DeleteOpenIDConnectProvider\n              - iam:DeletePolicy\n              - iam:DeleteRole\n              - iam:DeleteServiceLinkedRole\n              - iam:DetachRolePolicy\n              - iam:GetInstanceProfile\n              - iam:GetOpenIDConnectProvider\n              - iam:GetPolicy\n              - iam:GetPolicyVersion\n              - iam:GetRolePolicy\n              - iam:ListAttachedRolePolicies\n              - iam:ListInstanceProfilesForRole\n              - iam:ListOpenIDConnectProviderTags\n              - iam:ListPolicyVersions\n              - iam:ListRolePolicies\n              - iam:PassRole\n              - iam:PutRolePolicy\n              - iam:RemoveRoleFromInstanceProfile\n              - iam:TagInstanceProfile\n              - iam:TagOpenIDConnectProvider\n              - iam:TagPolicy\n              - iam:TagRole\n            Resource:\n              # Roles\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/KarpenterNodeRole\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksClusterRole-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/lb-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/autoscaler-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/global-accelerator-operator-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/karpenter-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/HasuraWorkloadAutomationRole-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/vpc-cni-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/ebsCsiDriverRole-*\n              # Instance Profiles\n              - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/dataplane_*\n              # Policies\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/lb-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/autoscaler-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/global-accelerator-operator-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/karpenter-controller-*\n              # OIDC Providers\n              - !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.*\n              # Service Roles\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot\n          - Effect: Allow\n            Action:\n              - iam:CreateServiceLinkedRole\n            Resource: '*'\n            Condition:\n              StringEquals:\n                iam:AWSServiceName:\n                  - spot.amazonaws.com\n                  - globalaccelerator.amazonaws.com\n                  - eks.amazonaws.com\n                  - eks-nodegroup.amazonaws.com\n          - Effect: Allow\n            Action:\n              - eks:*\n              - globalaccelerator:*\n              - sqs:*\n              - acm:*\n              - events:*\n            Resource: '*'\n            Condition:\n              StringEquals:\n                aws:ResourceTag/Created-By: HasuraCloud\n          - Effect: Allow\n            Action:\n              - ec2:*\n            Resource: '*'\n            Condition:\n              StringEquals:\n                ec2:ResourceTag/Created-By: HasuraCloud\n\nOutputs:\n  RoleArn:\n    Description: \"ARN of the HasuraCloudBYOC IAM Role\"\n    Value: !GetAtt BootstrapRole.Arn\n```\n\n----------------------------------------\n\nTITLE: Defining ModelSource in YAML for OpenDD Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a ModelSource in OpenDD. It specifies the data connector name and the collection that backs the model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndataConnectorName: data_connector\ncollection: articles\n```\n\n----------------------------------------\n\nTITLE: Project Build and Start Commands\nDESCRIPTION: Bash commands for building the supergraph and starting the Docker development environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/caching/how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Model Update Command Options\nDESCRIPTION: Available command-specific options for the model update command including CI mode, context selection, and pattern matching options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for update\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Executing a Raw PromQL Query\nDESCRIPTION: Executes a raw PromQL query directly for process metrics, intended for use by administrators. The query includes a time range and step parameter, returning labels and values for each data point.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  promql_query(query: \"process_cpu_seconds_total{job=\\\"node\\\"}\", start: \"2024-09-24T10:00:00Z\", step: \"5m\") {\n    labels\n    values {\n      timestamp\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User by Global ID GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates fetching user information via the `node` field using a Global ID. It leverages the Relay pattern to retrieve elaborate user details based solely on the Global ID.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  node(id: \"eyJ2ZXJzaW9uIjoxLCJ0eXBlbmFtZSI6IlVzZXJzIiwiaWQiOnsidXNlcl9pZCI6IjEifX0=\") {\n    id\n    __typename\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspect data source with DDN CLI\nDESCRIPTION: This command introspects a data source using the DDN CLI to fetch entity resources. Replace `<connector_name>` with the actual name of the connector. It is a prerequisite for adding detected relationships to your metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector introspect <connector_name>\"\n```\n\n----------------------------------------\n\nTITLE: DDN Header Forwarding Usage Examples\nDESCRIPTION: Examples demonstrating different ways to configure header forwarding, including using connector names, configuration files, and connector links.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Configure header forwarding for the DataConnectorLink corresponding to Connector `mypostgres`\n ddn codemod configure-header-forwarding mypostgres\n\n# Configure header forwarding for the DataConnectorLink corresponding to Connector config file ./connector.yaml\n ddn codemod configure-header-forwarding --connector ./connector.yaml\n\n# Configure header forwarding for the DataConnectorLink `mypostgres`\n ddn codemod configure-header-forwarding --connector-link mypostgres\n```\n\n----------------------------------------\n\nTITLE: Querying Process Metrics with Filters\nDESCRIPTION: Executes a GraphQL query to retrieve 'process_cpu_seconds_total' metrics filtered by timestamp and specific job criteria. Supports range queries using timestamp operators and includes step, offset, and timeout parameters for fine-tuning.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  process_cpu_seconds_total(\n    where: {\n      timestamp: { _gt: \"2024-09-24T10:00:00Z\" }\n      job: {\n        _eq: \"node\"\n        _neq: \"prometheus\"\n        _in: [\"node\", \"prometheus\"]\n        _nin: [\"ndc-prometheus\"]\n        _regex: \"prometheus.*\"\n        _nregex: \"foo.*\"\n      }\n    }\n    args: { step: \"5m\", offset: \"5m\", timeout: \"30s\" }\n  ) {\n    job\n    instance\n    timestamp\n    value\n    values {\n      timestamp\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Nested Relationship Include\nDESCRIPTION: Example JSON response when including nested relationships (posts and their comments) in a users query. The included array contains both the posts and comments resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"User\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"name\": \"John Doe\"\n      },\n      \"relationships\": {\n        \"posts\": {\n          \"data\": [{ \"type\": \"Post\", \"id\": \"1\" }]\n        }\n      }\n    }\n  ],\n  \"included\": [\n    {\n      \"type\": \"Post\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"First Post\"\n      },\n      \"relationships\": {\n        \"comments\": {\n          \"data\": [{ \"type\": \"Comment\", \"id\": \"1\" }]\n        }\n      }\n    },\n    {\n      \"type\": \"Comment\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"text\": \"Great post!\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValueExpression Structure in Markdown\nDESCRIPTION: Describes the ValueExpression structure used in permissions and presets. It specifies that exactly one of the fields (literal, sessionVariable, or valueFromEnv) must be present.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `literal` |  | false |  |\n| `sessionVariable` | string | false |  |\n| `valueFromEnv` | string | false |  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph with Field Prefixing in YAML\nDESCRIPTION: Adds field prefixing configuration to the subgraph.yaml file, ensuring types and fields are namespaced to the billing subgraph. This prevents naming conflicts when multiple subgraphs are combined.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: billing\n  generator:\n    rootPath: .\n    namingConvention: graphql\n    #highlight-start\n    graphqlRootFieldPrefix: billing_\n    graphqlTypeNamePrefix: billing_\n    #highlight-end\n  includePaths:\n    - metadata\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Command in DDN CLI\nDESCRIPTION: This command updates an existing command to reflect changes in the underlying data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn command update <connector_link_name> <command_name>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Authenticate the Hasura DDN CLI to access Hasura Cloud resources. This command launches a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Fetch All Articles Example Response\nDESCRIPTION: Example JSON response showing the structure of returned data when fetching all articles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Article\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"Introduction to JSON:API\",\n        \"content\": \"JSON:API is a specification for building APIs...\",\n        \"created_at\": \"2023-01-01T12:00:00Z\",\n        \"author_id\": 1\n      }\n    },\n    {\n      \"type\": \"Article\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"Advanced JSON:API Concepts\",\n        \"content\": \"In this article, we'll explore...\",\n        \"created_at\": \"2023-01-02T12:00:00Z\",\n        \"author_id\": 2\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Using upgrade-auth-config-to-v3 Command\nDESCRIPTION: Examples showing various usage patterns of the upgrade-auth-config-to-v3 command, including running on the current context, specific supergraph, or subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context. Finds `AuthConfig` present in any subgraphs within the supergraph and modifies it to version v3\n ddn codemod upgrade-auth-config-to-v3\n\n# Run on a specific supergraph config file. Finds `AuthConfig` present in any subgraphs within the supergraph and modifies it to version v3\n ddn codemod upgrade-auth-config-to-v3 --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph config file. Finds `AuthConfig` present in the subgraph and modifies it to version v3\n ddn codemod upgrade-auth-config-to-v3 --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Self-Hosted Engine URL with DDN CLI\nDESCRIPTION: Command to set the engine's URL for a build in a self-hosted data plane. It requires the URL and build version as parameters, with optional flags for project and context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build set-self-hosted-engine-url <url> --build-version <build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for ddn command add\nDESCRIPTION: Command-specific options including flags for CI mode, context specification, help display, pattern detection, and subgraph path configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for add\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Search Products Based on Vector\nDESCRIPTION: This GraphQL query snippet retrieves products based on a vector search, allowing for filtering of results according to a query vector and returning the closest matches in terms of distance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/vector-search.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  productsVectorDistance(args: { query_vector: \"<input vector>\" }, limit: 10, order_by: { distance: Asc }) {\n    id\n    distance\n    product {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions in DuckDB Connector\nDESCRIPTION: Configuration of custom functions that can be called through the connector, specifying function name, arguments, return type, and description.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/duckdb/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [\n    {\n      \"name\": \"get_post_by_id\",\n      \"arguments\": {\n        \"post_id\": {\n          \"type\": {\n            \"type\": \"named\",\n            \"name\": \"Int\"\n          },\n          \"description\": \"The ID of the post to retrieve\"\n        }\n      },\n      \"return_type\": {\n        \"type\": \"object\",\n        \"name\": \"posts\"\n      },\n      \"description\": \"Retrieves a post by its ID\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn model add Command in Bash\nDESCRIPTION: These examples show various ways to use the 'ddn model add' command, including adding all models, adding a specific model, and using glob patterns to filter models.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all Models for DataConnectorLink \"mydb\" in the subgraph set in the context\n ddn model add mydb \"*\"\n\n# Add a new Model \"Album\" from the collection \"Album\" in the DataConnectorLink \"mydb\" in Subgraph \"app\"\n ddn model add mydb Album --subgraph ./app/subgraph.yaml\n\n# Add all the Models from the collections in the DataConnectorLink \"mydb\" in Subgraph \"app\"\n ddn model add mydb \"*\" --subgraph ./app/subgraph.yaml\n\n# Add Models filtered by glob pattern from the collections in the DataConnectorLink \"mydb\" in Subgraph \"app\"\n ddn model add mydb \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: View Available Data Connector Resources with DDN\nDESCRIPTION: This command uses the `ddn` CLI to show the available resources from a specified data connector. In this case, it targets a PostgreSQL connector named `my_pg`. It displays the resources that the connector exposes, such as tables and views, enabling you to understand the structure of your data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector show-resources my_pg\"\n```\n\n----------------------------------------\n\nTITLE: Introspecting ClickHouse Instance with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect the ClickHouse instance for the specified connector, updating the local configuration based on the database schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Seeding BigQuery Posts Table\nDESCRIPTION: This SQL query inserts sample data into the 'posts' table in the BigQuery dataset.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO hasura_demo.posts (user_id, post_id, title, content) VALUES\n  (1, 1, 'My First Post', 'This is the first post for Alice.'),\n  (1, 2, 'Another Post', 'Alice writes again!'),\n  (2, 3, 'Bobs Post', 'Bob shares his thoughts.'),\n  (3, 4, 'Hello World', 'Charlie joins the conversation.');\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Engine Image Build\nDESCRIPTION: This Dockerfile snippet shows how to build a custom engine image by copying the build directory into the base v3-engine image. It's used to include necessary metadata files in the engine container.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/hasura/v3-engine\nCOPY ./build /md/\n```\n\n----------------------------------------\n\nTITLE: Tracking Function in Hasura DDN\nDESCRIPTION: Commands to introspect the connector and add the function to the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\nddn command add <connector_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Supergraph Builds in Hasura DDN\nDESCRIPTION: Retrieves a list of available supergraph builds. This information is needed for creating a new supergraph build that incorporates the latest subgraph changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build get\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent operations including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Examples of Using the ddn console Command\nDESCRIPTION: Examples showing various ways to use the ddn console command, including opening the console for the current project context, local development, with specific engine URLs, for a specific project, or for a specific SupergraphBuild version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Open the console for the DDN project set in the context\n ddn console\n\n# Open the local dev console\n ddn console --local\n\n# Open the local dev console with a specific engine url\n ddn console --url http://localhost:8080\n\n# Open the console for a specific DDN project\n ddn console --project my-project-123\n\n# Open the console for a specific SupergraphBuild\n ddn console --project my-project-123 --build-version build-version-123\n```\n\n----------------------------------------\n\nTITLE: Building and Running DDN Services\nDESCRIPTION: Commands for building the supergraph and restarting Docker services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Querying Users\nDESCRIPTION: GraphQL query to fetch user data\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_USERS {\n  getUsers {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getUsers\": [\n      {\n        \"id\": 1,\n        \"name\": \"Leanne Graham\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Ervin Howell\"\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Clementine Bauch\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Service Token Secret - ENV\nDESCRIPTION: This snippet adds a service token secret to the '.env.cloud' file, which is essential for connector authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nAPP_MY_POSTGRES_HASURA_SERVICE_TOKEN_SECRET=\"fdAwGRXSTVAe-gSdTpRtxw==\"\n```\n\n----------------------------------------\n\nTITLE: Adding Users Table as DDN Model\nDESCRIPTION: Tracks the 'users' table from PostgreSQL as a model in DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn models add my_pg users\n```\n\n----------------------------------------\n\nTITLE: Tracking Database Entities in Hasura DDN Metadata\nDESCRIPTION: Command to track all tables, commands, and relationships from the PostgreSQL database in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn models add my_pg \"*\" && ddn commands add my_pg \"*\" && ddn relationships add my_pg \"*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Discovered MongoDB Resources with DDN CLI\nDESCRIPTION: This command shows the resources discovered from the MongoDB instance named 'my_mongo' after introspection. It helps verify that the changes made to the native mutation are reflected in the connector's resource list.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\n----------------------------------------\n\nTITLE: Connector Cloud Configuration\nDESCRIPTION: YAML configuration for deploying a connector to DDN\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v1\ndefinition:\n  name: <connector-name>\n  subgraph: <subgraph-name>\n  source: hasura/<connector-type>:<version>\n  context: .\n  envFile: .env.cloud\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Data via GraphQL\nDESCRIPTION: Execute a GraphQL query to fetch data from the MySQL 'users' table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  mydbUsers {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ddn model list Command\nDESCRIPTION: The basic syntax for using the ddn model list command, which requires specifying a connector-link-name and optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model list <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Viewing details of a specific Subgraph in Bash\nDESCRIPTION: This example shows how to view details of a specific Subgraph named 'app' within a Hasura DDN Project using the 'ddn project subgraph get' command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph get app --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Defining Schema File Paths in YAML\nDESCRIPTION: This YAML snippet defines the configuration for schema file paths and their specifications, listing multiple file entries along with their respective specifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - file: swagger.json\n    spec: openapi2\n  - file: openapi.yaml\n    spec: openapi3\n    trimPrefix: /v1\n    envPrefix: PET_STORE\n  - file: schema.json\n    spec: ndc\n```\n\n----------------------------------------\n\nTITLE: DataConnectorLink Metadata Configuration\nDESCRIPTION: This YAML snippet configures the `DataConnectorLink` metadata to forward the `Cookie` header. It defines an `argumentPreset` for the `headers` argument and configures `httpHeaders` to forward the `Cookie` header. The `httpHeaders` setting enables forwarding of specific headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/auth.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: my_api\n  # ...\n  argumentPresets:\n    - argument: headers\n      value:\n        httpHeaders:\n          forward:\n            - Cookie\n          additional: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Authentication for Azure Blob Storage - YAML\nDESCRIPTION: Provides an example of enabling anonymous access to Azure Blob Storage. This configuration allows access to public buckets and objects without requiring credentials.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - type: azblob\n    endpoint: https://azurestoragesamples.blob.core.windows.net/samples/cloud.jpg\n    authentication:\n      type: anonymous\n```\n\n----------------------------------------\n\nTITLE: Generating PromptQL Secret Key - Usage Example\nDESCRIPTION: Example showing how to generate a PromptQL secret key for the current project context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generates a PromptQL secret key for the project set in the context and saves to global config\n ddn auth generate-promptql-secret-key\n```\n\n----------------------------------------\n\nTITLE: Building Hasura Supergraph with JWT Authentication\nDESCRIPTION: Command to rebuild the Hasura supergraph locally after updating the AuthConfig and permissions. This step is necessary to apply the JWT authentication configuration changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Bash\nDESCRIPTION: Commands to install dependencies and start local development server\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd allowlist-plugin\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining FieldName in Open DD\nDESCRIPTION: Describes the FieldName type in Open DD, which represents the name of a field in a user-defined object type. It is defined as a string value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### FieldName {#objecttype-fieldname}\n\nThe name of a field in a user-defined object type.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration - YAML\nDESCRIPTION: YAML configuration for the allowlist plugin defining lifecycle hooks and request parameters\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: cloudflare allowlist\n  url:\n    valueFromEnv: ALLOW_LIST_URL\n  pre: parse\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            valueFromEnv: M_AUTH_KEY\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Connector (TypeScript)\nDESCRIPTION: Initializes a TypeScript lambda connector in the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Updating All MongoDB Commands with DDN CLI\nDESCRIPTION: This command updates all MongoDB commands for the 'my_mongo' connector. It's used when multiple operations need to be updated simultaneously, applying changes across all native mutations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_mongo \"*\"\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship in Hasura Metadata\nDESCRIPTION: This YAML snippet defines a relationship between the 'users' and 'posts' tables in the Hasura metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: Posts\n  target:\n    model:\n      name: Users\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Internal Error Response\nDESCRIPTION: This snippet illustrates the response structure for internal errors within the Hasura DDN GraphQL API. Due to security and privacy concerns, detailed error messages are not exposed to API consumers. Instead, the error message is simplified to \"internal error\".\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/errors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"internal error\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Watch Mode in Bash\nDESCRIPTION: This snippet shows how to run the utility in watch mode for development purposes, without running tests.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/generate-metadata-docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector\nDESCRIPTION: Initializes a PostgreSQL connector with interactive prompts\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_pg -i\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Source in DDN CLI\nDESCRIPTION: This command introspects the data source to discover available commands that can be added to the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Connector\nDESCRIPTION: Initialize a MySQL connector for the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_mysql -i\n```\n\n----------------------------------------\n\nTITLE: Feature Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing various API features between Hasura v2 and DDN versions, indicating support status with checkmarks and notes for specific conditions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/upgrade/feature-availability/api-features.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                     | v2      | DDN    |\n| --------------------------- | ------- | ------ |\n| Instant GraphQL API         | ✅      | ✅     |\n| Multiple Data Sources       | ✅      | ✅     |\n| Query                       | ✅      | ✅     |\n| Mutation                    | ✅      | ✅ (C) |\n| Subscription                | ✅      | ✅     |\n| Streaming                   | ✅      | WIP    |\n| Aggregate Query             | ✅      | ✅ (C) |\n| Native Query                | ✅      | ✅     |\n| Native Mutation             | ❌      | ✅     |\n| Action                      | ✅      | ✅     |\n| Event Trigger               | ✅      | WIP    |\n| Cron Trigger                | ✅      | ❌     |\n| Remote Schema               | ✅      | ✅     |\n| CI/CD                       | ✅      | ✅     |\n| Federation                  | ✅      | ✅     |\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication for Prometheus Connector\nDESCRIPTION: Sets up basic authentication using environment variables for username and password credentials\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconnection_settings:\n  authentication:\n    basic:\n      username:\n        env: PROMETHEUS_USERNAME\n      password:\n        env: PROMETHEUS_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Example of Running a Connector Update Command in Bash\nDESCRIPTION: An example showing how to run the 'update' command of a specific connector by providing the path to the connector YAML config file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run the \"update\" command of a connector\n ddn connector plugin --connector app/connector/mypostgres/connector.yaml -- update\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Command to open the local Hasura DDN console in a web browser for exploring and interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Subgraph Configuration\nDESCRIPTION: YAML configuration for the subgraph defining environment variable mappings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: globals\n  ...\n  includePaths:\n    ...\n  envMapping:\n    RESTIFIED_ENDPOINTS_URL:\n      fromEnv: RESTIFIED_ENDPOINTS_URL\n    M_AUTH_KEY:\n      fromEnv: M_AUTH_KEY\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Connector\nDESCRIPTION: Initializes a lambda connector for the project. The command prompts for the connector type and port selection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook with cURL\nDESCRIPTION: Command to test the webhook endpoint using cURL, demonstrating the required headers and expected response format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/webhook \\\n  -H \"Authorization: Bearer your-token-here\" \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Environment File in YAML\nDESCRIPTION: Example demonstrating how to set the cloud environment file path in the default context for cloud operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying MongoDB Connector using DDN CLI\nDESCRIPTION: This Bash command demonstrates how to build and deploy a MongoDB connector to Hasura DDN using the DDN CLI. The command specifies the connector's configuration file path and outlines the necessary arguments for the deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/mongoDB/_deployment-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n\"ddn connector build create --connector ./my_subgraph/connector/my_mongo/connector.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Subgraph Supergraph\nDESCRIPTION: Creates a supergraph build with multiple specific subgraphs\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph_name:subgraph_version> --subgraph-version <subgraph_name:subgraph_version>  --base-supergraph-version <supergraph_version>\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Login Command Options in SASS\nDESCRIPTION: This snippet lists the specific options available for the 'ddn auth login' command, including the ability to provide an access token and a deprecated option for using a Personal Access Token.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --access-token string   The Personal Access Token or Service Account Token [env: HASURA_DDN_ACCESS_TOKEN]\n-h, --help                  help for login\n    --pat string            Personal Access token [env: HASURA_DDN_PAT] (DEPRECATED: use --access-token instead)\n```\n\n----------------------------------------\n\nTITLE: Displaying Found Resources in PostgreSQL Connector\nDESCRIPTION: Shows the resources discovered during the introspection process of the PostgreSQL connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for MongoDB Native Mutations\nDESCRIPTION: Creates a directory structure to store custom native mutations for a MongoDB connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_mongo/native_mutations/\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship CLI Inherited Options\nDESCRIPTION: Options inherited from parent commands including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Models with DDN CLI in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for adding models to local metadata using the DDN CLI. It includes options for specifying the connector link name and collection name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector-link-name> <collection-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Install DDN CLI\nDESCRIPTION: Download and install the Hasura DDN Command Line Interface using a curl script\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://graphql-engine-cdn.hasura.io/ddn/cli/v4/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in connector.yaml\nDESCRIPTION: Example showing how to define basic resource limits in a connector.yaml file. Demonstrates setting memory and CPU allocations at the connector level.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/connector-deployment-resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Example connector.yaml configuration\"\nkind: Connector\nversion: v2\ndefinition:\n  name: my_connector\n  resources:\n    memory: 128M\n    cpu: 0.5\n  regionConfiguration:\n    - region: us-central1\n      resources:\n        memory: 128M\n        cpu: 2\n```\n\n----------------------------------------\n\nTITLE: Modifying JWT Claims with AWS Lambda for Hasura DDN (JavaScript)\nDESCRIPTION: This Lambda function adds custom Hasura namespace claims to the Cognito JWT. It includes a placeholder for fetching user roles and injects required Hasura claims into the token.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/2-aws-cognito.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handler = async (event) => {\n  // Here, you'll need to fetch the user's role from Hasura DDN using an admin-level authenticated request\n  // Learn more here: https://hasura.io/docs/3.0/auth/authentication/jwt/special-roles\n  // Below, we're hard-coding the value for now\n  const user_role = \"user\"; // the role returned from your request ☝️\n  event.response = {\n    claimsOverrideDetails: {\n      claimsToAddOrOverride: {\n        \"claims.jwt.hasura.io\": JSON.stringify({\n          \"x-hasura-user-id\": event.request.userAttributes.sub,\n          \"x-hasura-default-role\": user_role,\n          \"x-hasura-allowed-roles\": [\"user\"],\n        }),\n      },\n    },\n  };\n\n  return event;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt for Go\nDESCRIPTION: Add the bcrypt package and its dependencies to the go.mod file for Go implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo get golang.org/x/crypto/bcrypt\ngo get golang.org/x/net/idna@v0.26.0\n```\n\n----------------------------------------\n\nTITLE: Adding models and commands from introspection output\nDESCRIPTION: These commands add models, commands, and relationships to the supergraph based on the output from the introspection command. The <connector-name> must match the previously defined connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector-name> \"*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector-name> \"*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nddn relationship add <connector-name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Updating Specific MongoDB Command with DDN CLI\nDESCRIPTION: This command updates a specific MongoDB command named 'insertUser' for the 'my_mongo' connector. It's used to apply changes made to the native mutation for a particular operation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_mongo insertUser\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Subgraph\nDESCRIPTION: Provisions a new subgraph in the cloud parent project\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn project subgraph create <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database\nDESCRIPTION: Introspects the PostgreSQL database using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI with Hasura DDN\nDESCRIPTION: Command to authenticate the Hasura DDN CLI, which launches a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Updating Artist Name SQL Mutation\nDESCRIPTION: This SQL update statement changes the name of an artist in the Artist table and returns the updated row. It selects the artist by current name and uses the RETURNING clause to fetch all columns after the update.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE public.\"Artist\"\nSET \"Name\" = {{new_name}}\nWHERE \"ArtistId\" = (\n  SELECT \"ArtistId\"\n  FROM public.\"Artist\"\n  WHERE \"Name\" = {{current_name}}\n  LIMIT 1\n)\nRETURNING *;\n```\n\n----------------------------------------\n\nTITLE: Options for ddn supergraph build create in SASS\nDESCRIPTION: This snippet lists the available options and flags for the 'ddn supergraph build create' command, including their descriptions and default values where applicable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --apply                            Apply the build created after it is completed\n    --base-supergraph-on-applied       Use the applied Supergraph as the base supergraph\n    --base-supergraph-version string   Base Supergraph version for the compose build\n    --ci                               Disables the use of context\n-c, --context string                   Name of the context to use. (default <current_context>)\n-d, --description string               (Optional) description of the build\n-e, --env stringArray                  Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray             Path to .env file. Can be repeated to provide multiple env files\n-h, --help                             help for create\n    --no-build-connectors              Do not recursively build all connectors in all subgraphs and use their URLs for supergraph build. (default: false)\n    --no-diff                          Do not do a GraphQL schema diff against the applied build\n    --output-dir string                Path to the directory to output the build artifacts\n-p, --project string                   DDN Project name\n    --self-hosted-data-plane           Is the data plane self hosted?\n    --subgraph-version stringArray     Subgraph(s) with build version to compose\n    --supergraph string                Path to Supergraph config file\n    --target-env-file string           Env file to write the connector build URLs to.\n    --update-connector-link-schema     Update DataConnectorLink schema with the NDC schema of the connectors built recursively. (default: false)\n```\n\n----------------------------------------\n\nTITLE: Configuring ENV File for Cloud Connector\nDESCRIPTION: This snippet provides an example of setting a connection URI in the `.env.cloud` file, which is necessary for connecting the cloud-hosted connector with the PostgreSQL data source. The connection URI should be replaced with the appropriate staging or production database URI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/postgreSQL/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCONNECTION_URI=<postgres-connection-uri>\n```\n\n----------------------------------------\n\nTITLE: Initializing New Hasura Project\nDESCRIPTION: Command to create and enter a new Hasura DDN project directory\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Authenticating DDN CLI Session\nDESCRIPTION: Initiates the authentication process for the DDN CLI, opening a browser window for login credentials.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Command to open the local Hasura DDN console for testing the GraphQL API and plugins.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Showing Available Resources\nDESCRIPTION: Display available resources and their status for the OpenAPI connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_openapi\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for ddn plugins list\nDESCRIPTION: The basic command syntax for listing all available plugins in the DDN CLI. This command displays all available plugins with their index, versions and installation status.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins list [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI Auto-Completion for Bash on Linux\nDESCRIPTION: Command to set up permanent auto-completion for Hasura CLI in Bash on Linux systems.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn completion bash > /etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Testing Extended Model in GraphQL\nDESCRIPTION: Demonstrates a GraphQL query using the extended 'shoutName' field on the Users model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithShoutedName {\n  users {\n    id\n    name\n    shoutName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying New MySQL Table via GraphQL\nDESCRIPTION: Execute a GraphQL query to fetch data from the newly added 'posts' table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  mydbPosts {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Container Environment Variables in Docker Compose\nDESCRIPTION: This YAML snippet shows the default environment variable configuration for the engine container in a Docker Compose file. It specifies paths for authentication config, metadata, and enables CORS.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nAUTHN_CONFIG_PATH: /md/auth_config.json\nENABLE_CORS: \"true\"\nINTROSPECTION_METADATA_FILE: /md/metadata.json\nMETADATA_PATH: /md/open_dd.json\nOTLP_ENDPOINT: http://local.hasura.dev:4317\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Collection as a Model\nDESCRIPTION: Command to track the MongoDB users collection as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_mongo users\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data into PostgreSQL Users Table\nDESCRIPTION: Inserts additional user records into the PostgreSQL database to provide more interesting data for the native query example.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (name, age) VALUES ('Dan', 25), ('Erika', 25), ('Fatima', 25), ('Gabe', 25);\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with DDN CLI in Bash\nDESCRIPTION: This command builds the Supergraph using the supergraph config and local env file from context, outputting to the default engine directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database Schema in Hasura DDN\nDESCRIPTION: Uses the Hasura DDN CLI to introspect the PostgreSQL database schema. This generates a representation of the database schema in the billing/connector/billing_pg/configuration.json file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect billing_pg\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Table as Hasura Model\nDESCRIPTION: Track the Snowflake 'posts' table as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_snowflake \"DOCS.PUBLIC.POSTS\"\n```\n\n----------------------------------------\n\nTITLE: Custom Script Configuration Example\nDESCRIPTION: Example YAML configuration showing how to define a custom script with both bash and powershell versions\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-context-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmy-custom-script:\n  bash: echo \"Hello from bash!\"\n  powershell: Write-Host \"Hello from PowerShell!\"\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN Header Forwarding\nDESCRIPTION: The basic command structure for configuring header forwarding to a connector using the DDN CLI codemod.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod configure-header-forwarding connector-name [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Subgraph in Local Metadata\nDESCRIPTION: This snippet demonstrates how to initialize a new Subgraph using the DDN CLI. It specifies the subgraph name and optional directory for storage. The user can create a Subgraph named 'app' or specify a directory and supergraph configuration files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph init <subgraph-name> --dir <dir-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building the Hasura DDN Supergraph\nDESCRIPTION: Command to create a local build of the Hasura DDN supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Adding All Commands in Hasura DDN\nDESCRIPTION: This shell command adds all available commands for inserting, updating, and deleting data on the 'users' and 'posts' tables. It generates metadata files for these operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_turso \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Hasura DDN Plugin\nDESCRIPTION: Package.json configuration for a simple plugin project, including necessary scripts for development and build processes, along with required dependencies for Express and TypeScript.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"simple-plugin\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node dist/index.js\",\n    \"dev\": \"ts-node-dev --respawn --transpile-only src/index.ts\",\n    \"build\": \"tsc\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\",\n  \"dependencies\": {\n    \"express\": \"^4.21.2\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^5.0.0\",\n    \"@types/node\": \"^22.10.6\",\n    \"ts-node-dev\": \"^2.0.0\",\n    \"typescript\": \"^5.7.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connector URLs in Environment File\nDESCRIPTION: Template for specifying read and write URLs for each connector in the deployment environment file\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<SUBGRAPH_NAME>_<CONNECTOR_NAME>_READ_URL=http://<host>:<port>\n<SUBGRAPH_NAME>_<CONNECTOR_NAME>_WRITE_URL=http://<host>:<port>\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn supergraph build create in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn supergraph build create' command, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Deploying Data Connectors with DDN CLI\nDESCRIPTION: Command for building and deploying a data connector using the Hasura DDN CLI. This will deploy the specified connector to Hasura DDN cloud and return read and write URLs for the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector <subgraph-name>/connector/<connector-name>/connector.cloud.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Database Schema\nDESCRIPTION: Creates a users table in DuckDB with a sequence for auto-incrementing IDs and inserts sample data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\necho \"\n-- Create a sequence since DuckDB doesn't support auto-incrementing\nCREATE SEQUENCE users_id_seq;\n-- Create the table using the sequence\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY DEFAULT nextval('users_id_seq'),\n  name VARCHAR(255) NOT NULL,\n  age INTEGER NOT NULL\n);\n-- Insert some data\nINSERT INTO users (name, age) VALUES ('Alice', 25);\nINSERT INTO users (name, age) VALUES ('Bob', 30);\nINSERT INTO users (name, age) VALUES ('Charlie', 35);\n\" | duckdb app/connector/my_duckdb/data.duckdb\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Global options that are inherited from parent commands, including logging level, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Updating Model in DDN\nDESCRIPTION: This command updates a specific model in DDN after changes in the data source have been introspected.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nddn model update <connector_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Tracking the function in Hasura\nDESCRIPTION: This command adds the 'shout_name' function from the 'my_python' connector to the Hasura GraphQL schema. This makes the function available as a query within the Hasura GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_python shout_name\n```\n\n----------------------------------------\n\nTITLE: Introspecting Oracle Database\nDESCRIPTION: Command to introspect the Oracle database schema into the Hasura DDN connector configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_oracle\n```\n\n----------------------------------------\n\nTITLE: Creating SupergraphBuild with DDN CLI in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for creating a SupergraphBuild using the DDN CLI. It includes the command structure and flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Connector with DDN CLI\nDESCRIPTION: Command to initialize a new lambda connector in a project directory using the DDN CLI. The -i flag enables interactive mode for configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/add-a-lambda-connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nddn connector init <your_name_for_the_connector> -i\n```\n\n----------------------------------------\n\nTITLE: Handling User Input Using $literal in MongoDB\nDESCRIPTION: Illustrates the use of the $literal operator to safely include user inputs in MongoDB queries, preventing accidental evaluation of input as expressions or unintended data exposure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/security-best-practices.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"$project\": {\n      \"value_from_query_input\": { \"$literal\": \"{{ user_input }}\" }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers for Introspection in JSON\nDESCRIPTION: This snippet configures headers for the introspection process within the GraphQL connector. \"X-Hasura-Admin-Secret\" and \"Content-Type\" headers are defined with static values, where the admin key is meant for a secure connection to the Hasura v2 project. Dependencies include the presence of specific values for header keys.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/graphql/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"headers\": {\n      \"X-Hasura-Admin-Secret\": {\n        \"value\": \"secret-admin-key-from-a-v2-project\"\n      },\n      \"Content-Type\": {\n        \"value\": \"application/json\"\n      }\n    }\n  \n```\n\n----------------------------------------\n\nTITLE: View Docker Service Logs\nDESCRIPTION: Command to view and follow logs for a specific Docker Compose service\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs -f docker-compose-service-name\n```\n\n----------------------------------------\n\nTITLE: Adding Native Query to Connector Configuration\nDESCRIPTION: CLI command to create a new Native Query operation in the Hasura connector configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/chinook_pg/connector.yaml -- \\\n  native-operation create --operation-path native_operations/queries/artist_by_name_between.sql --kind query\n```\n\n----------------------------------------\n\nTITLE: Login to Hasura DDN CLI\nDESCRIPTION: Authenticate with Hasura Cloud via the CLI to access resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Updating Context Configuration in YAML\nDESCRIPTION: Updates the subgraph path in the context configuration file. Located at .hasura/context.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/rename-subgraph.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default:\n      supergraph: ../supergraph.yaml\n      subgraph: ../<new-subgraph-name>/subgraph.yaml\n      ...\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura DDN Services\nDESCRIPTION: Start the local Hasura DDN Engine and Prometheus connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn supergraph build get Command in Bash\nDESCRIPTION: These examples demonstrate how to view details of a specific SupergraphBuild and how to list all SupergraphBuilds for a given project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# View details of a SupergraphBuild in the Project \"pet-lion-2649\"\n ddn supergraph build get <supergraph-build-version> --project pet-lion-2649\n\n# List all SupergraphBuilds of a Project \"pet-lion-2649\"\n ddn supergraph build get --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Listing Native Operations with ddn CLI\nDESCRIPTION: This shell command lists existing Native Operations for a specific connector using the ddn CLI. It requires the tool and setup of the connector yaml file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/chinook_pg/connector.yaml -- \\\n  native-operation list\n```\n\n----------------------------------------\n\nTITLE: Applying a Supergraph Build in Hasura DDN\nDESCRIPTION: Applies the specified supergraph build to make it the active version of the API. This command requires subgraph admin or higher permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Creating a Text File via GraphQL Mutation\nDESCRIPTION: GraphQL mutation to upload a text file to the configured storage bucket.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ADD_TXT_FILE {\n  uploadStorageObjectAsText(data: \"This is a sample text file.\", name: \"sample.txt\", bucket: \"/home/nonroot/data\") {\n    name\n    size\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Types in JSON\nDESCRIPTION: This snippet illustrates how to define scalar types using JSON syntax. Scalar types are indicated as an object with a 'scalar' key, facilitating type distinction in database schema configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/type-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"scalar\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Connector Resource Display\nDESCRIPTION: Demonstrates practical usage of the show-resources command with a specific connector named 'mydb'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show resources for Connector `mydb`\n ddn connector show-resources mydb\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Console\nDESCRIPTION: Opens the local DDN console for testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Hasura Lifecycle Plugin Hook Configuration\nDESCRIPTION: YAML configuration for integrating the Rate Limit Plugin with Hasura DDN, including environment variable setup.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/rate-limit/how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: parse\n  name: rate-limit\n  url:\n    valueFromEnv: RATE_LIMIT_PLUGIN_URL\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            valueFromEnv: RATE_LIMIT_PLUGIN_AUTH_TOKEN\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Options for ddn run Command in Sass\nDESCRIPTION: This snippet specifies options available for the ddn run command, including help options and settings for log level, output format, and request timeout. These options can be adjusted to customize the behavior of the command during execution.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_run.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for run\n```\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n```\n\nLANGUAGE: sass\nCODE:\n```\n--no-prompt          Do not prompt for required but missing flags\n```\n\nLANGUAGE: sass\nCODE:\n```\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n```\n\nLANGUAGE: sass\nCODE:\n```\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Schemas in Hasura Data Connector (YAML)\nDESCRIPTION: This snippet shows how to configure the 'excludedSchemas' option in the introspection settings. It lists schemas that will be ignored during the introspection process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n\"excludedSchemas\": [\n    \"information_schema\", # PostgreSQL\n    \"pg_catalog\", # PostgreSQL\n    \"tiger\", # PostGIS extension\n    \"crdb_internal\", # CockroachDB\n    \"columnar\", # Citus\n    \"columnar_internal\", # Citus\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Queries in Hasura DDN\nDESCRIPTION: Creates a new directory structure to store native queries for a PostgreSQL connector in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_pg/native_operations/queries/\n```\n\n----------------------------------------\n\nTITLE: Example of upgrading context in the current directory\nDESCRIPTION: An example showing how to upgrade the context configuration from v2 to v3 for a Hasura project located in the current directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade context present in the current Hasura directory from v2 to v3\n ddn codemod upgrade-context-v2-to-v3 --dir .\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database in Hasura DDN\nDESCRIPTION: Introspects the PostgreSQL database to generate Hasura metadata. This step creates a representation of the database schema for use in the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect customers_pg\n```\n\n----------------------------------------\n\nTITLE: Validating DDN CLI Installation\nDESCRIPTION: This command verifies that the DDN CLI is installed correctly by running a diagnostic check.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/_prereqs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn doctor\n```\n\n----------------------------------------\n\nTITLE: Including MDX Components in Markdown\nDESCRIPTION: These snippets demonstrate how to include MDX components within the Markdown document. The Roles and Permissions components are inserted to display detailed information about project roles and permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-collaborators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Roles />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Permissions />\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Staging Context\nDESCRIPTION: A practical example showing how to create a context named 'staging' with the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new context called staging\n ddn context create-context staging\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn model list Command\nDESCRIPTION: An example showing how to list details about collections in a DataConnectorLink named 'mydb' and their corresponding Models.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List details about the collections of DataConnectorLink `mydb`, and their corresponding Models\n ddn model list mydb\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship CLI Base Options\nDESCRIPTION: Basic help option for the relationship command in DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for relationship\n```\n\n----------------------------------------\n\nTITLE: Show Native Query Information using DDN CLI\nDESCRIPTION: This shell command displays detailed information about a specific native query, including its pipeline and type declarations, using the DDN CLI.  The `<native-query-name>` placeholder needs to be replaced with the actual name of the query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_connector/connector.yaml \\\n  -- native-query show <native-query-name>\n```\n\n----------------------------------------\n\nTITLE: Updating Engine Compose File in YAML\nDESCRIPTION: Updates the paths to connector compose files in the main engine compose file. Located at project root in compose.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/rename-subgraph.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - path: <new-subgraph-name>/connector/<connector-1>/compose.yaml\n  - path: <new-subgraph-name>/connector/<connector-2>/compose.yaml\n  ...\nservices:\n  engine:\n    build:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Pricing Units Table Definition in Markdown\nDESCRIPTION: Markdown table defining key pricing units and terminology used in Hasura DDN billing, including models, active models, availability zones, and data transfer measurements.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/pricing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Pricing Unit      | Details                                                                                                                                                                                                                                                                                            |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Model             | The number of models for billing purposes maps directly to the sum of [Model](/reference/metadata-reference/models.mdx) and [Command](/reference/metadata-reference/commands.mdx) objects in the metadata. A model or a command can be created for a database table, view, microservice, API, etc. |\n| Active Model      | An active model is defined as a model that is accessed more than 1000 times a month. A model is considered to be accessed if it is queried over the GraphQL API either directly or via a relationship                                                                                              |\n| Availability Zone | An Availability Zone is a redundant location within a data center where Hasura is running. These typically map to data center locations on major cloud providers.                                                                                                                                  |\n| Data Transfer     | Amount of data in [Gibibytes](https://simple.wikipedia.org/wiki/Gibibyte) (GiB) transferred across various channels while running a Hasura instance.                                                                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Relationship Configuration\nDESCRIPTION: YAML configuration for defining relationships between objects\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: <rel-name>\n  sourceType: <source-object-type>\n  target: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard for All Items in YAML\nDESCRIPTION: Example of using a wildcard to match all items in a configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n'*'\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context\nDESCRIPTION: Sets the subgraph as default context for future CLI commands\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn context set subgraph ./<subgraph-name>/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Model to Connector\nDESCRIPTION: This command adds a model (mutation in this case) to the specified connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn command add <connector_name> <mutation_name>\n```\n\n----------------------------------------\n\nTITLE: Syntax for ddn context get-context Command in Bash\nDESCRIPTION: The basic syntax for using the 'ddn context get-context' command, which can be used with an optional context name parameter to list contexts or get details of a specific context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get-context [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Lambda Data Connector in DDN\nDESCRIPTION: This command initializes a new data connector with the TypeScript connector in the DDN project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table in Oracle\nDESCRIPTION: SQL command to create a users table with id, name, and age columns in the Oracle database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE users (user_id Number NOT NULL, name Varchar2(45) NOT NULL, age Number NOT NULL);\n```\n\n----------------------------------------\n\nTITLE: Initializing a new connector with ddn\nDESCRIPTION: This command initializes a new connector named 'my_python' using the ddn (Data Delivery Network) tool. The '-i' flag likely indicates an interactive mode, prompting the user to select a connector type (in this case, hasura/python) from a list.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_python -i\n```\n\n----------------------------------------\n\nTITLE: Format of connector-packaging.json file\nDESCRIPTION: This JSON structure defines the format required for the `connector-packaging.json` file.  It contains information about the connector version, the URI for downloading the connector package, its checksum, and the source code's hash.  The `uri` must be accessible without authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"uri\\\": \\\"https://github.com/hasura/ndc-mongodb/releases/download/v0.0.1/connector-definition.tgz\\\",\\n  \\\"checksum\\\": {\\n    \\\"type\\\": \\\"sha256\\\",\\n    \\\"value\\\": \\\"2cd3584557be7e2870f3488a30cac6219924b3f7accd9f5f473285323843a0f4\\\"\\n  },\\n  \\\"source\\\": {\\n    \\\"hash\\\": \\\"c32adbde478147518f65ff465c40a0703239288a\\\"\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a new connector and selecting hasura/nodejs\nDESCRIPTION: This snippet demonstrates how to initialize a new connector named 'my_ts' using the ddn command line interface. The initialization command is important for setting up a new development environment with Hasura and Node.js.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Deleting SupergraphBuild with DDN CLI\nDESCRIPTION: This command deletes a SupergraphBuild from a Project. It requires the supergraph build version as an argument and can be used with various options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build delete <supergraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build with Updated Customer Subgraph\nDESCRIPTION: Creates a supergraph build incorporating the latest customer subgraph build with the relationship definition. This combines the updated customer subgraph with the existing billing subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create --subgraph-version customers:<build-version> --base-supergraph-version <supergraph-build-id>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Authenticate the Hasura DDN CLI to access Hasura Cloud resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph API in DDN\nDESCRIPTION: This command builds the supergraph API locally in the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Data Source Connection\nDESCRIPTION: Command to initialize a new data connector using an interactive wizard.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init <connector_name> -i\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Open the local Hasura DDN console for querying.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Updating Environment File for MongoDB Connection\nDESCRIPTION: This snippet shows how to set the MongoDB connection string in the .env.cloud file for the cloud-hosted connector. The provided example illustrates a connection URI format suitable for MongoDB Atlas.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/mongoDB/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: Env\nCODE:\n```\n\"MONGODB_DATABASE_URI=\"mongodb+srv://<your-mongodb-connection-string>\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Local Project to Existing Cloud Project in Hasura DDN\nDESCRIPTION: Maps the local directory to an existing parent cloud project in Hasura DDN. This command updates the project key-value pair in the .hasura/context.yaml file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nddn project init --with-project <project-name>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Hasura Plugin\nDESCRIPTION: TypeScript configuration file defining compiler options for the plugin project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options for ddn supergraph init Command\nDESCRIPTION: This snippet lists the available options for the 'ddn supergraph init' command, including flags for project creation, subgraph configuration, and naming conventions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --create-project                      Create a project while initializing the supergraph\n    --create-subgraph string              The default subgraph to add (default \"app\")\n    --globals-subgraph string             Name of the globals subgraph (default \"globals\")\n-h, --help                                help for init\n    --no-globals-subgraph                 Do not add a globals subgraph\n    --no-subgraph                         Do not add a default subgraph\n    --project-data-plane-id uuid          The DDN instance where the Project should be hosted, only used with --create-project flag or --with-promptql flag\n    --project-name string                 Create a new project with this name, only used with --create-project flag or --with-promptql flag\n    --project-plan string                 DDN Project plan, only used with --create-project flag or --with-promptql flag\n    --subgraph-naming-convention string   Naming convention for the subgraph. Can be 'graphql', 'snake_case' or 'none'.\n    --with-project string                 Use an existing project instead of creating a new one, only used with --create-project flag or --with-promptql flag\n    --with-promptql                       Initialize with PromptQL support, this also initializes a project with PromptQL enabled. (alpha)\n```\n\n----------------------------------------\n\nTITLE: Removing Model in DDN\nDESCRIPTION: Command to delete a model and its associated metadata definitions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn model remove users\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Connector (Python)\nDESCRIPTION: Initializes a Python lambda connector in the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_python -i\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Options in Sass\nDESCRIPTION: Lists the global options inherited from parent commands including log level control, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Request Error Response Example\nDESCRIPTION: Shows how invalid request parameters or syntax errors are formatted in the error response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/errors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"detail\": \"Invalid filter parameter: unknown operator 'contains'\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response\nDESCRIPTION: Sample JSON response from the webhook authentication server showing Hasura custom claims.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"X-Hasura-Role\": \"user\",\n  \"X-Hasura-User-Id\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users of Same Age with GraphQL\nDESCRIPTION: Demonstrates a GraphQL query that utilizes the native query to retrieve and rank users of a specific age (25 in this example).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersOfSameAge {\n  orderUsersOfSameAge(args: { age: 25 }) {\n    id\n    name\n    age\n    orderWithinAge\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying JDBC URL with Environment Variable - JSON\nDESCRIPTION: This snippet demonstrates how to specify the JDBC URL for connecting to a Snowflake instance, allowing for both literal string input and referencing an environment variable to enhance security.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"jdbc:snowflake://<account-identifier.<region>.snowflakecomputing.com?user=YOUR_USERNAME&&password=YOUR_PASSWORD&db=YOUR_DATABASE&warehouse=YOUR_WAREHOUSE&schema=YOUR_SCHEMA&role=YOUR_ROLE\",\n  \"jdbcUrl\": { \"variable\": \"SNOWFLAKE_JDBC_URL\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Metric Model\nDESCRIPTION: Add a Prometheus metric as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_prometheus prometheus_http_requests_total\n```\n\n----------------------------------------\n\nTITLE: Creating a local project directory\nDESCRIPTION: This snippet creates a new directory for the Hasura supergraph project and navigates into it. It's essential for organizing project files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hasura_project && cd hasura_project\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Supergraph Build in Bash\nDESCRIPTION: Command to create a new supergraph build on Hasura DDN using a cloud context after migration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --context cloud\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database with DDN CLI\nDESCRIPTION: Use the DDN CLI to introspect your PostgreSQL database. This command analyzes the structure of your database and detects available resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Querying DuckDB Users Table\nDESCRIPTION: Verifies the creation of the users table by querying all records.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nduckdb app/connector/my_duckdb/data.duckdb \"SELECT * FROM users;\"\n```\n\n----------------------------------------\n\nTITLE: Building a Supergraph with Specific Subgraph Build - Current Supergraph Build\nDESCRIPTION: This command builds a supergraph, incorporating a specific subgraph build while basing the rest of the supergraph on the currently applied supergraph build. Replace `<subgraph-name>` and `<subgraph-build-version>` with the appropriate values.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph-name>:<subgraph-build-version> --base-supergraph-on-applied\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a ConnectorBuild with DDN CLI\nDESCRIPTION: A practical example showing how to delete a specific ConnectorBuild by providing its UUID as a parameter to the delete command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a ConnectorBuild\n ddn connector build delete 1d4f4831-54a2-4ded-b680-07d00510a522\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Current Context in DDN CLI\nDESCRIPTION: Practical example showing how to set the current context to 'default' using the DDN CLI command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set current context to 'default'\n ddn context set-current-context default\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Resources\nDESCRIPTION: Commands to add all remaining collections and commands to the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_qdrant \"*\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_qdrant \"*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a new connector\nDESCRIPTION: This command initializes a new connector using the DDN tool. The `-i` flag likely indicates an interactive mode, allowing the user to select the connector type (Hasura/Node.js in this case).  The `my_ts` argument specifies the name of the new connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"ddn connector init my_ts -i\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Format\nDESCRIPTION: Example format for environment variable files used in the project\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nENV1=val1\nENV2=val2\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for JWT in YAML\nDESCRIPTION: This YAML configuration sets up the AuthConfig object for JWT authentication. It specifies the JWT claims format, key algorithm, secret key, and token location in the HTTP header.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            value: \"<insert-the-key-generated-in-previous-step>\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Tables with Width Control in MDX\nDESCRIPTION: Example of an HTML table with custom column widths and complex content including links and inline code elements. This approach provides more control over table formatting than basic markdown tables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th width=\"20%\">Field</th>\n      <th width=\"40%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Region</td>\n      <td>The region of the datacenter where your New Relic account stores its data. <Link to=\"https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers\">Read more about regions on New Relic docs.</Link></td>\n    </tr>\n    <tr>\n      <td>API Key</td>\n      <td>API keys are unique to your organization. An API key is required by the New Relic API to submit metrics and events to New Relic. You can get the API key from <Link to=\"https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher\">here</Link> if you are in New Relic US region and <Link to=\"https://one.eu.newrelic.com/launcher/api-keys-ui.api-keys-launcher\">here</Link> if you're in New Relic EU region.</td>\n    </tr>\n    <tr>\n      <td>Host</td>\n      <td>The name of the originating host of the log and metrics.</td>\n    </tr>\n    <tr>\n      <td>Custom Attributes</td>\n      <td>Custom Attributes associated with your logs and metrics. A default source tag <code>hasura-cloud-metrics</code> is added to all exported logs and metrics. Attributes <code>project_id</code> and <code>project_name</code> are added to all exported metrics.</td>\n    </tr>\n    <tr>\n      <td>Service Name</td>\n      <td>The name of the application or service generating the log events.</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adding Data Source to DDN Project\nDESCRIPTION: Launches a wizard to assist in adding a data connector to the project. Requires specifying the connector name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init <connector_name> -i\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura DDN Local Services\nDESCRIPTION: Command to start the local Hasura DDN Engine and Stripe connector using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Adding other required files\nDESCRIPTION: This showcases the required file structure including the logo, metadata.json and the README.md. These files contain the connector logo, connector metadata, and connector documentation respectively.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"registry/\\n  └── [namespace]/\\n      └── [connector-name]/\\n          ├─ releases/\\n          ├─ logo.(png|svg)\\n          ├─ metadata.json\\n          └─ README.md\"\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance\nDESCRIPTION: This command introspects the PostgreSQL instance for the specified connector, gathering information about the database schema and structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Hasura Engine\nDESCRIPTION: Builds a Docker image for the Hasura DDN engine using the engine Dockerfile\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-engine -f engine/Dockerfile.engine engine\n```\n\n----------------------------------------\n\nTITLE: Adding Command to DDN from TypeScript Connector\nDESCRIPTION: This command adds the 'shoutName' function as a command in DDN, making it available for use in relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nddn command add my_ts shoutName\n```\n\n----------------------------------------\n\nTITLE: DDN Context Set Command Examples\nDESCRIPTION: Practical examples showing how to set project name, supergraph config file path, and subgraph config file path in the DDN context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set the Project name in the context\n ddn context set project foo-bar-1234\n\n# Set the local Supergraph config file path in the context\n ddn context set supergraph ./supergraph.local.yaml\n\n# Set the Subgraph config file path in the context\n ddn context set subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Project Context in Hasura DDN\nDESCRIPTION: Command for subgraph project collaborators to set their project context after accepting an invitation. This ensures they're working within the main project environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nddn context set project <main-project-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Customer Index Mapping\nDESCRIPTION: Creates a new index named 'customers' in Elasticsearch with defined schema mapping for customer data including geo-location support.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT \"http://localhost:9200/customers/\" -u elastic:elastic -H 'Content-Type: application/json' -d'\n{\n  \"mappings\": {\n    \"properties\": {\n      \"customer_id\": {\n        \"type\": \"keyword\"\n      },\n      \"name\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"keyword\": {\n            \"type\": \"keyword\"\n          }\n        }\n      },\n      \"email\": {\n        \"type\": \"keyword\",\n        \"index\": true\n      },\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAPI Connector\nDESCRIPTION: Initialize the OpenAPI connector in the project directory, providing the OpenAPI document URI and base URL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_openapi -i\n```\n\n----------------------------------------\n\nTITLE: DDN Model Remove Command Examples\nDESCRIPTION: Examples showing how to remove all models, specific models, and models matching glob patterns from subgraphs using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove all Models using the subgraph set in current context\n ddn model remove \"*\"\n\n# Remove the Model \"Album\" in the \"app\" Subgraph\n ddn model remove Album --subgraph ./app/subgraph.yaml\n\n# Remove all the Models in the Subgraph \"app\"\n ddn model remove \"*\" --subgraph ./app/subgraph.yaml\n\n# Remove Models filtered by glob pattern in the Subgraph \"app\"\n ddn model remove \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Command to authenticate the Hasura DDN CLI by launching a browser-based login flow.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Authenticates the Hasura DDN CLI by launching a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Testing Password Hashing Mutation\nDESCRIPTION: GraphQL mutation to test the password hashing function in the API explorer.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation HashPassword {\n  hashPassword(password: \"Thisisthesecure1!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Project Initialization with Existing Project\nDESCRIPTION: Command to initialize the local workspace against an existing project on the data plane.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn project init --with-project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Marking a build as applied to the Project API\nDESCRIPTION: This command marks a specific build version as applied to the Project API. This should be run after updating the Project API's v3-engine deployment with a new build.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <build_version>\n```\n\n----------------------------------------\n\nTITLE: JSON:API Request Format for Including Relationships\nDESCRIPTION: The basic HTTP GET request format for including related resources in a JSON:API query. This shows the endpoint structure with placeholders for subgraph name, model name, and relationship paths.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/<subgraph-name>/<model-name>?include=<relationship-paths>\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Supergraph Build in Hasura DDN\nDESCRIPTION: Creates an initial supergraph build, which serves as the foundation for subsequent subgraph builds to expand upon.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Visualizing GraphQL-based Routing Architecture with Mermaid\nDESCRIPTION: A flowchart diagram showing the architecture of GraphQL-based routing strategy where Hasura DDN API serves as the main endpoint, connecting to both database connectors for new features and GraphQL connector for existing v2 features.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/upgrade/guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[API Consumers] -->|GraphQL Queries| B[Hasura DDN API]\n    B -->|New Features| C[Database connectors]\n    B -->|Existing Features| D[GraphQL connector]\n    D -->|Remote Schema| E[Hasura v2 API]\n    C --> F[Database]\n    E --> F\n    style A fill:#ffffff,stroke:#000000,stroke-width:2px,color:#000000\n    style B fill:#5cb85c,stroke:#000000,stroke-width:2px,color:#000000\n    style C fill:#5cb85c,stroke:#000000,stroke-width:2px,color:#000000\n    style D fill:#5cb85c,stroke:#000000,stroke-width:2px,color:#000000\n    style E fill:#d9534f,stroke:#000000,stroke-width:2px,color:#000000\n    style F fill:#ffffff,stroke:#000000,stroke-width:2px,color:#000000\n```\n\n----------------------------------------\n\nTITLE: Updating a Command with DDN CLI - Bash\nDESCRIPTION: This command updates a specific command within the specified Node.js lambda connector. It requires the connector name 'my_ts' and the command name 'shoutName' as inputs. Upon execution, it updates the command associated with the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_ts shoutName\n```\n\n----------------------------------------\n\nTITLE: DDN Project Init Command Options\nDESCRIPTION: Available command-specific options for the 'ddn project init' command, including context settings, environment configurations, and project specifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n    --data-plane-id uuid     The DDN instance where the Project should be hosted\n    --env-file-name string   Env file to be created and added to context as cloudEnvFile (default \".env.cloud\")\n    --from-env-file string   Env file to initialize the cloudEnvFile from\n-h, --help                   help for init\n    --plan string            DDN Project plan\n    --supergraph string      Path to Supergraph config file\n    --with-project string    Use an existing project instead of creating a new one\n    --with-promptql          Initialize with PromptQL support (alpha)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Containers for Trino and PostgreSQL\nDESCRIPTION: Starts the Docker containers for Trino and PostgreSQL services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_trino/compose.trino.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for the build command in Hasura DDN CLI\nDESCRIPTION: This snippet shows the available options for the 'ddn connector build' command, which helps users manage connector builds in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for build\n```\n\n----------------------------------------\n\nTITLE: Launching Hasura DDN Console for Local Development\nDESCRIPTION: Command to run the Hasura DDN console in local mode. This provides a web interface for managing and interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Pre-Parse Plugin Request\nDESCRIPTION: Sample JSON request sent to a pre-parse plugin containing GraphQL query and session information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rawRequest\": {\n    \"query\": \"query MyQuery { getAuthorById(author_id: 10) { first_name } }\",\n    \"variables\": {},\n    \"operationName\": \"MyQuery\"\n  },\n  \"session\": {\n    \"role\": \"user\",\n    \"variables\": {\n      \"x-hasura-role\": \"user\",\n      \"x-hasura-user-id\": \"123\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate DDN Access Token\nDESCRIPTION: Retrieve a personal access token for DDN CLI authentication on a local machine\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn auth print-access-token\n```\n\n----------------------------------------\n\nTITLE: Database Introspection\nDESCRIPTION: Introspects the PostgreSQL database schema\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Querying Posts in GraphQL\nDESCRIPTION: Executes a GraphQL query to fetch all posts from the DuckDB database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Supergraph Build\nDESCRIPTION: Retrieves the latest build version from parent supergraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build get\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global options inherited from parent commands including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Introspecting Connector with DDN CLI - Bash\nDESCRIPTION: This command introspects the specified Node.js lambda connector, retrieving metadata about its configuration. It requires the DDN CLI to be installed and configured. The primary input is the name of the connector 'my_ts', and it outputs the metadata related to that connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector\nDESCRIPTION: Initializes a PostgreSQL connector in the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_pg -i\n```\n\n----------------------------------------\n\nTITLE: Inherited Plugin Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the upgrade command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for the Express Plugin\nDESCRIPTION: Command to create and initialize a new Node.js project for the Hasura DDN plugin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmkdir simple-plugin && cd simple-plugin && npm init -y\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Supergraph with DDN CLI\nDESCRIPTION: This command builds and creates a supergraph using the DDN CLI. It assumes that the project context has already been set, so the project name doesn't need to be explicitly passed as a flag. It's a crucial first step to get your supergraph live on Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/04-deploy-your-supergraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Executing ddn subgraph build get Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for using the 'ddn subgraph build get' command. It can be used to list SubgraphBuilds or get details of a specific one by providing an optional subgraph-build-version argument.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build get [subgraph-build-version] [flags]\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Source in DDN\nDESCRIPTION: Introspects the specified data source to gather schema information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Running ddn connector plugin Command Syntax in Bash\nDESCRIPTION: The base command syntax for running a subcommand from a Connector plugin using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector plugin [flags] [-- <args>]\n```\n\n----------------------------------------\n\nTITLE: Feature Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing tooling features between Hasura v2 and Hasura DDN. It includes the Hasura console, CLI, IDE integrations, database migrations, Prometheus, and OpenTelemetry.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/upgrade/feature-availability/tooling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature             | v2      | DDN |\n| ------------------- | ------- | --- |\n| The Hasura console  | ✅      | ✅  |\n| The Hasura CLI      | ✅      | ✅  |\n| IDE Integrations    | ❌      | ✅  |\n| Database Migrations | ✅      | ❌  |\n| Prometheus          | ✅ (EE) | ✅  |\n| OpenTelemetry       | ✅ (EE) | ✅  |\n\n**\\*EE**: Available on Cloud and Enterprise editions only.\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Queries\nDESCRIPTION: Bash command to create a directory structure for storing Native Query SQL files in a Hasura connector configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p my_subgraph/connector/chinook_pg/native_operations/queries/\n```\n\n----------------------------------------\n\nTITLE: Building and Running DDN Supergraph API\nDESCRIPTION: These bash commands build the DDN supergraph API locally and start the Docker container to run it. This step is necessary after defining new relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Displaying Engine Container Crash Error Output\nDESCRIPTION: This text snippet shows an error output when the engine container crashes due to missing required arguments. It indicates that the metadata path and authentication config path were not provided.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nerror: the following required arguments were not provided:\n--metadata-path <PATH>\n--authn-config-path <PATH>\n\nUsage: engine --metadata-path <PATH> --authn-config-path < PATH>\n\nFor more information, try '--help'\n```\n\n----------------------------------------\n\nTITLE: ConnectorBuild Logs Command Options in SASS\nDESCRIPTION: Available flags specific to the 'ddn connector build logs' command, including options for viewing build logs, following logs continuously, and specifying a starting time for log retrieval.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --build          Specifies whether to show the build logs. (default: false)\n    --follow         Specifies whether to continuously follow the deployment logs. (default: false)\n-h, --help           help for logs\n    --since string   Specifies the starting time for log retrieval. Can be in ISO format (e.g. 2024-03-26T11:05:15Z) or a duration (e.g. 5m for 5 minutes ago). (By default, prints the entire available logs).\n```\n\n----------------------------------------\n\nTITLE: Initializing Independent Subgraph\nDESCRIPTION: Creates new supergraph with subgraph and initializes repository for independent development\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init <subgraph-name-as-supergraph-name> --create-subgraph <subgraph-name> && cd <subgraph-name> && git init\n```\n\n----------------------------------------\n\nTITLE: Subgraph Configuration Example in YAML\nDESCRIPTION: An example of a subgraph configuration file that specifies how to construct a subgraph, including the name, generator settings, and paths to include for metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v1\ndefinition:\n  name: app\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Authenticates the Hasura DDN CLI by launching a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Model Update Command Syntax\nDESCRIPTION: The basic command syntax for updating models in local metadata using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model update <model-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing a PostgreSQL Data Connector\nDESCRIPTION: Command to initialize a PostgreSQL data connector for the Hasura DDN project with interactive mode enabled.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_pg -i\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Opens the local Hasura DDN console for querying.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for Connector\nDESCRIPTION: Example of updating environment variables in a .env file for connector URLs and authorization header.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/independent-connector-deployment.mdx#2025-04-17_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n<CONNECTOR>_READ_URL=\"<deployed-connector-read-url>\"\n<CONNECTOR>_WRITE_URL=\"<deployed-connector-write-url>\"\n<CONNECTOR>_AUTHORIZATION_HEADER=\"Bearer <deployed-connector-token>\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring AWS CloudFormation Stack Status\nDESCRIPTION: This Bash command retrieves the current status of the Hasura Cloud BYOC CloudFormation stack.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks \\\n  --stack-name hasura-cloud-byoc \\\n  --query 'Stacks[0].StackStatus'\n```\n\n----------------------------------------\n\nTITLE: Adding Aggregate Support to GraphQL Config\nDESCRIPTION: Upgrades metadata to support aggregate functions like sum, min, count in the GraphQL API. Can be run against specific supergraph or subgraph files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/deprecated-metadata-upgrades.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-aggregate\n```\n\n----------------------------------------\n\nTITLE: Renaming GraphQL Prefixes Using Codemod Commands\nDESCRIPTION: Command-line examples demonstrating how to use the DDN codemod tool to rename GraphQL prefixes in existing metadata. Shows both adding new prefixes and changing existing ones.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/subgraph-prefixing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add root field and type name prefixes to the subgraph set in the context\nddn codemod rename-graphql-prefixes --graphql-root-field 'app_' --graphql-type-name 'App_'\n\n# Change the root field prefix for the specified subgraph\nddn codemod rename-graphql-prefixes --subgraph app/subgraph.yaml --from-graphql-root-field 'app_' --graphql-root-field 'new_'\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Project for Hasura DDN\nDESCRIPTION: Creates a new cloud project for the Hasura DDN supergraph. This step links the local project to a cloud-based project for collaboration and deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura Console\nDESCRIPTION: Command to open the local Hasura DDN console for querying and exploring the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Project Context in YAML\nDESCRIPTION: Example showing how to configure the default context to reference a specific Hasura DDN cloud project in the context.yaml file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Structure in JSON\nDESCRIPTION: The configuration object is a JSON structure listing database entities required by the data connector. It includes properties such as collection names, object fields, and types, which are crucial for maintaining query consistency. The structure is unchanging unless the database schema undergoes modifications, requiring a configuration update.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"collection_names\": [],\n    \"object_fields\": {},\n    \"object_types\": {},\n    \"collection_vectors\": {},\n    \"functions\": [],\n    \"procedures\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Specific Subgraph Build\nDESCRIPTION: This command applies a specific build of a subgraph directly to the active API. Replace `<build-version>` with the build version of the subgraph you want to deploy.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build apply <build-version>\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services for Hasura DDN Project\nDESCRIPTION: Command to start all Docker services required for the Hasura DDN project. This brings up the necessary containers for the application.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Building a Subgraph\nDESCRIPTION: This command creates a new build of the specified subgraph and any associated connectors. It is assumed that the subgraph context is already set in the `context.yaml` file. The `--subgraph` flag can be used to override this.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Example Encoded JWT Token for Hasura DDN\nDESCRIPTION: An encoded JWT token string that represents the example payload when signed with the HS256 algorithm using the specified secret key. This is the actual token that would be sent in API requests.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MzU5MTY3MTgsImV4cCI6MTc5NjkxNjY3NywiY2xhaW1zLmp3dC5oYXN1cmEuaW8iOnsieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoidXNlciIsIngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsidXNlciIsImFkbWluIl0sIngtaGFzdXJhLXVzZXItaWQiOiIxMjMiLCJ4LWhhc3VyYS1vcmctaWQiOiI0NTYiLCJ4LWhhc3VyYS1jdXN0b20iOiJjdXN0b20tdmFsdWUifX0.5bwSMgxsyULY1uhCJxYd-sO35rCdznRCZ4YMLwDD5u8\n```\n\n----------------------------------------\n\nTITLE: Structuring ArgumentDefinition in Markdown\nDESCRIPTION: Defines the structure for an argument definition, including its name, type, and optional description.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#### ArgumentDefinition {#command-argumentdefinition}\n\nThe definition of an argument for a field, command, or model.\n\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `name` | [ArgumentName](#command-argumentname) | true | The name of an argument. |\n| `type` | [TypeReference](#command-typereference) | true |  |\n| `description` | string / null | false |  |\n```\n\n----------------------------------------\n\nTITLE: Querying Users in Hasura DDN GraphQL API\nDESCRIPTION: Demonstrates a GraphQL query to fetch users from the 'customers' subgraph. This query tests the functionality of the local API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_USERS {\n  customers_users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ObjectType Field Deprecation\nDESCRIPTION: Shows how to deprecate specific fields within an ObjectType definition using YAML configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/versioning.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: V1\ndefinition:\n  name: Car\n  fields:\n    - name: Id\n      type: String\n    - name: make\n      type: String\n    - name: model\n      type: String\n    - name: engine\n      type: String\n      deprecated:\n        reason: Use motor field instead\n    - name: motor\n      type: String\n  graphql:\n    typeName: Car\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Car {\n  Id: String\n  make: String\n  model: String\n  engine: String @deprecated(reason: \"Use motor field instead\")\n  motor: String\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Options for DDN Connector Link\nDESCRIPTION: Shows the inherited command line options from parent operations, including logging, output format, and timeout settings\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Native Query Model\nDESCRIPTION: Command to add a model for the native query to the DDN configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Querying Posts in GraphQL\nDESCRIPTION: GraphQL query to fetch all posts with their user ID, post ID, title, and content.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  examplePosts {\n    userId\n    postId\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Comparison in Go\nDESCRIPTION: Go function to compare a raw password with a hashed password using bcrypt. It defines input arguments and output result types, and uses the bcrypt.CompareHashAndPassword function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n  \"context\"\n  \"golang.org/x/crypto/bcrypt\"\n\n  \"hasura-ndc.dev/ndc-go/types\"\n)\n\n// ComparePasswordArguments defines the input arguments for the function\ntype ComparePasswordArguments struct {\n  Password       string `json:\"password\"`\n  HashedPassword string `json:\"hashed_password\"`\n}\n\n// ComparePasswordResult defines the output result for the function\ntype ComparePasswordResult string\n\n// FunctionComparePassword compares a password with a hashed password\nfunc FunctionComparePassword(ctx context.Context, state *types.State, arguments *ComparePasswordArguments) (*ComparePasswordResult, error) {\n  err := bcrypt.CompareHashAndPassword([]byte(arguments.HashedPassword), []byte(arguments.Password))\n  if err != nil {\n    result := ComparePasswordResult(\"false\")\n    return &result, nil\n  }\n  result := ComparePasswordResult(\"true\")\n  return &result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Executing enable-promptql Command in Bash\nDESCRIPTION: The basic syntax for running the enable-promptql command with the required directory parameter and optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod enable-promptql --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing ddn relationship list Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'ddn relationship list' command. It lists relationships for a given DataConnectorLink.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn relationship list [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services\nDESCRIPTION: Starts the DDN services using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options\nDESCRIPTION: These options are inherited from the parent `ddn` command and provide additional configuration settings for the supergraph operations. They include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn connector plugin Command in SASS\nDESCRIPTION: List of available command flags and options specific to the 'ddn connector plugin' command, including connector path specification, context selection, and environment variable configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n    --connector string       Path to Connector YAML config file\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for plugin\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token with Claims using jwt-cli in Bash\nDESCRIPTION: This command uses jwt-cli to encode and generate a new JWT token with custom claims. It sets the expiration time, issued time, default role, and allowed roles for testing purposes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njwt encode --secret=\"<secret-key>\" '{\"exp\": 1739905122,\"iat\": 1708369122,\"claims.jwt.hasura.io\":{\"x-hasura-default-role\": \"admin\",\"x-hasura-allowed-roles\":[\"admin\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Starting Docker containers\nDESCRIPTION: This command runs the Docker setup, ensuring that all required containers are started successfully for the supergraph environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Login Examples in Bash\nDESCRIPTION: These examples demonstrate two ways to use the 'ddn auth login' command: one for logging in via a browser, and another using a Personal Access Token for non-interactive environments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Login with browser\n ddn auth login\n\n# Login with Personal Access Token\n ddn auth login --access-token <your-access-token>\n```\n\n----------------------------------------\n\nTITLE: Options for DDN Connector Introspection\nDESCRIPTION: These are the available options for the 'ddn connector introspect' command, including flags for adding resources, specifying connector and subgraph paths, and environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --add-all-resources      Add all Models, Commands and Relationships from the updated DataConnectorLink to the local metadata\n    --ci                     Disables the use of context\n    --connector string       Path to Connector YAML config file\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for introspect\n    --no-update-link         Ignore updating DataConnectorLink in the metadata\n    --subgraph string        Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Supergraph Help Option\nDESCRIPTION: Displays help information for the `ddn supergraph` command, providing usage instructions and available options. This option is essential for users to understand how to use the supergraph command effectively.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n\"-h, --help   help for supergraph\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Seeding PostgreSQL Database\nDESCRIPTION: Creates a 'users' table in PostgreSQL and inserts sample data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it postgres psql -U myuser -d mydb\n```\n\nLANGUAGE: sql\nCODE:\n```\n--- Create the table\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  age INT NOT NULL\n);\n\n--- Insert some data\nINSERT INTO users (name, age) VALUES ('Alice', 25);\nINSERT INTO users (name, age) VALUES ('Bob', 30);\nINSERT INTO users (name, age) VALUES ('Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Example\nDESCRIPTION: Example JSON response from the webhook containing session variables for Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"X-Hasura-Role\": \"user\",\n    \"X-Hasura-User-Id\": 25,\n    \"X-Hasura-Is-Owner\": \"true\",\n    \"X-Hasura-Custom\": \"custom value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying DDN Doctor Command Output\nDESCRIPTION: This text snippet shows the output of the 'ddn doctor' command, which checks for required dependencies of the DDN CLI. It includes information about Docker, Docker Compose, and Control Plane connectivity.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nddn doctor\n3:23PM INF Evaluating the dependencies of DDN CLI...\nDDN CLI location: \"/usr/local/bin/ddn\"\nDDN CLI version: \"v2.15.0\"\n+------------------------------+--------+-----+\n| Criteria                     | Result | Fix |\n+------------------------------+--------+-----+\n| Docker available             | YES    |     |\n+------------------------------+--------+-----+\n| Docker Engine running        | YES    |     |\n+------------------------------+--------+-----+\n| Docker Registry reachable    | YES    |     |\n+------------------------------+--------+-----+\n| Docker Compose available     | YES    |     |\n+------------------------------+--------+-----+\n| Docker Compose version valid | YES    |     |\n+------------------------------+--------+-----+\n| Control Plane reachable      | YES    |     |\n+------------------------------+--------+-----+\n| DDN CLI Authenticated        | YES    |     |\n+------------------------------+--------+-----+\n```\n\n----------------------------------------\n\nTITLE: Example of Installing a DDN CLI Plugin\nDESCRIPTION: Example showing how to install a specific plugin named 'ndc-postgres' using the DDN CLI install command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install a plugin named \"ndc-postgres\"\n ddn plugins install ndc-postgres\n```\n\n----------------------------------------\n\nTITLE: Introspecting a Connector using DDN CLI\nDESCRIPTION: This command introspects a Connector data source to update the Connector configuration. It requires specifying the connector name and the path to the subgraph configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector-name> --subgraph <path-to-subgraph-config-file> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building a Docker image for a connector\nDESCRIPTION: This command builds a Docker image for a specific connector using Docker Compose, where <service-name> is derived from the connector's Docker Compose file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build <service-name>\n```\n\n----------------------------------------\n\nTITLE: Initializing a new connector and selecting hasura/go from the list:\nDESCRIPTION: This Bash command initializes a new connector named 'my_go' with an input flag. It sets up the connector for further operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init my_go -i\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Prometheus Metric Model\nDESCRIPTION: Add another Prometheus metric (CPU seconds) as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_prometheus process_cpu_seconds_total\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura DDN Metadata for Posts\nDESCRIPTION: Re-introspects the data source, adds the posts model, and rebuilds the project after schema changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_trino\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_trino posts\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Building and Running DDN Supergraph API\nDESCRIPTION: These bash commands build the DDN supergraph API and start the Docker container to serve it.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler Files for Hasura Plugins\nDESCRIPTION: Command to create directories and files for Express route handlers that will implement the pre-parse and pre-response plugins.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nmkdir src/routes && touch src/routes/pre-parse.ts && touch src/routes/pre-response.ts\n```\n\n----------------------------------------\n\nTITLE: Examples of ddn command add Usage\nDESCRIPTION: Various examples showing how to add Commands, including adding all Commands, adding specific Commands, and using pattern matching for filtering Commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all Commands for DataConnectorLink \"myfns\" in the subgraph set in the context\n ddn command add myfns \"*\"\n\n# Add a new Command \"Login\" from the procedure \"Login\" in the DataConnectorLink \"myfns\" in \"app\" Subgraph\n ddn command add myfns Login --subgraph ./app/subgraph.yaml\n\n# Add all the Commands from the procedures/functions in the DataConnectorLink \"myfns\" in \"app\" Subgraph\n ddn command add myfns \"*\" --subgraph ./app/subgraph.yaml\n\n# Add Commands filtered by glob pattern from the procedures/functions in the DataConnectorLink \"myfns\" in \"app\" Subgraph\n ddn command add myfns \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Open the local Hasura DDN console for querying.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Updating a Row by Unique Constraint with Pre and Post Checks in GraphQL (v2)\nDESCRIPTION: GraphQL mutation for updating a single row in a table using a unique constraint. It includes parameters for the unique key columns, columns to update, and both pre and post checks for permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nv2_update_<table>_by_<column_and_...>(\n    key_<column1>: <value>,\n    key_<column2>: <value>,\n    ...,\n    update_columns: { <column>: { _set: <value> }, ... },\n    pre_check: <boolexpr>,\n    post_check: <boolexpr>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Launches Command\nDESCRIPTION: Command to add the launches query from the existing API\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_graphql launches\n```\n\n----------------------------------------\n\nTITLE: Building a Supergraph Locally\nDESCRIPTION: This shell command is used to build a supergraph on a local machine. It's a part of the Hasura supergraph build process and requires the ddn CLI to be installed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating a new supergraph build locally\nDESCRIPTION: This command builds a new supergraph locally using the ddn tool. The supergraph combines data from multiple sources, including the newly added function connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Global Options Inherited from Parent Commands\nDESCRIPTION: Lists the global options that are inherited from parent commands, including log level configuration, prompt behavior, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for Testing in YAML\nDESCRIPTION: This YAML snippet sets up a no-auth mode for testing, setting the role as 'author' and the user ID as 1 to impersonate Alice.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: author\n      sessionVariables: { \"x-hasura-user-id\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Verifying Hasura CLI Installation\nDESCRIPTION: Shows how to check the installed version of the Hasura CLI using the 'ddn version' command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nDDN CLI Version: v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators Example - YAML\nDESCRIPTION: This YAML snippet illustrates the configuration of comparison operators associated with the scalar types. The example demonstrates the configuration for the `bigint` scalar type, including operators like `_eq`, `_gt`, `_gte`, `_in`, `_lt`, `_lte`, and `_neq`.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"comparisonOperators\":\n  {\n    \"bigint\":\n      {\n        \"_eq\": { \"operatorName\": \"=\", \"argumentType\": \"bigint\", \"operatorKind\": \"equal\" },\n        \"_gt\": { \"operatorName\": \">\", \"argumentType\": \"bigint\", \"operatorKind\": \"custom\" },\n        \"_gte\": { \"operatorName\": \">=\", \"argumentType\": \"bigint\", \"operatorKind\": \"custom\" },\n        \"_in\": { \"operatorName\": \"IN\", \"argumentType\": \"bigint\", \"operatorKind\": \"in\" },\n        \"_lt\": { \"operatorName\": \"<\", \"argumentType\": \"bigint\", \"operatorKind\": \"custom\" },\n        \"_lte\": { \"operatorName\": \"<=\", \"argumentType\": \"bigint\", \"operatorKind\": \"custom\" },\n        \"_neq\": { \"operatorName\": \"!=\", \"argumentType\": \"bigint\", \"operatorKind\": \"custom\" },\n      },\n  }\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn connector list Command\nDESCRIPTION: Options inherited from parent commands that can be used with ddn connector list, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Open Hasura Console\nDESCRIPTION: Launch the Hasura DDN GUI console for local development.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Expected GraphQL Response for Posts Query\nDESCRIPTION: JSON response showing the expected data structure when querying posts from the Oracle database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"examplePosts\": [\n      {\n        \"userId\": 1,\n        \"postId\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\"\n      },\n      {\n        \"userId\": 1,\n        \"postId\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\"\n      },\n      {\n        \"userId\": 2,\n        \"postId\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\"\n      },\n      {\n        \"userId\": 3,\n        \"postId\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Mutations in Shell\nDESCRIPTION: This command creates a new directory structure to store native mutations for a PostgreSQL connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_pg/native_operations/mutations/\n```\n\n----------------------------------------\n\nTITLE: Examples of Using 'ddn command update' Command in Bash\nDESCRIPTION: Various examples demonstrating how to use the 'ddn command update' command, including updating all Commands, specific Commands, and using pattern matching.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update all Commands using the subgraph set in current context\n ddn command update \"*\"\n\n# Update the Command \"Login\" in the \"app\" Subgraph\n ddn command update Login --subgraph ./app/subgraph.yaml\n\n# Update all the Commands in \"app\" Subgraph\n ddn command update \"*\" --subgraph ./app/subgraph.yaml\n\n# Update Commands filtered by glob pattern in the Subgraph \"app\"\n ddn command update \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Building and deploying ClickHouse connector with DDN CLI\nDESCRIPTION: This snippet shows how to build and deploy a ClickHouse connector to Hasura DDN using the `ddn connector build create` command.  The `--connector` argument specifies the path to the connector's YAML configuration file. The command will output read and write URLs for the deployed connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/clickHouse/_deployment-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector build create --connector ./my_subgraph/connector/my_clickhouse/connector.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Adding a data connector in interactive mode\nDESCRIPTION: This command initializes a new connector for the supergraph interactively, allowing users to specify connection details during the process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init -i\n```\n\n----------------------------------------\n\nTITLE: Applying SupergraphBuild using DDN CLI in Bash\nDESCRIPTION: This command applies a SupergraphBuild to its Project on Hasura DDN. It requires specifying the supergraph-build-version and optionally the project name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <supergraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'ddn subgraph add'\nDESCRIPTION: These are the specific options available for the 'ddn subgraph add' command. They include help, subgraph path, and target supergraph path(s).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help                            help for add\n    --subgraph string                 Path to Subgraph config file (required)\n    --target-supergraph stringArray   Supergraph config file to add the Subgraph. Can be repeated to provide multiple Supergraph config files (required)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Connector Configuration - CLI Command\nDESCRIPTION: This command demonstrates how to upgrade the connector configuration using the `ndc-postgres-cli` plugin. It specifies the source and destination directories for the upgraded configuration, ensuring that changes comply with the latest standards.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <connector-path> # E.g. my_subgraph/connector/my_pg/\nddn connector plugin --connector connector.yaml -- upgrade --dir-from . --dir-to .\n```\n\n----------------------------------------\n\nTITLE: Model Command Options in Hasura DDN CLI\nDESCRIPTION: Basic options for the 'ddn model' command that allow users to get help information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for model\n```\n\n----------------------------------------\n\nTITLE: Updated Supergraph Configuration YAML\nDESCRIPTION: Example of the supergraph.yaml file structure after adding a new subgraph, showing how multiple subgraphs are configured in the definition.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - app/subgraph.yaml\n    - <subgraph-name>/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Connector Init Command\nDESCRIPTION: The basic syntax for initializing a new connector using the DDN CLI, requiring a connector name and hub-connector type specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init [connector-name] --hub-connector <connector-type> [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Elasticsearch Resources\nDESCRIPTION: Shows all available Elasticsearch indexes and their current status in the connector configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_es\n```\n\n----------------------------------------\n\nTITLE: Opening the Hasura Console\nDESCRIPTION: Command to open the local Hasura console for interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Building Local DDN Project\nDESCRIPTION: Creates a local build of the Hasura DDN project, compiling the metadata into engine-ready files stored in the engine/build directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build with AuthConfig in Bash\nDESCRIPTION: This command creates a new supergraph build using the configured AuthConfig. It specifies a description and the supergraph configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create \\\n  --description \"use jwt-based authconfig\" \\\n  --supergraph supergraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Connector via DDN CLI\nDESCRIPTION: This command builds and deploys a TypeScript connector using the DDN CLI. The command requires paths to the connector's cloud configuration file and environment file, plus configuration for the target subgraph. Expected inputs include paths to these files, and the output will be URLs for the read and write endpoints of the deployed connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/typeScript/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_ts/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura DDN Metadata\nDESCRIPTION: Re-introspect the MySQL database and add the new 'posts' model to Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_mysql\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_mysql \"mydb.posts\"\n```\n\n----------------------------------------\n\nTITLE: Options for ddn relationship list Command in SASS\nDESCRIPTION: This snippet lists the available options for the 'ddn relationship list' command, including flags for CI mode, context selection, and specifying supergraph or subgraph configuration files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for list\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Adding Terraforming Model\nDESCRIPTION: Command to add the terraforming collection as a model in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_qdrant terraforming\n```\n\n----------------------------------------\n\nTITLE: Initializing a Storage Connector\nDESCRIPTION: Command to initialize a new storage connector in the project with interactive mode enabled.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_storage -i\n```\n\n----------------------------------------\n\nTITLE: Filtering with Null Values\nDESCRIPTION: Example of combining _eq and _is_null operators with _or to include null values in results\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery UnpublishedArticles {\n  articles (\n    where: {\n      _or: [\n        {is_published: {_eq: false}},\n        {is_published: {_is_null: true}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn connector setenv\nDESCRIPTION: List of command-specific options for the ddn connector setenv command, including CI mode, connector path specification, context selection, and environment variable settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n    --connector string       Path to Connector YAML config file\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for setenv\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Access in Hasura\nDESCRIPTION: Demonstrates the path structure for accessing API access mode settings in the Hasura console. Shows both the UI navigation path and the CLI command for setting API access mode to public.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/faq.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSettings > Summary > API Access Mode\n```\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-api-access-mode public\n```\n\n----------------------------------------\n\nTITLE: Options for ddn subgraph delete command in SASS\nDESCRIPTION: List of available options and flags for the 'ddn subgraph delete' command, including their descriptions and default values.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for delete\n    --subgraph string     Path to Subgraph config file (required)\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Executing ddn connector-link add-resources Command Syntax in Bash\nDESCRIPTION: The basic syntax for using the ddn connector-link add-resources command, which requires a connector-link-name argument and accepts additional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link add-resources <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Opening the development console with ddn\nDESCRIPTION: This command opens the Hasura development console in a local environment. The console provides a graphical interface for interacting with the Hasura instance, including exploring the GraphQL API and managing data sources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Shows the options inherited from parent commands that can be used with the subgraph build apply command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Configuration Example for Turso Connector\nDESCRIPTION: Shows how to configure foreign key relationships between collections in the Turso connector, mapping a field to its referenced table and column.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/turso/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foreign_keys\": {\n    \"user_id\": {\n      \"table\": \"users\",\n      \"column\": \"id\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context via CLI\nDESCRIPTION: Command to set the subgraph configuration file path using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn context set subgraph <path-to-subgraph-configuration-file>\n```\n\n----------------------------------------\n\nTITLE: Database Schema Introspection\nDESCRIPTION: Command to introspect database schema for a connector\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect --connector <subgraph-name>/connector/<connector-name>/connector.cloud.yaml\n```\n\n----------------------------------------\n\nTITLE: Showing Available Resources\nDESCRIPTION: This command displays the available resources and their status in the BigQuery connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_bigquery\n```\n\n----------------------------------------\n\nTITLE: ScalarType Metadata Structure Example\nDESCRIPTION: Example of the metadata structure for defining a ScalarType in Hasura DDN, showing the required fields and structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ScalarType\nversion: v1\nname: CustomString\ngraphql:\n  typeName: CustomString\ndescription: A custom string type\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Environment Mapping\nDESCRIPTION: YAML configuration for subgraph environment variable mapping, defining the plugin URL environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: globals\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n  envMapping:\n    PRE_PARSE_URL:\n      fromEnv: PRE_PARSE_URL\n    PRE_RESPONSE_URL:\n      fromEnv: PRE_RESPONSE_URL\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura DDN Auth\nDESCRIPTION: YAML configuration for setting up webhook authentication in Hasura DDN's auth-config.hml file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/simple-webhook-auth-server.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    webhook:\n      url:\n        valueFromEnv: AUTH_WEBHOOK_URL\n      method: POST\n      customHeadersConfig:\n        body:\n          headers:\n            forward:\n              - authorization\n              - content-type\n        headers:\n          additional:\n            user-agent: \"Hasura DDN\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Object OrderByExpression in Hasura\nDESCRIPTION: Shows how to define an object OrderByExpression for complex type ordering, including field and relationship ordering configurations. This example demonstrates ordering rules for an Album type with multiple fields and relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/orderby-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: Album_orderby_exp\n  operand:\n    object:\n      orderedType: Album\n      orderableFields:\n        - fieldName: AlbumId\n          orderByExpression: Int_orderby_exp\n        - fieldName: ArtistId\n          orderByExpression: Int_orderby_exp_asc\n        - fieldName: Address\n          orderByExpression: Address_orderby_exp\n      orderableRelationships:\n        - relationshipName: artist\n          orderByExpression: Artist_orderby_exp\n        - relationshipName: genre\n  graphql:\n    expressionTypeName: Album_orderby_Exp\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations in SASS Format\nDESCRIPTION: Lists the options inherited from parent operations for the 'ddn command list' command, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Supergraph in Bash\nDESCRIPTION: This Bash command builds the Hasura DDN supergraph for the local environment using the ddn CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Using the ddn command add CLI Command\nDESCRIPTION: Basic syntax for adding Commands to local metadata. The command requires a connector link name and procedure/function name, with optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector-link-name> <procedure/function-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Native Operation to Connector Configuration\nDESCRIPTION: This command uses the PostgreSQL connector's plugin to add a native operation to the connector's configuration. It specifies the connector, operation path, and operation type (mutation or query).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin \\\n  --connector <subgraph_name>/<path-to-your-connector>/connector.yaml \\\n  -- \\\n  native-operation create \\\n  --operation-path <subgraph_name>/<path-to-your-connector>/native-operations/<operation_type>/<operation_name>.sql \\\n  --kind mutation\n```\n\n----------------------------------------\n\nTITLE: Displaying DDN CLI Help Information\nDESCRIPTION: Shows the output of running the 'ddn --help' command, which provides information on all available operations and flags for the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDDDDDDD\\   DDDDDDD\\   NN\\   NN\\\nDD  __DD\\  DD  __DD\\  NNN\\  NN |\nDD |  DD | DD |  DD | NNNN\\ NN |\nDD |  DD | DD |  DD | NN NN\\NN |\nDD |  DD | DD |  DD | NN \\NNNN |\nDD |  DD | DD |  DD | NN |\\NNN |\nDDDDDDD  | DDDDDDD  | NN | \\NN |\n\\_______/  \\_______/  \\__|  \\__|\n\nUsage:\n  ddn [flags]\n  ddn [command]\n\nDDN operations\n  project        Manage Hasura DDN Project\n\nMetadata operations\n  command        Perform Command related operations\n  connector      Perform Connector related operations\n  connector-link Perform DataConnectorLink related operations\n  model          Perform Model related operations\n  relationship   Perform Relationship related operations\n  subgraph       Perform Subgraph related operations\n  supergraph     Perform Supergraph related operations\n\nAuthentication operations\n  auth           Manage Hasura DDN CLI Auth\n\nOther operations\n  codemod        Perform transformations on your Hasura project directory\n  completion     Generate the autocompletion script for the specified shell\n  console        Open the DDN console\n  context        Perform context operations\n  help           Help about any command\n  plugins        Manage plugins for the CLI\n  run            Run specific script from project's context config\n  update-cli     Update this CLI to the latest version or to a specific version\n  version        Prints the CLI version\n\nFlags:\n  -h, --help               help for ddn\n      --log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n      --no-prompt          Do not prompt for required but missing flags\n      --out string         Output format. Can be table, json or yaml. (default \"table\")\n      --timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n  -v, --version            Prints the CLI version\n\nUse \"ddn [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Introspecting API Schema\nDESCRIPTION: Commands to introspect and display API schema resources\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_http\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_http\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for ddn command remove\nDESCRIPTION: Practical examples showing how to use the 'ddn command remove' command, including removing all commands, specific commands, and using glob patterns to match multiple commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove all Commands using the subgraph set in current context\n ddn command remove \"*\"\n\n# Remove the Command \"Album\" in the \"app\" Subgraph\n ddn command remove Album --subgraph ./app/subgraph.yaml\n\n# Remove all the Commands in the Subgraph \"app\"\n ddn command remove \"*\" --subgraph ./app/subgraph.yaml\n\n# Remove Command filtered by glob pattern in the Subgraph \"app\"\n ddn command remove \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Inherited options for DDN CLI subgraph get command in SASS\nDESCRIPTION: This code block shows the options inherited from parent operations for the 'ddn project subgraph get' command, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Building the Hasura DDN Project\nDESCRIPTION: Command to create a local build of the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Specifying Table Definitions\nDESCRIPTION: Defines an example table configuration with details such as table name, columns, primary keys, and foreign keys. It's automatically generated during introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableName\": \"Album\",\n  \"tableType\": \"TABLE\",\n  \"description\": \"\",\n  \"columns\": [\n    {\n      \"name\": \"AlbumId\",\n      \"description\": \"\",\n      \"type\": \"int\",\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": true,\n      \"is_primarykey\": true\n    },\n    {\n      \"name\": \"Title\",\n      \"description\": \"\",\n      \"type\": \"varchar\",\n      \"numeric_scale\": null,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": false\n    },\n    {\n      \"name\": \"ArtistId\",\n      \"description\": \"\",\n      \"type\": \"int\",\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": false\n    }\n  ],\n  \"pks\": [\"AlbumId\"],\n  \"fks\": {\n    \"FK_AlbumArtistId\": {\n      \"foreign_collection\": \"Artist\",\n      \"column_mapping\": {\n        \"ArtistId\": \"ArtistId\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn connector-link update in Sass Format\nDESCRIPTION: List of command-specific flags and options available for the 'ddn connector-link update' command, including options for resource addition, context management, and environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --add-all-resources      Add all Models, Commands and Relationships from the updated DataConnectorLink to the local metadata\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for update\n    --subgraph string        Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Initializing Subgraph\nDESCRIPTION: Command to initialize a new subgraph in the project\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph init <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Add DDN Model\nDESCRIPTION: This bash command uses the DDN CLI to add a model named 'comments' to the DDN project, associated with the PostgreSQL instance 'my_pg'. This command defines the data structure within DDN based on the database schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn model add my_pg comments\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context in Hasura DDN\nDESCRIPTION: Sets the context to the 'customers' subgraph configuration file. This simplifies subsequent CLI commands by focusing on the specific subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn context set subgraph ./customers/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a ConnectorBuild Using DDN CLI\nDESCRIPTION: The basic syntax for deleting a ConnectorBuild from a Project using the DDN CLI. The command requires a connector-build-id parameter to identify which build to delete.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build delete <connector-build-id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Project Locally\nDESCRIPTION: Creates a local build of the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Enabling Permanent zsh Shell Completion for Hasura CLI\nDESCRIPTION: Command to add shell completion configuration to the zsh configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler Variables for Plugin Deployment\nDESCRIPTION: TOML configuration for Cloudflare Wrangler deployment, including OpenTelemetry tracing settings and GraphQL server URL configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n...\n[vars]\nOTEL_EXPORTER_OTLP_ENDPOINT = \"https://gateway.otlp.hasura.io:443/v1/traces\"\nOTEL_EXPORTER_PAT = \"<PAT>\"\nGRAPHQL_SERVER_URL = \"<DDN_GRAPHQL_SERVER_URL>\"\n```\n\n----------------------------------------\n\nTITLE: Pushing the Docker image to the registry\nDESCRIPTION: This command uploads the specified Docker image to the user's Docker registry, making it available for deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker push <your_registry>/<connector>:<your_tag>\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Update Command\nDESCRIPTION: Command to update the DDN CLI to the latest version to support v3 context configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-context-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn update-cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Supergraph Build with Latest Subgraph Version\nDESCRIPTION: Creates a supergraph build incorporating the latest subgraph build. This command combines the specified subgraph version with the base supergraph version to create a new supergraph build.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create --subgraph-version billing:<build-version> --base-supergraph-version <supergraph-build-id>\n```\n\n----------------------------------------\n\nTITLE: Building Local Supergraph\nDESCRIPTION: This command creates a local build of the Hasura DDN supergraph, generating JSON files in the engine/build directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Engine and Connectors with Docker\nDESCRIPTION: Starts the local Hasura DDN Engine and PostgreSQL connector using Docker. This command runs the necessary services for local development and testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build\nDESCRIPTION: Command to create a new supergraph build in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Examples of Adding Subgraph Config to Supergraph Config\nDESCRIPTION: These examples demonstrate how to use the 'ddn subgraph add' command. The first example adds a single subgraph config to one supergraph config, while the second adds it to multiple supergraph configs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add a Subgraph config file \"./app/subgraph.yaml\" to the Supergraph config file \"./supergraph.yaml\"\n ddn subgraph add --subgraph ./app/subgraph.yaml --target-supergraph ./supergraph.yaml\n\n# Add a Subgraph config file \"./app/subgraph.yaml\" to multiple Supergraph config files\"\n ddn subgraph add --subgraph ./app/subgraph.yaml --target-supergraph ./supergraph.stg.yaml --target-supergraph ./supergraph.prod.yaml\n```\n\n----------------------------------------\n\nTITLE: Managing Contexts and Environment Setup\nDESCRIPTION: Commands for creating and configuring staging and production contexts\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn context create-context staging\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn context set supergraph \"supergraph.yaml\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn context set subgraph \"app/subgraph.yaml\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ntouch .env.staging && ddn context set localEnvFile \".env.staging\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn project init --env-file-name \".env.staging.cloud\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn context set-current-context default\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Adding Subgraph to Supergraph Config with DDN CLI\nDESCRIPTION: This command adds a Subgraph config file to a Supergraph config file. It requires specifying the paths to both the subgraph and target supergraph config files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph add --subgraph <path-to-subgraph-config-file> --target-supergraph <path-to-supergraph-config-file> [flags]\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Environment Variable Usage Examples\nDESCRIPTION: Demonstrates various ways to add environment variables to DDN connectors, including basic usage, multiple variables, and specific file targeting.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add new environment variable to Connector mydb\n ddn connector env add mydb --env NEW_VAR=value\n\n# Add new environment variables to a specific env file\n ddn connector env add mydb --subgraph ./subgraph/subgraph.yaml --env VAR1=VAL1 --env VAR2=VAL2 --target-env-file .env.local\n\n# Add new environment variable to Connector located at ./foo/my_db/connector.yaml\n ddn connector env add --connector ./foo/my_db/connector.yaml --env NEW_VAR=value\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Webhook in YAML\nDESCRIPTION: Demonstrates how to configure an authentication webhook in Hasura using YAML. It specifies the webhook URL and the HTTP method to be used for making requests to the auth hook.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nurl: http://auth_hook:3050/validate-request\nmethod: Post\n```\n\n----------------------------------------\n\nTITLE: Permission Error Response Example\nDESCRIPTION: Illustrates the error response format when a user lacks proper permissions to access a resource.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/errors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"403\",\n      \"detail\": \"Access forbidden\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Global command options inherited from parent operations that can be used with the rename-graphql-prefixes command, including logging and output formatting options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initializing Customers Subgraph Repository for Hasura DDN\nDESCRIPTION: Creates a new local project and git repository for the 'customers' subgraph. This sets up an independent development environment for the customers-related functionality.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init customer-team --create-subgraph customers && cd customer-team && git init\n```\n\n----------------------------------------\n\nTITLE: Introspecting ClickHouse Connector\nDESCRIPTION: Command to introspect the ClickHouse connector and fetch the latest resources including newly added native queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: Command to start the local Hasura DDN Engine and Storage connector services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating DDN Supergraph Build\nDESCRIPTION: Creates a new build on the cloud project using the DDN CLI. Provides a console URL for accessing the Explorer tab where project subgraphs can be viewed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for set-current-context\nDESCRIPTION: Available command-specific options for the set-current-context command, showing only the help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for set-current-context\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console in Bash\nDESCRIPTION: This Bash command opens the Hasura DDN console for the local environment, allowing users to make unauthenticated requests in NoAuth mode.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Command Options\nDESCRIPTION: Lists the available options for the 'ddn connector env add' command, including CI mode, context selection, and environment variable specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                            Disables the use of context\n    --connector string              Path to Connector YAML config file\n-c, --context string                Name of the context to use. (default <current_context>)\n-e, --env stringArray               Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n-h, --help                          help for add\n    --target-env-file stringArray   Path to the specific environment file to update (optional)\n```\n\n----------------------------------------\n\nTITLE: Installing DDN CLI\nDESCRIPTION: This snippet demonstrates how to install the DDN CLI using curl in a Linux environment. It is required to execute the CLI commands for managing Hasura DDN projects.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://graphql-engine-cdn.hasura.io/ddn/cli/v4/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with Custom Parameters in Bash\nDESCRIPTION: This command builds the Supergraph using a specific supergraph config file and env file, outputting to a specified directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local --output-dir <path-to-engine-directory> --supergraph supergraph.yaml --env-file .env\n```\n\n----------------------------------------\n\nTITLE: Introspecting Lambda Connector\nDESCRIPTION: Introspects the lambda connector using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: DDN Project Creation Command Options\nDESCRIPTION: Available command-specific options for project creation, including data plane ID, help flag, and plan selection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --data-plane-id uuid   The DDN instance where the Project should be hosted\n-h, --help                 help for create\n    --plan string          DDN Project plan\n```\n\n----------------------------------------\n\nTITLE: Start Local Supergraph\nDESCRIPTION: Launch the engine, connector, and related services using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Running Custom Supergraph Build Script\nDESCRIPTION: Command to run the custom script for building the supergraph without connectors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/independent-connector-deployment.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn run build-supergraph\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Post-Login JWT Claims\nDESCRIPTION: JavaScript code for Auth0 Action that sets up custom JWT claims for Hasura authentication after user login. Configures default role, allowed roles and user ID in both ID token and access token.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = \"claims.jwt.hasura.io\";\n  // Here, you'll need to fetch the user's role from Hasura DDN using an admin-level authenticated request\n  // Learn more here: https://hasura.io/docs/3.0/auth/authentication/jwt/special-roles\n  // Below, we're hard-coding the value for now\n  const user_role = \"user\"; // the role returned from your request ☝️\n  api.idToken.setCustomClaim(namespace, {\n    \"x-hasura-default-role\": user_role,\n    \"x-hasura-allowed-roles\": [user_role],\n    \"x-hasura-user-id\": event.user.user_id,\n    // Add any other custom claims you wish to include\n  });\n\n  // Set the necessary access token claims for Hasura to authenticate the user\n  api.accessToken.setCustomClaim(namespace, {\n    \"x-hasura-default-role\": user_role,\n    \"x-hasura-allowed-roles\": [user_role],\n    \"x-hasura-user-id\": event.user.user_id,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting Data Source\nDESCRIPTION: Re-introspect the OpenAPI data source to update metadata after changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_openapi\n```\n\n----------------------------------------\n\nTITLE: Testing UpdatePostsById Mutation for Unowned Post in GraphQL\nDESCRIPTION: This GraphQL mutation tests updating a post not owned by Alice (user ID 1), which should fail and return zero affected rows.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UPDATE_POST_TITLE {\n  updatePostsById(keyId: \"4\", updateColumns: { title: { set: \"Malicious Actions in the API\" } }) {\n    affectedRows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn connector build get Command in Bash\nDESCRIPTION: Examples demonstrating various ways to use the ddn connector build get command, including retrieving details of a specific ConnectorBuild by ID, listing ConnectorBuilds for a specific connector, project, or subgraph, and retrieving the NDC schema of a ConnectorBuild.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get details of a ConnectorBuild\n ddn connector build get 1d4f4831-54a2-4ded-b680-07d00510a522\n\n# Get details of all ConnectorBuilds for Connector \"mydb\" for a Project and Subgraph\n ddn connector build get --connector-name mydb --project myproject --subgraph-name myapp\n\n# Get details of all ConnectorBuilds for Connector defined in a Connector config file\n ddn connector build get --connector ./myapp/connector/connector.cloud.yaml\n\n# Get details of all ConnectorBuilds for a Project\n ddn connector build get --project myproject\n\n# Get details of all ConnectorBuilds for a Subgraph in a Project\n ddn connector build get --project myproject --subgraph-name myapp\n\n# Get NDC Schema of a ConnectorBuild\n ddn connector build get 1d4f4831-54a2-4ded-b680-07d00510a522 --schema\n```\n\n----------------------------------------\n\nTITLE: Defining TypePermissions for Posts Model in YAML\nDESCRIPTION: This YAML snippet defines TypePermissions for the Posts model, allowing the admin role to access all fields of the Posts type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Posts\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - authorId\n          - content\n          - postId\n          - title\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance in Shell\nDESCRIPTION: This command introspects the PostgreSQL instance to discover available resources and schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Showing Available Snowflake Resources\nDESCRIPTION: Display available resources and their status from the Snowflake connector using the Hasura DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_snowflake\n```\n\n----------------------------------------\n\nTITLE: Introspecting Trino Instance\nDESCRIPTION: Uses the Hasura DDN CLI to introspect the Trino database and show available resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_trino\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_trino\n```\n\n----------------------------------------\n\nTITLE: Remove Unused Models via CLI\nDESCRIPTION: This command allows the user to remove a specified model from the supergraph, which can help manage timeouts during builds when dealing with many tables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn model remove <table>\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI subgraph get command in Bash\nDESCRIPTION: This command is used to list Subgraphs for a Hasura DDN Project or get details of a specific one. It can be run with or without specifying a subgraph name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph get [subgraph-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options for upgrade-model-v1-to-v2\nDESCRIPTION: Available options specific to the upgrade-model-v1-to-v2 command, including CI mode, context specification, help, and path configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-model-v1-to-v2\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Using ddn connector-link show Command in Bash\nDESCRIPTION: The basic syntax for using the DataConnectorLink show command. Requires specifying a connector-link-name parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link show <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Opening the development console\nDESCRIPTION: This command opens the DDN development console in a local environment. The console provides a web interface for interacting with and testing the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn console --local\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn plugins list Command\nDESCRIPTION: Example usage scenarios of the ddn plugins list command. The first example shows how to list all plugins, while the second example demonstrates listing plugins without updating the local plugin index cache.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all plugins\n ddn plugins list\n\n# List all plugins without updating the plugin index local cache\n ddn plugins list --dont-update-index\n```\n\n----------------------------------------\n\nTITLE: Initializing BigQuery Connector\nDESCRIPTION: This command initializes the BigQuery connector in the Hasura DDN project, prompting for the connection string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_bigquery -i\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options Configuration\nDESCRIPTION: Available command-specific options for the connector-link remove command, including CI mode, context selection, and target environment file configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                            Disables the use of context\n-c, --context string                Name of the context to use. (default <current_context>)\n-h, --help                          help for remove\n    --subgraph string               Path to Subgraph config file\n    --target-env-file stringArray   Env file to remove ConnectorLink environment variables from\n```\n\n----------------------------------------\n\nTITLE: Basic Note Admonition Example in Markdown\nDESCRIPTION: Demonstrates the basic syntax for creating a note admonition with a Discord link reference.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\n**This** is an example of a call-out admonition. For more info please get in touch with us on [Discord](https://discord.gg/vBPpJkS).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation to Insert User\nDESCRIPTION: This GraphQL mutation inserts a new user with name 'Sean' and age 21 into the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertUser {\n  insertUsers(objects: { age: \"21\", name: \"Sean\" }, postCheck: {}) {\n    affectedRows\n    returning {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parent Command Options for 'ddn connector env'\nDESCRIPTION: Inherited command-line options from parent operations that can be used with the 'ddn connector env' command, including output format, logging, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_env.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Introspecting Qdrant Database\nDESCRIPTION: Commands to introspect the Qdrant database and display available resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_qdrant\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_qdrant\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn supergraph build local in SASS\nDESCRIPTION: These options are inherited from parent operations and include settings for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn connector list Command in Bash\nDESCRIPTION: Examples showing how to list all connector versions or filter by a specific connector like Postgres.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all versions of all connectors\n ddn connector list\n\n# List all versions of the Postgres connector\n ddn connector list --hub-connector hasura/postgres\n```\n\n----------------------------------------\n\nTITLE: Building DDN Supergraph\nDESCRIPTION: Creates a new local build of the DDN supergraph. This step compiles the added models and prepares the graph for querying.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Defining CustomTypeName in GraphQL Schema\nDESCRIPTION: Specifies the name of a user-defined type in a GraphQL schema. It is represented as a string value.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Native Queries Example - JSON\nDESCRIPTION: This JSON snippet illustrates how to define native SQL queries that can be used as queryable collections. It includes examples of inline queries and parameterized queries, demonstrating how to specify SQL parts, columns, arguments, and descriptions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error in Go Lambda Connector\nDESCRIPTION: Illustrates how to return a custom UnauthorizeError with a message and metadata using the Go NDC SDK in a function context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/errors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/hasura/ndc-sdk-go/schema\"\n\t\"hasura-ndc.dev/ndc-go/types\"\n)\n\n// A hello argument\ntype HelloArguments struct {\n\tGreeting string `json:\"greeting\"`\n\tCount    *int   `json:\"count\"`\n}\n\n// A hello result\ntype HelloResult struct {\n\tReply string `json:\"reply\"`\n\tCount int    `json:\"count\"`\n}\n\n\nfunc FunctionHello(ctx context.Context, state *types.State, arguments *HelloArguments) (*HelloResult, error) {\n\tcount := 1\n\tauthorized := false // This is just an example\n\n\tif !authorized {\n\t\treturn nil, schema.UnauthorizeError(\"User is not authorized to perform this operation\", map[string]any{\n\t\t\t\"function\": \"hello\",\n\t\t})\n\t}\n\n\tif arguments.Count != nil {\n\t\tcount = *arguments.Count + 1\n\t}\n\treturn &HelloResult{\n\t\tReply: fmt.Sprintf(\"Hi! %s\", arguments.Greeting),\n\t\tCount: count,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Update source introspection with DDN CLI\nDESCRIPTION: This command updates the source introspection for a given connector. Replace `<connector_name>` with the name of the connector. This command is used when the underlying data source has changed and the introspection needs to be refreshed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector introspect <connector_name>\"\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Supergraph after Metadata Changes\nDESCRIPTION: This command builds a new supergraph for the local environment after metadata changes. It compiles the updated metadata into a ready-to-use API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Querying Orders from Billing Subgraph in GraphQL\nDESCRIPTION: GraphQL query to retrieve orders from the billing subgraph. Note the billing_ prefix on the orders field, which comes from the subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_ORDERS {\n  billing_orders {\n    id\n    createdAt\n    status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Context Commands\nDESCRIPTION: Options inherited from parent operations, including log level configuration, prompt behavior, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Local Build in Hasura DDN\nDESCRIPTION: Creates a local build of the subgraph. This step generates the necessary files for running and testing the API locally.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Examples of DDN Connector Removal\nDESCRIPTION: These examples demonstrate different ways to use the 'ddn connector remove' command, including removing from the default subgraph, specifying a custom subgraph location, and using a specific connector configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove Connector my_db and associated DataConnectorLink from the default subgraph\n ddn connector remove my_db\n\n# Remove Connector my_db from Subgraph located at ./foo/subgraph.yaml and associated DataConnectorLink\n ddn connector remove my_db --subgraph ./foo/subgraph.yaml\n\n# Remove Connector located at ./foo/my_db/connector.yaml with DataConnectorLink given by app/subgraph.yaml and name my_db\n ddn connector remove --connector ./foo/my_db/connector.yaml --subgraph app/subgraph.yaml --connector-link my_db\n```\n\n----------------------------------------\n\nTITLE: Migrating Project to New Config Version in Bash\nDESCRIPTION: Command to update an existing local project to the new project structure using the codemod command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-project-config-v2-to-v3 --dir .\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Path in YAML\nDESCRIPTION: Example showing how to specify the subgraph configuration file path in the default context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Building Local Supergraph\nDESCRIPTION: Command to create a local build of the supergraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Configuration Options\nDESCRIPTION: Available configuration options and flags for the DDN CLI, including help, log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help               help for ddn\n    --log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n    --no-prompt          Do not prompt for required but missing flags\n    --out string         Output format. Can be table, json or yaml. (default \"table\")\n    --timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Commit\nDESCRIPTION: Command to create a commit with a descriptive message following docs conventions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"docs: update / fix / add <feature>\"\n```\n\n----------------------------------------\n\nTITLE: DDN Context Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with get-current-context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining User-to-Posts Relationship in YAML for DDN\nDESCRIPTION: This YAML configuration defines a relationship from the Users model to the Posts model in DDN. It specifies the relationship name, source and target models, and field mappings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: posts\n  sourceType: Users\n  target:\n    model:\n      name: Posts\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Initialization Output\nDESCRIPTION: This command exemplifies the output when a project is successfully created on Hasura DDN. The command outputs the project name and available subgraphs as a formatted table. There are no parameters or inputs required, and the output is displayed directly in the terminal.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/01-create-a-project.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n4:19PM INF Project \"cool-cat-3685\" created on Hasura DDN successfully\n+-----------+---------------+\n| Project   | fast-pug-7230 |\n+-----------+---------------+\n| Subgraphs | globals,app   |\n+-----------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector in Hasura DDN\nDESCRIPTION: Initializes a new PostgreSQL connector named billing_pg with the interactive flag. This command sets up the necessary configuration for connecting to the PostgreSQL database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init billing_pg -i\n```\n\n----------------------------------------\n\nTITLE: Update model with DDN CLI\nDESCRIPTION: This command updates a model definition within the DDN. Replace `<connector_name>` and `<model_name>` with appropriate values. This is performed after introspection to apply changes to the model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn model update <connector_name> <model_name>\"\n```\n\n----------------------------------------\n\nTITLE: Running Supergraph Build Commands with Context in Bash\nDESCRIPTION: Demonstrates how to run supergraph build commands for both local and DDN environments using the same context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local  # will use localEnvFile from context, i.e. .env\nddn supergraph build create  # will use cloudEnvFile from context, i.e. .env.cloud\n```\n\n----------------------------------------\n\nTITLE: Example: Deleting SupergraphBuild for Specific Project\nDESCRIPTION: This example demonstrates how to delete a SupergraphBuild from a specific project named 'pet-lion-2649' using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build delete <supergraph-build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB Container\nDESCRIPTION: Command to start the MongoDB container in detached mode using Docker Compose.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_mongo/compose.mongo.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Introspecting Cloud Storage\nDESCRIPTION: Command to introspect the cloud storage connector, which generates metadata files for the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_storage\n```\n\n----------------------------------------\n\nTITLE: Example: Building a Subgraph with Environment Variables in Bash\nDESCRIPTION: This example demonstrates how to build a Subgraph from a config file for a specific project, including environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build create --subgraph ./app/subgraph.yaml --project pet-lion-2649 --env key1=val1\n```\n\n----------------------------------------\n\nTITLE: Basic Build Command Options\nDESCRIPTION: Core command line options for the ddn subgraph build command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for build\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit for Hasura DDN Project\nDESCRIPTION: Creates an initial commit in the git repository, including the local project configuration mapped to the cloud project via context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit add . && git commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Hasura DDN\nDESCRIPTION: This snippet shows how to configure the connection URI in the root `.env.cloud` file, which is necessary for the cloud-hosted connector to communicate with the data source. Ensure the connection URI is set correctly to enable functionality.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/03-deploy-a-connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCONNECTION_URI=<connection-uri>\n```\n\n----------------------------------------\n\nTITLE: Querying Users Table in GraphQL\nDESCRIPTION: This GraphQL query fetches data from the 'users' table, including userId, name, and age fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetUsers {\n  users {\n    userId\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Options Inherited from Parent Commands in Sass Format\nDESCRIPTION: Common options inherited from parent commands that can be used with the 'ddn connector-link update' command, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Linux Persistent Completions\nDESCRIPTION: Configures permanent DDN CLI completions for Linux systems by saving them to the fpath directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nddn completion zsh > \"${fpath[1]}/_ddn\"\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Init Examples\nDESCRIPTION: Examples demonstrating various ways to initialize connectors, including interactive mode, postgres connector initialization, and NodeJS connector setup with custom configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a Connector interactively in a step by step manner\n ddn connector init -i\n\n# Initialize a Postgres Connector \"mydb\" in the Subgraph \"app\"\n ddn connector init mydb --subgraph ./app/subgraph.yaml --hub-connector hasura/postgres\n\n# Initialize a Postgres Connector \"mydb\" inside the directory ./connector\n ddn connector init mydb --dir ./connector --hub-connector hasura/postgres\n\n# Initialize a NodeJS Connector \"mylambda\" in the Subgraph \"app\" on port 8765\n ddn connector init mylambda --subgraph ./app/subgraph.yaml  --hub-connector hasura/nodejs --configure-port 8765\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn supergraph build create in Bash\nDESCRIPTION: This snippet provides various examples of using the 'ddn supergraph build create' command, including building connectors and supergraphs, updating schemas, and applying builds.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Connectors and the Supergraph\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --env-file .env.cloud\n\n# Build the Supergraph without building the Connectors\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --no-build-connectors\n\n# Build the Supergraph and update the link schema and target env file\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --update-connector-link-schema --target-env-file .env.cloud\n\n# Build a composed Supergraph using Subgraphs with build versions and using the applied Supergraph Build as the base Supergraph (Advanced plan only)\n ddn supergraph build create --subgraph-version globals:c15b0b4031 --subgraph-version my_subgraph:c15b0b4031 --base-supergraph-on-applied\n\n# Build a composed Supergraph using Subgraphs with build versions and base Supergraph version (Advanced plan only)\n ddn supergraph build create --subgraph-version globals:c15b0b4031 --subgraph-version my_subgraph:c15b0b4031 --base-supergraph-version c15b0b4871\n\n# Build the Supergraph and also apply the build\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --apply\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: List of flags inherited from parent commands that can be used with the 'ddn plugins install' command, including logging, output formatting, and timeout options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Services for Rate Limit Plugin\nDESCRIPTION: Docker Compose configuration that sets up Redis and the Rate Limit Plugin services with necessary environment variables and health checks.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/rate-limit/how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  image: redis:latest\n  ports:\n    - 6379:6379\n\nrate-limit:\n  build:\n    context: https://github.com/hasura/engine-plugin-rate-limit.git\n  ports:\n    - \"3001:3001\"\n  environment:\n    - PORT=3001\n    - DEBUG=rate-limit*\n    - OTEL_EXPORTER_OTLP_ENDPOINT=https://gateway.otlp.hasura.io:443/v1/traces\n    - OTEL_EXPORTER_PAT=your-pat-here\n    - HASURA_DDN_PLUGIN_CONFIG_PATH=plugin_config\n  depends_on:\n    redis:\n      condition: service_healthy\n  healthcheck:\n    test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3001/health\"]\n    interval: 30s\n    timeout: 10s\n    retries: 3\n  volumes:\n    - ./rate_limit_config:/app/plugin_config\n```\n\n----------------------------------------\n\nTITLE: Initializing Supergraph Project with DDN CLI\nDESCRIPTION: This command initializes a new Supergraph project directory. It can be used with various options to customize the initialization process, such as creating a project, specifying subgraphs, and setting naming conventions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init <path-to-project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Server Response\nDESCRIPTION: Sample output showing the plugin execution logs and query response data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is running before the request is parsed! The user making this request is of role admin.\n\n\nThis is running after the request is logged via the webhook before the response is sent to the client!\n\n\n    Response Data: {\n  \"customers\": [\n    {\n      \"id\": 1,\n      \"name\": \"Alice\",\n      \"email\": \"alice@example.com\",\n      \"orders\": [\n        {\n          \"id\": 1,\n          \"orderDate\": \"2025-01-14\",\n          \"totalAmount\": \"99.99\"\n        }\n      ]\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Bob\",\n      \"email\": \"bob@example.com\",\n      \"orders\": [\n        {\n          \"id\": 2,\n          \"orderDate\": \"2025-01-14\",\n          \"totalAmount\": \"49.50\"\n        }\n      ]\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Charlie\",\n      \"email\": \"charlie@example.com\",\n      \"orders\": [\n        {\n          \"id\": 3,\n          \"orderDate\": \"2025-01-14\",\n          \"totalAmount\": \"75.00\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAI package to Python requirements\nDESCRIPTION: Instruction to add the OpenAI Python client package to the requirements.txt file for Python implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/5-enrich-data-with-an-llm.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nopenai==1.46.1\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services\nDESCRIPTION: This command starts the necessary DDN services using Docker. It initializes the environment required to run queries against the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Value Configuration\nDESCRIPTION: Specifies the structure for environment value configuration, allowing either literal values or references to Hasura secrets.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `value` | string | false |  |\n| `valueFromEnv` | string | false |  |\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logic in Go\nDESCRIPTION: Implements an 'encode' mutation in Go. The 'Procedure' prefix is used to identify it as a mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\n\t\"hasura-ndc.dev/ndc-go/types\"\n)\n\n// EncodeUsernameArguments represents the input arguments for encoding a username.\ntype EncodeUsernameArguments struct {\n\tUsername string `json:\"username\"`\n}\n\n// EncodeUsernameResult represents the result of the Base64 encoding.\ntype EncodeUsernameResult struct {\n\tEncodedUsername string `json:\"encodedUsername\"`\n}\n\n// ProcedureEncodeUsername encodes the given username into Base64 format.\nfunc ProcedureEncode(ctx context.Context, state *types.State, arguments *EncodeUsernameArguments) (*EncodeUsernameResult, error) {\n\tencoded := base64.StdEncoding.EncodeToString([]byte(arguments.Username))\n\treturn &EncodeUsernameResult{\n\t\tEncodedUsername: encoded,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Options for 'ddn codemod' Command in Sass\nDESCRIPTION: Displays the help option available for the 'ddn codemod' command in the Hasura DDN CLI. This option provides help information about the command usage and syntax.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for codemod\n```\n\n----------------------------------------\n\nTITLE: Serving DDN API Locally\nDESCRIPTION: These commands start the Docker container and launch the DDN console for local API serving.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Available Options for 'ddn command update' in SASS Format\nDESCRIPTION: List of specific options available for the 'ddn command update' command, including context selection, help display, pattern detection, and subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for update\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Upgrading Boolean Expression Types with DDN CLI\nDESCRIPTION: Upgrades deprecated ObjectBooleanExpressionType to the new BooleanExpressionType. This codemod enables filtering Models on nested objects and arrays, and based on relationships.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/deprecated-metadata-upgrades.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-object-boolean-expression-types\n```\n\n----------------------------------------\n\nTITLE: Creating New AWS CloudFormation Stack for Hasura Cloud BYOC\nDESCRIPTION: These Bash commands create a new CloudFormation stack for Hasura Cloud BYOC if it doesn't exist, using the provided template.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack \\\n  --stack-name hasura-cloud-byoc \\\n  --template-body file://cloudformation.yaml \\\n  --capabilities CAPABILITY_NAMED_IAM\n\naws cloudformation wait stack-create-complete \\\n  --stack-name hasura-cloud-byoc\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Hasura DDN Supergraph API\nDESCRIPTION: Builds the supergraph API and starts the Docker container to serve the API, making it ready for querying.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Tracking the function\nDESCRIPTION: This snippet shows how to track the function 'shoutName' within the connector by using the ddn command, ensuring that the function is recognized and can be accessed later.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn command add my_ts shoutName\n```\n\n----------------------------------------\n\nTITLE: JSON Response from User Insertion Mutation\nDESCRIPTION: This JSON object represents the response from the GraphQL mutation, showing the affected rows and the returned user data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertUsers\": {\n      \"affectedRows\": 1,\n      \"returning\": [\n        {\n          \"id\": 4,\n          \"name\": \"Sean\",\n          \"age\": 21\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in SASS Format\nDESCRIPTION: List of options inherited from parent commands, including log level configuration, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating .env.cloud file for the subgraph\nDESCRIPTION: Demonstrates how to create the .env.cloud.my_subgraph file for the subgraph, including necessary cloud connector URLs for read and write operations. These URLs are obtained after deploying the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/openAPI/_deployment-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nMY_SUBGRAPH_MY_OPENAPI_READ_URL=<cloud-connector-read-url>\nMY_SUBGRAPH_MY_OPENAPI_WRITE_URL=<cloud-connector-write-url>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Hasura DDN Supergraph for Local Environment\nDESCRIPTION: Command to rebuild the Hasura DDN supergraph after metadata changes. This step is necessary to reflect updates in the project structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build\nDESCRIPTION: Command to create a new supergraph build using the updated configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --supergraph ./supergraph.cloud.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Connector\nDESCRIPTION: Command to set up a MongoDB connector in the Hasura DDN project with interactive mode enabled.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_mongo -i\n```\n\n----------------------------------------\n\nTITLE: Generated Heading ID Example\nDESCRIPTION: Shows how Docusaurus automatically generates heading IDs and how they can be referenced in links.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Heading H2 example\n\n<!-- will have a generated id as below -->\n\nheading-h2-example\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn model show Command in Bash\nDESCRIPTION: Examples demonstrating how to use the 'ddn model show' command for a specific model and with a glob pattern to match multiple models.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show diff between the 'Carts' model and its corresponding ndc collection\n ddn model show Carts\n\n# Show diff between models and their corresponding ndc collections for all models matching glob pattern 'User*'\n ddn model show \"User*\"\n```\n\n----------------------------------------\n\nTITLE: Adding API Commands\nDESCRIPTION: Commands to add API endpoints as DDN commands\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_http getUsers\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for v3-engine\nDESCRIPTION: This command creates a Dockerfile for the v3-engine by copying the cloud build directory to an image layer. This is the starting point for building the v3-engine Docker image.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF >> Dockerfile\nFROM ghcr.io/hasura/v3-engine\nCOPY ./build-cloud /md/\nEOF\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Connector\nDESCRIPTION: Command to initialize the HTTP connector in interactive mode\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_http -i\n```\n\n----------------------------------------\n\nTITLE: Using 'ddn command update' Command Syntax in Bash\nDESCRIPTION: Basic syntax for using the 'ddn command update' command to update Commands in the local metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command update <command-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling DDN Plugins Basic Command\nDESCRIPTION: Basic command syntax for uninstalling a plugin from DDN CLI. Requires specifying the plugin name as an argument.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins uninstall <plugin-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: SSH into Cloud Server\nDESCRIPTION: Command to establish a secure shell connection to a remote cloud server using SSH\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh user@your-server-ip\n```\n\n----------------------------------------\n\nTITLE: Launching Hasura Console\nDESCRIPTION: This command launches the Hasura console connected to the local environment. Before running this command, the GraphQL engine should be running. The console allows for testing and exploring the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Listing Native Operations\nDESCRIPTION: CLI command to list existing Native Operations for a specific connector\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/chinook_pg/connector.yaml -- \\\n  native-operation list\n```\n\n----------------------------------------\n\nTITLE: Fetch All Articles Example Request\nDESCRIPTION: Example HTTP GET request to fetch all articles from the Articles model in the default subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles\n```\n\n----------------------------------------\n\nTITLE: Using the 'ddn connector env' CLI Options\nDESCRIPTION: Command-line options specific to the 'ddn connector env' command, showing help flag options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_env.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for env\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN CLI for Schema Diff\nDESCRIPTION: This example shows how to use the DDN CLI to compare the GraphQL schema changes from build version 'qfrr5e5jyw' to 'g6v6nh73h0' for a specific project. It demonstrates practical usage of the command with appropriate parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Compare changes made to the GraphQL schema from build version \"qfrr5e5jyw\" to \"g6v6nh73h0\" for Project \"pet-lion-2649\"\n ddn supergraph build diff qfrr5e5jyw g6v6nh73h0 --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent operations for the ddn connector-link add command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Static Hostname Entry for DNS Resolution\nDESCRIPTION: This command adds a static entry to the hosts file on Linux/Unix/MacOS, overriding DNS resolution for the hostname local.hasura.dev to resolve potential issues.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1 local.hasura.dev\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for GraphqlConfig Subscription Upgrade in SASS Format\nDESCRIPTION: Available command-specific flags for the 'upgrade-graphqlconfig-subscriptions' command, including options for CI mode, context selection, help, and targeting specific subgraphs or supergraphs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-graphqlconfig-subscriptions\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Global options that are inherited from parent operations and can be used with the ddn model list command, including output format and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary fish Auto-Completion for Hasura CLI\nDESCRIPTION: Command to enable auto-completion for the current fish shell session.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn completion fish | source\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Docker Compose Configuration\nDESCRIPTION: Docker compose configuration for setting up a ClickHouse container with necessary environment variables and volume mappings\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  clickhouse:\n    image: clickhouse/clickhouse-server\n    container_name: clickhouse-server\n    ports:\n      - \"8123:8123\"\n      - \"9000:9000\"\n    volumes:\n      - ./clickhouse-data:/var/lib/clickhouse\n    environment:\n      CLICKHOUSE_USER: \"default_user\"\n      CLICKHOUSE_PASSWORD: \"default_password\"\n      CLICKHOUSE_DB: \"default\"\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services\nDESCRIPTION: Starts the necessary Docker services for running the DDN supergraph. This command initializes the environment for querying the graph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn model list Command\nDESCRIPTION: The command-specific options that can be used with the ddn model list command, including context selection and subgraph specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for list\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Defining Native Queries\nDESCRIPTION: Explains how to define inline and parameterized native queries in the configuration. It includes the SQL statement parts, result columns, and parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/oracle/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing AWS CloudFormation Stack for Hasura Cloud BYOC\nDESCRIPTION: These Bash commands update an existing CloudFormation stack for Hasura Cloud BYOC with the provided template.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation update-stack \\\n  --stack-name hasura-cloud-byoc \\\n  --template-body file://cloudformation.yaml \\\n  --capabilities CAPABILITY_NAMED_IAM\n\naws cloudformation wait stack-update-complete \\\n  --stack-name hasura-cloud-byoc\n```\n\n----------------------------------------\n\nTITLE: Querying Rockets Data\nDESCRIPTION: GraphQL query to fetch rocket data including name, cost, and description\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_ROCKETS_DATA {\n  rockets {\n    name\n    costPerLaunch\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus\nDESCRIPTION: Create and configure the Prometheus YAML file for metric scraping.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntouch app/connector/my_prometheus/prometheus.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"local.hasura.dev:9090\"]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: This command starts the local Hasura DDN Engine and BigQuery connector services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Parent Operation Reference for Schema Diff\nDESCRIPTION: This entry refers to the parent operation associated with the 'ddn supergraph build diff' command, providing a direct link to access further details about related operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [ddn supergraph build](/reference/cli/commands/ddn_supergraph_build) - Perform SupergraphBuild-related operations\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Supergraph and Testing Changes\nDESCRIPTION: This Bash command is used to rebuild the local supergraph, integrating any changes made to the API. There are no specific dependencies, but the `ddn` command-line tool must be installed. The command triggers a local build of the supergraph, preparing it for testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Relationship Add Examples\nDESCRIPTION: These examples demonstrate how to use the 'ddn relationship add' command with various options to add relationships for different scenarios, including all relationships for a data connector link, a specific collection, collections matching a glob pattern, and a collection defined by a specific foreign key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all Relationships for DataConnectorLink \"mydb\" in the subgraph set in the context\n ddn relationship add mydb \"*\"\n\n# Add Relationships for the collection \"Album\" in the DataConnectorLink \"mydb\" in the Subgraph \"app\"\n ddn relationship add mydb Album --subgraph ./app/subgraph.yaml\n\n# Add Relationships for collections that match the glob pattern \"sales_*\"\n ddn relationship add mydb \"sales_*\"\n\n# Add Relationships for the collection \"Album\" defined by the foreign key \"artists_album_id_fkey\" on the collection \"Artist\"\n ddn relationship add mydb Album --fk-collection Artist --fk-name artists_album_id_fkey\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install required Node.js packages using npm\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enabling Required GCP APIs for Hasura DDN\nDESCRIPTION: This command enables necessary GCP APIs within the project to support Hasura DDN deployment. It includes computing, DNS, container services, and certificate management APIs required for the infrastructure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable \\\n  compute.googleapis.com \\\n  dns.googleapis.com \\\n  gkehub.googleapis.com \\\n  multiclusterservicediscovery.googleapis.com \\\n  trafficdirector.googleapis.com \\\n  multiclusteringress.googleapis.com \\\n  container.googleapis.com \\\n  certificatemanager.googleapis.com --project ${GCP_PROJECT_ID}\n```\n\n----------------------------------------\n\nTITLE: Updating Metadata with the ddn CLI\nDESCRIPTION: This shell command updates the connector metadata to track new resources. It requires the ddn CLI tool and appropriate configurations in place.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nddn connector-link update chinook_pg --add-all-resources\n```\n\n----------------------------------------\n\nTITLE: Using ddn auth print-promptql-secret-key Command in Bash\nDESCRIPTION: The basic syntax for using the ddn auth print-promptql-secret-key command, which retrieves the PromptQL secret key for a project. This command is only available after enabling PromptQL for a local project and attaching it to a Hasura Cloud project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth print-promptql-secret-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Categories in JSON\nDESCRIPTION: Example of configuring directory labels and positions using _category_.json file\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Actions\",\n  \"position\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Context Commands in Hasura DDN CLI (sass)\nDESCRIPTION: Lists the options inherited from parent operations that can be used with any 'ddn context' subcommand, including log level control, output format selection, and request timeout configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Response\nDESCRIPTION: This JSON snippet shows a sample response to the GraphQL query for the 'comments' table. It contains an array of comment objects, each with id, comment, user_id, and post_id fields, representing data retrieved from the PostgreSQL database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comments\": [\n      {\n        \"id\": 1,\n        \"comment\": \"Great post! Really enjoyed reading this.\",\n        \"user_id\": 1,\n        \"post_id\": 2\n      },\n      {\n        \"id\": 2,\n        \"comment\": \"Thanks for sharing your thoughts!\",\n        \"user_id\": 2,\n        \"post_id\": 1\n      },\n      {\n        \"id\": 3,\n        \"comment\": \"Interesting perspective.\",\n        \"user_id\": 3,\n        \"post_id\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Deployment by Creating and Applying a Supergraph Build\nDESCRIPTION: This command streamlines the deployment process by creating and applying a supergraph build in a single step, enhancing efficiency.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/deploy-to-ddn.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --apply\n```\n\n----------------------------------------\n\nTITLE: Viewing Globals Directory Structure in Bash for Hasura DDN\nDESCRIPTION: This snippet shows the directory structure for the globals subgraph, which holds supergraph-level metadata objects. It includes environment files, authentication configs, compatibility config, and GraphQL configuration for both cloud and local deployments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n├── .env.globals.cloud\n├── .env.globals.local\n├── auth-config.cloud.hml\n├── auth-config.local.hml\n├── compatibility-config.hml\n├── graphql-config.hml\n├── subgraph.cloud.yaml\n└── subgraph.local.yaml\n```\n\n----------------------------------------\n\nTITLE: Recording the ingress URL for a build version in Hasura Control Plane\nDESCRIPTION: This command registers the ingress URL for a specific build version with Hasura's Control Plane. It associates the URL with a particular build version and project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build set-self-hosted-engine-url <ingress-url> --build-version <build_version> --project <ddn-project-name>\n```\n\n----------------------------------------\n\nTITLE: HTML Implementation of Parsed Literals with Links\nDESCRIPTION: Shows how to implement code blocks with clickable links using HTML pre and code tags. Uses string templates to preserve indentation and formatting.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"parsed-literal\">\n  <pre>\n<code>\n{`{\n  \"table\"  : `}<a href=\"#tablename\">TableName</a>{`\n  \"column\" : `}<a href=\"#pgcolumn\">PGColumn</a>{`\n}`}\n</code>\n</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating All Commands using DDN CLI (Go)\nDESCRIPTION: This command updates all commands for the 'my_go' connector. The '*' wildcard specifies that all commands associated with the connector should be updated.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"ddn command update my_go \\\"*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: Updated OpenTelemetry collector configuration with OTLP exporters, processors, and receivers setup\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    endpoint: https://gateway.otlp.hasura.io:443\n    headers:\n      Authorization: pat ${env:HASURA_DDN_PAT}\nprocessors:\n  batch: {}\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\nservice:\n  pipelines:\n    logs:\n      exporters:\n        - otlp\n      processors:\n        - batch\n      receivers:\n        - otlp\n    metrics:\n      exporters:\n        - otlp\n      processors:\n        - batch\n      receivers:\n        - otlp\n    traces:\n      exporters:\n        - otlp\n      processors:\n        - batch\n      receivers:\n        - otlp\n```\n\n----------------------------------------\n\nTITLE: Setting Project Context\nDESCRIPTION: Command to set the DDN project in CLI context\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn context set project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: This command authenticates the Hasura DDN CLI by launching a browser window for user login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Creating a New Context with DDN CLI\nDESCRIPTION: The basic syntax for creating a new context using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context create-context <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the ddn console Command Syntax\nDESCRIPTION: Basic syntax for the ddn console command that opens the DDN console interface. The command accepts various flags to customize its behavior.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn console [flags]\n```\n\n----------------------------------------\n\nTITLE: Tracking the function:\nDESCRIPTION: This Bash command adds the function 'shoutName' to the 'my_go' connector, tracking it for future use in executions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn command add my_go shoutName\n```\n\n----------------------------------------\n\nTITLE: Deploying a Supergraph Build\nDESCRIPTION: This command applies a specific build of the supergraph to become the active API. Replace `<build-version>` with the build version obtained from the supergraph build process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <build-version>\n```\n\n----------------------------------------\n\nTITLE: Command to Re-run Docker Start\nDESCRIPTION: This command is utilized to rebuild the connector's image along with other services after making changes to metadata or the schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn connector-link show\nDESCRIPTION: Lists the specific options available for the 'ddn connector-link show' command including context selection and subgraph specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn connector list\nDESCRIPTION: Options specific to the ddn connector list command, including help flag and hub-connector filter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help                   help for list\n    --hub-connector string   Name of the Connector in Hasura Connector Hub, ref: https://hasura.io/connectors. eg: hasura/nodejs\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax\nDESCRIPTION: The basic command syntax for upgrading GraphqlConfig to support aggregates.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-aggregate [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of enable-promptql\nDESCRIPTION: A simple example showing how to enable PromptQL in an existing project using the default settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Enable PromptQL in an existing project\n ddn codemod enable-promptql\n```\n\n----------------------------------------\n\nTITLE: Using DDN CLI to upgrade context from v2 to v3\nDESCRIPTION: The basic command syntax for upgrading a project's context configuration from version 2 to version 3 using the DDN CLI tool. The command requires specifying the project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-context-v2-to-v3 --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Joined Users and Posts Data\nDESCRIPTION: SQL query to select posts data joined with user information from Snowflake.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  posts.id AS post_id,\n  posts.title,\n  posts.content,\n  posts.created_at,\n  users.name AS author\nFROM\n  posts\nJOIN\n  users ON posts.user_id = users.id;\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for rename-graphql-prefixes\nDESCRIPTION: Available flags specific to the rename-graphql-prefixes command, including options to specify prefixes and control subgraph configuration updates.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                               Disables the use of context\n-c, --context string                   Name of the context to use. (default <current_context>)\n    --from-graphql-root-field string   The previous GraphQL root field prefix\n    --from-graphql-type-name string    The previous GraphQL type name prefix\n    --graphql-root-field string        The new GraphQL root field prefix\n    --graphql-type-name string         The new GraphQL type name prefix\n-h, --help                             help for rename-graphql-prefixes\n    --no-update-subgraph-config        Do not update the subgraph config with the new prefixes\n    --subgraph string                  Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Subgraph Base Options\nDESCRIPTION: Basic command line options for the DDN project subgraph command, showing the help flag option.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for subgraph\n```\n\n----------------------------------------\n\nTITLE: Opening Local Development Console in DDN\nDESCRIPTION: Launches the local development console for querying and interacting with the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Installing v3-engine for Project API using Helm\nDESCRIPTION: This command installs v3-engine specifically for the Project API using Helm. It uses a unique release name that will be reused when applying different builds to the Project API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install <v3-engine-project-api-helm-release-name> \\\n  --set namespace=\"<namespace>\" \\\n  --set image.repository=\"<container_repository_path>\" \\\n  --set image.tag=\"<your_tag>\" \\\n  --set observability.hostName=\"<project_api_observability_hostname>\" \\\n  --set dataPlane.id=\"<data-plane-id>\" \\\n  --set dataPlane.key=\"<data-plane-key>\" \\\n  hasura-ddn/v3-engine\n```\n\n----------------------------------------\n\nTITLE: Creating a cloud project\nDESCRIPTION: This command initializes a new cloud project linked to the specified Data Plane ID, allowing deployments to the cloud environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nddn project init --data-plane-id <data-plane-id>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response for Users\nDESCRIPTION: JSON response showing the user data retrieved from the MongoDB database through GraphQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"userId\": 1,\n        \"name\": \"Alice\",\n        \"age\": 25\n      },\n      {\n        \"userId\": 2,\n        \"name\": \"Bob\",\n        \"age\": 30\n      },\n      {\n        \"userId\": 3,\n        \"name\": \"Charlie\",\n        \"age\": 35\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example OpenAPI 3.1 Specification Response\nDESCRIPTION: This JSON snippet shows an example of the OpenAPI 3.1 specification response. It includes API information, version, and placeholders for available endpoints, operations, and reusable components and schemas.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/schema.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"Hasura JSONAPI (alpha)\",\n    \"description\": \"REST API generated to match the JSON:API spec: https://jsonapi.org\",\n    \"version\": \"0.1\"\n  },\n  \"paths\": {\n    // Available endpoints and operations\n  },\n  \"components\": {\n    // Reusable components and schemas\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retry Supergraph Build Command\nDESCRIPTION: This command initiates a new build of the supergraph after resolving any issues with models, helping to ensure connectivity and performance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build <local|create>\n```\n\n----------------------------------------\n\nTITLE: Executing ddn subgraph delete command in Bash\nDESCRIPTION: Syntax for using the 'ddn subgraph delete' command to remove a subgraph and its associated metadata from the local project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph delete <subgraph-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura DDN Services\nDESCRIPTION: Start the local Hasura DDN Engine and MySQL connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Supergraph in DDN\nDESCRIPTION: Builds and deploys the supergraph to the created project on the Data Plane.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Collection to MongoDB\nDESCRIPTION: Command to insert sample post data into a new posts collection in MongoDB.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it mongodb mongosh my_database --eval \"\ndb.posts.insertMany([\n  { user_id: 1, post_id: 1, title: 'My First Post', content: 'This is Alice\\'s first post.' },\n  { user_id: 1, post_id: 2, title: 'Another Post', content: 'Alice writes again!' },\n  { user_id: 2, post_id: 3, title: 'Bob\\'s Post', content: 'Bob shares his thoughts.' },\n  { user_id: 3, post_id: 4, title: 'Hello World', content: 'Charlie joins the conversation.' }\n]);\n\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving ConnectorBuild Logs Command Syntax in Bash\nDESCRIPTION: The basic command syntax for retrieving logs from a ConnectorBuild in Hasura DDN. The command requires a connector-build-id parameter and supports various flags for customization.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build logs <connector-build-id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Posts in GraphQL\nDESCRIPTION: Executes a GraphQL query to fetch all posts from the updated Hasura DDN API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Context Set Command Options\nDESCRIPTION: Available command flags for the 'ddn context set' command, including context name selection and help options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for set\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn model add Command in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn model add' command, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initializing the supergraph\nDESCRIPTION: This command initializes a supergraph within the current directory, setting up the necessary configuration files for the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init .\n```\n\n----------------------------------------\n\nTITLE: Configuring NoAuth Authentication in YAML\nDESCRIPTION: Defines authentication configuration for development environment using noAuth mode with admin role.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-environments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: admin\n      sessionVariables: {}\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Init Options\nDESCRIPTION: Available configuration options for the connector initialization command, including environment variables, compose file settings, and context configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --add-env stringArray            Environment variable to set in the Connector. Can be repeated to provide multiple env vars\n    --add-to-compose-file string     The compose file to include the generated connector compose file\n    --ci                             Disables the use of context\n    --configure-port string          Initialize the connector with an already configured port\n-c, --context string                 Name of the context to use. (default <current_context>)\n    --dir string                     Directory to initialize the Connector\n-h, --help                           help for init\n    --hub-connector string           Name and version of Connector in Hasura Connector Hub. ref: https://hasura.io/connectors\n-i, --interactive                    Interactive mode\n    --no-link                        Do not create a ConnectorLink\n    --subgraph string                Subgraph to initialize the Connector in\n    --target-cloud-env-file string   Path to the cloud environment file\n    --target-local-env-file string   Path to the local environment file\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Style Example\nDESCRIPTION: JavaScript code should use semicolons at statement ends and single quotes for strings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/code-blocks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst example = 'text';\\nconsole.log(example);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Subgraph Build Apply\nDESCRIPTION: Demonstrates how to apply a Subgraph build to a specific project named 'pet-lion-2649'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply a Subgraph build to Project \"pet-lion-2649\"\n ddn subgraph build apply <subgraph-build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Supergraph Configuration YAML\nDESCRIPTION: Configuration file showing the structure of subgraphs in the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - app/subgraph.yaml\n    - billing/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Found Resources in Shell\nDESCRIPTION: This command displays the resources found during the introspection process of the PostgreSQL instance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Removing Models Using DDN CLI Syntax\nDESCRIPTION: Basic syntax for removing models from local metadata using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model remove <model-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Project\nDESCRIPTION: Create a local build of the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DataConnectorLink Add Command Options\nDESCRIPTION: Available command flags and options for the ddn connector-link add command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                                 Disables the use of context\n    --configure-connector-token string   Token used to authenticate requests to the Connector\n    --configure-host string              Read and Write URL of the Connector\n-c, --context string                     Name of the context to use. (default <current_context>)\n-h, --help                               help for add\n    --subgraph string                    Path to Subgraph config file\n    --target-env-file string             Subgraph env file to write the connector URLs to\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Operations\nDESCRIPTION: These options are inherited from parent operations and apply to all DDN connector commands. They control logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI with Hasura DDN\nDESCRIPTION: Command to authenticate the Hasura DDN CLI, which launches a browser window for login or signup.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Generating Random String for JWT Secret Key in Bash\nDESCRIPTION: This command uses OpenSSL to generate a random 16-byte hexadecimal string, which will be used as the JWT secret key. The output should be at least 32 characters long.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 16\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Supergraph Config Upgrade\nDESCRIPTION: Demonstrates how to upgrade all Supergraph configuration files in the current directory from v1 to v2.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade all Supergraph config files in the current directory from v1 to v2\n ddn codemod upgrade-supergraph-config-v1-to-v2 --dir .\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn auth print-promptql-secret-key in SASS Format\nDESCRIPTION: Available flags and options specific to the ddn auth print-promptql-secret-key command, including options for context selection, project specification, and CI mode.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for print-promptql-secret-key\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Command Options for 'ddn command list' in SASS Format\nDESCRIPTION: Lists the specific options available for the 'ddn command list' command, including context settings and help.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for list\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Additional options that are inherited from parent commands, including log level configuration, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining Schemas for Introspection - JSON\nDESCRIPTION: This snippet provides an example of how to specify an optional array of schema names within the configuration, which can be used during the introspection process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"PUBLIC\", \"OTHER_SCHEMA\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary Bash Auto-Completion for Hasura CLI\nDESCRIPTION: Command to enable auto-completion for the current Bash session.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsource <(ddn completion bash)\n```\n\n----------------------------------------\n\nTITLE: Legacy Hasura Project Configuration\nDESCRIPTION: Example of the main configuration file (hasura.yaml) in a legacy Hasura project. This defines the project name, subgraphs, and default supergraph manifest.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nproject: <PROJECT_NAME>\nsubgraphs:\n  app:\n    path: ./app\ndefaultSupergraphManifest: base\n```\n\n----------------------------------------\n\nTITLE: Options for DDN Connector Removal\nDESCRIPTION: These are the available options for the 'ddn connector remove' command. They allow for customization of the removal process, including specifying context, target environment files, and compose file modifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                                Disables the use of context\n    --connector string                  Path to Connector YAML config file\n    --connector-link string             DataConnectorLink corresponding to the Connector\n-c, --context string                    Name of the context to use. (default <current_context>)\n-h, --help                              help for remove\n    --remove-from-compose-file string   The compose file to include the generated connector compose file\n    --subgraph string                   SubgraphConfig file to remove the Connector from\n    --target-env-file stringArray       Paths to the .env files\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TypeScript Express Plugin\nDESCRIPTION: Command to install the required npm packages for developing an Express-based plugin with TypeScript.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm install express && npm install --save-dev typescript @types/node @types/express ts-node-dev\n```\n\n----------------------------------------\n\nTITLE: JSON Response for File Content Query\nDESCRIPTION: Example JSON response showing the text content retrieved from the uploaded file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"downloadStorageObjectAsText\": {\n      \"data\": \"This is a sample text file.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Artist SQL Mutation in PostgreSQL\nDESCRIPTION: This SQL snippet inserts a new record into the Artist table and returns the new record. It calculates the new ArtistId as one more than the current highest value. It uses the RETURNING * clause to fetch all columns of the inserted row. There are no additional dependencies.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO public.\"Artist\" VALUES (\n  ( SELECT \"ArtistId\" + 1\n    FROM \"Artist\"\n    ORDER BY \"ArtistId\" DESC\n    LIMIT 1\n  ),\n  {{name}}\n)\nRETURNING *\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Headers Configuration\nDESCRIPTION: Specifies the structure for HTTP header configuration including additional headers and forward header lists.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `additional` | [HttpHeaders] / null | false | Additional headers to be sent with the request. |\n| `forward` | [string] | false | Headers to be forwarded from the incoming request. |\n```\n\n----------------------------------------\n\nTITLE: Response Format for Single Relationship Include\nDESCRIPTION: Example JSON response when including a single relationship (posts) in a users query. It shows the main data array with user information and an included array containing the related posts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"User\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\"\n      },\n      \"relationships\": {\n        \"posts\": {\n          \"data\": [\n            { \"type\": \"Post\", \"id\": \"1\" },\n            { \"type\": \"Post\", \"id\": \"2\" }\n          ]\n        }\n      }\n    }\n  ],\n  \"included\": [\n    {\n      \"type\": \"Post\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"First Post\",\n        \"content\": \"Hello world!\"\n      }\n    },\n    {\n      \"type\": \"Post\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"Second Post\",\n        \"content\": \"Another post\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File System as Storage Provider - YAML\nDESCRIPTION: Defines a configuration for using a local file system as a storage provider. It sets the default directory for file management and indicates allowed directories but currently, only the mounted volume is writable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/storage/configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - id: fs\n    type: fs\n    defaultDirectory:\n      value: /home/nonroot/data\n    # allowedDirectories:\n    #   - /data\n    #   - /foo/bar\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph without Rebuilding Connectors - Shell\nDESCRIPTION: This command allows teams to build their supergraph, skipping the connector build step to use existing URLs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create --no-build-connectors\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Posts Query in Hasura DDN\nDESCRIPTION: This JSON snippet shows the expected response format when querying posts. It includes an array of post objects, each containing id, title, and content fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\"\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Query in GraphQL\nDESCRIPTION: Demonstrates how to use the 'hello' function as a GraphQL query in the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/1-add-custom-logic.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery HelloQuery {\n  hello(name: \"Hasura\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using ddn context unset Command Syntax\nDESCRIPTION: The basic syntax for the ddn context unset command, showing the allowed keys that can be unset including subgraph, localEnvFile, cloudEnvFile, selfHostedDataPlane, noBuildConnectors, project, and supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context unset <key> (Allowed keys: subgraph, localEnvFile, cloudEnvFile, selfHostedDataPlane, noBuildConnectors, project, supergraph) [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Available Resources\nDESCRIPTION: Command to display the available resources and their status in the MongoDB connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\n----------------------------------------\n\nTITLE: Engine Directory Structure in Bash\nDESCRIPTION: A bash tree representation showing the structure of the 'engine' directory which contains files required for the Hasura v3 engine container.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n├── .env.engine\n├── auth_config.json\n├── metadata.json\n└── open_dd.json\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Table as Hasura DDN Model\nDESCRIPTION: Track the MySQL 'users' table as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_mysql \"mydb.users\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Supergraph Prune Command in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn supergraph prune' command. They include setting the log level, disabling prompts, specifying output format, and setting a timeout for requests.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_prune.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Project Init Command Syntax\nDESCRIPTION: The basic command syntax for initializing a DDN project, allowing for an optional project name parameter and additional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project init [project-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI Auto-Completion for zsh on macOS\nDESCRIPTION: Command to set up permanent auto-completion for Hasura CLI in zsh on macOS systems.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\nddn completion zsh > $(brew --prefix)/share/zsh/site-functions/_ddn\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Operation Model\nDESCRIPTION: Command to add a new operation model to the MongoDB connector, which defines how the native operation will be executed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn command add <connector_name> <operation_name>\n```\n\n----------------------------------------\n\nTITLE: Executing the ddn model show Command in Bash\nDESCRIPTION: The basic syntax for the 'ddn model show' command, which takes a model name as an argument and optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model show <model-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Showing Available Resources\nDESCRIPTION: Command to display the tables and resources available in the Oracle connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_oracle\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Supergraph Config Upgrade\nDESCRIPTION: Shows the basic command syntax for upgrading Supergraph configuration files from v1 to v2 using the DDN CLI codemod command. Requires specifying the project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-supergraph-config-v1-to-v2 --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing Player Component in MDX\nDESCRIPTION: Example of importing the Player component in an MDX file for video playback.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/images.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Player from '@site/src/components/Player';\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI for Hasura DDN\nDESCRIPTION: Command to authenticate the Hasura DDN CLI, which launches a browser window for login to gain access to Hasura Cloud resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Posts Relationship Configuration\nDESCRIPTION: Hasura Metadata Language (HML) configuration for creating a relationship between Posts and Users models\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: user\n  sourceType: Posts\n  target:\n    model:\n      name: Users\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Introspect PostgreSQL Instance\nDESCRIPTION: This bash command uses the DDN CLI to introspect a PostgreSQL instance named 'my_pg'.  This command gathers schema and table information from the database to be used by DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Filtering String Values with Greater Than Operator\nDESCRIPTION: Example of using _gt operator for alphabetical filtering of author names\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsNameGreaterThanM {\n  authors(\n    where: {name: {_gt: \"M\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: Starts the local Hasura DDN Engine and Trino connector services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: CLI Completion Options\nDESCRIPTION: Available command-line options for the zsh completion command, including help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for zsh completion\n```\n\n----------------------------------------\n\nTITLE: Initializing a Local Hasura DDN Project\nDESCRIPTION: Command to initialize a local Hasura DDN project within the tutorial directory, creating the necessary scaffolding.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init ddn && cd ddn\n```\n\n----------------------------------------\n\nTITLE: Showing Available Resources\nDESCRIPTION: Command to display available resources and their status\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_graphql\n```\n\n----------------------------------------\n\nTITLE: Inserting Seed Data into Snowflake Users Table\nDESCRIPTION: SQL commands to insert sample data into the 'users' table in Snowflake.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (name, age) VALUES ('Alice', 25);\nINSERT INTO users (name, age) VALUES ('Bob', 30);\nINSERT INTO users (name, age) VALUES ('Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: Command Synopsis for ddn command remove\nDESCRIPTION: The basic syntax for using the 'ddn command remove' command to remove Commands from local metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command remove <command-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the upgrade-model-v1-to-v2 Command in Bash\nDESCRIPTION: Examples demonstrating how to run the command on the current context, a specific supergraph, or a specific subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-model-v1-to-v2\n\n# Run on a specific supergraph\n ddn codemod upgrade-model-v1-to-v2 --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-model-v1-to-v2 --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying MongoDB Resources\nDESCRIPTION: Command to display all resources found during the introspection process of the MongoDB connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions Example - YAML\nDESCRIPTION: This YAML snippet illustrates how to configure aggregate functions associated with scalar types. The example demonstrates the configuration for the `bigint` scalar type, including functions like `APPROX_COUNT_DISTINCT`, `AVG`, `COUNT`, and others.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/sqlserver/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"aggregateFunctions\":\n  {\n    \"bigint\":\n      {\n        \"APPROX_COUNT_DISTINCT\": { \"returnType\": \"bigint\" },\n        \"AVG\": { \"returnType\": \"bigint\" },\n        \"COUNT\": { \"returnType\": \"int\" },\n        \"COUNT_BIG\": { \"returnType\": \"bigint\" },\n        \"MAX\": { \"returnType\": \"bigint\" },\n        \"MIN\": { \"returnType\": \"bigint\" },\n        \"STDEV\": { \"returnType\": \"float\" },\n        \"STDEVP\": { \"returnType\": \"float\" },\n        \"SUM\": { \"returnType\": \"bigint\" },\n        \"VAR\": { \"returnType\": \"float\" },\n        \"VARP\": { \"returnType\": \"float\" },\n      },\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering Azure API Server VNet Integration Preview Feature\nDESCRIPTION: This command registers the EnableAPIServerVnetIntegrationPreview feature flag in Azure. This is required for Hasura DDN deployment to properly integrate with Azure Kubernetes Service (AKS).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz feature register --namespace \"Microsoft.ContainerService\" --name \"EnableAPIServerVnetIntegrationPreview\"\n```\n\n----------------------------------------\n\nTITLE: Querying Launch Data\nDESCRIPTION: GraphQL query to fetch launch data including ID and mission name\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_LAUNCH_DATA {\n  launches {\n    id\n    missionName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Options for Schema Diff Command\nDESCRIPTION: This section lists various options available for the 'ddn supergraph build diff' command. Options include context management, project specification, and help flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for diff\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Defining DataConnectorName in Markdown\nDESCRIPTION: Defines the structure for a data connector name, which is represented as a string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n#### DataConnectorName {#command-dataconnectorname}\n\nThe name of a data connector.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Services with Hasura DDN CLI\nDESCRIPTION: This bash command builds a new supergraph and starts the Docker services for testing the implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local && ddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Start Docker Services\nDESCRIPTION: Launch the Docker services for the Hasura supergraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Completion Command Syntax\nDESCRIPTION: Basic syntax for the DDN completion command used to generate autocompletion scripts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn completion [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims for Admin Access in Hasura DDN\nDESCRIPTION: This JSON snippet shows how to format JWT claims to create an admin-level access token. It sets the default role to 'admin' and includes 'admin' in the allowed roles, enabling full access to the supergraph when the token is passed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/4-service-account.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"https://hasura.io/jwt/claims\": {\n    \"x-hasura-default-role\": \"admin\",\n    \"x-hasura-allowed-roles\": [\"admin\"],\n  }\n```\n\n----------------------------------------\n\nTITLE: Testing Translation Function with GraphQL\nDESCRIPTION: GraphQL query to test the simple translation function, translating 'Hello, world!' to Spanish.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery SimpleTranslationQuery {\n  translateText(content: \"Hello, world!\", targetLanguage: \"es\")\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn context get\nDESCRIPTION: Options specific to the 'ddn context get' command, including context selection and help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n```\n\n----------------------------------------\n\nTITLE: Introspecting Prometheus Server\nDESCRIPTION: Use the Hasura DDN CLI to introspect the Prometheus server and view available resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_prometheus\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_prometheus\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Placeholder in Hasura DDN\nDESCRIPTION: Command to create a new subgraph placeholder in the main project. This is the first step when merging two projects, where one will become a subgraph of the other.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn project subgraph create <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Updating Subgraph Configuration in YAML\nDESCRIPTION: Updates the subgraph name in the main subgraph configuration file. Located at <subgraph-name>/subgraph.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/rename-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: <new-subgraph-name>\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n  envMapping: ...\n```\n\n----------------------------------------\n\nTITLE: DDN Project Creation Inherited Options\nDESCRIPTION: Global options inherited from parent commands, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Response for User Data with Global ID Query\nDESCRIPTION: This JSON response snippet exemplifies output for a GraphQL query using Global IDs. Encoded in base64, the Global ID provides a unique and consistent identifier across the supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/global-ids.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"userById\": {\n      \"id\": \"eyJ2ZXJzaW9uIjoxLCJ0eXBlbmFtZSI6IlVzZXJzIiwiaWQiOnsidXNlcl9pZCI6IjEifX0=\",\n      \"user_id\": 1,\n      \"name\": \"Bob\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Availability Zone IDs\nDESCRIPTION: This Bash command lists available Availability Zone IDs for a specified AWS region.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-availability-zones \\\n--region <region> \\\n--output table \\\n--query \"AvailabilityZones[?State=='available'] | [].{ZoneName: ZoneName, ZoneId: ZoneId}\"\n```\n\n----------------------------------------\n\nTITLE: Removing Command in DDN CLI\nDESCRIPTION: This command removes a command and its associated metadata from the DDN configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn command remove <command_name>\n```\n\n----------------------------------------\n\nTITLE: DDN Model Update Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the model update command including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Updating All Commands with DDN CLI - Bash\nDESCRIPTION: This command updates all commands associated with the specified Node.js lambda connector. The input 'my_ts' specifies the connector, while the wildcard '*' indicates that all commands should be updated. This command is useful for bulk updates to the connector's commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_ts \"*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Elasticsearch Connector\nDESCRIPTION: Initializes a new Elasticsearch connector named 'my_es' in interactive mode, which will prompt for configuration values.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_es -i\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Markdown Tables in Docusaurus\nDESCRIPTION: Example of a simple markdown table with text-only content. This approach is suitable for basic tables without complex UI elements or column width requirements.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field             | Description                                                                                                                                                                                                                                                                                                                                                                              |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Region            | The region of the datacenter where your New Relic account stores its data. [Read more about regions on New Relic docs.](https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers)                                                                                                                                                      |\n| API Key           | API keys are unique to your organization. An API key is required by the New Relic API to submit metrics and events to New Relic. You can get the API key from [here](https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher) if you are in New Relic US region and [here](https://one.eu.newrelic.com/launcher/api-keys-ui.api-keys-launcher) if you're in New Relic EU region. |\n| Host              | The name of the originating host of the log and metrics.                                                                                                                                                                                                                                                                                                                                 |\n| Custom Attributes | Custom Attributes associated with your logs and metrics. A default source tag `hasura-cloud-metrics` is added to all exported logs and metrics. Attributes `project_id` and `project_name` are added to all exported metrics.                                                                                                                                                            |\n| Service Name      | The name of the application or service generating the log events.                                                                                                                                                                                                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Running the ddn doctor Command in Bash\nDESCRIPTION: The command syntax for running 'ddn doctor' in the terminal to check if dependencies are installed and running properly.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_doctor.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn doctor [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Users Table Schema\nDESCRIPTION: This JSON schema defines the structure for a 'users' table in BigQuery with user_id, name, and age fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"user_id\",\n    \"type\": \"INTEGER\",\n    \"mode\": \"REQUIRED\"\n  },\n  {\n    \"name\": \"name\",\n    \"type\": \"STRING\",\n    \"mode\": \"NULLABLE\"\n  },\n  {\n    \"name\": \"age\",\n    \"type\": \"INTEGER\",\n    \"mode\": \"NULLABLE\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Successful Update Response in JSON\nDESCRIPTION: This JSON response shows a successful update operation, indicating one affected row.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updatePostsById\": {\n      \"affectedRows\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Subgraph Build\nDESCRIPTION: Integrates subgraph changes into existing parent supergraph build\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph-name:build-version> --base-supergraph-version <parent-build-id>\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console\nDESCRIPTION: Launch the local Hasura DDN console for interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Script Execution Command\nDESCRIPTION: Command to execute a custom script defined in the context configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-context-v3.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn run my-custom-script\n```\n\n----------------------------------------\n\nTITLE: Available Command Options for enable-promptql\nDESCRIPTION: The list of command-specific options including CI mode, compose file specification, context selection, project directory, force execution, and subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                         Disables the use of context\n    --compose-file-path string   Path to the docker compose file used to run engine\n-c, --context string             Name of the context to use. (default <current_context>)\n    --dir string                 The Hasura project directory (default \".\")\n-f, --force                      Run the command without asking for confirmation\n-h, --help                       help for enable-promptql\n    --subgraph string            Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Command to authenticate the Hasura DDN CLI by launching a browser-based login flow.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for SupergraphBuild Deletion\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn supergraph build delete' command. They include log level settings, output format, and timeout configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited options for ddn subgraph delete command in SASS\nDESCRIPTION: List of options inherited from parent operations for the 'ddn subgraph delete' command, including their descriptions and default values.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Options inherited from parent commands including logging level configuration, prompt behavior, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Introspecting the connector:\nDESCRIPTION: This Bash command introspects the previously initialized connector 'my_go', allowing for inspection of its capabilities and configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_go\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in SASS Format\nDESCRIPTION: Global options that are inherited from parent commands and can be used with ddn auth print-promptql-secret-key, including log level configuration, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Deploying Supergraph with DDN CLI\nDESCRIPTION: Command for building and deploying a supergraph using the Hasura DDN CLI. This will create a new build of the supergraph using the cloud configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --supergraph ./supergraph.cloud.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Project Upgrade Command in Bash\nDESCRIPTION: The basic command syntax for upgrading a Hasura project directory from version 2 to version 3 using the DDN CLI. The --dir parameter is required to specify the project directory location.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-project-config-v2-to-v3 --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: List Running Docker Containers\nDESCRIPTION: Verify the status of running Docker containers\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Logical OR Operator Filtering Example in Hasura JSON:API\nDESCRIPTION: Shows an example of using the logical OR operator in filtering, allowing for alternative conditions. It filters articles based on rating or featured status.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/filters.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/default/Articles?filter={\"$or\":[{\"rating\":{\"$eq\":5}},{\"featured\":{\"$eq\":true}}]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Article\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"Top Article\",\n        \"rating\": 5,\n        \"featured\": false\n      }\n    },\n    {\n      \"type\": \"Article\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"Featured Content\",\n        \"rating\": 4,\n        \"featured\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .env.cloud with connector URLs\nDESCRIPTION: This step involves modifying the .env.cloud file to include proper URLs for remote connections to each connector deployed in the cloud. This ensures that the v3-engine can communicate correctly with the connectors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Updating All Commands with DDN CLI in Shell\nDESCRIPTION: This snippet updates all commands in a Python lambda connector using the DDN CLI. Utilizing the command 'ddn command update' with the connector name and an asterisk as parameters, it updates every command associated with the connector. Pre-introspection of the connector metadata is required.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_py \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Representations in Hasura Data Connector (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the 'typeRepresentations' option, which maps PostgreSQL types to their representations in the data connector schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n\"typeRepresentations\":\n  {\n    \"bit\": \"string\",\n    \"bool\": \"boolean\",\n    \"bpchar\": \"string\",\n    \"char\": \"string\",\n    \"date\": \"date\",\n    \"float4\": \"float32\",\n    \"float8\": \"float64\",\n    \"int2\": \"int16\",\n    \"int4\": \"int32\",\n    \"int8\": \"int64AsString\",\n    \"numeric\": \"bigDecimalAsString\",\n    \"text\": \"string\",\n    \"time\": \"time\",\n    \"timestamp\": \"timestamp\",\n    \"timestamptz\": \"timestamptz\",\n    \"timetz\": \"timetz\",\n    \"uuid\": \"uUID\",\n    \"varchar\": \"string\",\n  }\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options from Parent Commands\nDESCRIPTION: Global options available to all DDN CLI commands including completion commands. These control logging, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Token Location Configuration: Header (YAML)\nDESCRIPTION: This YAML snippet configures Hasura to extract the JWT from a custom header. The `type` is set to `Header`, and the `name` specifies the name of the header containing the JWT.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntokenLocation: \n  type: Header\n  name: header_name\n```\n\n----------------------------------------\n\nTITLE: Starting your services:\nDESCRIPTION: This Bash command starts the necessary Docker services for the development environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn supergraph build get in SASS\nDESCRIPTION: These options are inherited from parent operations and include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Introspecting MySQL Database\nDESCRIPTION: Use the Hasura DDN CLI to introspect the MySQL database and show available resources.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_mysql\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_mysql\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Posts Table\nDESCRIPTION: SQL command to create a 'posts' table in Snowflake with a foreign key reference to the 'users' table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE posts (\n  id INT AUTOINCREMENT PRIMARY KEY,\n  user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  created_at TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()\n);\n\nINSERT INTO posts (user_id, title, content) VALUES\n  (1, 'My First Post', 'This is Alice''s first post.'),\n  (1, 'Another Post', 'Alice writes again!'),\n  (2, 'Bob''s Post', 'Bob shares his thoughts.'),\n  (3, 'Hello World', 'Charlie joins the conversation.');\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose for Prometheus\nDESCRIPTION: Create a Docker Compose file for setting up a local Prometheus instance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntouch app/connector/my_prometheus/compose.prometheus.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    command:\n      - \"--config.file=/etc/prometheus/prometheus.yml\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Commands\nDESCRIPTION: Shows the options inherited from parent operations, including log level configuration, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn subgraph build get Command in SASS\nDESCRIPTION: This snippet lists the available options for the 'ddn subgraph build get' command. It includes flags for CI mode, context selection, help, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Using ddn context get Command Syntax\nDESCRIPTION: The basic syntax for retrieving values from the context, specifying which keys are allowed to be retrieved.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get <key> (Allowed keys: cloudEnvFile, selfHostedDataPlane, noBuildConnectors, project, supergraph, subgraph, localEnvFile) [flags]\n```\n\n----------------------------------------\n\nTITLE: Running the ddn connector-link update Command in Bash\nDESCRIPTION: The basic syntax for the 'ddn connector-link update' command which fetches NDC details from the Connector and updates the DataConnectorLink.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link update <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project on Hasura DDN\nDESCRIPTION: This snippet initializes a new project on Hasura DDN using the command line interface. It sets up subgraphs and an environment file for the project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/deploy-to-ddn.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Running Local DDN Services\nDESCRIPTION: Starts the local Hasura DDN Engine and associated connectors using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File for MongoDB\nDESCRIPTION: Command to create a Docker Compose file for the MongoDB service.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntouch app/connector/my_mongo/compose.mongo.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Parent Project with Git\nDESCRIPTION: Creates a new parent project directory and initializes it as a git repository\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init <parent-project> && cd <parent-project> && git init\n```\n\n----------------------------------------\n\nTITLE: Legacy Project Hasura Configuration\nDESCRIPTION: Example of the basic Hasura project configuration file format\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\n```\n\n----------------------------------------\n\nTITLE: Invalid Object Type Field Type Mapping in PostgreSQL Example\nDESCRIPTION: Example of an error case where a PostgreSQL INTEGER column is incorrectly mapped to a String type in an ObjectType definition. This validation is enabled for projects with compatibility date of 2025-03-11 or later.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"User\",\n    \"fields\": [\n      {\n        \"name\": \"age\",\n        \"type\": \"String!\" // Error: PostgreSQL column is INTEGER but object type defines it as String\n      }\n    ],\n    \"dataConnectorTypeMapping\": [\n      {\n        \"dataConnectorName\": \"postgres\",\n        \"dataConnectorObjectType\": \"users\",\n        \"fieldMapping\": {\n          \"age\": {\n            \"column\": {\n              \"name\": \"age\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build with Latest Subgraph in Hasura DDN\nDESCRIPTION: Creates a new supergraph build that incorporates the latest 'customers' subgraph build. This step integrates the subgraph changes into the overall API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create --subgraph-version customers:<build-version> --base-supergraph-version <supergraph-build-id>\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Project\nDESCRIPTION: Create a local build of the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Getting Subgraph Builds\nDESCRIPTION: Lists available builds of subgraphs\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build get\n```\n\n----------------------------------------\n\nTITLE: Delete Native Query using DDN CLI\nDESCRIPTION: This shell command deletes a native query from the configuration using the DDN CLI.  The `<native-query-name>` placeholder must be replaced with the actual name of the query to be deleted.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_connector/connector.yaml \\\n  -- native-query delete <native-query-name>\n```\n\n----------------------------------------\n\nTITLE: Viewing Context Command Options in Hasura DDN CLI (sass)\nDESCRIPTION: Shows the available options for the 'ddn context' command, which includes a help flag to display command usage information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for context\n```\n\n----------------------------------------\n\nTITLE: DDN Auth Logout Example Usage\nDESCRIPTION: Example showing how to execute a basic logout from the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_logout.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Logout from DDN CLI\n ddn auth logout\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options for DDN CLI\nDESCRIPTION: Global options inherited from parent commands that can be used with the upgrade-project-config-v2-to-v3 command, including logging, output format, and timeout configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Remove DataConnectorLink Example Usage\nDESCRIPTION: Example showing how to remove a DataConnectorLink named 'mydb' from a Subgraph located at './app/subgraph.yaml'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove a DataConnectorLink from the Subgraph \"app\"\n ddn connector-link remove mydb --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Elasticsearch Username\nDESCRIPTION: Username credential for authenticating with the Elasticsearch instance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nelastic\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration - TOML\nDESCRIPTION: TOML configuration for Cloudflare Wrangler including tracing settings\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n...\n[vars]\nOTEL_EXPORTER_OTLP_ENDPOINT = \"https://gateway.otlp.hasura.io:443/v1/traces\"\nOTEL_EXPORTER_PAT = \"<PAT>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Cloud Project\nDESCRIPTION: Creates a new cloud project using the DDN CLI with the default context. Updates the .hasura/context.yaml file with new project details and generates subgraphs including billing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Example Usage for DDN Project Upgrade in Bash\nDESCRIPTION: An example showing how to upgrade a Hasura project in the current directory from version 2 to version 3 using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade project in the current directory from v2 to v3\n ddn codemod upgrade-project-config-v2-to-v3 --dir .\n```\n\n----------------------------------------\n\nTITLE: Creating New Hasura Project\nDESCRIPTION: Command to initialize a new Hasura DDN project and navigate to its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-sqlserver.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Bash Completion Options\nDESCRIPTION: Available options specific to the bash completion command. The -h or --help flag displays help information for bash completion.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for bash completion\n```\n\n----------------------------------------\n\nTITLE: Setting ModelPermissions for Row-Level Security\nDESCRIPTION: This example shows how to configure ModelPermissions for row-level security on the Orders model. It allows admin role to access all rows while restricting user role to only access rows where the userId matches their JWT session variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Orders\n  permissions:\n    - role: admin\n      select:\n        filter: null\n        allowSubscriptions: true\n# highlight-start\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: userId\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n# highlight-end\n```\n\n----------------------------------------\n\nTITLE: Running Connector Docker Container\nDESCRIPTION: Starts a connector container with required environment variables and port mapping\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -p 9758:8080 \\\n  -e CONNECTION_URI=\"<your_database_connection_uri>\" \\\n  -e HASURA_SERVICE_TOKEN_SECRET=\"<your_service_token_secret>\" \\\n  -e OTEL_EXPORTER_OTLP_ENDPOINT=\"<your_otlp_collector_endpoint>\" \\\n  -e OTEL_SERVICE_NAME=\"<subgraph_name>_<my_connector>\" \\\n  --add-host=local.hasura.dev:host-gateway \\\n  my-connector\n```\n\n----------------------------------------\n\nTITLE: DDN Version Command Options in SASS\nDESCRIPTION: This snippet shows the available option for the 'ddn version' command. It includes the help flag for displaying command usage information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_version.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Starting Local Services\nDESCRIPTION: Command to start local Hasura DDN Engine and GraphQL connector\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL and Adminer with Docker Compose\nDESCRIPTION: Command to start a local PostgreSQL database and Adminer web interface using Docker Compose with the configuration file generated by the connector initialization.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_pg/compose.postgres-adminer.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic (TypeScript)\nDESCRIPTION: Implements a 'shoutName' function in TypeScript that converts a name to uppercase.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @readonly\n */\nexport function shoutName(name: string) {\n  return `${name.toUpperCase()}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands in SASS Format\nDESCRIPTION: Options inherited from parent commands, including log level configuration, prompt settings, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Sample Response from MongoDB Insert Mutation\nDESCRIPTION: Expected JSON response from the insertUser mutation showing successful insertion with operation count.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertUser\": {\n      \"ok\": 1,\n      \"n\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing ddn supergraph build get Command in Bash\nDESCRIPTION: This command is used to list SupergraphBuilds or get details of a specific one. It can be used with or without a specific supergraph-build-version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build get [supergraph-build-version] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Up DDN CLI Autocompletions Permanently on Linux\nDESCRIPTION: This command generates and saves the DDN CLI autocompletion script to the system-wide bash completion directory on Linux. This setup will make the completions available for all new shell sessions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nddn completion bash > /etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Starting GraphQL Engine with Docker\nDESCRIPTION: This command initiates the Hasura GraphQL engine along with any connectors and observability tools as specified in `.hasura/context.yaml`. The `ddn` CLI tool and Docker must be installed for this command to run. Upon execution, it reads the `docker-start` script and starts necessary services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating Local Build in DDN\nDESCRIPTION: Builds the project locally to prepare for running services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DDN Context Command Example\nDESCRIPTION: Example showing how to get the name and contents of current context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get name and contents of current context\n ddn context get-current-context\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variables setup for the RESTified endpoints plugin including URL and authentication key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRESTIFIED_ENDPOINTS_URL=\"http://local.hasura.dev:8787\"\nM_AUTH_KEY=\"your-strong-m-auth-key\"\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types for DuckDB Collections\nDESCRIPTION: Detailed specification of collection structure, including field names, types, and descriptions. This provides type information for each collection in the database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/duckdb/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"object_types\": {\n    \"posts\": {\n      \"fields\": {\n        \"id\": {\n          \"type\": {\n            \"type\": \"nullable\",\n            \"underlying_type\": {\n              \"type\": \"named\",\n              \"name\": \"Int\"\n            }\n          },\n          \"description\": \"No description available\"\n        },\n        \"title\": {\n          \"type\": {\n            \"type\": \"nullable\",\n            \"underlying_type\": {\n              \"type\": \"named\",\n              \"name\": \"String\"\n            }\n          },\n          \"description\": \"No description available\"\n        }\n      },\n      \"description\": \"No description available\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Elasticsearch Query in Hasura DDN\nDESCRIPTION: This JSON object represents the response structure returned by the GraphQL query to the 'transactions' model, showing multiple transaction records with their details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"transactions\": [\n      {\n        \"customerId\": \"CUST001\",\n        \"transactionId\": \"TXN001\",\n        \"transactionDetails\": [\n          {\n            \"currency\": \"USD\",\n            \"price\": 999.99\n          }\n        ]\n      },\n      {\n        \"customerId\": \"CUST002\",\n        \"transactionId\": \"TXN002\",\n        \"transactionDetails\": [\n          {\n            \"currency\": \"USD\",\n            \"price\": 599.99\n          }\n        ]\n      },\n      {\n        \"customerId\": \"CUST003\",\n        \"transactionId\": \"TXN003\",\n        \"transactionDetails\": [\n          {\n            \"currency\": \"USD\",\n            \"price\": 299.99\n          }\n        ]\n      },\n      {\n        \"customerId\": \"CUST004\",\n        \"transactionId\": \"TXN004\",\n        \"transactionDetails\": [\n          {\n            \"currency\": \"USD\",\n            \"price\": 199.99\n          }\n        ]\n      },\n      {\n        \"customerId\": \"CUST005\",\n        \"transactionId\": \"TXN005\",\n        \"transactionDetails\": [\n          {\n            \"currency\": \"USD\",\n            \"price\": 149.99\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph in Hasura DDN\nDESCRIPTION: Command to create a new build of the supergraph in Hasura DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/3-hash-passwords.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Building and Running Local Services\nDESCRIPTION: Commands to build and start local Hasura DDN services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Command Options in SASS Format\nDESCRIPTION: List of available options specific to the upgrade-object-boolean-expression-types command, including CI mode, context selection, help, and path specifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-object-boolean-expression-types\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Running Aggregate Upgrade on Specific Config Files\nDESCRIPTION: Examples of running the aggregate upgrade codemod against specific supergraph or subgraph configuration files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/deprecated-metadata-upgrades.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-aggregate --supergraph ./supergraph.cloud.yaml\nddn codemod upgrade-graphqlconfig-aggregate --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project\nDESCRIPTION: Command to create and navigate to a new Hasura DDN project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn supergraph build apply Command in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn supergraph build apply' command, including log level, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Request Configuration\nDESCRIPTION: Specifies the configuration options for raw GraphQL requests including query and variables settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `query` | [LeafConfig] / null | false | Configuration for the query. |\n| `variables` | [LeafConfig] / null | false | Configuration for the variables. |\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Completion\nDESCRIPTION: Enables shell completion functionality in zsh by adding the compinit command to the zsh configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Shows the options inherited from parent commands, including logging configuration, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Base CLI Options for DDN Connector Link\nDESCRIPTION: Shows the basic command line options available for the connector-link command\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for connector-link\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Format Example\nDESCRIPTION: HTTP blocks must use First-Letter-Capitalized headers and be Postman-compatible. Shows recommended capitalization pattern.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/code-blocks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nContent-Type: application/json\\nAuthorization: Bearer token\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project\nDESCRIPTION: Create a new local Hasura DDN project and navigate to its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-prometheus.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available command-specific options for the upgrade-graphqlconfig-aggregate command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-graphqlconfig-aggregate\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Operations in SASS\nDESCRIPTION: This code block shows the options inherited from parent operations, including log level, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Project CLI Inherited Options\nDESCRIPTION: Common options inherited from parent commands including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example of Applying SupergraphBuild to a Specific Project in Bash\nDESCRIPTION: This example demonstrates how to apply a SupergraphBuild to a project named 'pet-lion-2649' using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <supergraph-build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: JWT Payload with Stringified JSON Claims Format for Hasura DDN\nDESCRIPTION: Example JWT payload using stringified JSON format for Hasura claims. This format is used when claimsFormat is set to 'StringifiedJson' in the configuration, often needed for providers like AWS Cognito.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"claims.jwt.hasura.io\": \"{\\\"x-hasura-allowed-roles\\\":[\\\"editor\\\",\\\"user\\\",\\\"mod\\\"],\\\"x-hasura-default-role\\\":\\\"user\\\",\\\"x-hasura-user-id\\\":\\\"1234567890\\\",\\\"x-hasura-org-id\\\":\\\"123\\\",\\\"x-hasura-custom\\\":\\\"custom-value\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Mutation to Connector Configuration in Shell\nDESCRIPTION: This command uses the PostgreSQL connector's plugin to add the native mutation to the connector's configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_pg/connector.yaml \\\n  -- \\\n  native-operation create \\\n  --operation-path native_operations/mutations/update_post_titles_by_age.sql \\\n  --kind mutation\n```\n\n----------------------------------------\n\nTITLE: Introspecting the connector with ddn\nDESCRIPTION: This command uses the ddn tool to introspect the 'my_python' connector. Introspection allows the tool to discover the capabilities and schema of the connector, making it usable within the Hasura environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_python\n```\n\n----------------------------------------\n\nTITLE: Setting Self-Hosted Engine URL Command Syntax\nDESCRIPTION: Basic command syntax for setting the engine URL in a self-hosted data plane project using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-self-hosted-engine-url <url> [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining FieldComparisonPredicate Structure in Markdown\nDESCRIPTION: Specifies the structure of a FieldComparisonPredicate used for filtering objects based on field values. It includes fields for the field name, operator, and value expression.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `field` | [FieldName](#commandpermissions-fieldname) | true | The field name of the object type of the model to compare. |\n| `operator` | [OperatorName](#commandpermissions-operatorname) | true | The name of the operator to use for comparison. |\n| `value` | [ValueExpression](#commandpermissions-valueexpression) | true | The value expression to compare against. |\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Example .env file configuration for setting the webhook URL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nAUTH_WEBHOOK_URL=http://auth_hook:3050/validate-request\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Update Command Options in SASS\nDESCRIPTION: This snippet lists the specific options available for the 'ddn update-cli' command, including help and version specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for update-cli\n    --version string   A specific version to install\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect a MongoDB instance named 'my_mongo'. Introspection analyzes the database structure and prepares it for use with DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Opening Local Hasura Console\nDESCRIPTION: Opens the Hasura console for local development, providing a UI for exploring and testing the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Create Supergraph Directory\nDESCRIPTION: Create a dedicated directory for hosting the Hasura supergraph project on the server\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /opt/hasura-supergraph\ncd /opt/hasura-supergraph\n```\n\n----------------------------------------\n\nTITLE: Installing Permanent fish Auto-Completion for Hasura CLI\nDESCRIPTION: Command to set up permanent auto-completion for Hasura CLI in the fish shell.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn completion fish > ~/.config/fish/completions/ddn.fish\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation and Setup Commands\nDESCRIPTION: Command line instructions for installing and configuring the plugin using Cloudflare Wrangler.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-cloudflare@latest restified-endpoints-plugin --template https://github.com/hasura/engine-plugin-restified-endpoint\ncd restified-endpoints-plugin\nnpm install\nnpm start\nddn supergraph build local\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent operations including log level configuration, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: JSON Formatting Example\nDESCRIPTION: JSON should use 2-space indentation and exclude comments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/code-blocks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"key\": \"value\",\\n  \"nested\": {\\n    \"field\": \"value\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DDN CLI Plugins Using the install Command\nDESCRIPTION: This command allows users to install plugins that extend the functionality of the DDN CLI. The command takes a plugin name as an argument and installs it from the index, adding it to the user's configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins install <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multiple Pre-Route Plugins Flow in Mermaid\nDESCRIPTION: This diagram shows the sequence of events when multiple pre-route plugins are configured, demonstrating how the engine handles requests based on path matching.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant RouteHandler as \"Route Handler\"\n    participant PreRouteHook1 as \"Pre-route Hook 1\"\n    participant PreRouteHook2 as \"Pre-route Hook 2\"\n\n    Client->>RouteHandler: Send Request\n    alt Path matches /v1/api/users/admin\n        RouteHandler->>PreRouteHook1: Forward to Pre-route Hook 1\n        PreRouteHook1-->>RouteHandler: Response from Hook 1\n        RouteHandler-->>Client: Return Response\n    else Path matches /v1/api/users/*\n        RouteHandler->>PreRouteHook2: Forward to Pre-route Hook 2\n        PreRouteHook2-->>RouteHandler: Response from Hook 2\n        RouteHandler-->>Client: Return Response\n    end\n```\n\n----------------------------------------\n\nTITLE: Running the upgrade-model-v1-to-v2 Command in Bash\nDESCRIPTION: Basic syntax for running the command to upgrade models from version v1 to v2 in the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-model-v1-to-v2 [flags]\n```\n\n----------------------------------------\n\nTITLE: Context Configuration Migration Command\nDESCRIPTION: Command to run the codemod for upgrading project context configuration from v2 to v3\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-context-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-context-v2-to-v3 --dir .\n```\n\n----------------------------------------\n\nTITLE: Schema Configuration for Trino Connector\nDESCRIPTION: Example of how to specify which database schemas to include in the introspection process, limiting the scope to specific schemas.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/trino/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"public\", \"other_schema\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Native Mutations in Shell\nDESCRIPTION: This shell command creates the necessary directory structure under the connector configuration to store SQL files for Native Mutations. There are no prerequisite dependencies other than shell access.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-mutations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p my_subgraph/connector/chinook_pg/native_operations/mutations/\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with subgraph creation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for File Upload\nDESCRIPTION: Example JSON response from the file upload mutation showing the file name and size.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"uploadStorageObjectAsText\": {\n      \"name\": \"sample.txt\",\n      \"size\": 27\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ConnectorBuild Logs Command Examples in Bash\nDESCRIPTION: Example commands demonstrating different ways to use the 'ddn connector build logs' command, including retrieving basic logs, following logs in real-time, specifying time durations, and accessing build-specific logs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get running deploy logs\n ddn connector build logs <connector-build-id>\n\n# Get running deploy logs and keep following\n ddn connector build logs <connector-build-id> --follow\n\n# Get running deploy logs and keep following since a specified time duration\n ddn connector build logs <connector-build-id> --follow --since 10m\n\n# Get build logs of a ConnectorBuild\n ddn connector build logs <connector-build-id> --build\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options inherited from parent commands that can be used with the ddn plugins list command. These include options for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Command Options for DDN Subgraph Build Apply\nDESCRIPTION: Lists the available command-specific options for the subgraph build apply command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                       Disables the use of context\n-c, --context string           Name of the context to use. (default <current_context>)\n-h, --help                     help for apply\n-p, --project string           DDN Project name\n    --self-hosted-data-plane   Is the data plane self hosted?\n```\n\n----------------------------------------\n\nTITLE: Creating New Project\nDESCRIPTION: Commands to create and navigate to a new Hasura DDN project\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: DDN CLI subgraph get command options in SASS\nDESCRIPTION: This code block lists the available options for the 'ddn project subgraph get' command, including flags for CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent operations, including logging configuration, output format settings, and timeout parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI Auto-Completion for Bash on macOS\nDESCRIPTION: Command to set up permanent auto-completion for Hasura CLI in Bash on macOS systems.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn completion bash > $(brew --prefix)/etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Login Command in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn auth login' command, including log level settings, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project\nDESCRIPTION: Creates a new local Hasura DDN project and changes to the project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Building and deploying a cloud connector with DDN CLI\nDESCRIPTION: Command to build and deploy a connector using the DDN CLI. The command requires specifying the path to the connector's configuration file in YAML format. Outputs URLs for the deployed connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/openAPI/_deployment-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_openapi/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Loading PowerShell Autocompletion for Current Session\nDESCRIPTION: Command to generate and load DDN CLI autocompletion for the current PowerShell session. This provides immediate access to command completion features.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_powershell.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nddn completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Setting Public API Mode in Hasura DDN CLI\nDESCRIPTION: Command to set the API access mode to public using the DDN CLI. Public mode allows access to everyone, with optional JWT or webhook authentication.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/private-vs-public.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-api-access-mode public\n```\n\n----------------------------------------\n\nTITLE: DDN Project Init Inherited Options\nDESCRIPTION: Options inherited from parent operations that can be used with the 'ddn project init' command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-specific options for subgraph creation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                   Disables the use of context\n-c, --context string       Name of the context to use. (default <current_context>)\n-d, --description string   (Optional) description of the subgraph\n-h, --help                 help for create\n-p, --project string       DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Product Type Definition in Apollo Subgraph\nDESCRIPTION: This GraphQL snippet defines a 'Product' type in an Apollo subgraph. It includes a directive '@key' indicating that the 'id' field is unique and used for entity resolution, demonstrating a type defined in a federated service.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product @key(fields: \"id\") {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt package for Python\nDESCRIPTION: Line to add to requirements.txt file to include the bcrypt package for the Python implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbcrypt==4.2.0\n```\n\n----------------------------------------\n\nTITLE: Command Options for DDN Project Upgrade\nDESCRIPTION: Available command-specific options for the upgrade-project-config-v2-to-v3 command, including the required directory parameter and help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for upgrade-project-config-v2-to-v3\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Source Resources in DDN\nDESCRIPTION: Command to show discovered resources from a data source after introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Creating a new build:\nDESCRIPTION: This Bash command builds the local supergraph, integrating various components of the system.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for CLI version utility\nDESCRIPTION: Shell command to create a .env file with the necessary environment variables for the CLI version update utility. It includes the GitHub API URL for the latest release and a placeholder for the GitHub token.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho -e 'V3_CLI_RELEASE_URL=\"https://api.github.com/repos/hasura/v3-cli-go/releases/latest\"\\nGH_CLI_VERSION_TOKEN=' > .env\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Environment File\nDESCRIPTION: Copies the existing .env file to a new .env.deployment file for deployment configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncp .env .env.deployment\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn subgraph build get Command in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn subgraph build get' command. It includes options for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Bucket Query\nDESCRIPTION: Example JSON response showing the available storage bucket corresponding to the configured local directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"storageBuckets\": [\n      {\n        \"name\": \"/home/nonroot/data\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram: Multiple Pre-Parse Plugins Sequence\nDESCRIPTION: Sequence diagram showing the execution flow when multiple pre-parse plugins are configured.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Initial as \"Initial Request\"\n    participant \"Pre-parse Hook 1\"\n    participant \"Pre-parse Hook 2\"\n    participant \"Query Parsing and Planning\"\n\n    Client ->> Initial: Request to engine\n    Initial ->> \"Pre-parse Hook 1\": Request\n    \"Pre-parse Hook 1\" ->> Initial: Response\n    Initial ->> \"Pre-parse Hook 2\": Request\n    \"Pre-parse Hook 2\" ->> Initial: Response\n    Initial ->> \"Query Parsing and Planning\": Continue\n    \"Query Parsing and Planning\" ->> Client: Response\n```\n\n----------------------------------------\n\nTITLE: DDN Plugins Command Options\nDESCRIPTION: Command line options specific to the 'ddn plugins' command, showing available flags for help.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for plugins\n```\n\n----------------------------------------\n\nTITLE: Building Connector on DDN\nDESCRIPTION: Command to build a connector on DDN using a specific configuration file. It includes options for specifying the environment file and project name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/independent-connector-deployment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector <subgraph-name>/connector/<connector-name>/connector.yaml \\\n  --env-file .env.cloud \\\n  --project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for upgrade-context-v2-to-v3\nDESCRIPTION: Lists the specific options available for the 'ddn codemod upgrade-context-v2-to-v3' command, including the required project directory parameter and help option.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for upgrade-context-v2-to-v3\n```\n\n----------------------------------------\n\nTITLE: Starting Local Engine for Hasura DDN\nDESCRIPTION: Command to run the local engine for Hasura DDN, which is part of the process to verify that traces are working correctly after updating the environment variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/fix-traces-env-var.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Context Command Options\nDESCRIPTION: Available command-specific options for the get-current-context command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for get-current-context\n```\n\n----------------------------------------\n\nTITLE: Updating Engine Compose File in YAML\nDESCRIPTION: YAML configuration to update the engine compose file to use the new build directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  ...\n  engine:\n    ...\n    build:\n      context: engine\n      dockerfile_inline: |-\n        FROM ghcr.io/hasura/v3-engine\n        # update to the following\n        COPY ./build /md/\n    develop:\n      watch:\n        - action: sync+restart\n          # update to the following\n          path: engine/build\n          target: /md/\n    env_file:\n      - engine/.env.engine\n    ...\n  ...\n```\n\n----------------------------------------\n\nTITLE: Querying the expanded table with the transformed name:\nDESCRIPTION: This GraphQL query accesses the 'shoutName' function, passing a name as an argument and expecting a transformed uppercase name as the result.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ShoutTheName {\n  shoutName(name: \"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Parent Options\nDESCRIPTION: Inherited options from parent operations that can be used with the connector init command, including logging and timeout configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI for Hasura DDN\nDESCRIPTION: Command to authenticate the Hasura DDN CLI by launching a browser-based login flow\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Common command line options inherited from parent commands that can be used with 'ddn plugins', including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Hasura CLI Auto-Completion to PowerShell Profile\nDESCRIPTION: Command to add to the PowerShell profile for enabling permanent auto-completion for Hasura CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nddn completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Supergraph Prune Command in Bash\nDESCRIPTION: This command removes unused metadata from the Supergraph. It can be run with various flags to customize its behavior, such as enabling dry-run mode or specifying a context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_prune.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph prune [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table with Foreign Key\nDESCRIPTION: SQL commands to create and populate a posts table with relationships to users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-sqlserver.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE posts (user_id int, post_id int primary key, title varchar(255), content varchar(255), FOREIGN KEY (user_id) REFERENCES users(user_id));\nGO\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO posts (user_id, post_id, title, content) VALUES (1, 1, 'My First Post', 'This is Alice''s first post.'), (1, 2, 'Another Post', 'Alice writes again!'), (2, 3, 'Bob''s Post', 'Bob shares his thoughts.'), (3, 4, 'Hello World', 'Charlie joins the conversation.');\nGO\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Common options available to all DDN CLI commands including log level control, output formatting, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Posts Model to Hasura DDN\nDESCRIPTION: Command to add the posts collection as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_mongo posts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role ARN from AWS CloudFormation Stack\nDESCRIPTION: This Bash command retrieves the Role ARN output from the Hasura Cloud BYOC CloudFormation stack.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks \\\n  --stack-name hasura-cloud-byoc \\\n  --query 'Stacks[0].Outputs[?OutputKey==`RoleArn`].OutputValue' \\\n  --output text\n```\n\n----------------------------------------\n\nTITLE: Access DDN Console Locally\nDESCRIPTION: This command opens the DDN console in local mode, allowing you to interact with the supergraph API and execute queries. `ddn console --local` starts the DDN console and connects it to the local supergraph, enabling you to explore the data and test queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn console --local\"\n```\n\n----------------------------------------\n\nTITLE: CommandSelect Structure Definition\nDESCRIPTION: JSON structure defining a CommandSelect operation that represents a select on the data connector's command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n{\n  \"type\": \"commandSelect\",\n  \"value\": {\n    \"commandName\": \"<CommandName>\",\n    \"queryRequest\": <NDCQueryRequest>,\n    \"ndcExplain\": <NDCExplain>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing New Hasura DDN Project\nDESCRIPTION: Creates a new local Hasura DDN project in the environments-example directory\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init environments-example && cd environments-example\n```\n\n----------------------------------------\n\nTITLE: Inherited DDN CLI Options\nDESCRIPTION: Options inherited from parent operations that can be used with the completion command. Includes log level control, prompt behavior, output format selection, and request timeout configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating a SubgraphBuild using DDN CLI in Bash\nDESCRIPTION: This command creates a SubgraphBuild on Hasura DDN. It allows specifying a subgraph configuration file, project name, and environment variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build create [flags]\n```\n\n----------------------------------------\n\nTITLE: Seeding Posts Table with Data\nDESCRIPTION: SQL command to insert multiple post records into the posts table using Oracle's INSERT ALL syntax.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT ALL\n  INTO posts (user_id, post_id, title, content) VALUES (1, 1, 'My First Post', 'This is Alice''s first post.')\n  INTO posts (user_id, post_id, title, content) VALUES (1, 2, 'Another Post', 'Alice writes again!')\n  INTO posts (user_id, post_id, title, content) VALUES (2, 3, 'Bob''s Post', 'Bob shares his thoughts.')\n  INTO posts (user_id, post_id, title, content) VALUES (3, 4, 'Hello World', 'Charlie joins the conversation.')\nSELECT 1 FROM DUAL;\n```\n\n----------------------------------------\n\nTITLE: Running a Script Using DDN CLI in Bash\nDESCRIPTION: This snippet demonstrates how to run a specific script defined in the project's context configuration using the DDN CLI. The command allows the user to pass a script name and optional flags as parameters. It is meant for executing predefined scripts in a project environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_run.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn run <script-name> [flags] [-- <args>]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run script `docker-start` defined in project's context config\n ddn run docker-start\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run script `docker-start` defined in project's context config in detached mode\n ddn run docker-start -- -d\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Connector\nDESCRIPTION: Command to initialize a new Qdrant connector with interactive prompts for configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_qdrant -i\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands in SASS\nDESCRIPTION: Options inherited from parent commands that can be used with the 'ddn connector plugin' command, including log level configuration, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Filtering Date Values with Equality Operator\nDESCRIPTION: Example of using _eq operator to filter articles by publication date\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/filters/comparison-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesByDate {\n  articles(\n    where: {published_on: {_eq: \"2017-05-26\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading DDN CLI Autocompletions in Current Bash Session\nDESCRIPTION: This command generates and loads the DDN CLI autocompletion script for the current bash shell session. The completions will only be available for the duration of the session.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nsource <(ddn completion bash)\n```\n\n----------------------------------------\n\nTITLE: Locating PowerShell Profile\nDESCRIPTION: Command to find the location of the PowerShell profile script.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$PROFILE\n```\n\n----------------------------------------\n\nTITLE: Stop and Restart Services for Update\nDESCRIPTION: Stop existing Docker containers and restart services after rebuilding the supergraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop $(docker ps -q)\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Open DDN Console\nDESCRIPTION: This bash command uses the DDN CLI to open the development console in local mode.  This allows developers to interact with the DDN supergraph and test queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Invalid Argument Type Mapping in PostgreSQL Function\nDESCRIPTION: Example of an error case where a PostgreSQL function expecting an INTEGER argument is incorrectly mapped to a String type in a Command definition. This validation is enabled for projects with compatibility date of 2025-03-11 or later.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Command\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"get_users_by_age\",\n    \"arguments\": [\n      {\n        \"name\": \"age\",\n        \"type\": \"String!\" // Error: PostgreSQL function expects INTEGER but argument is defined as String\n      }\n    ],\n    \"source\": {\n      \"dataConnectorName\": \"postgres\",\n      \"dataConnectorCommand\": {\n        \"function\": \"get_users_by_age\"\n      },\n      \"argumentMapping\": {\n        \"age\": \"age\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Current Session Completions\nDESCRIPTION: Loads DDN CLI completions for the current shell session using source command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nsource <(ddn completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Options for ddn supergraph build apply Command in SASS\nDESCRIPTION: These are the available options for the 'ddn supergraph build apply' command, including flags for CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                       Disables the use of context\n-c, --context string           Name of the context to use. (default <current_context>)\n-h, --help                     help for apply\n    --no-diff                  Do not do a GraphQL schema diff against the applied build\n-p, --project string           DDN Project name\n    --self-hosted-data-plane   Is the data plane self hosted?\n```\n\n----------------------------------------\n\nTITLE: Setting HASURA_DDN_PROJECT_DIRECTORY Environment Variable\nDESCRIPTION: Shows how to set the HASURA_DDN_PROJECT_DIRECTORY environment variable to specify the project directory containing the hasura.yaml file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_DDN_PROJECT_DIRECTORY=/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Initializing Subgraph for Other Teams - Shell\nDESCRIPTION: This snippet initializes the 'Products' team's project as a subgraph that will use the deployed connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init products-project\ncd products-project\n```\n\n----------------------------------------\n\nTITLE: Sample Query Response\nDESCRIPTION: Expected JSON response from the GraphQL query showing user data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"age\": 25\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"age\": 30\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Charlie\",\n        \"age\": 35\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration JSON\nDESCRIPTION: Authentication configuration for the Rate Limit Plugin specifying required headers.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/rate-limit/how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"hasura-m-auth\": \"your-auth-token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying JSON Patches in YAML\nDESCRIPTION: This YAML snippet demonstrates how to add JSON patches to API documentation files, allowing for alterations before or after conversion from OpenAPI to HTTP configuration. It includes specified paths and strategies for merging patches.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/http/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - file: openapi.yaml\n    spec: oas3\n    patchBefore:\n      - path: patch-before.yaml\n        strategy: merge\n    patchAfter:\n      - path: patch-after.yaml\n        strategy: json6902\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Command\nDESCRIPTION: Options inherited from the parent 'ddn' command that can be used with 'ddn doctor', including logging, output formatting, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_doctor.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Response from the GraphQL query\nDESCRIPTION: This JSON snippet shows the expected response from the GraphQL query when calling the 'shoutName' function with the name 'Alice'. It confirms that the function properly returns the transformed name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"shoutName\": \"ALICE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the function through GraphQL\nDESCRIPTION: This GraphQL query invokes the 'shoutName' function with the input 'Alice'.  It expects the function to return the uppercase version of the input.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ShoutTheName {\n  shoutName(name: \"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File for Trino and PostgreSQL\nDESCRIPTION: Sets up a Docker Compose file for running Trino and PostgreSQL services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntouch app/connector/my_trino/compose.trino.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postgres:\n    image: postgres:15\n    container_name: postgres\n    environment:\n      POSTGRES_USER: myuser\n      POSTGRES_PASSWORD: mypassword\n      POSTGRES_DB: mydb\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U myuser\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  trino:\n    image: trinodb/trino:latest\n    container_name: trino\n    depends_on:\n      postgres:\n        condition: service_healthy\n    ports:\n      - \"8080:8080\"\n    command: |\n      /bin/sh -c \"\n      mkdir -p /etc/trino/catalog &&\n      echo 'connector.name=postgresql' > /etc/trino/catalog/postgres.properties &&\n      echo 'connection-url=jdbc:postgresql://postgres:5432/mydb' >> /etc/trino/catalog/postgres.properties &&\n      echo 'connection-user=myuser' >> /etc/trino/catalog/postgres.properties &&\n      echo 'connection-password=mypassword' >> /etc/trino/catalog/postgres.properties &&\n      /usr/lib/trino/bin/run-trino\n      \"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/v1/info\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  pgdata:\n```\n\n----------------------------------------\n\nTITLE: Options for ddn project delete Command\nDESCRIPTION: These are the specific options available for the 'ddn project delete' command. The -f flag forces deletion without confirmation, while -h provides help information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-f, --force   Delete project without confirmation\n-h, --help    help for delete\n```\n\n----------------------------------------\n\nTITLE: Creating Local Hasura DDN Build\nDESCRIPTION: Creates a local build of the Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Defining HeadersResponse Type in Go\nDESCRIPTION: Creates a helper type 'HeadersResponse' in Go to include both headers and the actual response value from a function.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/7-http-header-forwarding.mdx#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype HeadersResponse[T any] struct {\n  Headers  map[string]string `json:\"headers\"`\n  Response T                 `json:\"response\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Remove DataConnectorLink Basic Command Syntax\nDESCRIPTION: Basic command syntax for removing a DataConnectorLink from a Subgraph using the DDN CLI. The command requires the connector-link-name as an argument and supports additional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link remove <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Seeding Users Table with Data\nDESCRIPTION: SQL command to insert multiple user records into the users table using Oracle's INSERT ALL syntax.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT ALL\n   INTO users (user_id, name, age) VALUES (1, 'Alice', 25)\n   INTO users (user_id, name, age) VALUES (2, 'Bob', 30)\n   INTO users (user_id, name, age) VALUES (3, 'Charlie', 35)\nSELECT 1 FROM DUAL;\n```\n\n----------------------------------------\n\nTITLE: Querying Users in GraphQL\nDESCRIPTION: Executes a GraphQL query to fetch all users from the DuckDB database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Connector Build Commands\nDESCRIPTION: Options inherited from parent commands that can be used with the 'ddn connector build delete' command, including logging, output formatting, and timeout configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Connector - Shell\nDESCRIPTION: This command builds and deploys the PostgreSQL connector using the specified configurations and environment file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn connector build create --connector ./app/connector/my_postgres/connector.yaml --target-env-file ./.env.cloud  --target-subgraph ./app/subgraph.yaml --target-connector-link my_postgres\n```\n\n----------------------------------------\n\nTITLE: Creating a directory structure for a new connector\nDESCRIPTION: This shows the required directory structure for organizing connector files within the `registry` directory of the `ndc-hub` repository. Replace `[namespace]` with the organization's namespace and `[connector-name]` with the connector's name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"registry/\\n  └── [namespace]/\\n      └── [connector-name]/\"\n```\n\n----------------------------------------\n\nTITLE: Logging in with the DDN CLI\nDESCRIPTION: This command authenticates the user using the DDN CLI tool. It establishes a session for further DDN operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Connector (Go)\nDESCRIPTION: Initializes a Go lambda connector in the DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn connector init my_go -i\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Engine and PostgreSQL Connector\nDESCRIPTION: Starts the local Hasura DDN Engine and PostgreSQL connector for testing. This allows you to run and interact with your API locally.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscriptions in Existing DDN Project\nDESCRIPTION: CLI command to update local metadata files and add subscription configurations to an existing Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/subscriptions/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Fish Completion Command Options\nDESCRIPTION: Available options specific to the 'ddn completion fish' command. Currently only includes help flag for displaying usage information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for fish completion\n```\n\n----------------------------------------\n\nTITLE: Example response\nDESCRIPTION: This JSON represents the expected response from the `myCustomCode` query. The `data` field contains the result of the function, which is \"My output\".\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"data\\\": {\n    \\\"myCustomCode\\\": \\\"My output\\\"\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram: Pre-route Plugin Flow\nDESCRIPTION: Flowchart illustrating the routing process for pre-route plugins handling various HTTP endpoints.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/introduction.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph RL\n    Client[Client] -->|\"Request (/*)\"|Route_Handler[\"Route handler\"]\n    Route_Handler -->|Response| Client\n\n    subgraph DDN Engine\n        Route_Handler\n    end\n\n    Pre_Route_Hooks[\"Pre-route hooks\"] <-->|Handle Request| Route_Handler[\"Route handler\"]\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Basic Command Syntax\nDESCRIPTION: Basic command syntax for using the DDN CLI with flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Context Config File in YAML for Hasura DDN\nDESCRIPTION: This snippet shows how to remove the subgraph entry from the context config file (.hasura/context.yaml). The highlighted line represents the subgraph configuration that needs to be removed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/remove-subgraph.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default:\n      supergraph: ../supergraph.yaml\n      #highlight-start\n      subgraph: ../<subgraph-name>/subgraph.yaml\n      #highlight-end\n      ...\n```\n\n----------------------------------------\n\nTITLE: Clone Project Repository\nDESCRIPTION: Alternative method to obtain project files by cloning a git repository\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone your-repository-http-url .\n```\n\n----------------------------------------\n\nTITLE: Copy Supergraph Project Files via rsync\nDESCRIPTION: Transfer local supergraph project files to the remote server using rsync\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrsync -avz --progress ./ <your-server-username>@<your-server-ip>:/opt/hasura-supergraph/\n```\n\n----------------------------------------\n\nTITLE: Recursive Object Types with Infinite Recursion\nDESCRIPTION: Example of an error case where two object types create an infinite recursion through non-nullable field references to each other. This validation is enabled for projects with compatibility date of 2025-02-20 or later.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"Person\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"Int!\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"String!\"\n      },\n      {\n        \"name\": \"bestFriend\",\n        \"type\": \"Friend!\"  // Non-nullable reference to Friend type\n      }\n    ]\n  }\n},\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"Friend\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"Int!\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"String!\"\n      },\n      {\n        \"name\": \"bestFriend\",\n        \"type\": \"Person!\"  // Non-nullable reference back to Person type\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Configuration in YAML\nDESCRIPTION: Updates the subgraph reference in connector configuration files. Located at <subgraph-name>/connector/<connector-name>/connector.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/rename-subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: <connector-name>\n  subgraph: <new-subgraph-name>\n  source: hasura/<connector-type>\n  context: .\n  envMapping: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Response for Unauthenticated Requests in Hasura DDN\nDESCRIPTION: Example of a webhook response to Hasura DDN for unauthenticated (public) requests. The response includes the X-Hasura-Role header set to 'public'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/special-roles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-Role\": \"public\",\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Command to authenticate the Hasura DDN CLI by launching a browser login window.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-sqlserver.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Reference-Style Links\nDESCRIPTION: Example of using reference-style links in Markdown to avoid repetition and improve maintainability. Link references are defined at the end of the document and can be reused throughout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Section one\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n## Section two\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n<!-- Shared Link Variables -->\n\n[metadata-create-action]: /api-reference/metadata-api/actions.mdx#metadata-create-action\n[metadata-update-action]: /api-reference/metadata-api/actions.mdx#metadata-update-action\n[requesttransformation]: /api-reference/syntax-defs.mdx#requesttransformation\n```\n\n----------------------------------------\n\nTITLE: Building and Running Local Environment\nDESCRIPTION: Commands for building locally and starting the DDN Engine\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection String\nDESCRIPTION: Sample PostgreSQL database connection URI for the tutorial\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://read_only_user:readonlyuser@35.236.11.122:5432/v3-docs-sample-app\n```\n\n----------------------------------------\n\nTITLE: Supergraph Build and Deploy\nDESCRIPTION: Command to build and deploy the supergraph to the data plane.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Legacy Connector Manifest with Environment Variable Reference\nDESCRIPTION: Example of a ConnectorManifest that references environment variables in a legacy Hasura project. This shows how to access environment variables using valueFromEnv in metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ConnectorManifest\nversion: v1\nspec:\n  supergraphManifests:\n    - base\ndefinition:\n  name: app_connector\n  type: cloud\n  connector:\n    type: hub\n    name: <CONNECTOR_NAME>\n  deployments:\n    - context: .\n      env:\n        CONNECTION_URI:\n          #highlight-start\n          valueFromEnv: APP_CONNECTOR_CONNECTION_URI\n#highlight-end\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Operations\nDESCRIPTION: This snippet lists options that are inherited from parent operations. It includes log level settings, prompt configurations, output formats, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data\nDESCRIPTION: GraphQL mutation to create a new post\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation INSERT_SINGLE_POST {\n  createPost(body: { body: \"This is a new post!\", title: \"New Post\" }) {\n    id\n    title\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createPost\": {\n      \"id\": 101,\n      \"title\": \"New Post\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ddn console Command Options\nDESCRIPTION: Lists the specific options available for the ddn console command, including setting a specific build version, getting help, opening in local development mode, specifying a project, and setting a local engine URL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --build-version string   SupergraphBuild version\n-h, --help                   help for console\n    --local                  Open the local dev console\n-p, --project string         DDN Project name\n    --url string             Local engine url\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Version Command in Bash\nDESCRIPTION: This command prints the current version of the DDN CLI. It can be used with optional flags to customize the output or get help.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_version.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn version [flags]\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Creates a new local Hasura DDN project and changes into the project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-trino.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph Metadata\nDESCRIPTION: Generates JSON configuration files for the project using the deployment context\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that can be used with upgrade-auth-config-to-v3 command, inherited from parent commands, including logging, output formatting, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn subgraph build get Command in Bash\nDESCRIPTION: These examples demonstrate how to use the 'ddn subgraph build get' command. The first example shows how to view details of a specific SubgraphBuild, while the second example lists all SubgraphBuilds for a given project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# View details of a SubgraphBuild in the Project 'pet-lion-2649'\n ddn subgraph build get <subgraph-build-version> --project pet-lion-2649\n\n# List all SubgraphBuilds of a Project 'pet-lion-2649'\n ddn subgraph build get --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Updating Engine Compose File in YAML for Hasura DDN\nDESCRIPTION: This snippet demonstrates how to remove references to compose files of connectors in the deleted subgraph from the engine compose file (compose.yaml). The highlighted lines show the entries that need to be removed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/remove-subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  #highlight-start\n  - path: <subgraph-name>/connector/<connector-1>/compose.yaml\n  - path: <subgraph-name>/connector/<connector-2>/compose.yaml\n  #highlight-end\n  ...\nservices:\n  engine: ...\n```\n\n----------------------------------------\n\nTITLE: Examples of using ddn subgraph delete command in Bash\nDESCRIPTION: Examples demonstrating how to use the 'ddn subgraph delete' command with different options to remove subgraphs and associated metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Removes subgraph corresponding to the subgraph config file, its dependent metadata objects, and associated connectors from the local project,removes subgraph from the supergraph config set in context\n ddn subgraph delete --subgraph ./foo/subgraph.yaml\n\n# Removes subgraph corresponding to the subgraph config file, its dependent metadata objects, and associated connectors from the local project, removes subgraph from the supergraph config \"./supergraph.yaml\"\n ddn subgraph delete --subgraph app/subgraph.yaml --supergraph ./supergraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Building DDN Supergraph\nDESCRIPTION: Creates a new build of the DDN supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Azure Zones Output Example\nDESCRIPTION: Example JSON output showing the mapping between logical and physical zones in Azure's East US region.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"availabilityZoneMappings\": [\n      {\n        \"logicalZone\": \"1\",\n        \"physicalZone\": \"eastus-az1\"\n      },\n      {\n        \"logicalZone\": \"2\",\n        \"physicalZone\": \"eastus-az3\"\n      },\n      {\n        \"logicalZone\": \"3\",\n        \"physicalZone\": \"eastus-az2\"\n      }\n    ],\n    \"displayName\": \"East US\",\n    \"name\": \"eastus\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Build Supergraph Locally\nDESCRIPTION: Build the supergraph using the DDN CLI in local mode\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-Parse Lifecycle Plugin Hook Configuration\nDESCRIPTION: Specifies the structure and required fields for pre-parse stage lifecycle plugin hooks including URL configuration and request handling settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `pre` | `parse` | true |  |\n| `name` | string | true | The name of the lifecycle plugin hook. |\n| `url` | [EnvironmentValue] | true | The URL to access the lifecycle plugin hook. |\n| `config` | [LifecyclePreParsePluginHookConfig] | true | Configuration for the lifecycle plugin hook. |\n```\n\n----------------------------------------\n\nTITLE: Authentication Command Options in Sass\nDESCRIPTION: Defines the basic help option available for the auth command in the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for auth\n```\n\n----------------------------------------\n\nTITLE: Creating a new build\nDESCRIPTION: This command builds the supergraph locally using DDN. Building the supergraph compiles all the connector configurations and schemas into a unified GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn supergraph build local\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Connection URI with Direct Value in JSON\nDESCRIPTION: This snippet demonstrates how to specify the BigQuery connection URI directly in the configuration object. It includes the JDBC URL with project ID, OAuth type, service account email, and private key path.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/bigquery/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"value\": \"jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=your-project-id;OAuthType=0;OAuthServiceAcctEmail=your-service-account-email;OAuthPvtKeyPath=/path/to/key.json;\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura Engine Docker Container\nDESCRIPTION: Starts the Hasura engine container with required environment variables and port mapping\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -p 3280:3000 \\\n  -e AUTHN_CONFIG_PATH=/md/auth_config.json \\\n  -e ENABLE_CORS=true \\\n  -e ENABLE_SQL_INTERFACE=true \\\n  -e INTROSPECTION_METADATA_FILE=/md/metadata.json \\\n  -e METADATA_PATH=/md/open_dd.json \\\n  -e OTLP_ENDPOINT=<your_otlp_collector_endpoint> \\\n  --add-host=local.hasura.dev:host-gateway \\\n  my-engine\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Examples showing different ways to run the upgrade command, including using context, specific supergraph, or subgraph configurations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-graphqlconfig-aggregate\n\n# Run on a specific supergraph\n ddn codemod upgrade-graphqlconfig-aggregate --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-graphqlconfig-aggregate --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Queries in DDN ClickHouse Connector\nDESCRIPTION: This command creates a new directory structure to store native queries for a specific subgraph and connector in a DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p <my_subgraph>/connector/<connector_name>/queries/\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query with Line Highlighting in Markdown\nDESCRIPTION: Demonstrates how to create a GraphQL code block with line highlighting using markdown syntax in Docusaurus. Shows the usage of highlight-next-line comments for specific line highlighting.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```graphql {2,5}\n    query {\n    // highlight-next-line\n      authors (where: {articles: {rating: {_gt: 4}}}) {\n        id\n        name\n        // highlight-next-line\n        articles (where: {rating: {_gt: 4}}) {\n          id\n          title\n          rating\n        }\n      }\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN Project Get\nDESCRIPTION: Shows the basic command syntax for getting project details or listing all projects using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project get [project-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment variable configuration for plugin URLs in the local development environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nPRE_PARSE_URL=\"http://local.hasura.dev:4000/pre-parse\"\nPRE_RESPONSE_URL=\"http://local.hasura.dev:4000/pre-response\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Updated Build\nDESCRIPTION: Command to rebuild the API with the newly added upload and download commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Testing Connector Data Query\nDESCRIPTION: Sends a GraphQL query to verify the connector is working and returning data\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST https://<your-domain-or-ip>:3280/graphql \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"query\": \"{ <some_type> { <fields> { <field> } } }\"}\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in GraphQL\nDESCRIPTION: Demonstrates how to fetch the first 5 authors using the limit argument in a GraphQL query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/queries/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery FirstFiveAuthors {\n  authors(\n    limit: 5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Posts Table Creation\nDESCRIPTION: Queries the posts table with joined user information to verify its creation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\necho \"\n-- Fetch all posts with user information\nSELECT\n  posts.id AS post_id,\n  posts.title,\n  posts.content,\n  posts.created_at,\n  users.name AS author\nFRORM\n  posts\nJOIN\n  users ON posts.user_id = users.id;\n\" | duckdb app/connector/my_duckdb/data.duckdb\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication for Prometheus Connector\nDESCRIPTION: Sets up OAuth2 authentication with token URL, client ID, and client secret using environment variables\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/prometheus/auth.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconnection_settings:\n  authentication:\n    oauth2:\n      token_url:\n        value: http://example.com/oauth2/token\n      client_id:\n        env: PROMETHEUS_OAUTH2_CLIENT_ID\n      client_secret:\n        env: PROMETHEUS_OAUTH2_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Delete Subgraph Usage Example\nDESCRIPTION: Example showing how to delete a subgraph named 'app' from a specific project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph delete app --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Specifying Prefix Function Comparison Operators in Hasura (YAML)\nDESCRIPTION: This snippet shows how to configure the 'introspectPrefixFunctionComparisonOperators' option, which lists prefix functions that can be used as comparison operators.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n\"introspectPrefixFunctionComparisonOperators\": [\"box_above\", \"box_below\", \"box_contain\", ...]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Thumbnail Component in React JSX\nDESCRIPTION: This snippet shows how to import the Thumbnail component and use it in a React application. It demonstrates passing image attributes as props to the component.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/thumbnail.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n\n<Thumbnail\n  src=\"/img/get-started/0.0.1_console-add-connection-string.png\"\n  alt=\"Add a new PG data source using its connection string\"\n  width=\"437px\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Verifying setup via local console\nDESCRIPTION: This command opens the local console for the DDN setup, allowing users to check if everything is functioning correctly.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in SASS\nDESCRIPTION: Global options that are inherited from parent commands and can be used with the 'ddn connector build logs' command, including settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for DDN Project Get\nDESCRIPTION: Lists all inherited options from parent commands including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn update-cli' command, including log level, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN CLI for Setting Engine URL\nDESCRIPTION: Demonstrates how to use the command to set the build URL to 'example.com:3000' for a specific project. It includes the required build version and project name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build set-self-hosted-engine-url example.com:3000 --build-version <build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Identifying Safe Changes in GraphQL Schema\nDESCRIPTION: This snippet demonstrates a safe change by adding a new field in the GraphQL schema. Such changes enhance the schema without affecting existing operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/graphql-schema-diff.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  sales_total: Float\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  sales_total: Float\n  sales_average: Float // New field added\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fish Completions Permanently\nDESCRIPTION: Command to generate and save DDN CLI autocompletions for all future fish shell sessions. This writes the completion script to the fish configuration directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nddn completion fish > ~/.config/fish/completions/ddn.fish\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Development Console\nDESCRIPTION: This command opens the DDN development console in local mode. The console provides an interface for interacting with the supergraph and executing queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn command remove\nDESCRIPTION: Options inherited from parent commands that can be used with 'ddn command remove', including settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting DDN Context Values - Command Synopsis\nDESCRIPTION: Basic command syntax for setting context values in DDN CLI. Supports setting values for keys like selfHostedDataPlane, project, supergraph, and subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context set <key> <value> (Allowed keys: selfHostedDataPlane, noBuildConnectors, project, supergraph, subgraph, localEnvFile, cloudEnvFile) [flags]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection String\nDESCRIPTION: Sample PostgreSQL database connection string for the tutorial.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://read_only_user:readonlyuser@35.236.11.122:5432/v3-docs-sample-app\n```\n\n----------------------------------------\n\nTITLE: Setting Elasticsearch Password\nDESCRIPTION: Password credential for authenticating with the Elasticsearch instance.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nelastic\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Uninstall Example\nDESCRIPTION: Example showing how to uninstall a specific plugin named 'ndc-postgres' using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Uninstall a plugin named \"ndc-postgres\"\n ddn plugins uninstall ndc-postgres\n```\n\n----------------------------------------\n\nTITLE: ModelSelect Structure Definition\nDESCRIPTION: JSON structure defining a ModelSelect operation that represents a select on the data connector's model.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n{\n  \"type\": \"modelSelect\",\n  \"value\": {\n    \"modelName\": \"<ModelName>\",\n    \"queryRequest\": <NDCQueryRequest>,\n    \"ndcExplain\": <NDCExplain>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Docker Container\nDESCRIPTION: Docker command to run an Oracle database container with appropriate environment variables and port mappings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d \\\n  --name oracle-server \\\n  --restart always \\\n  -p 1521:1521 \\\n  -e ORACLE_PASSWORD=oraclepassword \\\n  -e APP_USER=example \\\n  -e APP_USER_PASSWORD=mypassword \\\n  -e TARGET_PDB=XEPDB1 \\\n  gvenzl/oracle-xe:21.3.0-slim\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-specific options including CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for generate-promptql-secret-key\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura DDN CLI on macOS and Linux\nDESCRIPTION: This snippet shows the command to download and run the installer script for the Hasura DDN CLI on macOS and Linux systems. It uses curl to fetch the script and pipes it directly to bash for execution.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/_install-the-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://graphql-engine-cdn.hasura.io/ddn/cli/${props.revision || \"v4\"}/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Lists the specific options available for the upgrade-supergraph-config-v1-to-v2 command, including required directory parameter and help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for upgrade-supergraph-config-v1-to-v2\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt package for TypeScript\nDESCRIPTION: Command to install the bcryptjs package for use in the TypeScript implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install bcryptjs\n```\n\n----------------------------------------\n\nTITLE: Adding Code Blocks to HTML Tables in MDX\nDESCRIPTION: Example of a table with code blocks in cells, including proper formatting to ensure code blocks render correctly. This requires an empty line before and after the code block within the table cell.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th width=\"20%\">Field</th>\n      <th width=\"40%\">Query</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>query</code></td>\n      <td>```graphql query MyQuery { ... } ```</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Generating PromptQL Secret Key - Basic Command Syntax\nDESCRIPTION: The basic command syntax for generating a PromptQL secret key using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth generate-promptql-secret-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Supergraph in Hasura DDN\nDESCRIPTION: Command to rebuild the supergraph locally after updating metadata files in a Hasura DDN project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/special-roles.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating a new build\nDESCRIPTION: This command builds the supergraph locally, which is necessary for incorporating all defined connector functions and setting up the service for local testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship in YAML\nDESCRIPTION: YAML configuration to create a relationship between a Users model and the ComparePassword command, enabling nested queries that invoke the custom business logic.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: comparePassword\n  sourceType: Users\n  target:\n    command:\n      name: ComparePassword\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: password\n      target:\n        argument:\n          argumentName: hashedPassword\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Retrieving User Data\nDESCRIPTION: GraphQL query example used in the GraphiQLIDE component demonstration. The query retrieves user information including id, name, and email fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery Users {\n  users {\n    id\n    name\n    email\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Rendering Installation Instructions with React Components\nDESCRIPTION: This JSX code renders a tabbed interface for displaying installation instructions for different operating systems. It uses custom React components like Tabs, TabItem, CodeBlock, and Admonition to structure the content.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/_install-the-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport Version from \"@site/src/components/CliVersion\";\nimport Admonition from \"@theme/Admonition\";\n\n<Tabs groupId=\"os-preference\" className=\"api-tabs\">\n\n<TabItem value=\"macOS-or-linux\" label=\"macOS and Linux\">\n\nSimply run the installer script in your terminal:\n\n<CodeBlock language=\"bash\">\n  {`curl -L https://graphql-engine-cdn.hasura.io/ddn/cli/${props.revision || \"v4\"}/get.sh | bash`}\n</CodeBlock>\n\n<Admonition type=\"info\" title=\"ARM-based Linux Machines\">\n  Currently, the CLI does not support installation on ARM-based Linux systems.\n</Admonition>\n\n</TabItem>\n\n<TabItem value=\"windows\" label=\"Windows\">\n- Download the latest <a href={`https://graphql-engine-cdn.hasura.io/ddn/cli/${props.revision || \"v4\"}/latest/DDN_CLI_Setup.exe`}>DDN CLI installer for Windows.</a> \n- Run the `DDN_CLI_Setup.exe` installer file and follow the instructions. This will only take a minute.\n- By default, the DDN CLI is installed under `C:\\Users\\{Username}\\AppData\\Local\\Programs\\DDN_CLI`\n- The DDN CLI is added to your `%PATH%` environment variable so that you can use the `ddn` command from your terminal.\n<br />\n\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring CommandPermissions for UpdatePostsById in YAML\nDESCRIPTION: This YAML snippet adds an 'author' role to the CommandPermissions object for the UpdatePostsById command. It allows execution only if the user's ID matches the post author's ID.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: UpdatePostsById\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: author\n      allowExecution: true\n      argumentPresets:\n        - argument: preCheck\n          value:\n            booleanExpression:\n              relationship:\n                # Here, `user` refers to the pre-generated relationship's name\n                name: user\n                predicate:\n                  fieldComparison:\n                    field: id\n                    operator: _eq\n                    value:\n                      sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Moving Engine Build Assets in Bash\nDESCRIPTION: Commands to create a new build directory and move engine build assets to the new location.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir engine/build\nmv engine/*.json engine/build\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Information in Markdown Frontmatter\nDESCRIPTION: Example showing how to add description and keywords meta information at the beginning of a documentation page using YAML frontmatter. This improves SEO and helps with document classification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Data validations in Hasura\nkeywords:\n  - hasura\n  - docs\n  - schema\n  - data validation\n---\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn relationship list Command in Bash\nDESCRIPTION: These examples demonstrate various ways to use the 'ddn relationship list' command, including listing relationships for the current supergraph, a specific supergraph, or a specific subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all Relationships for the supergraph set in the context\n ddn relationship list\n\n# List all Relationships for a specific supergraph\n ddn relationship list --supergraph ./supergraph.cloud.yaml\n\n# List all Relationships for a specific subgraph\n ddn relationship list --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Format Example\nDESCRIPTION: An example showing the format for environment variable files (.env.*) in Hasura DDN projects, which store key-value pairs for configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nENV1=val1\nENV2=val2\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn relationship list Command in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations, including log level settings, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Script for Supergraph Build\nDESCRIPTION: YAML configuration for adding a custom script to build the supergraph without connectors in the context config file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/independent-connector-deployment.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default: ...\n  scripts:\n    docker-start:\n      bash: HASURA_DDN_PAT=$(ddn auth print-access-token) docker compose --env-file .env up --build --pull always -d\n      powershell: $Env:HASURA_DDN_PAT = (ddn auth print-access-token); docker compose --env-file .env up --build --pull always -d\n    build-supergraph:\n      bash:\n        ddn supergraph build create --no-build-connectors --supergraph supergraph.yaml --env-file .env.cloud --project\n        <project-name>\n      powershell:\n        ddn supergraph build create --no-build-connectors --supergraph supergraph.yaml --env-file .env.cloud --project\n        <project-name>\n```\n\n----------------------------------------\n\nTITLE: PowerShell Completion Options\nDESCRIPTION: Available command line options for the PowerShell completion feature of DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_powershell.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for powershell completion\n```\n\n----------------------------------------\n\nTITLE: Configuring Supergraph Reference in YAML\nDESCRIPTION: Example demonstrating how to set the supergraph configuration file path in the default context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Connection URI\nDESCRIPTION: References an environment variable to store the database connection URI, enabling more secure credential management.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"connectionUri\": { \"variable\": \"CONNECTION_URI\" }\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Parent Commands\nDESCRIPTION: Displays options inherited from parent operations, including log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Restarting Hasura DDN Services\nDESCRIPTION: This command restarts all the Docker services associated with the Hasura DDN project, applying the changes made in the new build.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Generating Auto-Completion Script for PowerShell\nDESCRIPTION: Command to generate and temporarily enable auto-completion for Hasura CLI in PowerShell.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Viewing Engine Directory Structure in Bash for Hasura DDN\nDESCRIPTION: This snippet shows the directory structure for the Hasura v3 engine container. It includes environment variables, authentication configuration, metadata, and OpenDD files needed for the engine operation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n├── .env.engine\n├── auth_config.json\n├── metadata.json\n└── open_dd.json\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying a Go Connector with DDN CLI in Bash\nDESCRIPTION: This Bash command is used to build and deploy a Go connector for a subgraph on Hasura DDN. It requires the path to the connector's configuration file and optionally allows specification of environment and subgraph configuration files. Upon execution, it returns URLs for the read-write access to the connector. The command assumes that users have the DDN CLI installed and configured correctly.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/go/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./my_subgraph/connector/my_go/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Renaming hello.go to nameToUpperCase.go:\nDESCRIPTION: This Go code defines a function to convert a given name to uppercase. It specifies input arguments and outputs, along with potential error handling for empty names.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"hasura-ndc.dev/ndc-go/types\"\n  \"strings\"\n)\n\n// NameArguments defines the input arguments for the function\ntype NameArguments struct {\n  Name string `json:\"name\"` // required argument\n}\n\n// NameResult defines the output result for the function\ntype NameResult string\n\n// FunctionShoutName converts a name string to uppercase\nfunc FunctionShoutName(ctx context.Context, state *types.State, arguments *NameArguments) (*NameResult, error) {\n  if arguments.Name == \"\" {\n    return nil, fmt.Errorf(\"name cannot be empty\")\n  }\n\n  upperCaseName := NameResult(strings.ToUpper(arguments.Name))\n  return &upperCaseName, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BigQuery Table as Model\nDESCRIPTION: This command adds the 'users' table from BigQuery as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_bigquery users\n```\n\n----------------------------------------\n\nTITLE: Displaying Connector Resources\nDESCRIPTION: Shows available resources and their status for the DuckDB connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_duckdb\n```\n\n----------------------------------------\n\nTITLE: Parallel Deployment Architecture Diagram in Mermaid\nDESCRIPTION: A flow diagram showing the parallel deployment architecture where API Router routes requests to both Hasura v2 and DDN APIs, both connecting to the same existing database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/upgrade/guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[API Consumers] --> B[API Router]\n    B -->|/old| C[Hasura v2 API]\n    B -->|/new| D[Hasura DDN API]\n    C --> E[Existing Database]\n    D --> E\n    style A fill:#ffffff,stroke:#000000,stroke-width:2px,color:#000000\n    style B fill:#f0ad4e,stroke:#000000,stroke-width:2px,color:#000000\n    style C fill:#d9534f,stroke:#000000,stroke-width:2px,color:#000000\n    style D fill:#5cb85c,stroke:#000000,stroke-width:2px,color:#000000\n    style E fill:#ffffff,stroke:#000000,stroke-width:2px,color:#000000\n```\n\n----------------------------------------\n\nTITLE: Setting Custom URL Slug in Markdown\nDESCRIPTION: Example of setting a custom URL slug for index files using frontmatter\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: index\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Supergraph Configuration in YAML\nDESCRIPTION: Updates the path to subgraph configuration files in the supergraph config. Located at project root in supergraph.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/rename-subgraph.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - <new-subgraph-name>/subgraph.yaml\n    ...\n```\n\n----------------------------------------\n\nTITLE: Test Supergraph API Access\nDESCRIPTION: Perform a curl request to verify the GraphQL endpoint is accessible and returns schema information\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://<your-domain-or-ip>:3280/graphql \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"query\": \"{ __schema { types { name } } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Removing Environment Variables for Hasura DDN Subgraph\nDESCRIPTION: This snippet illustrates how to remove environment variables related to the deleted subgraph from the .env file. The highlighted lines show examples of environment variables that should be removed, typically prefixed with the subgraph name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/remove-subgraph.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\n#highlight-start\n<SUBGRAPH_NAME>_<CONNECTOR>_READ_URL=\"<connector-read-url>\"\n<SUBGRAPH_NAME>_<CONNECTOR>_WRITE_URL=\"<connector-write-url>\"\n<SUBGRAPH_NAME>_<CONNECTOR>_AUTHORIZATION_HEADER=\"Bearer <roken>\"\n#highlight-end\n...\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Supergraph API\nDESCRIPTION: Commands to build the local supergraph API and start the Docker container for serving the API endpoints.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Introspecting Connector using DDN CLI (Go)\nDESCRIPTION: This command introspects the 'my_go' connector using the DDN CLI. It retrieves metadata and schema information from the connector, which is then used to update command definitions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"ddn connector introspect my_go\"\n```\n\n----------------------------------------\n\nTITLE: Using 'NOT' Operator with Field Comparison in YAML\nDESCRIPTION: This example demonstrates the use of the 'not' operator with a field comparison predicate in YAML. It negates the condition of author_id equality.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nnot:\n  fieldComparison:\n    field: author_id\n    operator: _eq\n    value:\n      sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn context get-context in SASS\nDESCRIPTION: Shows the options inherited from parent commands that can be used with 'ddn context get-context', including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Restarting Hasura DDN Docker Services\nDESCRIPTION: This command restarts the Docker services for the Hasura DDN project. It's necessary after making changes to ensure the updated configuration is applied.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-postgresql.mdx#2025-04-17_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Running Codemod to Fix Traces Environment Variable\nDESCRIPTION: Command to run a codemod that updates the name of the environment variables in connector configuration files and docker compose files within the Hasura project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/fix-traces-env-var.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod fix-traces-env-var --dir .\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Link in Markdown Documentation\nDESCRIPTION: Demonstrates how to create an internal link to a Postgres tables documentation page using root relative file paths.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Postgres tables](/schema/postgres/tables.mdx)\n```\n\n----------------------------------------\n\nTITLE: DDN Project CLI Basic Options\nDESCRIPTION: Basic command line options for the DDN project command including help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for project\n```\n\n----------------------------------------\n\nTITLE: Allow Access from All IPs for Data Sources\nDESCRIPTION: This snippet outlines how to configure your data source to allow access from all IP addresses, which is essential when not using Private DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.0.0.0/0\n```\n\n----------------------------------------\n\nTITLE: Displaying Discovered Resources from PostgreSQL\nDESCRIPTION: Show the resources discovered from your PostgreSQL database using the DDN CLI. This command lists all the tables, views, and other database objects that were detected during introspection.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Introspect Data Source\nDESCRIPTION: Generate Hasura metadata by introspecting the connected database schema.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_connector\n```\n\n----------------------------------------\n\nTITLE: Fetch Specific Fields Example Response\nDESCRIPTION: Example JSON response showing the structure of returned data when fetching specific article fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type\": \"Article\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"title\": \"Introduction to JSON:API\",\n        \"content\": \"JSON:API is a specification for building APIs...\"\n      }\n    },\n    {\n      \"type\": \"Article\",\n      \"id\": \"2\",\n      \"attributes\": {\n        \"title\": \"Advanced JSON:API Concepts\",\n        \"content\": \"In this article, we'll explore...\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Project\nDESCRIPTION: Creates a new DDN project using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init lambda-tutorial\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for DDN Supergraph Build Command in SASS\nDESCRIPTION: This snippet shows the available options for the 'ddn supergraph build' command. It includes the help option and inherited options from parent commands.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for build\n```\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in SASS Format\nDESCRIPTION: Global command options inherited from parent commands, including logging level configuration, prompting behavior, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Managing Repeated Links Using Reference-Style Link Variables\nDESCRIPTION: Demonstrates how to use reference-style links to avoid repetition and improve maintainability when the same document is linked multiple times. Variables are defined at the end of the file for easier reference.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Section one\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n## Section two\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n<!-- Shared Link Variables -->\n\n[metadata-create-action]: /api-reference/metadata-api/actions.mdx#metadata-create-action\n[metadata-update-action]: /api-reference/metadata-api/actions.mdx#metadata-update-action\n[requesttransformation]: /api-reference/syntax-defs.mdx#requesttransformation\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Options\nDESCRIPTION: Global options inherited from parent commands that apply to all DDN CLI operations including completion configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_powershell.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Build in Hasura DDN\nDESCRIPTION: Command to create a subgraph build in the main project. This prepares the subgraph for integration into the main project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Options that are inherited from parent commands and can be used with the create-context command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Running the upgrade-auth-config-to-v3 Command in Bash\nDESCRIPTION: Basic syntax for the upgrade-auth-config-to-v3 command showing how to upgrade AuthConfig from v1/v2 to v3.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-auth-config-to-v3 [flags]\n```\n\n----------------------------------------\n\nTITLE: Inserting Thumbnail Images in Markdown\nDESCRIPTION: These snippets show how to insert Thumbnail components with images into the Markdown document. They are used to display screenshots of the Hasura DDN console for inviting collaborators and allowing access requests.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-collaborators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Thumbnail src=\"/img/ci-cd/0.0.1_console_invite-collaborator.png\" alt=\"Invite a collaborator\" width=\"1000\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Thumbnail src=\"/img/ci-cd/0.0.1_console_assign-collaborator-role.png\" alt=\"Invite a collaborator\" width=\"1000\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Thumbnail\n  src=\"/img/get-started/console_read-only.png\"\n  alt=\"Allow users to request access to your project\"\n  width=\"1000\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Examples of Running the GraphqlConfig Subscription Upgrade in Bash\nDESCRIPTION: Examples showing how to run the upgrade command in different contexts, including using the current context, targeting a specific supergraph, or targeting a specific subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-graphqlconfig-subscriptions\n\n# Run on a specific supergraph\n ddn codemod upgrade-graphqlconfig-subscriptions --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-graphqlconfig-subscriptions --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic hasura.yaml Configuration Example\nDESCRIPTION: A minimal example of the hasura.yaml file that appears at the root of a Hasura project, specifying the project directory structure version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Compose File in YAML\nDESCRIPTION: Updates the service name in the connector's compose file. Located at <subgraph-name>/connector/<connector-name>/compose.yaml.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/rename-subgraph.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  <new-subgraph-name>_<connector-name>:\n    build:\n      context: .\n      dockerfile_inline: ...\n```\n\n----------------------------------------\n\nTITLE: Introspecting TypeScript Connector in DDN\nDESCRIPTION: This command introspects the TypeScript connector to make its functions available for use in DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: DDN Model Remove Inherited Options\nDESCRIPTION: Options inherited from parent operations that can be used with the remove command, including logging configuration, output formatting, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud Project\nDESCRIPTION: Initializes the cloud project based on local parent project configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Displaying Found Resources\nDESCRIPTION: This command shows the resources discovered during the introspection process for the specified connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN Connector Resource Display\nDESCRIPTION: Shows the basic command syntax for displaying connector resources. The command requires a connector name parameter and accepts optional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Nullable Field Type Configuration for Turso Connector\nDESCRIPTION: Demonstrates how to configure a nullable field in the object types section, wrapping the field type in a 'nullable' type descriptor.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/turso/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": {\n    \"type\": {\n      \"type\": \"nullable\",\n      \"underlying_type\": {\n        \"type\": \"named\",\n        \"name\": \"String\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Hasura Console\nDESCRIPTION: Command to open the local Hasura console for interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Defining Functions and Procedures in JSON\nDESCRIPTION: A placeholder for specifying arrays of function and procedure definitions within the configuration. These are crucial for extending the database capabilities with custom operations.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [],\n  \"procedures\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retagging the Docker image\nDESCRIPTION: This command retags the specified Docker image so it can be pushed to the designated registry. Replace placeholders with actual connector and registry details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag <root-folder-name>-app_<connector> <your_registry>/<connector>:<your_tag>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Command to initialize a new Hasura DDN project and navigate to its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database for Hasura\nDESCRIPTION: Command to introspect the PostgreSQL database structure and generate Hasura metadata configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Starting services with docker-start\nDESCRIPTION: This command starts the necessary services using Docker. This is likely used to run the Hasura instance and the connector in a containerized environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Running DDN Model Update Command in Danger Admonition\nDESCRIPTION: Bash command example showing the DDN model update command, used within a danger admonition to demonstrate critical operation warnings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn model update Users\n```\n\n----------------------------------------\n\nTITLE: Inherited Options\nDESCRIPTION: Options inherited from parent operations that can be used with this command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Command to initialize a new Hasura DDN project and navigate to its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Initializing Connector\nDESCRIPTION: Command to initialize a data connector for a subgraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init <connector-name> --subgraph <subgraph-name> --hub-connector <connector-type>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Users with Posts Query\nDESCRIPTION: This JSON object represents the response from the GraphQL query, showing users with their associated posts. It demonstrates the structure of the data returned by the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"name\": \"Alice\",\n        \"age\": 25,\n        \"posts\": [\n          {\n            \"content\": \"This is Alice's first post.\",\n            \"title\": \"My First Post\",\n            \"userId\": 1\n          },\n          {\n            \"content\": \"Alice writes again!\",\n            \"title\": \"Another Post\",\n            \"userId\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"Bob\",\n        \"age\": 30,\n        \"posts\": [\n          {\n            \"content\": \"Bob shares his thoughts.\",\n            \"title\": \"Bob's Post\",\n            \"userId\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"Charlie\",\n        \"age\": 35,\n        \"posts\": [\n          {\n            \"content\": \"Charlie joins the conversation.\",\n            \"title\": \"Hello World\",\n            \"userId\": 3\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up DDN CLI Autocompletions Permanently on macOS\nDESCRIPTION: This command generates and saves the DDN CLI autocompletion script to the brew-managed bash completion directory on macOS. This requires Homebrew to be installed and will make completions available for all new shell sessions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nddn completion bash > $(brew --prefix)/etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Displaying Legacy Directory Structure in Bash\nDESCRIPTION: A bash tree representation of the Hasura DDN legacy project directory structure, showing all folders and files organized hierarchically.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── .devcontainer\n│  └── devcontainer.json\n├── .hasura\n│  └── context.yaml\n├── .vscode\n│  ├── extensions.json\n│  ├── launch.json\n│  └── tasks.json\n├── engine\n│  ├── .env.engine\n│  ├── auth_config.json\n│  ├── metadata.json\n│  └── open_dd.json\n├── globals\n│  ├── .env.globals.cloud\n│  ├── .env.globals.local\n│  ├── subgraph.cloud.yaml\n│  ├── subgraph.local.yaml\n│  ├── auth-config.cloud.hml\n│  ├── auth-config.local.hml\n│  ├── compatibility-config.hml\n│  └── graphql-config.hml\n├── app\n│  ├── .env.app.cloud\n│  ├── .env.app.local\n│  └── subgraph.yaml\n├── .gitattributes\n├── compose.yaml\n├── hasura.yaml\n├── otel-collector-config.yaml\n├── supergraph.cloud.yaml\n└── supergraph.local.yaml\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent operations including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Models to Metadata\nDESCRIPTION: Command to track all available models from the storage connector for use in the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn model add my_storage \"*\"\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Git Commit\nDESCRIPTION: Adds all files and creates initial commit for the parent project\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit add . && git commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Sample Query Response\nDESCRIPTION: JSON response from the users query\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n        \"name\": \"Sean\"\n      },\n      {\n        \"id\": \"82001336-65b7-11ed-b905-7fa26a16d198\",\n        \"name\": \"Rob\"\n      },\n      {\n        \"id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\",\n        \"name\": \"Marion\"\n      },\n      {\n        \"id\": \"8dea1160-65b7-11ed-b907-e3c5123cb650\",\n        \"name\": \"Sandeep\"\n      },\n      {\n        \"id\": \"9bd9d300-65b7-11ed-b908-571fef22d2ba\",\n        \"name\": \"Abby\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Options for upgrade-auth-config-to-v3\nDESCRIPTION: Available flags and options specific to the upgrade-auth-config-to-v3 command, including context selection, CI mode, and target configuration specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-auth-config-to-v3\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Component\nDESCRIPTION: Example of using the Thumbnail component to display an image with specified properties.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/console-collaborator-comments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Thumbnail src=\"/img/get-started/console_comment-create.png\" alt=\"Hover over fields to add comments\" width=\"1000\" />\n```\n\n----------------------------------------\n\nTITLE: Schema Selection Configuration\nDESCRIPTION: Demonstrates how to specify which database schemas should be included during the introspection process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"public\", \"other_schema\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy v2 Context Configuration Structure\nDESCRIPTION: Previous version (v2) of the context configuration structure for reference\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-context-v3.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v2\ndefinition:\n  current: default\n  contexts:\n    default:\n      project: emerging-stag-9129\n      supergraph: ../supergraph.yaml\n      subgraph: ../app/subgraph.yaml\n      localEnvFile: ../.env\n      cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Legacy Environment Variables Configuration\nDESCRIPTION: Example of an environment variables file (*.env.yaml) in a legacy Hasura project. This file stores environment variables that can be referenced in the project's metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsupergraph: {}\nsubgraphs:\n  #highlight-start\n  app:\n    APP_CONNECTOR_CONNECTION_URI: \"CONNECTION_URI\"\n#highlight-end\n```\n\n----------------------------------------\n\nTITLE: Starting Local Services\nDESCRIPTION: Start the local Hasura DDN Engine and OpenAPI connector services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Uninstall Basic Options\nDESCRIPTION: Available basic options for the uninstall command, including help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for uninstall\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Nested GraphQL Query in Hasura DDN\nDESCRIPTION: This JSON snippet shows the expected response structure for the nested GraphQL query. It includes an array of posts, each with its own details and the associated user information, demonstrating the relationship between posts and users.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-databricks.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"mainDefaultPosts\": [\n      {\n        \"id\": \"1\",\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alices first post.\",\n        \"user\": {\n          \"id\": \"1\",\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": \"2\",\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"id\": \"1\",\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"id\": \"3\",\n        \"title\": \"Bobs Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"id\": \"2\",\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"id\": \"4\",\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"id\": \"3\",\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options Configuration\nDESCRIPTION: Available command-specific options for the configure-header-forwarding command, including connector configuration paths and DataConnectorLink specifications.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --connector string        Path to Connector YAML config file\n    --connector-link string   Name of the DataConnectorLink to configure\n-h, --help                    help for configure-header-forwarding\n    --subgraph string         Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example with Long Title\nDESCRIPTION: TypeScript code example with type annotation, used to test how code blocks with extremely long titles are displayed in the UI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo: string = 'bar';\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Uninstall Inherited Options\nDESCRIPTION: Options inherited from parent commands including log level, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN ASCII Art Logo Display\nDESCRIPTION: ASCII art representation of the DDN logo using text characters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDDDDDDD\\   DDDDDDD\\   NN\\   NN\\ \nDD  __DD\\  DD  __DD\\  NNN\\  NN |\nDD |  DD | DD |  DD | NNNN\\ NN |\nDD |  DD | DD |  DD | NN NN\\NN |\nDD |  DD | DD |  DD | NN \\NNNN |\nDD |  DD | DD |  DD | NN |\\NNN |\nDDDDDDD  | DDDDDDD  | NN | \\NN |\n\\_______/  \\_______/  \\__|  \\__|\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Configuration for setting up the OpenAI API key in a .env file\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Globals Directory Structure in Bash\nDESCRIPTION: A bash tree representation showing the structure of the 'globals' directory which contains files for the globals subgraph, including environment variables and configuration files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n├── .env.globals.cloud\n├── .env.globals.local\n├── auth-config.cloud.hml\n├── auth-config.local.hml\n├── compatibility-config.hml\n├── graphql-config.hml\n├── subgraph.cloud.yaml\n└── subgraph.local.yaml\n```\n\n----------------------------------------\n\nTITLE: Opening PowerShell Profile for Editing\nDESCRIPTION: Command to open the PowerShell profile in a text editor for modification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnotepad $PROFILE\n```\n\n----------------------------------------\n\nTITLE: Loading Fish Completions for Current Session\nDESCRIPTION: Command to generate and load DDN CLI autocompletions for the current fish shell session. This provides autocompletion functionality but will be lost when the session ends.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nddn completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Building DDN Supergraph with New Command\nDESCRIPTION: Creates a new build of the supergraph API with the added MongoDB mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Introspecting a Connector with DDN CLI in Bash\nDESCRIPTION: This snippet shows how to introspect a Python lambda connector using the DDN CLI command. It requires the DDN CLI to be installed and configured. The command 'ddn connector introspect' is used with the connector's name as a parameter. The expected output is the connector's introspection data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect my_py\n```\n\n----------------------------------------\n\nTITLE: Querying Users Table\nDESCRIPTION: SQL command to verify the users table was populated correctly by selecting all records.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn subgraph add'\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn subgraph add' command. They include log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding API as Command\nDESCRIPTION: Track an API from the OpenAPI document as a command in the DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_openapi getStoreGetOrderById\n```\n\n----------------------------------------\n\nTITLE: Serving Built Documentation\nDESCRIPTION: Command to serve the built documentation locally for testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Opening Local Console for Hasura DDN\nDESCRIPTION: Command to open the local console for Hasura DDN, used to execute GraphQL queries and verify trace functionality after updating the environment variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/fix-traces-env-var.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Initializing New Hasura DDN Project\nDESCRIPTION: Command to create and navigate to a new Hasura DDN project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-qdrant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Creating External Link in Markdown Documentation\nDESCRIPTION: Shows how to create an external link to Google's homepage using markdown link syntax.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Google](https://www.google.com/)\n```\n\n----------------------------------------\n\nTITLE: Nested Query JSON Response from Hasura DDN API\nDESCRIPTION: This JSON response shows the result of the nested GraphQL query, returning posts with their associated user data. Each post contains its own fields along with the complete user object that is related to that post.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"postId\": 1,\n        \"title\": \"My First Post\",\n        \"content\": \"This is Alice's first post.\",\n        \"user\": {\n          \"userId\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"postId\": 2,\n        \"title\": \"Another Post\",\n        \"content\": \"Alice writes again!\",\n        \"user\": {\n          \"userId\": 1,\n          \"name\": \"Alice\",\n          \"age\": 25\n        }\n      },\n      {\n        \"postId\": 3,\n        \"title\": \"Bob's Post\",\n        \"content\": \"Bob shares his thoughts.\",\n        \"user\": {\n          \"userId\": 2,\n          \"name\": \"Bob\",\n          \"age\": 30\n        }\n      },\n      {\n        \"postId\": 4,\n        \"title\": \"Hello World\",\n        \"content\": \"Charlie joins the conversation.\",\n        \"user\": {\n          \"userId\": 3,\n          \"name\": \"Charlie\",\n          \"age\": 35\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supergraph in YAML for Hasura DDN\nDESCRIPTION: This YAML file configures how Hasura DDN constructs a supergraph. It specifies which subgraph config files to use for building the supergraph, with the 'version' specifying the supergraph object version and 'subgraphs' listing paths to all subgraph config files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.cloud.yaml\n    - app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy Bindings for Hasura DDN Automation in GCP\nDESCRIPTION: This script creates multiple IAM policy bindings that grant Hasura's ddn-automation service account the necessary permissions to manage resources in your GCP project. The bindings include network, DNS, container, and IAM administration roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/compute.networkAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/dns.admin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/gkehub.editor\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/logging.configWriter\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/container.clusterAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/monitoring.metricsScopesAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/certificatemanager.editor\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member='serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com' \\\n  --role='roles/resourcemanager.projectIamAdmin' \\\n  --condition='^:^title=Restrict IAM Granting for ddn-automation:description=Restrict ddn-automation to granting specific roles to specific members:expression=api.getAttribute(\"iam.googleapis.com/modifiedGrantsByRole\", []).hasOnly([\"roles/container.defaultNodeServiceAccount\"]) || api.getAttribute(\"iam.googleapis.com/modifiedGrantsByRole\", []).hasOnly([\"roles/container.admin\"]) || api.getAttribute(\"iam.googleapis.com/modifiedGrantsByRole\", []).hasOnly([\"roles/compute.networkViewer\"])'\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/container.admin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/iam.serviceAccountAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/iam.workloadIdentityPoolAdmin\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in MDX Documentation\nDESCRIPTION: Frontend component imports for the documentation page, including overview cards and icons using MDX syntax.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OverviewPlainCard } from \"../../src/components/OverviewPlainCard\";\nimport { OverviewTopSectionIconNoVideo } from \"@site/src/components/OverviewTopSectionIconNoVideo\";\nimport Icon from \"@site/static/icons/beaker.svg\";\n```\n\n----------------------------------------\n\nTITLE: Querying Snowflake Users Table\nDESCRIPTION: SQL query to select all records from the 'users' table in Snowflake.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Availability Zones Using AWS CLI\nDESCRIPTION: Command to retrieve available AWS zones in a specific region, displaying both zone names and zone IDs in a table format.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-availability-zones \\\n  --region us-east-1 \\\n  --output table \\\n  --query \"AvailabilityZones[?State=='available'] | [].{ZoneName: ZoneName, ZoneId: ZoneId}\"\n```\n\n----------------------------------------\n\nTITLE: DDN Auth Logout Basic Options\nDESCRIPTION: Available basic options for the logout command, showing help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_logout.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for logout\n```\n\n----------------------------------------\n\nTITLE: DDN Completion Basic Options\nDESCRIPTION: Available basic options for the completion command, showing help flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title with Frontmatter\nDESCRIPTION: Alternative approach to setting the page title using YAML frontmatter, which also controls how the page appears in the sidebar navigation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data validations\n---\n```\n\n----------------------------------------\n\nTITLE: Testing Engine Schema Introspection\nDESCRIPTION: Sends a GraphQL introspection query to verify the engine is running correctly\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-containers.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST https://<your-domain-or-ip>:3280/graphql \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"query\": \"{ __schema { types { name } } }\"}\n```\n\n----------------------------------------\n\nTITLE: Example Frontmatter Block in Markdown for Docusaurus\nDESCRIPTION: This snippet demonstrates how to structure a frontmatter block in a Markdown file for Docusaurus. It includes title, description, and keywords metadata that will be used by Docusaurus to generate appropriate HTML metadata tags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\ntitle: Hasura GraphQL Engine Documentation\ndescription: Hasura GraphQL Engine Documentation\nkeywords: - hasura - docs - manual - graphql engine\n\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources of PostgreSQL Connector in DDN\nDESCRIPTION: This command shows the found resources in the PostgreSQL connector, allowing verification of the new native query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn project delete Command\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn project delete' command. They include settings for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent operations\nDESCRIPTION: Lists the global options inherited from parent commands, including logging level configuration, prompting behavior, output format options, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Using Player Component in Documentation\nDESCRIPTION: Example of implementing the Player component with a video source path in documentation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/images.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Player src=\"/img/<SUBDIRECTORY>/<FILENAME>.webm\" />\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Users with Posts Query\nDESCRIPTION: This JSON object represents the response from the GraphQL query, showing users with their associated posts.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"name\": \"Alice\",\n        \"age\": 25,\n        \"posts\": [\n          {\n            \"id\": \"67585252ee01950f5dfc0421\",\n            \"content\": \"This is Alice's first post.\",\n            \"title\": \"My First Post\"\n          },\n          {\n            \"id\": \"67585252ee01950f5dfc0422\",\n            \"content\": \"Alice writes again!\",\n            \"title\": \"Another Post\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Bob\",\n        \"age\": 30,\n        \"posts\": [\n          {\n            \"id\": \"67585252ee01950f5dfc0423\",\n            \"content\": \"Bob shares his thoughts.\",\n            \"title\": \"Bob's Post\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Charlie\",\n        \"age\": 35,\n        \"posts\": [\n          {\n            \"id\": \"67585252ee01950f5dfc0424\",\n            \"content\": \"Charlie joins the conversation.\",\n            \"title\": \"Hello World\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the LatestRelease Component in JSX for Version Display\nDESCRIPTION: This code demonstrates how to import and use the LatestRelease component to display the latest stable and pre-release versions of Hasura GraphQL Engine. The highlighted lines show the import statement and the component usage with and without the prerelease prop.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/release-tag.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LatestRelease from \"@site/src/components/LatestRelease\";\n\nThe current latest stable version is:\n\n<code>hasura/graphql-engine:<LatestRelease /></code>\n\nThe current latest pre-release version is:\n\n<code>hasura/graphql-engine:<LatestRelease prerelease /></code>\n```\n\n----------------------------------------\n\nTITLE: Command Options for DDN Project Get\nDESCRIPTION: Shows the help flag option available for the get command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for get\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage - DDN CLI Fix Traces Environment Variables\nDESCRIPTION: Shows the basic syntax for running the fix-traces-env-var command with the required project directory parameter.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod fix-traces-env-var --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Internal Error Response Example\nDESCRIPTION: Demonstrates the generic error response format used for internal server errors, designed to avoid exposing implementation details.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/errors.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"500\",\n      \"detail\": \"Internal error\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Build\nDESCRIPTION: Creates a new build for the subgraph\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Linking to Parent Project\nDESCRIPTION: Initializes cloud project as parent project for subgraph linking\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn project init --with-project <parent-project-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary zsh Auto-Completion for Hasura CLI\nDESCRIPTION: Command to enable auto-completion for the current zsh session.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsource <(ddn completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Adding Database Model\nDESCRIPTION: Tracks the users table as a model in DDN metadata\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn models add my_pg users\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Markdown\nDESCRIPTION: Example of adding a main title to a documentation page using Markdown H1 syntax. This becomes the page's primary heading.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Data validations\n```\n\n----------------------------------------\n\nTITLE: Basic Command Options - DDN CLI SASS\nDESCRIPTION: Shows the basic help flag option available for the ddn command operation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for command\n```\n\n----------------------------------------\n\nTITLE: Options for the ddn connector command\nDESCRIPTION: Lists the help option available specifically for the connector command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for connector\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hasura DDN Project\nDESCRIPTION: Command to scaffold a new local Hasura DDN project and navigate to its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Listing GCP Zones Using gcloud CLI\nDESCRIPTION: Command to list available Google Cloud Platform zones in a specific region with their status.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute zones list \\\n  --filter=\"region:us-west2\" \\\n  --format=\"table(name,region,status)\"\n```\n\n----------------------------------------\n\nTITLE: Running Metadata Doc Generation in Bash\nDESCRIPTION: This snippet demonstrates how to build and run the utility to regenerate metadata reference pages in Supergraph Modeling. It assumes the necessary JSON schema files are present in the root directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/generate-metadata-docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Command to create and switch to a new feature branch for documentation changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <your-name>/docs/<short-update-description>\n```\n\n----------------------------------------\n\nTITLE: Check for Running Processes on Docker\nDESCRIPTION: Use the `docker ps` command to check for any processes that may conflict with your data source's container, allowing for cleanup before reinitializing the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Metadata Doc Generation in Bash\nDESCRIPTION: This snippet shows how to navigate to the utility directory and install the necessary dependencies. It includes a conditional step for installing TypeScript if running in an Action.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/generate-metadata-docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd utilities/generate-metadata-docs\n# if you're running this in an Action, install TS\n# npm install typescript\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Links in React Components\nDESCRIPTION: Shows how to use Docusaurus Link component for both internal and external links in React. Requires importing the Link component from @docusaurus/Link.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\n\n// Internal Link\n<Link to=\"/rst-vs-mdx-guide/links#root-relative-links\">Root Relative Links</Link>\n\n// External Link\n<Link to=\"https://hasura.io\">Hasura</Link>\n```\n\n----------------------------------------\n\nTITLE: Shell Command Example\nDESCRIPTION: Shell commands should use bash syntax, with comments prefixed by # and separate blocks for command output.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/code-blocks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example command\\necho 'Hello World' && \\\\\\n  echo 'Next Line'\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Update Examples in Bash\nDESCRIPTION: These examples show how to use the 'ddn update-cli' command to update the CLI to the latest version or a specific version. It also includes a note on disabling auto-update checks.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update CLI to latest version:\n ddn update-cli\n\n# Update CLI to a specific version (say v1.0.0):\n ddn update-cli --version v1.0.0\n\n# To disable the auto-update check on the CLI, set\n# \"show_update_notification\": false\n# in ~/.ddn/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Response from Billing Orders Query in JSON\nDESCRIPTION: Example JSON response from the billing_orders GraphQL query, showing order information including ID, creation date, and status.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"billing_orders\": [\n      {\n        \"id\": \"c7406b75-6b24-41e4-9c5b-ff3feada9447\",\n        \"createdAt\": \"2023-10-29T17:02:50.889261+00:00\",\n        \"status\": \"processing\"\n      },\n      {\n        \"id\": \"7ff13435-b590-4d6b-957f-f7fd39d4528a\",\n        \"createdAt\": \"2023-10-29T17:02:50.958076+00:00\",\n        \"status\": \"complete\"\n      },\n      {\n        \"id\": \"98612470-1feb-4b91-88f7-9289d652ee87\",\n        \"createdAt\": \"2023-10-29T17:02:51.021317+00:00\",\n        \"status\": \"complete\"\n      },\n      {\n        \"id\": \"85581445-752a-4aef-9684-b648eb5d5f42\",\n        \"createdAt\": \"2023-10-29T17:02:51.085229+00:00\",\n        \"status\": \"complete\"\n      },\n      {\n        \"id\": \"9891596a-a732-4c1c-902c-1a112da48fec\",\n        \"createdAt\": \"2023-10-29T17:02:51.150084+00:00\",\n        \"status\": \"complete\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Context Set Inherited Options\nDESCRIPTION: Options inherited from parent commands including log level control, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Expected GraphQL Response for Users Query\nDESCRIPTION: JSON response showing the expected data structure when querying users from the Oracle database.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"exampleUsers\": [\n      {\n        \"userId\": 1,\n        \"name\": \"Alice\",\n        \"age\": 25\n      },\n      {\n        \"userId\": 2,\n        \"name\": \"Bob\",\n        \"age\": 30\n      },\n      {\n        \"userId\": 3,\n        \"name\": \"Charlie\",\n        \"age\": 35\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a documentation page, specifying sidebar position, keywords related to Hasura DDN features, and metadata for documentation organization.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 1\ndescription: \"\"\nkeywords:\n  - hasura ddn\n  - api observability\n  - metrics\n  - traces\n  - logs\n  - tools\n---\n```\n\n----------------------------------------\n\nTITLE: Running ddn connector setenv Command\nDESCRIPTION: Basic syntax for the ddn connector setenv command which runs a specified command with environment variables set from a connector configuration file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector setenv --connector <path-to-connector-config-file-.yaml> -- <command> [flags]\n```\n\n----------------------------------------\n\nTITLE: Error Response for Exceeding Size Limit in Hasura GraphQL API\nDESCRIPTION: When a GraphQL API request exceeds the 30 MB response size limit, Hasura returns an internal error API response. Users should check traces for more detailed error information including the actual response size from the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/response-size-limit.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"internal error\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running DDN Model Update Command in Bash\nDESCRIPTION: Command line example showing how to update a Users model using the DDN CLI. Used in note admonition to demonstrate code within admonition blocks.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn model update Users\n```\n\n----------------------------------------\n\nTITLE: Complex HTML Tables with Code Blocks and Width Control\nDESCRIPTION: Example of a complex HTML table with status codes, descriptions, and code blocks. This demonstrates how to control column widths, use multiple header rows, and include code blocks in various languages.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th width=\"10%\">Status code</th>\n      <th width=\"10%\">Description</th>\n      <th width=\"30%\">Response Structure</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>200</code></td>\n      <td>Success</td>\n      <td>``` Request Specific ```</td>\n    </tr>\n    <tr>\n      <td><code>400</code></td>\n      <td>Bad Request</td>\n      <td>```haskell { \"path\" : String, \"error\" : String } ```</td>\n    </tr>\n    <tr>\n      <td><code>401</code></td>\n      <td>Unauthorized</td>\n      <td>```haskell { \"error\" : String } ```</td>\n    </tr>\n    <tr>\n      <td><code>500</code></td>\n      <td>Internal server error</td>\n      <td>```haskell { \"error\" : String } ```</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Elasticsearch URL for Connection\nDESCRIPTION: Configuration value for the Elasticsearch endpoint URL to use for the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://local.hasura.dev:9200/\n```\n\n----------------------------------------\n\nTITLE: Authenticate DDN CLI with Access Token\nDESCRIPTION: Log in to the DDN CLI on the cloud server using a personal access token\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/docker-compose-simple.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login --access-token <access-token>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File for MySQL and Adminer\nDESCRIPTION: Create a Docker Compose file to set up MySQL and Adminer services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntouch app/connector/my_mysql/compose.mysql.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  mysql:\n    image: mysql:8.0\n    container_name: mysql-db\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpassword\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql-data:/var/lib/mysql\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n      - --default-authentication-plugin=mysql_native_password\n\n  adminer:\n    image: adminer:latest\n    container_name: adminer\n    restart: always\n    ports:\n      - \"8080:8080\"\n    environment:\n      ADMINER_DEFAULT_SERVER: mysql\n\nvolumes:\n  mysql-data:\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for DDN Connector Resource Display\nDESCRIPTION: Lists the specific options available for the show-resources command, including CI mode, context selection, and subgraph configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show-resources\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Building the supergraph locally\nDESCRIPTION: This command builds the supergraph in a local environment, compiling all the configurations and connections established during the setup.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Deploying Plugin Using npm\nDESCRIPTION: Command to deploy the plugin using npm run script configured for Cloudflare Wrangler deployment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI base URL in .env.cloud file\nDESCRIPTION: Specifies the base URL for the OpenAPI API in the .env.cloud file for the cloud-hosted connector. This URL is needed for the connector to communicate with the OpenAPI API. Users should replace with their appropriate API server URL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/openAPI/_deployment-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNDC_OAS_BASE_URL=<your-openapi-base-url>\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Heading Hierarchy Example\nDESCRIPTION: Demonstrates the basic heading hierarchy from h1 to h6 using Markdown syntax.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is the Main Page Title\n\n## This is a H2 heading\n\n### This is a H3 heading\n\n#### This is a H4 heading\n\n##### This is a H5 heading\n\n###### This is a H6 heading\n```\n\n----------------------------------------\n\nTITLE: Starting SQL Server Container\nDESCRIPTION: Docker commands to pull and run a SQL Server instance with specified credentials.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-sqlserver.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/mssql/server:2022-latest\ndocker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Password123\" -p 1433:1433 --name sqlserver -d mcr.microsoft.com/mssql/server:2022-latest\n```\n\n----------------------------------------\n\nTITLE: Admonition Formatting with Empty Lines in Diff\nDESCRIPTION: Illustrates the proper formatting of admonitions with required empty lines to prevent Prettier formatting issues.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+\n:::info Note\n+\nMake sure to place the note/admonition in a place where the user will see it at the appropriate time.\n+\n:::\n+\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Code Block Example\nDESCRIPTION: Example of a JavaScript code block with a title and highlighted lines (1 and 3), demonstrating the code block styling and syntax highlighting capabilities.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 'bar';\nconst baz = 'qux';\nconst quux = 'quuz';\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Options for Setting API Access Mode - Sass\nDESCRIPTION: This snippet lists the available options for the 'set-api-access-mode' command in the DDN CLI. It provides additional flags to customize command behavior, like context handling and output formatting.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_set-api-access-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for set-api-access-mode\n-p, --project string   DDN Project name\n```\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Updating Supergraph Config in YAML for Hasura DDN\nDESCRIPTION: This snippet shows how to remove a subgraph entry from the supergraph.yaml file. The highlighted line represents the subgraph configuration that needs to be removed.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/remove-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    #highlight-start\n    - <subgraph-name>/subgraph.yaml\n    #highlight-end\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: Installs necessary packages for the TypeScript connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd app/connector/my_ts && npm install\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Types in JSON\nDESCRIPTION: This JSON snippet demonstrates how to declare nullable types by wrapping a type in an object with a `nullable` property. Such types may hold their defined type value or a null value, enhancing flexibility in schema definitions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/type-expressions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"nullable\": { \"scalar\": \"string\" } }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"nullable\": \"extendedJSON\" }\n```\n\n----------------------------------------\n\nTITLE: New Project Initialization\nDESCRIPTION: Command to scaffold a new local DDN project and navigate into its directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Heading Link Reference Examples\nDESCRIPTION: Demonstrates how to create links to specific headings using their IDs in both same-document and cross-document scenarios.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Link to Sub Section](/path/to/sub/section.mdx#heading-h2-example)`.\n\n<!-- or just the hash-param if its in the same document -->\n\n[Link to sub section in same document](#heading-ids)\n```\n\n----------------------------------------\n\nTITLE: Updating Metadata with New APIs\nDESCRIPTION: Add all new APIs from the updated OpenAPI document as commands in the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_openapi \"*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Translate Package for TypeScript\nDESCRIPTION: Command to install the Google Cloud Translate package for use in a TypeScript lambda connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @google-cloud/translate\n```\n\n----------------------------------------\n\nTITLE: Additional Resources Note Admonition in Markdown\nDESCRIPTION: Shows how to create a note admonition with a title and webinar link.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note Additional Resources\n\nData Federation with Hasura - [Watch Webinar](https://hasura.io/events/webinar/data-federation-hasura-graphql/).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: YAML Structure Example\nDESCRIPTION: YAML should use 2-space indentation and can use ... to indicate omitted sections.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/code-blocks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkey: value\\nparent:\\n  child: value\\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Rockets Command\nDESCRIPTION: Command to add the rockets query from the existing API\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_graphql rockets\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Setup in Bash\nDESCRIPTION: Commands for cloning the repository and navigating to the project directory\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [your-repo-url]\ncd [your-repo-directory]\n```\n\n----------------------------------------\n\nTITLE: Using the CLI version in a React component\nDESCRIPTION: React component that imports and displays the latest CLI version. The component imports the version information from a JSON file that is updated by the utility, and renders it within the documentation to inform users about the latest CLI version available.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport latestVersion from '../../../utilities/update-cli-version/latest-version.json';\n\nconst Index: React.FC = () => {\n  const version = latestVersion.tag_name;\n\n  console.log(version);\n\n  return (\n    <div>\n      <p>\n        You can download the CLI binary below. The latest version of the CLI is <kbd>{version}</kbd>. Please follow the\n        instructions for your system.\n      </p>\n    </div>\n  );\n};\n\nexport default Index;\n```\n\n----------------------------------------\n\nTITLE: Failed Update Response in JSON\nDESCRIPTION: This JSON response shows a failed update operation, indicating zero affected rows due to lack of permissions.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/permissions/tutorials/5-restrict-command-execution-with-role-based-permissions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updatePostsById\": {\n      \"affectedRows\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing YouTube Video Embed in React/JSX\nDESCRIPTION: Embeds a YouTube video player iframe with specific permissions and aspect ratio wrapper. The video is embedded within a responsive container with specific styling classes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div className={'video-wrapper'}>\n  <div className={'video-aspect-ratio'}>\n    <iframe\n      src={\"https://www.youtube.com/embed/wppOexzYOMw\"}\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n      allowFullScreen\n    />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph API with DDN\nDESCRIPTION: This command creates a new local build of the supergraph API using DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Adding All Commands from Data Source in DDN CLI\nDESCRIPTION: This command adds all discovered commands from the data source to the metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector_link_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Querying Posts Table\nDESCRIPTION: SQL command to verify the posts table was populated correctly by selecting all records.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM posts;\n```\n\n----------------------------------------\n\nTITLE: DDN Model Remove Command Options\nDESCRIPTION: Available command-specific options for the 'ddn model remove' command including context selection, help, pattern specification, and subgraph path definition.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for remove\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Image\nDESCRIPTION: Example of using standard markdown image syntax for displaying a notification icon.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/console-collaborator-comments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Alt text](/img/get-started/comments_notification.png)\n```\n\n----------------------------------------\n\nTITLE: Staging Changes\nDESCRIPTION: Command to stage all local changes for commit.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL and Adminer\nDESCRIPTION: Starts PostgreSQL and Adminer using Docker Compose.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_pg/compose.postgres-adminer.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Running the CLI version update utility\nDESCRIPTION: Yarn command to run the CLI version update utility from the root of the docs directory. This command executes the utility that fetches the latest CLI version and updates the source files.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn update-cli-version\n```\n\n----------------------------------------\n\nTITLE: Listing Available Supergraph Builds in Hasura DDN\nDESCRIPTION: Lists the available supergraph builds in the Hasura DDN cloud project. This helps identify the most recent build version to use as a base for creating a new supergraph build.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build get\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Documentation\nDESCRIPTION: Shows how to import React components below the frontmatter using the @site global variable which resolves to the root of the application for absolute imports.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Basic Subgraph Creation Command Syntax\nDESCRIPTION: The basic command syntax for creating a new subgraph in a Hasura DDN Project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph create <subgraph-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This snippet shows the import statements for React components used in the Markdown document. It imports a Thumbnail component and two MDX files for roles and permissions information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/manage-collaborators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Thumbnail from \"@site/src/components/Thumbnail\";\nimport Roles from \"@site/docs/project-configuration/_roles.mdx\";\nimport Permissions from \"@site/docs/project-configuration/_permissions.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura DDN CLI\nDESCRIPTION: Command to update the Hasura DDN CLI to the latest version, which is necessary to use the new OTLP endpoint environment variable.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/fix-traces-env-var.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn update-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Root Relative Links in Markdown\nDESCRIPTION: Shows the syntax for creating a root relative link in Markdown. The path starts after the 'latest' directory level and includes the file extension.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[MDX Root Relative Actions Link](/actions/overview.mdx)\n```\n\n----------------------------------------\n\nTITLE: Subgraph Creation Examples\nDESCRIPTION: Example commands showing how to create a subgraph with and without a description.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Subgraph \"app\" in a Project\n ddn project subgraph create app --project pet-lion-2649\n\n# Create a new Subgraph \"app\" in a Project with a description\n ddn project subgraph create app --project pet-lion-2649 --description \"application management APIs\"\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL and Adminer Containers\nDESCRIPTION: Start the MySQL and Adminer containers using Docker Compose.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mysql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f app/connector/my_mysql/compose.mysql.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table in PostgreSQL\nDESCRIPTION: Creates a 'users' table and inserts sample data in PostgreSQL.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/2-extend-a-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n--- Create the table\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  age INT NOT NULL\n);\n\n--- Insert some data\nINSERT INTO users (name, age) VALUES ('Alice', 25);\nINSERT INTO users (name, age) VALUES ('Bob', 30);\nINSERT INTO users (name, age) VALUES ('Charlie', 35);\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-specific options for the set-self-hosted-engine-url command including CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for set-self-hosted-engine-url\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Pushing the v3-engine Docker image to the registry\nDESCRIPTION: This command pushes the built v3-engine image to the designated Docker registry, making it available for deployment in the cloud.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker push <your_registry>/v3-engine:<your_tag>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Examples\nDESCRIPTION: Sample GraphQL queries demonstrating basic data fetching and relationship queries.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-sqlserver.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    userId\n    name\n    age\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    userId\n    postId\n    title\n    content\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    postId\n    title\n    content\n    user {\n      userId\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Composite Column Type\nDESCRIPTION: Defines a composite column type in a table definition, referencing a custom PostgreSQL composite type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"type\": {\n  \"compositeType\": \"person_address\"\n},\n```\n\n----------------------------------------\n\nTITLE: Updating DDN Commands for PostgreSQL\nDESCRIPTION: Update all commands for the PostgreSQL connector using the DDN CLI. The '*' wildcard ensures that all detected commands are updated with the latest metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn command update my_pg \"*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Connector Resources\nDESCRIPTION: Command to display all available resources in the ClickHouse connector, including the newly added native query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for ddn doctor\nDESCRIPTION: Available flags specific to the 'ddn doctor' command, showing the help option.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_doctor.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for doctor\n```\n\n----------------------------------------\n\nTITLE: Defining ProcedureName in Markdown\nDESCRIPTION: Defines the structure for a procedure name, which is represented as a string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### ProcedureName {#command-procedurename}\n\nThe name of a procedure backing the command.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Using Root Relative Paths in Markdown Links\nDESCRIPTION: Demonstrates the find and replace pattern for managing root relative paths. This approach makes it easier to update links when documents are moved within the documentation structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFind `/folder1/subfolder2/doc3.mdx` and replace with `/folder1/newsubfolder4/doc5.mdx`\n```\n\n----------------------------------------\n\nTITLE: Markdown TL;DR Block Reference\nDESCRIPTION: Shows the reference format for including a TL;DR block at the top of feature documentation for quick summary purposes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/general.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTL;DR\n```\n\n----------------------------------------\n\nTITLE: Specifying Scalar Column Type\nDESCRIPTION: Defines a scalar column type in a table definition, specifying the PostgreSQL data type.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"type\": { \"scalarType\": \"varchar\" }\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Project Creation Command Syntax\nDESCRIPTION: The basic command syntax for creating a new project on Hasura DDN. Accepts an optional project name parameter and additional flags.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project create [project-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: Command to start the local Hasura DDN Engine and MongoDB connector services.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-mongodb.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Completion Inherited Options\nDESCRIPTION: Options inherited from parent operations including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a Specific Project on Hasura DDN\nDESCRIPTION: This example demonstrates how to delete a project named 'pet-lion-2649' on Hasura DDN using the CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project delete pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: MongoDB Aggregation Pipeline for Frequency Counts\nDESCRIPTION: This aggregation pipeline is designed to compute the frequency of words appearing in movie titles for a given year.  It filters movies by year, splits the title into words, unwinds the array of words, and then groups by word to count occurrences. The pipeline expects a 'year' parameter as input.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n[\n  {\n    \"$match\": {\n      \"year\": { \"$eq\": \"{{ year }}\" }\n    }\n  },\n  {\n    \"$replaceWith\": {\n      \"title_words\": { \"$split\": [\"$title\", \" \"] }\n    }\n  },\n  { \"$unwind\": { \"path\": \"$title_words\" } },\n  {\n    \"$group\": {\n      \"_id\": \"$title_words\",\n      \"count\": { \"$count\": {} }\n    }\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Global options inherited from parent commands, including logging configuration, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Options for Subgraph Initialization\nDESCRIPTION: This snippet outlines the options available for the 'ddn subgraph init' command, including directory specification, GraphQL field and type name prefixes, help command, naming conventions, and supergraph configuration. Each option allows users to customize the initialization process.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string                          Directory to initialize the Subgraph (Defaults to subgraph name)\n    --graphql-root-field-prefix string    Prefix to use while generating GraphQL root fields\n    --graphql-type-name-prefix string     Prefix to use while generating GraphQL type names\n-h, --help                                help for init\n    --subgraph-naming-convention string   Naming convention for the subgraph. Can be 'graphql', 'snake_case' or 'none'.\n    --target-supergraph stringArray       Supergraph config file to add the Subgraph. Can be repeated to provide multiple Supergraph config files\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query and Response\nDESCRIPTION: Example GraphQL query to fetch users and its corresponding JSON response.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery GET_USERS {\n  users {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n        \"name\": \"Sean\"\n      },\n      {\n        \"id\": \"82001336-65b7-11ed-b905-7fa26a16d198\",\n        \"name\": \"Rob\"\n      },\n      {\n        \"id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\",\n        \"name\": \"Marion\"\n      },\n      {\n        \"id\": \"8dea1160-65b7-11ed-b907-e3c5123cb650\",\n        \"name\": \"Sandeep\"\n      },\n      {\n        \"id\": \"9bd9d300-65b7-11ed-b908-571fef22d2ba\",\n        \"name\": \"Abby\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Object Boolean Expression Types in Hasura DDN\nDESCRIPTION: This command runs a codemod to upgrade all object boolean expression types in the metadata. It's used to resolve the build error raised when ObjectBooleanExpressionType is used to define a boolean expression.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-object-boolean-expression-types\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Response\nDESCRIPTION: Shows an example JSON response from the GraphQL query. The response includes an array of comment objects, each containing id, comment, user_id, and post_id fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comments\": [\n      {\n        \"id\": 1,\n        \"comment\": \"Great post! Really enjoyed reading this.\",\n        \"user_id\": 1,\n        \"post_id\": 2\n      },\n      {\n        \"id\": 2,\n        \"comment\": \"Thanks for sharing your thoughts!\",\n        \"user_id\": 2,\n        \"post_id\": 1\n      },\n      {\n        \"id\": 3,\n        \"comment\": \"Interesting perspective.\",\n        \"user_id\": 3,\n        \"post_id\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Upgrade Command Syntax\nDESCRIPTION: The basic command syntax for upgrading a DDN plugin to a newer version.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins upgrade <plugin-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Native Query Pipeline Example (No Arguments)\nDESCRIPTION: This JSON code shows an example of a 'pipeline' configuration within a Native Query definition, without any arguments. It contains an array of MongoDB aggregation pipeline stages, including `$lookup`, `$unwind`, `$group`, and `$project`, used to transform and shape the data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"pipeline\": [\n    {\n      \"$lookup\": {\n        \"from\": \"Album\",\n        \"localField\": \"ArtistId\",\n        \"foreignField\": \"ArtistId\",\n        \"as\": \"Albums\"\n      }\n    },\n    {\"$unwind\": \"$Albums\"},\n    {\n      \"$group\": {\n        \"_id\": \"$ArtistId\",\n        \"id\": {\"$first\": \"$_id\"},\n        \"Name\": {\"$first\": \"$Name\"},\n        \"AlbumCount\": {\"$count\": {}}\n      }\n    },\n    {\n      \"$project\": {\n        \"_id\": \"$id\",\n        \"ArtistId\": \"$_id\",\n        \"Name\": 1,\n        \"AlbumCount\": 1\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Using Link and Code Elements in HTML Tables\nDESCRIPTION: Example showing how to properly use Link components and code elements within HTML table cells. This approach is necessary when table cells contain a mix of text and markdown elements.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Usage of <Link> for `[link](https://...)` -->\n<tr>\n  <td>Region</td>\n  // highlight-next-line\n  <td>The ... data. <Link to=\"https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers\">Read ... docs.</Link></td>\n</tr>\n\n<!-- Usage of <code> for `code` -->\n<tr>\n  <td>Custom Attributes</td>\n  // highlight-next-line\n  <td>Custom ... tag <code>hasura-cloud-metrics</code> is ... Attributes <code>project_id</code> and <code>project_name</code> are ... metrics.</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Rockets Data Response\nDESCRIPTION: Example JSON response from the rockets query\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"rockets\": [\n      {\n        \"name\": \"Falcon 1\",\n        \"costPerLaunch\": 6700000,\n        \"description\": \"The Falcon 1 was an expendable launch system privately developed and manufactured by SpaceX during 2006-2009. On 28 September 2008, Falcon 1 became the first privately-developed liquid-fuel launch vehicle to go into orbit around the Earth.\"\n      },\n      {\n        \"name\": \"Falcon 9\",\n        \"costPerLaunch\": 50000000,\n        \"description\": \"Falcon 9 is a two-stage rocket designed and manufactured by SpaceX for the reliable and safe transport of satellites and the Dragon spacecraft into orbit.\"\n      }\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Data Connector in DDN\nDESCRIPTION: This command introspects the MongoDB data connector to fetch the latest resources, including the newly added native query.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Adding Model for Native Query in DDN\nDESCRIPTION: This command adds the model for the native query to the DDN project, linking it to the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: JWT config containing literal values example\nDESCRIPTION: This JSON example shows a JWT payload where the `user` object contains user information.  It's used to demonstrate the literal values configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"user\": {\n    \"id\": \"ujdh739kd\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response from createUser Mutation\nDESCRIPTION: Shows the expected JSON response after successfully executing the 'createUser' mutation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createUser\": {\n      \"n\": 1,\n      \"ok\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Native Query using DDN CLI\nDESCRIPTION: This shell command demonstrates how to create a native query using the DDN CLI.  It specifies the connector configuration file, indicates the creation of a native query, provides the path to the JSON file containing the aggregation pipeline, and specifies the input collection. The name of the query will be derived from the filename, or can be overridden with `--name`.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_connector/connector.yaml \\\n  -- native-query create title_word_frequency.json \\\n  --collection movies\n```\n\n----------------------------------------\n\nTITLE: Introspecting a data source\nDESCRIPTION: This command introspects the specified data source to gather schema information. The placeholder <connector-name> should be replaced with the actual connector's name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector-name>\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources for MongoDB Connector in DDN\nDESCRIPTION: This command shows the found resources for the specified connector, allowing you to verify the new native query has been added successfully.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Building and Running Local Services\nDESCRIPTION: Commands to build and start local Hasura DDN services\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-http.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Global options that apply to all DDN CLI commands, inherited from parent operations, including log level, prompt behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Advanced GraphiQL Query with Variables in React\nDESCRIPTION: Shows implementation of GraphiQLIDE with variables, filters, and complex response structure for querying authors by pincode.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/graphiql-ide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport GraphiQLIDE from '@site/src/components/GraphiQLIDE';\n\n<GraphiQLIDE\n  query={`query get_authors_in_pincode ($jsonFilter: jsonb){\n    authors(\n      where: {\n        address: {_contains: $jsonFilter }\n      }\n    ) {\n      id\n      name\n      address\n    }\n  }`}\n  variables={`{\n    \"jsonFilter\": {\n      \"pincode\": 560095\n    }\n  }`}\n  response={`{\n    \"data\": {\n      \"authors\": [\n        {\n          \"id\": 1,\n          \"name\": \"Ash\",\n          \"address\": {\n            \"street_address\": \"161, 19th Main Road, Koramangala 6th Block\",\n            \"city\": \"Bengaluru\",\n            \"state\": \"Karnataka\",\n            \"pincode\": 560095,\n            \"phone\": \"9090909090\",\n          }\n        }\n      ]\n    }\n  }`}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Verifying Elasticsearch Data with Search Query\nDESCRIPTION: Executes a search query against the customers index to verify that data was loaded correctly, returning only the document ID and name fields.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-elasticsearch.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location 'http://localhost:9200/customers/_search' \\\n-H 'Content-Type: application/json' \\\n-u elastic:elastic \\\n--data '{\n  \"_source\": [\n    \"_id\",\n    \"name\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding Images with Thumbnail Component in JSX\nDESCRIPTION: This code demonstrates how to import and use the Thumbnail component to display images with click-to-zoom functionality. It shows the proper syntax for including essential attributes like src (image path), alt (accessibility text), and width (controlling image dimensions).\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n\n<Thumbnail\n  src=\"/img/graphql/manual/schema/validation-add-check-constraint.png\"\n  alt=\"Add check constraint\"\n  width=\"700px\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Function in Python\nDESCRIPTION: Python function that uses Google Cloud Translate API to translate text. It sets up a FunctionConnector, defines a translate_text function, and starts the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/4-translate-content.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom googleapiclient.discovery import build\n\n# This can also be stored as an environment variable\n# in the connector's .env file.\nAPI_KEY = \"your_cloud_translation_api_key\"\n\nconnector = FunctionConnector()\n\n@connector.register_query\ndef translate_text(target_language: str, content: str) -> str:\n    service = build(\"translate\", \"v2\", developerKey=API_KEY)\n\n    # Make the translation request\n    response = service.translations().list(\n        target=target_language,\n        q=[content]\n    ).execute()\n\n    # Return the translated text\n    return response['translations'][0]['translatedText']\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Supergraph API in Shell\nDESCRIPTION: These commands build the supergraph API and start the Docker container to serve the API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Deleting a Project on Hasura DDN using CLI\nDESCRIPTION: This command deletes a specified project on Hasura DDN. It requires the project name as an argument and can be forced without confirmation using the -f flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project delete <project-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining TypeReference in Markdown\nDESCRIPTION: Defines the structure for a type reference, including notation for nullable values and arrays.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#### TypeReference {#command-typereference}\n\nA reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Example of Showing DataConnectorLink Details in Bash\nDESCRIPTION: Demonstrates how to show details for a DataConnectorLink named 'mydb'.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show DataConnectorLink details for `mydb`\n ddn connector-link show mydb\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn connector build get in Sass Format\nDESCRIPTION: List of options inherited from parent commands that can be used with the ddn connector build get command. These options control aspects like output format, request timeout, and logging level.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example in Tip Admonition\nDESCRIPTION: Simple JavaScript code example used within a tip admonition block to demonstrate how code appears within different admonition types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Float Array Data\nDESCRIPTION: A large array of comma-separated floating point numbers with high precision (up to 9 decimal places). The numbers appear to be normalized with values ranging approximately between -0.2 and 0.2.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/vector-search.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0.00489531, 0.10663077, 0.041752383, -0.021700252, -0.008103259, 0.0049574412, -0.01675589, -0.020182934\n```\n\n----------------------------------------\n\nTITLE: Building Local Supergraph\nDESCRIPTION: Create a local build of the Hasura DDN supergraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Basic Model Query HTTP Request Format\nDESCRIPTION: HTTP GET request format for fetching all resources from a model with all fields included.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/json-api/queries/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/jsonapi/<subgraph-name>/<model-name>\n```\n\n----------------------------------------\n\nTITLE: Defining DataConnectorArgumentName in Markdown\nDESCRIPTION: Defines the structure for a data connector argument name, which is represented as a string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### DataConnectorArgumentName {#command-dataconnectorargumentname}\n\nThe name of an argument as defined by a data connector.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Basic Print Access Token Command\nDESCRIPTION: The basic syntax for printing the access token to STDOUT using the DDN CLI.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth print-access-token [flags]\n```\n\n----------------------------------------\n\nTITLE: Recording the Project API URL in Hasura Control Plane\nDESCRIPTION: This command registers the Project API's ingress URL with Hasura's Control Plane. It associates the URL with the current project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/self-hosted/kubernetes-self-hosted.mdx#2025-04-17_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-self-hosted-engine-url <ingress-url>\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Specific Notification Subscription in GraphQL\nDESCRIPTION: This subscription query filters notifications for a specific user ID (123) and returns their ID, creation timestamp, and message content. The subscription will automatically update whenever new notifications for this user are added to the data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/subscriptions/select-unique.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription UserNotificationSubscription {\n  notifications(where: { user_id: { _eq: 123 } }) {\n    id\n    created_at\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in Docusaurus with JSX\nDESCRIPTION: Example of how to import and use the Tabs and TabItem components to create tabbed content in Docusaurus documentation. Shows how to set up tabs with Console and API instruction options.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/tabs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs className=\"api-tabs\">\n  <TabItem value=\"console\" label=\"Console\">\n    Click the `Reload` button in the `Remote Schema` section on the Hasura Console.\n  </TabItem>\n  <TabItem value=\"api\" label=\"API\">\n    Make a request to the [reload_remote_schema](#) API.\n  </TabItem>\n</Tabs>;\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn plugins list\nDESCRIPTION: Available options specific to the ddn plugins list command. These flags modify the behavior of the command, such as preventing index updates or displaying help information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dont-update-index   Don't update the plugin index local cache, only show the list\n-h, --help                help for list\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Introspection\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn connector introspect' command, including log level, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Command to authenticate the Hasura DDN CLI by launching a browser login window\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-graphql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Displaying Engine Startup Error for Invalid Metadata Files\nDESCRIPTION: This text snippet shows an error output when the engine fails to start due to invalid or non-existent metadata files. It indicates a file system error occurred while attempting to build the engine state.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nError while starting up the engine: failed to build engine state - No such file or directory (os error 2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Generator Prefix in YAML\nDESCRIPTION: YAML configuration to add metadata generator prefix in the Subgraph config to maintain the earlier behavior of adding subgraph name as a prefix.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: my_subgraph\n  generator:\n    rootPath: .\n    graphqlRootFieldPrefix: my_subgraph_\n    graphqlTypeNamePrefix: My_subgraph_\n  envFile: .env.my_subgraph.local\n  ...\n```\n\n----------------------------------------\n\nTITLE: Repository structure for existing connectors\nDESCRIPTION: This section provides the required directory structure for existing connectors in the `ndc-hub` repository. This helps in identifying the location of the necessary files for updating connectors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"registry/\\n  ├── [namespace]/\\n  │   ├── [connector-name]/\\n  │   │   ├── releases/\\n  │   │   │   ├── [version]/\\n  │   │   │   │   └── connector-packaging.json\\n  │   │   ├── logo.(png|svg)\\n  │   │   └── README.md\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Connector URLs in .env.cloud - ENV\nDESCRIPTION: This snippet configures the '.env.cloud' file for the 'Products' team by adding necessary connection details obtained from the shared connector repository.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/connector-reusability.mdx#2025-04-17_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nAPP_MY_POSTGRES_AUTHORIZATION_HEADER=\"Bearer <authorization-header>\"\nAPP_MY_POSTGRES_READ_URL=\"http://<build-id>.gcp.postgres.ndc.internal/deployment/<uuid>-read\"\nAPP_MY_POSTGRES_WRITE_URL=\"http://<build-id>.gcp.postgres.ndc.internal/deployment/<uuid>-write\"\nAPP_MY_POSTGRES_HASURA_SERVICE_TOKEN_SECRET=\"<hasura-service-token-secret>\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Upgrade Command Options\nDESCRIPTION: Available command-line options specific to the upgrade command.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for upgrade\n    --version string   Version to be upgraded\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options\nDESCRIPTION: These options are inherited from parent operations and are available for the `ddn relationship add` command. They configure aspects such as log level, prompt behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Applying Supergraph Builds\nDESCRIPTION: This sequence of bash commands retrieves a list of available supergraph builds and applies a selected build based on its version. The prerequisite is having a list of builds from the previous command, and inputs are provided via CLI arguments.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/01-create-a-project.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build get\n```\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Launching DDN Console for Local Development\nDESCRIPTION: This bash command starts the DDN console for local development, allowing you to query your data.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Authenticating the CLI with Hasura DDN\nDESCRIPTION: Command to authenticate the CLI with Hasura DDN, which launches a browser window for login.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-storage.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Updating TypePermissions for Public Access in Hasura DDN\nDESCRIPTION: Example of updating TypePermissions to specify which fields of the Events model are accessible to public and admin roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/tutorials/special-roles.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Events\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - id\n          - owner_id\n          - created_at\n          - updated_at\n          - is_live\n          - title\n          - date\n          - description\n    - role: public\n      output:\n        allowedFields:\n          - id\n          - is_live\n          - title\n          - date\n          - description\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Document References in Markdown\nDESCRIPTION: Shows how to create relative path links to other documents within the documentation. This approach uses standard Markdown syntax with relative paths to reference other MDX documents.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Get started With Hasura Cloud](../relative/path/to/getting-started-document.mdx)\n\n[Remote Schemas](../relative/path/to/remote-schemas-document.mdx)\n```\n\n----------------------------------------\n\nTITLE: Converting Video to WebM using FFmpeg\nDESCRIPTION: Command to convert and compress MP4 videos to WebM format using FFmpeg with specific quality settings. Uses VP9 codec with a CRF value of 55 for balanced quality and file size.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nffmpeg -i <ORIGINAL>.mp4 -c vp9 -b:v 0 -crf 55 <DESIRED_FINAL_FILENAME>.webm\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ConnectorBuild Deletion\nDESCRIPTION: Options specific to the 'ddn connector build delete' command. Currently, only includes the help flag to display command usage information.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available flags and options specific to the subgraph delete command including CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for delete\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph Without Connectors\nDESCRIPTION: Command to create a supergraph build on DDN without building the related connectors. It includes options for specifying the supergraph file, environment file, and project name.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/recipes/project-config/independent-connector-deployment.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --no-build-connectors \\\n  --supergraph supergraph.yaml \\\n  --env-file .env.cloud \\\n  --project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Opening your development console:\nDESCRIPTION: This Bash command opens the development console for local testing and queries within the Hasura environment.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Review Type Definition in Hasura DDN\nDESCRIPTION: This GraphQL code snippet defines a 'Review' type in Hasura DDN. The type includes fields such as 'id', 'productId', 'rating', and 'comment'. It illustrates a possible entity in DDN that cannot yet be extended with types from other Apollo subgraphs.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/graphql-api/apollo-federation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Review {\n  id: ID!\n  productId: ID!\n  rating: Int!\n  comment: String\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PR Review Checklist in Markdown\nDESCRIPTION: A quick markdown checklist of essential items to verify when reviewing documentation PRs, including formatting, links, and content checks\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/checklist.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Check for spelling or grammatical errors.\n- [ ] Check that `<h1>` is title case.\n- [ ] Check that `<h2>`s and below are sentence case.\n- [ ] Check that Hasura features (e.g., Console `||` Actions) are title case.\n- [ ] Check for broken internal links.\n- [ ] Check for broken external links.\n- [ ] Check for broken images.\n- [ ] Check for broken (questionably rendered) code snippets.\n```\n\n----------------------------------------\n\nTITLE: Importing Thumbnail Component in JavaScript\nDESCRIPTION: This code snippet imports the Thumbnail component from the specified path in the project. It allows for the use of the Thumbnail component in rendering graphical content within the documentation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/deployment/hasura-ddn/tutorial/partials/graphQL/_deployment-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from \"@site/src/components/Thumbnail\";\n```\n\n----------------------------------------\n\nTITLE: Creating Basic External Links in Markdown\nDESCRIPTION: Demonstrates how to create an external link to Hasura Cloud using Markdown syntax. This syntax wraps the link text in square brackets followed by the URL in parentheses.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Hasura Cloud](https://cloud.hasura.io/signup/)\n```\n\n----------------------------------------\n\nTITLE: Command Options for SupergraphBuild Deletion\nDESCRIPTION: These are the available options for the 'ddn supergraph build delete' command, including flags for CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for delete\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists the options inherited from parent commands that can be used with 'ddn connector-link show', including logging, output format, and timeout configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Examples of Initializing Supergraph Project\nDESCRIPTION: These examples demonstrate how to initialize a Supergraph project directory with default and custom subgraph names.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a new Supergraph project directory with a default subgraph 'app'\n ddn supergraph init <path-to-project-dir>\n\n# Initialize a new Supergraph project directory with a subgraph 'mysg'\n ddn supergraph init <path-to-project-dir> --create-subgraph mysg\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with upgrade-model-v1-to-v2, including logging level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Zones Using Azure CLI\nDESCRIPTION: Command to retrieve Azure availability zones mapping for a specific region using REST API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz rest --method get \\\n  --uri '/subscriptions/{subscriptionId}/locations?api-version=2022-12-01' \\\n  --query 'value[?name==`eastus` && availabilityZoneMappings != `null`].{displayName: displayName, name: name, availabilityZoneMappings: availabilityZoneMappings}'\n```\n\n----------------------------------------\n\nTITLE: Using Named Contexts for Supergraph Builds in Bash\nDESCRIPTION: Demonstrates how to use named contexts to switch between different deployment scenarios when creating supergraph builds.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --context staging  # will use cloudEnvFile from staging context, e.g. .env.stg\nddn supergraph build create --context prod  # will use cloudEnvFile from prod context, e.g. .env.prod\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in YAML\nDESCRIPTION: Example configuration for JWT authentication, including claims configuration, token location, and key settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\naudience: null\nissuer: null\nallowedSkew: null\nclaimsConfig:\n  namespace:\n    claimsFormat: Json\n    location: /claims.jwt.hasura.io\ntokenLocation:\n  type: BearerAuthorization\nkey:\n  fixed:\n    algorithm: HS256\n    key:\n      value: token\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options\nDESCRIPTION: Common options inherited from parent commands, including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Command line options inherited from parent operations including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build\nDESCRIPTION: Applies the integrated build to make changes available\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\nLANGUAGE: sh\nCODE:\n```\nddn subgraph build apply <subgraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Scalar Filter Example in JSON\nDESCRIPTION: Examples of using scalar boolean expressions for filtering with is_null and equals operators.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"first_name\": { \"_is_null\": true } }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"last_name\": { \"equals\": \"Bruce\" } }\n```\n\n----------------------------------------\n\nTITLE: Opening your development console\nDESCRIPTION: This command opens the development console in local mode, allowing developers to interact with the application and test queries against the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Using ddn connector list Command in Bash\nDESCRIPTION: The basic syntax for using the ddn connector list command to list available versions of connectors.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector list [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Hasura DDN Docs for Production\nDESCRIPTION: Command to build the documentation for production deployment, generating static content in the 'build' directory that can be hosted on any static hosting service.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Expected response from the query:\nDESCRIPTION: This JSON object represents the expected response from the GraphQL query, containing the transformed name in uppercase.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"shoutName\": \"ALICE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura Docs Development Environment\nDESCRIPTION: Quick setup commands to clone the repository, install dependencies, and start the development server.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/ddn-docs.git\ncd ddn-docs\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Hasura DDN Docs\nDESCRIPTION: Command to start a local development server that provides live preview of the documentation with hot reloading for changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Operations\nDESCRIPTION: Options that are inherited from parent commands, including logging configuration, prompt settings, output format options, and request timeout parameters.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Re-adding Relationship in DDN\nDESCRIPTION: This command adds a relationship again after deleting the existing one, useful for updating relationships to reflect changes in the data source.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nddn relationship add <connector_link_name> <collection_name>\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for Users\nDESCRIPTION: GraphQL query to fetch user data including userId, name, and age\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-clickhouse.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    userId\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Data\nDESCRIPTION: cURL command to verify the seeded data in the users table.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-turso.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -X POST 'https://<db-name>-<your-username>.turso.io/v2/pipeline' \\\n    -H 'Authorization: Bearer <auth-token>' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"requests\": [\n        {\n          \"type\": \"execute\",\n          \"stmt\": {\n            \"sql\": \"SELECT * FROM users\"\n          }\n        },\n        {\n          \"type\": \"close\"\n        }\n      ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Adding Oracle Table as a Model\nDESCRIPTION: Command to track a table from the Oracle database as a model in the Hasura DDN metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-oracle.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nddn models add my_oracle \"EXAMPLE.USERS\"\n```\n\n----------------------------------------\n\nTITLE: Creating Base Supergraph Build\nDESCRIPTION: Creates initial build of the cloud parent project as foundation for future subgraph builds\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Custom Heading ID Implementation\nDESCRIPTION: Shows how to implement custom heading IDs using the kebab-case format with a practical example.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Step 1: Create a Hasura Cloud project {#create-hasura-project-aws-rds-aurora}\n\nOn the Hasura Cloud dashboard, create a new project:\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Stripe Resources\nDESCRIPTION: Command to show which Stripe API resources are available and their status in the current project.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn connector show-resources my_stripe\n```\n\n----------------------------------------\n\nTITLE: Setting Up macOS Persistent Completions\nDESCRIPTION: Configures permanent DDN CLI completions for macOS systems using Homebrew's zsh site-functions directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\nddn completion zsh > $(brew --prefix)/share/zsh/site-functions/_ddn\n```\n\n----------------------------------------\n\nTITLE: Creating Local Hasura DDN Build\nDESCRIPTION: Generate a local build of the Hasura DDN project, which creates JSON files in the engine/build directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Options\nDESCRIPTION: Command-line options inherited from parent operations, including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Auth Logout Inherited Options\nDESCRIPTION: Options inherited from parent commands including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_auth_logout.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA-based JWT Authentication with JWKs URL\nDESCRIPTION: This configuration demonstrates how to set up JWT authentication using RSA algorithm with a JWKs URL for retrieving the public key.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        jwkFromUrl: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting DuckDB Database\nDESCRIPTION: Re-introspects the DuckDB database after schema changes to update Hasura metadata.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-duckdb.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nddn connector introspect my_duckdb\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAPI Endpoint\nDESCRIPTION: Execute a GraphQL query to fetch data from the integrated OpenAPI endpoint.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  getStoreGetOrderById(orderId: 10) {\n    complete\n    id\n    petId\n    quantity\n    shipDate\n    status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hasura DDN Docs\nDESCRIPTION: Command to install all necessary dependencies for the Hasura DDN documentation project using Yarn package manager.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Installing Docs Dependencies\nDESCRIPTION: Commands to navigate to the docs directory and install required dependencies using Yarn.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ddn-docs && yarn install\n```\n\n----------------------------------------\n\nTITLE: Showing Connector Resources using DDN CLI (Go)\nDESCRIPTION: This command shows the resources discovered from the 'my_go' connector. It lists the available functions and resources exposed by the connector.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"ddn connector show-resources my_go\"\n```\n\n----------------------------------------\n\nTITLE: Using ddn connector build get Command in Bash\nDESCRIPTION: The basic command syntax for retrieving ConnectorBuild information using the DDN CLI. This command can retrieve details of a specific ConnectorBuild when provided with a ConnectorBuild ID.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build get [connector-build-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server using npm from the simple-plugin directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration\nDESCRIPTION: Environment variable configuration for database connection\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-project-v2.mdx#2025-04-17_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nCONNECTION_URI=<your_pg_url>\n```\n\n----------------------------------------\n\nTITLE: TypePermissions Configuration\nDESCRIPTION: YAML configuration for defining type-level permissions for different user roles.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Orders\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - createdAt\n          - deliveryDate\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n    - role: user\n      output:\n        allowedFields:\n          - createdAt\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n```\n\n----------------------------------------\n\nTITLE: Markdown Import Statement\nDESCRIPTION: Import statement for the Thumbnail component used throughout the documentation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/project-management/console-collaborator-comments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Thumbnail from \"@site/src/components/Thumbnail\";\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Model to DDN\nDESCRIPTION: Adds the 'createUser' model to the DDN connector for MongoDB.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_mongo createUser\n```\n\n----------------------------------------\n\nTITLE: Creating Globals Subgraph\nDESCRIPTION: Command to create a new globals subgraph on a DDN project\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/project-configuration/upgrading-project-config/upgrade-supergraph-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph create globals --project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Native Query\nDESCRIPTION: CLI command to delete a specific Native Query from the connector configuration\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/postgresql/native-operations/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn connector plugin --connector my_subgraph/connector/chinook_pg/connector.yaml -- \\\n  native-operation delete --name artist_by_name_between --kind query\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionName in Markdown\nDESCRIPTION: Defines the structure for a function name, which is represented as a string.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### FunctionName {#command-functionname}\n\nThe name of a function backing the command.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Adding Command to DDN Connector\nDESCRIPTION: This command adds a new 'insert_users' command to the 'my_pg' PostgreSQL connector in DDN.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_pg insert_users\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare Worker Project - Bash\nDESCRIPTION: Command to create a new Cloudflare Worker project using the allowlist plugin template\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/allowlist/how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest allowlist-plugin -- --template https://github.com/hasura/engine-plugin-allowlist\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes\nDESCRIPTION: Command to push local changes to the remote repository.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <name-of-your-branch>\n```\n\n----------------------------------------\n\nTITLE: Configuring POST Authentication Webhook Headers in YAML\nDESCRIPTION: Example configuration for headers and body to be sent to the POST authentication webhook.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  forward: '*'\n  additional:\n    user-agent: hasura-ddn\nbody:\n  headers:\n    forward:\n      - Authorization\n    additional: {}\n```\n\n----------------------------------------\n\nTITLE: Cloning Hasura Docs Repository\nDESCRIPTION: Command to clone the Hasura documentation repository.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/ddn-docs.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Level Example\nDESCRIPTION: Example of markdown level 1 heading syntax used in documentation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/headings.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#\n```\n\n----------------------------------------\n\nTITLE: Command Options - DDN CLI Fix Traces Environment Variables\nDESCRIPTION: Lists the specific options available for the fix-traces-env-var command, including the required project directory flag.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for fix-traces-env-var\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Fields in JSON\nDESCRIPTION: Describes how nullable fields are defined within the 'object_types' by wrapping the type in a 'nullable' descriptor, allowing for distinction between nullable and non-nullable types.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/qdrant/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vector\": {\n    \"type\": {\n      \"type\": \"nullable\",\n      \"underlying_type\": {\n        \"type\": \"array\",\n        \"element_type\": {\n          \"type\": \"named\",\n          \"name\": \"Float\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Phased Deprecation Architecture Diagram in Mermaid\nDESCRIPTION: A flow diagram illustrating the phased deprecation approach where features are gradually migrated from Hasura v2 to DDN API, with both systems accessing the same database during transition.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/upgrade/guide.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[API Consumers] --> B[API Router]\n    B -->|Migrated Features| C[Hasura DDN API]\n    B -->|Remaining Features| D[Hasura v2 API]\n    C --> E[Database]\n    D --> E\n    D -.->|Gradual Migration| C\n    style A fill:#ffffff,stroke:#000000,stroke-width:2px,color:#000000\n    style B fill:#f0ad4e,stroke:#000000,stroke-width:2px,color:#000000\n    style C fill:#5cb85c,stroke:#000000,stroke-width:2px,color:#000000\n    style D fill:#d9534f,stroke:#000000,stroke-width:2px,color:#000000\n    style E fill:#ffffff,stroke:#000000,stroke-width:2px,color:#000000\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: Create a new local Hasura DDN project and navigate into the project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-openapi.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build the documentation for testing.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Examples of ddn context get Command Usage\nDESCRIPTION: Examples showing how to retrieve the Project name and Supergraph config file path from the context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the Project name set in the context\n ddn context get project\n\n# Get the Supergraph config file path set in the context\n ddn context get supergraph\n```\n\n----------------------------------------\n\nTITLE: Basic Explain API Request Structure\nDESCRIPTION: Example of a basic POST request to the Explain API endpoint showing the required format with query and optional variables.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/observability/built-in/explain/api-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/explain HTTP/1.1\nContent-Type: application/json\n\n{\n  \"query\": \"<GraphQL query>\",\n  \"variables\": {\n    \"var1\" : \"...\",\n    \"var2\" : \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Source Files for the Plugin\nDESCRIPTION: Command to create the source directory and initial TypeScript files for the Hasura plugin.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nmkdir src && touch src/index.ts && touch src/types.ts\n```\n\n----------------------------------------\n\nTITLE: Opening Local Hasura Console\nDESCRIPTION: This command opens the local Hasura console for interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-bigquery.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Initialize Supergraph Project\nDESCRIPTION: Create and navigate to a new supergraph project directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init mysupergraph\ncd mysupergraph\n```\n\n----------------------------------------\n\nTITLE: Fixed Recursive Object Types with Nullable Reference\nDESCRIPTION: Example showing how to fix the infinite recursion error by making at least one of the references nullable. This resolves the build error that would occur for projects with compatibility date of 2025-02-20 or later.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"Person\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"Int!\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"String!\"\n      },\n      {\n        \"name\": \"bestFriend\",\n        \"type\": \"Friend\" // Now nullable, breaking the infinite recursion\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project Directory for Hasura Plugin Tutorial\nDESCRIPTION: Command to create a new directory for the Hasura plugin tutorial project and navigate into it.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/tutorials/simple-engine-plugins-ts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir plugin-tutorial && cd plugin-tutorial\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Local Project in DDN\nDESCRIPTION: Creates a new local project directory and changes into it, setting up the necessary files and structure.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph init my-project && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Validate DDN CLI Installation\nDESCRIPTION: Verify that the DDN CLI is installed correctly on the system.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn doctor\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for RESTified Endpoints Plugin\nDESCRIPTION: Docker compose service configuration for setting up the RESTified Endpoints plugin with environment variables and volume mapping.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrestified-endpoints:\n  build:\n    context: https://github.com/hasura/engine-plugin-restified-endpoint.git\n  ports:\n    - 8787:8787\n  environment:\n    - OTEL_EXPORTER_OTLP_ENDPOINT=https://gateway.otlp.hasura.io:443/v1/traces\n    - OTEL_EXPORTER_PAT=your-pat-here\n    - GRAPHQL_SERVER_URL=http://engine:3000\n    - HASURA_DDN_PLUGIN_CONFIG_PATH=plugin_config\n  volumes:\n    - ./restified-endpoints-config:/app/plugin_config\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Command in Bash\nDESCRIPTION: This command runs the upgrade-object-boolean-expression-types codemod on the supergraph defined in the current context.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-object-boolean-expression-types [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Project\nDESCRIPTION: Command to initialize a new Hasura DDN project in the current directory.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/plugins/restified-endpoints/how-to.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nddn project init .\n```\n\n----------------------------------------\n\nTITLE: Example Terms in Documentation Writing\nDESCRIPTION: Demonstrates preferred pronouns and terms to use in documentation, showing usage of second person tense and specific terminology preferences.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/style/semantics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nyou, your, and we, our\n```\n\n----------------------------------------\n\nTITLE: Determining Column Types for ClickHouse Query\nDESCRIPTION: SQL snippet to determine the column types of a query using ClickHouse's toTypeName function. This helps in accurately defining the return type in the JSON configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/clickhouse/native-operations/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * APPLY toTypeName\nFROM (\n -- your SQL here\n) q LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Script Execution Command\nDESCRIPTION: Basic command structure for running the SEO improvement script with optional parameters\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode improve-seo.js [target-path] [additional-text]\n```\n\n----------------------------------------\n\nTITLE: Fetching the latest CLI version from GitHub API\nDESCRIPTION: TypeScript function that retrieves the latest CLI version from the GitHub API. It uses environment variables for the URL and authentication token, makes a fetch request to the GitHub API, and returns the tag name of the latest release.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getLatestVersion = async (): Promise<string | null> => {\n  const URL = process.env.V3_CLI_RELEASE_URL;\n  const TOKEN = process.env.GH_CLI_VERSION_TOKEN;\n\n  // We'll appease the compiler of any non-string possibilities\n  if (!URL || !TOKEN) {\n    throw new Error(\n      `Environment variables V3_CLI_RELEASE_URL and GH_CLI_VERSION_TOKEN must be defined in this utility's .env`\n    );\n  }\n\n  try {\n    const response = await fetch(URL, {\n      headers: {\n        Authorization: `Bearer ${TOKEN}`,\n        Accept: 'application/vnd.github+json',\n        'X-Github-Api-Version': '2022-11-28',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error fetching latest release: ${response.statusText}`);\n    }\n\n    const release = await response.json();\n    return release.tag_name;\n  } catch (error) {\n    console.error('Error retrieving latest release:', error);\n    return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt package for Go\nDESCRIPTION: Commands to add the bcrypt package and its dependencies to the go.mod file for the Go implementation.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/business-logic/tutorials/6-validate-credentials.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo get golang.org/x/crypto/bcrypt\ngo get golang.org/x/net/idna@v0.26.0\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server for testing changes.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options - DDN CLI SASS\nDESCRIPTION: Lists the inherited options from parent operations including log level control, prompting behavior, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_command.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example Usage - DDN CLI Fix Traces Environment Variables\nDESCRIPTION: Demonstrates how to use the command in the current directory to fix environment variables for connector trace configuration.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Fix env var used for configuring traces for connector\n ddn codemod fix-traces-env-var --dir .\n```\n\n----------------------------------------\n\nTITLE: Token Location Configuration: BearerAuthorization (YAML)\nDESCRIPTION: This YAML snippet configures Hasura to extract the JWT from the `Authorization` header using the `Bearer` scheme. It requires the `type` to be set to `BearerAuthorization`.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntokenLocation: \n  type: BearerAuthorization\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for ddn supergraph build get in SASS\nDESCRIPTION: These are the specific options available for the 'ddn supergraph build get' command, including flags for CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Adding Stripe GetProducts Command to DDN\nDESCRIPTION: Command to add the GetProducts endpoint from Stripe's API as a command in the Hasura DDN project, generating an HML file.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-stripe.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nddn command add my_stripe GetProducts\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Queries in MongoDB Connector\nDESCRIPTION: This command creates a new directory to store native queries for a MongoDB connector in a subgraph.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p <my_subgraph>/connector/<connector_name>/native_queries/\n```\n\n----------------------------------------\n\nTITLE: Native Query Arguments Example\nDESCRIPTION: This JSON snippet shows an example of how to define arguments for a Native Query.  The arguments 'abs' and 'binarySize' are defined, specifying their types as 'int' and 'string' respectively. These arguments can be referenced within the pipeline using placeholders.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/reference/connectors/mongodb/native-operations/syntax.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"arguments\": {\n    \"abs\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"binarySize\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Labels in Markdown Frontmatter\nDESCRIPTION: Example of setting sidebar label and position using frontmatter in MDX files\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: Creating actions\nsidebar_position: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: Start the local Hasura DDN Engine and Snowflake connector services using Docker.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/how-to-build-with-ddn/with-snowflake.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Cloning the ndc-hub repository using Git\nDESCRIPTION: This command clones the ndc-hub repository from GitHub. This is the first step in contributing a new data connector or updating an existing one.\nSOURCE: https://github.com/hasura/ddn-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"git clone https://github.com/hasura/ndc-hub.git\"\n```"
  }
]