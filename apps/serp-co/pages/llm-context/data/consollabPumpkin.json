[
  {
    "owner": "consol-lab",
    "repo": "pumpkin",
    "content": "TITLE: Installing Pumpkin via Cargo\nDESCRIPTION: Commands to install Pumpkin solver using Cargo package manager. The first command adds it as a library dependency while the second installs the CLI tool.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add pumpkin-solver\ncargo install pumpkin-solver\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Pumpkin\nDESCRIPTION: Instructions for cloning the repository and building the project from source. Requires Rust 1.72.1 or higher.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ConSol-Lab/pumpkin\ncargo build           # Creates a non-optimized build with debug info\ncargo build --release # Creates an optimized build\n```\n\n----------------------------------------\n\nTITLE: Building Python Module with Maturin\nDESCRIPTION: Command to build and install the pumpkin_py module in the current Python environment using maturin.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/pumpkin-py/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmaturin develop\n```\n\n----------------------------------------\n\nTITLE: Defining Atomic Constraints in DRCP Literal Mapping File\nDESCRIPTION: Demonstrates the format of a .lits file, which maps integer identifiers to atomic constraints. Each line contains an identifier and an atomic constraint.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/drcp-format/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1 [x1 >= 1]\n2 [x2 <= 2]\n```\n\n----------------------------------------\n\nTITLE: Specifying Inference Step in DRCP Proof\nDESCRIPTION: Shows the format of an inference step in a DRCP proof. It includes a step ID, premises, propagated constraint, and optional constraint tag and filtering algorithm.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/drcp-format/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ni <step_id> <premises> [0 <propagated>] [c:<constraint tag>] [l:<filtering algorithm>]\n```\n\n----------------------------------------\n\nTITLE: Defining Nogood Step in DRCP Proof\nDESCRIPTION: Illustrates the format of a nogood step in a DRCP proof. It includes a step ID, atomic constraint IDs, and an optional propagation hint.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/drcp-format/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nn <step_id> <atomic constraint ids> [0 <propagation hint>]\n```\n\n----------------------------------------\n\nTITLE: Running NQueens Example\nDESCRIPTION: Command to execute the nqueens example program with a board size parameter of 5.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/pumpkin-py/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython examples/nqueens.py 5\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for MiniZinc Challenge with Pumpkin\nDESCRIPTION: This command builds a Docker image for the MiniZinc challenge using the Dockerfile in the minizinc directory. It should be run from the project root (Cargo workspace root).\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/minizinc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t <image>:<tag> -f minizinc/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Specifying Deletion Step in DRCP Proof\nDESCRIPTION: Shows the format of a deletion step in a DRCP proof, which indicates a nogood will no longer be used in deriving new nogoods.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/drcp-format/README.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nd <step_id>\n```\n\n----------------------------------------\n\nTITLE: Concluding DRCP Proof with Unsatisfiability\nDESCRIPTION: Demonstrates how to conclude a DRCP proof by claiming the problem is unsatisfiable.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/drcp-format/README.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nc UNSAT\n```\n\n----------------------------------------\n\nTITLE: Concluding DRCP Proof with Objective Bound\nDESCRIPTION: Shows how to conclude a DRCP proof by claiming a dual bound for the objective variable using an atomic constraint ID.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/drcp-format/README.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nc <objective bound>\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: Command to generate documentation for the project without dependencies.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo doc --no-deps\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks\nDESCRIPTION: Command to install Git pre-commit hooks for maintaining code standards.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncp .githooks/pre-commit .git/hooks\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Rust Nightly Formatter\nDESCRIPTION: Commands to install the nightly toolchain for Rust formatting and running the formatter.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrustup toolchain install --component rustfmt -- nightly\ncargo +nightly fmt\n```\n\n----------------------------------------\n\nTITLE: VSCode Rust Analyzer Configuration\nDESCRIPTION: JSON configuration for VSCode settings to prevent unnecessary PyO3 rebuilds by configuring rust-analyzer to use a separate directory.\nSOURCE: https://github.com/consol-lab/pumpkin/blob/main/pumpkin-py/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rust-analyzer.server.extraEnv\": {\n        \"CARGO_TARGET_DIR\": \"target/analyzer\"\n    },\n    \"rust-analyzer.check.extraArgs\": [\n        \"--target-dir=target/analyzer\"\n    ]\n}\n```"
  }
]