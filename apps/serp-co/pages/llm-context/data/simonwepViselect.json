[
  {
    "owner": "simonwep",
    "repo": "viselect",
    "content": "TITLE: Implementing Visual Selection with Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic selection area using the vanilla Viselect package. It creates divs in container elements, initializes the SelectionArea component, and handles selection events.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/quickstart.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectionArea from 'https://cdn.jsdelivr.net/npm/@viselect/vanilla/dist/viselect.mjs';\n// or import SelectionArea from '@viselect/vanilla';\n\n// Generate some divs to select later on\n[\n  ['.container.purple', 33],\n  ['.container.blue', 33]\n].forEach(([selector, items]) => {\n  const container = document.querySelector(selector);\n\n  for (let i = 0; i < items; i++) {\n    container.appendChild(document.createElement('div'));\n  }\n});\n\n// Instantiate the selection area\nconst selection = new SelectionArea({\n  selectables: ['.container > div'], // Specifies the elements that can be selected\n  boundaries: ['.container'], // Specifies the boundaries of each selection\n  selectionAreaClass: 'selectionArea' // Specifies the class to be added to the selection area\n}).on('start', ({ store, event }) => {\n  if (!event.ctrlKey && !event.metaKey) {\n    store.stored.forEach(el => el.classList.remove('selected'));\n    selection.clearSelection();\n  }\n}).on('move', ({ store: { changed: { added, removed } } }) => {\n  added.forEach(el => el.classList.add('selected'));\n  removed.forEach(el => el.classList.remove('selected'));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Viselect for Area Selection\nDESCRIPTION: Shows how to instantiate and configure a SelectionArea with event handlers for selecting elements in containers. Includes logic for keeping or clearing selections based on modifier keys.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vanilla.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { SelectionArea } from '@viselect/vanilla';\nimport './styles.css';\n\n// Generate some divs to select later\n[\n  ['.container.blue', 33],\n  ['.container.green', 33]\n].forEach(([selector, items]) => {\n  const container = document.querySelector(selector);\n\n  for (let i = 0; i < items; i++) {\n    container.appendChild(document.createElement('div'));\n  }\n});\n\n// Instantiate the selection area\nconst selection = new SelectionArea({\n  selectables: ['.container > div'], // Specifies the elements that can be selected\n  boundaries: ['.container'], // Specifies the boundaries of each selection\n}).on('start', ({ store, event }) => {\n  if (!event.ctrlKey && !event.metaKey) { // Clear selection if no modifier key is pressed\n    store.stored.forEach(el => el.classList.remove('selected'));\n    selection.clearSelection();\n  }\n}).on('move', ({ store: { changed: { added, removed } } }) => {\n  added.forEach(el => el.classList.add('selected'));\n  removed.forEach(el => el.classList.remove('selected'));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionArea Component in React\nDESCRIPTION: A complete React component implementation using the SelectionArea component from @viselect/react. This example demonstrates how to set up selection functionality including handling selection events, tracking selected items, and managing state.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/react.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SelectionArea, SelectionEvent} from '@viselect/react';\nimport React, {FunctionComponent, useState} from 'react';\nimport './styles.css';\n\nconst App: FunctionComponent = () => {\n  const [selected, setSelected] = useState<Set<number>>(() => new Set());\n\n  const extractIds = (els: Element[]): number[] =>\n    els.map(v => v.getAttribute('data-key'))\n      .filter(Boolean)\n      .map(Number);\n\n  const onStart = ({ event, selection }: SelectionEvent) => {\n    if (!event?.ctrlKey && !event?.metaKey) {\n      selection.clearSelection();\n      setSelected(() => new Set());\n    }\n  };\n\n  const onMove = ({ store: { changed: { added, removed } } }: SelectionEvent) => {\n    setSelected(prev => {\n      const next = new Set(prev);\n      extractIds(added).forEach(id => next.add(id));\n      extractIds(removed).forEach(id => next.delete(id));\n      return next;\n    });\n  };\n\n  return (\n    <>\n      <SelectionArea className=\"container\"\n               onStart={onStart}\n               onMove={onMove}\n               selectables=\".selectable\">\n        {new Array(42).fill(0).map((_, index) => (\n          <div className={selected.has(index) ? 'selected selectable' : 'selectable'}\n             data-key={index}\n             key={index}/>\n        ))}\n      </SelectionArea>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Viselect with Vue 3 Components\nDESCRIPTION: Example showing how to integrate Viselect into a Vue 3 component using composition API. Demonstrates proper lifecycle management, event handling, and component setup with TypeScript support.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/custom-integration.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div ref=\"container\">\n    <!-- ...elements -->\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { shallowRef, useTemplateRef, watchEffect } from 'vue';\nimport SelectionArea, { SelectionEvent } from '@viselect/vanilla';\n\n// Refs to the container and the instance\nconst container = useTemplateRef('container');\nconst instance = shallowRef<SelectionArea | undefined>();\n\n// Event handlers\nconst beforeStart = (evt: SelectionEvent) => console.log('beforestart', evt);\nconst beforeDrag = (evt: SelectionEvent) => console.log('beforedrag', evt);\nconst start = (evt: SelectionEvent) => console.log('start', evt);\nconst move = (evt: SelectionEvent) => console.log('move', evt);\nconst stop = (evt: SelectionEvent) => console.log('stop', evt);\n\n// Watch container as well as prop and mount instance\nwatchEffect(() => {\n  if (container.value) {\n    instance.value?.destroy();\n    instance.value = new SelectionArea({\n      boundaries: container.value,\n      // ...your options\n    });\n\n    // attach events...\n    instance.value.on('beforestart', beforeStart);\n    instance.value.on('beforedrag', beforeDrag);\n    instance.value.on('start', start);\n    instance.value.on('move', move);\n    instance.value.on('stop', stop);\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete Viselect Configuration Options\nDESCRIPTION: This TypeScript snippet shows the full configuration options available for the SelectionArea constructor. It includes options for the selection area appearance, container settings, selection behavior, triggering mechanisms, scrolling behavior, and additional features.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/quickstart.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst selection = new SelectionArea({\n\n  // Class for the selection-area itself (the element).\n  selectionAreaClass: 'selection-area',\n\n  // Class for the selection-area container.\n  selectionContainerClass: 'selection-area-container',\n\n  // Query selector or dom-node to set up container for the selection-area element.\n  container: 'body',\n\n  // document object - if you want to use it within an embed document (or iframe).\n  // If you're inside of a shadow-dom make sure to specify the shadow root here.\n  document: window.document,\n\n  // Query selectors for elements which can be selected.\n  selectables: [],\n\n  // Query selectors for elements from where a selection can be started from.\n  startareas: ['html'],\n\n  // Query selectors for elements which will be used as boundaries for the selection.\n  // The boundary will also be the scrollable container if this is the case.\n  boundaries: ['html'],\n\n  // Behaviour related options.\n  behaviour: {\n\n    // Specifies what should be done if already selected elements get selected again.\n    //   invert: Invert selection for elements which were already selected\n    //   keep: Keep selected elements (use clearSelection() to remove those)\n    //   drop: Remove stored elements after they have been touched\n    overlap: 'invert',\n\n    // On which point an element should be selected.\n    // Available modes are cover (cover the entire element), center (touch the center) or\n    // the default mode is touch (just touching it).\n    intersect: 'touch',\n\n    // px, how many pixels the point should move before starting the selection (combined distance).\n    // Or specifiy the threshold for each axis by passing an object like {x: <number>, y: <number>}.\n    startThreshold: 10,\n\n    // List of triggers that should cause the selection to begin.\n    // Each element in the list can be one of the following\n    //    - a MouseButton (numbers 0 through 4)\n    //    see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button#value\n    //    - an object of shape { button: MouseButton, modifiers: Modifier[] }\n    //    where a Modifier is ( 'ctrl' | 'meta' | 'alt' | 'shift' )\n    //\n    // To trigger the selection with e.g. <CTRL + SHIFT + LEFT-CLICK> OR <RIGHT-CLICK> the\n    // trigger property should look like\n    //\n    // triggers: [ { button: 0, modifiers: [ \"ctrl\", \"shift\" ] }, 2 ]\n    //\n    // The default value is [0], enabling only the main mouse button (usually left click).\n    // On mac the ctrl will act as the meta key.\n    triggers: [0],\n\n    // Scroll configuration.\n    scrolling: {\n\n      // On scrollable areas the number on px per frame is devided by this amount.\n      // Default is 10 to provide a enjoyable scroll experience.\n      speedDivider: 10,\n\n      // Browsers handle mouse-wheel events differently, this number will be used as\n      // numerator to calculate the mount of px while scrolling manually: manualScrollSpeed / scrollSpeedDivider.\n      manualSpeed: 750,\n\n      // This property defines the virtual inset margins from the borders of the container\n      // component that, when crossed by the mouse/touch, trigger the scrolling. Useful for\n      // fullscreen containers.\n      startScrollMargins: {x: 0, y: 0}\n    }\n  },\n\n  // Additional, built-in features.\n  features: {\n\n    // Enable / disable touch support.\n    touch: true,\n\n    // Range selection.\n    range: true,\n\n    // De-select all if user clicks clicks outside selectables.\n    // Disabled by default because it is not possible to reliably detect if the user clicked on a scrollbar.\n    deselectOnBlur: false,\n\n    // Configuration in case a selectable gets just clicked.\n    singleTap: {\n\n      // Enable single-click selection (Also disables range-selection via shift + ctrl).\n      allow: true,\n\n      // 'native' (element was mouse-event target) or 'touch' (element visually touched).\n      intersect: 'native'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Viselect in a Vue component\nDESCRIPTION: A Vue component using Viselect to create a selectable area with multiple items. It demonstrates how to use the SelectionArea component, handle selection events, and style the selected items.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vue.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SelectionArea class=\"container\"\n                 :options=\"{ selectables: '.selectable' }\"\n                 :onMove=\"onMove\"\n                 :onStart=\"onStart\">\n    <div v-for=\"id of 42\"\n         class=\"selectable\"\n         :key=\"id\" \n         :data-key=\"id\"\n         :class=\"{ selected: selected.has(id) }\"/>\n  </SelectionArea>\n</template>\n\n<script lang=\"ts\" setup>\nimport { SelectionArea, SelectionEvent } from '@viselect/vue';\nimport { reactive } from 'vue';\n\nconst selected = reactive<Set<number>>(new Set());\n\nconst extractIds = (els: Element[]): number[] => {\n  return els.map(v => v.getAttribute('data-key'))\n      .filter(Boolean)\n      .map(Number);\n};\n\nconst onStart = ({ event, selection }: SelectionEvent) => {\n  if (!event?.ctrlKey && !event?.metaKey) {\n    selection.clearSelection();\n    selected.clear();\n  }\n};\n\nconst onMove = ({ store: { changed: { added, removed } } }: SelectionEvent) => {\n  extractIds(added).forEach(id => selected.add(id));\n  extractIds(removed).forEach(id => selected.delete(id));\n};\n</script>\n\n<style>\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  border: 1px dashed #4f5276;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 15px 0;\n  user-select: none;\n}\n\n.container div {\n  height: 50px;\n  width: 50px;\n  margin: 3px;\n  background: rgba(66, 68, 90, 0.075);\n  border-radius: 10px;\n  cursor: pointer;\n}\n\n.container.green div.selected {\n  background: linear-gradient(45deg, #78b2ff, #218ad9);\n}\n\n.container.blue div.selected {\n  background: linear-gradient(45deg, #9e91ef, #5c51b4);\n}\n\n.selection-area {\n  background: rgba(46, 115, 252, 0.11);\n  border: 1px solid rgba(98, 155, 255, 0.85);\n  border-radius: 0.15em;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionArea Component in Preact\nDESCRIPTION: A complete example of how to use the SelectionArea component in a Preact application. This implementation includes state management for selected items and event handlers for selection operations.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/preact.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SelectionArea, SelectionEvent} from '@viselect/preact';\nimport {FunctionalComponent} from 'preact';\nimport {useState} from 'preact/hooks';\nimport './styles.css';\n\nconst App: FunctionComponent = () => {\n  const [selected, setSelected] = useState<Set<number>>(() => new Set());\n\n  const extractIds = (els: Element[]): number[] =>\n    els.map(v => v.getAttribute('data-key'))\n      .filter(Boolean)\n      .map(Number);\n\n  const onStart = ({event, selection}: SelectionEvent) => {\n    if (!event?.ctrlKey && !event?.metaKey) {\n      selection.clearSelection();\n      setSelected(() => new Set());\n    }\n  };\n\n  const onMove = ({store: {changed: {added, removed}}}: SelectionEvent) => {\n    setSelected(prev => {\n      const next = new Set(prev);\n      extractIds(added).forEach(id => next.add(id));\n      extractIds(removed).forEach(id => next.delete(id));\n      return next;\n    });\n  };\n\n  return (\n    <>\n      <SelectionArea className=\"container\"\n               onStart={onStart}\n               onMove={onMove}\n               selectables=\".selectable\">\n        {new Array(42).fill(0).map((_, index) => (\n          <div className={selected.has(index) ? 'selected selectable' : 'selectable'}\n             data-key={index}\n             key={index}/>\n        ))}\n      </SelectionArea>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Viselect with React Components\nDESCRIPTION: Example showing how to integrate Viselect into a React component using hooks. Demonstrates proper lifecycle management with useEffect, event handling, and component setup with TypeScript support.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/custom-integration.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useRef } from 'react';\nimport SelectionArea, { SelectionEvent } from '@viselect/vanilla';\n\nexport const App = () => {\n  const container = useRef<HTMLDivElement>(null);\n  const instance = useRef<SelectionArea | undefined>();\n\n  // Event handlers\n  const beforeStart = (evt: SelectionEvent) => console.log('beforestart', evt);\n  const beforeDrag = (evt: SelectionEvent) => console.log('beforedrag', evt);\n  const start = (evt: SelectionEvent) => console.log('start', evt);\n  const move = (evt: SelectionEvent) => console.log('move', evt);\n  const stop = (evt: SelectionEvent) => console.log('stop', evt);\n\n  // Mount the instance and attach events\n  useEffect(() => {\n    if (container.current) {\n      instance.current?.destroy();\n      instance.current = new SelectionArea({\n        boundaries: container.current,\n        // ...your options\n      });\n\n      // attach events...\n      instance.current.on('beforestart', beforeStart);\n      instance.current.on('beforedrag', beforeDrag);\n      instance.current.on('start', start);\n      instance.current.on('move', move);\n      instance.current.on('stop', stop);\n    }\n\n    return () => instance.current?.destroy();\n  }, []);\n\n  return (\n    <div ref={container}>\n      {/* ...elements */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handlers to Selection Events\nDESCRIPTION: Demonstrates how to bind event handlers to various selection events using the 'on' method. Shows the complete event lifecycle from beforestart to stop.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nselection.on('beforestart', evt => {\n\n  // Use this event to decide whether a selection should take place or not.\n  // For example if the user should be able to normally interact with input-elements you\n  // may want to prevent a selection if the user clicks such a element:\n  // selection.on('beforestart', ({event}) => {\n  //   return event.target.tagName !== 'INPUT'; // Returning false prevents a selection\n  // });\n\n  console.log('beforestart', evt);\n}).on('beforedrag', evt => {\n\n  // Same as 'beforestart' but before a selection via dragging happens.\n  console.log('beforedrag', evt);\n}).on('start', evt => {\n\n  // A selection got initiated, you could now clear the previous selection or\n  // keep it if in case of multi-selection.\n  console.log('start', evt);\n}).on('move', evt => {\n\n  // Here you can update elements based on their state.\n  console.log('move', evt);\n}).on('stop', evt => {\n\n  // Do something with the selected elements.\n  console.log('stop', evt);\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Selecting Elements\nDESCRIPTION: Method to manually select elements using CSS selectors and add them to the store with an option to control event triggering.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nselect(query: SelectAllSelectors, quiet = false): Element[];\n```\n\n----------------------------------------\n\nTITLE: Styling Viselect Selection Areas and Elements\nDESCRIPTION: CSS styling for containers, selectable elements, and selection areas. Defines the appearance of selected elements in different containers and the selection area overlay.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vanilla.md#2025-04-11_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  border: 1px dashed #4f5276;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 15px 0;\n  user-select: none;\n}\n\n.container div {\n  height: 50px;\n  width: 50px;\n  margin: 3px;\n  background: rgba(66, 68, 90, 0.075);\n  border-radius: 10px;\n  cursor: pointer;\n}\n\n.container.green div.selected {\n  background: linear-gradient(45deg, #78b2ff, #218ad9);\n}\n\n.container.blue div.selected {\n  background: linear-gradient(45deg, #9e91ef, #5c51b4);\n}\n\n.selection-area {\n  background: rgba(46, 115, 252, 0.11);\n  border: 1px solid rgba(98, 155, 255, 0.85);\n  border-radius: 0.15em;\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Finger Scroll Handler in JavaScript\nDESCRIPTION: JavaScript implementation to allow users to scroll with two fingers by adding a delay check before initiating selection.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/faq.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on('beforestart', (() => {\n  let timeout = null;\n\n  return ({event}) => {\n\n    // Check if user already tapped inside of a selection-area.\n    if (timeout !== null) {\n\n      // A second pointer-event occured, ignore that one.\n      clearTimeout(timeout);\n      timeout = null;\n    } else {\n\n      // Wait 50ms in case the user uses two fingers to scroll.\n      timeout = setTimeout(() => {\n\n        // OK User used only one finger, we can safely initiate a selection and reset the timer.\n        selection.trigger(event);\n        timeout = null;\n      }, 50);\n    }\n\n    // Never start automatically.\n    return false;\n  };\n})());\n```\n\n----------------------------------------\n\nTITLE: Styling the Visual Selection Components with CSS\nDESCRIPTION: This CSS snippet provides styling for the selection area containers, selectable elements, and visual feedback for selected items. It includes color coding for different container types and styling for the selection area itself.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/quickstart.md#2025-04-11_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  border-radius: 15px;\n  padding: 10px;\n  margin: 15px 0;\n  user-select: none;\n}\n\n.container div {\n  height: 50px;\n  width: 50px;\n  margin: 4px;\n  background: rgba(66, 68, 90, 0.075);\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.container.blue {\n  border: 2px dashed #a8b1ff;\n}\n\n.container.purple {\n  border: 2px dashed #c8abfa;\n}\n\n.container.blue div.selected {\n  background: #5c73e7;\n}\n\n.container.purple div.selected {\n  background: #a879e6;\n}\n\n.selectionArea {\n  background: rgba(102, 110, 255, 0.16);\n  border: 1px solid rgb(62, 99, 221);\n  border-radius: 0.15em;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Selection Options\nDESCRIPTION: Type definitions for selection options including SingleTap, Features, Scrolling, Behaviour, and SelectionOptions interfaces used for configuration.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SingleTap {\n  allow: boolean;\n  intersect: TapMode;\n}\n\ninterface Features {\n  deselectOnBlur: boolean;\n  singleTap: SingleTap;\n  range: boolean;\n  touch: boolean;\n}\n\ninterface Scrolling {\n  speedDivider: number;\n  manualSpeed: number;\n  startScrollMargins: {x: number, y: number};\n}\n\ninterface Behaviour {\n  intersect: Intersection;\n  startThreshold: number | Coordinates;\n  overlap: OverlapMode;\n  scrolling: Scrolling;\n  triggers: Trigger[];\n}\n\ninterface SelectionOptions {\n  selectionAreaClass: string;\n  selectionContainerClass: string | undefined;\n  container: Quantify<string | HTMLElement>;\n  document: Document;\n  selectables: Quantify<string>;\n  startAreas: Quantify<string | HTMLElement>;\n  boundaries: Quantify<string | HTMLElement>;\n  behaviour: Behaviour;\n  features: Features;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Selection\nDESCRIPTION: Method to manually trigger the start of a selection without direct user interaction, useful for programmatic selection initiation.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntrigger(evt: MouseEvent | TouchEvent, silent = true): void;\n```\n\n----------------------------------------\n\nTITLE: Mouse Button Selection Control in JavaScript\nDESCRIPTION: JavaScript implementation to control which mouse buttons can trigger selection events.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/faq.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on('beforestart', (event) => {\n  const allowedButtons = [\n    // See https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n    1, // left click\n    2, // right click\n    4, // mouse wheel / middle button\n  ];\n\n  return allowedButtons.includes(event.event.buttons);\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Selection Prevention in JavaScript\nDESCRIPTION: JavaScript code to prevent selection based on specific conditions like blocked elements or input fields.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/faq.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on('beforestart', ({event}) => {\n  return !event.path.some(item => {\n\n    // item is in this case an element affected by the event-bubbeling.\n    // To exclude elements with class \"blocked\" you could do the following (#73):\n    return item.classList.contains('blocked');\n\n    // If the areas you're using contains input elements you might want to prevent\n    // any out-going selections from these elements (#72):\n    return event.target.tagName !== 'INPUT';\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Text Selection Control with TypeScript\nDESCRIPTION: TypeScript implementation to dynamically control text selection during viselect operations by toggling userSelect style.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/faq.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nselection\n    .on('beforestart', () => document.body.style.userSelect = 'none')\n    .on('stop', () => document.body.style.userSelect = 'unset');\n```\n\n----------------------------------------\n\nTITLE: Constructor for SelectionArea\nDESCRIPTION: Constructor method for instantiating a new SelectionArea with configuration options.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(opt: PartialSelectionOptions): SelectionArea;\n```\n\n----------------------------------------\n\nTITLE: SelectionEvent Interface Definition\nDESCRIPTION: Interface definition for the event object passed to selection event handlers with access to the original event, store, and selection instance.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectionEvent {\n  event: MouseEvent | TouchEvent | null;\n  store: SelectionStore;\n  selection: SelectionArea;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the SelectionArea Component with CSS\nDESCRIPTION: CSS styles for the SelectionArea component and selectable elements. It defines the container layout, styles for selectable items, the appearance of selected items, and the visual style of the selection area itself.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/react.md#2025-04-11_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  border: 1px dashed #4f5276;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 15px 0;\n  user-select: none;\n}\n\n.container div {\n  height: 50px;\n  width: 50px;\n  margin: 3px;\n  background: rgba(66, 68, 90, 0.075);\n  border-radius: 10px;\n  cursor: pointer;\n}\n\ndiv.selected {\n  background: linear-gradient(45deg, #78b2ff, #218ad9);\n}\n\n.selection-area {\n  background: rgba(46, 115, 252, 0.11);\n  border: 1px solid rgba(98, 155, 255, 0.85);\n  border-radius: 0.15em;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SelectionArea instance in Vue component\nDESCRIPTION: Demonstrates how to access the SelectionArea instance using template refs in a Vue component. This allows direct interaction with the SelectionArea API.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vue.md#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SelectionArea \n    class=\"container\"\n    :options=\"{selectables: '.selectable'}\"\n    ref=\"selectionAreaRef\"\n  >\n    <div \n        v-for=\"id of 42\"\n        class=\"selectable\"\n        :key=\"id\" \n        :data-key=\"id\"\n        :class=\"{selected: selected.has(id)}\"\n    />\n  </SelectionArea>\n</template>\n\n<script lang=\"ts\" setup>\nimport { SelectionArea } from '@viselect/vue';\nimport { ref, reactive, watchEffect } from 'vue';\n\nconst selected = reactive<Set<number>>(new Set());\nconst selectionAreaRef = ref<InstanceType<typeof SelectionArea>>();\n\nwatchEffect(() => {\n  // log selection instance\n  console.log(selectionAreaRef.value?.selection)\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining OverlapMode Type in TypeScript\nDESCRIPTION: Defines the OverlapMode type as a union of string literals representing different selection behaviors. It's used to determine how to handle already selected elements.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype OverlapMode = 'keep' | 'drop' | 'invert';\n```\n\n----------------------------------------\n\nTITLE: Styling the SelectionArea Component with CSS\nDESCRIPTION: CSS styles for the SelectionArea component and selectable elements. Includes styling for the container, selectable items, selected state, and the selection area overlay.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/preact.md#2025-04-11_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  border: 1px dashed #4f5276;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 15px 0;\n  user-select: none;\n}\n\n.container div {\n  height: 50px;\n  width: 50px;\n  margin: 3px;\n  background: rgba(66, 68, 90, 0.075);\n  border-radius: 10px;\n  cursor: pointer;\n}\n\ndiv.selected {\n  background: linear-gradient(45deg, #78b2ff, #218ad9);\n}\n\n.selection-area {\n  background: rgba(46, 115, 252, 0.11);\n  border: 1px solid rgba(98, 155, 255, 0.85);\n  border-radius: 0.15em;\n}\n```\n\n----------------------------------------\n\nTITLE: Start Event Handler Type Definition\nDESCRIPTION: Type definition for the 'start' event handler, triggered when selection starts, allowing decisions on maintaining previously selected elements.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstart: (e: SelectionEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Move Event Handler Type Definition\nDESCRIPTION: Type definition for the 'move' event handler, triggered while selection is active and the user is moving the pointer, used for applying styles to selected elements.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmove: (e: SelectionEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection\nDESCRIPTION: Method to disable the selection of elements, preventing any new selections from being made.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndisable(): void;\n```\n\n----------------------------------------\n\nTITLE: ChangedElements Interface Definition\nDESCRIPTION: Interface definition for tracking elements that have been added or removed during selection changes.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChangedElements {\n  added: Element[];\n  removed: Element[];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Selectable Elements\nDESCRIPTION: Method to update the list of selectable elements, useful when new elements are added during an active selection process.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nresolveSelectables(): void;\n```\n\n----------------------------------------\n\nTITLE: Getting Selection Area Location\nDESCRIPTION: Method to retrieve the current location coordinates of the selection area, available since version 3.9.0.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetAreaLocation(): AreaLocation;\n```\n\n----------------------------------------\n\nTITLE: Trigger Type Definition\nDESCRIPTION: Type definition for specifying which mouse buttons or button+modifier combinations should trigger the selection process.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype MouseButton = 0 | 1  | 2 | 3 | 4;\ntype Modifier = 'ctrl' | 'alt' | 'shift';\ntype MouseButtonWithModifiers = { button: MouseButton; modifiers: Modifier[]; };\ntype Trigger = MouseButton | MouseButtonWithModifiers;\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Elements\nDESCRIPTION: Method to retrieve the currently selected elements as an array.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelection(): Element[];\n```\n\n----------------------------------------\n\nTITLE: Getting Selection Area Element\nDESCRIPTION: Method to retrieve the DOM element representing the selection area.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelectionArea(): HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Clearing Current Selection\nDESCRIPTION: Method to clear the current selection with options to include stored elements and control event triggering.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclearSelection(includeStored = true, quiet = false): void;\n```\n\n----------------------------------------\n\nTITLE: SelectionStore Interface Definition\nDESCRIPTION: Interface definition for the selection store that tracks touched, stored, selected, and changed elements.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectionStore {\n  touched: Element[];\n  stored: Element[];\n  selected: Element[];\n  changed: ChangedElements;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Binding Methods\nDESCRIPTION: Methods for binding event listeners to selection events, with both 'on' and 'addEventListener' implementations.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\non(event: string, listener: (e: SelectionEvent) => void): void;\naddEventListener(event: string, listener: (e: SelectionEvent) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Event Unbinding Methods\nDESCRIPTION: Methods for removing event listeners from selection events, with both 'off' and 'removeEventListener' implementations.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\noff(event: string, listener: (e: SelectionEvent) => void): void;\nremoveEventListener(event: string, listener: (e: SelectionEvent) => void): void;\n```\n\n----------------------------------------\n\nTITLE: BeforeDrag Event Handler Type Definition\nDESCRIPTION: Type definition for the 'beforedrag' event handler, triggered before the user starts selecting by dragging. Return false to cancel the selection.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbeforedrag: (e: SelectionEvent) => boolean | void;\n```\n\n----------------------------------------\n\nTITLE: Setting Selection Area Location\nDESCRIPTION: Method to set the location of the selection area, available since version 3.9.0.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nsetAreaLocation(location: Partial<AreaLocation>): void;\n```\n\n----------------------------------------\n\nTITLE: Manually Deselecting Elements\nDESCRIPTION: Method to manually deselect elements using CSS selectors and remove them from the store with an option to control event triggering.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndeselect(query: SelectAllSelectors, quiet = false): Element[];\n```\n\n----------------------------------------\n\nTITLE: Stop Event Handler Type Definition\nDESCRIPTION: Type definition for the 'stop' event handler, triggered when selection has stopped, allowing for final processing of selected elements.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstop: (e: SelectionEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Preventing Text Selection with CSS\nDESCRIPTION: CSS solution to prevent text selection interference with viselect by applying user-select: none to the container.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/faq.md#2025-04-11_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.container {\n    user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SelectionArea Instance with useSelection Hook\nDESCRIPTION: Code snippet showing how to import the useSelection hook from the @viselect/react package. This hook provides access to the SelectionArea instance within the component tree.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/react.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSelection } from '@viselect/react';\n```\n\n----------------------------------------\n\nTITLE: Intersection Type Definition\nDESCRIPTION: Type definition for the intersection mode which determines how elements are detected for selection based on center, cover, or touch criteria.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntype Intersection = 'center' | 'cover' | 'touch';\n```\n\n----------------------------------------\n\nTITLE: Using the useSelection Hook in Preact\nDESCRIPTION: Example of importing the useSelection hook from the @viselect/preact package, which provides access to the SelectionArea instance within components.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/preact.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSelection } from '@viselect/preact';\n```\n\n----------------------------------------\n\nTITLE: AreaLocation Interface Definition\nDESCRIPTION: Interface definition for representing the coordinates of the selection area with x1, y1, x2, and y2 properties.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AreaLocation {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n```\n\n----------------------------------------\n\nTITLE: BeforeStart Event Handler Type Definition\nDESCRIPTION: Type definition for the 'beforestart' event handler, which is triggered when the user taps within the specified boundaries and can be used to conditionally cancel selection.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbeforestart: (e: SelectionEvent) => boolean | void;\n```\n\n----------------------------------------\n\nTITLE: Cancelling Selection Process\nDESCRIPTION: Method to cancel the current selection process with an option to trigger the stop event.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(keepEvent = false): void;\n```\n\n----------------------------------------\n\nTITLE: Enabling Selection\nDESCRIPTION: Method to enable the selection of elements, which is the default state of the SelectionArea.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nenable(): void;\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Viselect Example\nDESCRIPTION: Basic HTML structure containing two empty container divs that will be populated with selectable elements by the JavaScript code.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vanilla.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container blue\"></div>\n<div class=\"container green\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Selection Containers\nDESCRIPTION: This HTML snippet defines the container structure required for the Viselect library. It creates two container elements with different classes that will hold the selectable items.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/quickstart.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container blue\"></div>\n<div class=\"container green\"></div>\n```\n\n----------------------------------------\n\nTITLE: Getting Selectable Elements\nDESCRIPTION: Method to retrieve all elements that can be selected, available since version 3.9.0.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelectables(): Element[];\n```\n\n----------------------------------------\n\nTITLE: Destroying Selection Instance\nDESCRIPTION: Method to destroy the SelectionArea instance by unbinding all events and removing the area element.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndestroy(): void;\n```\n\n----------------------------------------\n\nTITLE: Installing Viselect with Package Managers\nDESCRIPTION: Shows various methods to install the @viselect/vanilla package using different package managers like npm, pnpm, and yarn.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vanilla.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm add -D @viselect/vanilla\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add -D @viselect/vanilla\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add -D @viselect/vanilla\n```\n\n----------------------------------------\n\nTITLE: Installing Viselect React Package with Package Managers\nDESCRIPTION: Commands for installing the @viselect/react package using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/react.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @viselect/react\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm install @viselect/react\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @viselect/react\n```\n\n----------------------------------------\n\nTITLE: Installing Viselect for Vue using package managers\nDESCRIPTION: Commands to install the @viselect/vue package using npm, pnpm, or yarn.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vue.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @viselect/vue\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm install @viselect/vue\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @viselect/vue\n```\n\n----------------------------------------\n\nTITLE: Installing Viselect with Package Managers\nDESCRIPTION: Instructions for installing the Viselect Preact package using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/preact.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @viselect/preact\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm install @viselect/preact\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @viselect/preact\n```\n\n----------------------------------------\n\nTITLE: Including Viselect via CDN\nDESCRIPTION: Demonstrates how to include Viselect using script tags or ES modules directly from a CDN.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/frameworks/vanilla.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@viselect/vanilla/dist/viselect.umd.js\"></script>\n```\n\nLANGUAGE: js\nCODE:\n```\nimport SelectionArea from \"https://cdn.jsdelivr.net/npm/@viselect/vanilla/dist/viselect.mjs\"\n```\n\n----------------------------------------\n\nTITLE: Coordinates Interface Definition\nDESCRIPTION: Interface definition for representing x and y coordinates used in various parts of the selection process.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TapMode Type Definition\nDESCRIPTION: Type definition for the tap mode which determines how elements are selected on single tap, either by touch or native detection.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype TapMode = 'touch' | 'native';\n```\n\n----------------------------------------\n\nTITLE: PartialSelectionOptions Type Definition\nDESCRIPTION: Type definition for the constructor parameter type, representing partial selection options with optional document property.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntype PartialSelectionOptions = DeepPartial<Omit<SelectionOptions, 'document'>> & {\n  document?: Document;\n};\n```\n\n----------------------------------------\n\nTITLE: ScrollEvent Interface Definition\nDESCRIPTION: Interface definition extending MouseEvent with additional delta properties for handling scroll events.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollEvent extends MouseEvent {\n  deltaY: number;\n  deltaX: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DeepPartial Utility Type in TypeScript\nDESCRIPTION: Creates a DeepPartial utility type that makes all properties in T optional, including nested properties. It handles arrays and HTMLElements as special cases.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ntype DeepPartial<T> = T extends unknown[] ? T : T extends HTMLElement ? T : { [P in keyof T]?: DeepPartial<T[P]>; };\n```\n\n----------------------------------------\n\nTITLE: Defining Quantify Utility Type in TypeScript\nDESCRIPTION: Implements a Quantify utility type that allows T to be either an array of T or a single T value. This provides flexibility in function parameters or variable types.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ntype Quantify<T> = T[] | T;\n```\n\n----------------------------------------\n\nTITLE: Accessing Version Property in VISelect\nDESCRIPTION: Shows how to access the static version property of the SelectionArea class to get the version of the library.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/pages/api-reference.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion: string;\n```\n\n----------------------------------------\n\nTITLE: Linking to viselect Documentation\nDESCRIPTION: This HTML snippet creates a centered paragraph with a link to the official documentation for the viselect library.\nSOURCE: https://github.com/simonwep/viselect/blob/master/packages/react/README.md#2025-04-11_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://simonwep.github.io/viselect\">Go Here For Documentation</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying React Package Name for viselect\nDESCRIPTION: This HTML snippet centers and displays the package name @viselect/react using a code element.\nSOURCE: https://github.com/simonwep/viselect/blob/master/packages/react/README.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n    <code>@viselect/react</code>\n</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Repository Header\nDESCRIPTION: HTML markup for the repository header showing package name and documentation link\nSOURCE: https://github.com/simonwep/viselect/blob/master/packages/vanilla/README.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n    <code>@viselect/vanilla</code>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://simonwep.github.io/viselect\">Go Here For Documentation</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Referencing Vue Package for viselect\nDESCRIPTION: Code block showing the npm package name for the Vue integration of viselect library, which can be used to integrate visual selection functionality into Vue applications.\nSOURCE: https://github.com/simonwep/viselect/blob/master/packages/vue/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@viselect/vue\n```\n\n----------------------------------------\n\nTITLE: HTML Link to Documentation\nDESCRIPTION: HTML markup displaying the package name and documentation link using center-aligned paragraphs.\nSOURCE: https://github.com/simonwep/viselect/blob/master/packages/preact/README.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <code>@viselect/preact</code>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://simonwep.github.io/viselect\">Go Here For Documentation</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Viselect Documentation Homepage\nDESCRIPTION: Front matter configuration for the Viselect documentation homepage, defining the hero section layout and feature list. Includes metadata for the page structure, navigation links, and detailed feature descriptions.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\n\nhero:\n  name: \"Viselect\"\n  text: \"Visual Selection Library\"\n  tagline: \"A modern, ultra-tiny, and highly optimized selection library\"\n  image:\n    src: logo.png\n    alt: Viselect logo\n  actions:\n    - theme: brand\n      text: Quickstart\n      link: pages/quickstart\n    - theme: alt\n      text: API Reference\n      link: pages/api-reference\n    - theme: alt\n      text: Examples\n      link: pages/examples\n\nfeatures:\n    - icon: 🌟\n      title: Modern Bundle\n      details: A cutting-edge bundle for modern web development, ensuring compatibility with the latest standards and practices.\n    - icon: 🔩\n      title: Ultra Tiny\n      details: Extremely lightweight, around 4kb in size, making it perfect for performance and size-critical applications.\n    - icon: 👌\n      title: Simple Usage\n      details: Easy to use with minimal setup required, allowing developers to integrate it quickly into any kind of project.\n    - icon: ⚡\n      title: Highly Optimized\n      details: Performance-focused and highly efficient, designed to handle large amounts of DOM elements with ease.\n    - icon: 🚀\n      title: Zero Dependencies\n      details: No external dependencies required, reducing the risk of conflicts and simplifying the build process.\n    - icon: 📱\n      title: Mobile / Touch Support\n      details: Fully compatible with mobile and touch devices, providing a seamless experience across all platforms.\n    - icon: 🖱\n      title: Scroll Support\n      details: Supports both vertical and horizontal scrolling, ensuring smooth navigation and interaction.\n    - icon: 💪\n      title: Battle Tested\n      details: Over 6 years of development and widely used in many applications, demonstrating its reliability and robustness.\n    - icon: 🖼\n      title: Framework Support\n      details: Compatible with major frameworks and easy to \"hack\" for custom integrations, providing flexibility and versatility.\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: Sets basic directives for web crawlers. It specifies a wildcard user-agent rule that applies to all crawlers, with a disallow directive that appears incomplete in the provided content.\nSOURCE: https://github.com/simonwep/viselect/blob/master/docs/public/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nuser-agent: *\ndisallow:\n```"
  }
]