[
  {
    "owner": "vikejs",
    "repo": "vike",
    "content": "TITLE: Basic Page and Layout Configuration in Vike\nDESCRIPTION: Example of configuring Page and Layout components in Vike using +config.js file structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/config/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+config.js\n\nimport Page from './Page'\nimport Layout from './Layout'\n\nexport default {\n  Page,\n  Layout\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/product/@id/Page.jsx\n\nexport default /* ... */\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/product/@id/Layout.jsx\n\nexport default /* ... */\n```\n\n----------------------------------------\n\nTITLE: Starting Preview Server with Vike API in JavaScript\nDESCRIPTION: This snippet shows how to use the preview() function to start a preview server using the production build. It demonstrates handling the returned viteConfig and viteServer values.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preview } from 'vike/api'\nconst {\n  viteConfig, // Resolved Vite configuration\n  viteServer, // Vite's development server\n} = await preview({\n  viteConfig // Vite configuration (optional)\n})\nconsole.log('Preview server is ready')\n```\n\n----------------------------------------\n\nTITLE: Configuring Permanent Redirections in Vike\nDESCRIPTION: This snippet demonstrates how to set up permanent redirections (HTTP status code 301) in a Vike project. It includes examples of simple redirects, parameterized redirections, glob redirections, and external redirections.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redirects/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  redirects: {\n    '/about-us': '/about',\n    // Parameterized redirections\n    '/product/@id': '/buy/@id',\n    // Glob redirections\n    '/admin/*': '/private/*',\n    // External redirections\n    '/admin/*': 'https://admin.example.org/*'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeRoute Hook for i18n in Vike\nDESCRIPTION: This code snippet demonstrates how to use the onBeforeRoute() hook to extract locale information from the URL and update the pageContext accordingly. It removes the locale from the URL and makes it available as pageContext.locale for use in other hooks and components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/i18n/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/+onBeforeRoute.ts\n\nimport { modifyUrl } from 'vike/modifyUrl'\nimport type { Url } from 'vike/types'\n\nexport function onBeforeRoute(pageContext) {\n  const { urlWithoutLocale, locale } = extractLocale(pageContext.urlParsed)\n  return {\n    pageContext: {\n      // Make locale available as pageContext.locale\n      locale,\n      // Vike's router will use pageContext.urlLogical instead of pageContext.urlOriginal and\n      // the locale is removed from pageContext.urlParsed\n      urlLogical: urlWithoutLocale\n    }\n  }\n}\n\nfunction extractLocale(url: Url) {\n  const { pathname } = url\n\n  // Determine the locale, for example:\n  //  /en-US/film/42 => en-US\n  //  /de-DE/film/42 => de-DE\n  const locale = /* ... */\n\n  // Remove the locale, for example:\n  //  /en-US/film/42 => /film/42\n  //  /de-DE/film/42 => /film/42\n  const pathnameWithoutLocale = /* ... */\n\n  // Reconstruct full URL\n  const urlWithoutLocale = modifyUrl(url.href, { pathname: pathnameWithoutLocale })\n\n  return { locale, urlWithoutLocale }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderClient Hook for SPA in Vike\nDESCRIPTION: This code demonstrates how to implement the onRenderClient hook for SPA pages, using a UI framework's renderToDom method to render the page in the browser.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nimport { renderToDom } from 'some-ui-framework'\n\nexport { onRenderClient }\n\nasync function onRenderClient(pageContext) {\n  const { Page } = pageContext\n  // UI frameworks usually have two methods, such as `renderToDom()` and `hydrateDom()`.\n  // Note how we use `renderToDom()` and not `hydrateDom()`.\n  await renderToDom(document.getElementById('root'), Page)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Data Fetching with ORM/SQL in Vike\nDESCRIPTION: Example of a data() hook implementation that fetches movie data from an API with notes on how it could be used with ORM or SQL. This hook runs on the server-side by default, allowing direct database access.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movies/+data.js\n\nexport { data }\n\n// Note how we use `node-fetch`; this file is only run on the server-side, thus we don't need\n// to use an isomorphic (aka universal) implementation such as `cross-fetch`.\nimport fetch from 'node-fetch'\n\nasync function data(pageContext) {\n  const response = await fetch('https://star-wars.brillout.com/api/films.json')\n  let { movies } = await response.json()\n  /* Or with an ORM:\n  let movies = await Movie.findAll() */\n  /* Or with SQL:\n  let movies = await sql.run('SELECT * FROM movies;') */\n\n  // `movies` is serialized and passed to the client. Therefore, we pick only the\n  // data the client needs in order to minimize what is sent over the network.\n  movies = movies.map(({ title, release_date }) => ({ title, release_date }))\n\n  return {\n    movies\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Various Debug Flags in Vike Applications\nDESCRIPTION: Lists the different debug flags available in Vike for inspecting various aspects of its operation including error handling, logging, routing, HTTP streaming, and file crawling. Shows how to enable single or multiple flags simultaneously.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/debug/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Verbose errors\nDEBUG=vike:error npm run dev\n# Inspect where logs come from (also non-Vike logs)\nDEBUG=vike:log npm run dev\n# Inspect Vike's routing\nDEBUG=vike:routing npm run dev\n# Inspect HTTP Streaming\nDEBUG=vike:stream npm run dev\n# Inspect Vike's crawling of + files\nDEBUG=vike:crawl npm run dev\n# Enabling multiple debug flags\nDEBUG=vike:log,vike:error npm run dev\n```\n\n----------------------------------------\n\nTITLE: Extending pageContext using onBeforeRender hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the onBeforeRender hook to fetch Star Wars movies data and extend the pageContext with the retrieved information. It includes an asynchronous function to fetch data from an API.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-manipulation/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +onBeforeRender.js\n\nexport { onBeforeRender }\n\nasync function onBeforeRender(pageContext) {\n  const starWarsMovies = await getStarWarsMovies()\n  return {\n    pageContext: {\n      // We make `starWarsMovies` available at `pageContext.starWarsMovies`\n      starWarsMovies\n    }\n  }\n}\n\nasync function getStarWarsMovies() {\n  const response = await fetch('https://star-wars.brillout.com/api/films.json')\n  const { movies } = await response.json()\n  return movies\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for onBeforeRender\nDESCRIPTION: TypeScript implementation example with proper type definitions for the onBeforeRender hook.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport { onBeforeRender }\n\nimport type { OnBeforeRenderAsync } from 'vike/types'\n\nconst onBeforeRender: OnBeforeRenderAsync = async (\n  pageContext\n): ReturnType<OnBeforeRenderAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL in Vite Config\nDESCRIPTION: Shows how to set the base URL in Vite configuration file for serving a website under a subdirectory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nexport default {\n  base: '/some-base/'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route String for Movie Pages in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Route String in a '+route.js' file to match URLs like '/movie/123' or '/movie/abc'. The '@id' parameter in the route is made available in pageContext.routeParams.id.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-string/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movie/+route.js\n\n// Match URLs such as /movie/123 or /movie/abc\nexport default '/movie/@id'\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Data Pass in Vike\nDESCRIPTION: This configuration snippet shows how to use the passToClient option in Vike to make the store's initial state available on the client-side. It ensures that storeInitialState is passed from server to client.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/store/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  passToClient: ['storeInitialState']\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Initial Data with Vike's data() Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Vike's data() hook to fetch initial data for a page. It retrieves movie information from an API and prepares it for client-side use. The function runs on the server-side and can also utilize ORM or SQL queries.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data-fetching/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movies/@id/+data.js\n// Environment: server\n\nexport { data }\n\nimport fetch from 'node-fetch'\n\nasync function data(pageContext) {\n  const { id } = pageContext.routeParams\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n\n  let movie = await response.json()\n  // `movie` is serialized and passed to the client. Therefore, we pick only the\n  // data the client needs in order to minimize what is sent over the network.\n  movie = { title: movie.title, release_date: movie.release_date }\n\n  // data() runs only on the server-side by default, we can therefore use ORM/SQL queries.\n  /* With an ORM:\n  const movies = await Movie.findAll({ select: ['title', 'release_date'] }) */\n  /* With SQL:\n  const movies = await sql.run('SELECT { title, release_date } FROM movies;') */\n\n  return {\n    movies\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Guards for Admin Pages in Vike.js\nDESCRIPTION: Demonstrates how to protect admin routes using guard() function with render() and redirect() for handling unauthorized access and implementing login flows.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/auth/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin/+guard.js\n\nimport { render, redirect } from 'vike/abort'\n\nexport const guard = (pageContext) => {\n  const { user } = pageContext\n  if (user === null) {\n    // Render the login page while preserving the URL. (This is novel technique\n    // which we explain down below.)\n    throw render('/login')\n    /* The more traditional way, redirect the user:\n    throw redirect('/login')\n    */\n  }\n  if (user.role !== 'admin') {\n    // Render the error page and show message to the user\n    throw render(403, 'Only admins are allowed to access this page.')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vike with Express.js Server\nDESCRIPTION: This code snippet demonstrates how to set up an Express.js server with Vike integration using the renderPage() function. It includes handling for both development and production environments, static asset serving, and SSR middleware implementation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/renderPage/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\n// In this example we use Express.js but we could use any other server framework\nimport express from 'express'\nimport { renderPage, createDevMiddleware } from 'vike/server'\n\nconst isProduction = process.env.NODE_ENV === 'production'\nconst root = `${__dirname}/..`\n\nstartServer()\n\nasync function startServer() {\n  // Create an Express.js server\n  const app = express()\n\n  // Dev/prod middleware\n  if (!isProduction) {\n    const { devMiddleware } = await createDevMiddleware({ root })\n    app.use(devMiddleware)\n  } else {\n    // In production, we need to serve our static assets ourselves.\n    // (In dev, Vite's middleware serves our static assets.)\n    app.use(express.static(`${root}/${outDir}/client`))\n  }\n\n  // ...\n  // Other middlewares (authentication, REST/GraphQL/RPC middleware, ...)\n  // ...\n\n  // SSR middleware.\n  // Note: it should always be the last middleware, because it's a catch-all\n  // middleware that supersedes any middleware placed after it.\n  app.get('*', async (req, res) => {\n    const pageContextInit = {\n      // Required: the URL of the page\n      urlOriginal: req.originalUrl\n\n      // Optional: the HTTP Headers\n      headersOriginal: req.headers,\n\n      // Optional: information about the logged-in user (when using an\n      // Express.js authentication middleware that defines `req.user`).\n      user: req.user\n\n      // ... we can provide any additional information about the request here ...\n    }\n\n    const pageContext = await renderPage(pageContextInit)\n\n    const { body, statusCode, headers } = pageContext.httpResponse\n    headers.forEach(([name, value]) => res.setHeader(name, value))\n    res.status(statusCode).send(body)\n  })\n\n  const port = 3000\n  app.listen(port)\n  console.log(`Server running at http://localhost:${port}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React and Telefunc Extensions for Product Pages in Vike\nDESCRIPTION: This snippet demonstrates how to set up product pages to use React and Telefunc extensions in Vike. It shows that extensions can be chosen on a page-by-page basis, allowing for flexible configuration of different parts of the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/why-the-v1-design/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+config.js\n\nimport react from 'vike-react'\nimport telefunc from 'vike-react-telefunc'\n\nexport default {\n  // Use React + Telefunc for the product pages\n  extends: [react, telefunc]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page HTML in onAfterRenderHtml Hook (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the page's HTML string or stream in the onAfterRenderHtml hook. It shows the pageContext object containing pageHtmlString and pageHtmlStream properties.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onAfterRenderHtml/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +onAfterRenderHtml.js\n\nexport function onAfterRenderHtml(pageContext) {\n  // The +Page.js component rendered to an HTML string\n  pageContext.pageHtmlString\n  // The +Page.js component rendered to an HTML stream\n  pageContext.pageHtmlStream\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Inheritance Examples\nDESCRIPTION: Demonstrates how to set and override default configurations across different page groups.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/config/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  // Disable SSR by default\n  ssr: false\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/(marketing)/+config.js\n\nexport default {\n  // Enable SSR for marketing pages\n  ssr: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing clientOnly() with Solid in Vike\nDESCRIPTION: This snippet shows how to use clientOnly() in Solid to create components that render only on the client-side. It demonstrates the import syntax, component initialization with dynamic imports, and usage with a fallback component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientOnly/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { clientOnly } from 'vike-solid/clientOnly'\n\nconst SomeComponent = clientOnly(() => import(\"./SomeComponent.jsx\"));\n/* If the component isn't the default export:\nconst SomeComponent = clientOnly(async () => (await import('some-library')).SomeComponent)\n*/\n\nfunction MyComponent(props) {\n  return <SomeComponent fallback={<Loading />} />\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Vike API in JavaScript\nDESCRIPTION: This snippet shows how to use the dev() function to start the development server. It demonstrates handling the returned values, including viteConfig and viteServer, and how to start the server and print URLs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dev } from 'vike/api'\nconsole.log('Starting development server...')\nconst {\n  viteConfig, // Resolved Vite configuration\n  viteServer, // Vite's development server\n} = await dev({\n  viteConfig // Vite configuration (optional)\n})\nawait viteServer.listen()\nviteServer.printUrls()\nviteServer.bindCLIShortcuts({ print: true })\nconst { port } = viteConfig.server\nconsole.log(`Development server is ready and listening http://localhost:${port}`)\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderClient Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the onRenderClient hook for both SPA and SSR scenarios. It shows the basic structure of the hook function and how it handles rendering or hydrating the DOM using a hypothetical UI framework.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onRenderClient/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +onRenderClient.js\n// Environment: browser\n\nimport { renderToDom, hydrateDom } from 'some-ui-framework'\n\nexport { onRenderClient }\n\nasync function onRenderClient(pageContext) {\n  const { Page } = pageContext\n\n  // SPA:\n  await renderToDom(Page)\n\n  // SSR:\n  await hydrateDom(Page)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS-in-JS with onRenderHtml Hook in React Without Framework Extensions\nDESCRIPTION: This example shows a complete implementation for collecting and injecting CSS styles from a CSS-in-JS library in a React application without using Vike's UI framework extensions. It uses the onRenderHtml hook to handle the entire rendering process.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/css-in-js/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// /renderer/+onRenderHtml.jsx\n\nimport ReactDOMServer from 'react-dom/server'\nimport React from 'react'\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { CssCollector } from 'some-css-in-js-tool'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  const { Page } = pageContext\n  const page = <Page />\n\n  const collect = new CssCollector()\n\n  const pageHtml = ReactDOMServer.renderToString(collect(page))\n\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <style>${dangerouslySkipEscape(collect.getCSS())}</style>\n      </head>\n      <body>\n        <div id=\"root\">${dangerouslySkipEscape(pageHtml)}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Component with JSX (React/Solid) in Vike\nDESCRIPTION: This snippet demonstrates how to define a Page component using JSX syntax for React or Solid frameworks in Vike. It exports a simple functional component that renders a heading and a paragraph.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/index/+Page.jsx\n\nexport { Page }\n/* Or:\nexport default Page\n*/\n\nfunction Page() {\n  return <>\n    <h1>Hi</h1>\n    <p>Hello World</p>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pre-rendering Configuration in Vike\nDESCRIPTION: Basic configuration to enable pre-rendering and set common pre-rendering options including parallel processing, partial rendering, and directory structure settings.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Enable pre-rendering\n  prerender: true,\n\n  // Pre-rendeer settings.\n  // The following are the default values.\n  prerender: {\n    partial: false,\n    noExtraDir: false,\n    parallel: os.cpus.length, // Number of CPUs\n    disableAutoRun: false,\n    enable: true,\n    keepDistServer: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure Pattern for Marketing and Admin Pages\nDESCRIPTION: Example YAML showing file structure organization for different page types with their respective layouts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/config/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npages/(marketing)/index/+Page.jsx    # URL: /\npages/(marketing)/about/+Page.jsx    # URL: /about\n# Layout for marketing pages\npages/(marketing)/+Layout.jsx\n\npages/admin-panel/index/+Page.jsx    # URL: /admin-panel\npages/admin-panel/users/+Page.jsx    # URL: /admin-panel/users\n# Layout for admin pages\npages/admin-panel/+Layout.jsx\n\npages/product/@id/+Page.jsx\n# Layout for the product page\npages/product/@id/+Layout.jsx\n```\n\n----------------------------------------\n\nTITLE: Defining Entire Vite Config Programmatically in Vike API\nDESCRIPTION: This snippet demonstrates how to define the entire Vite configuration programmatically when using Vike API functions. It shows how to disable loading of vite.config.js and specify all Vite settings inline.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { build } from 'vike/api'\n\nawait build({\n  viteConfig: {\n    // Don't load any vite.config.js\n    configFile: false,\n    // All Vite settings\n    /* ... */\n  }\n})\nconsole.log('Build is done')\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Data Hook with render() and redirect()\nDESCRIPTION: A data() hook implementation that demonstrates error handling by using throw render() and throw redirect() to manage 404 scenarios and redirect users when needed.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movies/+data.js\n// Environment: server\n\nexport { data }\n\nimport fetch from 'node-fetch'\nimport { render, redirect } from 'vike/abort'\n\nasync function data(pageContext) {\n  const { id } = pageContext.routeParams\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n\n  if (response.status === 404) {\n    // Tell the user what went wrong\n    throw render(404, `Movie with ID ${id} doesn't exist.`)\n    /* Or redirect the user:\n    throw redirect('/movie/add') */\n    /* Or render the movie submission form while preserving the URL:\n    throw render('/movie/add') */\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Configuration Example\nDESCRIPTION: Custom SQL configuration files for different models using meta configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default { modelName: 'User', select: ['firstName', 'lastName'] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default { modelName: 'Product', select: ['name', 'price'] }\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforePrerenderStart Hook for i18n Data Loading in Vike\nDESCRIPTION: This code snippet shows how to use the onBeforePrerenderStart() hook to load localized data and generate URLs for each locale during pre-rendering. It demonstrates an alternative approach to onPrerenderStart() when data depends on localization.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/i18n/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/product/+onBeforePrerenderStart.js\n\n// This example doesn't use onPrerenderStart() but, instead,\n// uses onBeforePrerenderStart() to duplicate and localize URLs and their pageContext\nexport { onBeforePrerenderStart }\n\nasync function onBeforePrerenderStart() {\n  // Load data\n  const products = await Product.findAll()\n\n  // Set pageContext + localize\n  const urlsWithPageContext = []\n  products.forEach(product => {\n    ['en-US', 'de-DE', 'fr-FR'].forEach(locale => {\n      urlsWithPageContext.push({\n        url: `/${locale}/product/${product.id}`,\n        pageContext: {\n          locale,\n          product,\n          data: {\n            product: {\n              name: product.name,\n              description: product.description,\n              price: product.price,\n              // ...\n            }\n          }\n        }\n      })\n    })\n  })\n\n  return urlsWithPageContext\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with data() Hook in Vike\nDESCRIPTION: Shows how to implement the data() hook for fetching product data on the server. The function retrieves product information and returns a subset of data to minimize network transfer.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useData/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+data.js\n// Environment: server\n\nexport { data }\n\nasync function data(pageContext) {\n  let product = await Product.findById(pagContext.routeParams.id)\n\n  // `product` is serialized and passed to the client. Therefore, we pick only the\n  // data the client needs in order to minimize what is sent over the network.\n  product = { name: product.name, price: product.price }\n\n  return product\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Polyfill for Auth.js Server-Side Authentication\nDESCRIPTION: Server-side implementation for adding fetch polyfill support to enable Auth.js getSession() functionality. Uses node-fetch to patch the global object with fetch implementation for Node.js environments before version 18.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/AuthJS/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\n// Only install the polyfill on the server (e.g. Express.js). Browsers already implement\n// `fetch()` natively and it would be wasteful to load the polyfill on the browser-side.\n\n// Use node-fetch@2 instead of node-fetch@3 if your `package.json#type` isn't `\"module\"`.\n// Or some other `fetch()` polyfill, e.g. `cross-fetch`.\nimport fetch, { Headers, Request, Response } from 'node-fetch'\n\nif (!globalThis.fetch) {\n  globalThis.fetch = fetch\n  globalThis.Headers = Headers\n  globalThis.Request = Request\n  globalThis.Response = Response\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering Pages with Vike API in JavaScript\nDESCRIPTION: This snippet demonstrates using the prerender() function to pre-render pages. It shows how to handle the returned viteConfig value and mentions optional parameters like pageContextInit and onPagePrerender.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prerender } from 'vike/api'\nconst {\n  viteConfig // Resolved Vite configuration\n} = await prerender({\n  viteConfig, // Vite configuration (optional)\n  pageContextInit, // Initial pageContext (optional)\n  onPagePrerender // Called before writing an HTML file (optional)\n})\nconsole.log('Pre-rendering is done')\n```\n\n----------------------------------------\n\nTITLE: Page Navigation State Management\nDESCRIPTION: Implementation of onBeforeRender hook to handle state initialization for every page navigation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientRouting/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onBeforeRender.js\n// Environment: server\n\nexport { onBeforeRender }\n\nimport { getInitialState } from './getInitialState'\n\nasync function onBeforeRender() {\n  const initialState = await getInitialState()\n  return {\n    pageContext: {\n      initialState\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Renderer Configurations in TypeScript\nDESCRIPTION: This snippet demonstrates how to migrate renderer configurations from individual .page files to a centralized +config.ts file in the renderer directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// /renderer/_default.page.client.ts\n\nexport { clientRouting }\nexport { hydrationCanBeAborted }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /renderer/+config.ts\n\nimport type { Config } from 'vike/types'\n\nexport default {\n  clientRouting: true,\n  hydrationCanBeAborted: true\n} satisfies Config\n```\n\n----------------------------------------\n\nTITLE: Initializing Store in onCreatePageContext for Server-Side in Vike (TypeScript)\nDESCRIPTION: This example shows how to use onCreatePageContext specifically for server-side initialization. It demonstrates initializing a store from a state management library.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onCreatePageContext/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/+onCreatePageContext.server.ts\n// Environment: server\n\nimport { Store } from 'some-state-management-library'\nimport type { PageContextServer } from 'vike/types'\n\nexport function onCreatePageContext(pageContext: PageContextServer) {\n  pageContext.store = new Store()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Active Links Component in React\nDESCRIPTION: This code snippet demonstrates how to create a Link component in React that implements active links functionality. It uses usePageContext to access the current URL and applies an 'is-active' class when the link matches the current page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/active-links/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// React example\n// File: /boilerplates/boilerplate-react/renderer/Link.jsx\n\n// Implementation details not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Data Fetching Tool Configuration\nDESCRIPTION: Server-side configuration for data fetching tools showing initialization and data handling during rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/integration/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onBeforeRenderHtml.js\n\nimport { init } from 'awesome-data-tool'\n\nexport function onBeforeRenderHtml(pageContext) {\n  pageContext.dataClient = init({ someConfiguration: 'value' })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Head Tags Implementation in Vike.js Server Renderer\nDESCRIPTION: Demonstrates the basic implementation of head tags using onRenderHtml hook in Vike.js. Shows how to set static title and meta description tags while rendering the page content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-manual/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'some-ui-framework'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  return escapeInject`<html>\n    <head>\n      <title>SpaceX</title>\n      <meta name=\"description\" content=\"We deliver payload to space.\">\n    </head>\n    <body>\n      <div id=\"root\">\n        ${dangerouslySkipEscape(await renderToHtml(pageContext.Page))}\n      </div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Normalization Settings\nDESCRIPTION: Configuration file showing how to customize URL normalization behavior through the trailingSlash and disableUrlNormalization options.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/url-normalization/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  // Make URLs end with a trailing slash.\n  // For example: /some//path -> /some/path/\n  trailingSlash: true,\n\n  // Or completely disable automatic URL normalization.\n  // For example keep URL /some//path/\n  disableUrlNormalization: true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vike Configuration in Vite Plugin\nDESCRIPTION: This snippet shows how to create a Vite plugin that uses getVikeConfig to access Vike's configuration. It demonstrates accessing various config properties and page information in both the configResolved and config hooks.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getVikeConfig/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { getVikeConfig } from 'vike/plugin'\n\nexport default {\n  plugins: [myVitePlugin()]\n}\n\nfunction myVitePlugin() {\n  return {\n    name: 'myVitePlugin',\n    configResolved(config) {\n      const vike = getVikeConfig(config)\n      console.log(vike.config.prerender)\n      console.log(vike.config.baseAssets)\n      console.log(vike.config.baseServer)\n      console.log(vike.pages['/pages/index'].config)\n      console.log(vike.pages['/pages/product'].route)\n      // ...\n    },\n    config(config) {\n      // Also available here\n      const vike = getVikeConfig(config)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing H3 Server with vike-server\nDESCRIPTION: Configures an H3 server using the vike-server extension. It applies Vike middleware and serves the application on port 3000.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/blog/vike-server/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'h3'\nimport { apply } from 'vike-server/h3'\nimport { serve } from 'vike-server/h3/serve'\n\nfunction startServer() {\n  const app = createApp()\n  apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Configuring React Server-Side Rendering Options\nDESCRIPTION: Shows how to configure options for React's renderToString() method on the server side, including setting identifier prefixes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-setting/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+react.server.js\n// Environment: server\n\nexport default {\n  renderToStringOptions: {\n    identifierPrefix: 'some-id-prefix'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Platform Stream Integration\nDESCRIPTION: Implementation of HTML streaming for edge platforms like Cloudflare Workers using Web Streams.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/streaming/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// worker.js\n\nimport { renderPage } from 'vike/server'\n\naddEventListener('fetch', (event) => {\n  event.respondWith(handleFetchEvent(event))\n})\n\nasync function handleFetchEvent(event) {\n  const pageContextInit = { urlOriginal: event.request.url }\n  const pageContext = await renderPage(pageContextInit)\n  const { httpResponse } = pageContext\n  const readable = httpResponse.getReadableWebStream()\n  const { statusCode: status, headers } = httpResponse\n  return new Response(readable, { headers, status })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Side Initialization Code in Vike\nDESCRIPTION: This example shows how to use the client configuration option in Vike to specify client-side initialization code. It includes two files: a configuration file and the actual client-side code file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\nexport default {\n  client: './some-client-code.js'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// some-client-code.js\nconsole.log(\"I'm run when the client-side JavaScript is loaded.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderHtml Hook in TypeScript\nDESCRIPTION: TypeScript implementation of the onRenderHtml hook with proper type definitions using OnRenderHtmlAsync type from Vike. This version provides type safety and better IDE support.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onRenderHtml/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /**/+onRenderHtml.ts (usually /renderer/+onRenderHtml.ts)\n// Environment: server\n\nexport { onRenderHtml }\n\nimport type { OnRenderHtmlAsync } from 'vike/types'\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml, createElement } from 'some-ui-framework'\n\nconst onRenderHtml: OnRenderHtmlAsync = async (pageContext): ReturnType<OnRenderHtmlAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving 'window is not defined' Error by Restricting Function Call\nDESCRIPTION: This solution demonstrates how to resolve the 'window is not defined' error by ensuring that the problematic function is only called in a client-side context. The function call is moved to a file that is loaded only on the client-side.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hints/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ~/my-app/some/other-file.js\n\n// This file is loaded on both client- and server-side\n\nimport { someFunction } from './file.js'\n\nfunction someCallerFn() {\n  someFunction() // [!code --]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ~/my-app/somewhere/else.js\n\n// This file is loaded on the client-side only.\n\nfunction someThirdFn() {\n  // We can call someFunction() here. // [!code ++]\n  someFunction() // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Vike API in JavaScript\nDESCRIPTION: This snippet demonstrates using the build() function to create a production build. It shows how to handle the returned rollupOutput values for client-side and server-side files.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { build } from 'vike/api'\nconst {\n  rollupOutputClient, // Generated dist/client/ files for the client-side\n  rollupOutputServer, // Generated dist/server/ files for the server-side\n} = await build({\n  viteConfig // Vite configuration (optional)\n})\nconsole.log('Build is done')\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Authentication Guard in Vike.js\nDESCRIPTION: Shows how to implement a global guard that applies to all pages by placing the guard hook at the root pages directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/auth/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+guard.js\n\n// This guard() hook applies to all pages: the file is located at /pages/+guard.js\n// and therefore applies to all /pages/**/+Page.js\n\nimport { render } from 'vike/abort'\n\nexport const guard = (pageContext) => {\n  if (!pageContext.user) {\n    throw render('/login')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vike CLI Commands\nDESCRIPTION: The core Vike CLI commands for development, building, previewing, and pre-rendering applications. These commands handle the different phases of application development and deployment.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cli/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vike dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ vike build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ vike preview\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ vike prerender\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ vike -v\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Stream Integration\nDESCRIPTION: Implementation of HTML streaming in a Node.js server environment using pipe() for optimal stream flushing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/streaming/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\nimport { renderPage } from 'vike/server'\n\napp.get(\"*\", async (req, res) => {\n  const pageContextInit = { urlOriginal: req.url }\n  const pageContext = await renderPage(pageContextInit)\n  const { httpResponse } = pageContext\n  httpResponse.pipe(res)\n})\n```\n\n----------------------------------------\n\nTITLE: Parameterized Route Configuration in Vike\nDESCRIPTION: Shows how to create a page with a parameterized route using +config.js and a product page component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tour/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+config.js\n\n// This file defines a new page with URL '/product/@id'\n\nimport { ProductPage } from './ProductPage'\n\nexport default {\n   Page: ProductPage,\n   // Parameterized route that matches URLs such as /product/1337 and /product/macbook\n   route: '/product/@id'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/ProductPage.jsx\n\nexport { ProductPage }\n\nfunction ProductPage() {\n  return (\n    <>\n      <h1>Product Information</h1>\n      ...\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing injectFilter Hook in Vike Renderer\nDESCRIPTION: Demonstrates how to implement the injectFilter hook to control asset preloading in a Vike application. The example shows filtering different asset types (images, fonts, videos) and controlling their injection points in the HTML.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/injectFilter/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// /renderer/+onRenderHtml.ts\n\nexport { onRenderHtml }\n\nimport type { InjectFilterEntry } from 'vike/types'\n\nasync function onRenderHtml(pageContext) {\n  // ...\n\n  const documentHtml = escapeInject`<!DOCTYPE html>\n    <html>\n      <body>\n        <div id=\"root\">${stream}</div>\n      </body>\n    </html>`\n\n  const injectFilter = (assets: InjectFilterEntry[]): void => {\n    assets.forEach(asset => {\n      if (\n        // We don't touch entry assets (recommended)\n        asset.isEntry ||\n        // We don't touch JavaScript preloading (recommended)\n        asset.assetType === 'script'\n      ) {\n        return\n      }\n\n      // Preload images\n      if (asset.assetType === 'image') {\n        asset.inject = 'HTML_BEGIN'\n      }\n\n      // Don't preload fonts\n      if (asset.assetType === 'font') {\n        asset.inject = false\n      }\n\n      // Preload videos\n      if (asset.mediaType?.startsWith('video')) {\n        asset.inject = 'HTML_END'\n      }\n    })\n  }\n\n  return { documentHtml, injectFilter }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onPrerenderStart Hook for Static Pages i18n in Vike\nDESCRIPTION: This code snippet demonstrates how to use the onPrerenderStart() hook to localize static pages that don't load data. It checks if the pageContext is already localized and handles both localized and non-localized pages accordingly.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/i18n/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onPrerenderStart.js\n\nexport { onPrerenderStart }\n\nimport assert from 'assert'\n\nconst locales = ['en-US', 'de-DE', 'fr-FR']\n\nfunction onPrerenderStart(prerenderContext) {\n  const pageContexts = []\n  prerenderContext.pageContexts.forEach((pageContext) => {\n    if(pageContext.locale) {\n      // Already localized by one of your onBeforePrerenderStart() hooks\n      assert(pageContext.urlOriginal.startsWith(`/${pagecontext.locale}/`))\n      pageContexts.push(pageContext)\n    } else {\n      // Duplicate pageContext for each locale\n      locales.forEach((locale) => {\n        // Localize URL and pageContext\n        pageContexts.push({\n          ...pageContext,\n          urlOriginal: `/${locale}${pageContext.urlOriginal}`,\n          locale\n        })\n      })\n    }\n  })\n  return {\n    prerenderContext: {\n      pageContexts\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling HTML Fragments with Vike\nDESCRIPTION: This snippet shows how to assemble HTML fragments using escapeInject and dangerouslySkipEscape. It demonstrates conditional rendering of meta tags and integration with UI framework rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/escapeInject/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// +onRenderHtml.js\n// Environment: server\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'some-ui-framework'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  const description = pageContext.config.description\n  const descriptionTag = !description ?\n    '' :\n    // We use `escapeInject` for an HTML fragment\n    escapeInject`<meta name=\"description\" content=\"${description}\">`\n\n  // We use `escapeInject` again for the overall HTML\n  return escapeInject`<html>\n    <head>\n      ${descriptionTag}\n    </head>\n    <body>\n      <div id=\"root\">\n        ${dangerouslySkipEscape(await renderToHtml(pageContext.Page))}\n      </div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom pageContext with vike-server\nDESCRIPTION: Shows how to define custom pageContext properties when using vike-server, allowing access to request-specific data.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napply(app, {\n  pageContext(runtime) {\n    return {\n      user: runtime.req.user\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderClient Hook for Custom UI Framework in Vike\nDESCRIPTION: This snippet demonstrates how to implement the onRenderClient hook to manually integrate a custom UI framework in Vike. It shows how to hydrate the DOM on the client side using the Page component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nexport { onRenderClient }\n\nimport { hydrateDom } from 'my-favorite-ui-framework/client'\n\nasync function onRenderClient(pageContext) {\n  // pageContext.Page is also available in the browser\n  const { Page } = pageContext\n  await hydrateDom(Page, document.getElementById('root'))\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround for React Component Import Issues\nDESCRIPTION: This code snippet demonstrates a local workaround for CJS/ESM interoperability issues when importing React components. It shows how to modify the import statement to correctly access the component from a package that may have compatibility issues.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport SomeComponent from \"some-npm-package\" // [!code --]\nimport pkg from \"some-npm-package\" // [!code ++]\n// This: // [!code ++]\nconst { SomeComponent } = pkg // [!code ++]\n// Or that: // [!code ++]\nconst SomeComponent = pkg.default // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Page Component in Vike with TypeScript\nDESCRIPTION: Example implementation of a custom error page component that handles various error scenarios including 401, 403, 404, and custom error messages. The component uses usePageContext hook to access error information and includes TypeScript type definitions for abort reasons.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/error-page/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/_error/+Page.ts\n\nexport { Page }\n\nimport { usePageContext } from 'vike-react/usePageContext'\n/* Or:\nimport { usePageContext } from 'vike-vue/usePageContext'\nimport { usePageContext } from 'vike-solid/usePageContext'\n*/\n\nfunction Page() {\n  const pageContext = usePageContext()\n\n  let msg: string // Message shown to the user\n  const { abortReason, abortStatusCode } = pageContext\n  if (abortReason?.notAdmin) {\n    // Handle `throw render(403, { notAdmin: true })`\n    msg = \"You cannot access this page because you aren't an administrator.\"\n  } else if (typeof abortReason === 'string') {\n    // Handle `throw render(abortStatusCode, `You cannot access ${someCustomMessage}`)`\n    msg = abortReason\n  } else if (abortStatusCode === 403) {\n    // Handle `throw render(403)`\n    msg = \"You cannot access this page because you don't have enough privileges.\"\n  } else if (abortStatusCode === 401) {\n    // Handle `throw render(401)`\n    msg = \"You cannot access this page because you aren't logged in. Please log in.\"\n  } else {\n    // Fallback error message\n    msg = pageContext.is404 ?\n      \"This page doesn't exist.\" :\n      \"Something went wrong. Try again (later).\"\n  }\n\n  return <p>{msg}</p>\n}\n\n// When using TypeScript you can define the type of `abortReason`\ndeclare global {\n  namespace Vike {\n    interface PageContext {\n      abortReason?:\n        | string\n        | { notAdmin: true }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication in Vike.js Server Middleware\nDESCRIPTION: Shows how to set up user authentication in Vike's server middleware by adding user information to pageContext. Demonstrates integration with authentication providers like Passport.js or Auth0.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/auth/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Vike server middleware\napp.get('*', async (req, res) => {\n  // Authentication middlewares (e.g. Passport.js and Grant) provide information about the\n  // logged-in user at req.user\n  const user = req.user\n\n  /* Or when using a third-party authentication provider (e.g. Auth0):\n  const user = await authProviderApi.getUser(req.headers)\n  */\n\n  const pageContextInit = {\n    urlOriginal: req.url,\n    // Make the user object available at pageContext.user\n    user\n  }\n  const result = await renderPage(pageContextInit)\n\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Mode in vike-server\nDESCRIPTION: Demonstrates how to enable and configure standalone mode in vike-server, which includes all necessary files for deployment in the build output.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeServer from 'vike-server/config'\n\nexport const config = {\n  // ...\n  extends: [vikeServer],\n  server: {\n    entry: 'server/index.js',\n    standalone: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global onBeforeRender with SQL Integration\nDESCRIPTION: Global onBeforeRender hook implementation that processes SQL configurations.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runQuery } from 'some-sql-engine'\n\nexport async function onBeforeRender(pageContext) {\n  const { sql } = pageContext.config\n  const data = await runQuery(sql)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useData() with TypeScript in Vike Components\nDESCRIPTION: Demonstrates how to use the useData() hook with TypeScript in a Vike component. It shows type inference for the data returned by the data() hook.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useData/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/product/SomeComponent.ts\n// Environment: server, client\n\nimport type { Data } from './+data'\n\n  // Inside a React/Vue/Solid component\n  const data = useData<Data>()\n```\n\n----------------------------------------\n\nTITLE: Implementing clientOnly() with React in Vike\nDESCRIPTION: This snippet demonstrates how to use clientOnly() in React to render components only on the client-side. It shows the import pattern, component initialization with dynamic imports, and usage with a fallback for loading states.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientOnly/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { clientOnly } from 'vike-react/clientOnly'\n\nconst SomeComponent = clientOnly(() => import(\"./SomeComponent.jsx\"));\n/* If the component isn't the default export:\nconst SomeComponent = clientOnly(async () => (await import('some-library')).SomeComponent)\n*/\n\nfunction MyComponent(props) {\n  return <SomeComponent fallback={<Loading />} />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Express.js middleware for Vike 0.4.134\nDESCRIPTION: This snippet shows the changes required in the Express.js middleware to use the new headers property from the httpResponse object. It replaces the contentType setting with a loop to set all headers.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.134/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// /server/index.js\n\nimport { renderPage } from 'vike/server'\n\n// Vike middleware\napp.get('*', async (req, res, next) => {\n  const pageContextInit = {\n    urlOriginal: req.originalUrl\n  }\n  const pageContext = await renderPage(pageContextInit)\n  const { httpResponse } = pageContext\n  if (!httpResponse) return next()\n-  const { body, statusCode, contentType, earlyHints } = httpResponse\n+  const { body, statusCode, headers, earlyHints } = httpResponse\n  if (res.writeEarlyHints) res.writeEarlyHints({ link: earlyHints.map((e) => e.earlyHintLink) })\n  res.status(statusCode)\n-  res.type(contentType)\n+  headers.forEach(([name, value]) => res.setHeader(name, value))\n  res.send(body)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Title and Description in Vike\nDESCRIPTION: This example demonstrates how to create and use 'title' and 'description' settings for defining HTML meta tags. It includes configuration, usage in pages, and implementation in rendering functions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/meta/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about-us/+title.js\n\nexport default 'About Us'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about-us/+description.js\n\nexport default 'Who we are, our values, and what we stand for.'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+title.js\n\nexport default pageContext => pageContext.data.product.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+description.js\n\nexport default pageContext => {\n  const { product } = pageContext.data\n  return `${product.name} - ${product.description}`\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/+config.ts\n\nimport type { Config } from 'vike/types'\n\nexport default {\n  meta: {\n    title: {\n      // Make the value of `title` available on both the server- and client-side\n      env: { server: true, client: true }\n    },\n    description: {\n      // Make the value of `description` available only on the server-side\n      env: { server: true }\n    }\n  }\n} satisfies Config\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onRenderClient.js\n// Environment: client\n\nexport { onRenderClient }\n\nimport { getTitle } from './utils'\n\nfunction onRenderClient(pageContext) {\n  // Update the value of <title> upon page navigation\n  if (!pageContext.isHydration) {\n    document.title = getTitle(pageContext)\n  }\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/utils.js\n// Environment: server & client\n\nexport { getTitle, getDescription }\n\nfunction getTitle(pageContext) {\n  // The value exported by /pages/**/+title.js is available at pageContext.config.title\n  const val = pageContext.config.title\n  if (!val) return 'Some default title'\n  if (typeof val === 'string') return val\n  if (typeof val === 'function') return val(pageContext)\n}\nfunction getDescription(pageContext) {\n  // Same as getTitle()\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { getTitle, getDescription } from './utils'\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'some-ui-framework'\n\nasync function onRenderHtml(pageContext) {\n  const title = getTitle(pageContext)\n  const description = getDescription(pageContext)\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n        <meta name=\"description\" content=\"${description}\" />\n      </head>\n      <body>\n        <div id=\"root\">${dataEndpointUrl(renderToHtml(<Page {...pageContext.data} />))}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Debug Flags for Verbose Error Reporting in Vike\nDESCRIPTION: Shows how to enable verbose original errors and infinite stack traces in Vike using the DEBUG environment variable. This is useful when Vike's error prettification may have removed relevant information.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/debug/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# - Show verbose original errors\n# - Show infinite stack traces (`Error.stackTraceLimit = Infinity`)\nDEBUG=vike:error npm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with styled-jsx in Vike\nDESCRIPTION: This code demonstrates how to collect and inject styled-jsx styles during server-side rendering in Vike. It uses a StyleRegistry to manage styles and injects them into the rendered HTML.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/styled-jsx/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n\nexport { onRenderHtml }\n\nimport React from 'react'\nimport { renderToString, renderToStaticMarkup } from 'react-dom/server'\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { Layout } from './Layout'\nimport { createStyleRegistry, StyleRegistry } from 'styled-jsx'\n\nconst registry = createStyleRegistry()\n\nasync function onRenderHtml(pageContext) {\n  // flush styles to support the possibility of concurrent rendering\n  registry.flush()\n\n  const { Page } = pageContext\n  // include the styleregistry in the app render to inject the styles\n  const viewHtml = dangerouslySkipEscape(\n    renderToString(\n      <StyleRegistry registry={registry}>\n        <Layout>\n          <Page />\n        </Layout>\n      </StyleRegistry>\n    )\n  )\n\n  // extract the styles to add as head tags to the server markup\n  const headTags = renderToStaticMarkup(<>{registry.styles()}</>)\n\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        ${dangerouslySkipEscape(headTags)}\n      </head>\n      <body>\n        <div id=\"root\">${viewHtml}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Safe HTML with escapeInject in Vike\nDESCRIPTION: This snippet demonstrates how to use escapeInject to safely render HTML on the server side, preventing XSS attacks by sanitizing user input. It also shows the usage of dangerouslySkipEscape for trusted HTML content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/escapeInject/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\n\nasync function onRenderHtml() {\n  const title = 'Hello<script src=\"https://devil.org/evil-code\"></script>'\n\n  // This HTML is safe thanks to `escapeInject` which sanitizes `title`\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n      </head>\n      <body>\n        <!-- ... ->\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic onBeforeRender Hook Implementation\nDESCRIPTION: Demonstrates basic usage of onBeforeRender() hook for setting multiple pageContext values.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function onBeforeRender() {\n  const someValue1 = /* ... */\n  const someValue2 = /* ... */\n  return {\n    pageContext: {\n      prop1: someValue1,\n      prop2: someValue2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforePrerenderStart for URL Generation\nDESCRIPTION: Shows how to use the onBeforePrerenderStart hook to generate URLs for parameterized routes in a movie application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforePrerenderStart/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movie/+onBeforePrerenderStart.js\n// Environment: Node.js\n\nexport { onBeforePrerenderStart }\n\nasync function onBeforePrerenderStart() {\n  const movies = await Movie.findAll()\n  const moviePageURLs = movies.map(movie => '/movie/' + movie.id)\n  return moviePageURLs\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue's ssrContext in Vike's bodyHtmlEnd\nDESCRIPTION: This snippet demonstrates how to access Vue's ssrContext object through Vike's pageContext to handle teleports in the bodyHtmlEnd file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlEnd/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+bodyHtmlEnd.js\n\nexport default (pageContext) => {\n  const content = pageContext.ssrContext.teleports?.['#someTeleport'] ?? ''\n  return `<div id=\"someTeleport\">${content}</div>`\n}\n```\n\n----------------------------------------\n\nTITLE: Using useData() Hook in UI Components with Vike\nDESCRIPTION: This code snippet shows how to use the useData() hook in a UI component to access the data fetched by the data() hook. It's compatible with React, Vue, and Solid.js when using their respective Vike extensions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data-fetching/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// SomeComponent.js\n// Environment: server, client\n\nimport { useData } from 'vike-react/useData'\n/* Or:\nimport { useData } from 'vike-vue/useData'\nimport { useData } from 'vike-solid/useData'\n*/\n\n  // Inside a UI component\n  const data = useData()\n  const { name, price } = data\n```\n\n----------------------------------------\n\nTITLE: Integrating vike-server with Hono\nDESCRIPTION: Creates a server entry point using Hono and vike-server's Hono integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport { Hono } from 'hono'\nimport { apply } from 'vike-server/hono'\nimport { serve } from 'vike-server/hono/serve'\n\nfunction startServer() {\n  const app = new Hono()\n  apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Basic Route Function Implementation in JavaScript\nDESCRIPTION: Demonstrates how to create a basic route function using RegExp for product edit pages with admin access control\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-function/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/edit/+route.js\n\n// This file defines the route of /pages/product/edit/+Page.js\n\n// We use a RegExp, but we could as well use a routing library.\nimport partRegex from 'part-regex'\nconst routeRegex = partRegex`/product/${/([0-9]+)/}/edit`\n\nexport function route(pageContext) {\n  if (!pageContext.user.isAdmin) return false\n\n  const match = pageContext.urlPathname.match(routeRegex)\n  if (!match) return false\n  const [, id] = match\n\n  return {\n    routeParams: { id }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderHtml Hook for SPA and SSR in Vike\nDESCRIPTION: This code shows how to implement the onRenderHtml hook to handle both SPA and SSR pages, rendering content for SSR pages and an empty shell for SPA pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'some-ui-framework'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  let pageHtml\n  if (pageContext.Page) {\n    // For SSR pages\n    pageHtml = renderToHtml(pageContext.Page)\n  } else {\n    // For SPA pages\n    pageHtml = ''\n  }\n  return escapeInject`<html>\n    <body>\n      <div id=\"root\">${dangerouslySkipEscape(pageHtml)}</div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Settings in Vike API Functions\nDESCRIPTION: This snippet shows how to use the viteConfig option in Vike API functions to specify custom Vite settings. It demonstrates loading a config file from a custom location and overriding specific settings.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dev } from 'vike/api'\n\nawait dev({\n  viteConfig: {\n    // vite.config.js can live in node_modules/my-framework/src/vite.config.ts\n    configFile: './path/to/vite.config.js',\n    // The app's root can be somewhere completely else than vite.config.js\n    root: './path/to/app/'\n    // Some Vite settings overriding vite.config.js\n    /* ... */\n  }\n})\nconsole.log('Development server is ready')\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderHtml Hook in JavaScript\nDESCRIPTION: Server-side implementation of onRenderHtml hook for rendering pages to HTML in Vike. The hook generates the complete HTML document structure and handles the integration with UI frameworks for server-side rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onRenderHtml/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +onRenderHtml.js\n// Environment: server\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml, createElement } from 'some-ui-framework'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext){\n  const { Page, data } = pageContext\n  const pageHtml = await renderToHtml(createElement(Page, data))\n\n  const documentHtml = escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>My SSR App</title>\n      </head>\n      <body>\n        <div id=\"page-root\">${dangerouslySkipEscape(pageHtml)}</div>\n      </body>\n    </html>`\n\n  return {\n    documentHtml,\n    pageContext: {\n      // We can define pageContext values here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Renderer Overrides\nDESCRIPTION: Demonstrates how to selectively override renderer components while maintaining default rendering behavior for certain paths. Shows specific override for product pages' client-side rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/multiple-renderer/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Our default renderer\nrenderer/+onRenderHtml.js\nrenderer/+onRenderClient.js\n\npages/some-page/index/+Page.js # Rendered with our default renderer\n\n# Our Product pages need a slightly different client-side.\n# We only override onRenderClient() while onRenderHtml() stays the same.\npages/product/+onRenderClient.js\npages/product/@productId/+Page.js\npages/product/index/+Page.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Link Component in Vike\nDESCRIPTION: This code snippet shows how to create a custom Link component that handles localized URLs. It uses the usePageContext hook to access the current locale and modifies the href attribute to include the locale prefix when necessary.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/i18n/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// components/Link.jsx\n\nimport { usePageContext } from 'vike-react/usePageContext' // or vike-vue / vike-solid\nimport { localeDefault } from '../i18n'\n\nexport function Link({ href, locale, ...props }) {\n  const pageContext = usePageContext()\n  locale = locale ?? pageContext.locale\n  if (locale !== localeDefault) {\n    href = '/' + locale + href\n  }\n  return <a href={href} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Layout Component\nDESCRIPTION: Example of defining a global Layout component in /pages/+Layout.jsx that applies to all pages in the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/+Layout.jsx\n\nexport { Layout }\n\n// children includes <Page/>\nfunction Layout({ children }) {\n  return <>\n    <Navigation/>\n    <Content>{children}</Content>\n  </>\n}\nfunction Navigation() { /* ... */ }\nfunction Content() { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Implementing onPrerenderStart Hook in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of the onPrerenderStart hook. It imports the necessary types from 'vike/types' and defines the hook with proper type annotations for improved type safety and autocompletion.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onPrerenderStart/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { onPrerenderStart }\n\nimport type { OnPrerenderStartAsync, PageContextServer } from 'vike/types'\n\nconst onPrerenderStart: OnPrerenderStartAsync = async (\n  prerenderContext\n): ReturnType<OnPrerenderStartAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useConfig in React Components\nDESCRIPTION: Demonstrates how to use useConfig hook within a React component to set page title and Open Graph image meta tag.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useConfig/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useConfig } from 'vike-react/useConfig' // or vike-vue / vike-solid\n\nfunction Movies() {\n  // Fetch data\n  const data = useSomeDataFetchingTool()\n\n  // Set <head> tags\n  const config = useConfig()\n  config({\n    title: data.title,\n    Head: <meta property=\"og:image\" content={data.previewImage} />\n  })\n\n  // Render UI\n  return (\n    <ul>\n      { data.movies.map(({ title }) => (\n        <li>{title}</li>\n      )) }\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual HTML Lang Implementation in onRenderHtml Hook\nDESCRIPTION: Shows how to manually set the HTML lang attribute in the onRenderHtml hook when not using UI framework extensions like vike-react or vike-vue.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/lang/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n\nimport { escapeInject } from 'vike/server'\n\nexport function onRenderHtml(pageContext) {\n  const lang = \"fr\"\n  return escapeInject`<!DOCTYPE html>\n    <html lang=${lang}>\n      ...\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Hook Implementation\nDESCRIPTION: Shows basic usage of the data() hook that sets pageContext.data value.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function data() {\n  const someValue = /* ... */\n  // pageContext.data === someValue\n  return someValue\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Rendering Hook\nDESCRIPTION: Implementation of onRenderClient hook to handle both initial page hydration and subsequent client-side navigation rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientRouting/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nexport { onRenderClient }\n\nimport { renderToDom, hydrateDom } from 'some-ui-framework'\n\nasync function onRenderClient(pageContext) {\n  // `pageContext.isHydration` is set by Vike and is `true` when the page\n  // is already rendered to HTML.\n  if (pageContext.isHydration) {\n    // We hydrate the first page. (Since we do SSR, the first page is already\n    // rendered to HTML and we merely have to hydrate it.)\n    await hydrateDom(pageContext.Page)\n  } else {\n    // We render a new page. (When the user navigates to a new page.)\n    await renderToDom(pageContext.Page)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Layout Implementation (Simple Approach)\nDESCRIPTION: Shows how to manually wrap Page components with layouts when not using a UI framework extension like vike-react, vike-vue, or vike-solid.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/index/+Page.js\n\nexport { Page }\n\nimport { LayoutDefault } from '../layouts/LayoutDefault'\n\nfunction Page() {\n  return <>\n    <LayoutDefault>\n      {/* ... */}\n    </LayoutDefault>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Using data() Hook without useData() in Custom Renderer\nDESCRIPTION: Example showing how to use the data() hook without the useData() component hook by manually passing the data to the Page component in onRenderHtml and onRenderClient hooks.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml, createElement } from 'some-ui-framework'\n\nasync function onRenderHtml(pageContext) {\n  // The data is available at pageContext.data\n  const { Page, data } = pageContext\n  const pageHtml = await renderToHtml(\n    // Pass pageContext.data to the <Page> component\n    createElement(Page, data)\n  )\n  /* JSX:\n  const pageHtml = await renderToHtml(<Page {...data} />)\n  */\n\n  return escapeInject`<html>\n    <div id='view-root'>\n      ${dangerouslySkipEscape(pageHtml)}\n    </div>\n  </html>`\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nexport { onRenderClient }\n\nimport { hydrateDom, createElement } from 'some-ui-framework'\n\nasync function onRenderClient(pageContext) {\n  const { Page, data } = pageContext\n  await hydrateDom(\n    // Pass pageContext.data to the <Page> component\n    createElement(Page, data),\n    document.getElementById('view-root')\n  )\n  /* JSX:\n  await hydrateDom(<Page {...data} />, document.getElementById('view-root'))\n  */\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movies/+Page.js\n// Environment: browser and server\n\nexport { Page }\n\n// In the onRenderHtml() and onRenderClient() hooks above,\n// pageContext.data is passed to the <Page> component.\nfunction Page(data) {\n  const { movies } = data\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Store Provider Wrapper for React in Vike\nDESCRIPTION: This JSX snippet creates a wrapper component that provides the store to React components. It uses the usePageContext hook from vike-react to access the pageContext and wrap children with the store Provider.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/store/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/+Wrapper.jsx\n\nimport { Provider } from 'awesome-store/react'\nimport { usePageContext } from 'vike-react/usePageContext'\n\nexport default function StoreProvider({ children }) {\n  const pageContext = usePageContext()\n  return <Provider store={pageContext.store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating vike-server with Express.js\nDESCRIPTION: Creates a server entry point using Express.js and vike-server's Express integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport express from 'express'\nimport { apply } from 'vike-server/express'\nimport { serve } from 'vike-server/express/serve'\n\nfunction startServer() {\n  const app = express()\n  apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Using useConfig() Inside +data Hook for Head Tags\nDESCRIPTION: Example of using the useConfig() universal hook inside a +data hook to set head tags based on fetched data.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/product/@id/+data.jsx\n\nimport { useConfig } from 'vike-react/useConfig' // or vike-{vue,solid}\n\nexport async function data() {\n  const config = useConfig()\n  const data = await fetchSomeData()\n  config({\n    Head: <>\n      {/* Image shown when sharing on social sites (Twitter, WhatsApp, ...) */}\n      <meta property=\"og:image\" content={data.product.image}>\n    </>\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Page-specific Pre-rendering Opt-in\nDESCRIPTION: Configuration to enable pre-rendering for specific pages in an opt-in setup.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Route Function Implementation\nDESCRIPTION: Shows how to implement a route function with TypeScript type definitions\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-function/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/product/index/+route.ts\n\nexport { route }\n\nimport type { RouteSync } from 'vike/types'\nimport { resolveRoute } from 'vike/routing'\n\nconst route: RouteSync = (pageContext): ReturnType<RouteSync> => {\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Pre-rendering with Bulk Data Fetching\nDESCRIPTION: Demonstrates how to use onBeforePrerenderStart for bulk data fetching to improve pre-rendering performance for multiple pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforePrerenderStart/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movie/+route.js\n// Environment: Node.js\n\nexport default '/movie/@movieId'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movie/+onBeforePrerenderStart.js\n// Environment: Node.js\n\nexport { onBeforePrerenderStart }\n\nasync function onBeforePrerenderStart() {\n  const movies = await Movie.findAll()\n\n  const moviePages = (\n    movies\n    .map(movie => {\n      const url = '/movie/' + movie.id\n      const pageContext = {\n        data: {\n          movie\n        }\n      }\n      return {\n        url,\n        // Because we already provide the `pageContext`, Vike will *not* call\n        // the `data()` (nor the `onBeforeRender()`) hook for `url`.\n        pageContext\n      }\n      /* We could also only return `url` and not provide `pageContext`. In that case\n       * Vike would call the `data()` (and `onBeforeRender()`) hook. But that would be wasteful\n       * since we already have all the data of all movies from our `await Movie.findAll()` call.\n       * Instead, we provide `pageContext` to make the pre-rendering build step faster.\n       */\n      // return { url }\n    })\n  )\n\n  // We can also return URLs that don't match the page's route.\n  // That way we can provide the `pageContext` of other pages.\n  // Here we provide the `pageContext` of the `/movies` page since\n  // we already have the data.\n  const movieListPage = {\n    url: '/movies', // Note how this URL '/movies' doesn't match the page's route /movie/@movieId\n    pageContext: {\n      data: {\n        // We filter out the data we don't need in order to minimize what is sent\n        // to the browser. We explain this practice at https://vike.dev/data-fetching\n        movieList: movies.map(({id, title}) => ({id, title})\n      }\n    }\n  }\n\n  return [movieListPage, ...moviePages]\n}\n```\n\n----------------------------------------\n\nTITLE: Route Guard Implementation in Vike\nDESCRIPTION: Shows how to implement route guards for protecting pages from unauthorized access.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin/+guard.js\n\nimport { render } from 'vike/abort'\n\n// This guard() hook protects all pages /pages/admin/**/+Page.js\n\nexport async function guard(pageContext) {\n  if (!pageContext.user.isAdmin) {\n    throw render(401, \"You aren't allowed to access this page.')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sentry Error Tracking Integration in Vike.js\nDESCRIPTION: Example of integrating Sentry's server-side error tracking with Vike.js using the Node.js SDK.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/error-tracking/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from \"@sentry/node\";\n\n// ...\n\n    if (pageContext.errorWhileRendering) {\n      Sentry.captureException(e)\n    }\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Integrating vike-server with Elysia\nDESCRIPTION: Creates a server entry point using Elysia and vike-server's Elysia integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport { Elysia } from 'elysia'\nimport { apply } from 'vike-server/elysia'\nimport { serve } from 'vike-server/elysia/serve'\n\nfunction startServer() {\n  const app = apply(new Elysia())\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with useData() in React/Vue/Solid Components\nDESCRIPTION: Demonstrates how to use the useData() hook to access data inside a React, Vue, or Solid component. The hook retrieves the data returned by the data() hook.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useData/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// SomeComponent.js\n// Environment: server, client\n\nimport { useData } from 'vike-react/useData' // or vike-vue / vike-solid\n\n  // Inside a React/Vue/Solid component\n  const data = useData()\n  const { name, price } = data\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Configuration in Page Config\nDESCRIPTION: This snippet demonstrates how to set the custom 'title' configuration for a specific page using the +config.js file in the page's directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about/+config.js\n\nexport default {\n  title: 'Demo showcasing the V1 design'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Mode with Options in vike-server\nDESCRIPTION: Shows how to configure standalone mode with additional options, such as esbuild settings for minification.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  // ...\n  extends: [vikeServer],\n  server: {\n    entry: 'server/index.js',\n    standalone: {\n      esbuild: {\n        minify: true,\n        // ... or any other esbuild option\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing guard() Hook for Admin Pages in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the guard() hook to protect admin pages from unauthorized access. It checks if the user is an admin and throws a render abort if not.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/guard/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin/+guard.js\n\nimport { render } from 'vike/abort'\n\n// This guard() hook protects all pages /pages/admin/**/+Page.js\n\nexport async function guard(pageContext) {\n  if (!pageContext.user.isAdmin) {\n    throw render(401, \"You aren't allowed to access this page.\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side HTML Rendering with State Initialization\nDESCRIPTION: Implementation of onRenderHtml hook to handle initial state management and HTML rendering on the server side.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientRouting/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'some-ui-framework'\nimport { getInitialState } from './getInitialState'\n\nasync function onRenderHtml(pageContext) {\n  const initialState = await getInitialState()\n\n  const pageHtml = await renderToHtml(pageContext.Page, initialState)\n\n  const documentHtml = escapeInject`<!DOCTYPE html>\n    <html>\n      <body>\n        <div>${dangerouslySkipEscape(pageHtml)}</div>\n      </body>\n    </html>`\n\n  return {\n    documentHtml,\n    pageContext: {\n      initialState\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prefetch Options in Vike Renderer Configuration\nDESCRIPTION: This snippet shows different options for configuring prefetchStaticAssets in the Vike renderer configuration. It includes viewport prefetching, hover prefetching, and disabling prefetching altogether.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prefetchStaticAssets/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\n// Environment: config\n\nexport default {\n  // Prefetch links as soon as they enter the viewport\n  prefetchStaticAssets: 'viewport'\n\n  // Prefetch links when the user's mouse hovers a link\n  prefetchStaticAssets: 'hover'\n\n  // Disable prefetching\n  prefetchStaticAssets: false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing data() Hook with TypeScript in Vike\nDESCRIPTION: Shows how to implement the data() hook using TypeScript in Vike. It includes type definitions for the returned data and the pageContext parameter.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useData/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/product/+data.ts\n// Environment: server\n\nexport { data }\nexport type Data = Awaited<ReturnType<typeof data>>\n\nimport type { PageContextServer } from 'vike/types'\n\nasync function data(pageContext: PageContextServer) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Pages with MDX Metadata\nDESCRIPTION: Example of using MDX to create a page with custom metadata exports for author information.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/markdown/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n// /pages/2024-new-year/+Page.mdx\n\nexport const metadata = {\n  author: {\n    firstName: 'John',\n    lastName: 'Doe',\n    country: 'England'\n  }\n}\n\n## Some Markdown\n\nThis page uses [markdown](https://en.wikipedia.org/wiki/Markdown).\n```\n\n----------------------------------------\n\nTITLE: Custom PageContext Properties in Server Middleware\nDESCRIPTION: Example showing how to define custom pageContext properties in server middleware, including user authentication data\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Your Vike server middleware integration\napp.get('*', async (req) => {\n  const pageContextInit = {\n    urlOriginal: req.url,\n    headersOriginal: req.headers,\n\n    // ***************************************\n    // **** Custom pageContext properties ****\n    // ***************************************\n\n    // Common use case: make information about logged-in user available at pageContext.user\n    user: req.user,\n\n    // Or any other value:\n    // pageContext.someCustomProp\n    someCustomProp: 'some-value'\n  }\n  const pageContext = await renderPage(pageContextInit)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Route Function in Vike\nDESCRIPTION: This snippet demonstrates how to create a custom route function in Vike. The function parses the URL pathname to determine if it's a valid product route and extracts the product ID.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+route.js\n\nexport { route }\n\nfunction route(pageContext) {\n  const parts = pageContext.urlPathname.split('/')\n  if (parts[1] !== 'product') {\n    return false\n  } else {\n    return {\n      routeParams: {\n        id: parts[2]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing guard() Hook with TypeScript\nDESCRIPTION: This snippet shows how to implement the guard() hook using TypeScript, including type imports and proper return type annotation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/guard/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { guard }\n\nimport type { GuardAsync } from 'vike/types'\nimport { render } from 'vike/abort'\n\nconst guard: GuardAsync = async (pageContext): ReturnType<GuardAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Custom Data Type in Vike's data() Hook\nDESCRIPTION: Demonstrates how to enforce a custom type for the data returned by the data() hook in Vike using TypeScript. This approach allows for more explicit type definitions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useData/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// +data.ts\n\nexport { data }\nexport type { Data }\n\ntype Data = /* the type you want to enforce */\n\nimport type { DataAsync } from 'vike/types'\n\nconst data: DataAsync = async (pageContext): Promise<Data> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono Server with Vike-Cloudflare\nDESCRIPTION: Server implementation using Hono framework with vike-cloudflare integration, including server startup configuration and port setup.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cloudflare-pages/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport { Hono } from \"hono\";\nimport { apply } from \"vike-cloudflare/hono\";\nimport { serve } from \"vike-cloudflare/hono/serve\";\n\nfunction startServer() {\n  const app = new Hono();\n  const port = process.env.PORT || 3000;\n\n  apply(app);\n\n  return serve(app, { port: +port });\n}\n\nexport default startServer();\n```\n\n----------------------------------------\n\nTITLE: Star Wars Movie Data Fetching\nDESCRIPTION: Server-side data fetching implementation for Star Wars movie details using the Star Wars API.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/star-wars/movie/+data.js\n// Environment: server\n\nimport fetch from 'node-fetch'\n\nexport async function data(pageContext) {\n  // The route parameter of `/star-wars/@movieId` is available at `pageContext.routeParams`\n  const { movieId } = pageContext.routeParams\n\n  // By default, +data.js files are loaded and executed only on the server-side\n  // which means we can use SQL/ORM queries here.\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  let movie = await response.json()\n\n  // Our render and hydrate functions we defined earlier pass `pageContext.data` to\n  // the root Vue component `Page`; this is where we define it.\n  return {\n    movie\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using globalProperties in Vue 3 for pageContext\nDESCRIPTION: Shows how to make pageContext available to all Vue components using app.config.globalProperties. This method provides an alternative to the Composition API approach.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/usePageContext/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// createVueApp.js\n\nconst app = createSSRApp(/*...*/)\napp.config.globalProperties.$pageContext = pageContext\n```\n\nLANGUAGE: vue\nCODE:\n```\n<!-- someComponent.vue -->\n\n<template>\n  <!-- We can access `pageContext` here -->\n  {{ $pageContext.someProp }}\n</template>\n\n<script setup>\nimport { getCurrentInstance } from 'vue'\n// We can access `pageContext` here\nconst pageContext = getCurrentInstance().appContext.config.globalProperties.$pageContext\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using pageContext with React Client Options\nDESCRIPTION: Shows how to use pageContext when configuring React client-side rendering options in Vike.js.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-setting/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+react.client.js\n\nexport default (pageContext) => {\n  return {\n    hydrateRootOptions,\n    createRootOptions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Asset Prefetching in Vike\nDESCRIPTION: This snippet demonstrates how to configure the prefetchStaticAssets option in Vike. It allows setting the prefetching strategy to 'viewport', which loads assets as soon as they appear in the browser's viewport.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prefetchStaticAssets/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  // Default value: 'hover'\n  prefetchStaticAssets: 'viewport',\n}\n```\n\n----------------------------------------\n\nTITLE: Using onBeforeRenderClient Hook with Hydration Check\nDESCRIPTION: Example showing how to implement the onBeforeRenderClient hook with a conditional check for hydration phase. This hook is called at the beginning of page rendering on the client-side and can be used to handle hydration-specific logic.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRenderClient/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +onBeforeRenderClient.js\n\nexport function onBeforeRenderClient(pageContext) {\n  if (pageContext.isHydration) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom UI Framework Client-Side Hydration\nDESCRIPTION: Example of custom integration of a UI framework showing client-side hydration setup.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/integration/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nexport { onRenderClient }\n\nimport { hydrateDom } from 'some-ui-framework'\n\nasync function onRenderClient(pageContext) {\n  // Here we can integrate performance measurement tools, e.g. to measure hydration performance\n  const { Page } = pageContext\n  // We control how our pages are hydrated\n  await hydrateDom(Page)\n}\n```\n\n----------------------------------------\n\nTITLE: Using throw render() in Vike Hook\nDESCRIPTION: This example demonstrates how to use throw render() within a Vike hook. It shows two scenarios: redirecting to a login page and rendering an error page with a 401 status code.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/+someHook.js\n\nimport { render } from 'vike/abort'\n\nexport function someHook() {\n  if (someCondition) {\n    throw render('/login')\n  }\n  if (someOtherCondition) {\n    throw render(401, \"You don't have the permission to access this page.\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Client-Side Error Tracking in Vike.js\nDESCRIPTION: Example of setting up error tracking in the client-side entry point using +client.js. Shows both Sentry initialization and custom error event listener implementation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/error-tracking/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+client.js\n\n// This is a good place to initialize an error tracker such as Sentry\nSentry.init()\n\n// Custom tracking\nwindow.addEventListener('error', (err) => {\n   console.error('An error occurred:', err)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderClient Hook with TypeScript\nDESCRIPTION: This snippet shows how to implement the onRenderClient hook using TypeScript. It includes type imports from Vike and demonstrates proper type annotation for the hook function.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onRenderClient/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /**/+onRenderClient.ts (usually /renderer/+onRenderClient.ts)\n// Environment: browser\n\nexport { onRenderClient }\n\nimport type { OnRenderClientAsync } from 'vike/types'\nimport { hydrateDom } from 'some-ui-framework'\n\nconst onRenderClient: OnRenderClientAsync = async (\n  pageContext\n): ReturnType<OnRenderClientAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing usePageContext in Vue 3 Composition API\nDESCRIPTION: Shows how to implement the usePageContext hook in Vue 3 using the Composition API. It demonstrates providing the pageContext to the Vue app and injecting it into components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/usePageContext/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// createVueApp.js\n\nconst app = createSSRApp(/*...*/)\napp.provide('pageContext', pageContext)\n```\n\nLANGUAGE: vue\nCODE:\n```\n<!-- someComponent.vue -->\n\n<template>\n  <!-- We can access `pageContext` here -->\n  {{ pageContext.someProp }}\n</template>\n\n<script setup>\nimport { inject } from 'vue'\nconst pageContext = inject('pageContext')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Language Configuration in Vike\nDESCRIPTION: Demonstrates how to dynamically set the language based on the pageContext.locale value, typically used for internationalization purposes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/lang/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+lang.js\n\nexport default (pageContext) => {\n  return pageContext.locale\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Description Setting in Vike\nDESCRIPTION: Sets the SEO description meta tags for a website by configuring the 'description' property in the +config.js file. This adds both standard meta description and Open Graph description tags to the page head.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/description/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  description: 'This website is a Vike demo.'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Context in Vike (JavaScript)\nDESCRIPTION: Demonstrates how to use getGlobalContext() to access global information about the app, including the assets manifest and Vite runtime configuration. This function can be called at any time, independent of page rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getGlobalContext/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getGlobalContext } from 'vike/server'\n\nconst globalContext = await getGlobalContext()\n\n// The assets manifest\nconsole.log(globalContext.assetsManifest)\n\n// Subset of the Vite configuration passed to the runtime. (By default the\n// Vite configuration is available only at build-time.)\nconsole.log(globalContext.viteRuntimeInfo)\n```\n\n----------------------------------------\n\nTITLE: Custom UI Framework Server-Side Rendering\nDESCRIPTION: Example of custom integration of a UI framework showing server-side rendering configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/integration/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\n// This can be any UI framework (React, Vue, Solid, Svelte, ...)\nimport renderToHtml from 'some-ui-framework'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  // `Page` is the `export { Page }` of our +Page.js files;\n  // Vike doesn't do anything with `Page` and just makes it available as\n  // `pageContext.Page`; we can export any `Page` value we want and do whatever we want with it.\n  const { Page } = pageContext\n\n  // We control how we use our UI framework to render our pages to HTML\n  const pageHtml = await renderToHtml(Page)\n\n  // We control the entire HTML\n  return escapeInject`<html>\n    <body>\n      <head>\n        <!-- Some libraries recommend loading code from a CDN -->\n        <script src=\"https://cdn.example.com/some-library/3.3.7/lib.min.js\"></script>\n      </head>\n      <div id=\"root\">\n        ${dangerouslySkipEscape(pageHtml)}\n      </div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component in Vike (JSX)\nDESCRIPTION: Demonstrates how to create a new page component in Vike using JSX. The component includes a Counter and is rendered on both browser and server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/index/+Page.jsx\n// Environment: browser and server\n\nimport React from \"react\";\nimport { Counter } from \"../components/Counter\";\n\nexport { Page };\n\nfunction Page() {\n  return <>\n    This page is rendered to HTML and interactive: <Counter />\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling SSR for Specific Pages in Vike (JavaScript)\nDESCRIPTION: This code demonstrates how to disable Server-Side Rendering for a specific section of pages in a Vike project by setting the 'ssr' option to false in a directory-specific config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/ssr/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin-panel/+config.js\n\nexport default {\n  // Applies only to all pages living under /pages/admin-panel/\n  ssr: false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom usePageContext Hook in Vue 3\nDESCRIPTION: Demonstrates how to create a custom usePageContext hook in Vue 3. This implementation uses a Symbol as a key for providing and injecting the pageContext.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/usePageContext/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// usePageContext.js\n\nimport { inject } from 'vue'\n\nexport { usePageContext }\nexport { setPageContext }\n\nconst key = Symbol()\n\nfunction usePageContext() {\n  const pageContext = inject(key)\n  return pageContext\n}\nfunction setPageContext(app, pageContext) {\n  app.provide(key, pageContext)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createSSRApp(/*...*/)\nsetPageContext(app, pageContext)\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { usePageContext } from './path/to/usePageContext'\nconst pageContext = usePageContext()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Client-Side JavaScript in Vike\nDESCRIPTION: A basic example of a +client.js file that runs on the client-side in a Vike project. This file is executed first in production and after Vite's HMR preamble in development. It's used for initializing client-side functionality such as error tracking or CSS frameworks.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/client/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+client.js\n// Environment: client\n\nconsole.log(\"I'm the first line of client-side JavaScript.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Queries in Vike Pages\nDESCRIPTION: This example shows how to use the 'meta' setting to enable pages to define their data requirements as SQL queries. It includes configuration and usage in a server-side rendering function.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/meta/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+sql.js\nexport const sql = (id) => `SELECT { name, price } FROM products WHERE id = \"${id}\";\"\n/* Or with an ORM:\nexport const sql = { modelName: 'Product', select: ['name', 'price'], where: { id } } */\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/user/@id/+sql.js\nexport const sql = (id) => `SELECT { firstName, lastName } FROM users WHERE id = \"${id}\";\"\n/* Or with an ORM:\nexport const sql = { modelName: 'User', select: ['firstName', 'lastName'], where: { id } } */\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nexport default {\n  meta: {\n    sql: {\n      env: {\n        server: true,\n        // Load the value of /pages/**/+sql.js only on the server\n        client: false\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onBeforeRender.js\n// Environment: server\n\nexport { onBeforeRender }\n\nimport { runQuery } from 'some-sql-engine'\n\nasync function onBeforeRender(pageContext) {\n  // The value exported by /pages/**/+sql.js is available at pageContext.config.sql\n  const { id } = pageContext.routeParams\n  const { sql } = pageContext.config\n  const query = sql(id)\n  const data = await runQuery(query)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication-based Route Function Example\nDESCRIPTION: Demonstrates how to implement a login page route that overrides other routes for unauthenticated users\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-function/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/login/+route.js\n\nexport { route }\n\nconst route = (pageContext) => {\n  // Only render the login page to unauthenticated users\n  if (pageContext.user !== null) return false\n  return {\n    // We override all other routes by setting a high `precedence` value of `99`.\n    // This means that, if the user isn't authenticated, then *all* URLs render the login page.\n    precedence: 99\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Styles Using onBeforeRenderHtml Hook in Vike\nDESCRIPTION: This snippet demonstrates how to collect CSS styles during server-side rendering using a CSS-in-JS tool's collection mechanism in the onBeforeRenderHtml hook. This is the first step in preventing flash of unstyled content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/css-in-js/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onBeforeRenderHtml.js\n\nimport { collect } from 'my-css-in-js-tool'\n\nexport default pageContext => {\n  pageContext.collectedStyles = collect()\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Data Fetching in Vike\nDESCRIPTION: Example of a server-side data hook that fetches Star Wars movie data, which will be synchronized to the client via pageContext.json requests during navigation\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-json/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/star-wars/+data.server.js\n\n// This data() hook is always called on the server-side. But, upon page navigation, the data\n// needs to be available on the client-side thus Vike makes a /star-wars/index.pageContext.json\n// request in order to pass the data from the server to the client.\nexport async function data() {\n  const response = await fetch('https://star-wars.brillout.com/api/films.json')\n  const movies = await response.json()\n  return { movies }\n}\n```\n\n----------------------------------------\n\nTITLE: Domain-Driven File Structure Pattern in Vike.js\nDESCRIPTION: Shows an advanced domain-driven file structure that separates the application into distinct domains (marketing, authentication, products) with their own pages, configurations, components, and database logic.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/file-structure/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===========================\n# ======= Marketing =========\n# ===========================\n# Pages\n(marketing)/pages/index/+Page.js      # URL: /\n(marketing)/pages/about/+Page.js      # URL: /about\n# Configs\n(marketing)/pages/+Layout.js\n(marketing)/pages/+prerender.js\n# Components\n(marketing)/components/ContactUs.js\n\n# ===========================\n# ===== Authentication ======\n# ===========================\n# Pages\nauth/pages/signup/+Page.js            # URL: /auth/signup\nauth/pages/login/+Page.js             # URL: /auth/login\n# Configs\nauth/pages/+Layout.js\n# Components\nauth/components/UserInfo.js\n# Database\nauth/database/fetchUser.js\n\n# ===========================\n# ===== Product pages =======\n# ===========================\n# Pages\nproducts/pages/index/+Page.js         # URL: /products\nproducts/pages/product/+Page.js       # URL: /product/@id\nproducts/pages/product/+route.js\n# Configs\nproducts/pages/+Layout.js\nproducts/pages/+ssr.js\n# Database\nproducts/database/fetchProduct.js\nproducts/database/fetchProductList.js\n\n# =============================\n# ======= Shared/Misc =========\n# =============================\n# Components shared across all domains\ncomponents/\n# Server code\nserver/\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Transition Start Hook in JavaScript\nDESCRIPTION: Basic implementation of onPageTransitionStart hook for creating custom page transition animations. The hook runs in browser environment and handles transition start events, including detection of backward navigation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onPageTransitionStart/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onPageTransitionStart.js\n// Environment: browser\n\nexport { onPageTransitionStart }\n\n// Create custom page transition animations\nasync function onPageTransitionStart(pageContext) {\n  console.log('Page transition start')\n  console.log('Is backwards navigation?', pageContext.isBackwardNavigation)\n  document.body.classList.add('page-transition')\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Server Routing in Vike 0.4.x (JavaScript)\nDESCRIPTION: This snippet shows how to update the server routing implementation from using getPage() to the new render function export in Vike 0.4.x.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { getPage } from 'vike/client'\n+ export { render }\n\n- const pageContext = await getPage()\n+ async function render(pageContext) {\n+   /* ... */\n+ }\n```\n\n----------------------------------------\n\nTITLE: Implementing onHydrationEnd Hook in TypeScript\nDESCRIPTION: TypeScript implementation of the onHydrationEnd hook with proper type definitions using the OnHydrationEndAsync type from Vike's type system.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onHydrationEnd/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/+onHydrationEnd.ts\n// Environment: browser\n\nexport { onHydrationEnd }\n\nimport type { OnHydrationEndAsync } from 'vike/types'\n\nconst onHydrationEnd: OnHydrationEndAsync = async (\n  pageContext\n): ReturnType<OnHydrationEndAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Date Rendering Implementation\nDESCRIPTION: Solution to prevent hydration mismatch by using server-side pre-rendering and passing the value through pageContext.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydration-mismatch/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport { onBeforeRender }\\n\\nasync function onBeforeRender() {\\n  const milliseconds = new Date().getMilliseconds()\\n  return {\\n    pageContext: {\\n      milliseconds\\n    }\\n  }\\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<span>{ pageContext.milliseconds }</span>\n```\n\n----------------------------------------\n\nTITLE: Server-Side HTML Rendering in Vike\nDESCRIPTION: Implementation of server-side HTML rendering using Vue's SSR capabilities in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nimport { createSSRApp, h } from 'vue'\nimport { renderToString } from '@vue/server-renderer'\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  const { Page, data } = pageContext\n  const app = createSSRApp({\n    render: () => h(Page, data)\n  })\n\n  const appHtml = await renderToString(app)\n\n  const title = 'Vite SSR'\n\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n      </head>\n      <body>\n        <div id=\"app\">${dangerouslySkipEscape(appHtml)}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of +Head Setting in Vike\nDESCRIPTION: Example of defining a +Head component to add various <head> tags including scripts, favicons, mobile icons, and social sharing metadata to a page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/+Head.jsx\n// /pages/+Head.vue\n// Environment: server\n\nimport previewImage from './previewImage.jpg'\nimport favicon from './favicon.png'\nimport iconMobile from './iconMobile.png'\n\nexport function Head() {\n  return <>\n    {/* Adding a script tag */}\n    <script type=\"text/javascript\" src=\"https://example.com/some-script.js\"></script>\n\n    {/* Icon shown in the browser tab (aka favicon) */\n    <link rel=\"icon\" href={favicon}>\n\n    {/* Icon shown on mobile homescreens (PWA) */\n    <link rel=\"apple-touch-icon\" href={iconMobile}>\n\n    {/* Image shown when sharing on social sites (Twitter, WhatsApp, ...) */}\n    <meta property=\"og:image\" content={previewImage}>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct way of returning pageContext in JavaScript\nDESCRIPTION: This snippet demonstrates the proper way to return pageContext in the onBeforeRender hook. It shows why returning the entire pageContext object with spread syntax should be avoided, and instead only the new properties should be returned.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-manipulation/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// +onBeforeRender.js\n\nexport { onBeforeRender }\n\nfunction onBeforeRender(pageContext) {\n  const starWarsMovies = await getStarWarsMovies()\n  return {\n    pageContext: { // [!code --]\n      ...pageContext, // [!code --]\n      starWarsMovies // [!code --]\n    } // [!code --]\n    // Do this instead // [!code ++]\n    pageContext: { // [!code ++]\n      starWarsMovies // [!code ++]\n    } // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Links in Vue\nDESCRIPTION: This code snippet shows how to create a Link component in Vue that implements active links functionality. Similar to the React version, it likely uses usePageContext to determine the current URL and applies appropriate styling.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/active-links/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Vue example -->\n<!-- File: /boilerplates/boilerplate-vue/renderer/Link.vue -->\n\n<!-- Implementation details not provided in the original text -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Store on Client-Side in Vike\nDESCRIPTION: This code demonstrates how to initialize the store on the client-side using the onBeforeRenderClient hook in Vike. It creates a new store instance with the initial state passed from the server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/store/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onBeforeRenderClient.js\n\nimport { createStore } from 'awesome-store'\n\nexport function onBeforeRenderClient(pageContext) {\n  pageContext.store = createStore(pageContext.storeInitialState)\n}\n```\n\n----------------------------------------\n\nTITLE: Client Context Configuration\nDESCRIPTION: Configuration to specify which data should be passed from server to client context.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientRouting/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\n// Environment: config\n\nexport default {\n  passToClient: ['initialState']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onBeforeRender for Client-Side Execution in Vike\nDESCRIPTION: This snippet demonstrates how to configure Vike to execute onBeforeRender() hooks on both server-side and client-side. It uses the meta configuration option to set the environment for onBeforeRender.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// /renderer/+config.ts\n\nimport type { Config } from 'vike/types'\n\nexport default {\n  meta: {\n    onBeforeRender: {\n      // We tell Vike to load and execute onBeforeRender()\n      // not only on the server-side but also on the client-side.\n      env: { server: true, client: true }\n    }\n  }\n} satisfies Config\n```\n\n----------------------------------------\n\nTITLE: Calling HTTP Endpoint for gRPC Mutation from Browser\nDESCRIPTION: This snippet shows how to call the HTTP endpoint for gRPC mutation from the browser side. It uses the fetch API to send a POST request with JSON data to the server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/grpc/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Environment: browser\n\nconst body = JSON.stringify({ text: 'Some new text' })\nawait fetch('/mutations/updateText', { body })\n```\n\n----------------------------------------\n\nTITLE: Implementing onHydrationEnd Hook in JavaScript\nDESCRIPTION: Example of implementing the onHydrationEnd hook in JavaScript. This hook is called after onRenderClient() finishes rendering the first page and the page becomes interactive. It only executes once after initial hydration, not on subsequent page navigations.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onHydrationEnd/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onHydrationEnd.js\n// Environment: browser\n\nexport { onHydrationEnd }\n\n// The onHydrationEnd() hook is called after the onRenderClient() hook finishes rendering the\n// first page the user navigates to. (The onHydrationEnd() hook isn't called upon subsequent\n// page navigation.)\nasync function onHydrationEnd(pageContext) {\n  console.log('The page is now interactive')\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side HTML Rendering with GraphQL\nDESCRIPTION: Server-side implementation of onBeforeRenderHtml with GraphQL integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToHtml } from 'my-graphql-tool/server'\n\nexport async function onBeforeRenderHtml(pageContext) {\n  const { Page } = pageContext\n  const { cache, html } = await renderToHtml(<Page />)\n  return {\n    pageContext: {\n      pageHtml: html,\n      cache\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vercel serverless function for Vike 0.4.134\nDESCRIPTION: This snippet illustrates the changes needed in a Vercel serverless function to adapt to Vike 0.4.134. It replaces the single content-type header setting with a loop to set all headers from the new headers property.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.134/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// /api/ssr.js\n\nimport { renderPage } from 'vike/server'\n\nexport default async function handler(req, res) {\n  const pageContextInit = { urlOriginal: req.url }\n  const pageContext = await renderPage(pageContextInit)\n  const { httpResponse } = pageContext\n\n  if (!httpResponse) {\n    res.statusCode = 200\n    res.end()\n    return\n  }\n\n-  const { body, statusCode, contentType } = httpResponse\n+  const { body, statusCode, headers } = httpResponse\n  res.statusCode = statusCode\n-  res.setHeader('content-type', contentType)\n+  headers.forEach(([name, value]) => res.setHeader(name, value))\n  res.end(body)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onCreateApp Hook in TypeScript for Vike-Vue\nDESCRIPTION: This TypeScript example shows how to implement the onCreateApp hook with proper type annotations. It imports the OnCreateAppSync type from vike-vue and uses it to define the hook function.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onCreateApp/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/+onCreateApp.ts\n// Environment: server, client\n\nexport { onCreateApp }\n\nimport type { OnCreateAppSync } from 'vike-vue'\nimport SomeVuePlugin from 'some-vue-plugin'\n\nconst onCreateApp: OnCreateAppSync = (pageContext): ReturnType<OnCreateAppSync> => {\n  const { app } = pageContext\n  app.use(SomeVuePlugin)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeRoute Hook for i18n in JavaScript\nDESCRIPTION: Example showing how to use onBeforeRoute hook for internationalization by extracting locale information from URL paths and modifying the page context.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRoute/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport { onBeforeRoute }\n\nfunction onBeforeRoute(pageContext) {\n  const { urlWithoutLocale, locale } = extractLocale(pageContext.urlPathname)\n  return {\n    pageContext: {\n      locale,\n      urlLogical: urlWithoutLocale\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of onBeforeRoute Hook\nDESCRIPTION: TypeScript example demonstrating type-safe implementation of the onBeforeRoute hook using the OnBeforeRouteSync type from Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRoute/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { onBeforeRoute }\n\nimport type { OnBeforeRouteSync } from 'vike/types'\n\nconst onBeforeRoute: OnBeforeRouteSync = (pageContext): ReturnType<OnBeforeRouteSync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Stream Settings in Vike\nDESCRIPTION: Demonstrates different ways to configure HTML streaming options in the Vike config file. Shows how to enable streaming with automatic stream type selection, or force specific stream types (Web or Node.js).\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/stream/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nexport default {\n  // Enable HTML Streaming. Let Vike extensions decide whether to use a Node.js or Web stream.\n  stream: true,\n  // Enable HTML Streaming. Force the stream to be a Web Stream.\n  stream: 'web',\n  // Enable HTML Streaming. Force the stream to be a Node.js Stream.\n  stream: 'node'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hattip Server with Vike-Cloudflare\nDESCRIPTION: Server implementation using Hattip framework with vike-cloudflare integration, including router setup and server configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cloudflare-pages/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport { createRouter } from \"@hattip/router\";\nimport { apply } from \"vike-cloudflare/hattip\";\nimport { serve } from \"vike-cloudflare/hattip/serve\";\n\nfunction startServer() {\n  const router = createRouter();\n  const port = process.env.PORT || 3000;\n\n  apply(router);\n\n  return serve(router, { port: +port });\n}\n\nexport default startServer();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vue Page with Vike\nDESCRIPTION: Demonstrates how to create a basic Vue page component in Vike that can be rendered on both browser and server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- /pages/index/+Page.vue -->\n<!-- Environment: browser and server -->\n\n<template>\n  This page is rendered to HTML and interactive: <Counter />\n</template>\n\n<script setup>\nimport Counter from '../../components/Counter.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manually Loading Vike Server Build in JavaScript\nDESCRIPTION: This snippet demonstrates how to manually import the Vike server build files when automatic loading fails. It includes importing the build file and the renderPage function from Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/importBuild-dot-cjs/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// server.js\n\n// We load the server build living at dist/server/\nimport './path/to/dist/server/importBuild.cjs'\n\n// Your server code, e.g. Express.js code, Vercel serverless function, Cloudflare Worker, ...\nimport { renderPage } from 'vike/server'\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Vike CLI Integration\nDESCRIPTION: Shows how to modify the package.json scripts to replace Vite CLI commands with Vike equivalents. This allows for SSR/SSG functionality by using Vike's dev, build, and preview commands instead of the standard Vite commands.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/add/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"dev\": \"vite\", // [!code --]\n    \"dev\": \"vike dev\", // [!code ++]\n    \"build\": \"vite build\", // [!code --]\n    \"build\": \"vike build\", // [!code ++]\n    \"preview\": \"vite preview\", // [!code --]\n    \"preview\": \"vike preview\", // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining render Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the render function. It can be used to render an error page with a specific status code or to render another page (URL rewrite).\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Render the error page\nrender(abortStatusCode: 401 | 403 | 404 | 429 | 500 | 503, abortReason?: unknown)\n// Render another page (aka URL rewrite)\nrender(url: `/${string}`, abortReason?: unknown)\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Animations with +Loading Setting in Vike (JSX)\nDESCRIPTION: This code shows how to define loading animations in Vike using the +Loading.jsx file. It implements both LoadingLayout for page/layout loading states and LoadingComponent for component loading states.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Loading/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/+Loading.jsx\n\nexport default {\n  layout: LoadingLayout,\n  component: LoadingComponent\n}\n\nfunction LoadingLayout() {\n  // Shown when a page or layout is loading\n  return <div>Loading...</div>\n}\n\nfunction LoadingComponent() {\n  // Shown when a component is loading\n  return <div>Loading...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Components in Vike\nDESCRIPTION: This example shows how to use the 'meta' setting to create and use a Layout component for defining page layouts. It includes configuration and usage in both server-side and client-side rendering functions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/meta/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+Layout.js\n// Environment: browser and server\n\nexport { Layout } from '../layouts/Responsive'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin/+Layout.js\n// Environment: browser and server\n\nexport { Layout } from '../layouts/Dashboard'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+Layout.js\n// Environment: browser and server\n\n// The default layout in case the page doesn't set one\nexport { Layout } from '../layouts/LayoutDefault'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nexport default {\n  meta: {\n    Layout: {\n      // Load the value of /pages/**/+Layout.js on both the server and client\n      env: { server: true, client: true },\n      // Make it cumulative for nested layouts\n      cumulative: true\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { renderToHtml } from 'some-ui-framework'\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\n\nasync function onRenderHtml(pageContext) {\n  const { Page, Layout } = pageContext.config\n  const pageHtml = renderToHtml(<Layout><Page/></Layout>)\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <body>\n        <div id=\"root\">${dangerouslySkipEscape(pageHtml)}</div>\n      </body>\n    </html>`\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onRenderClient.jsx\n// Environment: browser\n\nexport { onRenderClient }\n\nimport { renderDom } from 'some-ui-framework'\n\nasync function onRenderClient(pageContext) {\n  const { Page, Layout } = pageContext.config\n  renderDom(\n    <Layout><Page/></Layout>,\n    document.getElementById(\"root\")\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendering in Vike (JavaScript)\nDESCRIPTION: This snippet shows how to enable pre-rendering for pages in Vike by setting the 'prerender' option to true in the page configuration file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pre-rendering/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  prerender: true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filesystem Routing Structure in Vike\nDESCRIPTION: Demonstrates the basic filesystem to URL mapping pattern in Vike's filesystem routing system.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFILESYSTEM                     URL\n====================           ======\npages/index/+Page.js           /\npages/about/+Page.js           /about\npages/jobs/+Page.js            /jobs\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Title with TypeScript in Vike\nDESCRIPTION: Illustrates how to create a dynamic page title using TypeScript in Vike. This function uses the pageContext to access data and set the title based on fetched information, demonstrating integration with the Data Fetching API.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/title/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/some-page/+title.js\n// Environment: server, client\n\nimport type { Data } from './+data'\nimport type { PageContext } from 'vike/types'\n\nexport function title(pageContext: PageContext<Data>) {\n  return pageContext.data.product.title\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vike Middleware with renderPage() in Any Server Environment\nDESCRIPTION: This snippet demonstrates how to integrate Vike as a middleware in any server environment. The renderPage() function processes incoming requests, matching routes and generating HTML responses. It works across various JavaScript environments and server frameworks.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/components/JustAMiddleware.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// renderPage() doesn't depend on Node.js and can be used within any JavaScript environment:\n// Node.js, AWS, Cloudflare, Vercel, Deno, Bun, Lagon, ...\nimport { renderPage } from 'vike/server'\n\n// Any server: Express.js, Cloudflare Worker, AWS Lambda Function, Fastify, Hono, Nitro, ...\nserver.addMiddleware({\n  method: 'GET',\n  route: '*', // catch-all\n  async handler(request) {\n    const pageContextInit = { urlOriginal: request.url }\n    const pageContext = await renderPage(pageContextInit)\n    // `body` is the HTML of the page with a route matching pageContextInit.urlOriginal\n    const { body, statusCode, headers } = pageContext.httpResponse\n    const response = { body, statusCode, headers }\n    return response\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Passed Data in Client-Side Hydration\nDESCRIPTION: Example of accessing pageContext values on the client-side after hydration that were made available through passToClient configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/passToClient/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onHydrationEnd.js\n// Environment: client\n\nexport { onHydrationEnd }\n\nasync function onHydrationEnd(pageContext) {\n  // pageContext.user.id is available here thanks to passToClient\n  console.log(pageContext.user.id)\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring passToClient in Vike.js\nDESCRIPTION: Configuration for specifying which pageContext values should be made available on the client-side. Supports both direct and nested property paths.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/passToClient/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nexport default {\n  passToClient: [\n    // pageContext.someData\n    'someData',\n    // pageContext.user.id\n    'user.id', // Nested\n    // pageContext.user.info.avatar.url\n    'user.info.avatar.url', // Deeply nested\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vite Debug Flags for Troubleshooting\nDESCRIPTION: Shows how to discover and enable all Vite debug flags for troubleshooting the underlying build processes. Demonstrates how to enable all flags for discovery and then select specific flags for targeted debugging.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/debug/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=vite:* npm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Express.js Server with vike-server\nDESCRIPTION: Sets up an Express.js server using the vike-server extension. It applies Vike middleware and serves the application on port 3000.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/blog/vike-server/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport { apply } from 'vike-server/express'\nimport { serve } from 'vike-server/express/serve'\n\nfunction startServer() {\n  const app = express()\n  apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastify Server with vike-server\nDESCRIPTION: Sets up a Fastify server using the vike-server extension. It includes necessary configurations for HMR support and Vike middleware operation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/blog/vike-server/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport fastify from 'fastify'\nimport rawBody from 'fastify-raw-body'\nimport { apply } from 'vike-server/fastify'\nimport { serve } from 'vike-server/fastify/serve'\n\nasync function startServer() {\n  const app = fastify({\n    // ⚠️ Mandatory for HMR support\n    forceCloseConnections: true\n  })\n\n  // ⚠️ Mandatory for Vike middlewares to operate properly\n  await app.register(rawBody)\n  await apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Using useConfig in Data Hook\nDESCRIPTION: Example showing how to use useConfig hook inside a +data.jsx file to set page title and meta description based on fetched movie data.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useConfig/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/movies/+data.jsx\n\nexport { data }\n\nimport { useConfig } from 'vike-react/useConfig' // or vike-vue / vike-solid\n\nasync function data(pageContext) {\n  const config = useConfig()\n  const response = await fetch('https://star-wars.brillout.com/api/films.json')\n  let { movies } = await response.json()\n  config({\n    title: `${movies.length} Star Wars Movies`\n    Head: <meta name=\"description\" content={`List of all ${movies.length} Star Wars movies.`} />\n  })\n  return { movies }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onPrerenderStart Hook for i18n Pre-rendering in Vike\nDESCRIPTION: This code snippet demonstrates how to use the onPrerenderStart() hook for pre-rendering with internationalization. It duplicates pageContexts for each locale and modifies the URLs to include the locale prefix.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/i18n/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onPrerenderStart.js\n\nexport { onPrerenderStart }\n\nconst locales = ['en-US', 'de-DE', 'fr-FR']\nconst localeDefault = 'en-US'\n\nfunction onPrerenderStart(prerenderContext) {\n  const pageContexts = []\n  prerenderContext.pageContexts.forEach((pageContext) => {\n    // Duplicate pageContext for each locale\n    locales.forEach((locale) => {\n      // Localize URL\n      let { urlOriginal } = pageContext\n      if (locale !== localeDefault) {\n        urlOriginal = `/${locale}${pageContext.urlOriginal}`\n      }\n      pageContexts.push({\n        ...pageContext,\n        urlOriginal,\n        // Set pageContext.locale\n        locale\n      })\n    })\n  })\n  return {\n    prerenderContext: {\n      pageContexts\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Image in JavaScript\nDESCRIPTION: Shows how to set up a preview image for URL sharing by importing and configuring an image file in the pages configuration\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/image/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nimport previewImage from './previewImage.jpg'\n\nexport default {\n  image: previewImage\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Client-Side Rendering Options\nDESCRIPTION: Demonstrates how to set options for React's hydrateRoot() and createRoot() methods on the client side. Includes error handling configuration options and shows how to access pageContext.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-setting/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+react.client.js\n// Environment: client\n\nexport default {\n  hydrateRootOptions: {\n    onUncaughtError,\n    /*\n    onCaughtError,\n    onRecoverableError,\n    ...\n    */\n  },\n  createRootOptions: {\n    onUncaughtError\n    /*\n    onCaughtError,\n    onRecoverableError,\n    ...\n    */\n  }\n}\n\nfunction onUncaughtError(err) {\n  console.error('Uncaught React error', err)\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Dynamic HTML with bodyHtmlEnd in Vike\nDESCRIPTION: This snippet shows how to dynamically generate and insert HTML at the end of the <body> tag using a separate bodyHtmlEnd file in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlEnd/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+bodyHtmlEnd.js\n\nexport default (pageContext) => {\n  const { something } = pageContext\n  return `<div>${something}</div>`\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Function Isomorphic to Resolve 'window is not defined' Error\nDESCRIPTION: This solution shows how to make a function isomorphic by checking for the existence of the window object before using it. This approach allows the function to be used in both client-side and server-side environments without causing errors.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hints/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ~/my-app/some/file.js\n\n// This file should be loaded only on the client-side // [!code --]\n// This file can be loaded on both client- and server-side // [!code ++]\n\nfunction someFunction() {\n  window.alert('hello') // [!code --]\n  if (isBrowser()) window.alert('hello') // [!code ++]\n}\nfunction isBrowser() { // [!code ++]\n  return typeof window !== 'undefined' // [!code ++]\n} // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Client-side Rendering with Cache Hydration\nDESCRIPTION: Client-side implementation for hydrating the application with GraphQL cache.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { hydrate } from 'my-ui-framework/client'\nimport { CacheProvider } from 'my-graphql-tool/client'\n\nexport function onBeforeRenderClient(pageContext) {\n  const { Page, cache } = pageContext\n  hydrate(\n    <CacheProvider cache={cache}>\n      <Page />\n    </CacheProvider>,\n    document.getElementById('root')\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Data Fetching in Vike (JavaScript)\nDESCRIPTION: Demonstrates how to fetch data for a page in Vike. This function retrieves movie data from an API based on the route parameter.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// /pages/star-wars/movie/+data.js\n// Environment: server\n\nimport fetch from \"node-fetch\";\n\nexport async function data(pageContext) {\n  // The route parameter of `/star-wars/@movieId` is available at `pageContext.routeParams`\n  const { movieId } = pageContext.routeParams;\n\n  // By default, +data.js files are loaded and executed only on the server-side\n  // which means we can use SQL/ORM queries here.\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  let movie = await response.json();\n\n  // Our render and hydrate functions we defined earlier pass `pageContext.data` to\n  // the root React component `Page`; this is where we define it.\n  return {\n    movie\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Debugging Logs in Vike\nDESCRIPTION: Shows how to enable both error and general logs in Vike for detailed debugging information. This level of debugging is typically used by Vike maintainers to diagnose complex issues.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/debug/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Usually only used by Vike maintainers\nDEBUG=vike:error,vike:log npm run dev\n```\n\n----------------------------------------\n\nTITLE: Nested Layouts Directory Structure\nDESCRIPTION: Directory structure for implementing nested layouts where multiple layout components can be combined in a hierarchical structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Global outer layout that applies to all pages\npages/+Layout.js\n# Inner layout nested into the global outer layout, for marketing pages\npages/(marketing)/+Layout.js\n# Inner layout nested into the global outer layout, for admin pages\npages/admin-panel/+Layout.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Routing in Vike\nDESCRIPTION: Basic configuration to enable client routing in Vike application by setting clientRouting to true in the pages config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientRouting/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\nexport default {\n  clientRouting: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderClient Hook for SPA and SSR in Vike\nDESCRIPTION: This snippet demonstrates how to implement the onRenderClient hook to handle both SPA and SSR pages, detecting the render mode and applying the appropriate rendering or hydration method.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nimport { renderToDom, hydrateDom } from 'some-ui-framework'\n\nexport { onRenderClient }\n\nasync function onRenderClient(pageContext) {\n  const { Page } = pageContext\n  const root = document.getElementById('root')\n  if (\n    // We detect SPAs by using the fact that `innerHTML === ''` for the first render of an SPA\n    root.innerHTML === '' ||\n    // Upon Client Routing page navigation, Vike sets `pageContext.isHydration`\n    // to `false`.\n    !pageContext.isHydration\n  ) {\n    // - SPA pages don't have any hydration steps: they need to be fully rendered.\n    // - Page navigation of SSR pages also need to be fully rendered (if we use Client Routing)\n    await renderToDom(root, Page)\n  } else {\n    // The first render of SSR pages is merely a hydration (instead of a full render)\n    await hydrateDom(root, Page)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Head Tags for Page Title\nDESCRIPTION: Shows the HTML output generated by setting the 'title' in the Vike configuration. It includes both the standard <title> tag and an Open Graph meta tag for social media sharing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/title/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Some Title</title>\n  <meta property=\"og:title\" content=\"Some Title\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Retrieving pageContext after Navigation in Vike (JSX)\nDESCRIPTION: This snippet demonstrates how to use getPageContextClient to retrieve the pageContext of a newly navigated page after form submission. It imports necessary functions, defines a SignupForm component, and shows an onSubmit function that navigates to a new page and then retrieves its pageContext.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getPageContextClient/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getPageContextClient, navigate } from 'vike/client/router'\n\nfunction SignupForm() {\n   return (\n     <form onSubmit={onSubmit}>\n       {/* ... */}\n     </form>\n   )\n}\n\nasync function onSubmit() {\n  await navigate('/welcome')\n  // Get the `pageContext` object of the newly navigated /welcome page\n  const pageContext = getPageContextClient()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing clientOnly() with Vue in Vike\nDESCRIPTION: This snippet demonstrates how to implement clientOnly() in Vue to create components that render only on the client-side. It shows the import pattern, component setup with dynamic imports, and usage with named slots for fallback content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/clientOnly/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SomeComponent>\n    <template #fallback>\n      <p>Loading...</p>\n    </template>\n  </SomeComponent>\n</template>\n\n<script setup>\nimport clientOnly from 'vike-vue/clientOnly'\nconst SomeComponent = clientOnly(() => import('./SomeComponent.vue'))\n/* If the component isn't the default export:\nconst SomeComponent = clientOnly(async () => (await import('some-library')).SomeComponent)\n*/\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing onPrerenderStart Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the onPrerenderStart hook in JavaScript. It receives a prerenderContext object and returns a new array of page contexts, allowing for modifications such as adding localized versions of pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onPrerenderStart/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport { onPrerenderStart }\n\nasync function onPrerenderStart(prerenderContext) {\n  // new page contexts\n  const pageContexts = []\n\n  // for each original page context:\n  prerenderContext.pageContexts.forEach((pageContext) => {\n    // for each locale, push a new page context to pageContexts\n    // ...\n  })\n\n  return {\n    prerenderContext: {\n      pageContexts\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Collected Styles Using onAfterRenderHtml Hook in Vike\nDESCRIPTION: This snippet shows how to generate CSS from previously collected styles and inject them into the page head using the onAfterRenderHtml hook and the useConfig utility from a UI framework extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/css-in-js/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onAfterRenderHtml.js\n\nimport { useConfig } from 'vike-react/useConfig' // or vike-vue / vike-solid\nimport { generateCSS } from 'my-css-in-js-tool'\n\nexport default pageContext => {\n  const config = useConfig()\n  const css = generateCSS(pageContext.collectedStyles)\n  config({ Head: css })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vike React Extension in Configuration File\nDESCRIPTION: This code snippet shows how to install the vike-react extension by using the 'extends' property in the Vike configuration file. It imports the vikeReact configuration and sets it as the value for 'extends'.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/extends/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeReact from 'vike-react/config'\n\nexport default {\n  // Install `vike-react`. (Technically speaking: inherit the configuration `vikeReact`.)\n  extends: vikeReact\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Pre-rendering with Hooks\nDESCRIPTION: Implementation of conditional pre-rendering with onBeforePrerenderStart hooks based on custom conditions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport { prerender }\n\nimport { someCondition } from './someCondition'\n\nconst prerender = someCondition()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { onBeforePrerenderStart }\n\nimport { someCondition } from './someCondition'\n\nconst onBeforePrerenderStart = someCondition()\n  ? async () => {\n      // ...\n      return listOfUrls\n    }\n  : null\n```\n\n----------------------------------------\n\nTITLE: Implementing Aliases for Client-Side Use in Vike\nDESCRIPTION: This set of snippets demonstrates how to implement aliases for client-side use in a Vike project. It includes creating a separate aliases file, updating the Link component, and integrating aliases into the config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redirects/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Link/aliases.js\n\nexport const aliases = {\n  '/mail': 'mail@example.org',\n  '/donate': 'https://donate.stripe.com/9aiUAh021a',\n  '/chat': 'https://discord.com/invite/hfHhnJyVg8'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Link.js\n\nimport { aliases } from './Link/aliases'\n\nfunction Link({ href }) {\n  if (aliases[href]) href = aliases[href]\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nimport { aliases } from '../components/Link/aliases'\n\nexport default {\n  redirects: {\n    ...aliases\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Asset Base URL Configuration\nDESCRIPTION: Demonstrates how to conditionally apply baseAssets setting based on the environment.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nconst isProduction = process.env.NODE_ENV === 'production'\nconst baseAssets = isProduction ? 'https://cdn.example.org/my-website-assets/' : undefined\n\nexport default {\n  baseAssets\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for Hono Integration\nDESCRIPTION: This snippet shows the changes required in the vite.config.js file when using Hono with vike-cloudflare 0.2.x. It removes Hono-specific configurations and the 'pages' plugin.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport devServer from \"@hono/vite-dev-server\";// [!code --]\nimport { pages } from \"vike-cloudflare\";// [!code --]\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    devServer(...),// [!code --]\n    pages({// [!code --]\n      server: {// [!code --]\n        kind: \"hono\",// [!code --]\n        entry: \"hono-entry.ts\",// [!code --]\n      },// [!code --]\n    }),// [!code --]\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Development Middleware with Vike in JavaScript\nDESCRIPTION: This code snippet shows how to use the createDevMiddleware function from Vike to create server middleware for development. It demonstrates setting up the middleware with optional root path and Vite configuration, and explains the returned values including the middleware, Vite config, and Vite server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/createDevMiddleware/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDevMiddleware } from 'vike/server'\n\nconst {\n  devMiddleware, // The development middleware\n  viteConfig, // Resolved Vite configuration\n  viteServer, // Vite's development server\n} = await createDevMiddleware({\n  root: './path/to/app', // (optional, but recommended)\n  viteConfig: {\n    // Some Vite configuration (optional)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Parameterized Routes in Vike\nDESCRIPTION: Shows how to create dynamic routes with URL parameters using filesystem structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFILESYSTEM                     URL\n========================       =======================\npages/movie/@id/+Page.js       /movie/1, /movie/2, ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue and GraphQL Extensions for Admin Panel in Vike\nDESCRIPTION: This snippet shows how to configure the admin panel to use Vue and GraphQL extensions in Vike. It disables server-side rendering (SSR) for the admin panel, making it a Single Page Application (SPA).\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/why-the-v1-design/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin/+config.js\n\nimport vue from 'vike-vue'\nimport graphql from 'vike-vue-apollo'\n\nexport default {\n  // Render the Admin Panel as SPA\n  ssr: false,\n  // Use Vue + GraphQL for the Admin Panel\n  extends: [vue, graphql]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hattip with vike-cloudflare 0.2.x in +config.js\nDESCRIPTION: This snippet demonstrates how to configure Hattip with vike-cloudflare 0.2.x in the +config.js file. It adds the vike-cloudflare config to the 'extends' array and specifies the Hattip entry point.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeCloudflare from \"vike-cloudflare/config\";// [!code ++]\n\nexport default {\n  extends: [\n    // ...\n    vikeCloudflare // [!code ++]\n  ],\n  server: {// [!code ++]\n    entry: \"hattip-entry.ts\"// [!code ++]\n  }// [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw HTML in React with dangerouslySetInnerHTML\nDESCRIPTION: Example of injecting structured data as raw HTML in a React component using dangerouslySetInnerHTML for JSON-LD metadata.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport React from 'react'\nimport { Head } from 'vike-react/Head'\n\nfunction Image({ src, author }) {\n  return (\n    <>\n      <img src={src} />\n      <Head>\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify({\n              '@context': 'https://schema.org/',\n              contentUrl: { src },\n              creator: {\n                '@type': 'Person',\n                name: author\n              }\n            })\n          }}\n        ></script>\n      </Head>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing pageContext Properties with onCreatePageContext in Vike (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the onCreatePageContext hook to initialize properties on the pageContext object. It's applicable for both server and client environments.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onCreatePageContext/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/+onCreatePageContext.ts\n// Environment: server & client\n\nimport type { PageContext } from 'vike/types'\n\nexport function onCreatePageContext(pageContext: PageContext) {\n  pageContext.someInstance = new Instance({ some: 'initial-value' })\n}\n```\n\n----------------------------------------\n\nTITLE: Using navigate() for Programmatic Navigation in React with Vike\nDESCRIPTION: This snippet demonstrates how to use the navigate() function from Vike's client router to programmatically change pages, such as after a form submission. It also shows how to handle the navigation promise.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/navigate/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { navigate } from 'vike/client/router'\n\nfunction Form() {\n   return (\n     <form onSubmit={onSubmit}>\n       {/* ... */}\n     </form>\n   )\n}\n\nasync function onSubmit() {\n  const navigationPromise = navigate('/form/success')\n  console.log(\"The URL changed but the new page hasn't rendered yet.\")\n  await navigationPromise\n  console.log('The new page has finished rendering.')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Reload in Vike React Component\nDESCRIPTION: Example of implementing a logout component that uses Vike's reload() function to refresh the page after removing an authentication cookie. The reload() function provides faster page refreshes compared to window.location.reload when using Client Routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/reload/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// /components/Logout.jsx\n\nimport { reload } from 'vike/client/router'\n\nfunction Logout() {\n   return <button onClick={logout}>Logout</button>\n}\nasync function logout() {\n  // Removes the authentication cookie\n  await fetch('/logout', { method: 'POST' })\n  // Re-render the page to take into account the removed cookie\n  await reload()\n  // Reload is finished\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Endpoint URL in Vike\nDESCRIPTION: This snippet demonstrates how to set up a data endpoint URL for server-side data fetching. It includes the configuration for the 'dataEndpointUrl' setting and its usage in a data fetching function.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/meta/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/countries/+dataEndpointUrl.js\n// Environment: server\n\nexport default 'https://restcountries.com/v3.1/all'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nexport default {\n  meta: {\n    dataEndpointUrl: {\n      env: {\n        server: true,\n        // Load the value of /pages/**/+dataEndpointUrl.js only on the server\n        client: false\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+data.js\n// Environment: server\n\nexport { data }\n\nimport fetch from 'node-fetch'\n\nasync function data(pageContext) {\n  // The value exported by /pages/countries/+dataEndpointUrl.js is\n  // available at pageContext.config.dataEndpointUrl\n  const response = await fetch(pageContext.config.dataEndpointUrl)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Import Statements from CJS to ESM in JavaScript\nDESCRIPTION: This code snippet shows how to migrate import statements from CommonJS syntax to ECMAScript Modules syntax for the express and vike/server modules.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/CJS/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// CJS code\nconst express = require('express')\nconst { renderPage } = require('vike/server')\n// ESM code\nimport express from 'express'\nimport { renderPage } from 'vike/server'\n```\n\n----------------------------------------\n\nTITLE: Configuring serve() options for vike-server\nDESCRIPTION: Demonstrates various options available when using the serve() function from vike-server, including port configuration, callbacks, and server creation options.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nserve(app, {\n  // [Required] Server port. It's ignored in Cloudflare and Vercel Edge (there\n  // isn't any server in serverless deployment).\n  port: 3000,\n\n  // Called once the server is accepting connections\n  onReady() {\n    console.log('Server is ready.')\n  },\n\n  // Called once the server is created\n  onServer(server) {\n    // `server` type depends on your runtime:\n    //   Node.js:  Server ('node:http') by default. It's an HTTPS or HTTP2 server\n                   if the `createServer` option was provided (see below).\n    //   Deno:     return of Deno.Serve (experimental support)\n    //   Bun:      return of Bun.Serve  (experimental support)\n\n    // `server` is `undefined` in Cloudflare and Vercel Edge (there\n    // isn't any server in serverless deployment)\n  },\n\n\n  // ⚠️  The following two options are available only when running on Node.js\n\n  // [Node.js] Can be one of:\n  //     import { createServer } from 'node:http'\n  //     import { createServer } from 'node:https'\n  //     import { createSecureServer as createServer } from 'node:http2'\n  createServer,\n\n  // [Node.js] Options forwarded to `createServer()`\n  serverOptions: {\n    // For example SSL/TLS key and certificate for HTTPS\n    key: fs.readFileSync('/etc/letsencrypt/live/example.com/privkey.pem'),\n    cert: fs.readFileSync('/etc/letsencrypt/live/example.com/fullchain.pem'),\n    // ... other createServer() options ...\n  },\n\n\n  // 👉 Other options are passed down as-is to the target environment\n\n  // For example, you can define all @hono/node-serve options here, such as:\n  fetch,\n  overrideGlobalObjects: false,\n\n  // ... any options of your target environment ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderHtml Hook for SPA in Vike\nDESCRIPTION: This snippet shows how to implement the onRenderHtml hook for SPA pages, generating an empty HTML shell without the page's content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nimport { escapeInject } from 'vike/server'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml() {\n  // Note that `div#root` is empty\n  return escapeInject`<html>\n    <body>\n      <div id=\"root\"></div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Endpoint for gRPC Mutation in Express.js\nDESCRIPTION: This snippet demonstrates how to create an HTTP endpoint using Express.js to handle gRPC mutations on the server side. It sets up a POST route that can be used to update text via gRPC.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/grpc/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport express from 'express'\n\nconst app = express()\napp.use(express.json()) // Parse the HTTP request body as JSON\n\napp.post('/mutations/updateText', (req, res) => {\n  const { text } = req.body\n  // Call gRPC endpoints here\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vike Plugin in Vite Configuration\nDESCRIPTION: Sets up the Vike plugin in a Vite configuration file. The code imports the Vike plugin and adds it to the plugins array, with special attention to calling the plugin function rather than just referencing it.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vite-plugin/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport vike from 'vike/plugin'\n\nmodule.exports = {\n  // Make sure to include `vike()` and not `vike`\n  plugins: [vike()]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Error Tracking in Vike.js\nDESCRIPTION: Server-side error handling implementation using renderPage() middleware. Shows how to access and handle rendering errors through pageContext.errorWhileRendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/error-tracking/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\nimport { renderPage } from 'vike/server'\n\n// Any server: Express.js, Cloudflare Worker, AWS Lambda Function, Fastify, Hono, Nitro, ...\nserver.addMiddleware({\n  method: 'GET',\n  route: '*', // catch-all\n  async handler(request) {\n    const pageContext = await renderPage({ urlOriginal: request.url })\n\n    if (pageContext.errorWhileRendering) {\n      /* Vike already calls console.error() so the following line isn't needed.\n      console.error(pageContext.errorWhileRendering)\n      */\n\n      // If you use an error tracker (e.g. Sentry):\n      myErrorTracker.intercept(pageContext.errorWhileRendering)\n    }\n\n    // The HTTP response of the page.\n    // If pageContext.errorWhileRendering is defined then this is usually the error page.\n    return pageContext.httpResponse\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Wrapper Components Nesting in JSX\nDESCRIPTION: Shows how multiple Wrapper components can be nested to provide layered functionality around Layout and Page components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Wrapper/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Wrapper1>\n  <Wrapper2>\n    <Wrapper3>\n      <Layout>\n        <Page />\n      </Layout>\n    </Wrapper3>\n  </Wrapper2>\n</Wrapper1>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Head Tags in Vike (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set default head tags for all pages in a Vike project. It includes setting the title, description, and image meta tags.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-tags/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nimport image from './previewImage.jpg'\n\nexport default {\n  // Default <title>\n  title: 'Awesome Rockets',\n  // Default <meta name=\"description\">\n  description: 'We deliver payload to space',\n  // Default <meta property=\"og:image\">\n  image\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Headers Object in Vike\nDESCRIPTION: Demonstrates how to create a standard Headers object from pageContext.headers\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// The `new Headers()` constructor is available in all common JavaScript environments:\n// Node.js, Cloudflare Workers, browsers, ...\nconst headers = new Headers(pageContext.headers)\n```\n\n----------------------------------------\n\nTITLE: Vike onRenderHtml Hook with Template\nDESCRIPTION: Server-side hook implementation showing how Vike injects assets into an HTML template. Uses escapeInject and dangerouslySkipEscape utilities for safe HTML rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/injectAssets/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// +onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\n\nasync function onRenderHtml(pageContext) {\n  // `pageHtml` generated by React/Vue\n  const pageHtml = /*...*/\n\n  // Vike injects the assets to the HTML\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n      </head>\n      <body>\n        <div id=\"app\">${dangerouslySkipEscape(pageHtml)}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Page Groups Organization in Vike\nDESCRIPTION: Illustrates how to organize pages into logical groups using parentheses notation and configure different sections of the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nFILESYSTEM                             URL\n================================       ==================\npages/(marketing)/index/+Page.js       /\npages/(marketing)/about/+Page.js       /about\npages/admin-panel/index/+Page.js       /admin-panel\npages/admin-panel/users/+Page.js       /admin-panel/users\n```\n\n----------------------------------------\n\nTITLE: Retrieving Store State After HTML Rendering in Vike\nDESCRIPTION: This code snippet shows how to retrieve the initial state of the store after HTML rendering using the onAfterRenderHtml hook. It stores the state in pageContext for later use on the client-side.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/store/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onAfterRenderHtml.js\n\nexport function onAfterRenderHtml(pageContext) {\n  pageContext.storeInitialState = pageContext.store.getState()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Injection Positions in Vike\nDESCRIPTION: Configuration file demonstrating different options for controlling where Vike injects scripts using the injectScriptsAt setting. Options include injecting at the beginning of HTML, end of HTML, beginning of HTML stream, or letting Vike decide automatically.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/injectScriptsAt/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  // Inject scripts at the beginning of the HTML\n  injectScriptsAt: 'HTML_BEGIN',\n  // Inject scripts at the end of the HTML\n  injectScriptsAt: 'HTML_END',\n  // Inject scripts at the beginning of the HTML stream\n  injectScriptsAt: 'STREAM',\n  // Let Vike decide\n  injectScriptsAt: null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for styled-jsx in React\nDESCRIPTION: This snippet shows how to configure Vite to use styled-jsx with React by adding it to the babel plugins in the vite.config.js file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/styled-jsx/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport react from '@vitejs/plugin-react'\nimport vike from 'vike/plugin'\n\nexport default {\n  plugins: [react({ babel: { plugins: ['styled-jsx/babel'] } }), vike()]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page-Specific Head Tags in Vike (JavaScript)\nDESCRIPTION: This code shows how to set page-specific head tags, potentially overriding defaults. It sets a custom title and description for a specific page or group of pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-tags/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/starship/+config.js\n\nexport default {\n  title: 'Rocket: Starship',\n  description: 'The Starship is the largest rocket ever built.'\n}\n```\n\n----------------------------------------\n\nTITLE: Using history.pushState() for Custom URL Changes with Vike\nDESCRIPTION: This snippet shows how to use history.pushState() to change the URL independently of Vike. It also includes an event listener for the popstate event to handle navigation, which is crucial for maintaining browser history functionality.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/navigate/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Somewhere in your client-side code\nwindow.history.pushState(null, '', '/some-url')\n\nwindow.addEventListener('popstate', () => {\n  // Vike sets triggeredBy to 'vike' | 'browser' | 'user'\n  // https://vike.dev/navigate#history-pushstate\n  const { triggeredBy } = window.history.state\n\n  // Navigation triggered by Vike or the browser\n  if (triggeredBy === 'vike' || triggeredBy === 'browser') {\n    // Abort: let Vike handle the navigation\n    return\n  }\n\n  // Navigation triggered by our history.pushState() call\n  if (triggeredBy === 'user') {\n    // TODO\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Server-side Credentials File Example\nDESCRIPTION: Demonstrates using .server.js extension to protect sensitive credentials from being exposed to the client-side.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/file-env/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /server/database/credentials.server.js\n\n// This file should *never* be imported by client-side code.\n// We use .server.js to guarantee that.\nexport default {\n  password: 'WLa!9HW?E10a'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono Server with vike-server\nDESCRIPTION: Configures a Hono server using the vike-server extension. It applies Vike middleware and serves the application on port 3000.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/blog/vike-server/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { apply } from 'vike-server/hono'\nimport { serve } from 'vike-server/hono/serve'\n\nfunction startServer() {\n  const app = new Hono()\n  apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Configuring ssr.noExternal in Vite\nDESCRIPTION: Configuration to handle problematic npm packages by adding them to ssr.noExternal in vite.config.js.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  ssr: {\n    // Add problematic npm package here:\n    noExternal: ['some-npm-package']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vanilla UI Tools with onHydrationEnd Hook\nDESCRIPTION: Example showing how to initialize vanilla JavaScript UI components like tooltips and modals after hydration completes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/integration/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onHydrationEnd.js\n\nexport default () => {\n  // Initializing vanilla JS component libraries, for example tooltips, after hydration.\n  tooltip.init(document.querySelectorAll('.tooltip'))\n  // Or some vanilla JS modal library\n  $('.my-modals').modal()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono with vike-cloudflare 0.2.x in +config.js\nDESCRIPTION: This snippet demonstrates how to configure Hono with vike-cloudflare 0.2.x in the +config.js file. It adds the vike-cloudflare config to the 'extends' array and specifies the Hono entry point.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeCloudflare from \"vike-cloudflare/config\";// [!code ++]\n\nexport default {\n  extends: [\n    // ...\n    vikeCloudflare // [!code ++]\n  ],\n  server: {// [!code ++]\n    entry: \"hono-entry.ts\"// [!code ++]\n  }// [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Product Page Nested Layout Structure\nDESCRIPTION: Directory structure showing how to implement tab-based navigation within a product page using nested layouts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npages/+Layout.js                      # Global layout (shared among all pages)\npages/product/@id/+Layout.js          # Outer content (\"Macbook\" ...)\npages/product/@id/pricing/+Page.js    # Inner content (\"Pricing\" ...)\npages/product/@id/reviews/+Page.js    # Inner content (\"Reviews\" ...)\n```\n\n----------------------------------------\n\nTITLE: Express.js Base URL Setup\nDESCRIPTION: Shows how to configure Express.js routes to handle base URLs with Vike's renderPage function.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/some-base/*', async (req, res) => {\n  const pageContextInit = { urlOriginal: req.url }\n  const pageContext = await renderPage(pageContextInit)\n  assert(!pageContext.isBaseMissing)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Vite Dev Server to Vike Middleware\nDESCRIPTION: Example of migrating from Vite's createServer API to Vike's createDevMiddleware in an Express.js server setup, including production static file serving and SSR middleware configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/cli/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport { renderPage, createDevMiddleware } from 'vike/server'\n\nconst isProduction = process.env.NODE_ENV === 'production'\nconst root = `${__dirname}/..`\n\nstartServer()\n\nasync function startServer() {\n  // Create an Express.js server\n  const app = express()\n\n  // Dev/prod middleware\n  if (!isProduction) {\n    const { devMiddleware } = await createDevMiddleware({ root })\n    app.use(devMiddleware)\n  } else {\n    app.use(express.static(`${root}/${outDir}/client`))\n  }\n\n  // SSR middleware\n  app.get('*', async (req, res) => {\n    const pageContext = await renderPage({ urlOriginal: req.originalUrl })\n    const { body, statusCode, headers } = pageContext.httpResponse\n    headers.forEach(([name, value]) => res.setHeader(name, value))\n    res.status(statusCode).send(body)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Service Worker Registration\nDESCRIPTION: Example of registering a service worker in the client-side entry point.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/integration/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+client.js\n\n// Initializing a Service Worker\nnavigator.serviceWorker.register(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Processing Accept-Language Header Values\nDESCRIPTION: Shows how to split and process comma-separated header values into an array\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst acceptLanguage = pageContext.headers['accept-language']\n  .split(',')\n  .map(v => v.trimStart())\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Environment Variables in Vike Server-Side Code\nDESCRIPTION: Shows how to access private environment variables (without PUBLIC_ENV__ prefix) in server-side code using import.meta.env.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/env/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction data() {\n  // Environment variables without the PUBLIC_ENV__ prefix can be used only in server-side code.\n  // If this data() hook is loaded only on the server-side (which is the case\n  // by default) then DATABASE_PASSWORD can be accessed here.\n  import.meta.env.DATABASE_PASSWORD\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of onBeforePrerenderStart\nDESCRIPTION: Provides a TypeScript example of the onBeforePrerenderStart hook with proper type annotations.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforePrerenderStart/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport { onBeforePrerenderStart }\n\nimport type { OnBeforePrerenderStartAsync } from 'vike/types'\n\nconst onBeforePrerenderStart: OnBeforePrerenderStartAsync = async (\n): ReturnType<OnBeforePrerenderStartAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cloudflare Workers for Vike 0.4.134\nDESCRIPTION: This code modification demonstrates how to update the Cloudflare Workers integration for Vike 0.4.134. It replaces the contentType property with the new headers property when creating the Response object.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.134/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// /worker/ssr.js\n\nimport { renderPage } from 'vike/server'\n\n// Vike middleware\nasync function handleSsr(url) {\n  const pageContextInit = {\n    urlOriginal: url\n  }\n  const pageContext = await renderPage(pageContextInit)\n  const { httpResponse } = pageContext\n  if (!httpResponse) {\n    return null\n  } else {\n-    const { body, statusCode, contentType } = httpResponse\n+    const { body, statusCode, headers } = httpResponse\n    return new Response(body, {\n-      headers: { 'content-type': contentType },\n+      headers,\n      status: statusCode\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration with Meta\nDESCRIPTION: Configuration setup for advanced onBeforeRender implementation with GraphQL integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  passToClient: ['cache'],\n  meta: {\n    onBeforeRender: {\n      env: { client: true, server: true }\n    },\n    onBeforeRenderHtml: {\n      env: { server: true }\n    },\n    onBeforeRenderClient: {\n      env: { client: true }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Host Configuration in Vite\nDESCRIPTION: This snippet shows the equivalent configuration in Vite's `vite.config.js` file. It sets both the server and preview host options to `true`, allowing access from the local network for both development and preview modes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/host/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default {\n  server: {\n    host: true\n  },\n  preview: {\n    host: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Rendering in Vike\nDESCRIPTION: Implementation of client-side rendering and hydration using Vue in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: browser\n\nimport { createSSRApp, h } from 'vue'\n\nexport { onRenderClient }\n\nasync function onRenderClient(pageContext) {\n  const { Page, data } = pageContext\n  const app = createSSRApp({\n    render: () => h(Page, data)\n  })\n  app.mount('#app')\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Structure and URL Mapping in Vike\nDESCRIPTION: This snippet shows the relationship between project file structure and corresponding URLs when using filesystemRoutingRoot. It illustrates how different pages in the marketing directory are mapped to URLs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystemRoutingRoot/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPROJECT FILES                               URL\n===============================             ======\n/marketing/pages/index/+Page.js             /\n/marketing/pages/about/+Page.js             /about\n/marketing/pages/jobs/+Page.js              /jobs\n```\n\n----------------------------------------\n\nTITLE: Avoiding pageContext mutation in JavaScript\nDESCRIPTION: This example illustrates the preferred method of extending pageContext without direct mutation. It shows the incorrect way of mutating pageContext directly and the correct approach of returning a new object with the extended properties.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-manipulation/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// +onBeforeRender.js\n\nexport { onBeforeRender }\n\nfunction onBeforeRender(pageContext) {\n  const starWarsMovies = await getStarWarsMovies()\n  pageContext.starWarsMovies = starWarsMovies // [!code --]\n  // We should do this instead // [!code ++]\n  return { // [!code ++]\n    pageContext: { // [!code ++]\n      starWarsMovies // [!code ++]\n    } // [!code ++]\n  } // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Components in Vike Pages\nDESCRIPTION: Demonstrates the correct way to export components in Vike page files, emphasizing the use of a single main export and avoiding side exports to prevent unnecessary code loading.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/no-side-exports/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/index/+Page.js\n\n// ✅ Main export\nexport { Page }\n\n// ❌ Avoid side exports\nexport { SomeSharedComponent }\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases for Node.js in package.json\nDESCRIPTION: This JSON snippet demonstrates how to set up path aliases in package.json for Node.js. It provides configurations for both JavaScript and TypeScript files.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/path-aliases/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n{\n  \"imports\": {\n    // JavaScript:\n    \"#root/*\": \"./*.js\",\n    // TypeScript:\n    \"#root/*\": \"./*.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-rendering Defaults for Marketing Pages\nDESCRIPTION: Configuration using Domain-Driven File Structure to enable pre-rendering for all marketing pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = true\n```\n\n----------------------------------------\n\nTITLE: Multiple Stack Configuration Examples\nDESCRIPTION: Examples showing how to configure different technology stacks for different sections of the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/config/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/admin/+config.js\n\nimport vue from 'vike-vue/config'\nimport telefunc from 'vike-telefunc/config'\n\n// Vue + SPA + RPC\nexport default {\n  ssr: false,\n  extends: [vue, telefunc]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/product/@id/+config.js\n\nimport react from 'vike-react/config'\nimport graphql from 'vike-react-apollo/config'\n\n// React + SSR + GraphQL\nexport default {\n  ssr: true,\n  extends: [react, graphql]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/(marketing)/+config.js\n\nimport vue from 'vike-vue/config'\n\n// Vue + SSR\nexport default {\n  ssr: true,\n  extends: [vue]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Page Component in JavaScript\nDESCRIPTION: This snippet shows how to migrate a page component from the old .page.js file structure to the new +Page.js file in its own directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/index.page.js // [!code --]\n// /pages/some-page/+Page.js // [!code ++]\n\nexport { Page }\n```\n\n----------------------------------------\n\nTITLE: Redirect Usage Example\nDESCRIPTION: Example showing how to use the redirect function within a hook to conditionally redirect users to another URL. The function is imported from 'vike/abort' and thrown to abort the current page rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redirect/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/+someHook.js\n\nimport { redirect } from 'vike/abort'\n\nexport function someHook() {\n  if (someCondition) {\n    throw redirect('/some-url')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Query with Config and Head Components\nDESCRIPTION: Alternative implementation using Config and Head components with React Query integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useConfig/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Config } from 'vike-react/Config'\nimport { Head } from 'vike-react/Head'\nimport { useSuspenseQuery } from '@tanstack/react-query'\n\nfunction Movies() {\n  // Fetch data\n  const query = useSuspenseQuery({\n    queryKey: ['movies'],\n    queryFn: () => fetch('https://star-wars.brillout.com/api/films.json')\n  })\n  const movies = query.data\n\n  // Render UI and <head> tags\n  return (\n    <Config title={`${movies.length} Star Wars Movies`} />\n    <Head>\n      <meta name=\"description\" content={`List of all ${movies.length} Star Wars movies.`} />\n    </Head>\n    <ul>{\n      movies.map(({ title }) => (\n        <li>{title}</li>\n      ))\n    }</ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data-Driven Page Component in Vike (JSX)\nDESCRIPTION: Demonstrates how to create a page component that uses fetched data in Vike. This component displays details of a Star Wars movie.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/star-wars/movie/+Page.jsx\n// Environment: browser and server\n\nimport React from \"react\";\n\nexport { Page };\n\nfunction Page(data) {\n  const { movie } = data;\n  return <>\n    <h1>{movie.title}</h1>\n    <p>Release Date: {movie.release_date}</p>\n    <p>Director: {movie.director}</p>\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Cumulative +Head Settings in Vike\nDESCRIPTION: Examples of how +Head settings accumulate across different page configurations, allowing shared head tags for all pages and specific ones for certain sections.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/+Head.js\n// Environment: server\n\nimport favicon from './favicon.png'\n\nexport const Head = () =>\n  // This favicon applies to all pages\n  <link rel=\"icon\" href={favicon}>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/about-us/+Head.js\n// Environment: server\n\nimport previewImage from './previewImage.jpg'\n\nexport const Head = () =>\n  // Both the favicon above and this tag applies to /pages/about-us/+Page.js\n  <meta property=\"og:image\" content={previewImage}>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/(marketing)/+Head.js\n// Environment: server\n\nimport favicon from './favicon.png'\n\n// Applies to all marketing pages\nexport const Head = () => <link rel=\"icon\" href={favicon}>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/admin/+Head.js\n// Environment: server\n\nimport favicon from './favicon.png'\n\n// Applies to all admin pages\nexport const Head = () => <link rel=\"icon\" href={favicon}>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Head Tag Settings in Vike (JavaScript)\nDESCRIPTION: This set of snippets demonstrates how to create a custom setting for dynamic favicons. It includes the setting creation, TypeScript declaration, and usage examples.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-tags/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  meta: {\n    dynamicFavicon: {\n      env: { server: true, client: true }\n    }\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/+Head.jsx\n\nimport { usePageContext } from 'vike-react/usePageContext' // or vike-vue / vike-solid\n\nexport default () => {\n  const pageContext = usePageContext()\n  const { dynamicFavicon } = pageContext.config\n  return <>\n    { dynamicFavicon && <link rel=\"icon\" href={dynamicFavicon}> }\n  </>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onAfterRenderClient.js\n\nexport default (pageContext) => {\n  if (!pageContext.isHydration) {\n    const { dynamicFavicon } = pageContext.config\n    updateFavicon(dynamicFavicon)\n  }\n}\n\n// https://stackoverflow.com/questions/260857/changing-website-favicon-dynamically\nfunction updateFavicon(dynamicFavicon) {\n  let link = document.querySelector(\"link[rel~='icon']\")\n  if (!dynamicFavicon) {\n    if (link) document.head.removeChild(link)\n    return\n  }\n  if (!link) {\n    link = document.createElement('link')\n    link.rel = 'icon'\n    document.head.appendChild(link)\n  }\n  link.href = dynamicFavicon\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/+config.js\n\ndeclare global {\n  namespace Vike {\n    interface Config {\n      dynamicFavicon?: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Function Using resolveRoute Helper\nDESCRIPTION: Examples of using the resolveRoute helper function for product routes with admin check and view handling\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-function/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/edit/+route.js\n\nexport { route }\n\nimport { resolveRoute } from 'vike/routing'\n\nconst route = (pageContext) => {\n  if (!pageContext.user.isAdmin) {\n    return false\n  }\n  return resolveRoute('/product/@id/edit', pageContext.urlPathname)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/index/+route.js\n\nexport { route }\n\nimport { resolveRoute } from 'vike/routing'\n\nconst route = (pageContext) => {\n  {\n    const result = resolveRoute('/product/@id', pageContext.urlPathname)\n    if (result.match) {\n      result.routeParams.view = 'overview'\n      return result\n    }\n  }\n\n  const result = resolveRoute('/product/@id/@view', pageContext.urlPathname)\n  if (!['reviews', 'pricing'].includes(result.routeParams.view)) {\n    return false\n  }\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Base URL\nDESCRIPTION: Demonstrates how HTML structure looks when the website is served with a base URL, showing how asset and navigation paths are prefixed.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <link href=\"/some-base/logo.svg\" rel=\"icon\">\n    <link href=\"/some-base/style.css\" rel=\"stylesheet\" type=\"text/css\">\n  </head>\n  <body>\n    <nav>\n      <a href=\"/some-base/\">Landing Page</a>\n      <a href=\"/some-base/about\">About Page</a>\n    </nav>\n    <script src=\"/some-base/script.js\" type=\"module\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vike-Cloudflare With Server\nDESCRIPTION: Configuration setup for using vike-cloudflare package with a server implementation, specifying the server entry point.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cloudflare-pages/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeCloudflare from \"vike-cloudflare/config\";\n\nexport default {\n  plugins: [vikeCloudflare],\n  server: {\n    entry: \"server/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting filesystemRoutingRoot in Vike Configuration\nDESCRIPTION: This snippet demonstrates how to set the filesystemRoutingRoot in a Vike configuration file. It sets the root to '/', which affects how URLs are mapped to the file structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystemRoutingRoot/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /marketing/+config.js\n\nexport default {\n  filesystemRoutingRoot: '/'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vike CLI Options\nDESCRIPTION: Examples of passing Vike settings as CLI options. These commands demonstrate how to customize server settings, port configuration, application mode, and pre-rendering options directly from the command line.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cli/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Make development server available over LAN and public addresses\n$ vike dev --host\n\n# Change port\n$ vike preview --port 80\n\n# Change mode\n$ vike build --mode staging\n\n# Change pre-render settings\n$ vike build --prerender \"{parallel:4,noExtraDir:true}\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Vike API Functions in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the main Vike API functions: dev, build, preview, and prerender. It shows basic usage of each function and logs completion messages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/api/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dev, build, preview, prerender } from 'vike/api'\n\n// $ vike dev\nawait dev()\nconsole.log('Development server is ready')\n\n// $ vike build\nawait build()\nconsole.log('Build is done')\n\n// $ vike preview\nawait preview()\nconsole.log('Preview server is ready')\n\n// $ vike prerender\nawait prerender()\nconsole.log('Pre-rendering is done')\n```\n\n----------------------------------------\n\nTITLE: Updating renderPage() URL Property in Vike Server Middleware\nDESCRIPTION: This snippet shows how to update the renderPage() function in the server middleware to use pageContext.urlOriginal instead of pageContext.url when initializing the page context.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.23/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  // server.js\n\n  // Vike server middleware (e.g. Express.js)\n  app.get('*', async (req, res) => {\n    const pageContextInit = {\n-     url: req.url\n+     urlOriginal: req.url\n    }\n    const result = await renderPage(pageContextInit)\n\n    /* ... */\n  })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Page Transition Start Hook\nDESCRIPTION: TypeScript version of onPageTransitionStart hook with proper type definitions using OnPageTransitionStartAsync type from Vike. Provides type safety and better IDE support for the transition hook implementation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onPageTransitionStart/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/+onPageTransitionStart.ts\n// Environment: browser\n\nexport { onPageTransitionStart }\n\nimport type { OnPageTransitionStartAsync } from 'vike/types'\n\nconst onPageTransitionStart: OnPageTransitionStartAsync = async (\n  pageContext\n): ReturnType<OnPageTransitionStartAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Attributes in Vike\nDESCRIPTION: Example showing how to add a 'class' attribute to the HTML body tag using the bodyAttributes setting in a Vike configuration file. This allows setting attributes like CSS classes on the body element.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyAttributes/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  // <body class=\"dark\">\n  bodyAttributes: { class: 'dark' }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PageContext Data Hook in Vike\nDESCRIPTION: Example showing how to access and use pageContext properties within a data hook function, demonstrating both built-in and custom properties.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+data.js\n\nexport async function data(pageContext) {\n  // Common built-in properties\n  pageContext.urlParsed.pathname // /product/42\n  pageContext.routeParams.id // 42\n  pageContext.headers // { cookie: 'user-id=1337', ... }\n\n  // Common custom properties\n  pageContext.user // { name: 'John', id: 1337 }\n  pageContext.initialStoreState // { todoList: [{ id: 1718872184291, text: 'Buy milk' }] }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Custom Viewport Meta Tag in JavaScript\nDESCRIPTION: Shows how to manually set a custom viewport meta tag using a Head component. This example adds the 'user-scalable=no' option, which is useful for interactive applications like games.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/viewport/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+Head.js\n\n// Same as Vike's default but adding `user-scalable=no` which makes sense for\n// highly interactive apps such as games.\nexport default () => <>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Rendering Head Elements for SPA in Vike\nDESCRIPTION: This code demonstrates how to use the onRenderHtml hook to render head elements like title and meta description for SPA pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nimport { escapeInject } from 'vike/server'\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  const { title, description } = pageContext.config\n  // Even though we load and render our page's components only in the browser,\n  // we define our page's `<title>` and `<meta name=\"description\">` on the server-side.\n  return escapeInject`<html>\n    <head>\n      <title>${title}</title>\n      <meta name=\"description\" content=\"${description}\" />\n    </head>\n    <body>\n      <div id=\"root\"></div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydration Abort Behavior in Vike\nDESCRIPTION: Configuration file that sets whether hydration can be aborted when a user navigates away before hydration completes. This setting is particularly relevant for client-side routing and varies between React (supported) and Vue.js (not supported due to crashes).\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydrationCanBeAborted/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  // Default value: false\n  hydrationCanBeAborted: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Head Tags Based on Fetched Data in Vike (JavaScript)\nDESCRIPTION: These snippets show how to set head tags based on data fetched from a database. It includes a data fetching function and a title setting function that uses the fetched data.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-tags/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/rocket/starship/+data.js\n\nexport async function data() {\n  const data = await sql.run(\n    'SELECT { title, description } FROM rockets WHERE name = \"starship\";'\n  )\n  return data\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/rocket/starship/+title.ts\n\nimport type { PageContext } from 'vike/types'\nimport type { Data } from './+data'\n\n// Overrides the default <title>\nexport default (pageContext: PageContext<Data>) => pageContext.data.title\n```\n\n----------------------------------------\n\nTITLE: TypeScript Image Configuration with Data\nDESCRIPTION: TypeScript implementation showing how to dynamically set the preview image based on page context data on the server\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/image/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/some-page/+image.js\n// Environment: server\n\nimport type { Data } from './+data'\nimport type { PageContextServer } from 'vike/types'\n\nexport function image(pageContext: PageContextServer<Data>) {\n  return pageContext.data.product.image\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering in Vike (JSX)\nDESCRIPTION: Demonstrates how to control server-side rendering in Vike using React. This function generates the HTML structure and renders the page component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// /renderer/+onRenderHtml.jsx\n// Environment: server\n\nimport ReactDOMServer from \"react-dom/server\";\nimport React from \"react\";\nimport { escapeInject, dangerouslySkipEscape } from \"vike/server\";\n\nexport { onRenderHtml };\n\nasync function onRenderHtml(pageContext) {\n  const { Page, data } = pageContext;\n  const viewHtml = ReactDOMServer.renderToString(\n    <Page {...data} />\n  );\n\n  const title = \"Vite SSR\";\n\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n      </head>\n      <body>\n        <div id=\"root\">${dangerouslySkipEscape(viewHtml)}</div>\n      </body>\n    </html>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Base URL\nDESCRIPTION: Shows how to configure a separate base URL for assets, typically used for CDN deployment.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  baseAssets: 'https://cdn.example.org/my-website-assets/'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Head Component Inside React Components\nDESCRIPTION: Example of using the <Head> component inside regular React components to set head tags based on data available in the component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Product.jsx\n\nimport { Head } from 'vike-react/Head' // or vike-{vue,solid}\n\nfunction Product({ data }) {\n  return <>\n    <Head>\n      {/* Image shown when sharing on social sites (Twitter, WhatsApp, ...) */}\n      <meta property=\"og:image\" content={data.product.image}>\n    </Head>\n    <h1>{data.product.name}</h1>\n    <p>{data.product.description}</p>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Meta Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to define custom meta configurations in the renderer's +config.ts file, creating a new 'title' setting that is loaded only on the server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// /renderer/+config.ts\n\nimport type { Config } from 'vike/types'\n\nexport default {\n  meta: {\n    // We create a new setting called `title`\n    title: {\n      // The value of `title` should be loaded only on the server\n      env: { server: true }\n    }\n  }\n} satisfies Config\n```\n\n----------------------------------------\n\nTITLE: Problematic Shared Component Export in Vike\nDESCRIPTION: Illustrates a problematic scenario where exporting a shared component from a page file can lead to unnecessary CSS loading across different pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/no-side-exports/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/index/+Page.js\n\n// This CSS is loaded every time SomeSharedComponent is imported\nimport './landing-page.css'\n\nexport function SomeSharedComponent() {\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/about/+Page.js\n\n// ❌ Bad: the /about page loads landing-page.css, which usually isn't what you want\nimport { SomeSharedComponent } from '../index/+Page'\n```\n\n----------------------------------------\n\nTITLE: Component-Based Head Tags Management in Vike.js\nDESCRIPTION: Shows how to implement dynamic head tags that can be modified by any component using context and headProps. Includes setup for passing headProps through the component tree.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-manual/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport renderToHtml from 'some-ui-framework'\n\nasync function onRenderHtml(pageContext) {\n  const pageHtml = await renderToHtml(\n    <ContextProvider headProps={pageContext.headProps} >\n      <Page />\n    </ContextProvider>\n  )\n\n  return escapeInject`<html>\n    <head>\n      <title>${pageContext.headProps.title}</title>\n      <meta name=\"description\" content=\"${pageContext.headProps.description}\">\n    </head>\n    <body>\n      <div id=\"app\">\n        ${dangerouslySkipEscape(pageHtml)}\n      </div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vike-server in +config.js\nDESCRIPTION: Extends the Vike configuration to include vike-server and specify the server entry point.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeServer from 'vike-server/config' // [!code ++]\n\nexport const config = {\n  extends: [vikeServer], // [!code ++]\n  // Points to your server entry // [!code ++]\n  server: 'server/index.js' // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Client Routing in Vike 0.4.x (JavaScript)\nDESCRIPTION: This code demonstrates how to migrate from useClientRouter() to the new render function export and clientRouting flag in Vike 0.4.x for client-side routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { useClientRouter } from 'vike/client'\n+ export { render }\n+ export const clientRouting = true\n\n- useClientRouter({\n-   render: (pageContext) => {\n-     /* ... */\n-   }\n- })\n+ async function render(pageContext) {\n+   /* ... */\n+ }\n```\n\n----------------------------------------\n\nTITLE: Route Configuration in Vike.js\nDESCRIPTION: Example of a route configuration file that defines a dynamic route parameter for product pages using the @id parameter.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/file-structure/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /products/pages/product/+route.js\n\nexport default '/product/@id'\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env Files for Vike\nDESCRIPTION: Example of defining environment variables in .env, .env.development, and .env.production files. Shows how to set database URLs, passwords, and public variables.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/env/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# .env.development\nDATABASE_URL=postgresql://localhost:5432\n\n# .env.production\nDATABASE_URL=postgresql://database.example.com:5432\nDATABASE_PASSWORD=some-secret-password\n\n# .env\nEMAIL_USER=John Doe\nPUBLIC_ENV__SOME_KEY=123\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Hook Timeouts in Vike\nDESCRIPTION: Example showing how to disable warning timeout for specific hooks or remove timeout completely for certain hooks in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hooksTimeout/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  hooksTimeout: {\n    data: {\n      // Disable the warning timeout\n      warning: false\n    }\n    // No timeout at all: Vike won't warn and will indefinitely await the\n    // promise returned by onRenderClient()\n    onRenderClient: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vike-Solid with SSR Settings\nDESCRIPTION: Extended configuration example showing how to customize vike-solid settings, including toggling SSR functionality.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-solid/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeSolid from 'vike-solid/config'\n\nexport default {\n  // ...\n\n  // Setting to toggle SSR\n  ssr: false,\n\n  extends: [vikeSolid]\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging React Invalid Component Error\nDESCRIPTION: This snippet shows a common React error message indicating an invalid component type. This error is often caused by CJS/ESM interoperability issues, resulting in undefined or unexpected object types for React components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nError: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.\n    at renderElement (node_modules/react-dom/...)\n    at renderNodeDestructiveImpl (node_modules/react-dom/...)\n    at renderNodeDestructive (node_modules/react-dom/...)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Imported Asset Inclusion in Vike Configuration\nDESCRIPTION: This code snippet demonstrates how to disable the inclusion of assets imported by server-only code in the client production build. By default, this option is set to true, and there's typically no reason to change it. However, if needed, it can be disabled in the pages/+config.js file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/includeAssetsImportedByServer/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  includeAssetsImportedByServer: false\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Asset Examples in Vike\nDESCRIPTION: Examples of different asset tags that Vike injects into HTML, including script modules, stylesheets, fonts, and serialized page context.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/injectAssets/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"/assets/some-script.fbdfdef8.js\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/some-css.d65b3120.css\">\n<link rel=\"preload\" as=\"font\" crossorigin type=\"font/ttf\" href=\"/assets/some-font.2bc54814.ttf\">\n<link rel=\"modulepreload\" as=\"script\" type=\"text/javascript\" href=\"/assets/some-script.e046d7f2.js\">\n<script id=\"vike_pageContext\" type=\"application/json\">{\"pageId\":\"/pages/some-page\"}</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Head Tags Using Head Setting (JSX)\nDESCRIPTION: This snippet illustrates how to use the Head setting to define custom head tags that apply to all pages. It demonstrates setting a favicon that cannot be overridden.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-tags/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/+Head.jsx or\n// pages/+Head.vue\n\nimport favicon from './favicon.svg'\n\n// Applies to all pages (cannot be overridden)\nexport function Head() {\n  // All pages share the same favicon\n  return <>\n    <link rel=\"icon\" href={favicon} type=\"image/svg+xml\">\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Global Stream Configuration in Vike\nDESCRIPTION: Shows how to enable or disable HTML streaming globally for all pages in a Vike application through the root config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/stream/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\n// This config applies to all pages (/pages/**).\nexport default {\n  stream: false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Meta Configuration in onRenderHtml Hook\nDESCRIPTION: This snippet shows how to use the custom 'title' configuration in the onRenderHtml hook to set the page title dynamically.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  // Config values are available at pageContext.config\n  const { title } = pageContext.config\n  return escapeInject`<html>\n    <head>\n      <title>${title}</title>\n    </head>\n    <!-- ... -->\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Streaming Configuration\nDESCRIPTION: Example showing how to enable eager streaming for immediate HTML template emission.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/streaming/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function onRenderHtml(pageContext) {\n  const documentHtml = escapeInject`<!DOCTYPE html>\n    <html>\n      <head>\n        <title>Hello</title>\n      </head>\n      <body>\n        <div id=\"root\">${renderToStream(pageContext.Page)}</div>\n      </body>\n    </html>`\n\n  return {\n    documentHtml,\n    pageContext: {\n      enableEagerStreaming: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Settings with vike-react\nDESCRIPTION: Demonstrates how to configure Server-Side Rendering (SSR) settings using vike-react extension in the configuration file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-react/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeReact from 'vike-react/config'\n\nexport default {\n  // ...\n\n  // Setting to toggle SSR // [!code ++]\n  ssr: false, // [!code ++]\n\n  extends: [vikeReact]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Vike's PageContext Type in TypeScript\nDESCRIPTION: This code demonstrates how to extend and refine Vike's PageContext type using a global interface declaration in TypeScript.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace Vike {\n    interface PageContext {\n      // Type of pageContext.user\n      user?: {\n        name: string\n        id: string\n        isAdmin: boolean\n      }\n      // Refine type of pageContext.Page (it's `unknown` by default)\n      Page: () => React.JSX.Element\n    }\n  }\n}\n\n// If you define Vike.PageContext in a .d.ts file then\n// make sure there is at least one export/import statement.\n// Tell TypeScript this file isn't an ambient module:\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Setting Vike Configuration in JavaScript\nDESCRIPTION: Example of setting Vike configuration options in JavaScript, including disabling Git crawling.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvike({ crawl: { git: false } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization for Head Tags in Vike (JavaScript/JSX)\nDESCRIPTION: These snippets show how to implement internationalization for head tags, including the description meta tag and the title. It uses the pageContext to determine the locale and set the appropriate content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-tags/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/+Head.js\n// Environment: server\n\nexport { Head }\n\nimport { usePageContext } from 'vike-react/usePageContext' // or vike-vue / vike-solid\n\nfunction Head() {\n  const pageContext = usePageContext()\n  const description = pageContext.locale === 'de-DE' ?\n    'Wir liefern zum Weltall.' :\n    'We deliver payload to space.'\n  return <>\n    <meta name=\"description\" content={description}>\n  </>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+title.js\n// Environment: server, client\n\nexport function title(pageContext) {\n  const title = pageContext.locale === 'de-DE' ?\n    'AwesomeRockets | Das Weltall Unternehmen' :\n    'AwesomeRockets | The space company'\n  return title\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Dependencies in Vike\nDESCRIPTION: This code snippet demonstrates how to use the 'require' setting in a Vike extension configuration file. It specifies the extension's name and its dependencies on other Vike extensions with version requirements.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/require/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /node_modules/vike-react-query/dist/+config.js\n\nexport default {\n  name: 'vike-react-query'\n  require: {\n    'vike': '>=1.0.0'\n    'vike-react': '>=1.0.0'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Export Workaround Pattern\nDESCRIPTION: Code pattern to handle problematic default exports from CommonJS modules in ESM context.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from 'some-library';\nconst DefaultImport = pkg.default ?? pkg;\n```\n\n----------------------------------------\n\nTITLE: Configuring Host in Vike\nDESCRIPTION: This snippet demonstrates how to set the host configuration in Vike using the `+host` setting in a `+config.js` file. It sets the host to `true`, which allows the server to be accessed from the local network.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/host/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  host: true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSON-LD Script with Head Component in Solid.js\nDESCRIPTION: This snippet demonstrates how to use the Head component from vike-solid to add a JSON-LD script to the document head. It creates an Image component that renders an img tag and injects structured data about the image using a script tag with type 'application/ld+json'.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Head } from \"vike-solid/Head\"\n\nfunction Image({ src, author }) {\n  return (\n    <>\n      <img src={src} />\n      <Head>\n        <script\n          type=\"application/ld+json\"\n          innerHTML={JSON.stringify({\n            \"@context\": \"https://schema.org/\",\n            contentUrl: { src },\n            creator: {\n              \"@type\": \"Person\",\n              name: author\n            }\n          })}\n        ></script>\n      </Head>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying URL components using modifyUrl() in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the modifyUrl() function from Vike to modify various components of a URL, including pathname, protocol, hostname, and port. It shows how to remove a locale prefix from the pathname and change other URL properties.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/modifyUrl/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { modifyUrl } from 'vike/modifyUrl'\n\nconst url = 'http://localhost:3000/en-US/hello/john?fruit=apple'\nconst urlModified = modifyUrl(url, {\n  pathname: '/hello/john', // remove en-US/\n  protocol: 'https://',\n  hostname: 'example.com',\n  port: 3001\n})\nconsole.log(urlModified) // https://example.com:3001/hello/john?fruit=apple\n```\n\n----------------------------------------\n\nTITLE: Reloading Page After Hydration in Vike\nDESCRIPTION: This code snippet demonstrates how to reload a page after hydration in Vike, specifically when a URL contains a filter parameter.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/products/+onHydrationEnd.js\n\nimport { reload } from 'vike/client/router'\n\nexport async function onHydrationEnd() {\n  if (window.location.href.includes('?filter')) await reload()\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Layouts Structure in YAML\nDESCRIPTION: Shows the file structure for implementing nested layouts in Vike, including outer layouts common to all pages and specific layouts for product pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-06/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Outer layout, common to all pages\npages/+Layout.js\n# Layout for product page\npages/product/@id/+Layout.js\n# Nested view\npages/product/@id/pricing/+Page.js\n# Nested view\npages/product/@id/reviews/+Page.js\n```\n\n----------------------------------------\n\nTITLE: Advanced onBeforeRender Implementation\nDESCRIPTION: Conditional onBeforeRender implementation for both server and client environments.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function onBeforeRender(pageContext) {\n  if (pageContext.config.onBeforeRenderHtml) {\n    const { pageContext } = await onBeforeRenderHtml(pageContext)\n    return { pageContext }\n  }\n  if (pageContext.config.onBeforeRenderClient) {\n    await onBeforeRenderClient(pageContext)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Meta for SPA Rendering in Vike\nDESCRIPTION: This snippet shows how to set the Page meta config to load +Page.js only in the browser, enabling SPA rendering for all pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\n// Environment: config\n\nexport default {\n  meta: {\n    Page: {\n      env: { server: false, client: true } // SPA for all pages\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Routing Configuration for Head Tags in Vike.js\nDESCRIPTION: Configuration setup for making headProps available on the client-side through passToClient configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-manual/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\n// Environment: config\n\nexport default {\n  // Make pageContext.headProps available on the client-side.\n  passToClient: ['headProps']\n}\n```\n\n----------------------------------------\n\nTITLE: Updating onBeforePrerender() Hook for URL Handling in Vike\nDESCRIPTION: This code shows how to update the onBeforePrerender() hook to use and provide pageContext.urlOriginal instead of pageContext.url when modifying URLs before prerendering, particularly for internationalization scenarios.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.23/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  // /renderer/_default.page.server.js\n\n  export function onBeforePrerender(globalContext) {\n    const prerenderPageContexts = []\n    globalContext.prerenderPageContexts.forEach((pageContext) => {\n      ['en-US', 'fr-FR', 'de-DE'].forEach((locale) => {\n        prerenderPageContexts.push({\n          ...pageContext,\n-         url: `/${locale}${pageContext.url}`,\n+         urlOriginal: `/${locale}${pageContext.urlOriginal}`,\n          locale\n        })\n      })\n    })\n    return {\n      globalContext: {\n        prerenderPageContexts,\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Meta Tags\nDESCRIPTION: Shows the HTML meta tags that are generated in the page head when the description setting is applied. Includes both the standard meta description tag and Open Graph description tag.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/description/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta name=\"description\" content=\"This website is a Vike demo.\">\n  <meta property=\"og:description\" content=\"This website is a Vike demo.\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring vike-vue Extension\nDESCRIPTION: Basic configuration setup for adding vike-vue extension to a Vike project by extending the config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-vue/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeVue from 'vike-vue/config'\n\nexport default {\n  // ...\n  extends: [vikeVue]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hook Timeouts in Vike\nDESCRIPTION: Configuration example showing how to customize warning and error timeout durations for hooks in Vike using the config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hooksTimeout/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  hooksTimeout: {\n    data: {\n      // Increase warning timeout to 5 seconds\n      warning: 5 * 1000,\n      // Increase error timeout to one minute\n      error: 60 * 1000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vike Server Middleware Configuration\nDESCRIPTION: Example showing how pageContextInit configuration in server middleware can trigger pageContext.json requests based on passToClient settings\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-json/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Vike server middleware\nasync (req, res) => {\n  const pageContextInit = {\n    urlOriginal: req.originalUrl,\n    // If passToClient contains 'user' then Vike makes a pageContext.json request\n    // upon page navigation in order the retrieve the pageContextInit.user value.\n    user: req.user\n  }\n  const pageContext = await renderPage(pageContextInit)\n  return pageContext.httpResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Vike Settings to pages/+config.js\nDESCRIPTION: This snippet demonstrates the new method of configuring Vike using a dedicated configuration file. The Vike settings are now defined directly in the pages/+config.js file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/settings/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  prerender, // [!code ++]\n  redirects, // [!code ++]\n  baseAssets, // [!code ++]\n  baseServer, // [!code ++]\n  trailingSlash, // [!code ++]\n  disableUrlNormalization // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Universal Hook Implementation with getPageContext\nDESCRIPTION: Implementation example of useConfig as a universal hook using getPageContext to handle both component and hook contexts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getPageContext/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// node_modules/vike-{react,vue,solid}/dist/hooks/useConfig.js\n\nimport { usePageContext } from './usePageContext'\nimport { getPageContext } from 'vike/getPageContext'\n\nexport function useConfig() {\n  // useConfig() needs to access the pageContext object\n\n  // In case useConfig() is used inside a Vike hook\n  let pageContext = getPageContext()\n\n  // In case useConfig() is used inside a React component\n  if (!pageContext) {\n    pageContext = usePageContext()\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Rendering in Vike (JSX)\nDESCRIPTION: Shows how to handle client-side rendering in Vike using React. This function hydrates the server-rendered content on the client side.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// /renderer/+onRenderClient.jsx\n// Environment: browser\n\nimport ReactDOM from \"react-dom/client\";\nimport React from \"react\";\n\nexport { onRenderClient };\n\nasync function onRenderClient(pageContext) {\n  const { Page, data } = pageContext\n  ReactDOM.hydrateRoot(\n    document.getElementById(\"root\"),\n    <Page {...data} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bati.js Applications with Different Frontend Frameworks\nDESCRIPTION: Commands to create new applications using Bati.js project generator. Shows options for initializing projects with React, Vue, or Solid frameworks using the Bun package manager.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/start/BatiCmd_bun.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun create @batijs/app --react\n# Or:\nbun create @batijs/app --vue\n# Or:\nbun create @batijs/app --solid\n```\n\n----------------------------------------\n\nTITLE: Creating Response Headers Object\nDESCRIPTION: Shows how to create a standard Headers object from response headers\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageContext = await renderPage(pageContextInit)\n// The `new Headers()` constructor is available in all common JavaScript environments:\n// Node.js, Cloudflare Workers, browsers, ...\nconst headers = new Headers(pageContext.httpResponse.headers)\n```\n\n----------------------------------------\n\nTITLE: Source Directory Structure in Vike\nDESCRIPTION: Shows how to organize pages within a src/ directory while maintaining the same URL structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nFILESYSTEM                     URL\n========================       ======\nsrc/pages/index/+Page.js       /\nsrc/pages/about/+Page.js       /about\n```\n\n----------------------------------------\n\nTITLE: Global Pre-rendering Opt-in Configuration\nDESCRIPTION: Configuration to make pre-rendering opt-in by default at the renderer level.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // By default, pages are not pre-rendered\n  prerender: false\n}\n```\n\n----------------------------------------\n\nTITLE: Limitation Example with Title and Description Tags\nDESCRIPTION: Example demonstrating the limitation of +Head for setting titles that update on client-side navigation, while showing it works for metadata like descriptions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// /pages/index/+Head.jsx\n// Environment: server\n\nfunction Head() {\n  return <>\n    <title>AwesomeRockets</title>\n    <meta name=\"description\" content=\"The rocket company.\">\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// /pages/about/+Head.jsx\n// Environment: server\n\nfunction Head() {\n  return <>\n    <title>About us</title>\n    <meta name=\"description\" content=\"We deliver payload to space.\">\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Page Component in Vike\nDESCRIPTION: This code defines a React component for a product page in Vike. It demonstrates how the route defined earlier allows for dynamic product URLs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+Page.jsx\n\nexport default Page\n\n/* This page can have URLs such as:\n   /product/12345\n   /product/macbook-pro\n   /product/iPhone42\n   ...\n*/\nfunction Page() {\n  return <>\n    <h1>Product Information</h1>\n    {/* ... */}\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Shared Component Structure in Vike\nDESCRIPTION: Demonstrates the recommended approach for sharing components across pages in Vike, by moving shared code into separate files to leverage code-splitting effectively.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/no-side-exports/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// components/SomeSharedComponent.js\n\nexport function SomeSharedComponent() {\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/about/+Page.js\n\nimport { SomeSharedComponent } from '../index/+Page' // [!code --]\nimport { SomeSharedComponent } from '../../components/SomeSharedComponent' // [!code ++]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/index/+Page.js\n\nimport './landing-page.css'\nimport { SomeSharedComponent } from '../../components/SomeSharedComponent' // [!code ++]\n\nexport function SomeSharedComponent() { // [!code --]\n  // ... // [!code --]\n} // [!code --]\n```\n\n----------------------------------------\n\nTITLE: Checking SSR Status in Vike's onAfterRenderHtml Hook\nDESCRIPTION: This snippet demonstrates how to check if server-side rendering (SSR) is enabled in Vike's onAfterRenderHtml hook by examining the pageContext.Page property.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// +onAfterRenderHtml.js\n\nexport function onAfterRenderHtml(pageContext) {\n  const isSSR = !!pageContext.Page\n  if (isSSR) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings in JavaScript\nDESCRIPTION: This code demonstrates how to set up custom settings for a Vike-based framework, allowing easy configuration for product developers.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/build-your-own-framework/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nimport myFramework from 'my-framework/config'\n\nexport default {\n  myCustomSetting: true,\n  extends: [myFramework]\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Log Example for Vike Redirect/Render\nDESCRIPTION: Example of the debug log output when Vike successfully intercepts a throw redirect() or throw render() call. This helps developers verify if their redirects are being properly caught by the framework.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/abort/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n10:00:00 AM [vike][request(42)] throw redirect('/some-url') intercepted while\\nrendering /some-other-url\n```\n\n----------------------------------------\n\nTITLE: Configuring Vike Extensions in JavaScript\nDESCRIPTION: This snippet shows how to configure Vike extensions, transitioning from using individual extensions to a custom framework configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/build-your-own-framework/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nimport react from 'vike-react/config' // [!code --]\nimport apollo from 'vike-react-apollo/config' // [!code --]\nimport myFramework from 'my-framework/config' // [!code ++]\n\nexport default {\n  ssr: false, // [!code --]\n  extends: [react, apollo] // [!code --]\n  extends: [myFramework] // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onPageTransitionEnd Hook in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of the onPageTransitionEnd hook. It imports the necessary type from Vike and defines the hook with proper type annotations.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onPageTransitionEnd/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/+onPageTransitionEnd.ts\n// Environment: browser\n\nexport { onPageTransitionEnd }\n\nimport type { OnPageTransitionEndAsync } from 'vike/types'\n\nconst onPageTransitionEnd: OnPageTransitionEndAsync = async (\n  pageContext\n): ReturnType<OnPageTransitionEndAsync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Example with Custom Scroll Group (Bash)\nDESCRIPTION: Illustrates URL patterns where scroll position is preserved due to custom scroll group configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Scroll is preserved when navigating between:\n/product/42/pricing\n/product/1337/pricing\n```\n\n----------------------------------------\n\nTITLE: Implementing onRenderHtml Hook for Custom UI Framework in Vike\nDESCRIPTION: This snippet shows how to implement the onRenderHtml hook to manually integrate a custom UI framework in Vike. It demonstrates rendering the Page component to HTML on the server side.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { escapeInject, dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'my-favorite-ui-framework/server'\n\nasync function onRenderHtml(pageContext) {\n  // The Page value is available at pageContext.Page\n  const { Page } = pageContext\n  const pageHtml = await renderToHtml(Page)\n\n  return escapeInject`<html>\n    <body>\n      <div id=\"root\">\n        ${dangerouslySkipEscape(pageHtml)}\n      </div>\n    </body>\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Page Route in JavaScript\nDESCRIPTION: This snippet shows how to migrate a page's route definition from the old .page.route.js file to the new +route.js file in the page's directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/index.page.route.js // [!code --]\n// /pages/some-page/+route.js // [!code ++]\n\nexport default route\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import of Client Routing Utilities in Server Routing Pages\nDESCRIPTION: This code snippet shows incorrect imports of Client Routing utilities (prefetch and navigate) in pages that use Server Routing. These imports should be avoided to prevent unnecessary bundle bloat and routing conflicts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/client-runtimes-conflict/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Don't import these for pages that use Server Routing\nimport { prefetch } from 'vike/client/router'\nimport { navigate } from 'vike/client/router'\n```\n\n----------------------------------------\n\nTITLE: Creating Vike.js Applications with Framework Selection\nDESCRIPTION: Demonstrates different CLI commands for creating new Vike.js applications using the @batijs/app creator. Shows options for initializing projects with React, Vue, or Solid.js frameworks.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/start/BatiCmd_npm.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @batijs/app --react\n# Or:\nnpm create @batijs/app --vue\n# Or:\nnpm create @batijs/app --solid\n```\n\n----------------------------------------\n\nTITLE: Layout Configuration for Page Groups\nDESCRIPTION: Shows how to define different layouts for different sections of the application using group structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Define a layout for all marketing pages\npages/(marketing)/+Layout.js\npages/(marketing)/index/+Page.js\npages/(marketing)/about/+Page.js\n\n# Define a layout for all admin pages\npages/admin-panel/+Layout.js\npages/admin-panel/index/+Page.js\npages/admin-panel/users/+Page.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Vike-Solid Extension\nDESCRIPTION: Basic configuration setup for adding vike-solid to a Vike application by extending the config file with the vike-solid extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-solid/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeSolid from 'vike-solid/config'\n\nexport default {\n  // ...\n  extends: [vikeSolid]\n}\n```\n\n----------------------------------------\n\nTITLE: Config Inheritance Example in Vike\nDESCRIPTION: Shows how config inheritance works with ignored directories in Vike\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystem-routing/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npages/about/+Page.js\n# This +config.js file doesn't apply to pages/about/+Page.js\nsrc/pages/+config.js\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration Using + Files\nDESCRIPTION: Demonstrates how to use separate +route.js and +Page.jsx files instead of a combined +config.js file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tour/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+route.js\n\nexport default '/product/@id'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+Page.jsx\n\nexport { ProductPage as Page }\n\nfunction ProductPage() {\n  return (\n    <>\n      <h1>Product Information</h1>\n      ...\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Route in Vike (JavaScript)\nDESCRIPTION: Shows how to define a parameterized route using a Route String in Vike. This allows for dynamic routing based on URL parameters.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// /pages/star-wars/movie/+route.js\n// Environment: server\n\n// Route String\nexport default \"/star-wars/@movieId\";\n```\n\n----------------------------------------\n\nTITLE: Implementing a Catch-All Route in JavaScript\nDESCRIPTION: This example demonstrates how to create a catch-all route using a glob ('*') that will match all URLs. This is useful for creating a single-page application or handling 404 errors.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-string/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/catch-all/+route.js\n\n// Route all URLs to a single page\nexport default '*'\n```\n\n----------------------------------------\n\nTITLE: Static Language Configuration in Vike\nDESCRIPTION: Example of setting a static language code using the lang configuration option in Vike's config file. Sets French as the default language.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/lang/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nexport default {\n  lang: 'fr'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Minimal Client-side JavaScript in Vike\nDESCRIPTION: Optional client-side JavaScript file that adds minimal browser-side functionality to an HTML-only page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about/+client.js\n// Environment: browser\n\n// This file represents the entire browser-side JavaScript.\n// We can omit defining `+client.js` in which case the page has zero browser-side JavaScript.\n\nconsole.log(\"I'm the page's only browser-side JavaScript line.\")\n```\n\n----------------------------------------\n\nTITLE: Scoped CSS Solution Example\nDESCRIPTION: Example of properly scoped CSS using ID selector to prevent style leakage.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/faq/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* /pages/terms/style.css */\n\n/* ✅ Good: the CSS selector `#terms section` only applies to the terms page. */\n#terms section {\n  font-size: 0.8em;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Static HTML with bodyHtmlEnd in Vike\nDESCRIPTION: This snippet demonstrates how to insert static HTML at the end of the <body> tag using the bodyHtmlEnd setting in the Vike configuration file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlEnd/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  bodyHtmlEnd: '<div id=\"something\"></div>'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Production NODE_ENV in Bash\nDESCRIPTION: Command to start a server in production mode by setting the NODE_ENV environment variable to 'production'\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/NODE_ENV/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ NODE_ENV='production' node server/index.js\n```\n\n----------------------------------------\n\nTITLE: Problematic Global CSS Example\nDESCRIPTION: Example of CSS with a problematic global selector that can leak to other pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/faq/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* /pages/terms/style.css */\n\n/* ❌ Bad: the CSS selector `section` applies to all pages. */\nsection {\n  font-size: 0.8em;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Configuration in Vike\nDESCRIPTION: Demonstrates how to define a basic page with URL /about using +config.js and a corresponding React component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tour/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about/+config.js\n\n// The file defines a new page with URL /about\n\nimport { AboutPage } from './AboutPage'\n\nexport default {\n  Page: AboutPage\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/about/AboutPage.jsx\n\nexport const AboutPage = () => <>Vike Demo</>\n```\n\n----------------------------------------\n\nTITLE: Component-Level Head Props Modification in Vike.js\nDESCRIPTION: Example of how a component can modify head properties using usePageContext hook to access and update headProps.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-manual/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// SomeComponent.js\n\n  // Inside a UI component\n  const pageContext = usePageContext()\n  const { headProps } = pageContext\n  headProps.title = 'I was set by some component.'\n  headProps.description = 'Me too.'\n```\n\n----------------------------------------\n\nTITLE: Multiple Layouts Directory Structure\nDESCRIPTION: Shows the directory structure for implementing multiple layouts for different groups of pages using YAML notation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Marketing pages share a layout\npages/(marketing)/+Layout.js\npages/(marketing)/index/+Page.js    # URL: /\npages/(marketing)/about/+Page.js    # URL: /about\n\n# Admin pages share another layout\npages/admin-panel/+Layout.js\npages/admin-panel/index/+Page.js    # URL: /admin-panel\npages/admin-panel/users/+Page.js    # URL: /admin-panel/users\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Vike Configuration\nDESCRIPTION: Demonstrates how to set a static page title using the 'title' setting in the Vike configuration file. This adds both a <title> tag and an Open Graph meta tag to the page's <head>.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/title/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  title: 'Some Title'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onCreateApp Hook in JavaScript for Vike-Vue\nDESCRIPTION: This snippet demonstrates how to use the onCreateApp hook to add a Vue plugin to the application. It checks if the current rendering is for the head to avoid adding the plugin unnecessarily.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onCreateApp/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onCreateApp.js\n// Environment: server, client\n\nexport { onCreateApp }\n\nimport SomeVuePlugin from 'some-vue-plugin'\n\nconst onCreateApp = (pageContext) => {\n  if (pageContext.isRenderingHead) return // Don't add the plugin when rendering <head>\n  const { app } = pageContext\n  app.use(SomeVuePlugin)\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Express.js Base URL Setup\nDESCRIPTION: Alternative approach using pageContext.isBaseMissing to handle base URLs in Express.js.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('*', async (req, res, next) => {\n  const pageContextInit = { urlOriginal: req.url }\n  const pageContext = await renderPage(pageContextInit)\n  if (pageContext.isBaseMissing) return next()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Pre-rendering Configuration\nDESCRIPTION: Example of implementing conditional pre-rendering based on a CMS preview condition.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = isCmsPreview() ? false : true\n```\n\n----------------------------------------\n\nTITLE: Defining Route String in Vike Configuration\nDESCRIPTION: This snippet shows how to define a route string in a Vike configuration file. The route uses a parameter '@id' to create dynamic product pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+config.js\n\nexport default {\n  route: '/product/@id'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ts-node in tsconfig.json for ESM Compatibility\nDESCRIPTION: When using ts-node, ensure that its compiler options in tsconfig.json are not set to transpile to CommonJS. This configuration is crucial for maintaining ESM compatibility when running TypeScript files directly with ts-node.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.5/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ts-node\": {\n  \"compilerOptions\": {\n    \"module\": \"<not-CommonJS>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route in Vike\nDESCRIPTION: Shows how to define a custom route using a Route Function in Vike, as an alternative to filesystem routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/index/+route.js\n\n// Note how the two files share the same folder `/pages/index/`; this is how Vike\n// knows that `/pages/index/+route.js` defines the route of `/pages/index/+Page.vue`.\n\n// Route Function\nexport default pageContext => pageContext.urlPathname === '/'\n\n// If we don't create a `+route.js` file then Vike does Filesystem Routing\n```\n\n----------------------------------------\n\nTITLE: Handling Page Transitions in TypeScript\nDESCRIPTION: Explanation of onPageTransitionStart and onPageTransitionEnd hooks for implementing page transition animations.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/universal-middleware/README.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// /pages/+onPageTransitionStart.ts\n// Content not provided, but file is mentioned for handling start of page transitions\n\n// /pages/+onPageTransitionEnd.ts\n// Content not provided, but file is mentioned for handling end of page transitions\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Prefetching in React with Vike\nDESCRIPTION: This snippet demonstrates how to use the prefetch() function from Vike's client router in a React component. It shows prefetching a success page during form submission, potentially speeding up navigation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prefetch/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { prefetch } from 'vike/client/router'\n\nfunction Form() {\n   return (\n     <form onSubmit={onSubmit}>\n       {/* ... */}\n     </form>\n   )\n}\n\nasync function onSubmit() {\n  // Fetch the next page\n  prefetch('/form/success')\n  // In parallel, make a request to the server\n  await someRequestToServer()\n  // The assets of the next page may already be fetched at\n  // this point, before even calling navigate()\n  await navigate('/form/success')\n}\n```\n\n----------------------------------------\n\nTITLE: Using VITE_CONFIG Environment Variable\nDESCRIPTION: Examples of using the VITE_CONFIG environment variable to pass Vite configuration settings. This allows direct control over Vite's configuration options when using Vike CLI commands.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cli/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Set Vite's server.host setting to true\n$ VITE_CONFIG=\"{server:{host:true}}\" vike dev\n\n# Also when running Vike's CLI over a package.json script\n$ VITE_CONFIG=\"{build:{outDir:'build'}}\" npm run build\n\n# Also when running Vike's CLI over a package.json script\n$ VITE_CONFIG=\"{mode:'staging'}\" npm run preview\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Host Documentation Components in JSX\nDESCRIPTION: This code snippet demonstrates the usage of imported components to render documentation for deploying on GitHub Pages. It includes sections for introduction, deployment strategies, and conclusion, with specific information tailored to GitHub Pages hosting.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/github-pages/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<StaticHostDocIntro\n  staticHostLink={<>, such as <a href=\"https://pages.github.com/\">GitHub Pages</a></>}\n/>\n\n<StaticHostDocStrategies name=\"GitHub Pages\" />\n\nWe recommend using the [GitHub Pages Deploy Action](https://github.com/JamesIves/github-pages-deploy-action). For example, `vike.dev` uses the GitHub action at <RepoLink path='.github/workflows/docs.yml' /> to automatically deploy whenever a commit changes the docs.\n\n<StaticHostDocOutro\n  baseUrlAddendum={<> You need to do this if you use the GitHub Page domain <code><i>username</i>.github.io/<i>repo-name/*</i></code>.</>}\n/>\n\n<Warning>\n Make to sure to add an empty file `.nojekyll`, otherwise [GitHub Pages won't serve static files starting with `_`](https://stackoverflow.com/questions/6397780/names-starting-with-underscore-shows-errors-page-doesnot-exists-for-gh-pages-bra).\n</Warning>\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript Route Function in Vike\nDESCRIPTION: This code shows how to implement a route function with TypeScript in Vike. It imports the RouteSync type from Vike and uses it to type the route function and its return value.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport { route }\n\nimport type { RouteSync } from 'vike/types'\n\nconst route: RouteSync = (pageContext): ReturnType<RouteSync> => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling React StrictMode in Vike-React Configuration\nDESCRIPTION: This code snippet demonstrates how to disable React's StrictMode in a Vike-React project by setting the 'reactStrictMode' option to false in the configuration file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/reactStrictMode/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeReact from 'vike-react/config'\n\nexport default {\n  // Don't use <StrictMode> // [!code ++]\n  reactStrictMode: false, // [!code ++]\n  extends: [vikeReact]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling SSR Globally in Vike (JavaScript)\nDESCRIPTION: This snippet shows how to disable Server-Side Rendering for all pages in a Vike project by setting the 'ssr' option to false in the global config file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/ssr/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nexport default {\n  // Applies to all pages\n  ssr: false\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Structure Pattern in Vike.js\nDESCRIPTION: Demonstrates the basic file structure organization for a Vike.js application with a single pages directory. Includes landing page, about page, error handling, shared components, and server code organization.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/file-structure/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Landing page\n/pages/index/+Page.js\n/pages/index/components/SomeComponentForLandingPage.js\n/pages/index/**/* # More files specific to the landing page\n# About page\n/pages/about/+Page.js\n/pages/about/components/SomeComponentForAboutPage.js\n/pages/about/**/* # More files specific to the about page\n# Other pages\n/pages/**/+Page.js\n\n# Error page\n/pages/_error/+Page.js\n\n# Components shared by several pages\n/components/\n\n# Server code (Express.js/Fastify/...)\n/server/\n```\n\n----------------------------------------\n\nTITLE: Escaping Property Names with Dots\nDESCRIPTION: Configuration example showing how to handle property names containing dots by using proper escaping in passToClient configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/passToClient/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nexport default {\n  passToClient: [\n    // pageContext['some-weird.prop-name']\n    'some-weird\\\\.prop-name',\n    // pageContext['some-weird\\\\.prop-name']\n    'some-weird\\\\\\\\.prop-name',\n    // pageContext['some-weird\\\\\\\\.prop-name']\n    'some-weird\\\\\\\\\\\\.prop-name'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Viewport Width Meta Tag in HTML\nDESCRIPTION: Shows the resulting viewport meta tag when a custom width (e.g., 1200 pixels) is specified in the configuration. This sets a fixed viewport width regardless of the device's actual width.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/viewport/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta name=\"viewport\" content=\"width=1200\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Server Middleware Headers Integration\nDESCRIPTION: Shows how to pass request headers to renderPage() in server middleware\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderPage } from 'vike/server'\n\n// Server middleware\napp.get('*', async (req) => {\n  const pageContextInit = {\n    urlOriginal: req.url,\n    headersOriginal: req.headers\n  }\n  const pageContext = await renderPage(pageContextInit)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Page Component Definition in Vike\nDESCRIPTION: This snippet demonstrates how to manually define a Page component in Vike without using built-in UI framework extensions. It exports a simple JSX component, but the content can be anything as Vike doesn't process it directly.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/hello/+Page.js\n// Environment: browser and server (configurable)\n\nexport { Page }\n\nfunction Page() {\n  // Here we export a JSX component, but we can export anything we want since Vike doesn't\n  // do anything with `Page`: it just makes it available at `pageContext.Page`.\n  return <>Hello World</>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliases in Vike\nDESCRIPTION: This snippet shows how to use the redirects setting to create aliases for links. It includes examples of email, donation, and chat aliases that can be used when sharing links on third-party websites.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redirects/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  redirects: {\n    '/mail': 'mail@example.org',\n    '/donate': 'https://donate.stripe.com/9aiUAh021a',\n    '/chat': 'https://discord.com/invite/hfHhnJyVg8'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Page HTML in onAfterRenderHtml Hook (JavaScript)\nDESCRIPTION: This example shows how to modify the page's HTML string in the onAfterRenderHtml hook. It demonstrates applying an HTML transformation, such as minification, to the pageHtmlString property of the pageContext object.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onAfterRenderHtml/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// +onAfterRenderHtml.js\n\nexport function onAfterRenderHtml(pageContext) {\n  // Apply some HTML transformation, e.g. HTML minification\n  pageContext.pageHtmlString = minifyHtml(pageContext.pageHtmlString)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendering in Vike 0.4.x (JavaScript)\nDESCRIPTION: This snippet illustrates how to update the pre-rendering configuration from using CLI commands to setting options in vite.config.js for Vike 0.4.x.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  // vite.config.js\n  import vike from 'vike/plugin'\n\n  export config {\n    plugins: [\n-     vike()\n+     vike({ prerender: true })\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Store on Server-Side in Vike\nDESCRIPTION: This snippet demonstrates how to create a store on the server-side using the onBeforeRenderHtml hook in Vike. It creates a store instance and assigns it to the pageContext.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/store/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+onBeforeRenderHtml.js\n\nimport { createStore } from 'awesome-store'\n\nexport function onBeforeRenderHtml(pageContext) {\n  pageContext.store = createStore()\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Structure for React Portals in Vike\nDESCRIPTION: This snippet shows the resulting HTML structure when using bodyHtmlEnd for React portals, with the added portal root div at the end of the body.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlEnd/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<body>\n  <!-- ... -->\n  <div id=\"root\">{reactHtml}</div>\n  <div id=\"portal-root\"></div> // [!code ++]\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CLI Scripts in package.json\nDESCRIPTION: This JSON snippet shows how to set up custom CLI commands in package.json for a Vike-based framework, including development, build, and preview scripts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/build-your-own-framework/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n{\n  \"scripts\": {\n    \"dev\": \"my-framework\",\n    \"build\": \"my-framework build\",\n    \"preview\": \"my-framework preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Early Hints in Node.js Server with Vike\nDESCRIPTION: Example of implementing 103 Early Hints using Vike's pageContext.httpResponse.earlyHints in a Node.js server. Shows how to write early hints for asset preloading using Node.js 18's writeEarlyHints API.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/preloading/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\nimport { renderPage } from 'vike/server'\n\napp.get('*', async (req, res) => {\n  const pageContext = await renderPage({ urlOriginal: req.originalUrl } )\n  const { earlyHints } = pageContext.httpResponse\n  // For example with Node.js 18:\n  res.writeEarlyHints({ link: earlyHints.map((e) => e.earlyHintLink) })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Glob Route String for Product Pages in JavaScript\nDESCRIPTION: This code snippet shows how to use a glob ('*') in a Route String to match multiple levels of nested URLs under '/product'. This allows for more flexible routing patterns.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-string/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+route.js\n\nexport default '/product/*'\n```\n\n----------------------------------------\n\nTITLE: Migrating Renderer Client-side Hook in JavaScript\nDESCRIPTION: This snippet shows how to migrate the client-side render hook from the old .page.client.js file to the new +onRenderClient.js file in the renderer directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/_default.page.client.js // [!code --]\n// /renderer/+onRenderClient.js // [!code ++]\n\nexport { render } // [!code --]\nexport { render as onRenderClient } // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Configuring Port in Vike using +config.js\nDESCRIPTION: This snippet shows how to set the port in Vike using the +port setting in the +config.js file. It sets the port to 1234 for both development and preview servers.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/port/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  port: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Serialization Example with User-Defined Classes\nDESCRIPTION: Demonstrates how user-defined classes are handled during serialization between server and client, showing that class instances become plain objects.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/passToClient/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  prop = 42\n}\n\n// On the server-side:\nconst obj = new MyClass()\nconsole.log(obj) // MyClass { prop: 42 }\nconsole.log(obj instanceof MyClass) // true\n\n// On the browser-side, after `obj` was (de)serialized:\nconsole.log(obj) // { prop: 42 }\nconsole.log(obj instanceof MyClass) // false\n```\n\n----------------------------------------\n\nTITLE: Integrating vike-server with Fastify\nDESCRIPTION: Creates a server entry point using Fastify and vike-server's Fastify integration, including necessary plugins.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport fastify from 'fastify'\nimport rawBody from 'fastify-raw-body'\nimport { apply } from 'vike-server/fastify'\nimport { serve } from 'vike-server/fastify/serve'\n\nasync function startServer() {\n  const app = fastify({\n    // ⚠️ Mandatory for HMR support\n    forceCloseConnections: true\n  })\n\n  // ⚠️ Mandatory for Vike middlewares to operate properly\n  await app.register(rawBody)\n  await apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Core Features List - Vike Framework\nDESCRIPTION: Markdown documentation showing essential features of Vike including render modes, pre-rendering, routing, data-fetching, code-splitting, and internationalization capabilities.\nSOURCE: https://github.com/vikejs/vike/blob/main/FEATURES.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Features\n\nAll essentials:\n - All render modes: SSR, SPA, and HTML-templating (zero browser-side JavaScript)\n   - Each page can choose a different render mode\n - Pre-rendering (AKA SSG)\n   - Each page can opt in/out\n - Client-side routing\n - Data-fetching\n   - Both isomorphic data fetching and server-only data fetching\n - Optimal code-splitting\n - Filesystem Routing\n - Layouts\n - Route guards\n - HTML streaming\n - Link prefetching\n - i18n\n - Base URL\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers in Vike\nDESCRIPTION: Demonstrates how to access HTTP response headers from pageContext\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderPage } from 'vike/server'\n\n// Server middleware\napp.get('*', async (req) => {\n  // ...\n  const pageContext = await renderPage(pageContextInit)\n  // HTTP Headers of the HTTP Response.\n  const headers = pageContext.httpResponse.headers\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Wrapper Component Structure in JSX\nDESCRIPTION: Demonstrates the basic component hierarchy showing how Wrapper component encapsulates Layout and Page components in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Wrapper/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Wrapper>     ⟸ component defined by the setting \"Wrapper\"\n  <Layout>    ⟸ component defined by the setting \"Layout\"\n    <Page />  ⟸ component defined by the setting \"Page\"\n  </Layout>\n</Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Examining the 'Client runtime loaded twice' warning message in Vike\nDESCRIPTION: The warning message displayed when Vike detects its client runtime has been loaded more than once in the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/client-runtime-duplicated/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[vike][Warning] Client runtime loaded twice\n```\n\n----------------------------------------\n\nTITLE: Configuring bodyHtmlEnd for React Portals in Vike\nDESCRIPTION: This snippet demonstrates how to set up bodyHtmlEnd for React portals, inserting a div element at the end of the body tag.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlEnd/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  bodyHtmlEnd: '<div id=\"portal-root\"></div>'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component in Script Setup\nDESCRIPTION: Vue script setup block that imports a Counter component from the components directory for use within the Markdown content.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/vue-full/pages/markdown/+Page.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Counter from '../../components/Counter.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Route Function Implementation in Vike\nDESCRIPTION: Demonstrates how to implement a route function for advanced routing logic using RegExp matching.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/edit/+route.js\n\n// This file defines the route of /pages/product/edit/+Page.js\n\n// We use a RegExp, but we could as well use a routing library.\nimport partRegex from 'part-regex'\nconst routeRegex = partRegex`/product/${/([0-9]+)/}/edit`\n\n// Route Function\nexport function route(pageContext) {\n  const match = pageContext.urlPathname.match(routeRegex)\n  if (!match) return false\n  const [, id] = match\n  return { routeParams: { id } }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Settings Based on Device Input in Vike\nDESCRIPTION: This snippet shows how to configure prefetch settings based on the device's input capabilities. It uses the 'any-hover' media query to enable viewport prefetching for devices without a mouse and hover prefetching for devices with a mouse.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prefetchStaticAssets/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+prefetchStaticAssets.js\n\n// Or we enable viewport prefetching for any device without a mouse: mobile and tablets (but\n// not laptops that have a touch display).\nexport const prefetchStaticAssets =\n  window.matchMedia('(any-hover: none)').matches ? 'viewport' : 'hover'\n```\n\n----------------------------------------\n\nTITLE: Updating Vite environment prefix in JavaScript\nDESCRIPTION: Adds 'VITE_' to the envPrefix to fix issue #554.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd 'VITE_' to envPrefix\n```\n\n----------------------------------------\n\nTITLE: Implementing vite-plugin-cjs-interop\nDESCRIPTION: Configuration for using vite-plugin-cjs-interop to handle CJS/ESM interoperability issues with broken npm packages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cjsInterop } from \"vite-plugin-cjs-interop\"\n\nexport default {\n  plugins: [\n    cjsInterop({\n      // Add broken npm package here\n      dependencies: [\n        // Apply patch to root import:\n        //   import someImport from 'some-package'\n        \"some-package\",\n\n        // Apply patch to all sub imports:\n        //   import someImport from 'some-package/path'\n        //   import someImport from 'some-package/sub/path'\n        //   ...\n        \"some-package/**\",\n      ]\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Viewport Meta Tag Injection in JavaScript\nDESCRIPTION: Illustrates how to prevent Vike from automatically injecting any viewport meta tag. This allows for complete manual control over the viewport settings.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/viewport/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  // Don't inject any `<meta name=\"viewport\">` tag\n  viewport: null\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw HTML in Vue with innerHTML\nDESCRIPTION: Example of injecting structured data as raw HTML in a Vue component using innerHTML for JSON-LD metadata.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <img :src v-bind=\"otherAttrs\" />\n</template>\n\n<script setup>\nimport { useAttrs, h } from 'vue'\nimport { useConfig } from 'vike-vue/useConfig'\n\nconst { src, author, ...otherAttrs } = useAttrs()\n\nconst config = useConfig()\nconfig({\n  Head: h('script', {\n    type: 'application/ld+json',\n    innerHTML: JSON.stringify({\n      '@context': 'https://schema.org/',\n      contentUrl: { src },\n      creator: {\n        '@type': 'Person',\n        name: author\n      }\n    })\n  })\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for ESM Compatibility\nDESCRIPTION: Ensure that the TypeScript compiler options in tsconfig.json are not set to transpile to CommonJS. This is important for maintaining ESM compatibility in your Vike project.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.5/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n  \"module\": \"<not-CommonJS>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating vike-server with H3\nDESCRIPTION: Creates a server entry point using H3 and vike-server's H3 integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// server/index.js\n\nimport { createApp } from 'h3'\nimport { apply } from 'vike-server/h3'\nimport { serve } from 'vike-server/h3/serve'\n\nfunction startServer() {\n  const app = createApp()\n  apply(app)\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Configuring vike-react Extension in Vike Project\nDESCRIPTION: Shows how to extend the Vike configuration file to use vike-react extension by importing and adding it to the extends array.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-react/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\nimport vikeReact from 'vike-react/config' // [!code ++]\n\nexport default {\n  // ...\n  extends: [vikeReact] // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced keepScrollPosition Configuration (JavaScript)\nDESCRIPTION: Demonstrates how to set a custom scroll group name for preserving scroll position between arbitrary pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+config.js\n\nexport default {\n  keepScrollPosition: 'name-of-the-scroll-group'\n}\n```\n\n----------------------------------------\n\nTITLE: React Hydration Warning Suppression\nDESCRIPTION: Example of using suppressHydrationWarning attribute in React to silence inevitable hydration mismatches.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydration-mismatch/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent() {\\n  return (\\n    <span suppressHydrationWarning={true}>\\n      Current Date: {new Date().toLocaleDateString()}\\n    </span>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing usePageContext Hook in JavaScript\nDESCRIPTION: Demonstrates how to import the usePageContext hook from different UI framework extensions in Vike. This hook allows access to the pageContext object from any UI component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/usePageContext/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePageContext } from 'vike-react/usePageContext'\n/* Or:\nimport { usePageContext } from 'vike-vue/usePageContext'\nimport { usePageContext } from 'vike-solid/usePageContext'\n*/\n\n  // Inside any UI component\n  const pageContext = usePageContext()\n```\n\n----------------------------------------\n\nTITLE: Configuring keepScrollPosition in Vike (JavaScript)\nDESCRIPTION: Sets keepScrollPosition to true in a product page configuration file. This preserves scroll position when navigating between pages under the same product ID.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/product/@id/+config.js\n\nexport default {\n  // Don't scroll to top when navigating between the pages defined at pages/product/@id/**\n  keepScrollPosition: true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Pre-rendering for Specific Pages\nDESCRIPTION: Configuration to disable pre-rendering for specific pages that require dynamic rendering at request-time.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prerender/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  prerender: false\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Banner Images in JSX\nDESCRIPTION: This code snippet displays two banner images. The first is a local image file, and the second is an external image hosted on Imgur. Both images are set to a height of 250 pixels.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/press/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<img src=\"/banner.jpg\" height=\"250\" />\n\n<img src=\"https://i.imgur.com/1rCTNcM.png\" height=\"250\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Renderer Server-side Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to migrate the server-side render hook from the old .page.server.js file to the new +onRenderHtml.js file in the renderer directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/_default.page.server.js // [!code --]\n// /renderer/+onRenderHtml.js // [!code ++]\n\nexport { render } // [!code --]\nexport { render as onRenderHtml } // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Meta Tags\nDESCRIPTION: Example of the HTML meta tags generated for Open Graph and Twitter card preview images\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/image/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:image\" content=\"/assets/previewImage.9d8ha1.jpg\">\n  <meta name=\"twitter:card\" content=\"summary_large_image\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: ValueTable Component Implementation\nDESCRIPTION: React JSX implementation of a comparison table showing different business models and their characteristics using a 0-1 scale for various attributes\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pricing/StateOfTheArt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ValueTable\n  entries={[\n    {\n      modelName: <>Open Source Pricing</>,\n      transparent: 1,\n      forkable: 1,\n      accessible: 1,\n      independent: 1,\n      sustainable: 1,\n    },\n    {\n      modelName: <>Open Source<Seperator/> Donations</>,\n      transparent: 1,\n      forkable: 1,\n      accessible: 1,\n      independent: 1,\n      sustainable: 0.3,\n    },\n    {\n      modelName: <>Open Source<Seperator/> Company Backed</>,\n      transparent: 1,\n      forkable: 1,\n      accessible: 1,\n      independent: 0,\n      sustainable: 1,\n    },\n    {\n      modelName: <>Open Source<Seperator/> Open Core</>,\n      transparent: 0.7,\n      forkable: 0.7,\n      accessible: 0.7,\n      independent: 1,\n      sustainable: 1,\n    },\n    {\n      modelName: <>Proprietary Software<Seperator/> Public Source</>,\n      transparent: 1,\n      forkable: 0,\n      accessible: 0.45,\n      independent: 1,\n      sustainable: 1,\n    },\n    {\n      modelName: <>Proprietary Software<Seperator/> Closed Source</>,\n      transparent: 0,\n      forkable: 0,\n      accessible: 0.45,\n      independent: 1,\n      sustainable: 1,\n    },\n  ]}\n  skip_links={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Correct Global Config Definition in Global File\nDESCRIPTION: Example showing correct placement of global configuration (baseServer) in a global config file under /pages/+config.js\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/warning/global-config/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\n// This is a global config file: it applies to all pages.\n\nexport default {\n  // ✅ Defining a global setting in a global +config.js\n  baseServer: '/blog/'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in Vite\nDESCRIPTION: This snippet shows how to configure path aliases in the Vite configuration file. It sets up the '#root' alias to point to the current directory using __dirname.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/path-aliases/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default {\n  resolve: {\n    alias: {\n     \"#root\": __dirname,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PageContext JSON Response Example\nDESCRIPTION: Shows the structure of a pageContext.json response containing fetched movie data\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-json/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl /star-wars/index.pageContext.json\n{\n  \"data\": {\n    \"movies\": [\n      {\n        \"title\": \"A New Hope\",\n        \"release_date\": \"1977-05-25\"\n      },\n      {\n        \"title\": \"The Empire Strikes Back\",\n        \"release_date\": \"1980-05-17\"\n      },\n      {\n        \"title\": \"Return of the Jedi\",\n        \"release_date\": \"1983-05-25\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Page Export Syntax in Vike 0.4.x (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update the page export syntax from default export to named export in Vike 0.4.x.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  // /pages/index.page.js\n\n- export default Page\n+ export { Page }\n\n  function Page() {\n    /* ... */\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for vike-server\nDESCRIPTION: Modifies the production script in package.json to use the server entry point generated by vike-server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n\"scripts\": {\n  \"dev\": \"vike dev\",\n  \"build\": \"vike build\",\n  \"prod\": \"NODE_ENV=production node dist/server/index.js\" // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: React Query Integration with useConfig\nDESCRIPTION: Example of using useConfig with React Query for data fetching and setting page metadata.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useConfig/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useConfig } from 'vike-react/useConfig'\nimport { useSuspenseQuery } from '@tanstack/react-query'\n\nfunction Movies() {\n  // Fetch data\n  const query = useSuspenseQuery({\n    queryKey: ['movies'],\n    queryFn: () => fetch('https://star-wars.brillout.com/api/films.json')\n  })\n  const movies = query.data\n\n  // Set <head> tags\n  const config = useConfig()\n  config({\n    title: `${movies.length} Star Wars Movies` // <title>\n    Head: <meta name=\"description\" content={`List of all ${movies.length} Star Wars movies.`} />\n  })\n\n  // Render UI\n  return (\n    <ul>{\n      movies.map(({ title }) => (\n        <li>{title}</li>\n      ))\n    }</ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for vike-cloudflare 0.2.x\nDESCRIPTION: This snippet shows the changes required in the vite.config.js file when migrating to vike-cloudflare 0.2.x. It removes the 'pages' import and plugin usage.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { pages } from \"vike-cloudflare\";// [!code --]\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    pages()// [!code --]\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using getGlobalContextAsync in Vike (JavaScript)\nDESCRIPTION: Shows how to use getGlobalContextAsync() as an alternative to getGlobalContext() when the latter cannot be called early. It takes a boolean parameter indicating whether the environment is production.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getGlobalContext/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getGlobalContextAsync } from 'vike/server'\nconst globalContext = await getGlobalContextAsync(process.env.NODE_ENV==='production')\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-all Product Route with Redirect in Vike\nDESCRIPTION: Defines a catch-all route function for product URLs with negative precedence, implementing redirect functionality for invalid product URLs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing-precedence/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default pageContext => {\n  if (!pageContext.urlPathname.startsWith('/product/')) return false\n  return {\n    precedence: -1,\n    pageContext: {\n      // E.g. redirect `/product/wrong/url` to `/product`\n      redirectTo: '/product'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Components for tRPC Integration in JSX\nDESCRIPTION: This code block renders multiple Example components, each representing a different tRPC integration example with Vike. It includes repository links, timestamps, and tech stack details for each example.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tRPC/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n - <Example timestamp=\"2024.04\" repo=\"Blankeos/hono-trpc\" /> - Hono + tRPC + Solid + Tanstack Query + Nprogress\n - <Example timestamp=\"2023.11\" repo=\"nabi-chan/vike-trpc-ssr\" />\n - <Example timestamp=\"2023.03\" repo=\"fortezhuo/vite-plugin-ssr-trpc\" />\n   > vite-plugin-ssr was the [previous name of Vike](https://vite-plugin-ssr.com/vike).\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Prefetch Settings for Mobile and Desktop in Vike\nDESCRIPTION: This snippet demonstrates how to set different prefetch strategies for mobile and desktop devices using media queries. It enables viewport prefetching for small screens and hover prefetching for larger screens.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/prefetchStaticAssets/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+prefetchStaticAssets.js\n\n// For small screens, such as mobile, viewport prefetching can be a sensible strategy\nexport const prefetchStaticAssets =\n  window.matchMedia('(max-width: 600px)').matches ? 'viewport' : 'hover'\n```\n\n----------------------------------------\n\nTITLE: Development Watch Mode\nDESCRIPTION: Commands to start development mode with watch functionality and run example projects.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev # At the monorepo root\n```\n\n----------------------------------------\n\nTITLE: Initializing Elysia Server with vike-server\nDESCRIPTION: Sets up an Elysia server using the vike-server extension. It applies Vike middleware and serves the application on port 3000.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/blog/vike-server/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Elysia } from 'elysia'\nimport { apply } from 'vike-server/elysia'\nimport { serve } from 'vike-server/elysia/serve'\n\nfunction startServer() {\n  const app = apply(new Elysia())\n  return serve(app, { port: 3000 })\n}\n\nexport default startServer()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Viewport Width in JavaScript\nDESCRIPTION: Demonstrates how to set a custom viewport width for pages that require a minimum width to display properly. This example sets the viewport width to 1200 pixels for an admin panel.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/viewport/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/admin-panel/+config.js\n\nexport default {\n  // The admin panel pages start to look good starting from a width of 1200px\n  viewport: 1200\n}\n```\n\n----------------------------------------\n\nTITLE: Pointer Import Transformation Example\nDESCRIPTION: Shows how Vike internally transforms imports in config files to pointer imports.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/config/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nimport Layout from '../layouts/LayoutDefault.jsx'\n\nexport default {\n  Layout\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n// Environment: config\n\nconst Layout = 'import:../layouts/LayoutDefault.jsx:default'\n\nexport default {\n  Layout\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Content with Component Integration\nDESCRIPTION: Markdown content that demonstrates both standard Markdown syntax and embedding of a React component.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/react-full/pages/markdown/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown\n\nThis page is written in _Markdown_.\n\nMDX allows us to include interactive components in the markdown. <Counter/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Memory Limit for Docker Builds\nDESCRIPTION: Example package.json configuration that increases Node.js memory allocation to prevent out-of-memory errors when building Vike applications inside Docker containers.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/docker/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"build\": \"vike build\" // [!code --]\n    \"// Increase Node.js memory size to 3GB\": \"\", // [!code ++]\n    \"build\": \"NODE_OPTIONS=--max-old-space-size=3072 npm run build:vite\", // [!code ++]\n    \"build:vite\": \"vike build\" // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config and Head Components\nDESCRIPTION: Shows alternative approach using Config and Head components for setting page metadata in React components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/useConfig/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Config } from 'vike-react/Config' // or vike-vue / vike-solid\nimport { Head } from 'vike-react/Head' // or vike-vue / vike-solid\n\nfunction Movies() {\n  // Fetch data\n  const data = useSomeDataFetchingTool()\n\n  // Render UI and <head> tags\n  return (\n    <Config title={data.title} />\n    <Head>\n      <meta property=\"og:image\" content={data.previewImage} />\n    </Head>\n    <ul>{\n      data.movies.map(({ title }) => (\n        <li>{title}</li>\n      ))\n    }</ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Attributes in Vike Configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the 'htmlAttributes' setting in a Vike configuration file to add a class attribute to the <html> tag. It's typically used in a 'pages/+config.js' file.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/htmlAttributes/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  // <html class=\"dark\">\n  htmlAttributes: { class: 'dark' }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Metadata in JavaScript\nDESCRIPTION: Defines global metadata for blog posts in a centralized metadata.js file, containing URLs, titles, and dates for all blog posts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/markdown/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/metadata.js\n\n// This metadata is always available for every page\nexport const metadata = [\n  {\n    url: '/blog/introducing-vike',\n    title: 'Introducing Vike',\n    date: new Date('2024-01-01')\n  },\n  {\n    url: '/blog/v1',\n    title: 'v1.0.0 release',\n    date: new Date('2024-06-01')\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Structure in JSX\nDESCRIPTION: Shows the basic structure of how a Layout component wraps the Page component in Vike.js.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>   ⟸ component defined by the setting \"Layout\"\n  <Page /> ⟸ component defined by the setting \"Page\"\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Importing Vike TypeScript Types\nDESCRIPTION: This snippet shows how to import TypeScript types for PageContext, PageContextClient, and PageContextServer from Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  // For code loaded in client and server\n  PageContext,\n  // For code loaded in client only\n  PageContextClient,\n  // For code loaded in server only\n  PageContextServer\n} from 'vike/types'\n```\n\n----------------------------------------\n\nTITLE: Implementing onPageTransitionEnd Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the onPageTransitionEnd hook in JavaScript. It logs the page transition end and checks for backward navigation, then removes a CSS class from the body.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onPageTransitionEnd/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+onPageTransitionEnd.js\n// Environment: browser\n\nexport { onPageTransitionEnd }\n\n// Create custom page transition animations\nasync function onPageTransitionEnd(pageContext) {\n  console.log('Page transition end')\n  console.log('Is backwards navigation?', pageContext.isBackwardNavigation)\n  document.body.classList.remove('page-transition')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Product Route in Vike\nDESCRIPTION: Creates a parameterized route for individual product pages using @productId parameter.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing-precedence/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default '/product/@productId'\n```\n\n----------------------------------------\n\nTITLE: Removing Global onBeforeRender() Hook in Vike (TSX)\nDESCRIPTION: This code snippet demonstrates how to remove the global onBeforeRender() hook in a Vike project using +onBeforeRender.tsx. It exports an empty function as the default export.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/hook-override/pages/page-2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n+onBeforeRender.tsx\n\nexport default function() {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Public Environment Variables in Vike\nDESCRIPTION: Demonstrates how to access public environment variables (prefixed with PUBLIC_ENV__) in both server-side and client-side code using import.meta.env.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/env/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction somewhere() {\n  // Environment variables prefixed with PUBLIC_ENV__ can be used anywhere: in server-side code\n  // as well as in client-side code.\n  import.meta.env.PUBLIC_ENV__SOME_KEY\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and running Vike CDN example project\nDESCRIPTION: Commands to clone the Vike repository, navigate to the CDN example project, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/base-url-cdn/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/base-url-cdn/\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: API Reference for getGlobalContext() Function in Vike\nDESCRIPTION: Reference to the getGlobalContext() function, a new feature added in Vike v0.4.228 that provides access to global context data.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`getGlobalContext()`](https://vike.dev/getGlobalContext)\n```\n\n----------------------------------------\n\nTITLE: Navigation Example with Shared Scroll Group (Bash)\nDESCRIPTION: Demonstrates URL patterns where scroll position is preserved due to shared custom scroll group.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Scroll is preserved when navigating between:\n/product/42\n/reviews/1337\n```\n\n----------------------------------------\n\nTITLE: Rendering Deprecation Warning for Custom Exports/Hooks in Vike using React\nDESCRIPTION: This code snippet renders a warning message using the Danger component from @brillout/docpress. It informs users about the deprecation of pageContext.exports for defining custom exports and hooks in Vike, and provides a link to the meta documentation for the recommended approach.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/exports/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>Defining custom exports/hooks using `pageContext.exports` is deprecated, instead create custom hooks and settings by using `meta`, see <Link href=\"/meta\" /></Danger>\n```\n\n----------------------------------------\n\nTITLE: Listing Vite Build Output Directory Structure\nDESCRIPTION: This bash snippet shows the structure of the 'dist/client/' directory after running 'vike build'. It demonstrates how Vite processes and organizes static assets, including content hashing for improved cacheability and copying of files from the 'public/' directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/static-directory/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The browser-side JavaScript bundle of our page `pages/hello-world/+Page.js`\ndist/client/assets/entries/pages_hello-world.b0c3b30b.js\n# Our file `public/robots.txt`\ndist/client/robots.txt\n```\n\n----------------------------------------\n\nTITLE: Head Library Integration in Vike.js\nDESCRIPTION: Example of using head management libraries with Vike.js, showing how to skip HTML escaping when using pre-sanitized head content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-manual/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n// Environment: server\n\nexport { onRenderHtml }\n\nimport { dangerouslySkipEscape } from 'vike/server'\nimport { renderToHtml } from 'some-ui-framework'\n\nasync function onRenderHtml(pageContext) {\n  return dangerouslySkipEscape(await renderToHtml(pageContext.Page))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vike-vue with SSR Settings\nDESCRIPTION: Extended configuration example showing how to customize SSR settings when using vike-vue extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-vue/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+config.js\n\nimport vikeVue from 'vike-vue/config'\n\nexport default {\n  // ...\n\n  // Setting to toggle SSR\n  ssr: false,\n\n  extends: [vikeVue]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Types for Server Routing\nDESCRIPTION: This snippet shows how to import TypeScript types for PageContext, PageContextClient, and PageContextServer when using Server Routing in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  // For code loaded in client and server\n  PageContextWithServerRouting as PageContext,\n  // For code loaded in client only\n  PageContextClientWithServerRouting as PageContextClient,\n  // For code loaded in server only\n  PageContextServer\n} from 'vike/types'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vike project in TypeScript\nDESCRIPTION: Explanation of the +config.ts file, which defines the interface between Vike and the project code, including layout, title, and head tags.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/universal-middleware/README.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// /pages/+config.ts\n// Content not provided, but file is mentioned as defining:\n// - Default <Layout> component\n// - Default title\n// - Global <head> tags\n```\n\n----------------------------------------\n\nTITLE: Setting Default Viewport Meta Tag in HTML\nDESCRIPTION: Shows the default viewport meta tag injected by Vike for responsive layouts. This sets the viewport width to the device width and initial scale to 1.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/viewport/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Universal Hook Component Example\nDESCRIPTION: Example of using useConfig as a universal hook within a React component context.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getPageContext/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /components/SomeReactComponent.jsx\n\nimport { useConfig } from 'vike-react/useConfig' // or vike-{vue,solid}\n\nfunction SomeReactComponent() {\n  // Not only can useConfig() be used inside a component...\n  const document = useConfig()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Analytics in Client-Side Code\nDESCRIPTION: Example of initializing analytics library in the client-side entry point.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/integration/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+client.js\n\nsomeAnalyticsLibrary.init(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Product Route in Vike\nDESCRIPTION: Defines a static route for the product listing page using a Route String.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing-precedence/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default '/product'\n```\n\n----------------------------------------\n\nTITLE: Route Function with Precedence Configuration\nDESCRIPTION: Shows how to set route precedence to resolve routing conflicts\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-function/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/edit/+route.js\n\nexport { route }\n\nconst route = (pageContext) => {\n  // ...\n  return {\n    precedence: 10,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Early Hints TypeScript Interface Definition\nDESCRIPTION: TypeScript type definition for the PageContext object containing earlyHints configuration. Defines the structure of early hints including asset type, media type, source URL, and entry status.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/preloading/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PageContext = {\n  httpResponse: {\n    earlyHints: {\n      earlyHintLink: string // Early hint value\n      assetType: \"image\" | \"script\" | \"font\" | \"style\" | \"audio\" | \"video\" | \"document\" |\n                 \"fetch\" | \"track\" | \"worker\" | \"embed\" | \"object\" | null\n      mediaType: string // MIME type\n      src: string // Asset's URL\n      isEntry: boolean // true  ⇒ asset is an entry\n                       // false ⇒ asset is a dependency of an entry\n    }[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vike React Example\nDESCRIPTION: Commands to clone the Vike repository, navigate to the React full example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/react-full/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/react-full/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Dynamic Description with TypeScript and Data Fetching\nDESCRIPTION: Demonstrates how to create a dynamic description based on fetched data using TypeScript. The function receives the pageContext object and returns the description from the product data.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/description/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/some-page/+description.js\n// Environment: server, client\n\nimport type { Data } from './+data'\nimport type { PageContextServer } from 'vike/types'\n\nexport function description(pageContext: PageContextServer<Data>) {\n  return pageContext.data.product.description\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vike-Cloudflare Without Server\nDESCRIPTION: Basic configuration setup for using vike-cloudflare package without a server implementation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cloudflare-pages/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeCloudflare from \"vike-cloudflare/config\";\n\nexport default {\n  plugins: [vikeCloudflare]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component in Vike\nDESCRIPTION: Imports the Link component from @brillout/docpress package and implements a redirection to the v1-design migration documentation page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/v1-design/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to: <Link href=\"/migration/v1-design\" />.\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Hattip Integration\nDESCRIPTION: This snippet shows the changes required in the package.json file when using Hattip with vike-cloudflare 0.2.x. It updates the dev and build scripts and removes Hattip-specific devDependencies.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n{\n  \"scripts\": {\n    \"dev\": \"hattip serve ./hattip-entry.ts --client\",// [!code --]\n    \"dev\": \"vike dev\",// [!code ++]\n    \"build\": \"cross-env NODE_ENV=production hattip build ./hattip-entry.ts --target es2022 --client\"// [!code --]\n    \"build\": \"vike build\"// [!code ++]\n  },\n  \"devDependencies\": {\n    \"@hattip/adapter-cloudflare-workers\": \"^0.0.49\",\n    \"@hattip/adapter-node\": \"^0.0.49\",// [!code --]\n    \"@hattip/vite\": \"^0.0.49\",// [!code --]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite to disable minification for debugging Vike runtime issues\nDESCRIPTION: A Vite configuration that disables JavaScript minification, making it easier to inspect the bundled client code to identify duplicate runtime inclusions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/client-runtime-duplicated/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default {\n  // Temporarily disable minification to make it easier to inspect /dist/client\n  build: { minify: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Route String Definition in Vike\nDESCRIPTION: Shows how to define a route using a route string with parameters instead of filesystem routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+route.js\n\n// This file defines the route of /pages/product/+Page.js\n\n// Route String\nexport default '/product/@id'\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths for TypeScript Migration in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to update import paths when migrating TypeScript files to ESM, by appending '.js' to the module path.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/CJS/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// someTypeScriptFile.ts\n\nimport { something } from './some/module'\nimport { something } from './some/module.js'\n```\n\n----------------------------------------\n\nTITLE: Additional keepScrollPosition Configuration (JavaScript)\nDESCRIPTION: Shows another example of setting a custom scroll group for a different page type.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/reviews/@id/+config.js\n\nexport default {\n  keepScrollPosition: 'name-of-the-scroll-group'\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hook PageContext Modification\nDESCRIPTION: Example of modifying pageContext properties within a custom hook\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// +someHook.js\nexport function someHook(pageContext) {\n  pageContext.someCustomProp = 'some-value' // Add or modify property\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Hydration Mismatch Error Examples\nDESCRIPTION: Example error messages that Vue throws in the browser when encountering hydration mismatches during SSR.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydration-mismatch/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Vue warn]: Hydration text mismatch:\\n - Client: \"some content\"\\n - Server: \"some other content\"\\n   at <SomeComponent>\\n   at <App>\n```\n\nLANGUAGE: text\nCODE:\n```\nHydration completed but contains mismatches.\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in TypeScript\nDESCRIPTION: This JSON snippet shows how to configure path aliases in the TypeScript configuration file (tsconfig.json). It sets up the '#root/*' alias to point to all files in the current directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/path-aliases/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"#root/*\": [\".//*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML-only Page Component in Vike\nDESCRIPTION: Server-side page component that renders static HTML content without client-side JavaScript processing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about/+Page.js\n// Environment: server\n\nexport { Page }\n\nfunction Page() {\n  return <>\n    <h1>HTML-only page</h1>\n    <p>\n      This page is rendered only to HTML. (It's not loaded/rendered in the browser-side.)\n    </p>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for Hattip Integration\nDESCRIPTION: This snippet shows the changes required in the vite.config.js file when using Hattip with vike-cloudflare 0.2.x. It removes Hattip-specific configurations and the 'pages' plugin.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hattip } from \"@hattip/vite\";// [!code --]\nimport { pages } from \"vike-cloudflare\";// [!code --]\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    hattip(),// [!code --]\n    pages({// [!code --]\n      server: {// [!code --]\n        kind: \"hattip\",// [!code --]\n        entry: \"hattip-entry.ts\",// [!code --]\n      },// [!code --]\n    }),// [!code --]\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Route Functions to Use pageContext.urlPathname in Vike\nDESCRIPTION: This code demonstrates how to modify Route Functions to use pageContext.urlPathname instead of pageContext.url when accessing the URL in page route files.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.23/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // /pages/**/*.page.route.js\n\n  export default pageContext => {\n-   const url = pageContext.url\n+   const url = pageContext.urlPathname\n    /* ... */\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Vike React Example for Production\nDESCRIPTION: Command to build the Vike React example project for production deployment using npm.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/vike-react/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Vike Hook Error Timeout Example\nDESCRIPTION: Example of an error message that Vike logs when a hook exceeds the error timeout threshold (default 30 seconds), resulting in the error page being rendered.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hooksTimeout/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Then Vike logs an error (and renders your error page)\n[vike][Error] The data() hook defined by /pages/movies/+data.js timed out: it didn't finish after 30 seconds\n```\n\n----------------------------------------\n\nTITLE: Rendering DefaultRouting Component\nDESCRIPTION: Renders the DefaultRouting component that demonstrates server-side routing functionality.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server-routing/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DefaultRouting />\n```\n\n----------------------------------------\n\nTITLE: Rendering Deprecated Hook Warning in React JSX\nDESCRIPTION: This code snippet imports components from @brillout/docpress and renders a Danger component with a warning message about the deprecated doNotPrerender hook. It includes links to migration and prerender documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/doNotPrerender/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `doNotPrerender` is deprecated in favor of `prerender`, see\n  <ul>\n    <li><Link href=\"/migration/v1-design#renamed-hooks\" /></li>\n    <li><Link href=\"/prerender#toggle\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Combined Server and Assets Base URL Configuration\nDESCRIPTION: Shows how to configure both server and asset base URLs separately.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  baseAssets: 'https://cdn.example.org/my-website-assets/',\n  baseServer: '/some-base/'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing bodyHtmlBegin Configuration in Vike with JSX\nDESCRIPTION: This code snippet demonstrates the usage of the ImplementedBy component to document the bodyHtmlBegin configuration option. It specifies that this option is implemented by vike-vue and vike-react, and that there is no custom guide available.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlBegin/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImplementedBy list={['vike-vue', 'vike-react']} noCustomGuide>`bodyHtmlBegin`</ImplementedBy>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vike Application\nDESCRIPTION: Commands for installing dependencies and starting a new Vike application using pnpm package manager. The application will run on localhost:3000 or localhost:3001 if the default port is busy.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/start/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies:\npnpm install\n# Start your app:\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Page Component with Vue in Vike\nDESCRIPTION: This snippet shows how to create a Page component using Vue's template syntax in Vike. It defines a simple template with a heading and a paragraph.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- /pages/index/+Page.vue -->\n\n<template>\n  <h1>Hi</h1>\n  <p>Hello World</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Problematic Date Rendering Example\nDESCRIPTION: Example of code that causes a hydration mismatch by rendering different millisecond values on server and client.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydration-mismatch/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<span>{ new Date().getMilliseconds() }</span>\n```\n\n----------------------------------------\n\nTITLE: File Structure for SSR Configuration in Vike (Bash)\nDESCRIPTION: This snippet illustrates the file structure and SSR behavior for different pages in a Vike project, showing which pages are rendered client-side only and which are rendered on both client and server.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/ssr/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Pages rendered and loaded only on the client-side\n/pages/admin-panel/products/+Page.js\n/pages/admin-panel/users/+Page.js\n\n# Pages rendered and loaded on both client- and server-side. (Because they\n# don't live under /pages/admin-panel/ thus the `ssr` setting doesn't apply.)\n/pages/index/+Page.js\n/pages/about/+Page.js\n```\n\n----------------------------------------\n\nTITLE: Stream Pipe Integration with stampPipe\nDESCRIPTION: Example demonstrating how to use stampPipe() for UI frameworks that provide stream pipes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/streaming/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n\nexport { onRenderHtml }\n\nimport { renderToStreamPipe } from 'some-ui-framework' // React, Vue, ...\nimport { escapeInject, stampPipe } from 'vike/server'\n\nasync function onRenderHtml(pageContext) {\n  const { Page } = pageContext\n\n  const pipe = renderToStreamPipe(Page)\n\n  // If `pipe(writable)` expects `writable` to be a Writable Node.js Stream\n  stampPipe(pipe, 'node-stream')\n  // If `pipe(writable)` expects `writable` to be a Writable Web Stream\n  stampPipe(pipe, 'web-stream')\n\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <body>\n        <div id=\"root\">${pipe}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mode in Vite Configuration\nDESCRIPTION: Demonstrates the equivalent mode configuration in Vite using vite.config.js file. Shows that setting mode to 'staging' in Vite configuration is identical to the Vike configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/mode/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default {\n  mode: 'staging'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML-only Environment Settings in Vike\nDESCRIPTION: Configuration file that sets the page environment to server-side only rendering without client-side hydration for all pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\n// Environment: config\n\nexport default {\n  meta: {\n    Page: {\n      env: { server: true, client: false } // HTML-only for all pages\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Browser Code Example\nDESCRIPTION: Shows using .client.js extension to ensure code only runs in the browser environment.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/file-env/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /utils/someClientCode.client.js\n\n// This code only works in the browser; we use .client.js to assert that this file is\n// never loaded on the server-side.\n\nwindow.onclick = () => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring disableAutoFullBuild in Vike\nDESCRIPTION: Configuration options for disabling automatic build step chaining in Vike. The setting can either completely disable all chaining or specifically disable only the pre-render triggering. This feature is marked as deprecated as Vite will soon use Rolldown build instead of two Rollup builds.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/disableAutoFullBuild/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nexport default {\n  // Disable all chaining\n  disableAutoFullBuild: true,\n  // Or only disable the automatic pre-render triggering\n  disableAutoFullBuild: 'prerender'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: This code snippet imports custom components and the Link component for use in the documentation. It includes components for examples, Bati usage, and community notes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/fastify/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, UseBati, CommunityNote } from '../../components'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for ESM in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the package.json file to treat .js files as ESM by setting the 'type' field to 'module'.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/CJS/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Server Routing Documentation\nDESCRIPTION: Imports the Link component from docpress and a DefaultRouting component for server routing implementation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server-routing/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { DefaultRouting } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation in JSX\nDESCRIPTION: This snippet imports various components used for documentation purposes, including links, contribution info, and custom components for examples and UI framework extensions.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/urql/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RepoLink, Link, Contribution } from '@brillout/docpress'\nimport { Example, UiFrameworkExtension, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Setting Mode in Vike Configuration\nDESCRIPTION: Shows how to set the mode configuration in Vike using +config.js file. In this example, the mode is set to 'staging'.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/mode/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  mode: 'staging'\n}\n```\n\n----------------------------------------\n\nTITLE: Page-Specific Stream Configuration in Vike\nDESCRIPTION: Demonstrates how to configure HTML streaming for specific page routes in a Vike application, specifically showing configuration for admin pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/stream/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/admin/+config.js\n\n/* This config applies only to admin pages (/pages/admin/**) such as:\n   FILESYSTEM                            URL\n   /pages/admin/+Page.js                 /admin\n   /pages/admin/user/@id/+Page.js        /admin/user/@id\n   /pages/admin/product/@id/+Page.js     /admin/product/@id\n*/\nexport default {\n  stream: false\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Port Configuration in Vite using vite.config.js\nDESCRIPTION: This snippet demonstrates the equivalent configuration in Vite's vite.config.js file. It sets both server.port and preview.port to 1234, achieving the same result as the Vike configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/port/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default {\n  server: {\n    port: 1234\n  },\n  preview: {\n    port: 1234\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Code Splitting in Vite for Vike\nDESCRIPTION: This snippet demonstrates a Rollup configuration in vite.config.js that can lead to the simultaneous loading of both Server and Client Routing runtimes. It's not recommended as it can cause performance issues and warnings.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/client-runtimes-conflict/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\n// This will lead to the warning above. We recommend against this practice: not only because\n// of the above warning but also because, in general, a given page should only load what is\n// strictly needed for that page. (Initial page load speed is usually more critical than\n// subsequent page load speed.)\nconst rollupOptions = {\n  output: {\n    manualChunks(id) {\n      if (id.includes('node_modules')) {\n        return 'vendor'\n      }\n    }\n  }\n}\n\nexport default { build: { rollupOptions } }\n```\n\n----------------------------------------\n\nTITLE: Creating Bati.js Application with React, Vue, or Solid using pnpm\nDESCRIPTION: These commands use pnpm to create a new Bati.js application with a choice of React, Vue, or Solid as the frontend framework. Each command uses the @batijs/app package with a specific flag to indicate the desired framework.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/start/BatiCmd_pnpm.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @batijs/app --react\n# Or:\npnpm create @batijs/app --vue\n# Or:\npnpm create @batijs/app --solid\n```\n\n----------------------------------------\n\nTITLE: Star Wars Movie Page Component\nDESCRIPTION: Vue component for displaying Star Wars movie details with props definition.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<!-- /pages/star-wars/movie/+Page.vue -->\n<!-- Environment: browser and server -->\n\n<template>\n  <h1>{{movie.title}}</h1>\n  <p>Release Date: {{movie.release_date}}</p>\n  <p>Director: {{movie.director}}</p>\n</template>\n\n<script lang=\"js\">\nconst data = ['movie']\nexport default { props: data }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic getPageContext Usage in Data Hook\nDESCRIPTION: Demonstrates basic usage of getPageContext() function inside a data hook to access the pageContext object.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getPageContext/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/+data.js\n\nexport { data }\n\nimport { getPageContext } from 'vike/getPageContext'\n\nfunction data() {\n  const pageContext = getPageContext()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Title and Description for Pages in Vike\nDESCRIPTION: These snippets show how to set custom title and description for individual pages and configure their environment availability.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-modes/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about/+title.js\nexport const title = 'About | My App'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/about/+description.js\nexport const description = 'My App is ...'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\nexport default {\n  meta: {\n    Page: {\n      env: { server: false, client: true } // SPA for all pages\n    },\n    title: {\n      env: { server: true, client: false }\n    },\n    description: {\n      env: { server: true, client: false }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Middleware PageContext Initialization\nDESCRIPTION: Example of setting pageContext.urlOriginal in server middleware configuration\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Server middleware\napp.get('*', async (req) => {\n  const pageContextInit = {}\n  // `pageContext.urlOriginal` is defined here\n  pageContextInit.urlOriginal = req.url\n  const pageContext = await renderPage(pageContextInit)\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Page Server-side Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to migrate a page's server-side hook from the old .page.server.js file to the new +onBeforeRender.js file in the page's directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/index.page.server.js // [!code --]\n// /pages/some-page/+onBeforeRender.js // [!code ++]\n\nexport { onBeforeRender }\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vike Documentation\nDESCRIPTION: Import statements for React components used in the documentation page, including Link from docpress and custom components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tailwind-css/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example, UseBati, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Defining a Catch-All Page Component in JavaScript\nDESCRIPTION: This snippet shows the structure of a Page component file that corresponds to the catch-all route. It exports a Page component that will be rendered for all matched URLs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/route-string/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/catch-all/+Page.js\n\n// The single page of our app.\nexport { Page }\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Star Wars Movie Route Definition\nDESCRIPTION: Route string definition for parameterized Star Wars movie pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-tour/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/star-wars/movie/+route.js\n// Environment: server\n\n// Route String\nexport default '/star-wars/@movieId'\n```\n\n----------------------------------------\n\nTITLE: Using grep to locate duplicate client runtime instances in Vike\nDESCRIPTION: Shell commands to identify where Vike's client runtime is being loaded multiple times by searching through the built client files.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/client-runtime-duplicated/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd dist/client/\ngrep -r 'loaded twice'\n```\n\n----------------------------------------\n\nTITLE: Filesystem Routing Path Examples in Vike\nDESCRIPTION: Demonstrates how filesystem paths are mapped to URLs in Vike's routing system, showing ignored directories and path resolution\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystem-routing/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFILESYSTEM                                                     URL\n=========================================================      ========\npages/index/+Page.js                                           /\n(marketing)/src/pages/jobs/+Page.js                            /jobs\n(some)/(path)/src/pages/jobs/+Page.js                          /jobs\ncontact/+Page.js                                               /contact\npages/pages/src/(some-dir)/src/index/pages/about/+Page.js      /about\n```\n\n----------------------------------------\n\nTITLE: Rendering onAfterRenderClient Documentation in JSX\nDESCRIPTION: JSX markup for documenting the onAfterRenderClient hook with implementation reference and link to related hook.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onAfterRenderClient/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImplementedBy noCustomGuide={true}>`onAfterRenderClient()`</ImplementedBy>\n\nSame as <Link href=\"/onBeforeRenderClient\">`onBeforeRenderClient()`</Link> but called after rendering the page on the client-side.\n```\n\n----------------------------------------\n\nTITLE: Disabling All Hook Timeouts in Vike\nDESCRIPTION: Configuration example showing how to disable timeouts globally for all hooks in Vike (not recommended).\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hooksTimeout/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nexport default {\n  // We strongly recommend against this\n  hooksTimeout: false\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Hooks with Environment Configuration\nDESCRIPTION: Shows the file structure and naming conventions for overriding global hooks and setting their execution environments. The setup includes data and onBeforeRender hooks with their corresponding meta configurations.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/hook-override/pages/page-4/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n+data.tsx        // Override global data() hook\n+meta.ts         // Set data() hook to client-only\n+onBeforeRender.tsx // Override global onBeforeRender() hook\n+meta.ts         // Set onBeforeRender() hook to client and server\n```\n\n----------------------------------------\n\nTITLE: Configuring vike-cloudflare 0.2.x in +config.js\nDESCRIPTION: This snippet demonstrates how to configure vike-cloudflare 0.2.x in the +config.js file. It imports the vike-cloudflare config and adds it to the 'extends' array.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// +config.js\n\nimport vikeCloudflare from \"vike-cloudflare/config\";// [!code ++]\n\nexport default {\n  extends: [\n    // ...\n    vikeCloudflare // [!code ++]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Vike onRenderHtml Hook with Full HTML\nDESCRIPTION: Alternative implementation of onRenderHtml hook where the entire HTML is generated by React/Vue and wrapped with dangerouslySkipEscape. Vike still handles asset injection automatically.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/injectAssets/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport { onRenderHtml }\n\nimport { dangerouslySkipEscape } from 'vike/server'\n\nasync function onRenderHtml(pageContext) {\n  // `pageHtml` is generated by React/Vue and includes the whole HTML document\n  const html = /*...*/\n\n  // Vike injects assets to `html`\n  return dangerouslySkipEscape(html)\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Data Hook Implementation\nDESCRIPTION: Shows equivalent implementations of accessing pageContext, comparing getPageContext() usage with direct parameter passing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getPageContext/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/+data.js\n\nexport { data }\n\nimport { getPageContext } from 'vike/getPageContext' // [!code --]\n\nfunction data() { // [!code --]\n  const pageContext = getPageContext() // [!code --]\nfunction data(pageContext) { // [!code ++]\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Global onBeforeRender Hook in JavaScript\nDESCRIPTION: This snippet shows how to migrate the global onBeforeRender hook and passToClient configuration from the old .page.server.js file to separate +onBeforeRender.js and +config.js files in the renderer directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1-design/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/_default.page.server.js // [!code --]\n// /renderer/+onBeforeRender.js // [!code ++]\n\nexport { onBeforeRender }\nexport const passToClient = ['pageProps'] // [!code --]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+config.js\n\nexport default {\n  passToClient: ['pageProps']\n}\n```\n\n----------------------------------------\n\nTITLE: Using useClientRouter with Page and Context Props\nDESCRIPTION: Example of how to use the useClientRouter API with destructured Page and contextProps for rendering components, supporting isHydration flag for hydration status.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nuseClientRouter({ render({ Page, contextProps, isHydration }) })\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Driven File Structure with Multiple Renderers\nDESCRIPTION: Example showing how to organize marketing pages and admin panel with different rendering strategies. Marketing pages use HTML-only rendering while the admin panel uses SPA rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/multiple-renderer/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# =====================\n# == Marketing Pages ==\n# =====================\nmarketing/pages/index/+Page.js # /\nmarketing/pages/about/+Page.js # /about\nmarketing/pages/jobs/+Page.js # /jobs\n# Render Marketing Pages as HTML-only\nmarketing/renderer/+onRenderHtml.js\nmarketing/renderer/+onRenderClient.js\nmarketing/+config.js # (Route to `/*` instead of `/marketing/*`.)\n\n# =================\n# == Admin Panel ==\n# =================\nadmin-panel/pages/index/+Page.js\n# Render Admin Panel as SPA\nadmin-panel/renderer/+onRenderHtml.js\nadmin-panel/renderer/+onRenderClient.js\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JavaScript for Vike Documentation\nDESCRIPTION: This code snippet imports custom components 'Example' and 'CommunityNote' from a relative path. These components are likely used for structuring and enhancing the documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/sass/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PageContext JSON Request\nDESCRIPTION: Shows the HTTP GET request format used by Vike to retrieve server-side pageContext data\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-json/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Retrieve data fetched on the server-side\nHTTP GET /product/42/index.pageContext.json\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server using Vite for faster development\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: Imports custom documentation components including Example, CommunityNote, and UseBati from a components directory\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/panda-css/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, CommunityNote, UseBati } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Vike React Minimal Example\nDESCRIPTION: This code snippet shows the commands to clone the Vike repository, navigate to the react-minimal example, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/react-minimal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/react-minimal/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Comparison Table in Markdown\nDESCRIPTION: A detailed markdown table comparing various features and capabilities of Vike and Next.js frameworks. It covers aspects such as bundling, UI framework support, SSR, routing, pre-rendering, and deployment options.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/nextjs/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                 | Vike                                                       | Next.js                       |\n| --------------------------------------------------------------- | ---------------------------------------------------------- | ----------------------------- |\n| Bundler                                                         | Vite (dev: esbuild+ESM, prod: Rollup)                      | Webpack                       |     \n| UI Framework                                                    | Any (React, Preact, Solid, etc.)                           | React only                    |\n| Code-splitting and bundling                                     | Yes                                                        | Yes                           |\n| HMR                                                             | Yes, fast                                                  | Yes, slow                     |\n| Optional SSR                                                    | Yes                                                        | Limited (app[[1]](https://gist.github.com/gaearon/9d6b8eddc7f5e647a054d7b333434ef6?permalink_comment_id=4508093#gistcomment-4508093), pages[[2]](https://nextjs.org/docs/app/building-your-application/deploying/static-exports#unsupported-features)[[3]](https://github.com/vercel/next.js/issues/54393), components[[4]](https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#skipping-ssr)[[5]](https://www.npmjs.com/package/react-no-ssr))                            |\n| <p align=\"center\">**SSR**</p>                                   |                                                            |                               |\n| Control                                                         | Full control                                               | Limited / Black box                      |\n| Renderers                                                       | Yes, create as many you need                               | Just one (`_app.ts` file)      |\n| RSC (React Server Components)                                   | Yes, <Link href=\"/react#react-server-components\">partially</Link> | Yes, experimental       |\n| <p align=\"center\">**Routing**</p>                                                        |                                                            |                               |\n| Filesystem Routing                                              | Yes                                                        | Yes                           |\n| <Link text=\"Domain-driven Filesystem Routing\" href=\"/routing#domain-driven-file-structure\" />                                        | Yes                                                        | No                            |\n| <Link text=\"Client Routing\" href=\"/client-routing\" />           | Yes                                                        | Yes, but [limited](https://github.com/vercel/next.js/discussions/64660) in SPA-only mode ***                           |\n| <Link text=\"Server Routing\" href=\"/server-routing\" />           | Yes                                                        | No                            |\n| <Link text=\"Base URL\" href=\"/base-url\" />                       | Yes                                                        | Limited                       |\n| <p align=\"center\">**Pre-rendering (SSG)**</p>                                                   |                                                            |                               |\n| Pre-rendering (SSG)                                    | Yes, for pages                                                        | Yes, for pages, or components ([Partial Pre-rendering](https://nextjs.org/learn/dashboard-app/partial-prerendering) using RSC)                               |\n| Incremental Static Regeneration (ISR)                  | No*, use <Link text=\"vite-plugin-vercel\" href=\"/vercel#vite-plugin-vercel\" />        | Yes, in the Node.js runtime, on Vercel    |\n| SPA-only mode (popular for PWAs) ***                   | Yes                                                        | Limited: [no dynamic routing in App Router](https://github.com/vercel/next.js/discussions/64660)                       |\n| <p align=\"center\">**Integrations**</p>                                                    |                                                            |                               |\nHTTP server | No*, bring your own | Baked-in, custom server partially supported with caveats[[1]](https://github.com/vikejs/vike/issues/158#issuecomment-1355306156)[[2]](https://stackoverflow.com/questions/58742343/do-i-have-to-use-express-in-next-js-project/70945468#70945468) |\n| Apollo Client with SSR                                          | Fully supported                                            | Partially supported           |\n| Relay with SSR                                                  | Fully supported                                            | Partially supported           |\n| <p align=\"center\">**Extras**</p>                                |                                                            |                               |\n| Head component                                                  | No*, use a tool like [react-helmet](https://github.com/nfl/react-helmet). | Yes, next/head                |\n| Image component                                                 | No*, use an <Link href=\"/img\">image optimizer tool</Link>. | Yes, next/image               |\n| API routes                                                      | No*, use your server or an <Link text=\"RPC tool\" href=\"/api-routes\" />.   | Yes                           |\n| Internationalization (i18n)                                     | Yes                                                         | Limited                       |\n| <Link href=\"/deploy-sync\" />                                    | Yes                                                         | No                            |\n| [Build your own framework](https://land.vike.dev)                   | Yes                                                         | No                            |\n| <p align=\"center\">**Deployment options**</p>                                              |                                                            |                               |\n| Vercel                                                          | Yes, minimal config                                        | Yes, zero config              |\n| Cloudflare Workers                                              | Yes, minimal config                                        | Yes, but limited              |\n| Node server (Docker, Heroku, Digital Ocean etc.)                | Yes, minimal config                                        | Yes, but limited              |\n| Caching (see own section above)                                 | No*, if needed, use industry-standard caching**.           | App Router [caching](https://nextjs.org/docs/app/building-your-application/caching), [opt-out](https://www.reddit.com/r/nextjs/comments/15wc4nt/nextjs_caching_opt_out/)   |\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for + Files\nDESCRIPTION: Shows how to configure environment settings for + files using TypeScript configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/file-env/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/product/@id/+config.ts\n\nexport default {\n  meta: {\n    data: {\n      // .shared.js\n      env: { server: true, client: true },\n      // .server.js\n      env: { server: true, client: false },\n      // .client.js\n      env: { server: false, client: true }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Global data() Hook in Vike (TypeScript)\nDESCRIPTION: This code snippet shows how to remove the global data() hook in a Vike project using +config.ts. It sets the data property to null in the configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/hook-override/pages/page-2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n+config.ts\n\nexport default {\n  data: null\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Asset Injection Import Update\nDESCRIPTION: Demonstrates changes to importing and using dangerouslySkipEscape and html functions.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n- import { html } from \"vite-plugin-ssr\"\n+ import { html, dangerouslySkipEscape } from \"vite-plugin-ssr\"\n\n  export function render() {\n    return html`<!DOCTYPE html>\n      <html>\n        <body>\n-         <div id=\"root\">${html.dangerouslySkipEscape(pageHtml)}</div>\n+         <div id=\"root\">${dangerouslySkipEscape(pageHtml)}</div>\n        </body>\n      </html>`\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Route with User Check in Vike\nDESCRIPTION: Creates a route function that takes precedence when user is null, useful for authentication flows.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing-precedence/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default pageContext => {\n  if( pageContext.user === null ) {\n    return {\n      precedence: 99\n    }\n  }\n  return false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing new configurations in JavaScript\nDESCRIPTION: Implements new configurations 'baseAssets' and 'baseServer' to fix issue #542.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimplement new configurations `baseAssets` and `baseServer`\n```\n\n----------------------------------------\n\nTITLE: Universal Hook in Data Hook Context\nDESCRIPTION: Shows how useConfig can be used as a universal hook within a Vike data hook.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/getPageContext/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/some-page/+data.js\n\nimport { useConfig } from 'vike-react/useConfig'\n\nexport function data() {\n  // ... but it can also be used inside a Vike hook.\n  const document = useConfig()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Type Imports in Vike v1\nDESCRIPTION: Shows the required changes for importing types in Vike v1, including moving all type imports to 'vike/types' and renaming PageContextBuiltInClient to more specific variants.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/v1/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { SomeType } from 'vike/any-path' // [!code --]\nimport type { SomeType } from 'vike/types' // [!code ++]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { PageContextBuiltInClient } from 'vike/client/router' // [!code --]\nimport type { // [!code ++]\n  PageContextBuiltInClientWithClientRouting as // [!code ++]\n  PageContextBuiltInClient // [!code ++]\n} from 'vike/types' // [!code ++]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { PageContextBuiltInClient } from 'vike/client' // [!code --]\nimport type { // [!code ++]\n  PageContextBuiltInClientWithServerRouting as // [!code ++]\n  PageContextBuiltInClient // [!code ++]\n} from 'vike/types' // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Updating client-side getPage usage in page.client.js\nDESCRIPTION: Changes how the Page component and pageContext are retrieved from the getPage function in client-side page files, moving from destructuring the return value to accessing Page as a property of pageContext.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n  // *.page.client.js\n\n  import { getPage } from \"vite-plugin-ssr/client\";\n\n- const { Page, pageContext } = await getPage();\n+ const pageContext = await getPage();\n+ const { Page } = pageContext\n```\n\n----------------------------------------\n\nTITLE: Admin Page with Dashboard Layout (Manual Implementation)\nDESCRIPTION: Another example of manually implementing layouts by wrapping Page components with a specific layout component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Layout/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/admin/+Page.js\n\nexport { Page }\n\nimport { LayoutDashboard } from '../layouts/LayoutDashboard'\n\nfunction Page() {\n  return <>\n    <LayoutDashboard>\n      {/* ... */}\n    </LayoutDashboard>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component with Link\nDESCRIPTION: JSX components showing an example implementation reference and a navigation link to integration documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/ruby-on-rails/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2024.03\" repo=\"Alignable/bifrost\" />\n```\n\n----------------------------------------\n\nTITLE: URL Parsing Example in Vike\nDESCRIPTION: Demonstrates the enhanced URL parsing capabilities in Vike, showing the structure of pageContext.urlParsed with new properties including pathname, search, hash, and origin information.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-07/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  pathname: '/hello/sébastien',\n  pathnameOriginal: '/some-base-url/hello/s%C3%A9bastien',\n  search: {},\n  searchAll: {},\n  searchOriginal: null,\n  hash: '',\n  hashOriginal: null,\n  origin: 'http://localhost:3000',\n  href: 'http://localhost:3000/hello/s%C3%A9bastien',\n  protocol: 'http://',\n  hostname: 'localhost',\n  port: 3000\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Vike React-Streaming Example (Bash)\nDESCRIPTION: This bash script clones the Vike repository, navigates to the react-streaming example directory, installs dependencies, and starts the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/react-streaming/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/react-streaming/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: React/JSX imports for documentation components including Link from docpress and a custom Example component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/netlify-functions/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies for Cloudflare Workers React Project\nDESCRIPTION: Commands to clone the project repository and install necessary dependencies for the Cloudflare Workers React example.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react-full/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/cloudflare-workers-react-full/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Type Definition\nDESCRIPTION: Addition of Data generic type to PageContext types and deprecation of old PageContext type definitions.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Example type usage:\nPageContext<Data>\n```\n\n----------------------------------------\n\nTITLE: Redirect Function Type Definition\nDESCRIPTION: TypeScript type definition for the redirect function that specifies the URL format requirements. Accepts URLs starting with '/', 'https://', or 'http://'.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redirect/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Redirect the user to another URL\nredirect(url: `/${string}` | `https://${string}` | `http://${string}`)\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Commands in package.json\nDESCRIPTION: Example showing how to update package.json scripts from Vite CLI commands to their Vike equivalents for development, build, and preview commands.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/cli/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"dev\": \"vike dev\",\n    \"build\": \"vite build\",\n    \"build\": \"vike build\",\n    \"preview\": \"vite preview\",\n    \"preview\": \"vike preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: HTML Template Tag Rename\nDESCRIPTION: Shows the renaming of html template tag to escapeInject for improved clarity.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n- import { html, dangerouslySkipEscape } from \"vite-plugin-ssr\"\n+ import { escapeInject, dangerouslySkipEscape } from \"vite-plugin-ssr\"\n\n  export function render() {\n-   return html`<!DOCTYPE html>\n+   return escapeInject`<!DOCTYPE html>\n      <html>\n        <body>\n          <div id=\"root\">${dangerouslySkipEscape(pageHtml)}</div>\n        </body>\n      </html>`\n  }\n```\n\n----------------------------------------\n\nTITLE: Passing HTTP Request Headers in JavaScript\nDESCRIPTION: Shows how to pass HTTP request headers to the renderPage function in a server middleware, introducing the new pageContext.headersOriginal property.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-06/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderPage } from 'vike/server'\n\n// Server middleware\napp.get('*', async (req) => {\n  const pageContextInit = {\n    urlOriginal: req.url,\n    headersOriginal: req.headers\n  }\n  const pageContext = await renderPage(pageContextInit)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Vike Environment Variables\nDESCRIPTION: Example of setting Vike configuration options using environment variables.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nVIKE_CRAWL={git:false}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Client-Side Code Execution in Node.js Environment\nDESCRIPTION: This snippet shows a function that uses the window object, which is only available in browser environments. When this code is executed in a Node.js environment, it will cause a 'window is not defined' error.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hints/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ~/my-app/some/file.js\n\n// This file should be loaded only on the client-side\n\nexport function someFunction() {\n  window.alert('hello')\n}\n```\n\n----------------------------------------\n\nTITLE: Updating onBeforeRoute() Hook for URL Handling in Vike\nDESCRIPTION: This snippet illustrates how to update the onBeforeRoute() hook to use and provide pageContext.urlOriginal instead of pageContext.url when modifying URLs before routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4.23/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // /renderer/_default.page.route.js\n\n  export function onBeforeRoute(pageContext) {\n-   let urlMod = pageContext.url\n+   let urlMod = pageContext.urlOriginal\n\n    urlMod = changeUrl(urlMod)\n\n    return {\n      pageContext: {\n-       url: urlMod,\n+       urlOriginal: urlMod,\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vue-Vike Example\nDESCRIPTION: Terminal commands for cloning the Vike repository, navigating to the Vue minimal example, installing dependencies, and starting the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/vue-minimal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/vue-minimal/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating Base URL Configuration in Vike 0.4.x (JavaScript)\nDESCRIPTION: This code shows how to update the base URL configuration from using createPageRenderer() to setting it in vite.config.js for Vike 0.4.x.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/0.4/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  // server.js\n\n- import { createPageRenderer } from 'vike'\n- const renderPage = createPageRenderer({ base })\n\n+ import { renderPage } from 'vike/server'\n+ // We don't need to set `base` here anymore.\n\n  const pageContext = await renderPage({ url })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default {\n  base: '/some/base/url/'\n  // Or, if you used `baseAsset`:\n  base: 'https://cdn.example.org/'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: Imports React components (Example and CommunityNote) used for displaying documentation examples and community resources.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/deno/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Domain-Driven File Structure\nDESCRIPTION: Demonstrates how to organize files in a domain-driven architecture with separate concerns for different application areas.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Domain: marketing\n(marketing)/pages/+Layout.js\n(marketing)/pages/index/+Page.js\n(marketing)/pages/about/+Page.js\n(marketing)/components/ContactUs.js\n\n# Domain: admin panel\nadmin-panel/pages/+Layout.js\nadmin-panel/pages/index/+Page.js\nadmin-panel/pages/users/+Page.js\nadmin-panel/components/Charts.js\nadmin-panel/database/fetchUsers.js\n```\n\n----------------------------------------\n\nTITLE: Running the Path Aliases Example in Vike\nDESCRIPTION: These commands clone the Vike repository, navigate to the path-aliases example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/path-aliases/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/path-aliases/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Dependencies\nDESCRIPTION: Initial imports for documentation components including Link, Warning, UseBati, and Example components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vercel/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Warning } from '@brillout/docpress'\nimport { UseBati } from '../../components'\nimport { Example } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Organizing Pages into Groups in YAML\nDESCRIPTION: Demonstrates how to organize pages into groups using directory structures, allowing for improved organization and different configurations for different pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-06/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nFILESYSTEM                             URL\n================================       ==================\npages/(marketing)/index/+Page.js       /\npages/(marketing)/about/+Page.js       /about\npages/admin-panel/index/+Page.js       /admin-panel\npages/admin-panel/users/+Page.js       /admin-panel/users\n```\n\n----------------------------------------\n\nTITLE: Case Sensitive Routing Example in Vike\nDESCRIPTION: Illustrates case sensitivity in Vike's filesystem routing\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystem-routing/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFILESYSTEM                     URL\n========================       ======\npages/HELLO/+Page.js           /HELLO\n```\n\n----------------------------------------\n\nTITLE: React Component with CSS Import Example\nDESCRIPTION: Example showing a React component for a Terms of Service page that demonstrates CSS import and potential CSS leakage issues.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/faq/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/terms/+Page.jsx\n\nimport './style.css'\n\nexport const Page = () => (\n  <div id=\"#terms\">\n    <h1>Terms of Service</h1>\n    <section>\n      {/* ... */}\n    </section>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using VIKE_CONFIG Environment Variable\nDESCRIPTION: Examples of using the VIKE_CONFIG environment variable to pass configuration settings to Vike commands. This approach allows setting complex configurations without lengthy command lines.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/cli/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Make development server available over LAN and public addresses\n$ VIKE_CONFIG=\"{host:true}\" vike dev\n\n# Also when running Vike's CLI over a package.json script\n$ VIKE_CONFIG=\"{prerender:{parallel:4,noExtraDir:true}}\" npm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Vike App with Bun\nDESCRIPTION: Command to create a new Vike app using Bun package manager. This scaffolds a Vike app with a custom React or Vue integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/new/core/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbun create vike-core\n```\n\n----------------------------------------\n\nTITLE: Importing from Vike Plugin in JavaScript\nDESCRIPTION: The recommended way to import the Vike plugin in JavaScript code. A breaking change notes that imports should be from 'vite-plugin-ssr/plugin' instead of directly from 'vite-plugin-ssr'.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport ssr from 'vite-plugin-ssr/plugin';\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect Function Call in Isomorphic Context\nDESCRIPTION: This code demonstrates a function call that may cause errors when executed in a server-side environment. The someFunction() call needs to be restricted to client-side execution to avoid the 'window is not defined' error.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hints/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ~/my-app/some/other-file.js\n\n// This file is loaded on both client- and server-side\n\nimport { someFunction } from './file.js'\n\nfunction someCallerFn() {\n  someFunction()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metadata Settings\nDESCRIPTION: Configuration file that defines custom metadata settings for both server and client environments.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/markdown/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// /pages/+config.js\n\n// Define the custom settings `metadata`\nexport default {\n  meta: {\n    metadata: {\n      env: { server: true, client: true }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vike App with pnpm\nDESCRIPTION: Command to create a new Vike app using pnpm package manager. This scaffolds a Vike app with a custom React or Vue integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/new/core/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm create vike-core\n```\n\n----------------------------------------\n\nTITLE: Debugging TypeError: Cannot read properties of undefined in JavaScript\nDESCRIPTION: This snippet shows a typical stack trace for a 'Cannot read properties of undefined' error, which is often caused by ESM/CJS issues. The error occurs when trying to access a property of an undefined object.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTypeError: Cannot read properties of undefined (reading 'someProp')\n    at someFunction (node_modules/some-good-lib/dist/index.js:1000:3)\n    at someHook (renderer/+someHook.js:13:37)\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from @brillout/docpress in JavaScript\nDESCRIPTION: This snippet imports the Link component from the @brillout/docpress package. The Link component is likely used for creating internal navigation links within a Vike-based documentation or web application.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-server/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Displaying Vike Multiple Version Warning Message\nDESCRIPTION: Warning message that appears when multiple versions of Vike (1.2.3 and 1.2.4) are loaded simultaneously in the application. This situation is discouraged, especially in production environments.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/warning/version-mismatch/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Vike][Warning] vike@1.2.3 and vike@1.2.4 loaded which is highly discouraged\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Page in React\nDESCRIPTION: Reference to the error page component, which is rendered when errors occur in the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/universal-middleware/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/_error/+Page.jsx\n// Content not provided, but file is mentioned as the error page component\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress\nDESCRIPTION: Import statement for the Link component used in documentation navigation\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server-side-rendering/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CommunityNote Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and use a custom CommunityNote component in a JSX file. The component is used to link to the Bootstrap documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bootstrap/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://getbootstrap.com\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Page and Context Props with getPage() in React\nDESCRIPTION: Code snippet showing how to access Page and contextProps using the getPage() function in a client-side context, used with the useClientRouter API.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Page, contextProps } = await getPage()\n```\n\n----------------------------------------\n\nTITLE: Vike Hook Warning Timeout Example\nDESCRIPTION: Example of a warning message that Vike logs when a hook takes longer than the warning timeout threshold (default 4 seconds) to resolve.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hooksTimeout/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Vike first logs a warning (still awaiting your hook)\n[vike][Warning] The data() hook defined by /pages/movies/+data.js is slow: it's taking more than 4 seconds\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vike Base URL Example\nDESCRIPTION: Commands for cloning the Vike repository, installing dependencies, and running the base URL example project in development or preview mode\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/base-url/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/base-url/\nnpm install\nnpm run dev\n# Or\n# npm run preview\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Component with Metadata Integration\nDESCRIPTION: React layout component that displays blog post metadata in a sidebar and handles page content rendering with dynamic title integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/markdown/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// /pages/+Layout.jsx\n\nimport { metadata } from './metadata'\n\nexport function Layout({ children }) {\n  // Current URL\n  const { urlPathname } = usePageContext()\n  // The page's metadata\n  const { title } = metadata.find(({ url }) => url === pageContext.urlPathname)\n\n  return <>\n    {/* Show the list of blog posts */}\n    <LeftSidebar>\n      <p>Blog posts:</p>\n      <ul>{\n        metadata.map(({ title, url, date }) =>\n          <li>\n            <a href={url}>{data + title}</a>\n          </li>\n        )\n      }</ul>\n    </LeftSidebar>\n\n    {/* The page's content */}\n    <Content>\n      <h1>{ title }</h1>\n      /* children is usually pageContext.Page which is the component defined by +Page.md */\n      { children }\n    </Content>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicon in Vike.js Config File\nDESCRIPTION: Example of importing and setting a favicon in the Vike.js configuration file. The favicon setting accepts a string, null, or a function that returns a string/null/undefined and runs in the server environment.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/favicon/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/+config.js\n\nimport favicon from './favicon.svg'\n\nexport default {\n  favicon\n}\n```\n\n----------------------------------------\n\nTITLE: Using useData Inside +Head Component\nDESCRIPTION: Example of using the useData() hook inside a +Head component to access data for setting head tags.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Head/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/product/@id/+Head.js\n\nimport { useData } from 'vike-react/useData' // or vike-{vue,solid}\n\nexport function Head() {\n  const data = useData()\n  return <>\n    {/* Image shown when sharing on social sites (Twitter, WhatsApp, ...) */}\n    <meta property=\"og:image\" content={data.product.image}>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Reference to onPrerenderStart() Hook in Vike\nDESCRIPTION: Documentation link for the onPrerenderStart() hook, mentioned in relation to a negligible breaking change where 404 pageContext is now added to prerenderContext.pageContexts.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[`onPrerenderStart()`](https://vike.dev/onPrerenderStart)]\n```\n\n----------------------------------------\n\nTITLE: React Hydration Mismatch Error Examples\nDESCRIPTION: Various error messages that React displays in the browser when detecting hydration mismatches.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydration-mismatch/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWarning: Text content did not match. Server: \"some content\" Client: \"some other content\"\n```\n\nLANGUAGE: text\nCODE:\n```\nAn error occurred during hydration. The server HTML was replaced with client content in <SomeComponent>.\n```\n\nLANGUAGE: text\nCODE:\n```\nText content does not match server-rendered HTML.\n```\n\nLANGUAGE: text\nCODE:\n```\nHydration failed because the initial UI does not match what was rendered on the server.\n```\n\nLANGUAGE: text\nCODE:\n```\nThere was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Relay Integration Documentation in JSX\nDESCRIPTION: This snippet imports necessary components from '@brillout/docpress' and local components for documenting Relay integration with Vike. It sets up the structure for the documentation page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/relay/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Contribution } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote tool=\"relay\" url=\"https://relay.dev\" hasExtension={false} />\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress in JavaScript\nDESCRIPTION: This code snippet imports the Link component from the @brillout/docpress package. The Link component is likely used for creating internal navigation links within the documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component References\nDESCRIPTION: JSX code showing usage of Example components to reference Vike deployment examples on Netlify.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/netlify-functions/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2023.09\" repo=\"brunsten/vike-react-netlify\" />\n<Example timestamp=\"2022.07\" repo=\"AaronBeaudoin/vite-plugin-ssr-example-netlify\" />\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm\nDESCRIPTION: Command to install pnpm globally using npm.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Product Pages (Plaintext)\nDESCRIPTION: Illustrates the file structure for product pages where keepScrollPosition is applied.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npages/product/@id/+config.js\npages/product/@id/pricing/+Page.js\npages/product/@id/reviews/+Page.js\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Solid.js Integration\nDESCRIPTION: Documentation explaining how to integrate Solid.js with Vike, including recommended packages, custom integration options, and example repositories.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/solid/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `vike-solid`\n\nWe recommend using `vike-solid` which integrates [Solid](https://www.solidjs.com) in a full-fledged manner.\n\n> `vike-solid`\n\nYou can also integrate Solid yourself if you want full control over the Solid integration.\n\n\n## Custom integration\n\nInstead of using `vike-solid`, you can implement your own Solid integration, for full control over the integration of Solid and Solid libraries.\n\nOfficial example:\n - [`vike-solid` source code](https://github.com/vikejs/vike-solid/tree/main/vike-solid) - Full-featured integration.\n\nCommunity examples:\n - Solid + SSR + Client Routing.\n - Solid + SPA + Server Routing.\n - Source code of [`inlang.com`](https://inlang.com/) which is built with Vike and Solid.\n - Homepage + Blog example.\n   > vite-plugin-ssr was the [previous name of Vike](https://vite-plugin-ssr.com/vike).\n\n\n## See also\n\n - Vue\n - React\n - Vue\n```\n\n----------------------------------------\n\nTITLE: Vike keepScrollPosition Example\nDESCRIPTION: Demonstrates the setting for controlling scroll position behavior during navigation in Vike applications.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-09/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n+keepScrollPosition\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Vike Auth Example\nDESCRIPTION: Commands to clone the Vike repository, navigate to the auth example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/auth/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers\nDESCRIPTION: Command to deploy the application to Cloudflare Workers production environment\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Using Path Aliases in JavaScript Imports\nDESCRIPTION: This snippet demonstrates how to replace a relative import path with a path alias in JavaScript. The alias '#root/' is used to denote the project's root directory.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/path-aliases/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Counter } from '../../../../components/Counter' // [!code --]\nimport { Counter } from '#root/components/Counter' // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Client-Side Head Tags Update in Vike.js\nDESCRIPTION: Implementation of client-side title updates during navigation when using Client Routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head-manual/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderClient.js\n// Environment: client\n\nexport { onRenderClient }\n\nasync function onRenderClient(pageContext) {\n  if (!pageContext.isHydration) {\n    // Client-side navigation — we update the page's title\n    document.title = pageContext.headProps.title\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Response Headers Format Example\nDESCRIPTION: Shows the structure of HTTP response headers array in Vike\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json5\nCODE:\n```\n[\n  ['Content-Type', 'text/html;charset=utf-8'],\n  ['Cache-Control', 'no-store, max-age=0']\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering an Example Component for Deno Integration\nDESCRIPTION: Renders an Example component referencing a GitHub repository showing Deno integration with vite-plugin-ssr (the previous name of Vike) from April 2023.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/deno/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2023.04\" repo=\"brillout/vps-deno\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Telefunc Integration in JSX\nDESCRIPTION: This snippet demonstrates the import of custom components and their usage in a JSX context to display information about Telefunc integration with Vike. It includes a community note, a custom component for Bati usage, and a repository link.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/telefunc/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UseBati, CommunityNote } from '../../components'\nimport { RepoLink } from '@brillout/docpress'\n\n<CommunityNote url=\"https://telefunc.com\" />\n\n<UseBati>Telefunc</UseBati>\n\n## Example\n\n - <RepoLink path='/examples/telefunc/' />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Community Note in JSX\nDESCRIPTION: This snippet imports necessary components and renders a CommunityNote component with specific props for Vue I18n integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-i18n/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Link, Contribution } from '@brillout/docpress'\nimport { CommunityNote } from '../../components'\n\n<CommunityNote tool=\"vue-i18n\" url=\"https://vue-i18n.intlify.dev\" hasExtension={false} />\n```\n\n----------------------------------------\n\nTITLE: Vue Hydration Warning Suppression\nDESCRIPTION: Example of using data-allow-mismatch attribute in Vue to suppress hydration mismatch warnings.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hydration-mismatch/+Page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<div data-allow-mismatch=\"text\">{{ data.toLocaleString() }}</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component for Redirection in JavaScript\nDESCRIPTION: Imports the Link component from @brillout/docpress package and creates a redirect to the /streaming path using the Link component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-as-you-fetch/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to: <Link href=\"/streaming\" />.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Vike i18n Example\nDESCRIPTION: Command sequence for setting up and running the Vike internationalization example. Includes cloning the repository, navigating to the example directory, installing dependencies, and starting the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/i18n/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/i18n/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Cloudflare Workers React Project\nDESCRIPTION: Command to start the development server using Express.js for faster development of the Cloudflare Workers React example.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react-full/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Deployment Script to package.json\nDESCRIPTION: This JSON snippet demonstrates how to add a deployment script to package.json for a custom Vike-based framework.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/build-your-own-framework/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n{\n  \"scripts\": {\n    \"dev\": \"my-framework\",\n    \"build\": \"my-framework build\",\n    \"preview\": \"my-framework preview\",\n    \"deploy\": \"my-framework deploy\" // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vike React Example in Development Mode\nDESCRIPTION: Command to start the Vike React example project in development mode using npm.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/vike-react/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route in Vike (JavaScript)\nDESCRIPTION: Shows how to define a custom route for a page using a Route Function in Vike. This allows for programmatic control over routing.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-tour/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// /pages/index/+route.js\n\n// Note how the two files share the same folder `/pages/index/`; this is how Vike\n// knows that `/pages/index/+route.js` defines the route of `/pages/index/+Page.jsx`.\n\n// Route Function\nexport default pageContext => pageContext.urlPathname === '/';\n\n// If we don't create a `+route.js` file then Vike does Filesystem Routing\n```\n\n----------------------------------------\n\nTITLE: Vike Renderer Directory Structure\nDESCRIPTION: Typical file structure for UI framework integration in Vike's renderer directory\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystem-routing/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Usual Vike file structure\n/pages/\n/components/\n/server/\n\n# Code that specifies how pages are rendered\n/renderer/+onRenderHtml.js\n/renderer/+onRenderClient.js\n/renderer/Layout.{jsx,vue}  # React/Vue/... component that wraps the `Page` component\n/renderer/Layout.css\n/renderer/Header.{jsx,vue} # Website header used for every page\n/renderer/Footer.{jsx,vue} # Website footer used for every page\n/renderer/logo.svg # Website logo (favicon and used by <Header>)\n```\n\n----------------------------------------\n\nTITLE: Installing styled-jsx with npm\nDESCRIPTION: This command installs the styled-jsx package using npm.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/styled-jsx/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install styled-jsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component\nDESCRIPTION: Displays an example implementation using Vike with PM2, including timestamp and repository reference.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/PM2/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2022.07\" repo=\"hemengke1997/vite-plugin-ssr-pm2\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Redux Documentation in JSX\nDESCRIPTION: This snippet imports various components used for creating documentation about Redux integration with Vike. It includes components for links, community notes, and examples.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redux/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RepoLink, Link, Contribution } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup with Counter Component Import\nDESCRIPTION: Imports a Counter component using Vue's script setup syntax for use within a Markdown page\nSOURCE: https://github.com/vikejs/vike/blob/main/test/vike-vue/pages/markdown/+Page.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Counter from '../../components/Counter.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Combined Configuration\nDESCRIPTION: Shows the equivalent +config.js and component file setup for comparison with the separate + files approach.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tour/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/+config.js\n\nimport { ProductPage } from './ProductPage'\n\nexport default {\n   Page: ProductPage,\n   route: '/product/@id'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/ProductPage.jsx\n\nexport { ProductPage }\n\nfunction ProductPage() {\n  return (\n    <>\n      <h1>Product Information</h1>\n      ...\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers\nDESCRIPTION: Deploy the application to Cloudflare Workers platform.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-vue/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vue-Vike Example\nDESCRIPTION: Commands to clone the Vike repository, navigate to the Vue example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/vue-full/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/vue-full/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Single Example Tests\nDESCRIPTION: Commands to run end-to-end tests for a specific example project.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/some-example/ # From the monorepo root\npnpm exec test-e2e\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Hono Integration\nDESCRIPTION: This snippet shows the changes required in the package.json file when using Hono with vike-cloudflare 0.2.x. It updates the dev and build scripts and removes Hono-specific devDependencies.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/vike-cloudflare/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n{\n  \"scripts\": {\n    \"dev\": \"vite\",// [!code --]\n    \"dev\": \"vike dev\",// [!code ++]\n    \"build\": \"vite build\"// [!code --]\n    \"build\": \"vike build\"// [!code ++]\n  },\n  \"devDependencies\": {\n    \"@hono/vite-cloudflare-pages\": \"^0.4.2\",// [!code --]\n    \"@hono/vite-dev-server\": \"^0.17.0\"// [!code --]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InjectFilterEntry Type Definition for Vike\nDESCRIPTION: Type definition for the InjectFilterEntry interface used in the injectFilter hook. Defines the structure for controlling asset injection including injection position, asset URLs, types, and entry status.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/injectFilter/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype InjectFilterEntry = {\n  inject: false | 'HTML_BEGIN' | 'HTML_END' // Whether and where to inject\n  src: string // Asset's URL\n  assetType: \"image\" | \"script\" | \"font\" | \"style\" | \"audio\" | \"video\" | \"document\" |\n             \"fetch\" | \"track\" | \"worker\" | \"embed\" | \"object\" | null\n  mediaType: string // MIME type\n  isEntry: boolean // true  ⇒ <script> or <link rel=\"stylesheet\" type=\"text/css\">\n                   // false ⇒ preload tag, e.g. <link rel=\"preload\" as=\"font\">\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Components and Extensions\nDESCRIPTION: Basic imports for Vike's documentation components and UI framework extensions\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/extension-vs-custom/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { UiFrameworkExtension } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Community Note Component\nDESCRIPTION: Imports a CommunityNote component from the components directory to display Koa-related information.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/koa/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NextUI Documentation\nDESCRIPTION: Import statement for Example and CommunityNote components used to display NextUI integration examples and community resources.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/nextui/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Markdown Content with Vue Component\nDESCRIPTION: Markdown content that demonstrates text formatting and embedding an interactive Vue component using the component tag syntax.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/vue-full/pages/markdown/+Page.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown\n\nThis page is written in _Markdown_.\n\nInteractive components can be included in the Markdown. <Counter/>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Styles\nDESCRIPTION: Import statements for required components and CSS styling\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pricing/StateOfTheArt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Seperator, TableRef, ValueTable} from './value-components';\nimport {ValueList} from './ValueList';\nimport './StateOfTheArt.css';\n```\n\n----------------------------------------\n\nTITLE: Building Vike Source\nDESCRIPTION: Command to build Vike's source code from the monorepo root.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm build # At the monorepo root\n```\n\n----------------------------------------\n\nTITLE: Previewing Cloudflare Worker Locally\nDESCRIPTION: Preview the Cloudflare Worker application locally. Requires a Cloudflare account.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-vue/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vike-Telefunc Example\nDESCRIPTION: Commands to clone the Vike repository, navigate to the Telefunc example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/telefunc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/telefunc/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Danger Warning Component in JSX for Vike Migration\nDESCRIPTION: This code snippet renders a warning message using the Danger component from @brillout/docpress, informing users about the deprecation of *.page*.js files in favor of +*.js files in the Vike framework and providing links to migration resources.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/dot-page-dot-js/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `*.page*.js` files are deprecated in favor of `+*.js` files, see\n  <ul>\n    <li><Link href=\"/migration/v1-design\" /></li>\n    <li><Link href=\"/Page\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Markdown Content with Vue Component Integration\nDESCRIPTION: Shows Markdown content with an embedded Vue component using the component tag syntax\nSOURCE: https://github.com/vikejs/vike/blob/main/test/vike-vue/pages/markdown/+Page.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown\n\nThis page is written in _Markdown_.\n\nInteractive components can be included in the Markdown. <Counter/>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Scroll Group Configuration (JavaScript)\nDESCRIPTION: Shows how to programmatically set the scroll group using a function that considers the config file location and route parameters.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/product/@id/+keepScrollPosition.js\n// Environment: client\n\nexport default (pageContext, { configDefinedAt }) => {\n  console.log(configDefinedAt) // Prints '/pages/product/@id/+keepScrollPosition.js'\n  // This is the value Vike sets by default:\n  return [configDefinedAt, pageContext.routeParams['id']]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Express.js Integration in JSX\nDESCRIPTION: This code snippet imports custom components and renders information about Express.js integration with Vike. It includes community notes, a custom component for Bati, and a link to official boilerplates.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/express/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UseBati, CommunityNote } from '../../components'\nimport { Link } from '@brillout/docpress'\n\n<CommunityNote url=\"https://expressjs.com\" />\n\n<UseBati>Express.js</UseBati>\n\nYou can also have a look at the <Link href=\"/new#without-vike-react-vue-solid\">official boilerplates</Link> as they use Express.\n```\n\n----------------------------------------\n\nTITLE: Developing Documentation\nDESCRIPTION: Commands to set up and run the documentation development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd docs/ # From the monorepo root\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Config Definition in Local File\nDESCRIPTION: Example showing incorrect placement of global configuration (baseServer) in a local config file under /pages/tags/+config.js\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/warning/global-config/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/tags/+config.js\n\n// This is a local config file: it applies only to a subset of pages.\n\nexport default {\n  // ❌ Defining a global setting in a local +config.js\n  baseServer: '/blog/'\n}\n```\n\n----------------------------------------\n\nTITLE: Using CommunityNote Component\nDESCRIPTION: Renders a CommunityNote component with a link to PM2 documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/PM2/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://pm2.keymetrics.io/\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress in JavaScript/JSX\nDESCRIPTION: Imports the Link component from the @brillout/docpress package for use in React-based documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data-tools/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component in JavaScript\nDESCRIPTION: A simple import statement for a React component called 'Example' from a relative path. This component is used to display example projects in the documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/angular/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Start the development server using Vite for faster development experience.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-vue/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Example Project\nDESCRIPTION: Command to navigate to and run an example project in development mode.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/some-example/ # or any other examples/*\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuration for prerender.keepDistServer in Vike\nDESCRIPTION: Documentation link for the prerender.keepDistServer configuration option added in Vike v0.4.227, which controls whether to preserve the server distribution during pre-rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`prerender.keepDistServer`](https://vike.dev/prerender#keepdistserver)\n```\n\n----------------------------------------\n\nTITLE: Creating Vike App with Yarn\nDESCRIPTION: Command to create a new Vike app using Yarn package manager. This scaffolds a Vike app with a custom React or Vue integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/new/core/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn create vike-core\n```\n\n----------------------------------------\n\nTITLE: Updating server integration with pageRender\nDESCRIPTION: Changes how pageRender is called in server integration points, moving from passing url as a parameter to setting it as a property on the pageContext object before calling pageRender.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n  // At your server integration point\n\n  const express = require('express')\n  const { createPageRender } = require('vite-plugin-ssr')\n\n  /* ... */\n\n  const pageRender = createPageRender(/*...*/)\n\n  /* ... */\n\n- pageRender({ url, pageContext })\n+ pageContext.url = url\n+ pageRender(pageContext)\n```\n\n----------------------------------------\n\nTITLE: Vike Crawl Configuration Command\nDESCRIPTION: Command to use tinyglobby instead of Git for file crawling in Vike\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/filesystem-routing/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Use tinyglobby instead of Git to crawl files\n$ VIKE_CRAWL=\"{git:false}\" npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Vike App with npm\nDESCRIPTION: Command to create a new Vike app using npm package manager. This scaffolds a Vike app with a custom React or Vue integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/new/core/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vike-core@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Route in JavaScript\nDESCRIPTION: Demonstrates how to define a parameterized route for a movie page using Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforePrerenderStart/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/movie/+route.js\n// Environment: Node.js\n\nexport default '/movie/@movieId'\n```\n\n----------------------------------------\n\nTITLE: Displaying CJS Deprecation Warning in JavaScript\nDESCRIPTION: This code snippet shows a warning message about the deprecation of CJS support in Vike, using a Warning component from the @brillout/docpress package.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/CJS/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Warning } from '@brillout/docpress'\n\n<Warning>\nVike will probably deprecate support for user-land CJS code soon. (Using CJS packages will still be supported for the foreseeable future.)\n\nIf you have a use case that requires the source code of your Vike app to be written in CJS then let us know and we'll consider not deprecating it. We would then create a new setting `disableCJSWarning` instead.\n</Warning>\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontmatter Data in JavaScript for Vike Markdown Page\nDESCRIPTION: This snippet exports frontmatter data as a side export in a Markdown file. It defines a title that can be used by the Vike framework for page metadata.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/playground/pages/markdown/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const frontmatter = {\n  title: 'Some title set in mdx'\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Vike Settings from vite.config.js\nDESCRIPTION: This snippet shows the old method of configuring Vike within the Vite configuration file. The Vike settings are being removed from the vike plugin options.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration/settings/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport vike from 'vike/plugin'\n\nexport default {\n  plugins: [\n    vike({\n      prerender, // [!code --]\n      redirects, // [!code --]\n      baseAssets, // [!code --]\n      baseServer, // [!code --]\n      trailingSlash, // [!code --]\n      disableUrlNormalization // [!code --]\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Documentation Components in React/JSX\nDESCRIPTION: Imports custom documentation components and uses them to render content. The CommunityNote component links to H3 documentation while UseBati wraps H3 text content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/h3/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UseBati, CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://h3.unjs.io\" />\n\n<UseBati>H3</UseBati>\n```\n\n----------------------------------------\n\nTITLE: Rendering UseBati Component for tRPC in JSX\nDESCRIPTION: This code snippet uses the UseBati component to highlight tRPC, possibly indicating its usage or importance in the context of Vike integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tRPC/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<UseBati>tRPC</UseBati>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Community Components in JSX\nDESCRIPTION: Imports community-related components and uses them to display a note with a URL link and styled content. The components appear to be part of a documentation or community page in the Vike project.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/compiled/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UseBati, CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://compiledcssinjs.com\" />\n\n<UseBati>Compiled</UseBati>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components from various modules to be used in the Vike documentation. It includes imports for Link, ImplementedBy, UiFrameworkExtension, and GlobalNote components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/bodyHtmlBegin/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { ImplementedBy, UiFrameworkExtension, GlobalNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Configuration Migration from prerender.value to prerender.enable\nDESCRIPTION: Documentation reference showing migration from prerender.value to prerender.enable, mentioned as a bug fix in Vike v0.4.226.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`prerender.value` => `prerender.enable` (vikejs/vike-cloudflare[#47](https://github.com/vikejs/vike/issues/47))\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Domain-Driven Vike Example\nDESCRIPTION: Commands to clone the Vike repository, navigate to the domain-driven file structure example, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/file-structure-domain-driven/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/file-structure-domain-driven/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Previewing Cloudflare Worker Locally\nDESCRIPTION: Command to preview the Cloudflare Worker locally. Note that this requires a Cloudflare account.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react-full/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Using Bati Component for Firebase in Vike (JSX)\nDESCRIPTION: This code renders the UseBati component with 'Firebase' as its content, likely indicating the use of Bati in conjunction with Firebase.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/firebase/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<UseBati>Firebase</UseBati>\n```\n\n----------------------------------------\n\nTITLE: Importing React Component for MDX Usage\nDESCRIPTION: Imports a Counter component from a relative path to be used within MDX content.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/react-full/pages/markdown/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Counter } from '../../components/Counter';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Mantine Components in Vike\nDESCRIPTION: Example of importing custom components and implementing Mantine integration with Vike. Shows usage of community notes, documentation links, and project examples.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/mantine/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, UseBati, CommunityNote } from '../../components'\n\n<CommunityNote tool=\"mantine\" url=\"https://mantine.dev\" hasExtension={false} />\n\n<UseBati>Mantine</UseBati>\n\nExample of using Vike with Mantine:\n - <Example timestamp=\"2023.12\" repo=\"Kenzo-Wada/vike-mantine-template\" />\n```\n\n----------------------------------------\n\nTITLE: React Component Trace for Debugging\nDESCRIPTION: This code snippet shows a typical React component trace, which helps in identifying the location of an invalid component. It displays the component hierarchy and the file location where the error occurs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nCheck your code at +Page.tsx:26.\n    at Page\n    at div\n    at div\n    at Layout (/pages/+Layout.tsx:66:19)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Components in Vike\nDESCRIPTION: Example showing how to import custom components from a relative path and use them with JSX syntax. Includes usage of CommunityNote component with a URL prop and UseBati component with children.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hattip/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UseBati, CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://github.com/hattipjs/hattip\" />\n\n<UseBati>HatTip</UseBati>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation\nDESCRIPTION: Import statements for documentation components including Link from docpress and a custom CommunityNote component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/wsl/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: This snippet imports various components used in the documentation, including RepoLink and Link from @brillout/docpress, and custom components Example and CommunityNote.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/chakra/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RepoLink, Link } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Components for Vike Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components and assets for the Vike documentation page. It includes the Link component from '@brillout/docpress', the Vike logo SVG, and a CSS file for styling.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/press/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport vikeLogo from '../../assets/logo/vike.svg'\nimport './press.css'\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with CDN Assets\nDESCRIPTION: Shows HTML structure when assets are served from a CDN while page URLs remain at the root.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/base-url/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <link\n      href=\"https://cdn.example.org/my-website-assets/logo.svg\"\n      rel=\"icon\"\n    >\n    <link\n      href=\"https://cdn.example.org/my-website-assets/style.css\"\n      rel=\"stylesheet\"\n      type=\"text/css\"\n    >\n  </head>\n  <body>\n    <nav>\n      <a href=\"/\">Landing Page</a>\n      <a href=\"/about\">About Page</a>\n    </nav>\n    <script src=\"https://cdn.example.org/my-website-assets/script.js\" type=\"module\">\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example Vike Deprecation Warning Message\nDESCRIPTION: Shows a sample warning message that Vike displays when an API will be deprecated in the next major release. This example specifically warns about the deprecation of Vite's CLI in favor of Vike's CLI.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/versioning/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[Vike][Warning] Using Vite's CLI will be deprecated in the next major release, use\\nVike's CLI instead.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running HTML Fragments Example in Vike\nDESCRIPTION: This bash script clones the Vike repository, navigates to the HTML fragments example directory, installs dependencies, and starts the development server. It demonstrates how to set up and run the HTML fragments example in a Vike project.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/html-fragments/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/html-fragments/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Vuetify Examples in JSX\nDESCRIPTION: This code snippet imports custom components and renders a community note about Vuetify along with a list of example projects using Vike with Vuetify. It demonstrates how to structure and display information about framework integrations.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vuetify/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote tool=\"vuetify\" url=\"https://vuetifyjs.com\" hasExtension={false} />\n\nExamples of using Vike with Vuetify:\n - <Example timestamp=\"2024.03\" repo=\"IT4Change/boilerplate-frontend\" />\n - <Example timestamp=\"2022.12\" repo=\"brillout/vite-plugin-ssr-vuetify\" />\n - <Example timestamp=\"2021.11\" repo=\"jamesladd/aws-vite-ssr-vuetify\" />\n```\n\n----------------------------------------\n\nTITLE: Using RecommendationRouterLibraries Component with Vue Router Configuration\nDESCRIPTION: This snippet demonstrates the usage of the RecommendationRouterLibraries component, passing properties for Vue Router. It includes the library name, GitHub repository, and official documentation link.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-router/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RecommendationRouterLibraries libraryName=\"Vue Router\" githubRepo=\"brillout/vike-vue-router\" link=\"https://router.vuejs.org\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Hono and Vike Integration Examples\nDESCRIPTION: This code snippet displays a list of example projects integrating Hono with Vike and other technologies. Each example is rendered using the Example component with timestamp and repository information.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hono/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2024.04\" repo=\"Blankeos/hono-trpc\" /> - Hono + tRPC + Solid + Tanstack Query + Nprogress\n<Example timestamp=\"2024.04\" repo=\"ultimateshadsform/vike-vue-3-ssr\" /> - With Vue\n<Example timestamp=\"2024.03\" repo=\"phonzammi/vike-hono-example\" /> - With React\n```\n\n----------------------------------------\n\nTITLE: Exporting Page Data to Client with passToClient\nDESCRIPTION: Demonstrates how to export page props to the client side using the passToClient array in a .page.server.js file, which tells vite-plugin-ssr to serialize specific context properties.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport const passToClient = ['pageProps']\n```\n\n----------------------------------------\n\nTITLE: Component Imports in JavaScript/JSX\nDESCRIPTION: Import statements for various components and utilities used in the Vike documentation interface, including DocPress Link component and custom Bati components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/new/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { UiFrameworkExtension } from '../../components'\nimport { BatiWidget } from './BatiWidget.tsx'\nimport { BatiNote } from './BatiNote.tsx'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation in JSX\nDESCRIPTION: This snippet imports necessary components from '@brillout/docpress' and local components for use in the documentation page. It includes Link, Example, and CommunityNote components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-query/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Docpress Components\nDESCRIPTION: Imports Link, Contribution, and Construction components from the @brillout/docpress package for documentation purposes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-10/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Contribution, Construction } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirect with Link Component in React\nDESCRIPTION: A simple React component that imports the Link component from @brillout/docpress and uses it to redirect users to the common-issues page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/common-problems/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/common-issues\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note Component in JSX\nDESCRIPTION: This code renders a CommunityNote component for urql, providing information about the tool and its lack of an official extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/urql/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote tool=\"urql\" url=\"https://formidable.com/open-source/urql\" hasExtension={false} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Router Recommendation Component\nDESCRIPTION: Imports and renders a RecommendationRouterLibraries component to display React Router integration information with specified GitHub repo and documentation links.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-router/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { RecommendationRouterLibraries } from '../../components'\n\n<RecommendationRouterLibraries libraryName=\"React Router\" githubRepo=\"brillout/vike-react-router\" link=\"https://reactrouter.com\" />\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Custom Preload Example for Vike\nDESCRIPTION: This bash script clones the Vike repository, navigates to the custom preload example directory, installs dependencies, and starts the development server. It demonstrates how to set up and run the custom preloading strategy example.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/custom-preload/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/custom-preload/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Vike Components with Nitro\nDESCRIPTION: Demonstrates importing Example and CommunityNote components from a components directory and using them to display Nitro integration examples.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/nitro/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://nitro.build\" />\n\nExamples of using Vike with Nitro:\n - <Example timestamp=\"2023.09\" repo=\"ThimoDEV/turbo-nitro-vike-example\" />\n```\n\n----------------------------------------\n\nTITLE: Importing RecommendationRouterLibraries Component in JavaScript\nDESCRIPTION: This snippet imports the RecommendationRouterLibraries component from a relative path. It's likely part of a larger React or similar component-based framework project.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-router/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RecommendationRouterLibraries } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Running Vike React Example in Production Mode\nDESCRIPTION: Command to start the Vike React example project in production mode after building using npm.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/vike-react/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Rendering Deprecation Warning with JSX\nDESCRIPTION: JSX markup for displaying a warning message about deprecated multiple onBeforeRender() hooks, including links to alternative solutions\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender-multiple/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Danger>Support for executing more than one `onBeforeRender()` hook is deprecated. Use <Link href=\"/meta\" text=\"custom configs\"/>\nor the <Link href=\"/data\">`data()`</Link> hook instead. (You can still define multiple `onBeforeRender()` hooks but only\none will be executed.)</Danger>\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Page Render Function Update\nDESCRIPTION: Shows updates to the page rendering API and response handling.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n  const renderPage = createPageRenderer(/*...*/)\n  app.get('*', async (req, res, next) => {\n    const url = req.originalUrl\n-   const pageContext = { url }\n-   const result = await renderPage(pageContext)\n-   if (result.nothingRendered) return next()\n-   res.status(result.statusCode).send(result.renderResult)\n+   const pageContextInit = { url }\n+   const pageContext = await renderPage(pageContextInit)\n+   if (!pageContext.httpResponse) return next()\n+   res.status(pageContext.httpResponse.statusCode).send(pageContext.httpResponse.body)\n  })\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component in JSX\nDESCRIPTION: Imports the Example component from a relative path, used to display example implementations of Svelte integration with Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/svelte/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Navigation Example with Non-Preserved Scroll (Bash)\nDESCRIPTION: Shows URL patterns where scroll position is not preserved due to different product IDs.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Scroll *isn't* preserved when navigating between:\n/product/42/pricing\n/product/1337/pricing\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Doc Components in JSX\nDESCRIPTION: Imports Warning and Link components from the @brillout/docpress package for documentation rendering.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/importBuild-dot-js/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Warning, Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: This code snippet imports various components used in the documentation, including Link from @brillout/docpress and custom components like Example, UiFrameworkExtension, and CommunityNote.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tanstack-query/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example, UiFrameworkExtension, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect with Link Component in JavaScript\nDESCRIPTION: This code imports the Link component from @brillout/docpress and creates a redirect to the /error-tracking page. It's a simple implementation of a client-side redirection mechanism using the docpress framework.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/errors/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/error-tracking\" />.\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation in JSX\nDESCRIPTION: Imports for documentation components including Link from docpress and a custom ImplementedBy component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onAfterRenderClient/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { ImplementedBy } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Docpress Components in JSX for Vike Documentation\nDESCRIPTION: Imports and uses Link and Danger components from the Docpress library to display a warning about deprecated file naming patterns in Vike. The code demonstrates how to create an interactive documentation warning with embedded links to migration guides.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page-client/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `*.page*.js` files are deprecated in favor of `+*.js` files, see\n  <ul>\n    <li><Link href=\"/migration/v1-design\" /></li>\n    <li><Link href=\"/Page\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Rendering CommunityNote Component for Chakra UI\nDESCRIPTION: This code renders a CommunityNote component specific to Chakra UI, providing information about its React extension and official website.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/chakra/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote tool=\"chakra\" url=\"https://www.chakra-ui.com\" hasExtension=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vike Repository\nDESCRIPTION: Commands to clone the Vike repository and install dependencies using pnpm.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/ # Go to the monorepo root\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering Links and Example in JSX\nDESCRIPTION: This snippet renders links to integration documentation and an example of integrating urql without using a UI framework extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/urql/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"/integration#data-fetching\" />\n\n<Example timestamp=\"2024.10\" repo=\"brillout/vike-with-urql\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components in JSX\nDESCRIPTION: This snippet imports and uses custom React components for rendering documentation elements such as links, community notes, and examples. It demonstrates how to structure and present information about Vuex integration with Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vuex/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RepoLink, Link, Contribution } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote tool=\"vuex\" url=\"https://vuex.vuejs.org\" hasExtension={false} />\n\nTo manually integrate Vuex, see:\n- <Link href=\"/store#ssr\" doNotInferSectionTitle />\n- [Vue > SSR > Cross-Request State Pollution](https://vuejs.org/guide/scaling-up/ssr.html#cross-request-state-pollution)\n\nExamples of integrating Vuex without using <Link href=\"/vike-vue\">`vike-vue`</Link>:\n - <Example timestamp=\"2023.10\" repo=\"brillout/vike-with-vuex\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Components\nDESCRIPTION: Basic import statements for Vike documentation components including Link and UiFrameworkExtension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/why/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { UiFrameworkExtension } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirection Link to /add in JSX\nDESCRIPTION: This JSX snippet creates a redirection message informing users that the current page has been moved to a new location specified by the href property.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/add-ssr-to-vite-app/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nPage moved to <Link href=\"/add\" />.\n```\n\n----------------------------------------\n\nTITLE: Creating Vike Applications with React, Vue, or Solid.js\nDESCRIPTION: These commands use the @batijs/app creator to initialize Vike applications with different JavaScript frameworks. The user can choose between React, Vue, or Solid.js by using the appropriate flag.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/start/BatiCmd_yarn.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create @batijs/app --react\n# Or:\nyarn create @batijs/app --vue\n# Or:\nyarn create @batijs/app --solid\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Deprecation Warning in JSX\nDESCRIPTION: This code imports components from the @brillout/docpress library and renders a Danger component to display a warning about deprecated file naming patterns in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/dot-page-dot-client-dot-js/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `*.page*.js` files are deprecated in favor of `+*.js` files, see\n  <ul>\n    <li><Link href=\"/migration/v1-design\" /></li>\n    <li><Link href=\"/Page\" /></li>\n    <li><Link href=\"/client\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Installing VanJS with Vike using create-vanjs\nDESCRIPTION: Command to create a new VanJS project with Vike integration using the create-vanjs tool. This allows users to select from different Vike starter templates.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vanjs/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vanjs@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from @brillout/docpress in JSX\nDESCRIPTION: This code snippet imports the Link component from the @brillout/docpress package. The Link component is likely used for creating internal navigation links within the documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Request Headers Format Example in Vike\nDESCRIPTION: Shows the structure of normalized headers in pageContext.headers and original headers in pageContext.headersOriginal\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/headers/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n// pageContext.headers\n{\n  'accept-encoding': 'gzip, br',\n  'accept-language': 'en-US,en;q=0.9,fr;q=0.8',\n  'cache-control': 'max-age=0',\n  connection: 'Keep-Alive',\n  cookie: 'username=brillout; admin=true'\n}\n\n// pageContext.headersOriginal\n[\n  ['Accept-Encoding', 'gzip, br'],\n  ['Accept-Language', 'en-US,en;q=0.9,fr;q=0.8']\n  ['Cache-Control', 'max-age=0'],\n  ['Connection', 'Keep-Alive'],\n  ['Cookie', 'username=brillout; admin=true']\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Counter Component in JavaScript for Vike Markdown Page\nDESCRIPTION: This snippet imports the Counter component from a relative path. The component is then used within the Markdown content of the page.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/playground/pages/markdown/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Counter } from '../../components/Counter';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Community Note Component with Deno URL\nDESCRIPTION: Renders a CommunityNote component with a link to the Deno website, providing users with a reference to relevant community resources.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/deno/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://deno.land\" />\n```\n\n----------------------------------------\n\nTITLE: Identifying the Root Cause of 'Cannot read properties of undefined' Error\nDESCRIPTION: This code snippet illustrates the underlying issue causing the 'Cannot read properties of undefined' error. It shows how CJS/ESM issues can lead to undefined imports, resulting in runtime errors when accessing properties.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/broken-npm-package/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// node_modules/some-good-lib/dist/index.js\n\n// Because of CJS/ESM issues, someImport is undefined\nimport { someImport } from 'some-broken-lib'\n\n// ...\n\nfunction someFunction() {\n  // TypeError: Cannot read properties of undefined (reading 'someProp')\n  someImport.someProp\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Hono and Vike Documentation\nDESCRIPTION: This code snippet imports necessary components from external modules for use in Hono and Vike documentation. It includes imports for Link, Example, UseBati, and CommunityNote components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hono/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example, UseBati, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes in Markdown\nDESCRIPTION: This snippet shows how breaking changes are documented in the changelog. It uses a separate section to highlight changes that may require updates to existing code.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: Markdown\nCODE:\n```\n### BREAKING CHANGES\n\n* server integration point `createRender()` renamed to `createPageRender()`.\n* `render()` function (`const render = createRender(/*...*/)`) now returns an object `{ nothingRendered, renderResult, statusCode }`.\n* `_404.page.js` and `_500.page.js` deprecated and replaced with `_error.page.js`.\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note for Firebase in Vike (JSX)\nDESCRIPTION: This snippet renders a CommunityNote component for Firebase, providing a URL to the Firebase website and indicating that there is no extension available.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/firebase/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote tool=\"firebase\" url=\"https://firebase.google.com\" hasExtension={false} />\n```\n\n----------------------------------------\n\nTITLE: Default URL Normalization Output Example\nDESCRIPTION: Shows the default URL normalization behavior in Vike where duplicate slashes are removed and paths are cleaned up.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/url-normalization/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[vike] HTTP request: /some//path/\n[vike] URL normalized from /some//path/ to /some-path\n[vike] HTTP redirect /some/path 301\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component in React\nDESCRIPTION: Imports a Link component from @brillout/docpress package and uses it to create a redirect link.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/scaffold/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/new\" />.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Docpress Link Component\nDESCRIPTION: Imports the Link component from @brillout/docpress and uses it to create redirection links to new documentation pages about head tags.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/head_/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to:\n - <Link href=\"/head-tags\" />\n - <Link href=\"/Head\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for tRPC Documentation in JSX\nDESCRIPTION: This code snippet imports custom components used for structuring the tRPC integration documentation. It includes components for examples, usage instructions, and community notes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tRPC/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, UseBati, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Versioning in Markdown\nDESCRIPTION: Markdown syntax used for version headers in the changelog. This format is used to denote different release versions of the project.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.171](https://github.com/vikejs/vike/compare/v0.4.170...v0.4.171) (2024-04-20)\n```\n\n----------------------------------------\n\nTITLE: Navigation Examples with Preserved Scroll (Bash)\nDESCRIPTION: Demonstrates URL patterns where scroll position is preserved due to keepScrollPosition configuration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/keepScrollPosition/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Scroll is preserved when navigating between:\n/product/42\n/product/42/pricing\n/product/42/reviews\n\n# Scroll is preserved when navigating between:\n/product/1337\n/product/1337/pricing\n/product/1337/reviews\n```\n\n----------------------------------------\n\nTITLE: Creating Link to AWS Lambda Section in Vike Documentation\nDESCRIPTION: This snippet demonstrates the usage of the Link component to create a hyperlink to the AWS Lambda section within the Vike documentation. It uses JSX-like syntax.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/aws-lambda/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Link href=\"/aws#aws-lambda\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Links in Vike Documentation\nDESCRIPTION: Import statements for Link component from docpress and a custom CommunityNote component for documentation purposes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/nginx/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Rendering Contribution Call in JSX\nDESCRIPTION: This snippet renders a Contribution component with a message calling for examples of using Vike with vue-i18n.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-i18n/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Contribution>Contributions welcome to publish an example of using Vike with `vue-i18n`.</Contribution>\n```\n\n----------------------------------------\n\nTITLE: Using CommunityNote Component with Nginx URL\nDESCRIPTION: Example of using the CommunityNote component to reference the Nginx documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/nginx/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://nginx.org\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Route in Vike\nDESCRIPTION: Defines a static route for the admin page using a Route String.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/routing-precedence/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default '/admin'\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress\nDESCRIPTION: Imports the Link component from @brillout/docpress package and creates a redirect link to the extensions page\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-packages/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/extensions\" />.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Vike Components with PrimeReact\nDESCRIPTION: Example code showing how to import and use custom components from Vike along with PrimeReact integration. Demonstrates component imports and usage with URL references.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/primereact/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://primereact.org\" />\n\n<Example timestamp=\"2023.07\" repo=\"brillout/vps-primereact\" />\n```\n\n----------------------------------------\n\nTITLE: Monorepo Structure Example for Vike Licensing\nDESCRIPTION: Example directory structure showing how Vike's licensing applies to different parts of a monorepo. The licensing only applies to apps, not to framework or component packages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pricing/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/packages/my-own-framework/\n/packages/my-app/\n/packages/my-other-app/\n/packages/some-vike-component-wrapper/\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component for Documentation Redirection in JavaScript\nDESCRIPTION: Imports the Link component from the @brillout/docpress package for creating a hyperlink to redirect users to the pointer-imports section in the configuration documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/config-code-splitting/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component from docpress\nDESCRIPTION: Imports the Link component from @brillout/docpress package and implements a redirection to the /clientOnly route\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/dynamic-import/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/clientOnly\" />.\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note Component for tRPC in JSX\nDESCRIPTION: This code renders a CommunityNote component, linking to the tRPC official website. It provides additional resources for users interested in tRPC integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tRPC/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://trpc.io\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for PullState Integration in JavaScript\nDESCRIPTION: This snippet imports necessary components from the '@brillout/docpress' package and a custom 'CommunityNote' component. These imports are likely used to create documentation or a guide for integrating PullState with Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pullstate/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Contribution } from '@brillout/docpress'\nimport { CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components from '@brillout/docpress' and local components for use in the Vike documentation. It includes the Link component for navigation and custom components for explaining routing concepts.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/server-routing-vs-client-routing/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { DefaultRouting, UiFrameworkExtension } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Reference to +mode Feature in Vike\nDESCRIPTION: Documentation link for the +mode feature added in Vike v0.4.226, which provides a way to configure different modes for Vike applications.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[+mode](https://vike.dev/mode)\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component for Documentation\nDESCRIPTION: Imports the Link component from @brillout/docpress package and creates a reference to the configuration imports section.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/header-file/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nContent moved to <Link href=\"/config#pointer-imports\" />.\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Warning Message in Vike Documentation (JavaScript/JSX)\nDESCRIPTION: This code snippet imports the Link and Danger components from the @brillout/docpress package and renders a warning message about the renaming of the render() function to onRenderHtml(). It includes links to the migration guide and documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-hook/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `render()` has been renamed `onRenderHtml()`, see\n  <ul>\n    <li><Link href=\"/migration/v1-design#renamed-hooks\" /></li>\n    <li><Link href=\"/onRenderHtml\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Links for Vike Documentation\nDESCRIPTION: React/JSX imports for documentation components including Link from docpress and custom components Example and CommunityNote.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/ruby-on-rails/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Preact Documentation\nDESCRIPTION: Import statements for documentation components including Link and Example components used to showcase Preact integration examples.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/preact/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { Example } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Installing Vike Core with Package Managers\nDESCRIPTION: Different package manager commands for installing create-vike-core. These commands allow developers to create new Vike core projects using their preferred package manager.\nSOURCE: https://github.com/vikejs/vike/blob/main/boilerplates/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vike-core@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm create vike-core\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create vike-core\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create vike-core\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress Library in JavaScript\nDESCRIPTION: Imports the Link component from the @brillout/docpress library, which is used for creating internal navigation links in documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/content-vs-interactive/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress in JavaScript\nDESCRIPTION: This code snippet imports the Link component from the @brillout/docpress package. The Link component is likely used for creating internal navigation links within the documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/spa/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Import statement showing the required components from the documentation system for rendering the React integration guide.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, RepoLink } from '@brillout/docpress'\nimport { Example, UseBati, CustomIntegrationWarning } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component from @brillout/docpress\nDESCRIPTION: Imports the Link component from @brillout/docpress library and creates a redirect to the HTTPS server documentation section.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/https/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/server#https\" />\n```\n\n----------------------------------------\n\nTITLE: Business Model References Implementation\nDESCRIPTION: React JSX implementation of business model descriptions using TableRef components\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pricing/StateOfTheArt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n- <TableRef name=\"Open Source | Donations\">some projects, due to their very high number of users and low developing cost, can sustain solely on donations.</TableRef>\n- <TableRef name=\"Open Source | Company Backed\">a company open sourcing some of its internal tool.</TableRef>\n- <TableRef name=\"Open Source | Open Core\">the code is open source but some extensions/features are proprietary.</TableRef>\n- <TableRef name=\"Proprietary | Public Source\">proprietary but the code is publicly available to be read.</TableRef>\n- <TableRef name=\"Proprietary | Closed Source\">closed sourced, not forkable, usually expensive.</TableRef>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Link Module\nDESCRIPTION: Import statement for Example and CommunityNote components along with Link component from docpress.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/styled-components/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component from Docpress in JSX\nDESCRIPTION: Demonstrates the import and usage of the Link component from @brillout/docpress package for internal navigation references\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/page-redirection/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\n- <Link href=\"/auth#login-flow\" />.\n- <Link href=\"/data#error-handling\" />.\n- <Link href=\"/render\" />\n- <Link href=\"/redirect\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Static Host Documentation in JSX\nDESCRIPTION: This code snippet imports various components used for documenting static host deployment, specifically for GitHub Pages. It includes components for introductory content, deployment strategies, and concluding information.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/github-pages/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StaticHostDocIntro, StaticHostDocOutro, StaticHostDocStrategies } from '../../components/static-host'\nimport { RepoLink, Warning } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of the imported Link component in JSX syntax. It creates a link to the '/server' route, which is likely a page or section within the Vike project's documentation or application structure.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vike-server/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nSee <Link href=\"/server\" />.\n```\n\n----------------------------------------\n\nTITLE: Running Vike Build Commands\nDESCRIPTION: Commands for building and prerendering Vike applications, which automatically set NODE_ENV to 'production'\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/NODE_ENV/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vike build\n$ vike prerender\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX\nDESCRIPTION: This snippet imports custom components JustAMiddlewareLink and Example from a relative path. These components are likely used in the rest of the document to provide interactive elements or examples.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/aws/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { JustAMiddlewareLink } from '../../components'\nimport { Example } from '../../components'\n\n<JustAMiddlewareLink />\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component for Vike with Vue Query in JSX\nDESCRIPTION: This snippet renders an Example component referencing a GitHub repository that demonstrates the use of Vike (formerly vite-plugin-ssr) with Vue Query, including a timestamp and project details.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-query/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2022.10\" repo=\"wobsoriano/vite-plugin-ssr-vue-query\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Deprecation Warning for createPageRenderer() in JSX\nDESCRIPTION: This code snippet imports components from the @brillout/docpress library and renders a warning message about the deprecated createPageRenderer() function. It also includes a link to the new renderPage documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/createPageRenderer/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Warning, Link } from '@brillout/docpress'\n\n<Warning>`createPageRenderer()` is deprecated, see <Link href=\"/renderPage\" />.</Warning>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component for Redirect in JSX\nDESCRIPTION: Imports the Link component from @brillout/docpress library and implements a redirect to the /tanstack-query route using JSX syntax.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/react-query/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to <Link href=\"/tanstack-query\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Vike.js Documentation\nDESCRIPTION: This code snippet imports necessary components for the documentation page, including a Link component from '@brillout/docpress' and a TextType component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/settings/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { TextType } from './TextType'\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vike Render Modes Example\nDESCRIPTION: Command sequence to clone the Vike repository, navigate to the render-modes example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/render-modes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/render-modes/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from DocPress\nDESCRIPTION: Imports the Link component from the @brillout/docpress package for internal navigation\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/buy/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Firebase Integration in Vike (JSX)\nDESCRIPTION: This code snippet imports various custom components used for documenting Firebase integration with Vike. It includes components for examples, middleware links, and community notes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/firebase/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, JustAMiddlewareLink, UseBati, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components\nDESCRIPTION: Demonstrates usage of React/JSX components for documentation, including links to community resources and example implementations\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/panda-css/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://panda-css.com\" />\n\n<UseBati>PandaCSS</UseBati>\n\n<Example timestamp=\"2023.08\" repo=\"YannBirba/vps-panda-css\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Static Host Documentation Components in JavaScript\nDESCRIPTION: This code snippet imports specific components from a local file and renders them in a specific order to create a static host documentation page for Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/static-hosts/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StaticHostDocIntro, StaticHostDocOutro, StaticHostDocStrategies } from '../../components/static-host'\n\n<StaticHostDocIntro />\n\n<StaticHostDocStrategies />\n\n<StaticHostDocOutro />\n```\n\n----------------------------------------\n\nTITLE: Importing Team Components and Styles\nDESCRIPTION: Imports the required CSS styles and React components (Maintainers and Contributors) for rendering the team page\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/team/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './team.css'\nimport { Maintainers, Contributors } from './Maintainers'\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Dependencies\nDESCRIPTION: Import statements for required Vike components including Link from docpress and a CommunityNote component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hapi/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Cloudflare Workers Project\nDESCRIPTION: Clone the repository and install dependencies for the Cloudflare Workers example project.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-vue/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/cloudflare-workers-vue/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands to run unit tests and end-to-end tests for the project.\nSOURCE: https://github.com/vikejs/vike/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# At the monorepo root\n\n# Run the unit tests /**/*.spec.js\npnpm exec vitest --project unit\n# Run the end-to-end tests /**/*.test.js\npnpm exec test-e2e\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Links with Link Component in JSX\nDESCRIPTION: This code snippet creates two navigation links using the Link component. One link points to the homepage ('/') and the other to the 'why' page ('/why').\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/press/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n- <Link href=\"/\" />\n- <Link href=\"/why\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issues in Markdown\nDESCRIPTION: Markdown syntax used to reference GitHub issues in the changelog entries. This format is used to link to specific issues or pull requests.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n([#1468](https://github.com/vikejs/vike/issues/1468))\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress for Vike Documentation\nDESCRIPTION: This snippet imports the Link component from the @brillout/docpress package, which is likely used for creating internal links in the Vike documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/aws-lambda/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Using Community Note Component\nDESCRIPTION: JSX implementation of the CommunityNote component with a URL prop pointing to the Koa.js website.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/koa/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://koajs.com\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Worker\nDESCRIPTION: Command to deploy the Cloudflare Worker to the Cloudflare platform.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react-full/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vike Base URL Example\nDESCRIPTION: Commands for cloning the Vike repository, navigating to the base-url-server example, installing dependencies, and starting the application.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/base-url-server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/base-url-server/\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Documentation Components\nDESCRIPTION: Imports required components from docpress and local components directory for the documentation system.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRenderHtml/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { ImplementedBy, UiFrameworkExtension } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference\nDESCRIPTION: Simple markdown links pointing to the Vike.dev documentation website.\nSOURCE: https://github.com/vikejs/vike/blob/main/vike/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [vike.dev](https://vike.dev)\n\nDocs at [vike.dev](https://vike.dev).\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component and Creating Navigation Links in React\nDESCRIPTION: This snippet imports the Link component from @brillout/docpress and creates two Link elements pointing to new documentation pages. It's likely part of a migration or reorganization of documentation content.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pageContext-anywhere/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nContent moved to:\n - <Link href=\"/usePageContext\" />\n - <Link href=\"/passToClient\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vike React Example\nDESCRIPTION: Command to install the necessary dependencies for the Vike React example project using npm.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/vike-react/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Cloudflare Workers Project\nDESCRIPTION: Initial setup commands for cloning the repository and installing dependencies\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vikejs/vike\ncd vike/examples/cloudflare-workers-react/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: Import statements for documentation components in a Vike project, including Link from docpress and a custom UiFrameworkExtension component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/components/DefaultRouting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { UiFrameworkExtension } from '../components'\n```\n\n----------------------------------------\n\nTITLE: Previewing Cloudflare Worker Locally\nDESCRIPTION: Command to preview the Cloudflare Worker in a local environment. Requires Cloudflare account authentication.\nSOURCE: https://github.com/vikejs/vike/blob/main/examples/cloudflare-workers-react/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation in JSX\nDESCRIPTION: Imports JustAMiddlewareLink component from a relative path and Link component from @brillout/docpress for use in documentation page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/deploy/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { JustAMiddlewareLink } from '../../components'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies with pnpm\nDESCRIPTION: Command to create a new Bati project with React, Express, and Telefunc using pnpm.\nSOURCE: https://github.com/vikejs/vike/blob/main/test/universal-middleware/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm create bati --react --express --telefunc\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component in Vike\nDESCRIPTION: Imports the Link component from @brillout/docpress package and implements a page redirect.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/migration-0.4/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to: <Link href=\"/migration/0.4\" />.\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Documentation Components\nDESCRIPTION: Import statements for the UsedByList component and Link component used in the documentation page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/use-cases/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UsedByList } from '../index/sections/hero/UsedBy.tsx'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Displaying Vike Logo in JSX\nDESCRIPTION: This code snippet renders the Vike logo SVG image with a height of 48 pixels. It uses the imported vikeLogo asset.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/press/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={vikeLogo} height={48} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: Import statements for documentation components including Example and CommunityNote from local components directory and Link from docpress package.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/grommet/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component for React in Vike Documentation\nDESCRIPTION: This code imports the Link component from the @brillout/docpress package, likely used for creating hyperlinks in Vike's documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/free/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Links for Vike Project\nDESCRIPTION: This code snippet imports custom components (UseBati and CommunityNote) and a Link component from external modules. These components are likely used in the documentation or configuration of a Vike project.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/daisyui/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UseBati, CommunityNote } from '../../components'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component from Docpress\nDESCRIPTION: Imports the Link component from @brillout/docpress package and implements router links for page redirections.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-router-and-react-router/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n\nPage moved to:\n - <Link href=\"/react-router\" />\n - <Link href=\"/vue-router\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Vike Documentation Components\nDESCRIPTION: Imports documentation-related components from the @brillout/docpress package used in the Vike documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/releases/2024-09/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Contribution, Construction } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Warning Component in JSX\nDESCRIPTION: Import statement and JSX code for displaying a warning message about deprecated render() hook, using the Danger component from docpress library.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/render-client/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `render()` has been renamed `onRenderClient()`, see\n  <ul>\n    <li><Link href=\"/migration/v1-design#renamed-hooks\" /></li>\n    <li><Link href=\"/onRenderClient\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation\nDESCRIPTION: This snippet imports custom components used for structuring the documentation page, including 'Example' and 'CommunityNote'.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/socket-io/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: React Component Import Example\nDESCRIPTION: Import statements for React components and assets used in the documentation page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pricing/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Construction } from '@brillout/docpress'\nimport OpenSourcePricingIllustration from '../../pages/index/sections/reliable/open-source-pricing.svg'\nimport StateOfTheArt from './StateOfTheArt.mdx'\nimport { RecommendedAmountTable } from './RecommendedAmountTable'\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from @brillout/docpress in JavaScript\nDESCRIPTION: This code imports the Link component from the @brillout/docpress library, which is used for navigation in documentation sites.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/add-ssr-to-vite-app/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Changes in Markdown\nDESCRIPTION: This snippet shows the structure used to document version changes in the changelog. It includes the version number, date, and a list of changes categorized as bug fixes, features, or breaking changes.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: Markdown\nCODE:\n```\n# [0.1.0-beta.17](https://github.com/brillout/vite-plugin-ssr/compare/v0.1.0-beta.16...v0.1.0-beta.17) (2021-03-19)\n\n\n### Bug Fixes\n\n* remove zero-js problematic example ([69d662d](https://github.com/brillout/vite-plugin-ssr/commit/69d662dbbf1845aa90cb707cb810ebcf0b8b4cc2))\n\n\n### Features\n\n* impl pre-rendering ([2e9de2d](https://github.com/brillout/vite-plugin-ssr/commit/2e9de2d717a0dc63519a9f7e6aae1e3a9e3f9188))\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Components from Docpress in Vike Documentation\nDESCRIPTION: This code imports Link and Danger components from the @brillout/docpress library and uses them to display a warning message about deprecated file naming patterns in Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/Page-server/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, Danger } from '@brillout/docpress'\n\n<Danger>\n  `*.page*.js` files are deprecated in favor of `+*.js` files, see\n  <ul>\n    <li><Link href=\"/migration/v1-design\" /></li>\n    <li><Link href=\"/Page\" /></li>\n  </ul>\n</Danger>\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX\nDESCRIPTION: Imports Example and CommunityNote components from a relative path for use in documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/PM2/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Customizing Asset Injection with injectFilter\nDESCRIPTION: Example of using injectFilter to customize how and where asset tags are injected into the HTML. Shows how to implement custom preloading logic for specific asset types.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/preloading/+Page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n\nexport { onRenderHtml }\n\nasync function onRenderHtml(pageContext) {\n  // ...\n\n  const documentHtml = escapeInject`<!DOCTYPE html>\n    <html>\n      <body>\n        <div id=\"root\">${stream}</div>\n      </body>\n    </html>`\n\n  const injectFilter = (assets) => {\n    assets.forEach(asset => {\n      // Preload images\n      if (asset.assetType === 'image') {\n        asset.inject = 'HTML_BEGIN'\n      }\n    })\n  }\n\n  return { documentHtml, injectFilter }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note Component\nDESCRIPTION: JSX component usage for displaying a community note with a link to Ruby on Rails documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/ruby-on-rails/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://rubyonrails.org\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering MUI Integration Examples in JSX\nDESCRIPTION: This code snippet imports custom components and renders a community note along with examples of Vike and MUI integration. It includes links to example repositories with timestamps.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/mui/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote tool=\"mui\" url=\"https://mui.com\" hasExtension={false} />\n\nExamples of using Vike with MUI:\n - <Example timestamp=\"2024.03\" repo=\"brillout/vike-with-mui\" />\n - <Example timestamp=\"2023.12\" repo=\"mikew/vike-example-mui-emotion-cache\" />\n - <Example timestamp=\"2023.08\" repo=\"brillout/vps-mui\" />\n   > vite-plugin-ssr was the [previous name of Vike](https://vite-plugin-ssr.com/vike).\n```\n\n----------------------------------------\n\nTITLE: Migrating render and addPageContext function signatures in page.server.js\nDESCRIPTION: Updates the function signatures for render and addPageContext handlers in server-side page files to destructure Page from pageContext parameter rather than receiving it as a separate parameter.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n  // *.page.server.js\n\n  export { render }\n- function render({ Page, pageContext }) {\n+ function render(pageContext) {\n+   const { Page } = pageContext\n    /* ... */\n  }\n\n  export { addPageContext }\n- function addPageContext({ Page, pageContext }) {\n+ function addPageContext(pageContext) {\n+   const { Page } = pageContext\n    /* ... */\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactoring useClientRouter render function in page.client.js\nDESCRIPTION: Updates the render function passed to useClientRouter to receive pageContext as a single parameter and destructure Page and isHydration from it, rather than receiving them as separate parameters.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n  // *.page.client.js\n\n  import { useClientRouter } from 'vite-plugin-ssr/client/router'\n\n  useClientRouter({\n-   render({ Page, pageContext, isHydration }) {\n+   render(pageContext) {\n+     const { Page, isHydration } = pageContext\n      /* ... */\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component for Vike and Firebase Integration (JSX)\nDESCRIPTION: This code renders an Example component with a timestamp and repository information, likely showcasing an example of Vike and Firebase integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/firebase/+Page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example timestamp=\"2023.11\" repo=\"gonesurfing/vike-ssr\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note and UseBati Components\nDESCRIPTION: This code snippet renders the CommunityNote component with a URL to the Hono website and the UseBati component with 'Hono' as its content. These components likely provide additional context or styling for the documentation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/hono/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote url=\"https://hono.dev\" />\n\n<UseBati>Hono</UseBati>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Vike-Tauri Example in JavaScript\nDESCRIPTION: This snippet imports custom components and renders an example of Vike integration with Tauri. It also includes a community note with a link to Tauri's website.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/tauri/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\n\n<CommunityNote url=\"https://tauri.app\" />\n\nExample of using Vike with Tauri:\n - <Example timestamp=\"2023.04\" repo=\"brillout/lume\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vike Documentation in JSX\nDESCRIPTION: This code snippet imports custom components used for building the documentation page. It includes components for repository links, internal links, examples, and community notes.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pinia/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RepoLink, Link } from '@brillout/docpress'\nimport { Example, CommunityNote } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note Component in JSX\nDESCRIPTION: This code renders a CommunityNote component, likely used to provide information about Pinia integration. It specifies the tool name, URL, and indicates that it has a Vue extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/pinia/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote tool=\"pinia\" url=\"https://pinia.vuejs.org\" hasExtension=\"vue\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Documentation Component in JSX\nDESCRIPTION: React component that wraps children content with an advanced usage warning. Uses the @brillout/docpress Advanced component and includes an emoji warning indicator with custom font styling.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/components/Advanced.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Advanced } from '@brillout/docpress'\n\n<Advanced>\n  { props.children }\n  <span style={{ fontFamily: 'emoji' }}>⚠️</span>\n  We recommend using such advanced capability, which can be complex to use, only if you have a clear reason why simpler alternatives aren't an option for you.\n</Advanced>\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issues in Markdown\nDESCRIPTION: This snippet demonstrates how to reference GitHub issues in the changelog entries. It uses the #issue_number format to create links to the relevant issues.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n* auto apply @brillout/vite-fix-2390 ([f847a32](https://github.com/brillout/vite-plugin-ssr/commit/f847a32a2282ba9ab7dcbfafcd470a039f01893b)), closes [#5](https://github.com/brillout/vite-plugin-ssr/issues/5)\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Note for Redux in JSX\nDESCRIPTION: This code renders a CommunityNote component specific to Redux, providing a link to the official Redux documentation and indicating that it doesn't have an extension.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/redux/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote tool=\"redux\" url=\"https://redux.js.org\" hasExtension={false} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Static Hosting Documentation Components in JSX\nDESCRIPTION: This snippet imports and renders reusable components for static hosting documentation. It includes an intro component with a customized link, a note about SSR deployment, strategies component, and an outro component.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/netlify/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StaticHostDocIntro, StaticHostDocOutro, StaticHostDocStrategies } from '../../components/static-host'\nimport { Link } from '@brillout/docpress'\n\n<StaticHostDocIntro\n  staticHostLink={<>, such as <a href=\"https://www.netlify.com/\">Netlify</a></>}\n/>\n\n> For deploying SSR, see <Link href=\"/netlify-functions\" />.\n\n<StaticHostDocStrategies />\n\n<StaticHostDocOutro />\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Components in JSX\nDESCRIPTION: Imports Danger and Link components from the @brillout/docpress package for displaying warning messages\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/onBeforeRender-multiple/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Danger, Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Streaming Setup in Vike\nDESCRIPTION: Basic implementation of HTML streaming in the onRenderHtml hook using a UI framework's streaming renderer.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/streaming/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /renderer/+onRenderHtml.js\n\nexport { onRenderHtml }\n\nimport { escapeInject } from 'vike/server'\nimport { renderToStream } from 'some-ui-framework' // React, Vue, ...\n\nasync function onRenderHtml(pageContext) {\n  const { Page } = pageContext\n\n  const stream = renderToStream(Page)\n\n  return escapeInject`<!DOCTYPE html>\n    <html>\n      <body>\n        <div id=\"root\">${stream}</div>\n      </body>\n    </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Components for Page Redirection in JSX\nDESCRIPTION: Creates a list of Link components that redirect users to new documentation locations. Points to the data fetching sections at tools and integration pages.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/data-tools/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n- <Link href=\"/tools#data-fetching\"/>\n- <Link href=\"/integration#data-fetching\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering CommunityNote Component for Vue Query in JSX\nDESCRIPTION: This code renders a CommunityNote component with properties specific to Vue Query, including the URL to the documentation and indicating Vue extension support.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/vue-query/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CommunityNote tool=\"query\" url=\"https://tanstack.com/query/latest/docs/framework/vue/overview\" hasExtension=\"vue\" />\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Hook Rename addPageContext to onBeforeRender\nDESCRIPTION: Shows the deprecation of addPageContext hook and its replacement with onBeforeRender.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n- export function addPageContext(pageContext) {\n+ export function onBeforeRender(pageContext) {\n    const pageProps = /*...*/\n-   return { pageProps }\n+   return {\n+     pageContext: {\n+       pageProps\n+     }\n+   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Vike Documentation Components\nDESCRIPTION: Renders the UsedByList component to display organizations using Vike.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/use-cases/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<UsedByList />\n```\n\n----------------------------------------\n\nTITLE: React/JSX Layout Components\nDESCRIPTION: JSX components for page layout including spacing divs and custom Bati components.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/new/+Page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{height: 30}}></div>\n\n<BatiWidget />\n\n<BatiNote />\n\n<div style={{height: 10}}></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Link in JSX\nDESCRIPTION: This snippet imports custom components (Example and CommunityNote) and the Link component from docpress. It demonstrates how to set up necessary imports for a documentation page.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/naive-ui/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Example, CommunityNote } from '../../components'\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Rendering JustAMiddlewareLink Component in Vike (JSX)\nDESCRIPTION: This snippet renders the JustAMiddlewareLink component, which is likely used to provide information about middleware in the context of Firebase integration.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/firebase/+Page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<JustAMiddlewareLink />\n```\n\n----------------------------------------\n\nTITLE: JavaScript Export Configuration\nDESCRIPTION: Change allowing config files to export using named exports instead of only default exports.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// New allowed syntax\nexport { config }\n\n// Previous required syntax\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress\nDESCRIPTION: Demonstrates the import of the Link component from the @brillout/docpress package for documentation navigation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/components/GlobalNote.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from DocPress\nDESCRIPTION: Imports the Link component from the @brillout/docpress package for documentation navigation.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/components/OnlyHtmlNote.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Project Info in JavaScript\nDESCRIPTION: This code snippet imports the Link component from the @brillout/docpress package and project information from a local utility file. These imports are likely used to create documentation or a support page for the Vike project.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/consulting/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { projectInfo } from '../../utils'\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Docpress in JavaScript\nDESCRIPTION: Imports the Link component from the @brillout/docpress package. This component is likely used for internal navigation within the documentation site.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/dot-env-files/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commit in Markdown\nDESCRIPTION: Markdown syntax used to reference Git commits in the changelog entries. This format is used consistently throughout the file to link to specific commits.\nSOURCE: https://github.com/vikejs/vike/blob/main/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n([90101cd](https://github.com/vikejs/vike/commit/90101cd1c5c5635ca9049ee3fc50386f9d0fa163))\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from @brillout/docpress in JavaScript\nDESCRIPTION: This code snippet imports the Link component from the @brillout/docpress package. It's followed by a comment indicating that this usage is deprecated in favor of new render and redirect links.\nSOURCE: https://github.com/vikejs/vike/blob/main/docs/pages/RenderErrorPage/+Page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```"
  }
]