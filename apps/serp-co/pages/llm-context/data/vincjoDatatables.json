[
  {
    "owner": "vincjo",
    "repo": "datatables",
    "content": "TITLE: Setting Table Rows with @vincjo/datatables in Svelte TypeScript\nDESCRIPTION: This Svelte component snippet demonstrates how to use the @vincjo/datatables library to set and update table rows. It uses TypeScript for type definitions and Svelte's $effect for reactivity. The table rows are updated whenever the data prop changes.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.setRows.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import type { TableHandler } from '@vincjo/datatables'\n\n    let { table, data }: { \n        table: TableHandler, \n        data: any[] \n    } = $props()\n\n    $effect(() => { data; table.setRows(data) })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using TableHandler in Svelte Component\nDESCRIPTION: Sample Svelte component demonstrating how to use the TableHandler class from @vincjo/datatables. It initializes a table with data and renders rows in a basic HTML table structure.\nSOURCE: https://github.com/vincjo/datatables/blob/main/README.md#2025-04-08_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { TableHandler } from '@vincjo/datatables'\n    import { someData } from './data'\n\n    const table = new TableHandler(someData, { rowsPerPage: 50 })\n</script>\n\n<table>\n    <thead>\n        <tr>\n            <th>First name</th>\n            <th>Last name</th>\n        </tr>\n    </thead>\n    <tbody>\n        {#each table.rows as row}\n            <tr>\n                <td>{row.first_name}</td>\n                <td>{row.last_name}</td>\n            </tr>\n        {/each}\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Clearing Datatables Selection in Svelte\nDESCRIPTION: This code snippet shows how to create a button that clears the current selection in a Datatables instance. It uses the clearSelection() method on the table object to remove all selected items when the button is clicked.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.clearSelection.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => table.clearSelection()}>\n    Clear selection\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select All Checkbox in Svelte Datatable\nDESCRIPTION: This snippet demonstrates how to create a checkbox that, when clicked, selects all items in a datatable. It uses Svelte's event handling to call the table.selectAll() method on click.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.selectAll.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<input \n    type=\"checkbox\" \n    onclick={() => table.selectAll()}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection in Svelte Datatable\nDESCRIPTION: This code snippet shows how to create a table row with a selection checkbox in Svelte. It demonstrates conditional styling for selected rows, checkbox state management, and handling the selection event. The snippet uses a 'table' object to manage the selection state and trigger selection actions.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.selected.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<tr class={{ active: table.selected.includes(row.id) }}>\n    <td>\n        <input type=\"checkbox\" \n            checked={table.selected.includes(row.id)}\n            onclick={() => table.select(row.id)}\n        >\n    </td>\n    <td>{row.first_name}</td>\n    <td>{row.last_name}</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sort for Nested Properties in TypeScript\nDESCRIPTION: This snippet shows how to create a custom sort for nested properties in a datatable using TypeScript. It demonstrates the usage of a callback function to access nested properties for sorting.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createSort.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sort = table.createSort((row) => row.nested.prop)\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection Checkbox\nDESCRIPTION: Shows how to implement a checkbox in each table row that triggers the selection mechanism. Uses the table.select() method with the row's ID to toggle selection state.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.select.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<input type=\"checkbox\" onclick={() => table.select(row.id)>\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Rows in Svelte\nDESCRIPTION: Shows how to iterate over table rows and display data in a tabular format using Svelte's each block directive. Renders first name, last name and address columns.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rows.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<tbody>\n    {#each table.rows as row}\n        <tr>\n            <td>{row.first_name}</td> \n            <td>{row.last_name}</td>\n            <td>{row.address}</td>\n        </tr>\n    {/each}\n</tbody>\n```\n\n----------------------------------------\n\nTITLE: Binding Search Input in Svelte Component\nDESCRIPTION: Implements a text input field that binds to the search value and triggers the search filter on input changes.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createSearch.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<input type=\"text\" bind:value={search.value} oninput={() => search.set()}>\n```\n\n----------------------------------------\n\nTITLE: Clearing Search Filter in Svelte Datatables\nDESCRIPTION: This snippet shows how to create a button that clears the search filter in a Datatables implementation. It uses the clearSearch() method on the table object to reset the search.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.clearSearch.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => table.clearSearch()>\n    Reset search\n</button>\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching Implementation with Datatables in TypeScript\nDESCRIPTION: Demonstrates a practical implementation of the load method using async/await to fetch data from an API. The function uses rowsPerPage and offset parameters from the state object to build a paginated API request.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/methods.load.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.load(async ({ rowsPerPage, offset }: State) =>  {\n    const response = await fetch(`https://myapi.com?limit=${rowsPerPage}&offset=${offset}`)\n    return response.json()\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Table View with Frozen Columns in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a table view with frozen columns. It defines an array of column objects, specifying which columns should be frozen using the 'isFrozen' property.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createView.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntable.createView([\n    { index: 0, isFrozen: true },\n    { index: 1, isFrozen: true },\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Navigation Buttons in Svelte with Datatables\nDESCRIPTION: This Svelte code snippet demonstrates how to create navigation buttons for a table using Datatables. It includes buttons for first, previous, next, and last pages, as well as a dynamic list of page numbers with ellipsis.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.setPage.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => table.setPage(1)>\n    First page\n</button>\n\n<button onclick={() => table.setPage('previous')>\n    Previous\n</button>\n\n{#each table.pagesWithEllipsis as page}\n    <button onclick={() => table.setPage(page)>\n        {page ?? '...'}\n    </button>\n{/each}\n\n<button onclick={() => table.setPage('next')>\n    Next\n</button>\n\n<button onclick={() => table.setPage('last')>\n    Last page\n</button>\n```\n\n----------------------------------------\n\nTITLE: Mapping Table State to API Query Parameters\nDESCRIPTION: This example shows how the table state translates to URL query parameters when interfacing with an API. It demonstrates the mapping between Datatables state properties and standard API query parameters for pagination, searching, filtering, and sorting.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/types.State.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.mysite.com/users?\n    limit=10            # rows per page\n    &offset=20          # offset (20 = page number 3)\n    &q=michel           # full text search\n    &city=limoge        # column filter: where \"city\" = 'limoge'\n    &sort=age\n    &order=desc         # order by \"age\" descending\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Selection for Datatables in Svelte\nDESCRIPTION: This snippet demonstrates how to create a checkbox input that controls the selection of all items in a Datatables component. It uses the 'checked' attribute bound to the table's 'isAllSelected' property and an onclick event handler to trigger the 'selectAll' function.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.isAllSelected.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<input\n    type=\"checkbox\"\n    checked={table.isAllSelected}\n    onclick={() => table.selectAll()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Clearing DataTable Filters in Svelte\nDESCRIPTION: Shows how to implement a button that clears all column filters using the table.clearFilters() method. This creates a simple clear filters button that removes all active column filtering when clicked.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.clearFilters.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => table.clearFilters()}>\n    Clear filters\n</button>\n```\n\n----------------------------------------\n\nTITLE: Applying Column Calculations in DataTables with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the createCalculation method to apply various mathematical operations on a specific column named 'price'. It shows how to calculate distinct values, average, sum, median, and minimum/maximum bounds.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.createCalculation.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.createCalculation('price').distinct() // distinct values\ntable.createCalculation('price').avg()      // average\ntable.createCalculation('price').sum()      // sum\ntable.createCalculation('price').median()   // median\ntable.createCalculation('price').bound()    // bounds [min, max]\n```\n\n----------------------------------------\n\nTITLE: Binding Filter to Input in Svelte\nDESCRIPTION: Shows how to bind a filter to an input element in Svelte. The filter is applied when the input event is triggered.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createFilter.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<input type=\"text\" bind:value={filter.value} oninput={() => filter.set()}>\n```\n\n----------------------------------------\n\nTITLE: Invalidating DataTable Data in TypeScript\nDESCRIPTION: Demonstrates how to manually trigger a table data refresh using the invalidate() method. This method executes the load function and updates the table's data, though it should be used cautiously as the table handler typically handles invalidation automatically.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/methods.invalidate.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.invalidate()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table State in DataTables\nDESCRIPTION: Demonstrates how to get the current state of a table using the getState() method. The returned object contains pagination details, search term, sorting configuration, filters, and a method to set total rows.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/methods.getState.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.getState()\n\n// returns:\n{\n    currentPage: 3,\n    rowsPerPage: 10,\n    offset: 20,\n    search: 'michel',\n    sort: { field: 'age', direction: 'desc' },\n    filters: [ { field: 'city', value: 'limoge' } ],\n    setTotalRows: (value: number) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Buttons in Svelte for DataTables\nDESCRIPTION: This snippet demonstrates how to create buttons in Svelte that set filter criteria for a DataTable. It includes dynamic class binding based on the current filter state.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.createAdvancedFilter.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<button \n    onclick={() => filter.set('high')}\n    class={{ active: filter.criteria.includes('high') }}\n>High priority</button>\n\n<button\n    onclick={() => filter.set('low')}\n    class={{ active: filter.criteria.includes('low') }}\n>Low priority</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Search Filter in TypeScript\nDESCRIPTION: Creates a new search instance for the data table that can be used for filtering records.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createSearch.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst search = table.createSearch()\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of Lazy Loading with Datatables in TypeScript\nDESCRIPTION: Shows the basic usage of the load method which provides access to the table state. This method accepts a function that takes a State parameter and returns a Promise containing an array of rows.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/methods.load.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.load((state: State) => myLoadFunction(state): Promise<Row[]> )\n```\n\n----------------------------------------\n\nTITLE: Initializing Table View with Column Visibility in TypeScript\nDESCRIPTION: This snippet shows how to create a table view with configurable column visibility. It defines an array of column objects, each with properties for index, name, and visibility status.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createView.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst view = table.createView([\n    { index: 0, name: 'ID', isVisible: false },\n    { index: 1, name: 'First name' },\n    { index: 2, name: 'Last name' },\n    { index: 3, name: 'Email' },\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sort in Svelte Table Header\nDESCRIPTION: This snippet demonstrates how to implement the custom sort functionality in a Svelte table header. It shows how to use the sort object to set active states and direction indicators.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createSort.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<th class={{ active: sort.isActive }}>\n    <button onclick={() => sort.set()}>\n        Last name\n        <span class={[\n            { asc: sort.direction === 'asc' }, \n            { desc: sort.direction === 'desc' }\n        ]}>\n        </span>\n    </button>\n</th>\n```\n\n----------------------------------------\n\nTITLE: Calculating Median in Datatables (TypeScript)\nDESCRIPTION: Demonstrates how to calculate the median for a specific field using the createCalculation method in Datatables.\nSOURCE: https://github.com/vincjo/datatables/blob/main/CHANGELOG.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst median = table.createCalculation('field').median()\n```\n\n----------------------------------------\n\nTITLE: Filtering Nested Arrays in Datatables (TypeScript)\nDESCRIPTION: Shows how to use the experimental 'queries' feature to filter data inside nested arrays of objects. This example checks if 'user.login_count' is greater than 1000 in users within groups.\nSOURCE: https://github.com/vincjo/datatables/blob/main/CHANGELOG.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.createQuery('login_count')\n    .from(['groups', 'users'])\n    .where(check.isGreaterThan)\n    .set(1000)\n\n// will check if \"user.login_count\" is greater than 1000 in users in groups\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sort for a Single Column in TypeScript\nDESCRIPTION: This snippet shows how to create a custom sort for a single column in a datatable using TypeScript. It demonstrates the basic usage of the createSort method.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createSort.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sort = table.createSort('last_name')\n```\n\n----------------------------------------\n\nTITLE: Rendering Column Visibility Toggle Buttons in Svelte\nDESCRIPTION: This Svelte component iterates over the columns in the view and creates toggle buttons for each. It uses the 'isVisible' property to set the active class and provides a toggle function for each column.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createView.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#each view.columns as column}\n    <button type=\"button\" \n        class={{ active: column.isVisible }}\n        onclick={() => column.toggle()}\n    >\n        {column.name}\n    </button>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Spinner with isLoading State in Svelte Datatable\nDESCRIPTION: This code snippet shows how to use the isLoading property of a table object in a Svelte Datatable component. It demonstrates the conditional rendering of a spinner element based on the loading state, providing visual feedback during data loading or refresh operations.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/properties.isLoading.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Datatable {table}>\n    <div class=\"spinner\" class={{ active: table.isLoading }}></div>\n    <table>\n        [...]\n    </table>\n</Datatable>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Column Filter in TypeScript\nDESCRIPTION: Creates a filter for a specific column identified by its key name. This example filters by the 'last_name' column.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createFilter.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = table.createFilter('last_name')\n```\n\n----------------------------------------\n\nTITLE: Setting Rows Per Page in DataTables using TypeScript\nDESCRIPTION: This snippet shows how to use the setRowsPerPage method to define the number of rows displayed on each page of a DataTable. The method takes a single numeric argument representing the desired number of rows per page.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.setRowsPerPage.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.setRowsPerPage(20)\n```\n\n----------------------------------------\n\nTITLE: Creating Filter for Nested Properties in TypeScript\nDESCRIPTION: Demonstrates how to create a filter for nested object properties using a callback function. This is useful when you need to filter based on deep properties in your data structure.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createFilter.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = table.createFilter((row) => row.nested.prop)\n```\n\n----------------------------------------\n\nTITLE: Data Structure Definition in TypeScript\nDESCRIPTION: Demonstrates the expected data structure for table rows with ID, first name and last name properties. Shows array format with sample data.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rows.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.rows = [\n    { id: 1, frist_name: 'Jane', last_name: 'Doe' },\n    ...\n    { id: 150, first_name: 'John', last_name: 'Doe' }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Rows in DataTables with TypeScript\nDESCRIPTION: This snippet shows how to use the 'getSelectedRows()' method to retrieve the complete row objects for selected rows in a DataTable. It returns a list of row objects corresponding to the selected identifiers.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.getSelectedRows.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.getSelectedRows()\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Field Scope in TypeScript\nDESCRIPTION: Demonstrates how to limit the search functionality to specific fields by passing an array of field names to the search creator.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createSearch.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst search = table.createSearch(['last_name', 'first_name'])\n// Search will only apply on 'last_name' and 'first_name' fields\n```\n\n----------------------------------------\n\nTITLE: Creating a Record Filter on Distinct Values in Svelte\nDESCRIPTION: This snippet demonstrates how to create a filter function on a sample of objects, specifically a list of distinct values with counts. It shows how to bind the filter to an input field and display the filtered records in a list.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.createRecordFilter.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    const distinctValues = [\n        {value: 'High', count: 200},\n        {value: 'Low', count: 15},\n        {value: 'Medium', count: 54},\n    ]\n    const filter = table.createRecordFilter(distinctValues)\n</script>\n\n<input type=\"text\" bind:value={filter.value}>\n<ul>\n    {#each filter.records as record}\n        <li>{record.value} - {record.count}</li>\n    {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing Advanced Filter in TypeScript for DataTables\nDESCRIPTION: This snippet shows how to create an advanced filter for a specific column in a DataTable. It uses the 'createAdvancedFilter' method, specifying the column name and comparison function.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.createAdvancedFilter.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = table.createAdvancedFilter('priority', check.isEqualTo)\n```\n\n----------------------------------------\n\nTITLE: Downloading CSV File in Svelte\nDESCRIPTION: This Svelte snippet demonstrates how to create a button that triggers the download of the CSV file when clicked. The 'csv.download()' method is called with a custom filename argument.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.createCSV.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => csv.download('filename.csv')}>Download as CSV</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTables i18n Text Values in TypeScript\nDESCRIPTION: Default internationalization configuration for DataTables. This object defines text values used throughout the UI components including search placeholder, pagination controls, and status messages. The rowCount property supports variables for dynamic content.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.i18n.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.i18n = {\n    search: 'Search...',\n    show: 'Show', \n    entries: 'lines',\n    filter: 'Filter',\n    rowCount: 'Showing {start} to {end} of {total} entries',\n    noRows: 'No entries found',\n    previous: 'Previous', \n    next: 'Next'\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Field Type Options for DataTables in TypeScript\nDESCRIPTION: This snippet shows three different ways to define a field in DataTables: using a direct column name, a function that concatenates two fields, and accessing a nested property. It's important to note that for server-side pagination, only object keys can be used.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/types.Field.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// keyof Row: \n'first_name'\n\n// expression:\n(row) => row.first_name + row.last_name\n\n// nested prop\n(row) => row.user.login_count.value\n```\n\n----------------------------------------\n\nTITLE: Resetting ScrollTop on Table Change in Svelte with TypeScript\nDESCRIPTION: This snippet demonstrates how to reset the scroll position of a container element back to the top whenever the table data changes. It binds a reference to an HTML element and uses the table's 'change' event to set the scrollTop property to 0, ensuring the user always sees the beginning of the table after data updates.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.on.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    let element: HTMLElement\n    table.on('change', () => element.scrollTop = 0)\n</script>\n\n<div bind:this={element} style:height=\"600px\">\n    {#each table.rows as row}\n        [...]\n    {/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating Table Pages with TypeScript in Datatables\nDESCRIPTION: This snippet shows how to use the setPage method to navigate through table pages in TypeScript. It demonstrates setting specific page numbers and using keywords for relative navigation.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.setPage.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.setPage(5)            // Go to any page number\ntable.setPage('previous')   // Go to the previous page\ntable.setPage('next')       // Go to the next page\ntable.setPage('last')       // Go to the last page\n```\n\n----------------------------------------\n\nTITLE: Initializing DataTable with Selection Key\nDESCRIPTION: Demonstrates how to initialize a TableHandler instance with a unique selection key parameter. The selectBy parameter defines which field will be used as the unique identifier for row selection.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.select.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new TableHandler(data, { selectBy: 'id' })\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination and Selection Info\nDESCRIPTION: Demonstrates how to render pagination information and selection count in Svelte template syntax\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rowCount.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Pagination -->\n<p>\n    Showing <b>{start}</b> \n    to <b>{end}</b> \n    of <b>{total}</b> entries\n</p>\n\n<!-- Selection -->\n<p>{selected} of {total} row(s) selected</p>\n```\n\n----------------------------------------\n\nTITLE: Mapping Data Table Filters to String Format\nDESCRIPTION: Maps the table's filter objects into human-readable strings by combining the filter key, comparator name, and value. Each filter contains a key field, comparator object with name property, and a value field.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/properties.filters.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = table.filters.map(({ key, comparator, value }) => `${key} ${comparator.name} ${value}`)\n```\n\n----------------------------------------\n\nTITLE: Setting DataTable Pagination Size in TypeScript\nDESCRIPTION: Sets the number of rows to display per page in a DataTable instance. Takes a numeric value as the parameter to specify the page size.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.setRowsPerPage.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.setRowsPerPage(20)\n```\n\n----------------------------------------\n\nTITLE: Accessing DataTable Row Count Variables\nDESCRIPTION: Shows how to destructure row count properties from a table instance using TypeScript and Svelte's derived state\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rowCount.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { start, end, total, selected } = $derived(table.rowCount)\n```\n\n----------------------------------------\n\nTITLE: Custom Filter with Check Parameter in Svelte\nDESCRIPTION: Shows how to create a filter with a custom check function. This example uses the built-in 'isEqualTo' check function to filter rows where 'login_count' exactly matches the filter value. Only works with client-side data processing.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.createFilter.md#2025-04-08_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { check } from '@vincjo/datatables'\n\n    const filter = table.createFilter('login_count', check.isEqualTo)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Object from Datatables in TypeScript\nDESCRIPTION: This snippet shows how to create a CSV object from a Datatables instance. The 'table' object is assumed to be a Datatables instance, and the 'createCSV()' method generates the CSV data.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.createCSV.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst csv = table.createCSV()\n```\n\n----------------------------------------\n\nTITLE: Defining Column Interface in TypeScript for DataTables\nDESCRIPTION: This code snippet defines a TypeScript interface for columns in a DataTable. It specifies properties such as name, index, frozen status, visibility, and width, which are used to control the rendering and behavior of table columns.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/types.ColumnView.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Column {\n    name: string\n    index: number\n    frozen?: boolean\n    visible?: boolean\n    width?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Rows Per Page in Svelte Template\nDESCRIPTION: This snippet shows how to display the current number of rows per page in a Svelte template. It uses the 'table.rowsPerPage' property to dynamically show the value.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rowsPerPage.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<p>Show {table.rowsPerPage} entries</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Rows Per Page in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the number of rows per page for the DataTable using TypeScript. It assigns a value of 10 to the 'table.rowsPerPage' property.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rowsPerPage.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.rowsPerPage = 10\n```\n\n----------------------------------------\n\nTITLE: Defining Table State Structure in TypeScript\nDESCRIPTION: This snippet shows the structure of a table state object that tracks pagination, search, sorting, and filtering parameters. It demonstrates how the Datatables library maintains state with properties for current page, rows per page, offset, search terms, sorting configuration, and active filters.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/types.State.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstate = {\n    currentPage: 3,\n    rowsPerPage: 10,\n    offset: 20,\n    search: 'michel',\n    sort: { field: 'age', direction: 'desc' }\n    filters: [ { field: 'city', value: 'limoge' } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @vincjo/datatables Package\nDESCRIPTION: Command to install the @vincjo/datatables package as a development dependency using npm.\nSOURCE: https://github.com/vincjo/datatables/blob/main/README.md#2025-04-08_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nnpm i -D @vincjo/datatables\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Criterion for Advanced Filtering in TypeScript\nDESCRIPTION: Creates a criterion object with a value and a check function. This criterion uses the isEqualTo check function from the @vincjo/datatables library to filter records that exactly match 'High priority'.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/types.Criterion.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { check } from '@vincjo/datatables'\n\nconst criterion = { value: 'High priority', check: check.isEqualTo }\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Object for DataTables in TypeScript\nDESCRIPTION: This code snippet defines an i18n (internationalization) object containing localized strings for various UI elements in a DataTables implementation. It includes translations for search placeholder, show entries text, filter label, row count display, no results message, and pagination controls.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/types.Internationalization.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = {\n    search: 'Search...',\n    show: 'Show', \n    entries: 'lines',\n    filter: 'Filter',\n    rowCount: 'Showing {start} to {end} of {total} entries',\n    noRows: 'No entries found',\n    previous: 'Previous', \n    next: 'Next'\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Filter Count in Svelte Template\nDESCRIPTION: Shows how to display the current number of active filters in a Svelte component using the table.filterCount property.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.filterCount.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<h1>Filters: {table.filterCount}</h1>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntable.filterCount = 2\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter Object in TypeScript for DataTables\nDESCRIPTION: This example demonstrates how to create a basic filter object for datatables. The filter specifies a field name to filter on and the value to filter by.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/types.Filter.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfilter = { \n    field: 'name', \n    value: 'john' \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting Parameters in TypeScript for DataTables\nDESCRIPTION: This example shows how to define a sort configuration object specifying both the field to sort by ('name') and the direction ('asc'). This structure is used to apply sorting to data within the DataTables project.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/server/types.Sort.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsort = {\n    field: 'name',\n    direction: 'asc'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FilterType Interface in TypeScript for DataTables\nDESCRIPTION: TypeScript type definition that describes how a filter is applied to rows in a datatable. It defines a structure with fields for column name, value, and operation type to be performed during filtering.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/types.Filter.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FilterType = {\n    column: string\n    value: string\n    operation?: 'startsWith' | 'contains' | 'endsWith' | 'equals' | 'notEquals' | 'regex'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparator Function in TypeScript\nDESCRIPTION: Demonstrates a basic comparator function implementation that checks if an entry is not equal to a given value. The function takes two parameters and returns a boolean result.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/types.Comparator.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst check: Comparator = (entry, value) => entry !== value\n```\n\n----------------------------------------\n\nTITLE: Retrieving DataTables View Instance in TypeScript\nDESCRIPTION: This code snippet shows how to retrieve the view instance of a DataTables component using the getView() method. This approach allows accessing the view instance remotely without the need for prop passing, providing a more flexible way to interact with the DataTables component.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/methods.getView.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.getView()\n```\n\n----------------------------------------\n\nTITLE: Defining i18n Text Object for DataTables in TypeScript\nDESCRIPTION: This code snippet defines an i18n (internationalization) object containing key-value pairs for various UI text elements used in DataTables. It includes translations for search placeholder, pagination controls, and other interface elements.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/types.Internationalization.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = {\n    search: 'Search...',\n    show: 'Show', \n    entries: 'lines',\n    filter: 'Filter',\n    rowCount: 'Showing {start} to {end} of {total} entries',\n    noRows: 'No entries found',\n    previous: 'Previous', \n    next: 'Next'\n}\n```\n\n----------------------------------------\n\nTITLE: Sort Management with Data Updates in Svelte\nDESCRIPTION: Shows how to properly handle sort state when updating table data, using clearSort() before setRows() to prevent restoring previous sorts.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.clearSort.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    $effect(() => { \n        data\n        table.clearSort()\n        table.setRows(data) \n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Sort Clearing in TypeScript\nDESCRIPTION: Simple demonstration of clearing table sort state using the clearSort() method.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/methods.clearSort.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable.clearSort()\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Page Number in Svelte DataTables\nDESCRIPTION: This snippet shows how to display the current page number in a Svelte component using the DataTables library. It uses the 'table.currentPage' property to access the current page number.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.currentPage.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<h1>Current page is: {table.currentPage}</h1>\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Page Number in Svelte DataTables\nDESCRIPTION: This snippet demonstrates how to programmatically access or set the current page number in a Svelte DataTables implementation. It uses TypeScript to show the assignment of the current page number.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.currentPage.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.currentPage = 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Count in Svelte Template\nDESCRIPTION: Shows how to display the total number of pages from a DataTable instance in a Svelte component template\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.pageCount.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<h1>Page count is equal to {table.pageCount}</h1>\n```\n\n----------------------------------------\n\nTITLE: Logging DataTable Page Numbers in TypeScript\nDESCRIPTION: This snippet demonstrates how to log the full list of pages and the condensed list with ellipsis for a DataTable. It uses the 'table.pages' and 'table.pagesWithEllipsis' properties.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.pages.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(table.pages)\nconsole.log(table.pagesWithEllipsis)\n```\n\n----------------------------------------\n\nTITLE: Row Count Object Structure Example\nDESCRIPTION: Shows the structure of the rowCount object with example values for a table with 10 rows per page and 150 total rows\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.rowCount.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst table.rowCount = {\n    start: 1,\n    end: 10,\n    total: 150,\n    selected: 0\n}\n// rowsPerPage = 10, dataset has 150 rows, no filter applied, no selected row\n```\n\n----------------------------------------\n\nTITLE: Accessing Pages with Ellipsis in TypeScript Data Tables\nDESCRIPTION: Shows how to access the pagesWithEllipsis property from a table object. This property returns an array of page numbers with null values representing ellipses for pagination user interfaces.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.pagesWithEllipsis.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(table.pagesWithEllipsis)\n```\n\n----------------------------------------\n\nTITLE: Setting HTMLElement Reference in Svelte Table Component\nDESCRIPTION: Example showing how to bind a table container element reference when not using the Datatable component directly. This binding is essential for managing column visibility and frozen columns.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.element.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<article bind:this={table.element}>\n    <table>\n        <thead>[...]</thead>\n        <tbody>[...]</tbody>\n    </table>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Migrating from v1 to v2 of @vincjo/datatables\nDESCRIPTION: Diff showing how to update import statements when migrating from v1 to v2 of @vincjo/datatables. The 'legacy' namespace is introduced to allow for gradual upgrades.\nSOURCE: https://github.com/vincjo/datatables/blob/main/README.md#2025-04-08_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- @vincjo/datatables\n+ @vincjo/datatables/legacy\n\n- @vincjo/datatables/remote\n+ @vincjo/datatables/legacy/remote\n```\n\n----------------------------------------\n\nTITLE: Accessing Datatable Width with Default Component\nDESCRIPTION: Shows how to conditionally apply classes based on the table's client width when using the Datatable component. The width threshold is set to 600px for responsive behavior.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.clientWidth.md#2025-04-08_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class={{ small: table.clientWidth < 600 }}>\n    [...]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Manual Table Width Binding in Svelte\nDESCRIPTION: Demonstrates how to manually bind the clientWidth property to a table element when not using the Datatable component. Uses the bind:clientWidth directive to track the table's width.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.clientWidth.md#2025-04-08_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<article bind:clientWidth={table.clientWidth}>\n    <table>\n        <thead>[...]</thead>\n        <tbody>[...]</tbody>\n    </table>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Displaying DataTable Page Number Output in TypeScript\nDESCRIPTION: This snippet shows the expected output when logging the page numbers. It illustrates the difference between the full list of pages and the condensed version with ellipsis.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.pages.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.pages = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n\ntable.pagesWithEllipsis = [ 1, 2, 3, 4, 5, null, 10 ]\n```\n\n----------------------------------------\n\nTITLE: Example Output of pagesWithEllipsis Property\nDESCRIPTION: Demonstrates the output of the pagesWithEllipsis property in different pagination scenarios. It shows how the array changes based on the current page number, with null values representing ellipses in the pagination sequence.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.pagesWithEllipsis.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// table.currentPage = 1\ntable.pagesWithEllipsis = [ 1, 2, 3, 4, 5, null, 18 ]\n\n// table.currentPage = 7\ntable.pagesWithEllipsis = [1, null, 6, 7, 8, null, 18]\n\n// table.currentPage = 15\ntable.pagesWithEllipsis = [1, null, 14, 15, 16, 17, 18]\n```\n\n----------------------------------------\n\nTITLE: Page Count Property Definition\nDESCRIPTION: Example showing the pageCount property value in TypeScript, representing the total number of pages in the DataTable\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/properties.pageCount.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntable.pageCount = 10\n```\n\n----------------------------------------\n\nTITLE: Implementing a Value Comparison Function in JavaScript\nDESCRIPTION: A simple function that compares two values and returns a boolean result. This function is likely used for equality checks within the datatables project, possibly for filtering, sorting, or other conditional operations.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/client/types.Check.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCheck = (a, b) => {\n    return a === b\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a simple object structure in TypeScript, representing a person with first name and last name properties. It shows the basic syntax for defining object literals in TypeScript.\nSOURCE: https://github.com/vincjo/datatables/blob/main/static/documents/markdown/types.Row.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ first_name: 'John', lastname: 'Doe' }\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Git\nDESCRIPTION: Command to create a new feature branch in Git for development.\nSOURCE: https://github.com/vincjo/datatables/blob/main/CONTRIBUTING.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b myfeature\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: Command to commit changes with a descriptive message following conventional commit format.\nSOURCE: https://github.com/vincjo/datatables/blob/main/CONTRIBUTING.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m 'feat: my feature'\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Remote in Git\nDESCRIPTION: Command to push the newly created feature branch to the remote repository.\nSOURCE: https://github.com/vincjo/datatables/blob/main/CONTRIBUTING.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin myfeature\n```"
  }
]