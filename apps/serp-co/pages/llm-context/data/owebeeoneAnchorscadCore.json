[
  {
    "owner": "owebeeone",
    "repo": "anchorscad-core",
    "content": "TITLE: Creating a Composite SquarePipe Shape in AnchorSCAD\nDESCRIPTION: Demonstrates how to create a parameterized square pipe as an AnchorSCAD Shape class using the @shape and @datatree decorators. This example shows how to build a reusable, parametric component with the CompositeShape base class.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport anchorscad as ad\nEPSILON = 1.0e-3\n\n@ad.shape\n@ad.datatree  # wrapper over dataclasses\nclass SquarePipe(ad.CompositeShape):\n    '''Pipe with box section consisting of an outer box with an \n    inner box hole.'''\n    size: tuple\n    wall_size: float = 5.0\n\n    EXAMPLE_SHAPE_ARGS = ad.args((70, 50, 30))\n\n    def build(self) -> ad.Maker:\n        maker = ad.Box(self.size).solid('outer').at('centre')\n        # Make the inner box slightly larger to stop tearing \n        # when rendered.\n        inner_size = (\n            self.size[0] - 2 * self.wall_size,\n            self.size[1] - 2 * self.wall_size,\n            self.size[2] + EPSILON\n        )\n        maker2 = ad.Box(inner_size).hole('hole').at('centre')\n        maker.add_at(maker2, 'centre')\n        return maker\n\nMAIN_DEFAULT = ad.ModuleDefault(True)  # Set default for --write\nif __name__ == '__main__':\n    ad.anchorscad_main()\n```\n\n----------------------------------------\n\nTITLE: Implementing a SquarePipe Composite Shape in AnchorSCAD\nDESCRIPTION: Complete implementation of a SquarePipe class that creates a pipe with a square cross-section by removing an inner box from an outer box. Demonstrates shape building, anchor definition, and example configuration.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport anchorscad as ad\nEPSILON = 1.0e-3\n\n@ad.shape\n@ad.datatree\nclass SquarePipe(ad.CompositeShape):\n    '''Pipe with box section consisting of an outer box with an \n    inner box hole.'''\n    size: tuple = ad.dtfield(doc='Overall size of SquarePipe shape.')\n    wall_size: float = ad.dtfield(5.0, 'Wall thickness of SquarePipe shape')\n\n    EXAMPLE_SHAPE_ARGS = ad.args((70, 50, 30))\n    EXAMPLE_ANCHORS = (ad.surface_args('face_centre', 5),\n                       ad.surface_args('inner', 'face_centre', 2),)\n\n    def build(self) -> ad.Maker:\n        maker = ad.Box(self.size).solid('outer').at('centre')\n        # Make the inner box slightly larger to stop tearing\n        # when rendered.\n        inner_size = (\n            self.size[0] - 2 * self.wall_size,\n            self.size[1] - 2 * self.wall_size,\n            self.size[2] + EPSILON\n        )\n        maker2 = ad.Box(inner_size).hole('hole').at('centre')\n        maker.add_at(maker2, 'centre')\n        return maker\n\n    @ad.anchor('Inner hole.')\n    def inner(self, *args, **kwds):\n        # Make Z axis point out in holes.\n        return self.maker.at('hole', *args, **kwds) * ad.ROTX_180\n\nMAIN_DEFAULT = ad.ModuleDefault(True)  # Set default for --write\nif __name__ == '__main__':\n    ad.anchorscad_main()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Material Models in AnchorSCAD with Python\nDESCRIPTION: A Python class demonstrating how to create a multi-material model in AnchorSCAD. This example creates a box with a sphere on top, each assigned different materials with different priorities to demonstrate material conflict resolution.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/multi_material.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@ad.shape\n@ad.datatree\nclass MultiMaterialTest(ad.CompositeShape):\n    '''\n    A basic test of multi-material support. Basically a box with a sphere on top.\n    The box and sphere are different materials.\n    '''\n    xy: float=30\n    z: float=10\n    \n    size: tuple=ad.dtfield(\n        doc='The (x,y,z) size of ShapeName',\n        self_default=lambda s: (s.xy, s.xy, s.z))\n    \n    # A node that builds a box from the size tuple. See:\n    # https://github.com/owebeeone/anchorscad/blob/master/docs/datatrees_docs.md\n    box_node: ad.Node=ad.dtfield(ad.ShapeNode(ad.Box, 'size'))\n    \n    sphere_r: float=ad.dtfield(self_default=lambda s: s.xy/2)\n    \n    shpere_node: ad.Node=ad.dtfield(ad.ShapeNode(ad.Sphere, prefix='sphere_'))\n    \n    EXAMPLE_SHAPE_ARGS=ad.args(xy=20, z=10)\n    EXAMPLE_ANCHORS=(\n        ad.surface_args('sphere', 'top'),)\n\n    def build(self) -> ad.Maker:\n        \n        box_shape = self.box_node()\n        maker = box_shape.solid('box') \\\n                .material(ad.Material('box', priority=10)) \\\n                .at('face_centre', 'base', post=ad.ROTX_180)\n        maker.add_at(\n            self.shpere_node()\n                    .solid('sphere')\n                    .material(ad.Material('sphere', priority=9))\n                    .at('top', rh=1.4),\n            'face_centre', 'top')\n\n        return maker\n```\n\n----------------------------------------\n\nTITLE: Implementing HoleGauge Class in AnchorSCAD\nDESCRIPTION: Defines a HoleGauge class that creates a plate with a matrix of holes of different radii. It uses CompositeShape and datatree decorators, and demonstrates the use of ShapeNodes and self_default lambda functions for complex shape composition.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@ad.shape\n@ad.datatree(frozen=True)\nclass HoleGauge(ad.CompositeShape):\n    '''A plate with a matrix of holes of different radii provided in hole_rss.'''\n    hole_rss: Tuple[Tuple[float]]=ad.dtfield(doc='Tuple of tuple of hole radii')\n    \n    single_hole_gauge: ad.Node=ad.dtfield(\n        ad.ShapeNode(SingleHoleGauge,\n                     exclude=('hole_rs', 'x', 'y', 'plate_size')),\n                     init=False)\n    shapes: Tuple[ad.Shape]=ad.dtfield(\n            doc='Tuple of shapes placed in the hole gauge plate',\n            self_default=lambda s: tuple(s.single_hole_gauge(hole_rs=rs) for rs in s.hole_rss),\n            init=False)\n    plate_size: Tuple[float]=ad.dtfield(\n            doc='The (x, y, z) size of the plate Box shape',\n            self_default=lambda s:(\n                max(sh.x for sh in s.shapes),\n                sum(sh.y for sh in s.shapes) - (len(s.shapes) - 1) * s.sep,\n                s.h - 2 * s.epsilon),\n            init=False)\n    plate_node: ad.Node=ad.dtfield(ad.ShapeNode(ad.Box, prefix='plate_'),\n                                   doc='The plate node factory',\n                                   init=False)\n        \n    EXAMPLE_SHAPE_ARGS=ad.args(\n        fn=64, \n        hole_rss=((3, 4, 5, 6, 8, 10), (16, 14, 12)))\n    \n    def build(self) -> ad.Maker:\n        # Create a builder plate the size of the entire assembly.\n        maker = self.plate_node().solid('plate').at('centre')\n        \n        # Adds all shapes into the assembly plate.\n        offset = 0\n        for i, shape in enumerate(self.shapes):\n            maker.add_at(shape.composite(('inner_plate', i))\n                         .at('face_edge', 'base', 0, post=ad.tranY(-offset)),\n                         'face_edge', 'base', 0)\n            offset += shape.y - self.sep\n        return maker\n\nMAIN_DEFAULT=ad.ModuleDefault(True)  # Default to --write\n\nif __name__ == \"__main__\":\n    ad.anchorscad_main()\n```\n\n----------------------------------------\n\nTITLE: Implementing SingleHoleGauge Class in AnchorSCAD\nDESCRIPTION: Defines a SingleHoleGauge class that creates a plate with a line of holes of different radii. It uses CompositeShape and datatree decorators, and demonstrates self_default lambda functions for dynamic attribute calculations.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@ad.shape\n@ad.datatree(frozen=True)\nclass SingleHoleGauge(ad.CompositeShape):\n    '''A plate with a line of holes of different radii provided in hole_rs.'''\n    hole_rs: Tuple[float]=ad.dtfield(doc='Tuple of hole radii')\n    h: float=ad.dtfield(5, 'Depth of plate')\n    sep: float=ad.dtfield(5, 'Margin of separation between holes and edges')\n    x: float=ad.dtfield(doc='Width (x) of plate', \n                        self_default=lambda s: \n                            sum(s.hole_rs) * 2 + (len(s.hole_rs) + 1) * s.sep)\n    y: float=ad.dtfield(doc='Depth (y) of plate', \n                        self_default=lambda s: max(s.hole_rs) * 2 + 2 * s.sep)\n    plate_size: Tuple[float]=ad.dtfield(doc='The (x, y, z) size of the plate Box shape',\n                                 self_default=lambda s: (s.x, s.y, s.h - 2 * s.epsilon))\n    plate_node: ad.Node=ad.dtfield(ad.ShapeNode(ad.Box, prefix='plate_'), init=False)\n    hole_node: ad.Node=ad.dtfield(ad.ShapeNode(ad.Cylinder, 'h'), init=False)\n    epsilon: float=ad.dtfield(0.005, 'Fudge factor to remove aliasing')\n    \n    EXAMPLE_SHAPE_ARGS=ad.args(fn=64, hole_rs=(3, 4, 5, 6, 10))\n    EXAMPLE_ANCHORS=()\n\n    def build(self) -> ad.Maker:\n        maker = self.plate_node().solid('plate').at('centre')\n        \n        offset = self.sep\n        for i, r in enumerate(self.hole_rs):\n            hole = self.hole_node(r=r)\n            offset += r\n            maker.add_at(\n                hole.hole(('hole', i))\n                    .at('base', post=ad.translate((0, -offset, -self.epsilon))),\n                'face_edge', 'base', 1)\n            offset += r + self.sep\n        return maker\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Box Tube in AnchorSCAD\nDESCRIPTION: Demonstrates how to compose models as holes and solids in AnchorSCAD by creating a box tube. The example shows how to create a solid box shape and add a hole shape to create a hollow tube.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# A simple composition example of a box tube using AnchorSCAD.\nimport anchorscad as ad\n\n# Create a shape that we build upon.\nmaker = ad.Box([20, 20, 40]).solid('box').at('centre')\n\n# Add a hole shape.\nhole = ad.Box([10, 10, 40.001]).hole('hole').at('centre')\nmaker.add_at(hole, 'centre')\n\n# Render and print the OpenSCAD file for the shape.\nprint(ad.render(maker).rendered_shape)\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Shape Arguments in AnchorSCAD\nDESCRIPTION: Demonstrates how to set up EXAMPLE_SHAPE_ARGS class variable to create default examples when anchorscad_main or anchorscad_runner is executed. Passes size parameters to the SquarePipe constructor.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SquarePipe(ad.CompositeShape):\n    ...\n    EXAMPLE_SHAPE_ARGS = ad.args((70, 50, 30))\n```\n\n----------------------------------------\n\nTITLE: Setting Up anchorscad_main() with Default Options\nDESCRIPTION: Shows how to configure the anchorscad_main() function to automatically render files, generate shape hierarchy graphs, and create example resources when the module is run.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    ad.anchorscad_main()\n```\n\nLANGUAGE: python\nCODE:\n```\nMAIN_DEFAULT = ad.ModuleDefault(True)\n```\n\nLANGUAGE: python\nCODE:\n```\nMAIN_DEFAULT = ad.ModuleDefault(True, True, True)\n```\n\nLANGUAGE: python\nCODE:\n```\nMAIN_DEFAULT = ad.ModuleDefault(all=True)\n```\n\n----------------------------------------\n\nTITLE: Viewing AnchorSCAD Models with ad_viewer\nDESCRIPTION: Example commands for using the anchorscad.ad_viewer module to render and view specific shapes, examples, parts, or materials from AnchorSCAD modules without requiring OpenSCAD installation.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m anchorscad.ad_viewer --module anchorscad --shape Sphere --material default\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m anchorscad.ad_viewer --module anchorscad_models.cases.rpi.rpi5  --shape RaspberryPi5Case\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Datatree Class in Python\nDESCRIPTION: Example of a basic datatree class that wraps a standard dataclass. This shows the core functionality of datatrees while demonstrating regular dataclass default value behavior.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@datatree\nclass A:\n    '''Demonstrates Python dataclasses default value\n    functionality. Even though @datatree is used, this\n    example only uses the base Python @dataclass\n    functionality.\n    '''\n    v1: int\n    v2: int=2\n    v3: int=field(default=3)\n    v4: int=field(default_factory=lambda: 7 - 3)\n```\n\n----------------------------------------\n\nTITLE: Generated OpenSCAD Code for Multi-Material Model\nDESCRIPTION: The OpenSCAD code generated by AnchorSCAD for the multi-material model. It demonstrates the lazy union structure and how material priorities affect volume conflict resolution (curing) between parts.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/multi_material.md#2025-04-23_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\n// Start: lazy_union\ndefault_5_box_10();\ndefault_5_sphere_9_cured();\ndefault_5_non_physical_20_non_physical_non_physical();\n// End: lazy_union\n\n// Modules.\n\n// 'PartMaterial undef-default - box 10'\nmodule default_5_box_10() {\n  // 'None : _combine_solids_and_holes'\n  union() {\n    // 'default : _combine_solids_and_holes'\n    union() {\n      // 'box'\n      multmatrix(m=[[1.0, 0.0, 0.0, -10.0], [0.0, 1.0, 0.0, -10.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]) {\n        // 'box : _combine_solids_and_holes'\n        union() {\n          // 'box'\n          cube(size=[20.0, 20.0, 10.0]);\n        }\n      }\n    }\n  }\n} // end module default_5_box_10\n\n// 'PartMaterial undef-default - non_physical 20 non-physical'\nmodule default_5_non_physical_20_non_physical_non_physical() {\n  // 'None : _combine_solids_and_holes'\n  union() {\n    // 'default : _combine_solids_and_holes'\n    union() {\n      // 'sphere_non_physical'\n      multmatrix(m=[[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 19.0], [0.0, 0.0, 0.0, 1.0]]) {\n        // 'sphere_non_physical : _combine_solids_and_holes'\n        union() {\n          // 'sphere_non_physical'\n          sphere(r=10.0);\n        }\n      }\n    }\n  }\n} // end module default_5_non_physical_20_non_physical_non_physical\n\n// 'PartMaterial undef-default - sphere 9'\nmodule default_5_sphere_9() {\n  // 'None : _combine_solids_and_holes'\n  union() {\n    // 'default : _combine_solids_and_holes'\n    union() {\n      // 'sphere'\n      multmatrix(m=[[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 14.0], [0.0, 0.0, 0.0, 1.0]]) {\n        // 'sphere : _combine_solids_and_holes'\n        union() {\n          // 'sphere'\n          sphere(r=10.0);\n        }\n      }\n    }\n  }\n} // end module default_5_sphere_9\n\n// 'PartMaterial undef-default - sphere 9'\nmodule default_5_sphere_9_cured() {\n  difference() {\n    default_5_sphere_9();\n    default_5_box_10();\n  }\n} // end module default_5_sphere_9_cured\n```\n\n----------------------------------------\n\nTITLE: Physical-Only Output in OpenSCAD Lazy Union\nDESCRIPTION: A simplified OpenSCAD lazy union section that includes only physical materials, excluding non-physical elements like anchors or slicer modifiers from the output.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/multi_material.md#2025-04-23_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\n// Start: lazy_union\ndefault_5_box_10();\ndefault_5_sphere_9_cured();\n// End: lazy_union\n... rest of definitions\n```\n\n----------------------------------------\n\nTITLE: Generated OpenSCAD Output for SquarePipe Model\nDESCRIPTION: The OpenSCAD code generated by AnchorSCAD for the SquarePipe shape. Shows how the composite shape is translated into OpenSCAD operations including union, difference, and transformations.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: scad\nCODE:\n```\n// Start: lazy_union\ndefault_5_default_5();\n// End: lazy_union\n\n// Modules.\n\n// 'PartMaterial undef-default - default 5.0'\nmodule default_5_default_5() {\n  // 'None : _combine_solids_and_holes'\n  union() {\n    // '_combine_solids_and_holes'\n    difference() {\n      // 'default : _combine_solids_and_holes'\n      union() {\n        // 'outer'\n        multmatrix(m=[[1.0, 0.0, 0.0, -35.0], [0.0, 1.0, 0.0, -25.0], [0.0, 0.0, 1.0, -15.0], [0.0, 0.0, 0.0, 1.0]]) {\n          // 'outer : _combine_solids_and_holes'\n          union() {\n            // 'outer'\n            cube(size=[70.0, 50.0, 30.0]);\n          }\n        }\n      }\n      // 'default'\n      multmatrix(m=[[1.0, 0.0, 0.0, -30.0], [0.0, 1.0, 0.0, -20.0], [0.0, 0.0, 1.0, -15.0005], [0.0, 0.0, 0.0, 1.0]]) {\n        // 'hole : _combine_solids_and_holes'\n        union() {\n          // 'hole'\n          cube(size=[60.0, 40.0, 30.001]);\n        }\n      }\n    }\n  }\n} // end module default_5_default_5\n```\n\n----------------------------------------\n\nTITLE: Inheritance with Datatrees in Python\nDESCRIPTION: Shows how to create datatree classes with inheritance, combining fields from parent classes while allowing computed values using self_default.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@datatree\nclass E:\n    '''Using the dtfield() function to create a BindingDefault entry.'''\n    v1: int=1\n    v2: int=2\n    v_computed: Node=dtfield(self_default=lambda s: s.v1 + s.v2)\n\n\n@datatree\nclass F(E, A):\n    '''Inheritance of datatree classes is allowed, fields are merged.\n    in the same way as dataclasses.'''\n```\n\n----------------------------------------\n\nTITLE: Instantiating Inherited Datatree Classes in Python\nDESCRIPTION: Demonstrates creating instances of inherited datatree classes, showing how fields are merged from parent classes and computed values are evaluated.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nF()\n  -> F(v1=1, v2=2, v3=3, v4=4, v_computed=3)\n\nF(v4=44)\n  -> F(v1=1, v2=2, v3=3, v4=44, v_computed=3)\n```\n\n----------------------------------------\n\nTITLE: Computed Defaults with self_default in Python Datatrees\nDESCRIPTION: Demonstrates using dtfield with self_default to create computed field values based on other fields. The v1 field is computed as the sum of v2 and v3.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@datatree\nclass Bind:\n    '''Demonstrates the use of a computed default value.\n    Often a value used in nodes should be computed with other parameters\n    provided to this instance.'''\n    v1: int=dtfield(self_default=lambda s: s.v2 + s.v3)\n    a_node: Node=field(default=Node(A), repr=False, init=False\n```\n\n----------------------------------------\n\nTITLE: Using Computed Defaults with Custom Parameters in Python\nDESCRIPTION: Shows how computed defaults (self_default) use the values provided in the constructor when creating an instance, with v1 being calculated as the sum of v2 and v3.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nBind(v2=10)\n  -> Bind(v1=13, v2=10, v4=4, v3=3)\n```\n\n----------------------------------------\n\nTITLE: Field Injection with Node in Python Datatrees\nDESCRIPTION: Demonstrates how to inject fields from one datatree class into another using Node. The a_node field becomes a callable factory that creates instances of class A using values from the parent.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@datatree\nclass Anode:\n    '''Injects fields from class A and provides a\n    default value for A.v1. The a_node field becomes a\n    callable object that provides an instance of A\n    with field values retrieved from self.\n    '''\n    v1: int=55\n    a_node: Node=Node(A)  # Inject field names from A\n```\n\n----------------------------------------\n\nTITLE: Using Field Binding with BoundNode in Python\nDESCRIPTION: Demonstrates how BoundNode acts as a factory for creating instances of class A, pulling parameter values from the containing Anode instance.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAnode().a_node()\n  -> A(v1=55, v2=2, v3=3, v4=4)\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Binding in Python Datatrees\nDESCRIPTION: Shows how to override specific parameter values when using a BoundNode factory, allowing customization of the created instances while keeping other values from the parent.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nAnode().a_node(v3=33)\n  -> A(v1=55, v2=2, v3=33, v4=4)\n```\n\n----------------------------------------\n\nTITLE: Injecting Function Parameters in Python Datatrees\nDESCRIPTION: Demonstrates using a function or lambda as a datatrees.Node, with parameters being injected as fields and bound when the node is called as a factory.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef func_a(x: int=1, y:int=3):\n    return x + y\n\n@datatree\nclass BindFunc:\n    '''Injected function parameters.'''\n    a: int=1\n    b: int=1\n    lambda_node: Node=Node(lambda a, b: a + b)\n    func_node: Node=Node(func_a)\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Node Factory in Python Datatrees\nDESCRIPTION: Shows how to use a lambda function with a Node factory, binding values from the parent instance to the lambda parameters when called.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nBindFunc().lambda_node()\n  -> 2\n```\n\n----------------------------------------\n\nTITLE: Function Node with Parameter Override in Python\nDESCRIPTION: Demonstrates using a function Node with custom parameter values, overriding the default value for x while using the default for y in the call to func_a.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nBindFunc(x=5).func_node()\n  -> 8\n```\n\n----------------------------------------\n\nTITLE: Name Mapping with Prefix in Python Datatrees\nDESCRIPTION: Shows how to inject multiple nodes of the same type using prefix mapping to avoid parameter name collisions. Each node can then use the mapped parameter names.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@datatree\nclass C:\n    '''Multiple nodes of the same type with parameter name mapping.'''\n    a_v1: int=11\n    a_node: Node=field(default=Node(A, prefix='a_'), repr=False)\n    b_v1: int=12\n    b_node: Node=field(default=Node(A, prefix='b_'), repr=False)\n    computed: int=BindingDefault(lambda s: s.a_v2 + s.b_v2)\n    \n    def __post_init__(self):\n        pass # Called after initialization is complete.\n        \n    def make_stuff(self):\n        return self.a_node(v2=22), self.b_node(), self.computed\n```\n\n----------------------------------------\n\nTITLE: Calling Node Factories with Prefixed Parameters in Python\nDESCRIPTION: Demonstrates using prefix-mapped node factories to create different instances of the same class with different parameter values, showing how each node uses its own prefixed parameters.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nC().make_stuff()\n  -> (A(v1=11, v2=22, v3=3, v4=4), A(v1=12, v2=2, v3=3, v4=4), 4)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Datatree Objects in Python\nDESCRIPTION: Shows how to instantiate datatree objects with explicit values, using default values, and demonstrates equality comparison between instances with the same values.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nA(v1=1)\n  -> A(v1=1, v2=2, v3=3, v4=4)\n```\n\nLANGUAGE: python\nCODE:\n```\nA(v1=2) == A(v1=2)\n  -> True\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Datatree Instance with Injected Fields\nDESCRIPTION: Shows the result of creating a default instance of Anode, highlighting how fields from class A are injected and how the a_node field is transformed into a BoundNode factory.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nAnode()\n  -> Anode(v1=55, a_node=BoundNode(node=Node(clz_or_func=A, use_defaults=True, suffix='', prefix='', expose_all=True, node_doc=None)), v4=4, v2=2, v3=3)\n```\n\n----------------------------------------\n\nTITLE: Help Output for Datatree Class in Python\nDESCRIPTION: Shows the help information for a datatree class, demonstrating how the constructor signature and docstring are preserved and accessible through Python's help system.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/datatrees_docs.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass A(builtins.object)\n |  A(v1: int, v2: int = 2, v3: int = 3, v4: int = <factory>, override: anchorscad.datatrees.Overrides = None) -> None\n |\n |  Demonstrates Python dataclasses default value\n |  functionality. Even though @datatree is used, this\n |  example only uses the base Python @dataclass\n |  functionality.\n | …\n```\n\n----------------------------------------\n\nTITLE: Installing AnchorSCAD Core via pip\nDESCRIPTION: Command to install the core AnchorSCAD library using pip package manager.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/InstallingAnchorSCAD.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install anchorscad-core\n```\n\n----------------------------------------\n\nTITLE: Linux Installation Commands\nDESCRIPTION: Complete set of commands for installing AnchorSCAD and its dependencies on Linux-based systems including Debian, Ubuntu, and Raspberry Pi OS.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/InstallingAnchorSCAD.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n# Install prerequisites (OpenSCAD/Graphviz are optional)\nsudo apt install python3 python3-pip git [openscad] [graphviz]\n\nmkdir -p ~/git\ncd ~/git\n\n# Clone the desired repository (core or full)\n# git clone https://github.com/owebeeone/anchorscad-core.git ; cd anchorscad-core\n# OR\ngit clone https://github.com/owebeeone/anchorscad.git ; cd anchorscad\n\n# Install Python dependencies\npip3 install .\n```\n\n----------------------------------------\n\nTITLE: Windows Installation Commands\nDESCRIPTION: Command sequence for installing AnchorSCAD on Windows systems after installing prerequisites.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/InstallingAnchorSCAD.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncd %USERPROFILE%\nmkdir git   # Don't run if the git directory already exists.\ncd git\nREM Either install the core library or the full package\n- git clone https://github.com/owebeeone/anchorscad-core.git\n- cd anchorscad-core\nREM OR OR\ngit clone https://github.com/owebeeone/anchorscad.git\ncd anchorscad\n\nREM Install dependencies defined in pyproject.toml\npip install .\nREM For development including testing tools, use:\nREM pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Testing AnchorSCAD Installation\nDESCRIPTION: Commands to verify AnchorSCAD installation by rendering example shapes and testing the viewer functionality.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/InstallingAnchorSCAD.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m anchorscad.core --shape Box --write\n```\n\n----------------------------------------\n\nTITLE: Testing AnchorSCAD Viewer\nDESCRIPTION: Command to test the direct mesh viewing capability of AnchorSCAD.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/InstallingAnchorSCAD.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m anchorscad.ad_viewer --module anchorscad --shape Box\n```\n\n----------------------------------------\n\nTITLE: Running AnchorSCAD Test Runner\nDESCRIPTION: Commands to run tests across multiple modules and browse generated files using a local web server.\nSOURCE: https://github.com/owebeeone/anchorscad-core/blob/main/docs/InstallingAnchorSCAD.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m anchorscad.runner.anchorscad_runner <folder_to_scan>\n\npython -m anchorscad.runner.anchorscad_runner <folder_to_scan> --browse\n```"
  }
]