[
  {
    "owner": "spatie",
    "repo": "laravel-settings",
    "content": "TITLE: Defining Strongly Typed Settings Class with Spatie Laravel Settings in PHP\nDESCRIPTION: Defines a PHP class extending Spatie\\LaravelSettings\\Settings with strongly typed public properties representing application settings. It includes a static group method to specify the settings group name. This class serves as the blueprint for storing and retrieving settings values through the package. Required dependency: Spatie Laravel Settings package. Inputs are property values stored via migrations or updates; outputs are accessible property values via the class instance.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spatie Laravel Settings Configuration File in PHP\nDESCRIPTION: The config array defines settings classes registration, directory paths for classes and migrations, repository settings (database and Redis), encoding/decoding options, caching configuration, global casts for custom types, and auto-discovery paths. It controls how and where the settings are stored, serialized, cached, and used within the Laravel app. Default repositories are database and Redis with customizable connection and table options.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * Each settings class used in your application must be registered, you can\n     * put them (manually) here.\n     */\n    'settings' => [\n\n    ],\n\n    /*\n     * The path where the settings classes will be created.\n     */\n    'setting_class_path' => app_path('Settings'),\n\n    /*\n     * In these directories settings migrations will be stored and ran when migrating. A settings\n     * migration created via the make:settings-migration command will be stored in the first path or\n     * a custom defined path when running the command.\n     */\n    'migrations_paths' => [\n        database_path('settings'),\n    ],\n\n    /*\n     * When no repository was set for a settings class the following repository\n     * will be used for loading and saving settings.\n     */\n    'default_repository' => 'database',\n\n    /*\n     * Settings will be stored and loaded from these repositories.\n     */\n    'repositories' => [\n        'database' => [\n            'type' => Spatie\\LaravelSettings\\SettingsRepositories\\DatabaseSettingsRepository::class,\n            'model' => null,\n            'table' => null,\n            'connection' => null,\n        ],\n        'redis' => [\n            'type' => Spatie\\LaravelSettings\\SettingsRepositories\\RedisSettingsRepository::class,\n            'connection' => null,\n            'prefix' => null,\n        ],\n    ],\n\n    /*\n     * The encoder and decoder will determine how settings are stored and\n     * retrieved in the database. By default, `json_encode` and `json_decode`\n     * are used.\n     */\n    'encoder' => null,\n    'decoder' => null,\n\n    /*\n     * The contents of settings classes can be cached through your application,\n     * settings will be stored within a provided Laravel store and can have an\n     * additional prefix.\n     */\n    'cache' => [\n        'enabled' => env('SETTINGS_CACHE_ENABLED', false),\n        'store' => null,\n        'prefix' => null,\n        'ttl' => null,\n    ],\n\n    /*\n     * These global casts will be automatically used whenever a property within\n     * your settings class isn't a default PHP type.\n     */\n    'global_casts' => [\n        DateTimeInterface::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeInterfaceCast::class,\n        DateTimeZone::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeZoneCast::class,\n     // Spatie\\DataTransferObject\\DataTransferObject::class => Spatie\\LaravelSettings\\SettingsCasts\\DtoCast::class,\n        Spatie\\LaravelData\\Data::class => Spatie\\LaravelSettings\\SettingsCasts\\DataCast::class,\n    ],\n\n    /*\n     * The package will look for settings in these paths and automatically\n     * register them.\n     */\n    'auto_discover_settings' => [\n        app_path('Settings'),\n    ],\n\n    /*\n     * Automatically discovered settings classes can be cached, so they don't\n     * need to be searched each time the application boots up.\n     */\n    'discovered_settings_cache_path' => base_path('bootstrap/cache'),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Spatie Laravel Settings in a Laravel Controller Using PHP\nDESCRIPTION: Shows how to update application settings by assigning request input values to properties of a strongly typed settings class, followed by saving changes. The controller method accepts a form request and the settings class via dependency injection. Calls the save method to persist changes in the configured repository. Returns a redirect response after updating. Dependencies include Spatie Laravel Settings, Laravel HTTP Request handling, and validation via GeneralSettingsRequest.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass GeneralSettingsController\n{\n    public function update(\n        GeneralSettingsRequest $request,\n        GeneralSettings $settings\n    ){\n        $settings->site_name = $request->input('site_name');\n        $settings->site_active = $request->input('site_active');\n        \n        $settings->save();\n        \n        return redirect()->back();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Accessing Settings in a Laravel Controller Using PHP\nDESCRIPTION: Demonstrates injecting a strongly typed settings class in a Laravel controller method to access application settings. Returns a view with setting values passed as data. Requires Spatie Laravel Settings integration and proper service container registration of settings classes. Inputs are the resolved settings object properties; output is a rendered view using those settings.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass GeneralSettingsController\n{\n    public function show(GeneralSettings $settings){\n        return view('settings.show', [\n            'site_name' => $settings->site_name,\n            'site_active' => $settings->site_active    \n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Accessing Settings via Dependency Injection in Laravel Controller PHP\nDESCRIPTION: Demonstrates using Laravel's service container to inject a strongly typed settings class in a controller's invoke method. Uses the setting property to retrieve its value and pass it to a view. This pattern encourages clean access to application-wide settings.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass IndexController\n{\n    public function __invoke(GeneralSettings $settings){\n        return view('index', [\n            'site_name' => $settings->site_name,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Settings via Controller with Request Input and Saving Using Spatie Laravel Settings in PHP\nDESCRIPTION: A Laravel controller method uses dependency injection to receive a settings class and request object, then updates settings properties from the request input values including boolean casting, saves the settings, and redirects back. This snippet is a concise example of processing updates to application settings.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass SettingsController\n{\n    public function __invoke(GeneralSettings $settings, GeneralSettingsRequest $request){\n        $settings->site_name = $request->input('site_name');\n        $settings->site_active = $request->boolean('site_active');\n        \n        $settings->save();\n        \n        return redirect()->back();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a LaravelSettings Settings Class with Typed Properties in PHP\nDESCRIPTION: Example settings class demonstrating various property types such as string, bool, int, float, and array. The class groups these settings under 'regular_type' and serves as a simple example of typed settings properties that will be JSON serialized and stored in the repository.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass RegularTypeSettings extends Settings\n{\n    public string $a_string;\n    \n    public bool $a_bool;\n    \n    public int $an_int;\n    \n    public float $a_float;\n    \n    public array $an_array;\n    \n    public static function group(): string\n    {\n        return 'regular_type';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Repository for LaravelSettings Settings Class in PHP\nDESCRIPTION: Defines how to explicitly set a repository for a LaravelSettings settings class by implementing the static repository() method. This method returns the repository name to be used for storing and loading settings, overriding the default repository configured in the package. Includes the setting of properties with their types and the group method required to associate the settings class with a group name. The class extends the base Settings class provided by the Spatie package.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n    \n    public static function repository(): ?string\n    {\n        return 'global_settings';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Setting Value Using Laravel app() Helper in PHP\nDESCRIPTION: Shows how to retrieve a specific setting value directly by resolving the settings class from Laravel's service container using the `app()` helper. This method is useful for quick access outside of dependency injection contexts.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction getName(): string{\n    return app(GeneralSettings::class)->site_name;\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Properties with Nullable Types in PHP LaravelSettings Class\nDESCRIPTION: Shows how to define PHP typed properties with nullable types directly, using ? notation. This allows setting the property to null safely. The example includes a nullable integer property and a DateTime typed property along with the group method defining the settings group name.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    public DateTime $birth_date;\n    \n    public ?int $a_nullable_int;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Properties of LaravelSettings Class with Nullable and Array Types Using PHP Docblocks\nDESCRIPTION: Demonstrates different ways to type properties using PHP docblocks, including nullable types, arrays of ints, and arrays of objects. This approach supplements or replaces native PHP types especially in older PHP versions or for more complex type annotations like generic array types. The group method assigns the group name for the settings.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    /** @var \\DateTime  */\n    public $birth_date;\n    \n    /** @var ?int  */\n    public $a_nullable_int;\n    \n    /** @var int|null  */\n    public $another_nullable_int;\n    \n    /** @var int[]|null  */\n    public $an_array_of_ints_or_null;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    /** @var array<\\DateTime>  */\n    public array $birth_dates;\n    \n    // OR\n\n    /** @var \\DateTime[]  */\n    public array $birth_dates_alternative;\n\n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values in Settings Class in PHP\nDESCRIPTION: Demonstrates how to define default values for properties in a settings class to avoid MissingSettings exceptions when migrations haven't been run yet.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nclass GeneralSettings extends Settings\n{\n    public string $site_name = 'Spatie';\n\n    public bool $site_active = true;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Setting Property in LaravelSettings Migration Using PHP\nDESCRIPTION: Demonstrates using the migrator's add method inside the migration's up function to add a new property called 'timezone' with a default value 'Europe/Brussels' to the 'general' settings group. This permanently stores the new setting with a default value to be used when loading settings from the repository. Nullable properties may be initialized with null if desired.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->add('general.timezone', 'Europe/Brussels');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Laravel Settings Class Using Artisan Command in Bash\nDESCRIPTION: Artisan command to generate a new settings class file with a specified group assignment inside the directory defined in the config path `setting_class_path`. This scaffolds a boilerplate settings class for strong typing and simplifies adding new configurable settings groups.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:setting SettingName --group=groupName\n```\n\n----------------------------------------\n\nTITLE: Using Global Casts Automatically in a LaravelSettings Class with PHP\nDESCRIPTION: Example settings class that relies on global casts configuration to handle serialization of complex types such as DateTime without manually defining local casts in the class. The package automatically matches the birth_date DateTime property type to an appropriate cast in the global_casts configuration.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    public DateTime $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Casts for LaravelSettings in PHP Configuration Array\nDESCRIPTION: Demonstrates the array configuration for global casts inside the package config file, associating interface or class names with cast classes to automatically apply casting to any matching property type across settings classes. This reduces the need to specify local casts repeatedly and supports casts based on specific types, interfaces, or inheritance hierarchies.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n'global_casts' => [\n    DateTimeInterface::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeInterfaceCast::class,\n    DateTimeZone::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeZoneCast::class,\n // Spatie\\DataTransferObject\\DataTransferObject::class => Spatie\\LaravelSettings\\SettingsCasts\\DtoCast::class,\n    Spatie\\LaravelData\\Data::class => Spatie\\LaravelSettings\\SettingsCasts\\DataCast::class,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Casts in Laravel Settings via PHP Configuration\nDESCRIPTION: This snippet illustrates how to configure global property casts within the Spatie Laravel Settings package using PHP configuration in the settings.php file. It shows an example of registering a cast that handles all types implementing the DateTimeInterface by mapping the interface to a specific caster class. This global cast simplifies and centralizes the casting logic for properties of types such as Carbon and DateTime.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n\n    ...\n\n    'global_casts' => [\n        DateTimeInterface::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeInterfaceCast::class,\n    ],\n    \n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Local Casts on Laravel Settings Properties in PHP\nDESCRIPTION: These snippets showcase three methods to define local casts for settings properties in a Laravel Settings class: by property type declaration, by docblock annotation, and by explicit string definition. Each example associates a property named 'birth_date' with a date/time caster, demonstrating flexibility in cast definition. The explicit approach further allows additional constructor arguments for the caster, with an alternative presented for instantiating the caster directly within the class for readability and configurability.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n// By the type of property\n\nclass CastSettings extends Settings \n{\n    public DateTime $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class\n        ];\n    }\n    \n    ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// By the docblock of a property\n\nclass CastSettings extends Settings\n{\n    /** @var \\DateTime  */\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class\n        ];\n    }\n    \n    ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// By explicit definition\n\nclass CastSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class.':'.DateTime::class\n        ];\n    }\n    \n    ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass CastSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeWthTimeZoneInterfaceCast::class.':'.DateTime::class.',Europe/Brussels'\n        ];\n    }\n    \n    ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass CastSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => new DateTimeWthTimeZoneInterfaceCast(DateTime::class, 'Europe/Brussels')\n        ];\n    }\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Settings Migration Class in PHP for Spatie Laravel Settings\nDESCRIPTION: Defines a migration class extending SettingsMigration with a up() method adding default values for specific settings keys and groups. This migration sets initial values for application settings which are required for type safety in the settings class. Requires running the artisan command to create and then migrate.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelSettings\\Migrations\\SettingsMigration;\n\nreturn new class extends SettingsMigration\n{\n    public function up(): void\n    {\n        $this->migrator->add('general.site_name', 'Spatie');\n        $this->migrator->add('general.site_active', true);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a DTO Cast for Settings in PHP\nDESCRIPTION: Shows a practical example of a custom caster for Data Transfer Objects that handles conversion between repository data and DTO objects.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nclass DtoCast implements SettingsCast\n{\n    private string $type;\n\n    public function __construct(?string $type)\n    {\n        $this->type = $type;\n    }\n\n    public function get($payload): Data\n    {\n        return $this->type::from($payload);\n    }\n\n    public function set($payload): array\n    {\n        return $payload->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SettingsRepository Interface in PHP for Custom Laravel Settings Repositories\nDESCRIPTION: This PHP interface outlines the contract that custom repository classes must implement to be used as storage backends for the Spatie Laravel Settings package. It includes methods for retrieving, checking, creating, updating, deleting, locking, unlocking, and fetching locked properties by group. Method parameters specify grouping and property identifiers, and expected outputs, facilitating raw value management. Implementations can handle storage in various backends, and constructor configurations support dependency injection based on user-defined settings.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\ninterface SettingsRepository\n{\n    /**\n     * Get all the properties in the repository for a single group\n     */\n    public function getPropertiesInGroup(string $group): array;\n\n    /**\n     * Check if a property exists in a group\n     */\n    public function checkIfPropertyExists(string $group, string $name): bool;\n\n    /**\n     * Get the payload of a property\n     */\n    public function getPropertyPayload(string $group, string $name);\n\n    /**\n     * Create a property within a group with a payload\n     */\n    public function createProperty(string $group, string $name, $payload): void;\n\n    /**\n     * Update the payloads of properties within a group.\n     */\n    public function updatePropertiesPayload(string $group, array $properties): void;\n\n    /**\n     * Delete a property from a group\n     */\n    public function deleteProperty(string $group, string $name): void;\n\n    /**\n     * Lock a set of properties for a specific group\n     */\n    public function lockProperties(string $group, array $properties): void;\n\n    /**\n     * Unlock a set of properties for a group\n     */\n    public function unlockProperties(string $group, array $properties): void;\n\n    /**\n     * Get all the locked properties within a group\n     */\n    public function getLockedProperties(string $group): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repositories and Caching for Laravel Settings in PHP\nDESCRIPTION: This snippet provides an example configuration for repository setup in the Spatie Laravel Settings package, specifying a database repository with connection and optional caching settings. It details configurable options such as repository type, database connection, cache enablement, cache store, key prefix, and time-to-live. These configurations enable customization of storage and caching behavior to optimize settings retrieval and persistence.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n    'repositories' => [\n        'landlord' => [\n            'type' => Spatie\\LaravelSettings\\SettingsRepositories\\DatabaseSettingsRepository::class,\n            'model' => null,\n            'table' => null,\n            'connection' => 'landlord',\n            'cache' => [\n                'enabled' => env('SETTINGS_CACHE_ENABLED', false),\n                'store' => null,\n                'prefix' => 'landlord',\n                'ttl' => null,\n            ],\n        ],\n        \n        ...\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Encoders and Decoders in PHP\nDESCRIPTION: Shows how to define custom encoder and decoder functions in the settings configuration to replace the default JSON encoding.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n...\n'encoder' => fn($value): string => str_rot13(json_encode($value)),\n'decoder' => fn(string $payload, bool $associative) => json_decode(str_rot13($payload), $associative),\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Cache in PHP\nDESCRIPTION: Shows how to enable and configure caching for settings to improve performance in production environments.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n'cache' => [\n    'enabled' => env('SETTINGS_CACHE_ENABLED', false),\n    'store' => null,\n    'prefix' => null,\n],\n```\n\n----------------------------------------\n\nTITLE: Refreshing Settings Cache in Laravel Settings with PHP Method\nDESCRIPTION: This short snippet demonstrates how to refresh the values and locked properties of a loaded settings instance at runtime using the 'refresh' method. This mechanism is useful when underlying repository data changes while the settings class is already instantiated, ensuring that the settings reflect the current repository state.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$settings->refresh();\n```\n\n----------------------------------------\n\nTITLE: Discovering Settings Classes in Bash\nDESCRIPTION: Shows the Artisan command to discover and cache all settings classes in the application for improved performance.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan settings:discover\n```\n\n----------------------------------------\n\nTITLE: Clearing Settings Cache in Bash\nDESCRIPTION: Shows the Artisan command to clear cached settings when needed during development or after major changes.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan settings:clear-cache\n```\n\n----------------------------------------\n\nTITLE: Publishing Spatie Laravel Settings Configuration File via Artisan in Bash\nDESCRIPTION: Artisan command to publish the package's config file to the application's config directory. Allows customization of settings classes, repositories, caching, global casts, and auto-discovery options.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\LaravelSettings\\LaravelSettingsServiceProvider\" --tag=\"config\"\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Settings Migration Using Artisan Bash Command\nDESCRIPTION: Command to create a new settings migration in a Laravel application using the Spatie LaravelSettings package. This command generates a migration file inside the database/settings directory, enabling migration of settings data structures alongside Laravel's regular database migrations. The migration class extends SettingsMigration and contains an up method where changes to settings values can be applied.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:settings-migration CreateGeneralSettings\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Spatie Laravel Settings Migrations in Bash\nDESCRIPTION: Commands to publish the package's database migrations to the application and run them, allowing the creation of tables or schemas necessary for storing settings values. These migrations are required for proper functioning of the package's data persistence.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\LaravelSettings\\LaravelSettingsServiceProvider\" --tag=\"migrations\"\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Installing Spatie Laravel Settings Package via Composer in Bash\nDESCRIPTION: Shows the composer command to require the spatie/laravel-settings package to add its functionality to a Laravel project. This is a prerequisite step for using the package.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-settings\n```\n\n----------------------------------------\n\nTITLE: Faking Settings Classes for Testing in PHP\nDESCRIPTION: Demonstrates how to create fake settings with specified values for testing purposes, without relying on the repository.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDateSettings::fake([\n    'birth_date' => new DateTime('16-05-1994')\n]);\n```\n\n----------------------------------------\n\nTITLE: Faking Settings with Missing Settings Exception in PHP\nDESCRIPTION: Shows how to create fake settings that will throw exceptions for undefined properties during testing.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDateSettings::fake([\n    'birth_date' => new DateTime('16-05-1994')\n], false);\n```\n\n----------------------------------------\n\nTITLE: Performing Multiple Settings Operations Within a Group in LaravelSettings Migration Using PHP\nDESCRIPTION: Shows grouping operations under a specific settings group for convenience. Within the inGroup method's callback, a SettingsBlueprint instance allows adding, renaming, updating, and deleting multiple properties without repeatedly prefixing the group name. This approach simplifies working on numerous related settings properties.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->inGroup('general', function (SettingsBlueprint $blueprint): void {\n        $blueprint->add('timezone', 'Europe/Brussels');\n        \n        $blueprint->rename('timezone', 'local_timezone');\n        \n        $blueprint->update('timezone', fn(string $timezone) => return 'America/New_York');\n        \n        $blueprint->delete('timezone');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Setting Property Value Conditionally in LaravelSettings Migration with PHP\nDESCRIPTION: Illustrates the use of the migrator's update method that accepts a property name and a closure to transform the existing value. The closure receives the current value and returns the updated one, enabling flexible value transformations during migrations. Useful for changing format or adapting values without losing data.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->update(\n        'general.timezone', \n        fn(string $timezone) => return 'America/New_York'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of a Property in LaravelSettings Migration Using PHP\nDESCRIPTION: Example showing how to check if a property exists in the repository before applying any operation. It uses the migrator's exists method to avoid errors or conditionally run code if the setting is present.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    if ($this->migrator->exists('general.timezone')) {\n        // do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming or Moving a Property in LaravelSettings Migration with PHP\nDESCRIPTION: Shows how to rename or relocate a property within settings migration. The migrator's rename method takes two parameters: the original property's fully qualified name and the new one, allowing you to rename a property within the same group or move it to a different group.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->rename('general.timezone', 'general.local_timezone');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->rename('general.timezone', 'country.timezone');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Laravel Settings Migration Class with Up Method in PHP\nDESCRIPTION: Example of a settings migration class that extends Spatie\\LaravelSettings\\Migrations\\SettingsMigration. It contains an up method meant for modifying settings data within the settings repository. This skeleton is the base structure for adding, renaming, updating, or deleting setting properties during migrations and can be extended with a down method if rollback is required.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelSettings\\Migrations\\SettingsMigration;\n\nclass CreateGeneralSettings extends SettingsMigration\n{\n    public function up(): void\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Property in LaravelSettings Migration Using PHP\nDESCRIPTION: Demonstrates removing a property from the settings storage using the migrator's delete method inside the up function to clean up obsolete settings entries.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->delete('general.timezone');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Encrypted Properties in Settings Class in PHP\nDESCRIPTION: Demonstrates how to specify which properties should be encrypted in the database by implementing the encrypted method in a settings class.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n    \n    public static function encrypted(): array\n    {\n        return [\n            'site_name'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Encrypted Property in Migration in PHP\nDESCRIPTION: Shows how to add a new encrypted property using the migrator in a Laravel migration file.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->addEncrypted('general.site_name', 'Spatie');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Encrypted Property in Migration in PHP\nDESCRIPTION: Shows how to update an encrypted property value using the migrator in a Laravel migration file.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->updateEncrypted(\n        'general.site_name', \n        fn(string $siteName) => return 'Space'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Property to Non-Encrypted in Migration in PHP\nDESCRIPTION: Shows how to convert an encrypted property to a non-encrypted one in a migration.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->addEncrypted('general.site_name', 'Spatie');\n\n    $this->migrator->decrypt('general.site_name');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Property is Locked in Settings in PHP\nDESCRIPTION: Shows how to check if a specific property is currently locked in a settings class.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$dateSettings->isLocked('birth_date');\n```\n\n----------------------------------------\n\nTITLE: Checking if Property is Unlocked in Settings in PHP\nDESCRIPTION: Shows how to check if a specific property is currently unlocked in a settings class.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$dateSettings->isUnlocked('birth_date');\n```\n\n----------------------------------------\n\nTITLE: Locking Multiple Properties in Settings in PHP\nDESCRIPTION: Demonstrates how to lock multiple settings properties simultaneously to prevent updates to any of them.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$dateSettings->lock('birth_date', 'name', 'email');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Locked Properties in Settings in PHP\nDESCRIPTION: Shows how to get a list of all properties that are currently locked in a settings class.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$dateSettings->getLockedProperties(); // ['birth_date']\n```\n\n----------------------------------------\n\nTITLE: Unlocking Properties in Settings in PHP\nDESCRIPTION: Demonstrates how to unlock previously locked settings properties to allow updates again.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$dateSettings->unlock('birth_date', 'name', 'email');\n```\n\n----------------------------------------\n\nTITLE: Clearing Discovered Settings Classes in Bash\nDESCRIPTION: Shows the Artisan command to clear the cache of discovered settings classes when needed.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan settings:clear-discovered\n```\n\n----------------------------------------\n\nTITLE: Returning an Array of Namespace Strings in PHP\nDESCRIPTION: This snippet returns an array of strings, each corresponding to the fully qualified class name of dummy test classes used in tests within the Spatie Laravel Settings package. It serves as a static list of classes to be referenced elsewhere in the testing framework. There are no input parameters or outputs other than the returned array. It is a simple array return statement using PHP array syntax. Dependencies include the presence of the referenced classes in the project structure.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/tests/Console/__snapshots__/CacheDiscoveredSettingsCommandTest__it_can_cache_the_registered_sessions__1.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php return array (\n  0 => 'Spatie\\\\LaravelSettings\\\\Tests\\\\TestClasses\\\\DummySettings',\n  1 => 'Spatie\\\\LaravelSettings\\\\Tests\\\\TestClasses\\\\DummySimpleSettings',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Local Casts for Complex Types in LaravelSettings Settings Class Using PHP\nDESCRIPTION: Defines a settings class with a property using the DateTime type, specifying a local cast in the casts() static method to handle serialization and deserialization of DateTimeInterface objects. This allows proper handling of complex types that JSON serialization alone cannot rebuild fully. Shows how to specify the cast as a class reference or an initialized instance with constructor arguments.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    public DateTime $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class\n        ];\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => new DateTimeInterfaceWithTimeZoneCast(DateTime::class, 'Europe/Brussels')\n        ];\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass DateSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class.':'.DateTime::class\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Classes Array in PHP\nDESCRIPTION: Returns an array of fully qualified class names for settings classes used in tests. This configuration lists two test classes from the Spatie\\LaravelSettings\\Tests\\TestClasses namespace that will be recognized by the Laravel Settings package.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/tests/Console/__snapshots__/CacheSettingsCommandTest__it_can_cache_the_registered_projectors__1.txt#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return array (\n  0 => 'Spatie\\\\LaravelSettings\\\\Tests\\\\TestClasses\\\\DummySettings',\n  1 => 'Spatie\\\\LaravelSettings\\\\Tests\\\\TestClasses\\\\DummySimpleSettings',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Settings Migration Class Using Spatie Laravel Settings in PHP\nDESCRIPTION: This PHP code snippet defines a migration class named CreateNewTestSettingsMigration that extends SettingsMigration from the Spatie Laravel Settings package. It prepares an up() method where developers can add migration logic for changing application settings. Requires Laravel, the Spatie Laravel Settings package, and adherence to Laravel's migration structure. The class does not yet implement functional logic but serves as a template for adding or updating settings schemas.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/tests/Console/__snapshots__/MakeSettingsMigrationCommandTest__it_creates_a_new_test_settings_migration_on_specified_path.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Spatie\\LaravelSettings\\Migrations\\SettingsMigration;\n\nclass CreateNewTestSettingsMigration extends SettingsMigration\n{\n    public function up(): void\n    {\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuration Array for Laravel Settings Classes\nDESCRIPTION: This PHP array returns a list of fully qualified class names representing settings classes used in the Spatie Laravel Settings package. It facilitates mapping class references to specific settings, enabling the package to manage settings classes dynamically.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/tests/__snapshots__/CacheDiscoveredSettingsCommandTest__it_can_cache_the_registered_sessions__1.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php return array (\n  0 => 'Spatie\\\\LaravelSettings\\\\Tests\\\\TestClasses\\\\DummySettings',\n  1 => 'Spatie\\\\LaravelSettings\\\\Tests\\\\TestClasses\\\\DummySimpleSettings',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Migration to Modify Settings Table in PHP\nDESCRIPTION: This code snippet defines a Laravel migration class that updates the 'settings' database table schema to support the upgrade from version 2 to 3 of the package. It modifies the 'locked' column to be non-nullable with a default value of false, adds a unique constraint combining 'group' and 'name' columns, and removes an index on the 'group' column. The migration includes both 'up' and 'down' methods for applying and rolling back these changes. Dependencies include Laravel's migration classes and the Schema facade. The snippet demonstrates schema modification operations such as changing column definitions, adding unique constraints, and dropping indexes.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/UPGRADING.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::table('settings', function (Blueprint $table): void {\n            $table->boolean('locked')->default(false)->change();\n\n            $table->unique(['group', 'name']);\n\n            $table->dropIndex(['group']);\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::table('settings', function (Blueprint $table): void {\n            $table->boolean('locked')->default(null)->change();\n\n            $table->dropUnique(['group', 'name']);\n\n            $table->index('group');\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Property to Encrypted in Migration in PHP\nDESCRIPTION: Shows how to convert a non-encrypted property to an encrypted one in a migration.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\npublic function up(): void\n{\n    $this->migrator->add('general.site_name', 'Spatie');\n\n    $this->migrator->encrypt('general.site_name');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SettingsCast Interface in PHP\nDESCRIPTION: Shows the interface that must be implemented when creating a custom caster for settings properties with get and set methods.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\ninterface SettingsCast\n{\n    /**\n     * Will be used to when retrieving a value from the repository, and\n     * inserting it into the settings class.\n     */\n    public function get($payload);\n\n    /**\n     * Will be used to when retrieving a value from the settings class, and\n     * inserting it into the repository.\n     */\n    public function set($payload);\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Properties in Settings in PHP\nDESCRIPTION: Shows how to lock properties in settings to prevent updates, with methods for locking, unlocking, and checking lock status.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$dateSettings->lock('birth_date');\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Laravel Settings Package using Bash\nDESCRIPTION: This simple bash command runs the complete test suite for the Spatie Laravel Settings package by invoking the composer test script. It requires composer and the package dependencies to be installed, and is used during development or continuous integration to verify code correctness.\nSOURCE: https://github.com/spatie/laravel-settings/blob/main/README.md#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```"
  }
]