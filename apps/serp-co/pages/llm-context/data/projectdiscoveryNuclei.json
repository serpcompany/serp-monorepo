[
  {
    "owner": "projectdiscovery",
    "repo": "nuclei",
    "content": "TITLE: Complete Nuclei Command Line Reference\nDESCRIPTION: Full help documentation showing all available command line flags organized by category, including target specification, template selection, filtering, output, configurations, and Interactsh options.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nNuclei is a fast, template based vulnerability scanner focusing\non extensive configurability, massive extensibility and ease of use.\n\nUsage:\n  ./nuclei [flags]\n\nFlags:\nTARGET:\n   -u, -target string[]          target URLs/hosts to scan\n   -l, -list string              path to file containing a list of target URLs/hosts to scan (one per line)\n   -eh, -exclude-hosts string[]  hosts to exclude to scan from the input list (ip, cidr, hostname)\n   -resume string                resume scan using resume.cfg (clustering will be disabled)\n   -sa, -scan-all-ips            scan all the IP's associated with dns record\n   -iv, -ip-version string[]     IP version to scan of hostname (4,6) - (default 4)\n\nTARGET-FORMAT:\n   -im, -input-mode string        mode of input file (list, burp, jsonl, yaml, openapi, swagger) (default \"list\")\n   -ro, -required-only            use only required fields in input format when generating requests\n   -sfv, -skip-format-validation  skip format validation (like missing vars) when parsing input file\n\nTEMPLATES:\n   -nt, -new-templates                    run only new templates added in latest nuclei-templates release\n   -ntv, -new-templates-version string[]  run new templates added in specific version\n   -as, -automatic-scan                   automatic web scan using wappalyzer technology detection to tags mapping\n   -t, -templates string[]                list of template or template directory to run (comma-separated, file)\n   -turl, -template-url string[]          template url or list containing template urls to run (comma-separated, file)\n   -ai, -prompt string                    generate and run template using ai prompt\n   -w, -workflows string[]                list of workflow or workflow directory to run (comma-separated, file)\n   -wurl, -workflow-url string[]          workflow url or list containing workflow urls to run (comma-separated, file)\n   -validate                              validate the passed templates to nuclei\n   -nss, -no-strict-syntax                disable strict syntax check on templates\n   -td, -template-display                 displays the templates content\n   -tl                                    list all available templates\n   -tgl                                   list all available tags\n   -sign                                  signs the templates with the private key defined in NUCLEI_SIGNATURE_PRIVATE_KEY env variable\n   -code                                  enable loading code protocol-based templates\n   -dut, -disable-unsigned-templates      disable running unsigned templates or templates with mismatched signature\n   -esc, -enable-self-contained           enable loading self-contained templates\n   -egm, -enable-global-matchers          enable loading global matchers templates\n   -file                                  enable loading file templates\n\nFILTERING:\n   -a, -author string[]               templates to run based on authors (comma-separated, file)\n   -tags string[]                     templates to run based on tags (comma-separated, file)\n   -etags, -exclude-tags string[]     templates to exclude based on tags (comma-separated, file)\n   -itags, -include-tags string[]     tags to be executed even if they are excluded either by default or configuration\n   -id, -template-id string[]         templates to run based on template ids (comma-separated, file, allow-wildcard)\n   -eid, -exclude-id string[]         templates to exclude based on template ids (comma-separated, file)\n   -it, -include-templates string[]   path to template file or directory to be executed even if they are excluded either by default or configuration\n   -et, -exclude-templates string[]   path to template file or directory to exclude (comma-separated, file)\n   -em, -exclude-matchers string[]    template matchers to exclude in result\n   -s, -severity value[]              templates to run based on severity. Possible values: info, low, medium, high, critical, unknown\n   -es, -exclude-severity value[]     templates to exclude based on severity. Possible values: info, low, medium, high, critical, unknown\n   -pt, -type value[]                 templates to run based on protocol type. Possible values: dns, file, http, headless, tcp, workflow, ssl, websocket, whois, code, javascript\n   -ept, -exclude-type value[]        templates to exclude based on protocol type. Possible values: dns, file, http, headless, tcp, workflow, ssl, websocket, whois, code, javascript\n   -tc, -template-condition string[]  templates to run based on expression condition\n\nOUTPUT:\n   -o, -output string            output file to write found issues/vulnerabilities\n   -sresp, -store-resp           store all request/response passed through nuclei to output directory\n   -srd, -store-resp-dir string  store all request/response passed through nuclei to custom directory (default \"output\")\n   -silent                       display findings only\n   -nc, -no-color                disable output content coloring (ANSI escape codes)\n   -j, -jsonl                    write output in JSONL(ines) format\n   -irr, -include-rr -omit-raw   include request/response pairs in the JSON, JSONL, and Markdown outputs (for findings only) [DEPRECATED use -omit-raw] (default true)\n   -or, -omit-raw                omit request/response pairs in the JSON, JSONL, and Markdown outputs (for findings only)\n   -ot, -omit-template           omit encoded template in the JSON, JSONL output\n   -nm, -no-meta                 disable printing result metadata in cli output\n   -ts, -timestamp               enables printing timestamp in cli output\n   -rdb, -report-db string       nuclei reporting database (always use this to persist report data)\n   -ms, -matcher-status          display match failure status\n   -me, -markdown-export string  directory to export results in markdown format\n   -se, -sarif-export string     file to export results in SARIF format\n   -je, -json-export string      file to export results in JSON format\n   -jle, -jsonl-export string    file to export results in JSONL(ine) format\n   -rd, -redact string[]         redact given list of keys from query parameter, request header and body\n\nCONFIGURATIONS:\n   -config string                        path to the nuclei configuration file\n   -tp, -profile string                  template profile config file to run\n   -tpl, -profile-list                   list community template profiles\n   -fr, -follow-redirects                enable following redirects for http templates\n   -fhr, -follow-host-redirects          follow redirects on the same host\n   -mr, -max-redirects int               max number of redirects to follow for http templates (default 10)\n   -dr, -disable-redirects               disable redirects for http templates\n   -rc, -report-config string            nuclei reporting module configuration file\n   -H, -header string[]                  custom header/cookie to include in all http request in header:value format (cli, file)\n   -V, -var value                        custom vars in key=value format\n   -r, -resolvers string                 file containing resolver list for nuclei\n   -sr, -system-resolvers                use system DNS resolving as error fallback\n   -dc, -disable-clustering              disable clustering of requests\n   -passive                              enable passive HTTP response processing mode\n   -fh2, -force-http2                    force http2 connection on requests\n   -ev, -env-vars                        enable environment variables to be used in template\n   -cc, -client-cert string              client certificate file (PEM-encoded) used for authenticating against scanned hosts\n   -ck, -client-key string               client key file (PEM-encoded) used for authenticating against scanned hosts\n   -ca, -client-ca string                client certificate authority file (PEM-encoded) used for authenticating against scanned hosts\n   -sml, -show-match-line                show match lines for file templates, works with extractors only\n   -ztls                                 use ztls library with autofallback to standard one for tls13 [Deprecated] autofallback to ztls is enabled by default\n   -sni string                           tls sni hostname to use (default: input domain name)\n   -dka, -dialer-keep-alive value        keep-alive duration for network requests.\n   -lfa, -allow-local-file-access        allows file (payload) access anywhere on the system\n   -lna, -restrict-local-network-access  blocks connections to the local / private network\n   -i, -interface string                 network interface to use for network scan\n   -at, -attack-type string              type of payload combinations to perform (batteringram,pitchfork,clusterbomb)\n   -sip, -source-ip string               source ip address to use for network scan\n   -rsr, -response-size-read int         max response size to read in bytes\n   -rss, -response-size-save int         max response size to read in bytes (default 1048576)\n   -reset                                reset removes all nuclei configuration and data files (including nuclei-templates)\n   -tlsi, -tls-impersonate               enable experimental client hello (ja3) tls randomization\n   -hae, -http-api-endpoint string       experimental http api endpoint\n\nINTERACTSH:\n   -iserver, -interactsh-server string  interactsh server url for self-hosted instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)\n   -itoken, -interactsh-token string    authentication token for self-hosted interactsh server\n   -interactions-cache-size int         number of requests to keep in the interactions cache (default 5000)\n   -interactions-eviction int           number of seconds to wait before evicting requests from cache (default 60)\n```\n\n----------------------------------------\n\nTITLE: Basic Target Scanning with Nuclei\nDESCRIPTION: Demonstrates how to run Nuclei against a single web application target. This is the most basic usage of the tool for scanning a website for vulnerabilities.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -target example.com\n```\n\n----------------------------------------\n\nTITLE: Bulk Scanning with Target List\nDESCRIPTION: Shows how to scan multiple targets by providing a list of URLs in a file. This is useful for batch scanning multiple websites or endpoints.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -list urls.txt\n```\n\n----------------------------------------\n\nTITLE: Using Custom Templates\nDESCRIPTION: Shows how to scan a target using a custom-created template file. This allows for tailored scanning based on specific rules defined in the YAML template.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -u https://example.com -t /path/to/your-template.yaml\n```\n\n----------------------------------------\n\nTITLE: Exporting Results to JSON\nDESCRIPTION: Shows how to run Nuclei with JSON output export. This is useful for integrating scan results with other tools or for automated processing.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -target example.com -json-export output.json\n```\n\n----------------------------------------\n\nTITLE: Using Template Directories\nDESCRIPTION: Demonstrates scanning with specific template directories. This allows targeting particular vulnerability types or categories during a scan.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -target example.com -t http/cves/ -t ssl\n```\n\n----------------------------------------\n\nTITLE: Uploading Results to ProjectDiscovery Cloud\nDESCRIPTION: Demonstrates how to run a scan and upload the results to the ProjectDiscovery cloud platform for further analysis and remediation. This feature is free and doesn't require a subscription.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -target https://example.com -dashboard\n```\n\n----------------------------------------\n\nTITLE: Exporting Results to Markdown with Environment Variables\nDESCRIPTION: Shows how to generate sorted Markdown outputs using environment variables. This creates organized, readable reports from scan results.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMARKDOWN_EXPORT_SORT_MODE=template nuclei -target example.com -markdown-export nuclei_report/\n```\n\n----------------------------------------\n\nTITLE: Nuclei Help Output and Command-Line Options\nDESCRIPTION: Complete console output showing all available command-line options for Nuclei organized by categories including target specification, template selection, filtering, output configuration, and general settings.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README_ES.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nNuclei es un escáner de vulnerabilidades rápido y basado en plantillas\nque se centra en su amplia configurabilidad, extensibilidad y facilidad de uso.\n\nUsage:\n  ./nuclei [flags]\n\nFlags:\nTARGET:\n   -u, -target string[]          URLs/hosts a escanear\n   -l, -list string              ruta al archivo que contiene la lista de URLs/hosts a escanear (uno por línea)\n   -eh, -exclude-hosts string[]  hosts a excluir para escanear de la lista de entrada (ip, cidr, hostname)\n   -resume string                reanudar el escaneo usando resume.cfg (la clusterización quedará inhabilitada)\n   -sa, -scan-all-ips            escanear todas las IP asociadas al registro dns\n   -iv, -ip-version string[]     versión IP a escanear del nombre de host (4,6) - (por defecto 4)\n\nTARGET-FORMAT:\n   -im, -input-mode string        modo del archivo de entrada (list, burp, jsonl, yaml, openapi, swagger) (por defecto \"list\")\n   -ro, -required-only            utilizar solo campos requeridos en el formato de entrada al generar peticiones\n   -sfv, -skip-format-validation  saltar la validación de formato (como variables faltantes) al procesar el archivo de entrada\n\nTEMPLATES:\n   -nt, -new-templates                    ejecutar sólo las nuevas plantillas añadidas en la última versión de nuclei-templates\n   -ntv, -new-templates-version string[]  ejecutar las nuevas plantillas añadidas en la versión especificada\n   -as, -automatic-scan                   escaneo web automático utilizando la detección de tecnología de wappalyzer para mapeo de etiquetas\n   -t, -templates string[]                lista de plantillas o directorio de plantillas a ejecutar (separadas por comas, file)\n   -turl, -template-url string[]          url de plantilla o lista que contiene urls de plantillas a ejecutar (separadas por comas, file)\n   -w, -workflows string[]                lista de flujos de trabajo o directorio de flujos de trabajo a ejecutar (separadas por comas, file)\n   -wurl, -workflow-url string[]          url de flujo de trabajo o lista que contiene urls de flujo de trabajo para ejecutar (separadas por comas, file)\n   -validate                              valida las plantillas pasadas a nuclei\n   -nss, -no-strict-syntax                deshabilita la comprobación de sintaxis estricta en las plantillas\n   -td, -template-display                 muestra el contenido de las plantillas\n   -tl                                    lista todas las plantillas disponibles\n   -tgl                                   lista todas las etiquetas disponibles\n   -sign                                  firma las plantillas con la clave privada definida en la variable de entorno NUCLEI_SIGNATURE_PRIVATE_KEY\n   -code                                  habilita la carga de plantillas basadas en protocolos de código\n   -dut, -disable-unsigned-templates      deshabilita la ejecución de plantillas no firmadas o plantillas con firma no coincidente\n\nFILTERING:\n   -a, -author string[]               plantillas a ejecutar basadas en autores (separadas por comas, file)\n   -tags string[]                     plantillas a ejecutar basadas en etiquetas (separadas por comas, file)\n   -etags, -exclude-tags string[]     plantillas a excluir basadas en etiquetas (separadas por comas, file)\n   -itags, -include-tags string[]     etiquetas a ejecutar incluso si están excluidas ya sea por defecto o por configuración\n   -id, -template-id string[]         plantillas a ejecutar basadas en IDs de plantilla (comma-separated, file, allow-wildcard)\n   -eid, -exclude-id string[]         plantillas a excluir basadas en IDs de plantilla (separadas por comas, file)\n   -it, -include-templates string[]   ruta al archivo de plantilla o directorio a ejecutar incluso si están excluidas ya sea por defecto o por configuración\n   -et, -exclude-templates string[]   ruta al archivo de plantilla o directorio a excluir (separadas por comas, file)\n   -em, -exclude-matchers string[]    matchers de plantilla a excluir en el resultado\n   -s, -severity value[]              plantillas a ejecutar basadas en criticidad. Valores posibles: info, bajo, medio, alto, crítico, desconocido\n   -es, -exclude-severity value[]     plantillas a excluir basadas en criticidad. Valores posibles: info, bajo, medio, alto, crítico, desconocido\n   -pt, -type value[]                 plantillas a ejecutar basadas en tipo de protocolo. Valores posibles: dns, file, http, headless, tcp, workflow, ssl, websocket, whois, code, javascript\n   -ept, -exclude-type value[]        plantillas a excluir basadas en tipo de protocolo. Valores posibles: dns, file, http, headless, tcp, workflow, ssl, websocket, whois, code, javascript\n   -tc, -template-condition string[]  plantillas a ejecutar basadas en condición de expresión\n\nOUTPUT:\n   -o, -output string            archivo de salida donde guardar las incidencias/vulnerabilidades detectadas\n   -sresp, -store-resp           almacenar todas las peticiones/respuestas enviadas por nuclei en el directorio de salida\n   -srd, -store-resp-dir string  almacenar todas las peticiones/respuestas enviadas por nuclei en un directorio personalizado (por defecto \"output\")\n   -silent                       mostrar resultados únicamente\n   -nc, -no-color                deshabilitar la coloración del contenido de salida (códigos de escape ANSI)\n   -j, -jsonl                    escribir la salida en formato JSONL(ines)\n   -irr, -include-rr -omit-raw   incluir pares peticiones/respuesta en las salidas JSON, JSONL y Markdown (sólo para hallazgos) [OBSOLETO usar -omit-raw] (por defecto true)\n   -or, -omit-raw                omitir los pares peticiones/respuesta en las salidas JSON, JSONL y Markdown (sólo para hallazgos)\n   -ot, -omit-template           omitir plantilla codificada en la salida JSON, JSONL\n   -nm, -no-meta                 deshabilitar la impresión de metadatos de resultados en la salida cli\n   -ts, -timestamp               habilitar la impresión de la marca de tiempo en la salida cli\n   -rdb, -report-db string       base de datos de informes de nuclei (utilizarla siempre para persistir los datos de los informes)\n   -ms, -matcher-status          mostrar el estado de fallo de coincidencia\n   -me, -markdown-export string  directorio para exportar resultados en formato markdown\n   -se, -sarif-export string     archivo para exportar resultados en formato SARIF\n   -je, -json-export string      archivo para exportar resultados en formato JSON\n   -jle, -jsonl-export string    archivo para exportar resultados en formato JSONL(ines)\n\nCONFIGURATIONS:\n   -config string                        ruta al archivo de configuración de nuclei\n   -fr, -follow-redirects                habilitar el seguimiento de redirecciones para plantillas http\n   -fhr, -follow-host-redirects          seguir redirecciones en el mismo host\n   -mr, -max-redirects int               número máximo de redirecciones a seguir para plantillas http (por defecto 10)\n   -dr, -disable-redirects               deshabilitar redirecciones para plantillas http\n   -rc, -report-config string            archivo de configuración del módulo de informes de nuclei\n   -H, -header string[]                  encabezado/cookie personalizado a incluir en todas las peticiones http en formato header:value (cli, file)\n   -V, -var value                        variables personalizadas en formato key=value\n   -r, -resolvers string                 archivo que contiene lista de resolutores para nuclei\n   -sr, -system-resolvers                utilizar resolución de DNS del sistema como fallback de error\n   -dc, -disable-clustering              deshabilitar la clusterización de peticiones\n   -passive                              habilitar el modo de procesamiento pasivo de respuestas HTTP\n   -fh2, -force-http2                    forzar la conexión http2 en las peticiones\n   -ev, -env-vars                        habilitar el uso de variables de entorno en la plantilla\n   -cc, -client-cert string              archivo de certificado de cliente (codificado en PEM) utilizado para autenticarse contra los hosts escaneados\n   -ck, -client-key string               archivo de clave de cliente (codificado en PEM) utilizado para autenticarse contra los hosts escaneados\n   -ca, -client-ca string                archivo de autoridad de certificación de cliente (codificado en PEM) utilizado para autenticarse contra los hosts escaneados\n   -sml, -show-match-line                mostrar líneas de coincidencia para plantillas de archivo, funciona solo con extractores\n   -ztls                                 utilizar la biblioteca ztls con autofallback a estándar para tls13 [Obsoleto] autofallback a ztls está habilitado por defecto\n   -sni string                           nombre de host tls sni a usar (por defecto: nombre de dominio de entrada)\n   -dt, -dialer-timeout value            tiempo de espera para peticiones de red\n   -dka, -dialer-keep-alive value        duración de keep-alive para peticiones de red\n   -lfa, -allow-local-file-access        permite el acceso a archivos (carga útil) en cualquier lugar del sistema\n   -lna, -restrict-local-network-access  bloquea conexiones a la red local / privada\n   -i, -interface string                 interfaz de red a usar para el escaneo de red\n   -at, -attack-type string              tipo de combinaciones de carga útil a realizar (batteringram, pitchfork, clusterbomb)\n   -sip, -source-ip string               dirección ip de origen a usar para el escaneo de red\n   -rsr, -response-size-read int         tamaño máximo de respuesta a leer en bytes (por defecto 10485760)\n   -rss, -response-size-save int         tamaño máximo de respuesta a guardar en bytes (por defecto 1048576)\n   -reset                                reset elimina todos los archivos de configuración y datos de nuclei (incluidas las nuclei-templates)\n```\n\n----------------------------------------\n\nTITLE: Basic Nuclei Engine Implementation\nDESCRIPTION: Example showing basic usage of Nuclei engine including initialization, target loading, and execution with critical severity templates\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/lib/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// create nuclei engine with options\n\tne, err := nuclei.NewNucleiEngine(\n\t\tnuclei.WithTemplateFilters(nuclei.TemplateFilters{Severity: \"critical\"}), // run critical severity templates only\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// load targets and optionally probe non http/https targets\n\tne.LoadTargets([]string{\"scanme.sh\"}, false)\n\terr = ne.ExecuteWithCallback(nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer ne.Close()\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei with Go\nDESCRIPTION: Command to install Nuclei using Go. Requires Go version 1.22 or higher to install successfully.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Template Info Structure in Nuclei\nDESCRIPTION: Example showing the complete structure of the info block in a Nuclei template, including name, author, tags, reference, and severity.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Argument Injection in Ruby Dragonfly\nauthor: 0xspara\ntags: cve,cve2021,rce,ruby\nreference: https://zxsecurity.co.nz/research/argunment-injection-ruby-dragonfly/\nseverity: high\n```\n\n----------------------------------------\n\nTITLE: Network Subnet Scanning\nDESCRIPTION: Demonstrates scanning an entire subnet for network-related vulnerabilities. This command will check all IP addresses in the specified CIDR range.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -target 192.168.1.0/24\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Requests in Nuclei Template\nDESCRIPTION: Example showing how to define HTTP requests with matchers to detect exposed Git config files. Includes path specification, request method, and multiple condition matchers.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrequests:\n    matchers:\n        - type: word\n          words:\n            - '[core]'\n        - type: dsl\n          condition: and\n          dsl:\n            - '!contains(tolower(body), ''<html'')'\n            - '!contains(tolower(body), ''<body'')'\n        - type: status\n          status:\n            - 200\n    matchers-condition: and\n    path:\n        - '{{BaseURL}}/.git/config'\n    method: GET\n```\n\n----------------------------------------\n\nTITLE: Filtering Nuclei Templates by Tags\nDESCRIPTION: Examples of how to filter Nuclei templates using one or more tags. These commands allow targeting specific vulnerability types or exposures.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve -ntv 8.8.8,8.8.9\n{{binary}} -tags cve\n{{binary}} -tags cve,exposure\n{{binary}} -tags cve,exposure -tags token\n{{binary}} -tags cve,exposure -tags token,logs\n{{binary}} -tags \"cve\",\"exposure\" -tags \"token\",\"logs\"\n{{binary}} -tags 'cve','exposure' -tags 'token','logs'\n```\n\n----------------------------------------\n\nTITLE: Configuring File Requests in Nuclei Template\nDESCRIPTION: Example showing how to define file scanning requests with regex extractors to find Amazon MWS tokens in all file extensions.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfile:\n    extractors:\n        - type: regex\n          regex:\n            - amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\n    extensions:\n        - all\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Requests in Nuclei Template\nDESCRIPTION: Example showing how to define network requests to check for exposed Zookeeper services. Includes host specification, input data, and word matching.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork:\n    host:\n        - '{{Hostname}}'\n        - '{{Hostname}}:2181'\n    inputs:\n        - data: \"envi\\r\\nquit\\r\\n\"\n    read-size: 2048\n    matchers:\n        - type: word\n          words:\n            - zookeeper.version\n```\n\n----------------------------------------\n\nTITLE: Network Protocol Request Configuration in YAML\nDESCRIPTION: Example showing network protocol request configuration with host targeting and data input.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nhost:\n    - '{{Hostname}}'\n    - '{{Hostname}}:2181'\ninputs:\n    - data: \"envi\\r\\nquit\\r\\n\"\nread-size: 2048\nmatchers:\n    - type: word\n      words:\n        - zookeeper.version\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Nuclei Debugging\nDESCRIPTION: Table of environment variables that can be set to enable various debugging features in Nuclei. Each variable controls specific aspects of debug output and error handling.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DEBUG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable             | Description                                              |\n| -------------------------------- | -------------------------------------------------------- |\n| `DEBUG=true`                     | Enables Printing Stack Traces for all errors             |\n| `SHOW_DSL_ERRORS=true`           | Enables Printing DSL Errors (that are hidden by default) |\n| `HIDE_TEMPLATE_SIG_WARNING=true` | Hides Template Signature Verification Warnings           |\n| `NUCLEI_LOG_ALL=true`            | Log All Events that were skipped in verbose mode         |\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Threads for HTTP Requests\nDESCRIPTION: Sets the number of threads to use when sending HTTP requests. This enables connection pooling for better performance but requires that Connection: Close is not used in the requests.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Send requests using 10 concurrent threads\nthreads: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Metadata in Nuclei\nDESCRIPTION: Example showing how to define metadata for a Nuclei template, including name, author, tags, references, and severity level.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninfo:\n    name: Argument Injection in Ruby Dragonfly\n    author: 0xspara\n    tags: cve,cve2021,rce,ruby\n    reference: https://zxsecurity.co.nz/research/argunment-injection-ruby-dragonfly/\n    severity: high\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS CNAME Request with AWS EC2 Hostname Extraction\nDESCRIPTION: Configuration for making DNS CNAME record lookups and extracting AWS EC2 hostnames using regex patterns. Includes settings for recursion and retry attempts.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n    - type: regex\n      regex:\n        - ec2-[-\\d]+\\.compute[-\\d]*\\.amazonaws\\.com\n        - ec2-[-\\d]+\\.[\\w\\d\\-]+\\.compute[-\\d]*\\.amazonaws\\.com\nname: '{{FQDN}}'\ntype: CNAME\nclass: inet\nretries: 2\nrecursion: false\n```\n\n----------------------------------------\n\nTITLE: Complete vHost Enumeration Template Using Flow\nDESCRIPTION: A full YAML template that implements vHost enumeration by using flow to orchestrate SSL certificate grabbing, DNS PTR records, and HTTP testing of discovered hostnames. It demonstrates the power of combining different protocol requests with JavaScript logic.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: vhost-enum-flow\n\ninfo:\n  name: vhost enum flow\n  author: tarunKoyalwar\n  severity: info\n  description: |\n    vhost enumeration by extracting potential vhost names from ssl certificate and dns ptr records\n\nflow: |\n  ssl();\n  dns({hide: true});\n  for (let vhost of iterate(template[\"ssl_subject_cn\"],template[\"ssl_subject_an\"])) {\n    vhost = vhost.replace(\"*.\", \"\")\n    set(\"vhost\", vhost);\n    http();\n  }\n\nssl:\n  - address: \"{{Host}}:{{Port}}\"\n\ndns:\n  - name: \"{{FQDN}}\"\n    type: PTR\n\n    matchers:\n      - type: word\n        words:\n          - \"IN\\tPTR\"\n\n    extractors:\n      - type: regex\n        name: ptrValue\n        internal: true\n        group: 1\n        regex:\n          - \"IN\\tPTR\\t(.+)\" \n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{trim_suffix(vhost, \".\")}}\n\n    matchers:\n      - type: status\n        negative: true\n        status:\n          - 400\n          - 502\n\n    extractors:\n      - type: dsl\n        dsl:\n          - '\"VHOST: \" + vhost + \", SC: \" + status_code + \", CL: \" + content_length'\n```\n\n----------------------------------------\n\nTITLE: Configuring Race Count in HTTP Requests\nDESCRIPTION: Sets the number of times a request should be sent simultaneously for race condition testing. This parameter works with the race flag to control concurrent requests.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Send a request 5 times\nrace_count: 5\n```\n\n----------------------------------------\n\nTITLE: Including and Excluding Templates in Nuclei\nDESCRIPTION: Commands showing how to specifically include or exclude templates based on tags or directory paths.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve,dos,fuzz\n{{binary}} -tags cve -include-tags dos,fuzz\n{{binary}} -tags cve -exclude-tags cve2020\n{{binary}} -tags cve -exclude-templates cves/2020/\n{{binary}} -tags cve -exclude-templates cves/2020/CVE-2020-9757.yaml\n{{binary}} -tags cve -exclude-templates cves/2020/CVE-2020-9757.yaml -exclude-templates cves/2021/\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Concurrent Connections\nDESCRIPTION: Specifies the number of concurrent connections to create when using HTTP pipelining. This affects performance when making multiple requests through a pipeline.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Create 40 concurrent connections\npipeline-concurrent-connections: 40\n```\n\n----------------------------------------\n\nTITLE: Using the Iterate Helper Function in Nuclei JavaScript\nDESCRIPTION: The iterate() function helps iterate over various data types (arrays, maps, strings, numbers) while automatically handling empty or nil values. It simplifies iteration by removing the need for null checks and supports custom separators.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\niterate(123,{\"a\":1,\"b\":2,\"c\":3})\n// iterate over array with custom separator\niterate([1,2,3,4,5], \" \")\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Redirects for HTTP Requests\nDESCRIPTION: Defines the maximum number of redirects that should be followed by the HTTP client when making requests. This helps prevent redirect loops and limits request chains.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Follow up to 5 redirects\nmax-redirects: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Requests in Nuclei Template\nDESCRIPTION: Example showing how to define DNS requests with extractors to find EC2 instances on AWS. Includes DNS query configuration and regex extractors.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndns:\n    extractors:\n        - type: regex\n          regex:\n            - ec2-[-\\d]+\\.compute[-\\d]*\\.amazonaws\\.com\n            - ec2-[-\\d]+\\.[\\w\\d\\-]+\\.compute[-\\d]*\\.amazonaws\\.com\n    name: '{{FQDN}}'\n    type: CNAME\n    class: inet\n    retries: 2\n    recursion: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuclei Input Provider in Go\nDESCRIPTION: Function that returns an appropriate InputProvider based on the input format (list or http). It selects the provider capable of handling the specified input format and returns it.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/input/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewInputProvider(opts InputOptions) (InputProvider, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Nuclei Template YAML\nDESCRIPTION: A YAML comment followed by a list of tags for a Nuclei template. These tags categorize the template as targeting a CVE from 2019 related to Grafana with both authentication bypass and denial of service implications.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Example tags\ntags: cve,cve2019,grafana,auth-bypass,dos\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering with Template Conditions in Nuclei\nDESCRIPTION: Examples of using the -tc flag for advanced template filtering based on properties like severity, authors, protocol, and more.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve -author geeknik,pdteam  -tc severity=='high'\n{{binary}} -tc contains(authors,'pdteam')\n{{binary}} -t cves/ -t exposures/ -tc contains(tags,'cve') -exclude-templates cves/2020/CVE-2020-9757.yaml\n{{binary}} -tc protocol=='dns'\n{{binary}} -tc contains(http_method,'GET')\n{{binary}} -tc len(body)>0\n{{binary}} -tc contains(matcher_type,'word')\n{{binary}} -tc contains(extractor_type,'regex')\n{{binary}} -tc contains(description,'wordpress')\n```\n\n----------------------------------------\n\nTITLE: Defining Template Name in Nuclei\nDESCRIPTION: Example showing how to define a descriptive name for a Nuclei template that clearly identifies what the template checks for.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: bower.json file disclosure\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Nagios Default Credentials Check\n```\n\n----------------------------------------\n\nTITLE: WordPress Bruteforce with Conditional Flow Logic\nDESCRIPTION: An improved WordPress bruteforce template that uses the flow engine to first check if the target is a WordPress site before attempting login. This demonstrates conditional execution using the '&&' operator in flow.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: wordpress-bruteforce\ninfo:\n  name: WordPress Login Bruteforce\n  author: pdteam\n  severity: high\n\nflow: http(\"check-wp\") && http(\"bruteforce\")\n\nhttp:\n  - id: check-wp\n    method: GET\n    path:\n      - \"{{BaseURL}}/wp-login.php\"\n    \n    matchers:\n        - type: word\n            words:\n            - \"WordPress\"\n            part: body\n        - type: word\n            words:\n            - \"wp-content\"\n            part: body\n    matchers-condition: and\n\n  - id: bruteforce\n    method: POST\n    path:\n      - \"{{BaseURL}}/wp-login.php\"\n    payloads:\n      username:\n        - admin\n        - guest\n        - testuser\n      password:\n        - password123\n        - qwertyuiop\n        - letmein\n    body: \"log=§username§&pwd=§password§&wp-submit=Log+In\"\n    attack: clusterbomb \n    matchers:\n      - type: word\n        words:\n          - \"ERROR\"\n        part: body\n        negative: true\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Template ID in Nuclei YAML\nDESCRIPTION: Example showing how to define a unique identifier for a Nuclei template, which should clearly indicate what the template is checking for.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ID Example\nid: CVE-2021-19520\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Template Directories in Nuclei\nDESCRIPTION: Examples of how to scan with templates from specific directories using the -t flag, with various filtering options.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -t cves/\n{{binary}} -t cves/ -t exposures/\n{{binary}} -t cves/ -t exposures/ -tags config\n{{binary}} -t cves/ -t exposures/ -tags config,ssrf\n{{binary}} -t cves/ -t exposures/ -tags config -severity high,critical\n{{binary}} -t cves/ -t exposures/ -tags config -severity high,critical -author geeknik,pdteam\n{{binary}} -t cves/ -t exposures/ -tags config -severity high,critical -author geeknik,pdteam -etags sqli\n{{binary}} -t cves/ -t exposures/ -tags config -severity high,critical -author geeknik,pdteam -etags sqli -exclude-templates cves/2021/\n{{binary}} -t cves/ -t exposures/ -tags config -severity high,critical -author geeknik,pdteam -etags sqli -exclude-templates cves/2017/CVE-2017-7269.yaml\n{{binary}} -t cves/ -t exposures/ -tags config -severity high,critical -author geeknik,pdteam -etags sqli -include-templates cves/2017/CVE-2017-7269.yaml\n```\n\n----------------------------------------\n\nTITLE: DNS Request Example Config\nDESCRIPTION: Example configuration showing how to set retries for DNS requests\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nretries: 2\n```\n\n----------------------------------------\n\nTITLE: Executing Nuclei Workflows\nDESCRIPTION: Commands demonstrating how to run Nuclei workflows with optional filtering by author and severity.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -w workflows\n{{binary}} -w workflows -author geeknik,pdteam\n{{binary}} -w workflows -severity high,critical\n{{binary}} -w workflows -author geeknik,pdteam  -severity high,critical\n```\n\n----------------------------------------\n\nTITLE: Example of JavaScript Request Threads Configuration in YAML\nDESCRIPTION: This example demonstrates how to configure the number of concurrent threads for sending requests in a JavaScript protocol request. The configuration sets the thread count to 10.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# Send requests using 10 concurrent threads\nthreads: 10\n```\n\n----------------------------------------\n\nTITLE: Displaying Nuclei Help Information with Basic Command\nDESCRIPTION: Simple command to display all available flags and options for the Nuclei vulnerability scanner tool.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnuclei -h\n```\n\n----------------------------------------\n\nTITLE: Network Input Name Example - YAML\nDESCRIPTION: Example showing how to specify a name for the data read for matching purposes\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nname: prefix\n```\n\n----------------------------------------\n\nTITLE: HTTP Protocol Target Specification in Nuclei\nDESCRIPTION: Examples of how to specify HTTP protocol targets for Nuclei scans, including different URL formats.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -id tech-detect -u scanme.sh\n{{binary}} -id tech-detect -u scanme.sh:80\n{{binary}} -id tech-detect -u http://scanme.sh:80\n{{binary}} -id tech-detect -u https://scanme.sh\n```\n\n----------------------------------------\n\nTITLE: Using the Set Helper Function for Variable Management\nDESCRIPTION: The set() function adds variables to the template context (global variables) which can be used in subsequent protocol requests. This example demonstrates setting a variable during iteration over hostnames.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let vhost of myArray) {\n  set(\"vhost\", vhost);\n  http(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Network Input Hex Data Example - YAML\nDESCRIPTION: Example demonstrating hex-encoded data input using DSL helper function\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndata: hex_decode('50494e47')\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Key Parameters\nDESCRIPTION: Defines specific named parameters to target during fuzzing operations in HTTP requests. This allows selective fuzzing of particular parameters like url, file, or host.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Examples of keys\nkeys:\n    - url\n    - file\n    - host\n```\n\n----------------------------------------\n\nTITLE: Using Core Engine in Go\nDESCRIPTION: Example of using the core engine to execute templates against inputs. The engine is initialized with options, configurated with executor settings, and then executes templates against the input provider.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nengine := core.New(r.options)\nengine.SetExecuterOptions(executerOpts)\nresults := engine.ExecuteWithOpts(finalTemplates, r.hmapInputProvider, true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Request Threads in YAML\nDESCRIPTION: Example showing how to set the number of concurrent threads for sending requests.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# Send requests using 10 concurrent threads\nthreads: 10\n```\n\n----------------------------------------\n\nTITLE: Defining Executer Interface for Nuclei Protocols in Go\nDESCRIPTION: This code defines the Executer interface implemented by protocol-based request executors in Nuclei. It includes methods for compilation, execution, and result handling with callbacks.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Executer is an interface implemented any protocol based request executer.\ntype Executer interface {\n\tCompile() error\n\tRequests() int\n\tExecute(input string) (bool, error)\n\tExecuteWithResults(input string, callback OutputEventCallback) error\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging with the Log Helper Function\nDESCRIPTION: The log() function is Nuclei's alternative to console.log that pretty prints data in a readable format. It's particularly useful for debugging by examining the template context during execution.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlog(template)\n```\n\n----------------------------------------\n\nTITLE: Defining Writer Interface for Nuclei Output in Go\nDESCRIPTION: This code defines the Writer interface used in Nuclei's output package. It specifies methods for writing results, handling requests, and managing output formatting.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Writer is an interface which writes output to somewhere for nuclei events.\ntype Writer interface {\n\tClose()\n\tColorizer() aurora.Aurora\n\tWrite(*ResultEvent) error\n\tRequest(templateID, url, requestType string, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Retries in YAML\nDESCRIPTION: Example showing how to configure retry attempts for DNS requests with a recommended range of 3-5 retries.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nretries: 5\n```\n\n----------------------------------------\n\nTITLE: Defining Operators Structure in Go\nDESCRIPTION: The Operators struct contains matchers and extractors that can be applied to different protocols in Nuclei. It includes a condition to determine how matchers should be evaluated together.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Operators contain the operators that can be applied on protocols\ntype Operators struct {\n\tMatchers []*matchers.Matcher\n\tExtractors []*extractors.Extractor\n\tMatchersCondition string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Interface for Nuclei Protocols in Go\nDESCRIPTION: This snippet defines the Request interface implemented by all supported protocol-based request generators in Nuclei. It includes methods for compilation, execution, matching, extraction, and result generation.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Request is an interface implemented any protocol based request generator.\ntype Request interface {\n\tCompile(options *ExecuterOptions) error\n\tRequests() int\n\tGetID() string\n\tMatch(data map[string]interface{}, matcher *matchers.Matcher) (bool, []string)\n\tExtract(data map[string]interface{}, matcher *extractors.Extractor) map[string]struct{}\n\tExecuteWithResults(input string, dynamicValues, previous output.InternalEvent, callback OutputEventCallback) error\n\tMakeResultEventItem(wrapped *output.InternalWrappedEvent) *output.ResultEvent\n\tMakeResultEvent(wrapped *output.InternalWrappedEvent) []*output.ResultEvent\n\tGetCompiledOperators() []*operators.Operators\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Duplicate Values with Dedupe Object\nDESCRIPTION: The Dedupe object helps remove duplicate values from collections. This example demonstrates creating a dedupe object and adding various values to it, then retrieving the unique values.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet uniq = new Dedupe(); // create new dedupe object\nuniq.Add(template[\"ptrValue\"]) \nuniq.Add(template[\"ssl_subject_cn\"]);\nuniq.Add(template[\"ssl_subject_an\"]); \nlog(uniq.Values())\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structure in Go\nDESCRIPTION: The Result struct stores the outcome of operator execution, including matched and extracted data. It tracks matches, extractions, and various values for dynamic template evaluation.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Result is a result structure created from operators running on data.\ntype Result struct {\n\tMatched bool\n\tExtracted bool\n\tMatches map[string][]string\n\tExtracts map[string][]string\n\tOutputExtracts []string\n\tDynamicValues map[string]interface{}\n\tPayloadValues map[string]interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Nuclei Templates by Author\nDESCRIPTION: Examples of filtering templates by their authors. Useful when targeting templates from specific security researchers or teams.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve -author geeknik\n{{binary}} -tags cve -author geeknik,pdteam\n{{binary}} -tags cve -author geeknik -severity high\n```\n\n----------------------------------------\n\nTITLE: Defining WorkflowLoader Interface in Go\nDESCRIPTION: This code defines the WorkflowLoader interface used during workflow loading in the template compilation stage. It specifies two methods for retrieving template paths based on tags and template lists.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype WorkflowLoader interface {\n\tGetTemplatePathsByTags(tags []string) []string\n\tGetTemplatePaths(templatesList []string, noValidate bool) []string\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Tags in Nuclei Scans\nDESCRIPTION: Examples showing how to exclude specific tags from Nuclei scans using the -etags flag.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve -etags ssrf\n{{binary}} -tags cve,exposure -etags ssrf,config\n{{binary}} -tags cve,exposure -etags ssrf,config -severity high\n{{binary}} -tags cve,exposure -etags ssrf,config -severity high -author geeknik\n```\n\n----------------------------------------\n\nTITLE: Implementing Websocket Protocol in Nuclei\nDESCRIPTION: Demonstrates the structure and implementation of a protocol in Nuclei using websocket as an example. Shows required interfaces, request handling, and operation implementations.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage websocket\n\n// Request is a request for the Websocket protocol\ntype Request struct {\n\t// Operators for the current request go here.\n\toperators.Operators `yaml:\",inline,omitempty\"`\n\tCompiledOperators   *operators.Operators `yaml:\"-\"`\n\n\t// description: |\n\t//   Address contains address for the request\n\tAddress string `yaml:\"address,omitempty\" jsonschema:\"title=address for the websocket request,description=Address contains address for the request\"`\n\n    // declarations here\n}\n\n// Compile compiles the request generators preparing any requests possible.\nfunc (r *Request) Compile(options *protocols.ExecuterOptions) error {\n\tr.options = options\n\n    // request compilation here as well as client creation\n \n\tif len(r.Matchers) > 0 || len(r.Extractors) > 0 {\n\t\tcompiled := &r.Operators\n\t\tif err := compiled.Compile(); err != nil {\n\t\t\treturn errors.Wrap(err, \"could not compile operators\")\n\t\t}\n\t\tr.CompiledOperators = compiled\n\t}\n\treturn nil\n}\n\n// Requests returns the total number of requests the rule will perform\nfunc (r *Request) Requests() int {\n\tif r.generator != nil {\n\t\treturn r.generator.NewIterator().Total()\n\t}\n\treturn 1\n}\n\n// GetID returns the ID for the request if any.\nfunc (r *Request) GetID() string {\n\treturn \"\"\n}\n\n// ExecuteWithResults executes the protocol requests and returns results instead of writing them.\nfunc (r *Request) ExecuteWithResults(input string, dynamicValues, previous output.InternalEvent, callback protocols.OutputEventCallback) error {\n    // payloads init here\n\tif err := r.executeRequestWithPayloads(input, hostname, value, previous, callback); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// ExecuteWithResults executes the protocol requests and returns results instead of writing them.\nfunc (r *Request) executeRequestWithPayloads(input, hostname string, dynamicValues, previous output.InternalEvent, callback protocols.OutputEventCallback) error {\n\theader := http.Header{}\n\n    // make the actual request here after setting all options\n\n\tevent := eventcreator.CreateEventWithAdditionalOptions(r, data, r.options.Options.Debug || r.options.Options.DebugResponse, func(internalWrappedEvent *output.InternalWrappedEvent) {\n\t\tinternalWrappedEvent.OperatorsResult.PayloadValues = payloadValues\n\t})\n\tif r.options.Options.Debug || r.options.Options.DebugResponse {\n\t\tresponseOutput := responseBuilder.String()\n\t\tgologger.Debug().Msgf(\"[%s] Dumped Websocket response for %s\", r.options.TemplateID, input)\n\t\tgologger.Print().Msgf(\"%s\", responsehighlighter.Highlight(event.OperatorsResult, responseOutput, r.options.Options.NoColor))\n\t}\n\n\tcallback(event)\n\treturn nil\n}\n\nfunc (r *Request) MakeResultEventItem(wrapped *output.InternalWrappedEvent) *output.ResultEvent {\n\tdata := &output.ResultEvent{\n\t\tTemplateID:       types.ToString(r.options.TemplateID),\n\t\tTemplatePath:     types.ToString(r.options.TemplatePath),\n\t\t// ... setting more values for result event\n\t}\n\treturn data\n}\n\n// Match performs matching operation for a matcher on model and returns:\n// true and a list of matched snippets if the matcher type is supports it\n// otherwise false and an empty string slice\nfunc (r *Request) Match(data map[string]interface{}, matcher *matchers.Matcher) (bool, []string) {\n\treturn protocols.MakeDefaultMatchFunc(data, matcher)\n}\n\n// Extract performs extracting operation for an extractor on model and returns true or false.\nfunc (r *Request) Extract(data map[string]interface{}, matcher *extractors.Extractor) map[string]struct{} {\n\treturn protocols.MakeDefaultExtractFunc(data, matcher)\n}\n\n// MakeResultEvent creates a result event from internal wrapped event\nfunc (r *Request) MakeResultEvent(wrapped *output.InternalWrappedEvent) []*output.ResultEvent {\n\treturn protocols.MakeDefaultResultEvent(r, wrapped)\n}\n\n// GetCompiledOperators returns a list of the compiled operators\nfunc (r *Request) GetCompiledOperators() []*operators.Operators {\n\treturn []*operators.Operators{r.CompiledOperators}\n}\n\n// Type returns the type of the protocol request\nfunc (r *Request) Type() templateTypes.ProtocolType {\n\treturn templateTypes.WebsocketProtocol\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nuclei Library in Go\nDESCRIPTION: Import statement to include Nuclei library in a Go file\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/lib/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport nuclei \"github.com/projectdiscovery/nuclei/v3/lib\"\n```\n\n----------------------------------------\n\nTITLE: Updating Request Counting and Protocol Compilation\nDESCRIPTION: Code for updating the request counting and protocol request compilation functions to include the new websocket protocol.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Requests return the total request count for the template\nfunc (template *Template) Requests() int {\n\treturn len(template.RequestsDNS) +\n\t\t...\n\t\tlen(template.RequestsSSL) +\n\t\tlen(template.RequestsWebsocket)\n}\n\n\n// compileProtocolRequests compiles all the protocol requests for the template\nfunc (template *Template) compileProtocolRequests(options protocols.ExecuterOptions) error {\n\t...\n\n\tcase len(template.RequestsWebsocket) > 0:\n\t\trequests = template.convertRequestToProtocolsRequest(template.RequestsWebsocket)\n\t}\n\ttemplate.Executer = executer.NewExecuter(requests, &options)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: File Request Configuration in YAML\nDESCRIPTION: Example showing file request configuration with regex extractors and file extensions.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n    - type: regex\n      regex:\n        - amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\nextensions:\n    - all\n```\n\n----------------------------------------\n\nTITLE: Profiling Nuclei Performance\nDESCRIPTION: Command for generating CPU profiles, memory profiles, and trace files to analyze Nuclei's performance and resource usage.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -t nuclei-templates/ -u https://example.com -profile-mem=nuclei-$(git describe --tags)\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Trace Recursion in YAML\nDESCRIPTION: Configuration example for setting the maximum recursion depth for trace operations, with recommended values between 100-150.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# Use a retry of 100 to 150 generally\ntrace-max-recursion: 100\n```\n\n----------------------------------------\n\nTITLE: Advanced Concurrent Nuclei Engine Implementation\nDESCRIPTION: Advanced example demonstrating concurrent execution of Nuclei scans using goroutines and wait groups, with different protocol filters for different targets\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/lib/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// create nuclei engine with options\n\tne, err := nuclei.NewThreadSafeNucleiEngine()\n\tif err != nil{\n        panic(err)\n    }\n\t// setup waitgroup to handle concurrency\n\twg := &sync.WaitGroup{}\n\n\t// scan 1 = run dns templates on scanme.sh\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terr = ne.ExecuteNucleiWithOpts([]string{\"scanme.sh\"}, nuclei.WithTemplateFilters(nuclei.TemplateFilters{ProtocolTypes: \"http\"}))\n\t\tif err != nil {\n            panic(err)\n        }\n\t}()\n\n\t// scan 2 = run http templates on honey.scanme.sh\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terr = ne.ExecuteNucleiWithOpts([]string{\"honey.scanme.sh\"}, nuclei.WithTemplateFilters(nuclei.TemplateFilters{ProtocolTypes: \"dns\"}))\n\t\tif err != nil {\n            panic(err)\n        }\n\t}()\n\n\t// wait for all scans to finish\n\twg.Wait()\n\tdefer ne.Close()\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Response Size\nDESCRIPTION: Limits the maximum size of HTTP response body to read in bytes. This helps prevent memory issues when dealing with large responses.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Read max 2048 bytes of the response\nmax-size: 2048\n```\n\n----------------------------------------\n\nTITLE: Using TLS Impersonation in Nuclei\nDESCRIPTION: Example of how to use the TLS impersonation (-tlsi) flag in Nuclei for more stealthy scanning.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -id tech-detect -tlsi -u https://scanme.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei Library in Go\nDESCRIPTION: Command to add Nuclei as a dependency to a Go project using go get\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/lib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/projectdiscovery/nuclei/v3/lib\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline Requests Per Connection\nDESCRIPTION: Defines how many requests to send per connection when using HTTP pipelining. This parameter works with pipeline-concurrent-connections to optimize request throughput.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Send 100 requests per pipeline connection\npipeline-requests-per-connection: 100\n```\n\n----------------------------------------\n\nTITLE: Simple Nuclei Invocation Example\nDESCRIPTION: Basic command to run Nuclei with default settings. The {{binary}} placeholder represents the Nuclei binary name.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nuclei Application URL Based on Kubernetes Service Type\nDESCRIPTION: A template for retrieving the application URL based on service type configuration in Kubernetes. It provides commands for different deployment scenarios including Ingress, NodePort, LoadBalancer, and ClusterIP service types with appropriate kubectl commands for each case.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/helm/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.interactsh.ingress.enabled }}\n{{- range $host := .Values.interactsh.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.interactsh.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.interactsh.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"nuclei.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.interactsh.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"nuclei.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"nuclei.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.interactsh.service.port }}\n{{- else if contains \"ClusterIP\" .Values.interactsh.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"nuclei.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Nuclei Templates by Severity\nDESCRIPTION: Commands showing how to filter templates based on severity levels. This helps focus scans on vulnerabilities of specific impact levels.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve -severity high\n{{binary}} -tags cve,exposure -severity high,critical\n{{binary}} -tags cve,exposure -severity high,critical,medium\n```\n\n----------------------------------------\n\nTITLE: WebSocket Data Input Example in YAML\nDESCRIPTION: Examples of WebSocket data input configuration showing plain text and hex-encoded data transmission.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndata: TEST\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndata: hex_decode('50494e47')\n```\n\n----------------------------------------\n\nTITLE: Combined Tag and Author Filtering in Nuclei\nDESCRIPTION: Commands demonstrating how to combine multiple filtering criteria including tags, authors, and severity levels.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -tags cve,exposure -author geeknik,pdteam -severity high,critical\n{{binary}} -tags \"cve,exposure\" -author \"geeknik,pdteam\" -severity high,critical\n```\n\n----------------------------------------\n\nTITLE: Adding Template Context Variables in Go\nDESCRIPTION: Code snippet showing how to merge template context variables into the variablesMap before evaluation.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/multiproto/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvalues := generators.MergeMaps(payloadValues, hostnameVariables, request.options.GetTemplateCtx(f.input.MetaInput).GetAll())\nvariablesMap := request.options.Variables.Evaluate(values)\n```\n\n----------------------------------------\n\nTITLE: Network Protocol Target Specification in Nuclei\nDESCRIPTION: Examples showing how to specify targets for network protocol scanning in Nuclei.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -id ftp-weak-credentials -u scanme.sh\n{{binary}} -id ftp-weak-credentials -u scanme.sh:21\n```\n\n----------------------------------------\n\nTITLE: Network Input Read Example - YAML\nDESCRIPTION: Example showing how to specify number of bytes to read from socket\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nread: 1024\n```\n\n----------------------------------------\n\nTITLE: SSL Protocol Target Specification in Nuclei\nDESCRIPTION: Commands showing how to specify targets for SSL/TLS scanning in Nuclei.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/cmd/functional-test/testcases.txt#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{{binary}} -id tls-version -u scanme.sh\n{{binary}} -id tls-version -u scanme.sh:22\n```\n\n----------------------------------------\n\nTITLE: Network Input Data Example - YAML\nDESCRIPTION: Example showing how to specify data field in network input configuration for plain text data\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndata: TEST\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code for vHost Enumeration Orchestration\nDESCRIPTION: A JavaScript code snippet showing the core logic for vHost enumeration using flow. It demonstrates how to orchestrate SSL checks, DNS requests, and iterate through detected hostnames.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nssl();\ndns();\nfor (let vhost of iterate(template[\"ssl_subject_cn\"],template[\"ssl_subject_an\"])) {\n  set(\"vhost\", vhost);\n  http(); }\n```\n\n----------------------------------------\n\nTITLE: WebSocket Name Configuration Example\nDESCRIPTION: Example showing how to specify a name parameter for WebSocket data matching.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/SYNTAX-REFERENCE.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nname: prefix\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Context Variables in Nuclei\nDESCRIPTION: Template context provides access to all data and metadata related to vulnerability detection. This example shows how to access values extracted from previous requests or set by other operations.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntemplate[\"ssl_subject_cn\"] // returns value of ssl_subject_cn from template context which is available after executing ssl request \ntemplate[\"ptrValue\"]  // returns value of ptrValue which was extracted using regex with internal: true\n```\n\n----------------------------------------\n\nTITLE: Merging Template Context with Output Event\nDESCRIPTION: Code showing how to merge template context values with the output event before matching/extraction.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/multiproto/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\noutputEvent = generators.MergeMaps(outputEvent, request.options.GetTemplateCtx(f.input.MetaInput).GetAll())\n```\n\n----------------------------------------\n\nTITLE: Adding Response Fields to Template Context\nDESCRIPTION: Example of how to add protocol response fields to the template context after response processing.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/multiproto/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutputEvent := request.responseToDSLMap(compiledRequest, response, domain, question, traceData)\n// expose response variables in proto_var format\n// this is no-op if the template is not a multi protocol template\nrequest.options.AddTemplateVars(request.Type(),request.ID, outputEvent)\n```\n\n----------------------------------------\n\nTITLE: Basic Nuclei Usage Command\nDESCRIPTION: The basic command to display help information for the Nuclei vulnerability scanner.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README_ES.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnuclei -h\n```\n\n----------------------------------------\n\nTITLE: Documenting Key Files for Nuclei Testing\nDESCRIPTION: Description of the key files (ci-private-key.pem and ci.crt) used for integration testing of template signing and verification functionality in Nuclei v3.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/integration_tests/protocols/keys/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## keys\\n\\nthe keys stored here especially `ci-private-key.pem` and `ci.crt` are used in integration tests to test template signing and verfication functionality introduced in nuclei v3\n```\n\n----------------------------------------\n\nTITLE: Updating Template Types and Protocol Detection\nDESCRIPTION: Code for adding the new protocol to template types and implementing type detection in the Template.Type() function.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// TemplateTypes is a list of accepted template types\nvar TemplateTypes = []string{\n\t...\n\t\"websocket\",\n}\n\n// Type returns the type of the template\nfunc (t *Template) Type() templateTypes.ProtocolType {\n\t...\n\tcase len(t.RequestsWebsocket) > 0:\n\t\treturn templateTypes.WebsocketProtocol\n\tdefault:\n\t\treturn \"\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WordPress Bruteforce Template without Conditional Logic\nDESCRIPTION: A YAML template for WordPress login bruteforce that sends requests without first checking if the target is actually a WordPress site. This demonstrates the limitations before the flow engine was introduced.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/tmplexec/flow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: wordpress-bruteforce\ninfo:\n  name: WordPress Login Bruteforce\n  author: pdteam\n  severity: high\n\nhttp:\n  - method: POST\n    path:\n      - \"{{BaseURL}}/wp-login.php\"\n    payloads:\n      username:\n        - admin\n        - guest\n        - testuser\n      password:\n        - password123\n        - qwertyuiop\n        - letmein\n    body: \"log=§username§&pwd=§password§&wp-submit=Log+In\"\n    attack: clusterbomb \n    matchers:\n      - type: word\n        words:\n          - \"ERROR\"\n        part: body\n        negative: true\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from pastebin.com\nDESCRIPTION: The HTTP response from pastebin.com including headers with security configurations, caching information, and Cloudflare details, followed by a simple response body.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/integration_tests/protocols/offlinehttp/data/req-resp-with-http-keywords.txt#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Tue, 21 Jun 2022 09:32:01 GMT\nContent-Type: text/plain; charset=utf-8\nConnection: close\nx-frame-options: DENY\nx-content-type-options: nosniff\nx-xss-protection: 1;mode=block\ncache-control: public, max-age=1801\nCF-Cache-Status: HIT\nAge: 1585\nLast-Modified: Tue, 21 Jun 2022 09:05:36 GMT\nExpect-CT: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"\nServer: cloudflare\nCF-RAY: 71ebbc0a7ea83b8b-CDG\n\n54\nline1\nthis is a line containing HTTP/1.1 FOO BAR\nline3\n0\n```\n\n----------------------------------------\n\nTITLE: Generated JSDoc Comments for JavaScript Helper Functions\nDESCRIPTION: Shows the JSDoc comments generated by scrapefuncs for various helper functions, including their descriptions, parameters, and return types.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/devtools/scrapefuncs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Rand returns a random byte slice of length n\n * Rand(n int) []byte\n * @function\n * @param {number} n - The length of the byte slice.\n */\nfunction Rand(n) {\n    // implemented in go\n};\n\n/**\n * RandInt returns a random int\n * RandInt() int\n * @function\n */\nfunction RandInt() {\n    // implemented in go\n};\n\n/**\n * log prints given input to stdout with [JS] prefix for debugging purposes\n * log(msg string)\n * log(msg map[string]interface{})\n * @function\n * @param {string|Object} msg - The message to print.\n */\nfunction log(msg) {\n    // implemented in go\n};\n\n/**\n * getNetworkPort registers defaultPort and returns defaultPort if it is a colliding port with other protocols\n * getNetworkPort(port string, defaultPort string) string\n * @function\n * @param {string} port - The port to check.\n * @param {string} defaultPort - The default port to return if the port is colliding.\n */\nfunction getNetworkPort(port, defaultPort) {\n    // implemented in go\n};\n\n/**\n * isPortOpen checks if given port is open on host. timeout is optional and defaults to 5 seconds\n * isPortOpen(host string, port string, [timeout int]) bool\n * @function\n * @param {string} host - The host to check.\n * @param {string} port - The port to check.\n * @param {number} [timeout=5] - The timeout in seconds.\n */\nfunction isPortOpen(host, port, timeout = 5) {\n    // implemented in go\n};\n\n/**\n * ToBytes converts given input to byte slice\n * ToBytes(...interface{}) []byte\n * @function\n * @param {...any} args - The input to convert.\n */\nfunction ToBytes(...args) {\n    // implemented in go\n};\n\n/**\n * ToString converts given input to string\n * ToString(...interface{}) string\n * @function\n * @param {...any} args - The input to convert.\n */\nfunction ToString(...args) {\n    // implemented in go\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Project Directory Structure in Markdown\nDESCRIPTION: A markdown-formatted directory structure showing the organization of packages in the Nuclei project, including reporting modules, parsers, protocols, and various helper packages. Each entry includes the path and a brief description of the package's purpose.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- [pkg/reporting](./pkg/reporting) - Reporting modules for nuclei.\n- [pkg/reporting/exporters/sarif](./pkg/reporting/exporters/sarif) - Sarif Result Exporter\n- [pkg/reporting/exporters/markdown](./pkg/reporting/exporters/markdown) - Markdown Result Exporter\n- [pkg/reporting/exporters/es](./pkg/reporting/exporters/es) - Elasticsearch Result Exporter\n- [pkg/reporting/dedupe](./pkg/reporting/dedupe) - Dedupe module for Results\n- [pkg/reporting/trackers/gitlab](./pkg/reporting/trackers/gitlab) - GitLab Issue Tracker Exporter\n- [pkg/reporting/trackers/jira](./pkg/reporting/trackers/jira) - Jira Issue Tracker Exporter\n- [pkg/reporting/trackers/github](./pkg/reporting/trackers/github) - GitHub Issue Tracker Exporter\n- [pkg/reporting/format](./pkg/reporting/format) - Result Formatting Functions\n- [pkg/parsers](./pkg/parsers) - Implements template as well as workflow loader for initial template discovery, validation and - loading.\n- [pkg/types](./pkg/types) - Contains CLI options as well as misc helper functions.\n- [pkg/progress](./pkg/progress) - Progress tracking\n- [pkg/operators](./pkg/operators) - Operators for Nuclei\n- [pkg/operators/common/dsl](./pkg/operators/common/dsl) - DSL functions for Nuclei YAML Syntax\n- [pkg/operators/matchers](./pkg/operators/matchers) - Matchers implementation\n- [pkg/operators/extractors](./pkg/operators/extractors) - Extractors implementation\n- [pkg/catalog](./pkg/catalog) - Template loading from disk helpers\n- [pkg/catalog/config](./pkg/catalog/config) - Internal configuration management\n- [pkg/catalog/loader](./pkg/catalog/loader) - Implements loading and validation of templates and workflows.\n- [pkg/catalog/loader/filter](./pkg/catalog/loader/filter) - Filter filters templates based on tags and paths\n- [pkg/output](./pkg/output) - Output module for nuclei\n- [pkg/workflows](./pkg/workflows) - Workflow execution logic + declarations\n- [pkg/utils](./pkg/utils) - Utility functions\n- [pkg/model](./pkg/model) - Template Info + misc\n- [pkg/templates](./pkg/templates) - Templates core starting point\n- [pkg/templates/cache](./pkg/templates/cache) - Templates cache\n- [pkg/protocols](./pkg/protocols) - Protocol Specification\n- [pkg/protocols/file](./pkg/protocols/file) - File protocol\n- [pkg/protocols/network](./pkg/protocols/network) - Network protocol\n- [pkg/protocols/common/expressions](./pkg/protocols/common/expressions) - Expression evaluation + Templating Support\n- [pkg/protocols/common/interactsh](./pkg/protocols/common/interactsh) - Interactsh integration\n- [pkg/protocols/common/generators](./pkg/protocols/common/generators) - Payload support for Requests (Sniper, etc.)\n- [pkg/protocols/common/executer](./pkg/protocols/common/executer) - Default Template Executer\n- [pkg/protocols/common/replacer](./pkg/protocols/common/replacer) - Template replacement helpers\n- [pkg/protocols/common/helpers/eventcreator](./pkg/protocols/common/helpers/eventcreator) - Result event creator\n- [pkg/protocols/common/helpers/responsehighlighter](./pkg/protocols/common/helpers/responsehighlighter) - Debug response highlighter\n- [pkg/protocols/common/helpers/deserialization](./pkg/protocols/common/helpers/deserialization) - Deserialization helper functions\n- [pkg/protocols/common/hosterrorscache](./pkg/protocols/common/hosterrorscache) - Host errors cache for tracking erroring hosts\n- [pkg/protocols/offlinehttp](./pkg/protocols/offlinehttp) - Offline http protocol\n- [pkg/protocols/http](./pkg/protocols/http) - HTTP protocol\n- [pkg/protocols/http/race](./pkg/protocols/http/race) - HTTP Race Module\n- [pkg/protocols/http/raw](./pkg/protocols/http/raw) - HTTP Raw Request Support\n- [pkg/protocols/headless](./pkg/protocols/headless) - Headless Module\n- [pkg/protocols/headless/engine](./pkg/protocols/headless/engine) - Internal Headless implementation\n- [pkg/protocols/dns](./pkg/protocols/dns) - DNS protocol\n- [pkg/projectfile](./pkg/projectfile) - Project File Implementation\n```\n\n----------------------------------------\n\nTITLE: Defining Tracker and Exporter Interfaces for Nuclei Reporting in Go\nDESCRIPTION: This snippet defines the Tracker and Exporter interfaces used in Nuclei's reporting module. Tracker is for issue tracking, while Exporter is for exporting results to various formats.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Tracker is an interface implemented by an issue tracker\ntype Tracker interface {\n\tCreateIssue(event *output.ResultEvent) error\n}\n\n// Exporter is an interface implemented by an issue exporter\ntype Exporter interface {\n\tClose() error\n\tExport(event *output.ResultEvent) error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Interface in Go\nDESCRIPTION: This snippet defines the Preprocessor interface used for template-level data manipulation in Nuclei. It specifies a single method 'Process' that takes and returns a byte slice.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Preprocessor interface {\n\tProcess(data []byte) []byte\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Execution Trace\nDESCRIPTION: Command for examining the execution trace file generated by Nuclei profiling.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngo tool trace nuclei.trace\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Functions in Go\nDESCRIPTION: MatchFunc and ExtractFunc are function types that perform matching and extraction operations on data. The Execute function applies these operations to generate results.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// MatchFunc performs matching operation for a matcher on model and returns true or false.\ntype MatchFunc func(data map[string]interface{}, matcher *matchers.Matcher) (bool, []string)\n\n// ExtractFunc performs extracting operation for an extractor on model and returns true or false.\ntype ExtractFunc func(data map[string]interface{}, matcher *extractors.Extractor) map[string]struct{}\n\n// Execute executes the operators on data and returns a result structure\nfunc (operators *Operators) Execute(data map[string]interface{}, match MatchFunc, extract ExtractFunc, isDebug bool) (*Result, bool) \n```\n\n----------------------------------------\n\nTITLE: Updating Template Structure for New Protocol\nDESCRIPTION: Shows how to update the Template structure in templates.go to include the new protocol implementation, including imports and type declarations.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t...\n\t\"github.com/projectdiscovery/nuclei/v3/pkg/protocols/others/websocket\"\n)\n\n// Template is a YAML input file which defines all the requests and\n// other metadata for a template.\ntype Template struct {\n\t...\n\t// description: |\n\t//   Websocket contains the Websocket request to make in the template.\n\tRequestsWebsocket []*websocket.Request `yaml:\"websocket,omitempty\" json:\"websocket,omitempty\" jsonschema:\"title=websocket requests to make,description=Websocket requests to make for the template\"`\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU and Memory Profiles\nDESCRIPTION: Commands for analyzing the CPU and memory profiles generated by Nuclei, including viewing top consumers and visualizing profiles.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/DESIGN.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof nuclei.{cpu,mem}\ngo tool pprof -top nuclei.cpu | grep \"Total samples\"\ngo tool pprof -top nuclei.mem | grep \"$(go list -m)\" | head -10\ngo tool pprof -http=:$(shuf -i 1000-99999 -n 1) nuclei.{cpu,mem}\n```\n\n----------------------------------------\n\nTITLE: Validating Host with Network Policy in Go\nDESCRIPTION: A Go code snippet demonstrating how to validate a host according to network policy before establishing a connection. This is recommended when protocolstate.Dialer cannot be used directly.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/CONTRIBUTE.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nif !protocolstate.IsHostAllowed(host) {\n\t// host is not valid according to network policy\n\treturn false, protocolstate.ErrHostDenied.Msgf(host)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing scrapefuncs CLI Tool\nDESCRIPTION: Shows the usage of the scrapefuncs command-line tool, including available flags for specifying the directory to process, OpenAI API key, and output file.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/devtools/scrapefuncs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage of ./scrapefuncs:\n  -dir string\n    \tdirectory to process (default \"pkg/js/global\")\n  -key string\n    \topenai api key\n  -keyfile string\n    \topenai api key file\n  -out string\n    \toutput js file with declarations of all global functions\n```\n\n----------------------------------------\n\nTITLE: Running scrapefuncs with OpenAI Key File\nDESCRIPTION: Demonstrates running the scrapefuncs tool with an OpenAI key file, showing the output of scraped functions and their descriptions.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/devtools/scrapefuncs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scrapefuncs -keyfile ~/.openai.key                                   \n[+] Scraped 7 functions\n\nName: Rand\nSignatures: \"Rand(n int) []byte\"\nDescription: Rand returns a random byte slice of length n\n\nName: RandInt\nSignatures: \"RandInt() int\"\nDescription: RandInt returns a random int\n\nName: log\nSignatures: \"log(msg string)\"\nSignatures: \"log(msg map[string]interface{})\"\nDescription: log prints given input to stdout with [JS] prefix for debugging purposes \n\nName: getNetworkPort\nSignatures: \"getNetworkPort(port string, defaultPort string) string\"\nDescription: getNetworkPort registers defaultPort and returns defaultPort if it is a colliding port with other protocols\n\nName: isPortOpen\nSignatures: \"isPortOpen(host string, port string, [timeout int]) bool\"\nDescription: isPortOpen checks if given TCP port is open on host. timeout is optional and defaults to 5 seconds\n\nName: isUDPPortOpen\nSignatures: \"isUDPPortOpen(host string, port string, [timeout int]) bool\"\nDescription: isUDPPortOpen checks if the given UDP port is open on the host. Timeout is optional and defaults to 5 seconds.\n\nName: ToBytes\nSignatures: \"ToBytes(...interface{}) []byte\"\nDescription: ToBytes converts given input to byte slice\n\nName: ToString\nSignatures: \"ToString(...interface{}) string\"\nDescription: ToString converts given input to string\n\n\n[+] Generating jsdoc for all functions\n```\n\n----------------------------------------\n\nTITLE: Making an HTTP GET Request to pastebin.com\nDESCRIPTION: A basic HTTP GET request to the root path of pastebin.com using curl/7.79.1 as the user agent.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/integration_tests/protocols/offlinehttp/data/req-resp-with-http-keywords.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost: pastebin.com\nUser-Agent: curl/7.79.1\nAccept: */*\nConnection: close\n```\n\n----------------------------------------\n\nTITLE: Generating API Reference Documentation with JSDoc\nDESCRIPTION: Command to generate static API documentation from JavaScript files using JSDoc. The command accepts an optional homepage markdown file and theme configuration.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/devtools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\njsdoc -R [Homepage.md] -r -d api_reference -t [optional: jsdoc theme to use] generated/js\n```\n\n----------------------------------------\n\nTITLE: Starting Simple HTTP Server for Documentation Preview\nDESCRIPTION: Command to start a simple HTTP server to preview the generated API documentation locally at http://localhost:8000/\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/devtools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsimplehttpserver\n```\n\n----------------------------------------\n\nTITLE: Required PATH Dependencies for Nuclei Project\nDESCRIPTION: Lists two required dependencies that must be installed and available in the system PATH: js-beautify node plugin and gofmt\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/js/devtools/bindgen/INSTALL.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Requires `js-beautify` node plugin installed in `$PATH`.\n2. Requires `gofmt` installed in `$PATH`.\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Java Deserialization Test\nDESCRIPTION: Commands to compile Java classes (Deserialize.java and ValueObject.java) and run the Deserialize program to generate a serialized payload written to ValueObject2.ser. This is used for testing unsafe Java deserialization vulnerabilities.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/protocols/common/helpers/deserialization/testdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njavac Deserialize.java ValueObject.java\n# generate payload and write to ValueObject2.ser\njava Deserialize\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Avatar Links in HTML\nDESCRIPTION: This HTML snippet creates a linked avatar image for a GitHub user. It includes the user's profile URL and avatar image, with specified dimensions and styling.\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/README.md#2025-04-23_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/jturner\"><img src=\"https://avatars.githubusercontent.com/u/1825202?v=4\" width=\"50\" height=\"50\" alt=\"\" style=\"max-width: 100%;\"></a>\n```\n\n----------------------------------------\n\nTITLE: IP Address Range List\nDESCRIPTION: Sequential list of IP addresses from two /24 subnets, listing every possible host address in the ranges 103.57.226.0-255 and 103.58.114.0-255\nSOURCE: https://github.com/projectdiscovery/nuclei/blob/dev/pkg/input/provider/list/tests/AS134029.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n103.57.226.0\n103.57.226.1\n103.57.226.2\n[...]\n103.57.226.255\n103.58.114.0\n103.58.114.1\n103.58.114.2\n[...]\n103.58.114.255\n```"
  }
]