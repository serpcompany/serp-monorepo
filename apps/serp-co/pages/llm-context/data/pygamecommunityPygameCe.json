[
  {
    "owner": "pygame-community",
    "repo": "pygame-ce",
    "content": "TITLE: Implementing Standard Pygame Game Loop Pattern\nDESCRIPTION: Demonstrates the basic structure of a Pygame game loop including initialization, event handling, game logic updates, and rendering. The pattern enforces separation between logic and rendering to prevent concurrent update/render bugs and maintains a consistent 60 FPS frame rate.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/newbie-guide.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((1280,720))\n\nclock = pygame.time.Clock()\n\nrunning = True\n\nwhile running:\n    # Process player inputs.\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Do logical updates here.\n    # ...\n\n    screen.fill(\"purple\")  # Fill the display with a solid color\n\n    # Render the graphics here.\n    # ...\n\n    pygame.display.flip()  # Refresh on-screen display\n    clock.tick(60)         # wait until next frame (at 60 FPS)\n\npygame.quit()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Basic Pygame Animation\nDESCRIPTION: This code snippet demonstrates the basic structure of a Pygame program. It initializes Pygame, sets up a window, loads an image, and animates it bouncing around the screen. The example is reused three times with different images to illustrate various game types.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/1.Prolog/introduction.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 220, 140\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"introduction-PuyoPuyo.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Enhancing GameObject Movement for Player Control\nDESCRIPTION: Modifies the GameObject class's move method to allow for more complex movement, including up, down, left, and right directions. This prepares the game for improved user input handling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef move(self, up=False, down=False, left=False, right=False):\n    if right:\n        self.pos.right += self.speed\n    if left:\n        self.pos.right -= self.speed\n    if down:\n        self.pos.top += self.speed\n    if up:\n        self.pos.top -= self.speed\n    if self.pos.right > WIDTH:\n        self.pos.left = 0\n    if self.pos.top > HEIGHT-SPRITE_HEIGHT:\n        self.pos.top = 0\n    if self.pos.right < SPRITE_WIDTH:\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pygame Window with Text in Python\nDESCRIPTION: This code snippet demonstrates how to create a basic Pygame window, render text, and handle events. It initializes Pygame, sets up a window, creates a background surface, renders text, and implements a simple event loop for quitting the program.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games2.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/python\n\nimport pygame\nfrom pygame.locals import *\n\ndef main():\n    # Initialise screen\n    pygame.init()\n    screen = pygame.display.set_mode((150, 50))\n    pygame.display.set_caption('Basic Pygame program')\n\n    # Fill background\n    background = pygame.Surface(screen.get_size())\n    background = background.convert()\n    background.fill((250, 250, 250))\n\n    # Display some text\n    font = pygame.font.Font(None, 36)\n    text = font.render(\"Hello There\", 1, (10, 10, 10))\n    textpos = text.get_rect()\n    textpos.centerx = background.get_rect().centerx\n    background.blit(text, textpos)\n\n    # Blit everything to the screen\n    screen.blit(background, (0, 0))\n    pygame.display.flip()\n\n    # Event loop\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                return\n\n        screen.blit(background, (0, 0))\n        pygame.display.flip()\n\n\nif __name__ == '__main__': main()\n```\n\n----------------------------------------\n\nTITLE: Basic Game Structure with Object Classes in Python\nDESCRIPTION: Demonstrates the basic structure of a game using object classes in Python, including module loading, resource handling, and a main game loop.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games4.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/python\n\n# [load modules here]\n\n# [resource handling functions here]\n\nclass Ball:\n    # [ball functions (methods) here]\n    # [e.g. a function to calculate new position]\n    # [and a function to check if it hits the side]\n\ndef main:\n    # [initiate game environment here]\n\n    # [create new object as instance of ball class]\n    ball = Ball()\n\n    while True:\n        # [check for user input]\n\n        # [call ball's update function]\n        ball.update()\n```\n\n----------------------------------------\n\nTITLE: Drawing Circles with pygame.draw.circle\nDESCRIPTION: Function for drawing circles on surfaces with support for fill, stroke width, and selective quadrant drawing. Returns a bounding rectangle of the affected pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncircle(surface, color, center, radius) -> Rect\ncircle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Event Type and Attribute Reference in Pygame\nDESCRIPTION: A reference table showing the standard Pygame event types and their specific attributes. This includes events like QUIT, KEYDOWN, MOUSEMOTION, and joystick-related events with their corresponding attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nQUIT              none\nACTIVEEVENT       gain, state\nKEYDOWN           key, mod, unicode, scancode\nKEYUP             key, mod, unicode, scancode\nMOUSEMOTION       pos, rel, buttons, touch\nMOUSEBUTTONUP     pos, button, touch\nMOUSEBUTTONDOWN   pos, button, touch\nJOYAXISMOTION     joy (deprecated), instance_id, axis, value\nJOYBALLMOTION     joy (deprecated), instance_id, ball, rel\nJOYHATMOTION      joy (deprecated), instance_id, hat, value\nJOYBUTTONUP       joy (deprecated), instance_id, button\nJOYBUTTONDOWN     joy (deprecated), instance_id, button\nVIDEORESIZE       size, w, h\nVIDEOEXPOSE       none\nUSEREVENT         code\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Game Loop for Pong in Python with Pygame\nDESCRIPTION: This function initializes the Pygame screen, creates game objects, and runs the main game loop. It handles event processing, updates game state, and renders graphics.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games6.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    # Initialise screen\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    pygame.display.set_caption(\"Basic Pong\")\n\n    # Fill background\n    background = pygame.Surface(screen.get_size())\n    background = background.convert()\n    background.fill((0, 0, 0))\n\n    # Initialise players\n    global player1\n    global player2\n    player1 = Bat(\"left\")\n    player2 = Bat(\"right\")\n\n    # Initialise ball\n    speed = 13\n    rand = ((0.1 * (random.randint(5,8))))\n    ball = Ball((0,0),(0.47,speed))\n\n    # Initialise sprites\n    playersprites = pygame.sprite.Group((player1, player2))\n    ballsprite = pygame.sprite.Group(ball)\n\n    # Blit everything to the screen\n    screen.blit(background, (0, 0))\n    pygame.display.flip()\n\n    # Initialise clock\n    clock = pygame.time.Clock()\n\n    # Event loop\n    while True:\n        # Make sure game doesn't run at more than 60 frames per second\n        clock.tick(60)\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                return\n            elif event.type == KEYDOWN:\n                if event.key == K_a:\n                    player1.moveup()\n                if event.key == K_z:\n                    player1.movedown()\n                if event.key == K_UP:\n                    player2.moveup()\n                if event.key == K_DOWN:\n                    player2.movedown()\n            elif event.type == KEYUP:\n                if event.key == K_a or event.key == K_z:\n                    player1.movepos = [0,0]\n                    player1.state = \"still\"\n                if event.key == K_UP or event.key == K_DOWN:\n                    player2.movepos = [0,0]\n                    player2.state = \"still\"\n\n        screen.blit(background, ball.rect, ball.rect)\n        screen.blit(background, player1.rect, player1.rect)\n        screen.blit(background, player2.rect, player2.rect)\n        ballsprite.update()\n        playersprites.update()\n        ballsprite.draw(screen)\n        playersprites.draw(screen)\n        pygame.display.flip()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Rotating Surfaces in PyGame\nDESCRIPTION: Function for unfiltered counterclockwise rotation of a Surface by any angle in degrees. Negative angles rotate clockwise. Image is padded to fit rotated dimensions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nrotate(surface, angle) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Handling User Input for Movement in Pygame\nDESCRIPTION: This code snippet shows how to handle continuous keyboard input for smooth movement in Pygame. It uses pygame.key.get_pressed() to check if arrow keys are held down and moves the player object accordingly.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nkeys = pygame.key.get_pressed()\nif keys[pygame.K_UP]:\n    p.move(up=True)\nif keys[pygame.K_DOWN]:\n    p.move(down=True)\nif keys[pygame.K_LEFT]:\n    p.move(left=True)\nif keys[pygame.K_RIGHT]:\n    p.move(right=True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Events from Queue in Python using Pygame\nDESCRIPTION: This function gets events from the queue, optionally filtering by event type or excluding specific types. It can also automatically pump events.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nget(eventtype=None) -> Eventlist\nget(eventtype=None, pump=True) -> Eventlist\nget(eventtype=None, pump=True, exclude=None) -> Eventlist\n```\n\n----------------------------------------\n\nTITLE: Complete Pong Game Implementation in Pygame\nDESCRIPTION: Full implementation of a Pong game including imports, image loading, ball class definition with physics and collision detection. Demonstrates proper game structure and organization.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games6.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#\n# Tom's Pong\n# A simple pong game with realistic physics and AI\n# http://tomchance.org.uk/projects/pong\n#\n# Released under the GNU General Public License\n\nVERSION = \"0.4\"\n\ntry:\n    import sys\n    import random\n    import math\n    import os\n    import getopt\n    import pygame\n    from socket import *\n    from pygame.locals import *\nexcept ImportError, err:\n    print(f\"couldn't load module. {err}\")\n    sys.exit(2)\n\ndef load_png(name):\n    \"\"\" Load image and return image object\"\"\"\n    fullname = os.path.join(\"data\", name)\n    try:\n        image = pygame.image.load(fullname)\n        if image.get_alpha is None:\n            image = image.convert()\n        else:\n            image = image.convert_alpha()\n    except FileNotFoundError:\n        print(f\"Cannot load image: {fullname}\")\n        raise SystemExit\n    return image, image.get_rect()\n\nclass Ball(pygame.sprite.Sprite):\n    \"\"\"A ball that will move across the screen\n    Returns: ball object\n    Functions: update, calcnewpos\n    Attributes: area, vector\"\"\"\n\n    def __init__(self, (xy), vector):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png(\"ball.png\")\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.vector = vector\n        self.hit = 0\n\n    def update(self):\n        newpos = self.calcnewpos(self.rect,self.vector)\n        self.rect = newpos\n        (angle,z) = self.vector\n\n        if not self.area.contains(newpos):\n            tl = not self.area.collidepoint(newpos.topleft)\n            tr = not self.area.collidepoint(newpos.topright)\n            bl = not self.area.collidepoint(newpos.bottomleft)\n            br = not self.area.collidepoint(newpos.bottomright)\n            if tr and tl or (br and bl):\n                angle = -angle\n            if tl and bl:\n                #self.offcourt()\n                angle = math.pi - angle\n            if tr and br:\n                angle = math.pi - angle\n                #self.offcourt()\n        else:\n            # Deflate the rectangles so you can't catch a ball behind the bat\n            player1.rect.inflate(-3, -3)\n            player2.rect.inflate(-3, -3)\n\n            if self.rect.colliderect(player1.rect) == 1 and not self.hit:\n                angle = math.pi - angle\n                self.hit = not self.hit\n            elif self.rect.colliderect(player2.rect) == 1 and not self.hit:\n                angle = math.pi - angle\n                self.hit = not self.hit\n            elif self.hit:\n                self.hit = not self.hit\n        self.vector = (angle,z)\n\n    def calcnewpos(self,rect,vector):\n        (angle,z) = vector\n```\n\n----------------------------------------\n\nTITLE: Basic Sprite Collision Detection Example\nDESCRIPTION: Demonstrates how to handle sprite collisions between a player and bombs using spritecollide() function. Creates explosions and plays sound effects for each collision.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-sprites.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor bomb in sprite.spritecollide(player, bombs, 1):\n    boom_sound.play()\n    Explosion(bomb, 0)\n```\n\n----------------------------------------\n\nTITLE: Drawing Antialiased Circles with pygame.draw.aacircle\nDESCRIPTION: Function for drawing antialiased circles using the Xiaolin Wu Circle Algorithm. Supports fill, stroke width, and selective quadrant drawing. Returns a bounding rectangle of the affected pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naacircle(surface, color, center, radius) -> Rect\naacircle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Loading an Image with pygame.image.load\nDESCRIPTION: Demonstrates how to load an image file into a Surface object. The example shows loading a PNG file with a platform-compatible path.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasurf = pygame.image.load(os.path.join('data', 'bla.png'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling in Pygame\nDESCRIPTION: Shows how to handle user input events in Pygame. This code sets up a main loop that checks for quit events and calls a function to update game objects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            sys.exit()\n    move_and_draw_all_game_objects()\n```\n\n----------------------------------------\n\nTITLE: Group Collision Detection Example\nDESCRIPTION: Shows how to handle collisions between two groups (aliens and shots) using groupcollide() function. Creates explosions, plays sounds, and tracks kills for each collision.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-sprites.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor alien in sprite.groupcollide(aliens, shots, 1, 1).keys():\n    boom_sound.play()\n    Explosion(alien, 0)\n    kills += 1\n```\n\n----------------------------------------\n\nTITLE: Ball Class Implementation in Pygame\nDESCRIPTION: Implements a Ball class inheriting from pygame.sprite.Sprite, with methods for initialization, updating position, and calculating new position based on vector physics.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games4.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Ball(pygame.sprite.Sprite):\n    \"\"\"A ball that will move across the screen\n    Returns: ball object\n    Functions: update, calcnewpos\n    Attributes: area, vector\"\"\"\n\n    def __init__(self, vector):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png('ball.png')\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.vector = vector\n\n    def update(self):\n        newpos = self.calcnewpos(self.rect,self.vector)\n        self.rect = newpos\n\n    def calcnewpos(self,rect,vector):\n        (angle,z) = vector\n        (dx,dy) = (z*math.cos(angle),z*math.sin(angle))\n        return rect.move(dx,dy)\n```\n\n----------------------------------------\n\nTITLE: Drawing an Elliptical Arc in Pygame\nDESCRIPTION: Function to draw an elliptical arc on a surface. It takes parameters for the surface, color, rectangle defining the ellipse bounds, start and stop angles in radians, and optional width for line thickness.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npygame.draw.arc(surface, color, rect, start_angle, stop_angle, width=1)\n```\n\n----------------------------------------\n\nTITLE: Creating Bouncing Ball Animation with Pygame\nDESCRIPTION: A basic example demonstrating core Pygame functionality by creating an animated bouncing ball. Shows window creation, image loading, event handling, collision detection, and screen updates using the display buffer.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-pygame.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"intro_ball.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Animating a Bouncing Ball in Pygame\nDESCRIPTION: This code creates a Pygame window and animates a ball image moving and bouncing off the screen edges. It demonstrates basic Pygame setup, image loading, and animation logic.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/3.Move_text/Basic PROCESS.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 220, 140\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"Bagic-PROCESS-sourcecode.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Display and Window Settings\nDESCRIPTION: Sets up the Pygame environment by initializing modules, creating a scaled window, setting caption and hiding mouse cursor.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npygame.init()\nscreen = pygame.display.set_mode((1280, 480), pygame.SCALED)\npygame.display.set_caption(\"Monkey Fever\")\npygame.mouse.set_visible(False)\n```\n\n----------------------------------------\n\nTITLE: Loading PNG Images in Pygame with Error Handling\nDESCRIPTION: This function loads PNG images for a Pygame project, handling file paths, image conversion, and error cases. It returns both the image object and its rectangle.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games3.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef load_png(name):\n    \"\"\" Load image and return image object\"\"\"\n    fullname = os.path.join(\"data\", name)\n    try:\n        image = pygame.image.load(fullname)\n        if image.get_alpha() is None:\n            image = image.convert()\n        else:\n            image = image.convert_alpha()\n    except FileNotFoundError:\n        print(f\"Cannot load image: {fullname}\")\n        raise SystemExit\n    return image, image.get_rect()\n```\n\n----------------------------------------\n\nTITLE: Complete Pygame Game Loop with Movement and Input Handling\nDESCRIPTION: This code snippet presents a complete Pygame game loop that incorporates object creation, movement, input handling, and rendering. It demonstrates how to set up a basic game structure with multiple objects and player control.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nscreen = pygame.display.set_mode((640, 480))\nclock = pygame.time.Clock()            #get a pygame clock object\nplayer = pygame.image.load('player.bmp').convert()\nentity = pygame.image.load('alien1.bmp').convert()\nbackground = pygame.image.load('background.bmp').convert()\nscreen.blit(background, (0, 0))\nobjects = []\np = GameObject(player, 10, 3)          #create the player object\nfor x in range(10):                    #create 10 objects</i>\n    o = GameObject(entity, x*40, x)\n    objects.append(o)\nwhile True:\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_UP]:\n        p.move(up=True)\n    if keys[pygame.K_DOWN]:\n        p.move(down=True)\n    if keys[pygame.K_LEFT]:\n        p.move(left=True)\n    if keys[pygame.K_RIGHT]:\n        p.move(right=True)\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            sys.exit()\n    for o in objects:\n        screen.blit(background, o.pos, o.pos)\n    for o in objects:\n        o.move()\n        screen.blit(o.image, o.pos)\n    pygame.display.update()\n    clock.tick(60)\n```\n\n----------------------------------------\n\nTITLE: Keyboard-Controlled Text Movement in Pygame\nDESCRIPTION: Implements keyboard arrow key controls for moving text on screen. The program handles KEYDOWN events for all four arrow keys and updates the text position accordingly.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/4.Control_text/Basic INPUT.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nwhite = (255,255,255)\nred = (255,0,0)\ngreen = (0,255,0)\npygame.init()\npygame.display.set_caption(\"Controlling World Project\")\nmyScreen = pygame.display.set_mode((640, 480))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render(\"Controlling World!\", True, red, green)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (320, 240)\nfpsClock = pygame.time.Clock()\nx = 0\ny = 0\nmoveRight = 0\nmoveDown = 0\n\nwhile True:\n    moveRight = 0\n    moveDown = 0\n    myTextArea.center = (320 + x, 240 + y)\n    myScreen.fill(white)\n    myScreen.blit(myText, myTextArea)\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n        elif event.type == KEYDOWN:\n            if event.key == K_UP:\n                moveDown = -1\n                moveRight = 0\n            elif event.key == K_LEFT:\n                moveDown = 0\n                moveRight = -1\n            elif event.key == K_DOWN:\n                moveDown = 1\n                moveRight = 0\n            elif event.key == K_RIGHT:\n                moveDown = 0\n                moveRight = 1\n\n    if(moveRight == 1):\n        x = x + 10\n    elif(moveRight == -1):\n        x = x - 10\n    if(moveDown == 1):\n        y = y + 10\n    elif(moveDown == -1):\n        y = y - 10\n\n    pygame.display.update()\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Key Presses in Pygame\nDESCRIPTION: Demonstrates how to check if multiple keys are pressed simultaneously using Pygame's key.get_pressed() function.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/newbie-guide.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nif key.get_pressed[K_t] and key.get_pressed[K_f]:\n    print(\"Yup!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Modules in Python\nDESCRIPTION: Initializes all imported pygame modules. Returns a tuple with the number of successful and failed module initializations. Safe to call multiple times.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ninit() -> (numpass, numfail)\n```\n\n----------------------------------------\n\nTITLE: Drawing Multiple Contiguous Line Segments in Pygame\nDESCRIPTION: Function to draw multiple connected line segments on a surface. It takes parameters for the surface, color, a boolean indicating if the shape should be closed, a sequence of points, and optional width for line thickness.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npygame.draw.lines(surface, color, closed, points, width=1)\n```\n\n----------------------------------------\n\nTITLE: Character Movement and Animation Logic in Pygame\nDESCRIPTION: Implements character movement logic for a monkey sprite, handling walking and spinning animations. Includes methods for movement boundaries, sprite flipping, and rotation effects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/ChimpanceLineaporLinea.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef _walk(self):\n    \"\"\"move the monkey across the screen, and turn at the ends\"\"\"\n    newpos = self.rect.move((self.move, 0))\n    if not self.area.contains(newpos):\n        if self.rect.left < self.area.left or self.rect.right > self.area.right:\n            self.move = -self.move\n            newpos = self.rect.move((self.move, 0))\n            self.image = pg.transform.flip(self.image, True, False)\n    self.rect = newpos\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Pygame Game Loop\nDESCRIPTION: Combines all previous concepts into a complete game loop. This code initializes the game, creates multiple game objects, and handles their movement and drawing in the main loop.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nscreen = pygame.display.set_mode((640, 480))\nclock = pygame.time.Clock()            #get a pygame clock object\nplayer = pygame.image.load('player.bmp').convert()\nbackground = pygame.image.load('background.bmp').convert()\nscreen.blit(background, (0, 0))\nobjects = []\nfor x in range(10):                    #create 10 objects</i>\n    o = GameObject(player, x*40, x)\n    objects.append(o)\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            sys.exit()\n    for o in objects:\n        screen.blit(background, o.pos, o.pos)\n    for o in objects:\n        o.move()\n        screen.blit(o.image, o.pos)\n    pygame.display.update()\n    clock.tick(60)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Straight Line in Pygame\nDESCRIPTION: Function to draw a straight line on a surface. It takes parameters for the surface, color, start and end positions, and optional width for line thickness.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npygame.draw.line(surface, color, start_pos, end_pos, width=1)\n```\n\n----------------------------------------\n\nTITLE: Basic Ball Movement with Pygame\nDESCRIPTION: Creates a simple animation of a ball bouncing within screen boundaries using Pygame. The program initializes a window, loads a ball image, and handles basic movement and collision detection.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/4.Control_text/Basic INPUT.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 220, 140\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"Bagic-INPUT-sourcecode.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing Images in Pygame\nDESCRIPTION: This function loads an image, converts it for faster blitting, scales it, and sets a colorkey for transparency. It returns the processed image and its rect.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef load_image(name, colorkey=None, scale=1):\n    fullname = os.path.join(data_dir, name)\n    image = pygame.image.load(fullname)\n    image = image.convert()\n\n    image = pygame.transform.scale_by(image, scale)\n\n    if colorkey is not None:\n        if colorkey == -1:\n            colorkey = image.get_at((0, 0))\n        image.set_colorkey(colorkey, pygame.RLEACCEL)\n    return image, image.get_rect()\n```\n\n----------------------------------------\n\nTITLE: Detecting Sprite Collisions with Group in Python using Pygame\nDESCRIPTION: This code snippet demonstrates how to use the spritecollide function to detect collisions between a player sprite and a group of block sprites. It removes colliding blocks and updates the score.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# See if the Sprite block has collided with anything in the Group block_list\n# The True flag will remove the sprite in block_list\nblocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)\n\n# Check the list of colliding sprites, and add one to the score for each one\nfor block in blocks_hit_list:\n    score +=1\n```\n\n----------------------------------------\n\nTITLE: Creating a Chimp Sprite Class in Pygame\nDESCRIPTION: This class represents the chimp character that moves across the screen and can spin when punched. It inherits from pygame.sprite.Sprite and includes methods for walking, spinning, and handling punches.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass Chimp(pygame.sprite.Sprite):\n    \"\"\"moves a monkey critter across the screen. it can spin the\n    monkey when it is punched.\"\"\"\n\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)  # call Sprite initializer\n        self.image, self.rect = load_image(\"chimp.webp\", -1, 4)\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.rect.topleft = 10, 90\n        self.move = 18\n        self.dizzy = False\n\n    def update(self):\n        \"\"\"walk or spin, depending on the monkeys state\"\"\"\n        if self.dizzy:\n            self._spin()\n        else:\n            self._walk()\n\n    def _walk(self):\n        \"\"\"move the monkey across the screen, and turn at the ends\"\"\"\n        newpos = self.rect.move((self.move, 0))\n        if not self.area.contains(newpos):\n            if self.rect.left < self.area.left or self.rect.right > self.area.right:\n                self.move = -self.move\n                newpos = self.rect.move((self.move, 0))\n                self.image = pygame.transform.flip(self.image, True, False)\n        self.rect = newpos\n\n    def _spin(self):\n        \"\"\"spin the monkey image\"\"\"\n        center = self.rect.center\n        self.dizzy = self.dizzy + 12\n        if self.dizzy >= 360:\n            self.dizzy = False\n            self.image = self.original\n        else:\n            rotate = pygame.transform.rotate\n            self.image = rotate(self.original, self.dizzy)\n        self.rect = self.image.get_rect(center=center)\n\n    def punched(self):\n        \"\"\"this will cause the monkey to start spinning\"\"\"\n        if not self.dizzy:\n            self.dizzy = True\n            self.original = self.image\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Project and Importing Modules in Python\nDESCRIPTION: This snippet demonstrates the initial setup for a Pygame project, including file metadata, version information, and importing necessary modules with error handling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games3.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/env python\n#\n# Tom's Pong\n# A simple pong game with realistic physics and AI\n# http://tomchance.org.uk/projects/pong\n#\n# Released under the GNU General Public License\n\nVERSION = \"0.4\"\n\ntry:\n    import sys\n    import random\n    import math\n    import os\n    import getopt\n    import pygame\n    from socket import *\n    from pygame.locals import *\nexcept ImportError, err:\n    print(f\"couldn't load module. {err}\")\n    sys.exit(2)\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Angle in Python\nDESCRIPTION: Demonstrates the angle_to method of Vector2, which calculates the angle between two vectors in degrees without crossing the negative x-axis.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nangle_to(Vector2, /) -> float\n```\n\n----------------------------------------\n\nTITLE: Pygame 2 New Events Reference\nDESCRIPTION: New event types introduced in Pygame 2, including file drop events, MIDI events, and controller hot-plugging events. Shows event names and their associated attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nEvent name               Attributes and notes\n\nDROPFILE                 file\nDROPBEGIN\nDROPCOMPLETE\nDROPTEXT\nMIDIIN\nMIDIOUT\nCONTROLLERDEVICEADDED    device_index\nJOYDEVICEADDED           device_index\nCONTROLLERDEVICEREMOVED  instance_id\nJOYDEVICEREMOVED         instance_id\nCONTROLLERDEVICEREMAPPED instance_id\nKEYMAPCHANGED\nCLIPBOARDUPDATE\nRENDER_TARGETS_RESET\nRENDER_DEVICE_RESET\nLOCALECHANGED\n```\n\n----------------------------------------\n\nTITLE: Complete Red or Black Game Implementation\nDESCRIPTION: Full implementation of the Red or Black counting game including board generation, HP management, UI drawing, and game logic. Features include random board generation, click detection, and score tracking.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys, random\nfrom pygame.locals import*\n\nmaxHP = 10\nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"Red or Black Project\")\nwidth = 640\nheight = 480\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2)\nfpsClock = pygame.time.Clock()\n\ndef main():\n    HP = 5\n    board, b_red, b_black = generateBoard(5,5) #1\n\n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n\n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP)\n        drawButtons()\n        drawBoard(board) #2\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n            elif event.type == MOUSEBUTTONUP:\n                x, y = event.pos\n\n                if pygame.Rect(270, 425, 45, 45).collidepoint(x, y): #3\n                    if b_red >= b_black:\n                        if HP != 10:\n                            HP = HP + 1\n                        board, b_red, b_black = generateBoard(5,5)\n                    elif b_red < b_black:\n                        if HP != 0:\n                            HP = HP - 1\n                        board, b_red, b_black = generateBoard(5,5)\n\n                elif pygame.Rect(325, 425, 45, 45).collidepoint(x, y): #4\n                    if b_red <= b_black:\n                        if HP != 10:\n                            HP = HP + 1\n                        board, b_red, b_black = generateBoard(5,5)\n                    elif b_red > b_black:\n                        if HP != 0:\n                            HP = HP - 1\n                        board, b_red, b_black = generateBoard(5,5)\n\n        pygame.display.update()\n        fpsClock.tick(60)\n\ndef drawHP(HP):\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, gray, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, blue, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\ndef drawButtons():\n    r = 45\n    r_margin = 10\n    colors = [red, black]\n\n    num = 2\n    margin = int((width - ((r * num) + (r_margin * (num - 1)))) / 2)\n\n    for i in range(0, num):\n        left = margin + (i * r) + (i * r_margin)\n        up = height - r - 10\n        pygame.draw.rect(myScreen, colors[i], (left, up, r, r))\n        pygame.draw.rect(myScreen, gray, (left + 2, up + 2, r - 4, r - 4), 2)\n\ndef generateBoard(width, height): #5\n    board = []\n    b_red = 0\n    b_black = 0\n\n    for x in range(width):\n        column = []\n        for y in range(height):\n            column.append(random.randint(0, 1))\n        board.append(column)\n\n    for x in range(width):\n        for y in range(height):\n            if(board[x][y] == 1):\n                 b_red = b_red + 1\n            elif(board[x][y] == 0):\n                b_black = b_black + 1\n\n    return board, b_red, b_black\n\ndef drawBoard(board): #6\n    r = 50\n    b_width = 5\n    b_height = 5\n    l_margin = int((width - (b_width * r)) / 2)\n    u_margin = int((height - (b_height * r)) / 2)\n\n    for x in range(5):\n        for y in range(5):\n            left = x * r + l_margin\n            up = y * r + u_margin\n            if board[x][y] == 1:\n                color = red;\n            elif board[x][y] == 0:\n                color = black\n            pygame.draw.rect(myScreen, color, (left, up, r, r))\n\n    left = l_margin\n    up = u_margin\n    pygame.draw.rect(myScreen, white, (left-1, up-1, r * 5 + 1, r * b_height + 1), 1)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Smooth Surface Scaling in PyGame\nDESCRIPTION: Function for high-quality surface scaling using area averaging for shrinkage. Only works with 24-bit or 32-bit surfaces.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nsmoothscale(surface, size, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Surface (Python)\nDESCRIPTION: Example of creating a simple Pygame Surface with a specified size, filling it with a color, and blitting it onto another surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# create a surface of size 50x50 and fill it with red color\nred_surf = pygame.Surface((50, 50))\nred_surf.fill(\"red\")\n\n# draw the surface on another surface at position (0, 0)\nanother_surface.blit(red_surf, (0, 0))\n```\n\n----------------------------------------\n\nTITLE: Loading Sound Files in Pygame with Error Handling\nDESCRIPTION: This function loads a sound file and returns a Sound object. It includes error handling for when the mixer is not initialized, returning a NoneSound object with a dummy play method.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef load_sound(name):\n    class NoneSound:\n        def play(self):\n            pass\n\n    if not pygame.mixer.get_init():\n        return NoneSound()\n\n    fullname = os.path.join(data_dir, name)\n    sound = pygame.mixer.Sound(fullname)\n\n    return sound\n```\n\n----------------------------------------\n\nTITLE: Implementing Bat Class for Pong Game in Python\nDESCRIPTION: This class represents the movable tennis 'bat' (paddle) in the Pong game. It handles initialization, movement, and updating of the bat's position.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games6.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Bat(pygame.sprite.Sprite):\n    \"\"\"Movable tennis 'bat' with which one hits the ball\n    Returns: bat object\n    Functions: reinit, update, moveup, movedown\n    Attributes: which, speed\"\"\"\n\n    def __init__(self, side):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png(\"bat.png\")\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.side = side\n        self.speed = 10\n        self.state = \"still\"\n        self.reinit()\n\n    def reinit(self):\n        self.state = \"still\"\n        self.movepos = [0,0]\n        if self.side == \"left\":\n            self.rect.midleft = self.area.midleft\n        elif self.side == \"right\":\n            self.rect.midright = self.area.midright\n\n    def update(self):\n        newpos = self.rect.move(self.movepos)\n        if self.area.contains(newpos):\n            self.rect = newpos\n        pygame.event.pump()\n\n    def moveup(self):\n        self.movepos[1] = self.movepos[1] - (self.speed)\n        self.state = \"moveup\"\n\n    def movedown(self):\n        self.movepos[1] = self.movepos[1] + (self.speed)\n        self.state = \"movedown\"\n```\n\n----------------------------------------\n\nTITLE: Sprite Updates and Screen Drawing\nDESCRIPTION: Updates all sprite positions and redraws the entire game scene including background and sprites.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nall_sprites.update()\n\nscreen.blit(background, (0, 0))\nall_sprites.draw(screen)\npygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Normalizing Vector in Vector3 Class (Python)\nDESCRIPTION: Returns a new vector with the same direction but length 1.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nnormalize() -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Block Sprite Class in Python using Pygame\nDESCRIPTION: Example showing how to properly subclass pygame.sprite.Sprite to create a custom Block object. The example demonstrates the correct initialization order, creating the image surface, filling it with color, and setting up the rect attribute.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Block(pygame.sprite.Sprite):\n\n    # Constructor. Pass in the color of the block,\n    # and its x and y position\n    def __init__(self, color, width, height):\n       # Call the parent class (Sprite) constructor\n       pygame.sprite.Sprite.__init__(self)\n\n       # Create an image of the block, and fill it with a color.\n       # This could also be an image loaded from the disk.\n       self.image = pygame.Surface([width, height])\n       self.image.fill(color)\n\n       # Fetch the rectangle object that has the dimensions of the image\n       # Update the position of this object by setting the values of rect.x and rect.y\n       self.rect = self.image.get_rect()\n```\n\n----------------------------------------\n\nTITLE: Collision Detection Examples with Pygame Rect\nDESCRIPTION: This code demonstrates various ways to use the collidelistall method of a Rect object, including with different types of input sequences and custom objects with rect attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRect = pygame.Rect\nr = Rect(0, 0, 10, 10)\n\nlist_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]\nindices0 = r.collidelistall(list_of_rects)\n\nlist_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]\nindices1 = r.collidelistall(list_of_lists)\n\nlist_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]\nindices2 = r.collidelistall(list_of_tuples)\n\nlist_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]\nindices3 = r.collidelistall(list_of_double_tuples)\n\nclass ObjectWithRectAttribute(object):\n    def __init__(self, r):\n        self.rect = r\n\nlist_of_object_with_rect_attribute = [\n    ObjectWithRectAttribute(Rect(1, 1, 1, 1)),\n    ObjectWithRectAttribute(Rect(2, 2, 2, 2)),\n]\nindices4 = r.collidelistall(list_of_object_with_rect_attribute)\n\nclass ObjectWithCallableRectAttribute(object):\n    def __init__(self, r):\n        self._rect = r\n\n    def rect(self):\n        return self._rect\n\nlist_of_object_with_callable_rect = [\n    ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),\n    ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),\n]\nindices5 = r.collidelistall(list_of_object_with_callable_rect)\n```\n\n----------------------------------------\n\nTITLE: Converting Surface with Alpha Channel in Pygame\nDESCRIPTION: The convert_alpha method creates a new copy of the surface optimized for alpha blitting to the display surface, preserving per-pixel alphas.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSurface.convert_alpha() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangles with pygame.draw.rect\nDESCRIPTION: Function for drawing rectangles on surfaces with support for fill, stroke width, and rounded corners. Returns a bounding rectangle of the affected pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrect(surface, color, rect) -> Rect\nrect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Custom Render Group Implementation\nDESCRIPTION: Example of creating a custom rendering group class that calls a draw() method for each sprite instead of blitting an image. Inherits from Group and tracks dirty rectangles for efficient updating.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-sprites.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RenderUpdatesDraw(Group):\n    \"\"\"call sprite.draw(screen) to render sprites\"\"\"\n    def draw(self, surface):\n        dirty = self.lostsprites\n        self.lostsprites = []\n        for s, r in self.spritedict.items():\n            newrect = s.draw(screen) #Here's the big change\n            if r is 0:\n                dirty.append(newrect)\n            else:\n                dirty.append(newrect.union(r))\n            self.spritedict[s] = newrect\n        return dirty\n```\n\n----------------------------------------\n\nTITLE: Loading Images in Pygame\nDESCRIPTION: Shows how to load and convert images for use in Pygame. The convert() method is used to optimize the image for faster blitting.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nplayer = pygame.image.load('player.bmp').convert()\nbackground = pygame.image.load('liquid.webp').convert()\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame Modules\nDESCRIPTION: Shows the standard way to import Pygame and its local constants into a Python script. This method imports all available Pygame modules and optionally adds common constants to the global namespace.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/import-init.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\nfrom pygame.locals import *\n```\n\n----------------------------------------\n\nTITLE: Creating a Mask for Sprite Collision Detection in Python using Pygame\nDESCRIPTION: This code snippet shows how to create a mask for a sprite to be used in collision detection. The mask is created from the sprite's image surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example of mask creation for a sprite.\nsprite.mask = pygame.mask.from_surface(sprite.image)\n```\n\n----------------------------------------\n\nTITLE: In-Place Vector Normalization in Vector3 Class (Python)\nDESCRIPTION: Normalizes the vector in place so that its length is 1, maintaining its direction.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nnormalize_ip() -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled Triangle in Pygame\nDESCRIPTION: Draws a filled triangle on a surface. Takes surface, three sets of (x,y) coordinates and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfilled_trigon(surface, x1, y1, x2, y2, x3, y3, color)\n```\n\n----------------------------------------\n\nTITLE: Window Events in Pygame 2.0.1+\nDESCRIPTION: List of window-related events added in Pygame 2.0.1, including events for window visibility, focus, movement, and resizing. Each event type includes a short description of when it's triggered.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nEvent type                Short description\n\nWINDOWSHOWN            Window became shown\nWINDOWHIDDEN           Window became hidden\nWINDOWEXPOSED          Window got updated by some external event\nWINDOWMOVED            Window got moved\nWINDOWRESIZED          Window got resized\nWINDOWSIZECHANGED      Window changed its size\nWINDOWMINIMIZED        Window was minimized\nWINDOWMAXIMIZED        Window was maximized\nWINDOWRESTORED         Window was restored\nWINDOWENTER            Mouse entered the window\nWINDOWLEAVE            Mouse left the window\nWINDOWFOCUSGAINED      Window gained focus\nWINDOWFOCUSLOST        Window lost focus\nWINDOWCLOSE            Window was closed\nWINDOWTAKEFOCUS        Window was offered focus\nWINDOWHITTEST          Window has a special hit test\nWINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)\nWINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mouse Wheel Events in Pygame 2\nDESCRIPTION: Example demonstrating how to detect and handle mouse wheel events in Pygame 2. The code initializes a window and enters a game loop that prints information about mouse wheel events, including scroll direction, amount, and which mouse device triggered the event.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mouse.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Taken from husano896's PR thread (slightly modified)\nimport pygame\nfrom pygame.locals import *\npygame.init()\nscreen = pygame.display.set_mode((640, 480))\nclock = pygame.time.Clock()\n\ndef main():\n   while True:\n      for event in pygame.event.get():\n            if event.type == QUIT:\n               pygame.quit()\n               return\n            elif event.type == MOUSEWHEEL:\n               print(event)\n               print(event.x, event.y)\n               print(event.flipped)\n               print(event.which)\n               # can access properties with\n               # proper notation(ex: event.y)\n      clock.tick(60)\n\n# Execute game:\nmain()\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Pixels in a PixelArray\nDESCRIPTION: This code demonstrates different ways to assign color values to individual pixels in a PixelArray, including using integer values, pygame.Color objects, and RGB tuples.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npxarray[x, y] = 0xFF00FF\npxarray[x, y] = pygame.Color(255, 0, 255)\npxarray[x, y] = (255, 0, 255)\n```\n\n----------------------------------------\n\nTITLE: Converting Surface Pixel Format in Pygame\nDESCRIPTION: The convert method creates a new copy of the Surface with a changed pixel format. It can adapt to another surface's format or use specified depth, flags, and masks.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nSurface.convert(surface, /) -> Surface\nSurface.convert(depth, flags=0, /) -> Surface\nSurface.convert(masks, flags=0, /) -> Surface\nSurface.convert() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Defining GameObject Class for Multiple Moving Images\nDESCRIPTION: Creates a GameObject class to represent multiple moving images. The class includes methods for initializing the object and moving it on the screen.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass GameObject:\n    def __init__(self, image, height, speed):\n        self.speed = speed\n        self.image = image\n        self.pos = image.get_rect().move(0, height)\n    def move(self):\n        self.pos = self.pos.move(0, self.speed)\n        if self.pos.right > 600:\n            self.pos.left = 0\n```\n\n----------------------------------------\n\nTITLE: Filling a Surface with Color in Pygame\nDESCRIPTION: The fill method fills the Surface with a solid color. It can fill the entire surface or a specific rectangular area, respecting the surface's clip area.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nSurface.fill(color, rect=None, special_flags=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Reflecting Vector in Vector3 Class (Python)\nDESCRIPTION: Returns a new vector reflected off a given normal surface. The length of the new vector remains the same as the original.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nreflect(Vector3, /) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Main Game Loop Implementation\nDESCRIPTION: Implements the main game loop with framerate control using pygame Clock.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngoing = True\nwhile going:\n    clock.tick(60)\n```\n\n----------------------------------------\n\nTITLE: Initializing All Pygame Modules\nDESCRIPTION: Demonstrates the standard way to initialize all available Pygame modules at once. This is the most common initialization method used in Pygame applications.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/import-init.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npygame.init()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Screen and Clock\nDESCRIPTION: Sets up the Pygame screen, clock, player, and background images. This snippet demonstrates how to create a game window and load images for use in the game.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nscreen = create_screen()\nclock = pygame.time.Clock()            #get a pygame clock object\nplayer = load_player_image()\nbackground = load_background_image()\nscreen.blit(background, (0, 0))        #draw the background\nposition = player.get_rect()\nscreen.blit(player, position)          #draw the player\npygame.display.update()                #and show it all\n```\n\n----------------------------------------\n\nTITLE: Rendering Text to a Surface in Pygame\nDESCRIPTION: Creates a new Surface with the specified text rendered on it. Supports antialiasing, color, background color, and text wrapping. Returns different Surface types based on antialiasing and background settings.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nrender(text, antialias, color, bgcolor=None, wraplength=0) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Blitting Multiple Surfaces with fblits in Pygame\nDESCRIPTION: The fblits method allows for efficient blitting of multiple surfaces onto the current surface. It accepts a sequence of (source, dest) pairs and a single special_flags value for blending mode.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSurface.fblits(blit_sequence, special_flags=0)\n```\n\n----------------------------------------\n\nTITLE: Testing Circle Collision Methods\nDESCRIPTION: Examples of using the collidepoint, collidecircle, colliderect, and collideswith methods to test for collisions between shapes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# collidepoint examples\ncircle.collidepoint((x, y))\ncircle.collidepoint(x, y)\ncircle.collidepoint(vector2)\n\n# collidecircle examples\ncircle.collidecircle(other_circle)\ncircle.collidecircle(x, y, radius)\ncircle.collidecircle((x, y), radius)\ncircle.collidecircle(vector2, radius)\n\n# colliderect examples\ncircle.colliderect(rect)\ncircle.colliderect((x, y, width, height))\ncircle.colliderect(x, y, width, height)\ncircle.colliderect((x, y), (width, height))\ncircle.colliderect(vector2, (width, height))\n\n# collideswith examples\ncircle.collideswith(other_circle)\ncircle.collideswith(rect)\ncircle.collideswith((x, y))\ncircle.collideswith(vector2)\n```\n\n----------------------------------------\n\nTITLE: Drawing an Antialiased Circle in Pygame\nDESCRIPTION: Function to draw an antialiased circle on a surface. It takes parameters for the surface, color, center position, radius, and optional width. The function can draw full circles or specific quadrants based on boolean flags.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npygame.draw.aacircle(surface, color, center, radius, width=0, draw_top_right=True, draw_top_left=True, draw_bottom_left=True, draw_bottom_right=True)\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector3 around Y-axis in Pygame\nDESCRIPTION: Methods for rotating a Vector3 object around the y-axis, including both degree and radian versions, as well as in-place and return-new-vector operations.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nrotate_y(angle, /) -> Vector3\nrotate_y_rad(angle, /) -> Vector3\nrotate_y_ip(angle, /) -> None\nrotate_y_ip_rad(angle, /) -> None\nrotate_y_rad_ip(angle, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Game Loop\nDESCRIPTION: Processes game events including quit conditions, keyboard input, and mouse interactions with sound effects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor event in pygame.event.get():\n    if event.type == pygame.QUIT:\n        going = False\n    elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n        going = False\n    elif event.type == pygame.MOUSEBUTTONDOWN:\n        if fist.punch(chimp):\n            punch_sound.play()  # punch\n            chimp.punched()\n        else:\n            whiff_sound.play()  # miss\n    elif event.type == pygame.MOUSEBUTTONUP:\n        fist.unpunch()\n```\n\n----------------------------------------\n\nTITLE: Creating a Surface from a Pygame Mask\nDESCRIPTION: The to_surface method draws the mask onto a surface. It allows customization of colors for set and unset bits, and can use existing surfaces for coloring. The method returns the surface with the mask drawn on it.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nto_surface() -> Surface\n```\n\nLANGUAGE: Python\nCODE:\n```\nto_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Sprite Collision Detection Using Rect\nDESCRIPTION: Shows how to use Rect's collidepoint method to detect collisions between a point and multiple sprites efficiently.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/newbie-guide.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nsprites_clicked = [sprite for sprite in all_my_sprites_list if sprite.rect.collidepoint(x, y)]\n```\n\n----------------------------------------\n\nTITLE: Button Number Mapping\nDESCRIPTION: Maps all PlayStation controller buttons to their corresponding Pygame button numbers, including face buttons, bumpers, triggers, and special buttons.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nCross Button    - Button 0\nCircle Button   - Button 1\nSquare Button   - Button 2\nTriangle Button - Button 3\nLeft Bumper     - Button 4\nRight Bumper    - Button 5\nL. Trigger(Full)- Button 6\nR. Trigger(Full)- Button 7\nShare Button    - Button 8\nOptions Button  - Button 9\nL. Stick In     - Button 10\nR. Stick In     - Button 11\nPS Button       - Button 12\nTouch Pad Click - Button 13\n```\n\n----------------------------------------\n\nTITLE: Rectangle Dictionary Collision Detection - Single Match\nDESCRIPTION: The collidedict method tests if a rectangle intersects with any rectangle stored in a dictionary. Returns the first matching key-value pair or None. The values parameter determines whether to check against dictionary keys (default) or values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nrect.collidedict(rect_dict) -> (key, value)\nrect.collidedict(rect_dict) -> None\nrect.collidedict(rect_dict, values=False) -> (key, value)\nrect.collidedict(rect_dict, values=False) -> None\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Boundary Handling in Pygame\nDESCRIPTION: This code snippet demonstrates how to keep a sprite within the screen boundaries in Pygame. It checks the object's position and adjusts it if it goes beyond the screen edges.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nif self.pos.right > WIDTH:\n    self.pos.right = WIDTH\nif self.pos.top < 0:\n    self.pos.top = HEIGHT-SPRITE_HEIGHT\n```\n\n----------------------------------------\n\nTITLE: Initializing Joysticks in Pygame\nDESCRIPTION: Quick initialization code to setup the joystick module and get a list of all connected joystick devices. This creates Joystick objects for each connected device.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npygame.joystick.init()\njoysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines with Pygame\nDESCRIPTION: Example code demonstrating the usage of Pygame's draw module for creating various shapes and lines.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\n\n# Initialize Pygame\npygame.init()\n\n# Set up the display\nwidth, height = 400, 300\nscreen = pygame.display.set_mode((width, height))\npygame.display.set_caption(\"Draw Module Example\")\n\n# Define colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n\n# Fill the screen with white\nscreen.fill(WHITE)\n\n# Draw a line\npygame.draw.line(screen, BLACK, (50, 50), (250, 50), 2)\n\n# Draw a circle\npygame.draw.circle(screen, RED, (200, 150), 40)\n\n# Draw a rectangle\npygame.draw.rect(screen, GREEN, (100, 200, 100, 50))\n\n# Draw a polygon\npygame.draw.polygon(screen, BLUE, [(300, 50), (350, 100), (300, 150), (250, 100)])\n\n# Update the display\npygame.display.flip()\n\n# Run the game loop\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n# Quit Pygame\npygame.quit()\n```\n\n----------------------------------------\n\nTITLE: Pygame Implementation with Blitting\nDESCRIPTION: Shows how to implement the same movement concepts using Pygame's blitting functionality with actual graphics.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbackground = [terrain1, terrain1, terrain2, terrain2, terrain2, terrain1]\nscreen = create_graphics_screen()\nfor i in range(6):\n    screen.blit(background[i], (i*10, 0))\nplayerpos = 3\nscreen.blit(playerimage, (playerpos*10, 0))\n```\n\n----------------------------------------\n\nTITLE: Implementing Wall Collision Detection in Pygame\nDESCRIPTION: Code that handles ball collision with screen boundaries using Pygame's collision detection methods. Checks all four corners of the ball and updates the ball's angle when hitting walls.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games6.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif not self.area.contains(newpos):\n    tl = not self.area.collidepoint(newpos.topleft)\n    tr = not self.area.collidepoint(newpos.topright)\n    bl = not self.area.collidepoint(newpos.bottomleft)\n    br = not self.area.collidepoint(newpos.bottomright)\n    if tr and tl or (br and bl):\n        angle = -angle\n    if tl and bl:\n        self.offcourt(player=2)\n    if tr and br:\n        self.offcourt(player=1)\n\nself.vector = (angle,z)\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Pygame Cursors Example\nDESCRIPTION: Example code demonstrating how to create and set custom mouse cursors in Pygame. Shows various cursor types and switching between them on mouse clicks.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/cursors.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: code_examples/cursors_module_example.py\n```\n\n----------------------------------------\n\nTITLE: Vector3 Projection and Copying in Pygame\nDESCRIPTION: Methods for projecting one vector onto another and creating copies of Vector3 objects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nproject(Vector3, /) -> Vector3\ncopy() -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Copying a Surface in Pygame\nDESCRIPTION: The copy method creates a duplicate of a Surface, maintaining the same pixel formats, color palettes, transparency settings, and class as the original.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nSurface.copy() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Drawing an Antialiased Line in Pygame\nDESCRIPTION: Function to draw an antialiased straight line on a surface. It takes parameters for the surface, color, start and end positions, and optional width for line thickness.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npygame.draw.aaline(surface, color, start_pos, end_pos, width=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bat Class in Pygame\nDESCRIPTION: A Pygame sprite class implementation for a tennis bat that can move up and down. Includes initialization, movement controls, and screen boundary checking.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games5.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Bat(pygame.sprite.Sprite):\n    \"\"\"Movable tennis 'bat' with which one hits the ball\n    Returns: bat object\n    Functions: reinit, update, moveup, movedown\n    Attributes: which, speed\"\"\"\n\n    def __init__(self, side):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png(\"bat.png\")\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.side = side\n        self.speed = 10\n        self.state = \"still\"\n        self.reinit()\n\n    def reinit(self):\n        self.state = \"still\"\n        self.movepos = [0,0]\n        if self.side == \"left\":\n            self.rect.midleft = self.area.midleft\n        elif self.side == \"right\":\n            self.rect.midright = self.area.midright\n\n    def update(self):\n        newpos = self.rect.move(self.movepos)\n        if self.area.contains(newpos):\n            self.rect = newpos\n        pygame.event.pump()\n\n    def moveup(self):\n        self.movepos[1] = self.movepos[1] - (self.speed)\n        self.state = \"moveup\"\n\n    def movedown(self):\n        self.movepos[1] = self.movepos[1] + (self.speed)\n        self.state = \"movedown\"\n```\n\n----------------------------------------\n\nTITLE: Using make_surface in pygame.pixelcopy\nDESCRIPTION: Creates a new Surface that best resembles the data and format of the given array. The array can be 2D or 3D with integer values of any size.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npygame.pixelcopy.make_surface(array, /) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Scaling Surfaces in PyGame\nDESCRIPTION: Function to resize a Surface to a new resolution. Takes width and height parameters and optionally a destination surface. Uses a fast scaling algorithm without sampling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscale(surface, size, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Display Mode Configuration Examples in Pygame\nDESCRIPTION: Various examples demonstrating different ways to initialize and configure display modes in Pygame, including windowed mode, fullscreen mode, and specific bit depth requirements.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/display-modes.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> # give me the best depth with a 640 x 480 windowed display\n>>> pygame.display.set_mode((640, 480))\n\n>>> # give me the biggest 16-bit display available\n>>> modes = pygame.display.list_modes(16)\n>>> if not modes:\n...     print('16-bit not supported')\n... else:\n...     print('Found Resolution:', modes[0])\n...     pygame.display.set_mode(modes[0], FULLSCREEN, 16)\n\n>>> # need an 8-bit surface, nothing else will do\n>>> if pygame.display.mode_ok((800, 600), 0, 8) != 8:\n...     print('Can only work with an 8-bit display, sorry')\n... else:\n...     pygame.display.set_mode((800, 600), 0, 8)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Antialiased Circle with pygame.gfxdraw\nDESCRIPTION: Example demonstrating how to draw a filled antialiased circle by first drawing the antialiased outline and then filling it. This technique can be applied to other shapes to create filled antialiased versions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncol = (255, 0, 0)\nsurf.fill((255, 255, 255))\npygame.gfxdraw.aacircle(surf, x, y, 30, col)\npygame.gfxdraw.filled_circle(surf, x, y, 30, col)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Mixer Module\nDESCRIPTION: Initializes the mixer module with customizable parameters for sound playback. Allows configuration of frequency, bit size, channels, buffer size, device name, and allowed audio format changes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE)\n```\n\n----------------------------------------\n\nTITLE: Using pygame.event.pump() Function\nDESCRIPTION: Example of the pump() function which internally processes pygame event handlers. This function should be called each frame if not using other event functions to allow pygame to handle internal actions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npump() -> None\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame constants\nDESCRIPTION: Shows how to import all constants from the pygame.locals module. This allows using Pygame constants without prefixing them with pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/locals.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pygame.locals import *\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Pixel Color in Pygame\nDESCRIPTION: Example method signatures for getting and setting individual pixel colors on a Surface. These methods include get_at() which returns RGBA Color value and set_at() which sets a pixel color. These operations temporarily lock the surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nget_at((x, y), /) -> Color\nset_at((x, y), color, /) -> None\n```\n\n----------------------------------------\n\nTITLE: SDL2 Additional Events in Pygame\nDESCRIPTION: Additional event types available when Pygame is compiled with SDL2, including audio device events, touch events, mouse wheel events, and text events. Each event type lists its specific attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUDIODEVICEADDED   which, iscapture\nAUDIODEVICEREMOVED which, iscapture\nFINGERMOTION       touch_id, finger_id, x, y, dx, dy\nFINGERDOWN         touch_id, finger_id, x, y, dx, dy\nFINGERUP           touch_id, finger_id, x, y, dx, dy\nMOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y\nMULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers\nTEXTEDITING        text, start, length\nTEXTINPUT          text\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Ranges of Pixels\nDESCRIPTION: Shows different ways to assign colors to a range of pixels using slicing, including single colors, sequences of colors, and other PixelArrays.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF\npxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,\n                                       # second pixel  = 0xAACCEE, ...\npxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above\npxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above\npxarray[a:b] = otherarray[x:y]            # slice sizes must match\n```\n\n----------------------------------------\n\nTITLE: Creating a Fist Sprite Class in Pygame\nDESCRIPTION: This class represents the player's fist, which follows the mouse and can punch. It inherits from pygame.sprite.Sprite and includes methods for updating position, punching, and unpunching.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Fist(pygame.sprite.Sprite):\n    \"\"\"moves a clenched fist on the screen, following the mouse\"\"\"\n\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)  # call Sprite initializer\n        self.image, self.rect = load_image(\"fist.png\", -1)\n        self.fist_offset = (-235, -80)\n        self.punching = False\n\n    def update(self):\n        \"\"\"move the fist based on the mouse position\"\"\"\n        pos = pygame.mouse.get_pos()\n        self.rect.topleft = pos\n        self.rect.move_ip(self.fist_offset)\n        if self.punching:\n            self.rect.move_ip(15, 25)\n\n    def punch(self, target):\n        \"\"\"returns true if the fist collides with the target\"\"\"\n        if not self.punching:\n            self.punching = True\n            hitbox = self.rect.inflate(-5, -5)\n            return hitbox.colliderect(target.rect)\n\n    def unpunch(self):\n        \"\"\"called to pull the fist back\"\"\"\n        self.punching = False\n```\n\n----------------------------------------\n\nTITLE: Creating Subviews with Slicing\nDESCRIPTION: Demonstrates how to create new PixelArray objects that provide different views of the original array/surface using subscript slices.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create some new PixelArray objects providing a different view\n# of the original array/surface.\nnewarray = pxarray[2:4, 3:5]\notherarray = pxarray[::2, ::2]\n```\n\n----------------------------------------\n\nTITLE: Playing Music with Options in Pygame Mixer Music\nDESCRIPTION: Shows how to start playback of loaded music with optional parameters for loops, start position, and fade-in. The loops parameter controls repetition, start sets the starting position, and fade_ms controls fade-in duration.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplay(loops=0, start=0.0, fade_ms=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Background Surface with Text\nDESCRIPTION: Creates and configures the game background surface with a specific color and adds centered text using Pygame font rendering.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbackground = pygame.Surface(screen.get_size())\nbackground = background.convert()\nbackground.fill((170, 238, 187))\n\nfont = pygame.font.Font(None, 64)\ntext = font.render(\"Pummel The Chimp, And Win $$$\", True, (10, 10, 10))\ntextpos = text.get_rect(centerx=background.get_width() / 2, y=10)\nbackground.blit(text, textpos)\n```\n\n----------------------------------------\n\nTITLE: Color Object Construction Examples\nDESCRIPTION: Various ways to construct a Color object using different formats including RGB(A) values, color names, hex values, and tuples\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nColor(r, g, b)  # Basic RGB constructor\nColor(r, g, b, a=255)  # RGBA constructor with optional alpha\nColor(color_value)  # Constructor using various color value formats\n```\n\n----------------------------------------\n\nTITLE: Accessing Rect Virtual Attributes in Python\nDESCRIPTION: Shows the various virtual attributes available in pygame.Rect objects that can be used to manipulate the rectangle's position and dimensions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx,y\ntop, left, bottom, right\ntopleft, bottomleft, topright, bottomright\nmidtop, midleft, midbottom, midright\ncenter, centerx, centery\nsize, width, height\nw,h\n```\n\n----------------------------------------\n\nTITLE: Playing Sound on a Channel in Pygame\nDESCRIPTION: Demonstrates how to play a Sound object on a specific Channel. Allows for loop control, maximum playback time, and fade-in effects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nplay(Sound, loops=0, maxtime=0, fade_ms=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Mask from Surface in Python\nDESCRIPTION: Creates a Mask object from a given surface by setting opaque pixels and using color-key or alpha threshold.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom_surface(surface) -> Mask\nfrom_surface(surface, threshold=127) -> Mask\n```\n\n----------------------------------------\n\nTITLE: Surface Alpha Premultiplication Method\nDESCRIPTION: Creates a copy of the surface with RGB channels pre-multiplied by the alpha channel. Used for optimized blending with BLEND_PREMULTIPLED flag.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\npremul_alpha() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Creating Surface from Bytes Data in Pygame\nDESCRIPTION: Creates a new Surface from a byte buffer with specified size and format. Once created, the Surface is independent from the memory of the bytes passed in. Requires exact size computation or ValueError is raised.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrombytes(bytes, size, format, flipped=False, pitch=-1) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Surface Clipping Management\nDESCRIPTION: Methods for managing the clipping area of a Surface, which controls which pixels can be modified. Includes setting and getting clip rectangles.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nset_clip(rect, /) -> None\nset_clip(None) -> None\nget_clip() -> Rect\n```\n\n----------------------------------------\n\nTITLE: Sound Playback Method\nDESCRIPTION: Method to begin playback of a Sound object on an available Channel. Supports loop control, maximum playback time, and fade-in effects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nplay(loops=0, maxtime=0, fade_ms=0) -> Channel\n```\n\n----------------------------------------\n\nTITLE: Handling Clipped Line Results in Pygame Rect\nDESCRIPTION: This snippet demonstrates how to handle the result of a clipline operation on a Rect object. It extracts the start and end points of the clipped line if it intersects with the rectangle.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# If clipped_line is not an empty tuple then the line\n# collides/overlaps with the rect. The returned value contains\n# the endpoints of the clipped line.\nstart, end = clipped_line\nx1, y1 = start\nx2, y2 = end\nelse:\n    print(\"No clipping. The line is fully outside the rect.\")\n```\n\n----------------------------------------\n\nTITLE: Flipping Surfaces in PyGame\nDESCRIPTION: Function to flip a Surface horizontally and/or vertically. Takes boolean arguments flip_x and flip_y to control flipping along each axis. Returns a new Surface with the flipped result.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nflip(surface, flip_x, flip_y) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Creating Rect Objects in Pygame\nDESCRIPTION: Demonstrates different ways to create Rect objects in Pygame, which are useful for defining rectangular areas and handling collisions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/newbie-guide.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nrect = pygame.Rect(10, 20, 30, 30)\nrect = pygame.Rect((10, 20, 30, 30))\nrect = pygame.Rect((10, 20), (30, 30))\nrect = (10, 20, 30, 30)\nrect = ((10, 20, 30, 30))\n```\n\n----------------------------------------\n\nTITLE: Setting Colorkey for Transparency in Pygame\nDESCRIPTION: The set_colorkey method sets the transparent colorkey for the Surface. Pixels matching this color become transparent when blitting.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nSurface.set_colorkey(color, flags=0, /) -> None\nSurface.set_colorkey(None) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Mouse Cursor in Pygame\nDESCRIPTION: Sets the mouse cursor to a new appearance. Accepts either a Cursor object or arguments to create one. Refer to pygame.cursors.Cursor for creating cursors and examples.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mouse.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nset_cursor(hotspot, surface) -> None\nset_cursor(constant) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Mask by Thresholding Surfaces in Python\nDESCRIPTION: Creates a Mask object by thresholding surfaces based on color, threshold range, and optional comparison surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom_threshold(surface, color) -> Mask\nfrom_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -> Mask\n```\n\n----------------------------------------\n\nTITLE: Resuming Paused Music in Pygame Mixer Music\nDESCRIPTION: Shows how to resume the playback of a music stream after it has been paused. This continues playback from where it was paused.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nunpause() -> None\n```\n\n----------------------------------------\n\nTITLE: Implementing Bat Collision Detection in Pygame\nDESCRIPTION: Code for handling ball collision with player bats, including glitch prevention logic. Uses rectangle collision detection and implements special handling to prevent ball getting stuck inside bats.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games6.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nelse:\n    # Deflate the rectangles so you can't catch a ball behind the bat\n    player1.rect.inflate(-3, -3)\n    player2.rect.inflate(-3, -3)\n\n    if self.rect.colliderect(player1.rect) == 1 and not self.hit:\n        angle = math.pi - angle\n        self.hit = not self.hit\n    elif self.rect.colliderect(player2.rect) == 1 and not self.hit:\n        angle = math.pi - angle\n        self.hit = not self.hit\n    elif self.hit:\n        self.hit = not self.hit\nself.vector = (angle,z)\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with PyGame\nDESCRIPTION: Example demonstrating text rendering in PyGame with custom font, color, and positioning. Shows initialization, event handling, and screen updates in a GUI environment.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/2.Print_text/Basic TEMPLATE and OUTPUT.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nwhite = (255,255,255)\nred = (255,0,0)\ngreen = (0,255,0)\npygame.init()\npygame.display.set_caption(\"Hello World Project\")\nmyScreen = pygame.display.set_mode((640, 480))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render(\"Hello World!\", True, red, green)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (320, 240)\n\nwhile True:\n    myScreen.fill(white)\n    myScreen.blit(myText, myTextArea)\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n\n    pygame.display.update()\n```\n\n----------------------------------------\n\nTITLE: Pygame Display Initialization\nDESCRIPTION: Sets up the Pygame display window with specific dimensions and configuration flags. Initializes basic display settings including window caption and mouse visibility.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/ChimpanceLineaporLinea.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npg.init()\nscreen = pg.display.set_mode((1280, 480), pg.SCALED)\npg.display.set_caption(\"Monkey Fever\")\npg.mouse.set_visible(False)\n```\n\n----------------------------------------\n\nTITLE: Assigning to Rect Attributes in Python\nDESCRIPTION: Demonstrates how to assign values to pygame.Rect attributes to modify the rectangle's position and dimensions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrect1.right = 10\nrect2.center = (20,30)\n```\n\n----------------------------------------\n\nTITLE: Stopping All Sound Channels\nDESCRIPTION: Stops playback on all active mixer channels immediately. This terminates all sound playback across the application.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.stop()\n```\n\n----------------------------------------\n\nTITLE: Drawing Polygons with pygame.draw.polygon\nDESCRIPTION: Function for drawing polygons on surfaces with support for fill and stroke width. Requires at least 3 coordinate points and returns a bounding rectangle of the affected pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npolygon(surface, color, points) -> Rect\npolygon(surface, color, points, width=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Drawing Arc in Pygame\nDESCRIPTION: Draws an arc on a surface in a clockwise direction between start and stop angles (in degrees). Takes surface, center coordinates (x,y), radius, start/stop angles and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\narc(surface, x, y, r, start_angle, stop_angle, color)\n```\n\n----------------------------------------\n\nTITLE: Calculating Collision Normal Using overlap_area\nDESCRIPTION: Demonstrates how to calculate an approximate collision normal using finite difference of overlap areas between two masks.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))\ndy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))\n```\n\n----------------------------------------\n\nTITLE: Saving Images as PNG/JPEG in Pygame\nDESCRIPTION: Saves a Surface as either a PNG or JPEG image to a file or file-like object. Uses the namehint argument to determine the format when saving to a file-like object, defaulting to JPEG if not specified.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsave_extended(Surface, file) -> None\nsave_extended(Surface, file, namehint=\"\") -> None\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Dimensions in Pygame\nDESCRIPTION: Determines the amount of space needed to render text. Useful for positioning and layout calculations. Returns a tuple of width and height.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsize(text, /) -> (width, height)\n```\n\n----------------------------------------\n\nTITLE: Combined Scale and Rotation in PyGame\nDESCRIPTION: Function that combines scaling and rotation transforms. Returns a filtered 32-bit Surface. Takes scale factor and rotation angle in degrees as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nrotozoom(surface, angle, scale) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Finding Overlap Point Between Masks in Python\nDESCRIPTION: Returns the first point of intersection between two masks, considering an offset.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\noverlap(other, offset) -> (x, y)\noverlap(other, offset) -> None\n```\n\n----------------------------------------\n\nTITLE: Querying Controller Information in Python\nDESCRIPTION: Shows methods for getting information about connected controllers, including count, support status, and names. These functions are helpful for detecting and identifying controllers.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npygame._sdl2.controller.get_count()\npygame._sdl2.controller.is_controller(index)\npygame._sdl2.controller.name_forindex(index)\n```\n\n----------------------------------------\n\nTITLE: Renderer Drawing Methods\nDESCRIPTION: Collection of methods for drawing primitive shapes including points, lines, rectangles, triangles, and quads.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndraw_line(p1, p2) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\ndraw_point(point) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\ndraw_rect(rect) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\nfill_rect(rect) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\ndraw_triangle(p1, p2, p3) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\nfill_triangle(p1, p2, p3) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\ndraw_quad(p1, p2, p3, p4) -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\nfill_quad(p1, p2, p3, p4) -> None\n```\n\n----------------------------------------\n\nTITLE: Waiting for Event in Python using Pygame\nDESCRIPTION: This function waits for a single event from the queue, optionally with a timeout. It sleeps in an idle state while waiting.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nwait() -> Event instance\nwait(timeout) -> Event instance\n```\n\n----------------------------------------\n\nTITLE: Managing Controller Events in Python\nDESCRIPTION: Demonstrates how to enable/disable and check the state of controller-related events. This is useful for controlling event generation and handling in games.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npygame._sdl2.controller.set_eventstate(state)\npygame._sdl2.controller.get_eventstate()\n```\n\n----------------------------------------\n\nTITLE: Fading Out All Sound Channels\nDESCRIPTION: Gradually reduces the volume on all active channels over the specified time in milliseconds, then stops playback. Creates a smooth transition to silence.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.fadeout(time)\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Setting Up Paths in Python for Pygame\nDESCRIPTION: This snippet imports the necessary modules (os and pygame) and sets up paths for the main directory and data directory. It uses os.path to create platform-independent file paths.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Import Modules\nimport os\nimport pygame\n\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, \"data\")\n```\n\n----------------------------------------\n\nTITLE: Generating PixelArray Effects in Pygame\nDESCRIPTION: This function demonstrates various effects that can be generated using Pygame's PixelArray functionality. It showcases pixel-level manipulation capabilities.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef pixelarray.main():\n    \"\"\"Display various pixelarray generated effects.\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Polling Single Event from Queue in Python using Pygame\nDESCRIPTION: This function retrieves a single event from the queue, returning a NOEVENT if the queue is empty. The event is removed from the queue.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npoll() -> Event instance\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event in Python using Pygame\nDESCRIPTION: This class represents a Pygame event object. It can be created with a type and additional attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nEvent(type, dict) -> Event\nEvent(type, **attributes) -> Event\n```\n\n----------------------------------------\n\nTITLE: Inverse Linear Interpolation Example in Pygame\nDESCRIPTION: Demonstrates the relationship between linear interpolation (lerp) and inverse linear interpolation (invlerp) with numerical examples.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n> a = 10\n> b = 20\n> pygame.math.invlerp(10, 20, 11.5)\n> 0.15\n> pygame.math.lerp(10, 20, 0.15)\n> 11.5\n```\n\n----------------------------------------\n\nTITLE: Scaling Surfaces by Factor in PyGame\nDESCRIPTION: Function to resize a Surface by a scalar factor. Can scale uniformly or separately in x and y dimensions. Optional destination surface parameter for better performance.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscale_by(surface, factor, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Getting Colorkey in Pygame\nDESCRIPTION: The get_colorkey method returns the current colorkey value for the Surface. If no colorkey is set, it returns None.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nSurface.get_colorkey() -> RGBA or None\n```\n\n----------------------------------------\n\nTITLE: Surface Scrolling Example with Image Magnification in Pygame\nDESCRIPTION: This function demonstrates the use of Surface.scroll() to create a scrollable, magnified image view. It accepts an optional image file path and uses arrow keys or on-screen triangles for navigation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef scroll.main(image_file=None):\n    \"\"\"Run a Surface.scroll example that shows a magnified image\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Capturing a Single Image with Pygame Camera in Python\nDESCRIPTION: This code demonstrates how to open a camera, start it, and capture a single image as a surface. It assumes a camera is available at /dev/video0 with a resolution of 640x480.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncam = pygame.camera.Camera(\"/dev/video0\",(640,480))\ncam.start()\nimage = cam.get_image()\n```\n\n----------------------------------------\n\nTITLE: Applying Gamma Correction to Color in Python\nDESCRIPTION: Method to apply a gamma correction value to the Color and return a new Color with adjusted RGBA values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ncorrect_gamma(gamma, /) -> Color\n```\n\n----------------------------------------\n\nTITLE: Pygame 2 Hotplug Event Types\nDESCRIPTION: Additional event types supported in Pygame 2 for handling joystick connection and disconnection events.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nJOYDEVICEADDED JOYDEVICEREMOVED\n```\n\n----------------------------------------\n\nTITLE: Sound Class Constructor in PyGame\nDESCRIPTION: Creates a new Sound object from a file or buffer object. Can load audio from OGG or WAV files. Supports multiple input formats including filenames, file objects, buffer objects and arrays.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nSound(filename) -> Sound\nSound(file=filename) -> Sound\nSound(file=pathlib_path) -> Sound\nSound(buffer) -> Sound\nSound(buffer=buffer) -> Sound\nSound(object) -> Sound\nSound(file=object) -> Sound\nSound(array=object) -> Sound\n```\n\n----------------------------------------\n\nTITLE: Scrolling Surface Pixels in Pygame\nDESCRIPTION: The scroll method shifts the Surface pixels in place. It can move pixels right, left, up, or down, with options for erasing or repeating pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nSurface.scroll(dx=0, dy=0, scroll_flag=0, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Keyboard Constants Reference in Pygame\nDESCRIPTION: A comprehensive reference table of all keyboard constants available in the pygame.locals module, used to represent keyboard keys in Pygame applications.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npygame\nConstant      ASCII   Description\n---------------------------------\nK_BACKSPACE   \\b      backspace\nK_TAB         \\t      tab\nK_CLEAR               clear\nK_RETURN      \\r      return\nK_PAUSE               pause\nK_ESCAPE      ^[      escape\nK_SPACE               space\nK_EXCLAIM     !       exclaim\nK_QUOTEDBL    \"       quotedbl\nK_HASH        #       hash\nK_DOLLAR      $       dollar\nK_AMPERSAND   &       ampersand\nK_QUOTE               quote\nK_LEFTPAREN   (       left parenthesis\nK_RIGHTPAREN  )       right parenthesis\nK_ASTERISK    *       asterisk\nK_PLUS        +       plus sign\nK_COMMA       ,       comma\nK_MINUS       -       minus sign\nK_PERIOD      .       period\nK_SLASH       /       forward slash\nK_0           0       0\nK_1           1       1\nK_2           2       2\nK_3           3       3\nK_4           4       4\nK_5           5       5\nK_6           6       6\nK_7           7       7\nK_8           8       8\nK_9           9       9\nK_COLON       :       colon\nK_SEMICOLON   ;       semicolon\nK_LESS        <       less-than sign\nK_EQUALS      =       equals sign\nK_GREATER     >       greater-than sign\nK_QUESTION    ?       question mark\nK_AT          @       at\nK_LEFTBRACKET [       left bracket\nK_BACKSLASH   \\       backslash\nK_RIGHTBRACKET ]      right bracket\nK_CARET       ^       caret\nK_UNDERSCORE  _       underscore\nK_BACKQUOTE   `       grave\nK_a           a       a\nK_b           b       b\nK_c           c       c\nK_d           d       d\nK_e           e       e\nK_f           f       f\nK_g           g       g\nK_h           h       h\nK_i           i       i\nK_j           j       j\nK_k           k       k\nK_l           l       l\nK_m           m       m\nK_n           n       n\nK_o           o       o\nK_p           p       p\nK_q           q       q\nK_r           r       r\nK_s           s       s\nK_t           t       t\nK_u           u       u\nK_v           v       v\nK_w           w       w\nK_x           x       x\nK_y           y       y\nK_z           z       z\nK_DELETE              delete\nK_KP0                 keypad 0\nK_KP1                 keypad 1\nK_KP2                 keypad 2\nK_KP3                 keypad 3\nK_KP4                 keypad 4\nK_KP5                 keypad 5\nK_KP6                 keypad 6\nK_KP7                 keypad 7\nK_KP8                 keypad 8\nK_KP9                 keypad 9\nK_KP_PERIOD   .       keypad period\nK_KP_DIVIDE   /       keypad divide\nK_KP_MULTIPLY *       keypad multiply\nK_KP_MINUS    -       keypad minus\nK_KP_PLUS     +       keypad plus\nK_KP_ENTER    \\r      keypad enter\nK_KP_EQUALS   =       keypad equals\nK_UP                  up arrow\nK_DOWN                down arrow\nK_RIGHT               right arrow\nK_LEFT                left arrow\nK_INSERT              insert\nK_HOME                home\nK_END                 end\nK_PAGEUP              page up\nK_PAGEDOWN            page down\nK_F1                  F1\nK_F2                  F2\nK_F3                  F3\nK_F4                  F4\nK_F5                  F5\nK_F6                  F6\nK_F7                  F7\nK_F8                  F8\nK_F9                  F9\nK_F10                 F10\nK_F11                 F11\nK_F12                 F12\nK_F13                 F13\nK_F14                 F14\nK_F15                 F15\nK_NUMLOCK             numlock\nK_CAPSLOCK            capslock\nK_SCROLLOCK           scrollock\nK_RSHIFT              right shift\nK_LSHIFT              left shift\nK_RCTRL               right control\nK_LCTRL               left control\nK_RALT                right alt\nK_LALT                left alt\nK_RMETA               right meta\nK_LMETA               left meta\nK_LSUPER              left Windows key\nK_RSUPER              right Windows key\nK_MODE                mode shift\nK_HELP                help\nK_PRINT               print screen\nK_SYSREQ              sysrq\nK_BREAK               break\nK_MENU                menu\nK_POWER               power\nK_EURO                Euro\nK_AC_BACK             Android back button\n```\n\n----------------------------------------\n\nTITLE: Querying VideoInfo in Pygame\nDESCRIPTION: Example showing how to initialize the display and query video information using pygame.display.Info(). This prints detailed information about the display capabilities.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/display-modes.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygame.display\n>>> pygame.display.init()\n>>> info = pygame.display.Info()\n>>> print(info)\n<VideoInfo(hw = 0, wm = 1,video_mem = 0\n        blit_hw = 0, blit_hw_CC = 0, blit_hw_A = 0,\n        blit_sw = 0, blit_sw_CC = 0, blit_sw_A = 0,\n        bitsize  = 32, bytesize = 4,\n        masks =  (16711680, 65280, 255, 0),\n        shifts = (16, 8, 0, 0),\n        losses =  (0, 0, 0, 8),\n        current_w = 1920, current_h = 1080\n>\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting Pygame Surfaces\nDESCRIPTION: Demonstrates how to properly load an image file and convert it to an optimized surface format for improved performance in Pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/newbie-guide.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsurface = pygame.image.load('foo.png').convert()\n```\n\n----------------------------------------\n\nTITLE: Functionalized Pygame HP Bar Visualization\nDESCRIPTION: Implements a complete HP bar visualization with Pygame. This version includes functionalization, separating the main game loop and HP bar drawing into distinct functions. It also handles keyboard events to increase or decrease HP.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/5.HP_bar/Advanced OUTPUT with Advanced PROCESS.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10\nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"HP bar Project\")\nwidth = 640 #1\nheight = 480 #2\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2) #3\nfpsClock = pygame.time.Clock()\n\ndef main(): #4\n    HP = 5\n\n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n\n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP) #5\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n\n        pygame.display.update()\n        fpsClock.tick(60)\n\ndef drawHP(HP): #6\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\nif __name__ == '__main__': #7\n    main()\n```\n\n----------------------------------------\n\nTITLE: Implementing Premultiplied Alpha Composition in Pygame\nDESCRIPTION: This code snippet shows how to use premultiplied alpha blending in Pygame. It creates a surface, converts it to premultiplied alpha, and blits it using the BLEND_PREMULTIPLIED flag.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/premultiplied-alpha.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\nfrom pygame import SRCALPHA, BLEND_PREMULTIPLIED, QUIT\n\npygame.init()\n\npygame.display.set_caption(\"Basic Composition\")\ndisplay_surf = pygame.display.set_mode((300, 170))\n\nbasic_surf = pygame.Surface((120, 120), flags=SRCALPHA)\nbasic_surf.fill((50, 50, 50, 25))\nbasic_surf = basic_surf.premul_alpha()\n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False\n\n    display_surf.fill((180, 140, 50))\n\n    display_surf.blit(basic_surf, (25, 25),\n                      special_flags=BLEND_PREMULTIPLIED)\n\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Vector3 Angle and Spherical Coordinate Operations in Pygame\nDESCRIPTION: Methods for calculating angles between vectors and converting between Cartesian and spherical coordinates.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nangle_to(Vector3, /) -> float\nas_spherical() -> (r, theta, phi)\nfrom_spherical((r, theta, phi), /) -> None\n```\n\n----------------------------------------\n\nTITLE: Background Surface Creation in Pygame\nDESCRIPTION: Creates and configures a background surface with color filling and format conversion for optimal performance.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/ChimpanceLineaporLinea.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbackground = pg.Surface(screen.get_size())\nbackground = background.convert()\nbackground.fill((170, 238, 187))\n```\n\n----------------------------------------\n\nTITLE: Drawing Polygon in Pygame\nDESCRIPTION: Draws an unfilled polygon on a surface by connecting provided points. Takes surface, sequence of (x,y) coordinates (minimum 3 points), and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npolygon(surface, points, color)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Joystick Hat Position in Python\nDESCRIPTION: This method returns the current position of a joystick hat as two values representing the x and y positions. The values range from -1 to 1, with (0, 0) representing the centered position.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_hat(hat_number, /) -> x, y\n```\n\n----------------------------------------\n\nTITLE: Drawing Textured Polygon in Pygame\nDESCRIPTION: Draws a textured polygon on a surface using a provided texture. Takes surface, sequence of points, texture surface, and texture offset coordinates as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ntextured_polygon(surface, points, texture, tx, ty)\n```\n\n----------------------------------------\n\nTITLE: Interactive HP Management System with Buttons\nDESCRIPTION: Complete implementation of an HP management system with clickable buttons, visual feedback, and both keyboard and mouse input handling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10\nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"Array buttons Project\")\nwidth = 640\nheight = 480\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2)\nfpsClock = pygame.time.Clock()\n\ndef main():\n    HP = 5\n\n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n\n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP)\n        drawButtons()\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n            elif event.type == MOUSEBUTTONUP:\n                x, y = event.pos\n                if pygame.Rect(270, 425, 45, 45).collidepoint(x, y):\n                    if HP != 10:\n                        HP = HP + 1\n                elif pygame.Rect(325, 425, 45, 45).collidepoint(x, y):\n                    if HP != 0:\n                        HP = HP - 1\n\n        pygame.display.update()\n        fpsClock.tick(60)\n\ndef drawHP(HP):\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\ndef drawButtons():\n    r = 45\n    r_margin = 10\n    colors = [red, black]\n\n    num = 2\n    margin = int((width - ((r * num) + (r_margin * (num - 1)))) / 2)\n    for i in range(0, num):\n        left = margin + (i * r) + (i * r_margin)\n        up = height - r - 10\n        pygame.draw.rect(myScreen, colors[i], (left, up, r, r))\n        pygame.draw.rect(myScreen, gray, (left + 2, up + 2, r - 4, r - 4), 2)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using collideobjectsall Method in Pygame Rect\nDESCRIPTION: This example demonstrates the usage of the collideobjectsall method of a Rect object, including with custom objects and a key function for extracting Rect-like objects from complex structures.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nr = Rect(1, 1, 10, 10)\n\nrects = [\n    Rect(1, 1, 10, 10),\n    Rect(5, 5, 10, 10),\n    Rect(15, 15, 1, 1),\n    Rect(2, 2, 1, 1),\n]\n\nresult = r.collideobjectsall(\n    rects\n)  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]\nprint(result)\n\nclass ObjectWithSomRectAttribute:\n    def __init__(self, name, collision_box, draw_rect):\n        self.name = name\n        self.draw_rect = draw_rect\n        self.collision_box = collision_box\n\n    def __repr__(self):\n        return f'<{self.__class__.__name__}(\"{self.name}\", {list(self.collision_box)}, {list(self.draw_rect)})>'\n\nobjects = [\n    ObjectWithSomRectAttribute(\"A\", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),\n    ObjectWithSomRectAttribute(\"B\", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),\n    ObjectWithSomRectAttribute(\"C\", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),\n]\n\n# collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object\ncollisions = r.collideobjectsall(\n    objects, key=lambda o: o.collision_box\n)  # -> [<ObjectWithSomRectAttribute(\"A\", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute(\"B\", [5, 5, 10, 10], [200, 500, 50, 50])>]\nprint(collisions)\n\nscreen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []\nprint(screen_rects)\n```\n\n----------------------------------------\n\nTITLE: Checking Modifier Keys in Pygame Event Handling\nDESCRIPTION: A code example demonstrating how to check for modifier keys in Pygame keyboard events using bitwise operations. The example shows how to detect if specific modifier keys were pressed during a key event.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor event in pygame.event.get():\n    if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:\n        if event.mod == pygame.KMOD_NONE:\n            print('No modifier keys were in a pressed state when this '\n                  'event occurred.')\n        else:\n            if event.mod & pygame.KMOD_LSHIFT:\n                print('Left shift was in a pressed state when this event '\n                      'occurred.')\n            if event.mod & pygame.KMOD_RSHIFT:\n                print('Right shift was in a pressed state when this event '\n                      'occurred.')\n            if event.mod & pygame.KMOD_SHIFT:\n                print('Left shift or right shift or both were in a '\n                      'pressed state when this event occurred.')\n```\n\n----------------------------------------\n\nTITLE: Using collideobjects Method in Pygame Rect\nDESCRIPTION: This snippet shows how to use the collideobjects method of a Rect object, including with custom objects and a key function for extracting Rect-like objects from complex structures.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nr = Rect(1, 1, 10, 10)\n\nrects = [\n    Rect(1, 1, 10, 10),\n    Rect(5, 5, 10, 10),\n    Rect(15, 15, 1, 1),\n    Rect(2, 2, 1, 1),\n]\n\nresult = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>\nprint(result)\n\nclass ObjectWithSomRectAttribute:\n    def __init__(self, name, collision_box, draw_rect):\n        self.name = name\n        self.draw_rect = draw_rect\n        self.collision_box = collision_box\n\n    def __repr__(self):\n        return f'<{self.__class__.__name__}(\"{self.name}\", {list(self.collision_box)}, {list(self.draw_rect)})>'\n\nobjects = [\n    ObjectWithSomRectAttribute(\"A\", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),\n    ObjectWithSomRectAttribute(\"B\", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),\n    ObjectWithSomRectAttribute(\"C\", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),\n]\n\n# collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object\ncollision = r.collideobjects(\n    objects, key=lambda o: o.collision_box\n)  # -> <ObjectWithSomRectAttribute(\"B\", [1, 1, 10, 10], [300, 300, 50, 50])>\nprint(collision)\n\nscreen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None\nprint(screen_rect)\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector3 around Z-axis in Pygame\nDESCRIPTION: Methods for rotating a Vector3 object around the z-axis, including both degree and radian versions, as well as in-place and return-new-vector operations.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nrotate_z(angle, /) -> Vector3\nrotate_z_rad(angle, /) -> Vector3\nrotate_z_ip(angle, /) -> None\nrotate_z_ip_rad(angle, /) -> None\nrotate_z_rad_ip(angle, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Object Detection Using Mask Module with Pygame Camera in Python\nDESCRIPTION: This function demonstrates how to use the mask module for object detection. It thresholds the image based on a calibrated color, finds the largest blob of that color, and draws a circle at its center if it's large enough.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef get_and_flip(self):\n    self.snapshot = self.cam.get_image(self.snapshot)\n    mask = pygame.mask.from_threshold(self.snapshot, self.ccolor, (30, 30, 30))\n    self.display.blit(self.snapshot,(0,0))\n    connected = mask.connected_component()\n    if mask.count() > 100:\n        coords = mask.centroid()\n        pygame.draw.circle(self.display, (0,255,0), coords, max(min(50,mask.count()/400),5))\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Drawing Textured Polygon in Pygame\nDESCRIPTION: The textured_polygon function draws a polygon with a texture on a given surface. It takes parameters for the surface, points, texture, and texture offsets. The function requires at least 3 points and each point must have at least 2 coordinates.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.textured_polygon(surface, points, texture, tx, ty)\n```\n\n----------------------------------------\n\nTITLE: Loading Extended Image Formats in Pygame\nDESCRIPTION: Loads images in extended formats from a file or file-like object. Requires Pygame to be built with extended image format support, otherwise raises NotImplementedError.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nload_extended(file) -> Surface\nload_extended(file, namehint=\"\") -> Surface\n```\n\n----------------------------------------\n\nTITLE: 2x Scale with AdvanceMAME Algorithm\nDESCRIPTION: Specialized function to double the size of an image using the AdvanceMAME Scale2X algorithm for jaggie-less scaling of bitmap graphics.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nscale2x(surface, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Pygame Joystick Event Types\nDESCRIPTION: List of event types that are generated by joystick interactions. These events represent different types of joystick input like axis movement, button presses, and hat position changes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nJOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION\n```\n\n----------------------------------------\n\nTITLE: Drawing an Ellipse in Pygame\nDESCRIPTION: Function to draw an ellipse on a surface. It takes parameters for the surface, color, rectangle defining the ellipse bounds, and optional width for line thickness or filling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npygame.draw.ellipse(surface, color, rect, width=0)\n```\n\n----------------------------------------\n\nTITLE: Drawing Pie in Pygame\nDESCRIPTION: Draws an unfilled pie (arc with endpoints connected to center) on a surface. Takes surface, center coordinates (x,y), radius, start/stop angles (in degrees) and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npie(surface, x, y, r, start_angle, stop_angle, color)\n```\n\n----------------------------------------\n\nTITLE: Checking for Event Types in Queue in Python using Pygame\nDESCRIPTION: This function checks if specific event types are waiting in the queue. It can optionally pump events.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npeek(eventtype=None) -> bool\npeek(eventtype=None, pump=True) -> bool\n```\n\n----------------------------------------\n\nTITLE: Importing the pygame.freetype Module in Python\nDESCRIPTION: Basic example of how to import the pygame module and the freetype submodule explicitly for use in a Pygame application.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nimport pygame.freetype\n```\n\n----------------------------------------\n\nTITLE: Detecting Just Pressed Keys in Pygame\nDESCRIPTION: Example showing how to detect when the B key was just pressed in the current frame using get_just_pressed()\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif pygame.key.get_just_pressed()[pygame.K_b]:\n   print(\"B key just pressed\")\n```\n\n----------------------------------------\n\nTITLE: Proper Player Movement with Background Restoration\nDESCRIPTION: Demonstrates correct player movement by restoring background values and updating player position.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nscreen[playerpos] = background[playerpos]\nplayerpos = playerpos - 1\nscreen[playerpos] = 8\nprint(screen)\n```\n\n----------------------------------------\n\nTITLE: Detecting Just Released Keys in Pygame\nDESCRIPTION: Example showing how to detect when the B key was just released in the current frame using get_just_released()\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif pygame.key.get_just_released()[pygame.K_b]:\n   print(\"B key just released\")\n```\n\n----------------------------------------\n\nTITLE: Live Camera Feed Display in Pygame\nDESCRIPTION: This function creates a simple live video player using the first available camera on the system. It demonstrates Pygame's capability to capture and display live video feed.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef camera.main():\n    \"\"\"Display video captured live from an attached camera\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Checking Pygame Mixer Initialization Status\nDESCRIPTION: Returns the current playback arguments if the mixer is initialized, or None if not initialized. Provides frequency, format, and channels information.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.get_init()\n```\n\n----------------------------------------\n\nTITLE: Setting Total Number of Playback Channels\nDESCRIPTION: Sets the number of available playback channels for the mixer. The default is 8. If decreased, sounds playing on truncated channels are stopped.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.set_num_channels(count)\n```\n\n----------------------------------------\n\nTITLE: Pre-initializing Pygame Mixer with Custom Settings\nDESCRIPTION: Sets default values for mixer initialization before the actual init() call. Useful when using pygame.init() which doesn't accept mixer-specific parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.pre_init(44100,-16,2, 1024)\n```\n\n----------------------------------------\n\nTITLE: Creating Surface from Buffer in Pygame\nDESCRIPTION: Creates a new Surface that shares pixel data directly from a buffer object. Faster than fromstring/frombytes as no pixel data is copied. Supports various formats including P, RGB, BGR, RGBX, RGBA, ARGB, and BGRA.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrombuffer(buffer, size, format, pitch=-1) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Using surface_to_array in pygame.pixelcopy\nDESCRIPTION: Copies pixels from a Surface object to a 2D or 3D array. The function supports different kinds of copies including raw pixel values, RGB components, individual color channels, and transparency information.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsurface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing Antialiased Polygon in Pygame\nDESCRIPTION: Draws an unfilled antialiased polygon on a surface for smoother edges. Takes surface, sequence of (x,y) coordinates (minimum 3 points), and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\naapolygon(surface, points, color)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Vector Components in Pygame\nDESCRIPTION: Shows how to set multiple coordinates of a Vector2 object at once using slices or swizzling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nv = pygame.Vector2()\nv.xy = 1, 2\nv[:] = 1, 2\n```\n\n----------------------------------------\n\nTITLE: Getting Key Code from Key Name in Pygame\nDESCRIPTION: Examples showing how to get key codes from key names using key_code() function\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> pygame.key.key_code(\"return\") == pygame.K_RETURN\nTrue\n>>> pygame.key.key_code(\"0\") == pygame.K_0\nTrue\n>>> pygame.key.key_code(\"space\") == pygame.K_SPACE\nTrue\n```\n\n----------------------------------------\n\nTITLE: Implementing Straight Alpha Composition in Pygame\nDESCRIPTION: This code snippet demonstrates a simple example of straight alpha composition in Pygame. It creates a semi-transparent surface and blits it onto a display surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/premultiplied-alpha.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\nfrom pygame import SRCALPHA, QUIT\n\npygame.init()\n\npygame.display.set_caption(\"Basic Composition\")\ndisplay_surf = pygame.display.set_mode((300, 170))\n\n# create a Surface with the SRCALPHA flag to add an extra channel of data\n# to each pixel that indicates how transparent it should be (from 0 - fully\n# transparent, to 255 - fully opaque.\nbasic_surf = pygame.Surface((120, 120), flags=SRCALPHA)\n# the fourth number here sets the alpha to 25 (almost fully see through)\nbasic_surf.fill((50, 50, 50, 25))\n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False\n\n    display_surf.fill((180, 140, 50))\n\n    display_surf.blit(basic_surf, (25, 25))\n\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Color Calibration for Thresholding with Pygame Camera in Python\nDESCRIPTION: This function demonstrates a calibration process for color thresholding. It captures an image, draws a rectangle, and calculates the average color within that rectangle for use in subsequent thresholding operations.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef calibrate(self):\n    self.snapshot = self.cam.get_image(self.snapshot)\n    self.display.blit(self.snapshot, (0,0))\n    crect = pygame.draw.rect(self.display, (255,0,0), (145,105,30,30), 4)\n    self.ccolor = pygame.transform.average_color(self.snapshot, crect)\n    self.display.fill(self.ccolor, (0,0,50,50))\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Updating Line Coordinates in Pygame\nDESCRIPTION: Updates the coordinates of an existing Line object with new values for both endpoints.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nline.ax = ax\nline.ay = ay\nline.bx = bx\nline.by = by\n```\n\n----------------------------------------\n\nTITLE: Game Object Preparation\nDESCRIPTION: Initializes game objects including sound effects, sprite instances, and sprite group for collective management.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwhiff_sound = load_sound(\"whiff.wav\")\npunch_sound = load_sound(\"punch.wav\")\nchimp = Chimp()\nfist = Fist()\nall_sprites = pygame.sprite.Group((chimp, fist))\nclock = pygame.Clock()\n```\n\n----------------------------------------\n\nTITLE: Sprite Rotation Animation in Pygame\nDESCRIPTION: Handles sprite rotation animation with center-point preservation. Implements a dizzy effect for the monkey character when punched.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/ChimpanceLineaporLinea.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef _spin(self):\n    \"\"\"spin the monkey image\"\"\"\n    center = self.rect.center\n    self.dizzy = self.dizzy + 12\n    if self.dizzy >= 360:\n        self.dizzy = False\n        self.image = self.original\n    else:\n        rotate = pg.transform.rotate\n        self.image = rotate(self.original, self.dizzy)\n    self.rect = self.image.get_rect(center=center)\n```\n\n----------------------------------------\n\nTITLE: Font Path Example in Python\nDESCRIPTION: Example demonstrating how to use pygame.font.match_font() to get the path of a system font\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint pygame.font.match_font('bitstreamverasans')\n# output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf\n# (but only if you have Vera on your system)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Rect Object in Python\nDESCRIPTION: Shows how the Rect object can be unpacked through iteration to access its left, top, width, and height values directly.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr = Rect(0, 1, 2, 3)\nx, y, w, h = r\n```\n\n----------------------------------------\n\nTITLE: Creating Surface from Array in Python\nDESCRIPTION: The make_surface function creates a new Surface that best resembles the data and format of the input array. It works with 2D or 3D arrays of any sized integer values and uses the array struct interface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nmake_surface(array) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation in Vector3 Class (Python)\nDESCRIPTION: Returns a linear interpolation between the current vector and a given vector. The second parameter determines the interpolation position.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nlerp(Vector3, float, /) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled Polygon in Pygame\nDESCRIPTION: Draws a filled polygon on a surface by connecting provided points. Takes surface, sequence of (x,y) coordinates (minimum 3 points), and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfilled_polygon(surface, points, color)\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Volume in Pygame\nDESCRIPTION: Shows how to set the volume of a playing channel. Supports setting volume for both speakers or individually for left and right speakers in stereo mode.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nset_volume(value, /) -> None\nset_volume(left, right, /) -> None\n```\n\n----------------------------------------\n\nTITLE: D-pad Axis Mapping\nDESCRIPTION: Maps the directional pad (d-pad) inputs to Pygame axis coordinates for vertical and horizontal movement.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nDown -> Up      - Y Axis\nLeft -> Right   - X Axis\n```\n\n----------------------------------------\n\nTITLE: Fading Out Music in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to fade out and stop the currently playing music. The time parameter specifies the duration of the fade-out effect in milliseconds. This function blocks until the music has faded out.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfadeout(time, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Cursor Display in Pygame\nDESCRIPTION: This function displays two different custom cursors: an arrow and a circle with a crossbar. It showcases Pygame's ability to create and display custom cursor shapes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef cursors.main():\n    \"\"\"Display an arrow or circle with crossbar cursor.\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Uninitializing Pygame Modules in Python\nDESCRIPTION: Uninitializes all previously initialized pygame modules. Safe to call multiple times. Does not exit the program.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nquit() -> None\n```\n\n----------------------------------------\n\nTITLE: Interactive Image Scaling with Smoothscale in Pygame\nDESCRIPTION: This function allows interactive scaling of an image using Pygame's smoothscale function. It takes an image file as input and optionally performs alpha conversion and speed testing. Arrow keys are used to adjust the image size.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef scaletest.main(imagefile, convert_alpha=False, run_speed_test=True):\n    \"\"\"A smoothscale example that resized an image on the screen.\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Normalizing Color Values in Python\nDESCRIPTION: Method to return the normalized RGBA values of the Color as floating point values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nnormalize() -> tuple\n```\n\n----------------------------------------\n\nTITLE: Defining Font Style Constants in Python\nDESCRIPTION: This snippet defines constants for various font styles that can be used with the Font class. These constants can be combined using bitwise OR to create composite styles.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSTYLE_NORMAL\nSTYLE_UNDERLINE\nSTYLE_OBLIQUE\nSTYLE_STRONG\nSTYLE_WIDE\nSTYLE_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Touch Device Dictionary Structure in Python\nDESCRIPTION: Defines the structure of the dictionary returned by the get_finger() function, containing information about a touch input finger including its id, normalized x/y positions, and pressure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/touch.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nid         the id of the finger (an integer).\nx          the normalized x position of the finger, between 0 and 1.\ny          the normalized y position of the finger, between 0 and 1.\npressure   the amount of pressure applied by the finger, between 0 and 1.\n```\n\n----------------------------------------\n\nTITLE: Smooth Scale by Factor in PyGame\nDESCRIPTION: Function for high-quality surface scaling by a factor rather than explicit size. Supports separate x and y scaling factors.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nsmoothscale_by(surface, factor, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Transformation to a Pygame Surface\nDESCRIPTION: This code snippet demonstrates how to use the hsl() function to apply hue, saturation, and lightness transformations to a Pygame surface. It rotates the hue by 30 degrees, increases saturation by 20%, and decreases lightness by 10%.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nnew_surf = hsl(original_surf, 30, 0.2, -0.1)\n```\n\n----------------------------------------\n\nTITLE: Loading Music File by File Name in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to load a music file for playback by filename. This prepares the music file for playback but does not start playing it. If music is already playing, it will be stopped.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nload(filename) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Current Audio Driver Name\nDESCRIPTION: Returns the internal name of the current audio backend driver. Useful for diagnostic and debugging information. Can be controlled with the SDL_AUDIODRIVER environment variable.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.get_driver()\n```\n\n----------------------------------------\n\nTITLE: Locking Surface Memory in Pygame\nDESCRIPTION: The lock method locks the pixel data of a Surface for direct access. This is necessary for reading or writing pixel values on some accelerated surfaces.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nSurface.lock() -> None\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector in Vector3 Class (Python)\nDESCRIPTION: Rotates the vector by a given angle in degrees around a specified axis. Returns a new Vector3 instance.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nrotate(angle, Vector3, /) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Rectangle Dictionary Collision Detection - All Matches\nDESCRIPTION: The collidedictall method tests if a rectangle intersects with all rectangles stored in a dictionary. Returns a list of all matching key-value pairs. The values parameter determines whether to check against dictionary keys (default) or values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nrect.collidedictall(rect_dict) -> [(key, value), ...]\nrect.collidedictall(rect_dict, values=False) -> [(key, value), ...]\n```\n\n----------------------------------------\n\nTITLE: Writing System Exclusive MIDI Messages\nDESCRIPTION: Examples showing how to send system exclusive (SysEx) MIDI messages using both string and list formats with timestamps.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmidi_output.write_sys_ex(0, '\\xF0\\x7D\\x10\\x11\\x12\\x13\\xF7')\n\n# is equivalent to\n\nmidi_output.write_sys_ex(pygame.midi.time(),\n                       [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])\n```\n\n----------------------------------------\n\nTITLE: Drawing Antialiased Triangle in Pygame\nDESCRIPTION: Draws an unfilled antialiased triangle on a surface for smoother edges. Takes surface, three sets of (x,y) coordinates and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\naatrigon(surface, x1, y1, x2, y2, x3, y3, color)\n```\n\n----------------------------------------\n\nTITLE: Converting Circle to Rect in Pygame\nDESCRIPTION: Creates the smallest possible Rect object that contains the circle.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRect(circle.x - circle.r, circle.y - circle.r, circle.r * 2, circle.r * 2)\n```\n\n----------------------------------------\n\nTITLE: Surface Flags Constants in Pygame\nDESCRIPTION: Constants used for Surface flags in Pygame, defining various surface properties and behaviors. These flags indicate memory location, blitting behavior, and other surface characteristics.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nSWSURFACE      0x00000000    # Surface is in system memory\nHWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory\nASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible\n\nHWACCEL        0x00000100    # Blit uses hardware acceleration\nSRCCOLORKEY    0x00001000    # Blit uses a source color key\nRLEACCELOK     0x00002000    # Private flag\nRLEACCEL       0x00004000    # Surface is RLE encoded\nSRCALPHA       0x00010000    # Blit uses source alpha blending\nPREALLOC       0x01000000    # Surface uses preallocated memory\n```\n\n----------------------------------------\n\nTITLE: Checking Pygame Initialization Status in Python\nDESCRIPTION: Returns True if pygame is currently initialized. Added in version 1.9.5.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_init() -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Mask Rect in Python\nDESCRIPTION: Returns a Rect object based on the size of the mask, with optional position attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nget_rect(**kwargs) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Using Circle's collidelist and collidelistall Methods\nDESCRIPTION: Examples of using collidelist and collidelistall methods to test for collisions with multiple shapes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# collidelist example\nindex = circle.collidelist([shape1, shape2, shape3])\n\n# collidelistall example\nindices = circle.collidelistall([shape1, shape2, shape3])\n```\n\n----------------------------------------\n\nTITLE: Activating Joystick Rumble Effect in Python\nDESCRIPTION: This method starts a rumble effect on the joystick with specified low and high frequency strengths (0 to 1) and duration in milliseconds. Setting duration to 0 plays the effect until overwritten or stopped.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrumble(low_frequency, high_frequency, duration) -> bool\n```\n\n----------------------------------------\n\nTITLE: Resuming Playback on Paused Sound Channels\nDESCRIPTION: Resumes playback on all active sound channels that were previously paused with pause().\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.unpause()\n```\n\n----------------------------------------\n\nTITLE: In-place Surface Alpha Premultiplication Method\nDESCRIPTION: Multiplies the RGB channels by the alpha channel directly on the existing surface. Only works on surfaces with alpha channel.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\npremul_alpha_ip() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Value for Surface in Pygame\nDESCRIPTION: The set_alpha method sets the alpha value for the entire Surface, controlling its transparency when blitted onto a destination.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nSurface.set_alpha(value, flags=0, /) -> None\nSurface.set_alpha(None) -> None\n```\n\n----------------------------------------\n\nTITLE: Pygame Event Handling for Bat Movement\nDESCRIPTION: Event handling code that processes keyboard input to control the bat movement. Handles key press and release events for up/down movement.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/tom-games5.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor event in pygame.event.get():\n    if event.type == QUIT:\n        return\n    elif event.type == KEYDOWN:\n        if event.key == K_UP:\n            player.moveup()\n        if event.key == K_DOWN:\n            player.movedown()\n    elif event.type == KEYUP:\n        if event.key == K_UP or event.key == K_DOWN:\n            player.movepos = [0,0]\n            player.state = \"still\"\n```\n\n----------------------------------------\n\nTITLE: Keyboard Modifiers Reference in Pygame\nDESCRIPTION: A reference table of keyboard modifier constants from pygame.locals module that can be used to detect the state of modifier keys like Shift, Ctrl, Alt, etc.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npygame\nConstant      Description\n-------------------------\nKMOD_NONE     no modifier keys pressed\nKMOD_LSHIFT   left shift\nKMOD_RSHIFT   right shift\nKMOD_SHIFT    left shift or right shift or both\nKMOD_LCTRL    left control\nKMOD_RCTRL    right control\nKMOD_CTRL     left control or right control or both\nKMOD_LALT     left alt\nKMOD_RALT     right alt\nKMOD_ALT      left alt or right alt or both\nKMOD_LMETA    left meta\nKMOD_RMETA    right meta\nKMOD_META     left meta or right meta or both\nKMOD_CAPS     caps lock\nKMOD_NUM      num lock\nKMOD_MODE     AltGr\n```\n\n----------------------------------------\n\nTITLE: Initializing and Checking Controller Module in Python\nDESCRIPTION: Shows how to initialize the controller module, check its initialization status, and uninitialize it. These functions are essential for setting up and managing the controller module.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npygame._sdl2.controller.init()\npygame._sdl2.controller.get_init()\npygame._sdl2.controller.quit()\n```\n\n----------------------------------------\n\nTITLE: Getting Mask Size in Python\nDESCRIPTION: Returns the size of the mask as a tuple of width and height.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nget_size() -> (width, height)\n```\n\n----------------------------------------\n\nTITLE: Referencing Pygame Scrap Constants in Python\nDESCRIPTION: This snippet demonstrates how to reference the clipboard and selection constants in the pygame.scrap module. These constants are used to specify the mode for clipboard operations.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npygame.SCRAP_CLIPBOARD or pygame.SCRAP_SELECTION\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Callback Function in Python for Pygame Group\nDESCRIPTION: This code snippet demonstrates a callback function that can be used with the Group.clear() method to fill cleared areas with solid red color.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear_callback(surf, rect):\n    color = 255, 0, 0\n    surf.fill(color, rect)\n```\n\n----------------------------------------\n\nTITLE: Defining RectLike Type Examples\nDESCRIPTION: Examples of valid RectLike types including coordinate tuples, point pairs, and objects with rect attributes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/typing.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(x, y, w, h)\n(Point, Point)\npygame.Rect(RectLike)\n```\n\n----------------------------------------\n\nTITLE: Setting Music Volume in Pygame Mixer Music\nDESCRIPTION: Shows how to set the volume of the music playback. The volume parameter is a float between 0.0 and 1.0, where 0.0 is silent and 1.0 is full volume. When new music is loaded, the volume is reset to full.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nset_volume(volume, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Color from Normalized Components in Python\nDESCRIPTION: Class method to create a Color object from normalized color components. It can accept either a single object or separate r, g, b, a values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom_normalized(object, /) -> Color\nfrom_normalized(r, g, b, a /) -> Color\n```\n\n----------------------------------------\n\nTITLE: Getting Current Number of Playback Channels\nDESCRIPTION: Returns the number of currently active playback channels in the mixer.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.get_num_channels()\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Inputs in Python\nDESCRIPTION: Demonstrates how to read the state of various controller inputs, including axes and buttons. These methods are crucial for implementing game controls.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncontroller.get_axis(axis)\ncontroller.get_button(button)\n```\n\n----------------------------------------\n\nTITLE: Using clipline Method for Collision Detection in Python\nDESCRIPTION: Example demonstrating how to use the clipline method for collision detection between a rectangle and a line in pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example using clipline().\nclipped_line = rect.clipline(line)\n\nif clipped_line:\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction for Harfbuzz Rendering in Pygame\nDESCRIPTION: The set_direction method sets the font direction for harfbuzz text rendering. It takes an integer between 0 and 3 as input, with constants provided for different directions. This method requires Pygame built with SDL_ttf 2.20.0 or above.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nset_direction(direction) -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Music Playback Status in Pygame Mixer Music\nDESCRIPTION: Shows how to check if the music stream is actively playing. Returns True when music is playing and False when idle or paused (in pygame 2.0.1+).\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nget_busy() -> bool\n```\n\n----------------------------------------\n\nTITLE: Updating Vector3 Coordinates in Pygame\nDESCRIPTION: Method for setting the coordinates of a Vector3 object, supporting various input formats.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nupdate() -> None\nupdate(int) -> None\nupdate(float) -> None\nupdate(Vector3) -> None\nupdate(x, y, z) -> None\nupdate((x, y, z)) -> None\n```\n\n----------------------------------------\n\nTITLE: Copying Pixels to 2D Array in Python\nDESCRIPTION: The array2d function copies the mapped (raw) pixels from a Surface into a 2D array. It works for any pixel format and temporarily locks the Surface while copying.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\narray2d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Premultiplying Alpha in Color in Python\nDESCRIPTION: Method to return a new Color where the RGB components have been multiplied by the alpha channel. Useful for BLEND_PREMULTIPLIED blending mode.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npremul_alpha() -> Color\n```\n\n----------------------------------------\n\nTITLE: Referencing Pixels in 3D Array in Python\nDESCRIPTION: The pixels3d function creates a new 3D array that directly references pixel values in a Surface. It only works with 24-bit or 32-bit formats and keeps the Surface locked while the array exists.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npixels3d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Controlling Controller Rumble in Python\nDESCRIPTION: Illustrates how to start and stop rumble effects on compatible controllers. This feature enhances game feedback through haptic responses.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ncontroller.rumble(low_frequency, high_frequency, duration)\ncontroller.stop_rumble()\n```\n\n----------------------------------------\n\nTITLE: Referencing Alpha Values in 2D Array in Python\nDESCRIPTION: The pixels_alpha function creates a 2D array directly referencing alpha values in a Surface. It only works on 32-bit Surfaces with per-pixel alpha and keeps the Surface locked while the array exists.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npixels_alpha(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Wrapping with Pygame Font\nDESCRIPTION: Example function that implements word wrapping for text rendering. It uses the font's get_rect and render_to methods to calculate text dimensions and render words to a surface, wrapping to new lines when text exceeds the surface width.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef word_wrap(surf, text, font, color=(0, 0, 0)):\n    font.origin = True\n    words = text.split(' ')\n    width, height = surf.get_size()\n    line_spacing = font.get_sized_height() + 2\n    x, y = 0, line_spacing\n    space = font.get_rect(' ')\n    for word in words:\n        bounds = font.get_rect(word)\n        if x + bounds.width + bounds.x >= width:\n            x, y = 0, y + line_spacing\n        if x + bounds.width + bounds.x >= width:\n            raise ValueError(\"word too wide for the surface\")\n        if y + bounds.height - bounds.y >= height:\n            raise ValueError(\"text to long for the surface\")\n        font.render_to(surf, (x, y), None, color)\n        x += bounds.width + space.width\n    return x, y\n```\n\n----------------------------------------\n\nTITLE: Subsurface Management\nDESCRIPTION: Methods for creating and managing subsurfaces, which are new surfaces that share pixels with their parent surface. Includes getting parent references and offset positions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nsubsurface(rect, /) -> Surface\nget_parent() -> Surface\nget_abs_parent() -> Surface\nget_offset() -> (x, y)\n```\n\n----------------------------------------\n\nTITLE: Copying Alpha Values to 2D Array in Python\nDESCRIPTION: The array_alpha function copies pixel alpha values from a Surface into a 2D array. It works for any Surface format and returns an array with opaque values for Surfaces without pixel alpha.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\narray_alpha(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Initializing Mask Object in Python\nDESCRIPTION: Creates a Mask object representing a 2D bitmask with specified dimensions and optional fill.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nMask(size=(width, height)) -> Mask\nMask(size=(width, height), fill=False) -> Mask\n```\n\n----------------------------------------\n\nTITLE: Copying Blue Pixel Values to 2D Array in Python\nDESCRIPTION: The array_blue function copies pixel blue values from a Surface into a 2D array. It works for any Surface format and temporarily locks the Surface while copying.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\narray_blue(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Queuing Sound on a Channel in Pygame\nDESCRIPTION: Demonstrates how to queue a Sound object to play after the current sound finishes on a Channel. Only one Sound can be queued at a time.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nqueue(sound, /) -> None\n```\n\n----------------------------------------\n\nTITLE: MIDI Note to ANSI Note Name Conversion Example\nDESCRIPTION: Demonstrates converting a MIDI note number to its ANSI note name representation\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmidi_to_ansi_note(21) == 'A0'\n```\n\n----------------------------------------\n\nTITLE: Blitting Array to Surface in Pygame\nDESCRIPTION: Function to directly copy values from an array into a Surface. More efficient than converting array to Surface first. Requires matching dimensions and accepts integer, ASCII character and record arrays. Temporarily locks the Surface during copy operation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nblit_array(Surface, array) -> None\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Blend Mode in PyGame\nDESCRIPTION: Method signature for composing custom blend modes in PyGame. Takes color_mode and alpha_mode tuples as parameters and returns an integer representing the blend mode. The color_mode tuple contains source color factor, destination color factor, and color operation. The alpha_mode tuple contains source alpha factor, destination alpha factor, and alpha operation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncompose_custom_blend_mode(color_mode, dstColorFactor, colorOperation) -> int\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Camera Controls with Pygame in Python\nDESCRIPTION: This code demonstrates how to set and get camera controls such as flipping the image. These controls can be used after starting the camera.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncam.set_controls(hflip = True, vflip = False)\nprint camera.get_controls()\n```\n\n----------------------------------------\n\nTITLE: Copying Pixels to 3D Array in Python\nDESCRIPTION: The array3d function copies pixels from a Surface into a 3D array. It works for any pixel format and temporarily locks the Surface while copying.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\narray3d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Accessing Font Background Color in Pygame\nDESCRIPTION: Gets or sets the default background rendering color for text. Initially unset, text renders with a transparent background by default. Applies to render() and render_to() methods.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbgcolor -> Color\n```\n\n----------------------------------------\n\nTITLE: Animating Moving Text in Pygame\nDESCRIPTION: This code creates a Pygame window with moving text that bounces off the screen edges. It demonstrates text rendering, animation logic, and frame rate control using pygame.time.Clock.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/3.Move_text/Basic PROCESS.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nwhite = (255,255,255)\nred = (255,0,0)\ngreen = (0,255,0)\npygame.init()\npygame.display.set_caption(\"Moving World Project\")\nmyScreen = pygame.display.set_mode((640, 480))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render(\"Moving World!\", True, red, green)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (320, 240)\nfpsClock = pygame.time.Clock()\nx = 0\ny = 0\nmoveRight = 1\nmoveUp= 1\n\nwhile True:\n    if (moveRight == 1):\n        x = x + 1\n        if (x >= 320 - 75):\n            moveRight = 0\n    elif (moveRight == 0):\n        x = x - 1\n        if (x <= -320 + 75):\n            moveRight = 1\n\n    if (moveUp == 1):\n        y = y + 1\n        if (y >= 240 - 15):\n            moveUp = 0\n    elif (moveUp == 0):\n        y = y - 1\n        if (y <= -240 + 15):\n            moveUp = 1\n\n    myTextArea.center = (320 + x, 240 + y)\n\n    myScreen.fill(white)\n    myScreen.blit(myText, myTextArea)\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n\n    pygame.display.update()\n    fpsClock.tick(60)\n```\n\n----------------------------------------\n\nTITLE: Creating a Flipped Surface from PixelArray\nDESCRIPTION: Shows how to create a new Surface that is flipped around the vertical axis using slicing and the make_surface() method.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create a new surface flipped around the vertical axis.\nsf = pxarray[:,::-1].make_surface()\n```\n\n----------------------------------------\n\nTITLE: Loading Basic BMP Images in Pygame\nDESCRIPTION: Loads a BMP image from a file or file-like object. This function is always available regardless of how Pygame was built, but only supports the basic BMP format.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nload_basic(file, /) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Getting Music Volume in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to get the current volume level for the mixer. The returned value will be a float between 0.0 and 1.0.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nget_volume() -> value\n```\n\n----------------------------------------\n\nTITLE: Moving a Line Object in Pygame\nDESCRIPTION: Creates a new Line object moved by the given x,y offset while preserving the original line.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nLine(line.ax + x, line.ay + y, line.bx + x, line.by + y)\n```\n\n----------------------------------------\n\nTITLE: Encoding File Paths in Python for Pygame\nDESCRIPTION: Encodes a Unicode or bytes object as a file system path. Uses the codec returned by sys.getfilesystemencoding().\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nencode_file_path([obj [, etype]]) -> bytes or None\n```\n\n----------------------------------------\n\nTITLE: Palette Management in Pygame\nDESCRIPTION: Methods for managing color palettes in 8-bit surfaces, including getting and setting full palettes and individual palette entries.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nget_palette() -> [Color, Color, Color, ...]\nget_palette_at(index, /) -> Color\nset_palette([color, color, color, ...], /) -> None\nset_palette_at(index, color, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Resolution in Pygame\nDESCRIPTION: Read-only attribute that gets the pixel size used in scaling font glyphs for the Font instance. The resolution is measured in dots per inch (DPI).\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nresolution -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Font Render Origin Mode in Pygame\nDESCRIPTION: Controls whether render_to() and render_raw_to() methods use the text origin or top-left corner of the bounding box as the destination position. When True, uses the text origin.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\norigin -> bool\n```\n\n----------------------------------------\n\nTITLE: MIDI Input/Output Example in Pygame\nDESCRIPTION: This function demonstrates MIDI functionality in Pygame. It can run in output mode (translating mouse/keyboard events to MIDI notes), input mode (logging MIDI events), or list available MIDI devices. It requires Pygame 1.9.0 or newer.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef midi.main(mode='output', device_id=None):\n    \"\"\"Run a midi example\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Mouse Mode in Pygame\nDESCRIPTION: Sets the relative mouse mode state. In relative mode, the cursor is hidden, mouse position is constrained to the window, and continuous relative mouse motion is reported. This function flushes any pending mouse motion.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mouse.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nset_relative_mode(enable, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Font Point Size in Pygame\nDESCRIPTION: Sets the point size of the font to the specified value. This is the same value used to initialize the font.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nset_point_size(size, /) -> int\n```\n\n----------------------------------------\n\nTITLE: Controlling Channel Playback in Pygame\nDESCRIPTION: Illustrates various methods for controlling playback on a Channel, including stopping, pausing, unpausing, and fading out.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nstop() -> None\npause() -> None\nunpause() -> None\nfadeout(time, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Fast Rectangular Pixel Manipulations\nDESCRIPTION: Shows how to perform fast rectangular pixel manipulations using subscript slices instead of iterating over axes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npxarray[::2, :] = (0, 0, 0)               # Make even columns black.\npxarray[::2] = (0, 0, 0)                  # Same as [::2, :]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Premultiplied Alpha Composition with Text in Pygame\nDESCRIPTION: This code example shows how premultiplied alpha composition improves the rendering quality when blending two surfaces with per-pixel alpha, such as text on a semi-transparent background.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/premultiplied-alpha.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\n\npygame.init()\n\npygame.display.set_caption(\"Premultiplied Alpha\")\ndisplay_surf = pygame.display.set_mode((300, 170))\n\ntext_font = pygame.font.Font(\"fonts/verdana.ttf\", size=12)\n\ntool_tip_text = text_font.render(\n    \"Some text in a box, to test alpha blending. \"\n    \"A quick brown fox jumps over the lazy dog.\",\n    True,\n    (200, 200, 250),\n    wraplength=100,\n).convert_alpha()\ntool_tip_text = tool_tip_text.premul_alpha()\n\ntool_tip_surf = pygame.Surface((120, 120), flags=pygame.SRCALPHA)\ntool_tip_surf.fill((50, 50, 50, 25))\ntool_tip_surf = tool_tip_surf.premul_alpha()\n\ntool_tip_surf.blit(tool_tip_text, (10, 10),\n                   special_flags=pygame.BLEND_PREMULTIPLIED)\n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    display_surf.fill((180, 140, 50))\n\n    display_surf.blit(tool_tip_surf, (25, 25),\n                      special_flags=pygame.BLEND_PREMULTIPLIED)\n\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Moving a Circle In-Place in Pygame\nDESCRIPTION: Shows how to move a circle by directly updating its coordinates in place.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncircle.x += x\ncircle.y += y\n```\n\n----------------------------------------\n\nTITLE: Referencing Green Pixel Values in 2D Array in Python\nDESCRIPTION: The pixels_green function creates a 2D array directly referencing green values in a Surface. It only works on 24-bit or 32-bit Surfaces and keeps the Surface locked while the array exists.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npixels_green(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Image Class Method: draw\nDESCRIPTION: Method to copy a portion of an Image to the rendering target. Accepts optional source and destination rectangles for specifying the drawing area.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndraw(srcrect=None, dstrect=None) -> None\n```\n\n----------------------------------------\n\nTITLE: Using array_to_surface in pygame.pixelcopy\nDESCRIPTION: Copies data from an array object to a surface. This function is similar to pygame.surfarray.blit_array.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray_to_surface(surface, array, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Importing pygame.gfxdraw Module in Python\nDESCRIPTION: Example showing how to import the pygame.gfxdraw module explicitly, as it's not automatically imported with the main pygame package.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\nimport pygame.gfxdraw\n```\n\n----------------------------------------\n\nTITLE: Getting Current Mouse Cursor in Pygame\nDESCRIPTION: Retrieves information about the current mouse system cursor. The return value contains the same data as the arguments passed into pygame.mouse.set_cursor().\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mouse.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_cursor() -> pygame.cursors.Cursor\n```\n\n----------------------------------------\n\nTITLE: Enabling UCS-4 Mode for Font Unicode Handling in Pygame\nDESCRIPTION: Controls Unicode text decoding. When True, disables UTF-16 surrogate pair decoding, allowing access to the full UCS-4 character range on systems with four-byte Unicode character support.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nucs4 -> bool\n```\n\n----------------------------------------\n\nTITLE: Converting Color to Grayscale in Python\nDESCRIPTION: Method to return a new Color object representing the grayscale version of the original color, using the luminosity formula.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ngrayscale() -> Color\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Rectangles for Connected Components in Pygame Mask\nDESCRIPTION: The get_bounding_rects method returns a list of Rect objects representing the bounding rectangles of connected components in the mask. It returns an empty list if the mask has no bits set.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nget_bounding_rects() -> list[Rect]\n```\n\n----------------------------------------\n\nTITLE: Defining RendererDriverInfo Class Attributes in Python\nDESCRIPTION: Lists the attributes of the RendererDriverInfo class, which encapsulates renderer driver information. These attributes provide details about rendering capabilities and limitations.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname\nflags\nnum_texture_formats\nmax_texture_width\nmax_texture_height\n```\n\n----------------------------------------\n\nTITLE: Pausing All Sound Channels\nDESCRIPTION: Temporarily stops playback on all active mixer channels. The playback can be resumed later with unpause().\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.pause()\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Slice Syntax\nDESCRIPTION: Demonstrates alternative slice syntax where column slices can be omitted or replaced with ellipsis (...) notation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]\npxarray[...] = (255, 0, 0)                # Same as pxarray[:]\n```\n\n----------------------------------------\n\nTITLE: Getting Alpha Value of Surface in Pygame\nDESCRIPTION: The get_alpha method returns the current alpha value for the Surface, indicating its overall transparency level.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nSurface.get_alpha() -> int_value\n```\n\n----------------------------------------\n\nTITLE: Trigger Axis Mapping\nDESCRIPTION: Maps the left and right triggers' pressure sensitivity to Pygame axis numbers.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nOut -> In       - Axis 5\n\nOut -> In       - Axis 4\n```\n\n----------------------------------------\n\nTITLE: Mapping 3D Array to 2D Array in Pygame\nDESCRIPTION: Converts a 3D array into a 2D array using the specified Surface format for conversion. Supports palette surface formats for NumPy arrays.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nmap_array(Surface, array3d) -> array2d\n```\n\n----------------------------------------\n\nTITLE: Converting a NumPy Array into a Sound Object in Python\nDESCRIPTION: Creates a new playable Sound object from a NumPy array. Requires the mixer module to be initialized and the array format to be compatible with the mixer audio format.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmake_sound(array) -> Sound\n```\n\n----------------------------------------\n\nTITLE: Creating Background and Screen Management\nDESCRIPTION: Shows how to properly manage background and screen states by creating separate lists and copying values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbackground = [1, 1, 2, 2, 2, 1]\nscreen = [0]*6\nfor i in range(6):\n    screen[i] = background[i]\nprint(screen)\nplayerpos = 3\nscreen[playerpos] = 8\nprint(screen)\n```\n\n----------------------------------------\n\nTITLE: Setting Music Position in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to set the position in the music file where playback will start. The meaning of the position parameter depends on the music format (pattern number for MOD, seconds for OGG, relative seconds for MP3).\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nset_pos(pos, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Surface Width Property\nDESCRIPTION: Read-only property that returns the width of the surface in pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nwidth -> int\n```\n\n----------------------------------------\n\nTITLE: Running Pygame Examples as Standalone Programs\nDESCRIPTION: Shows how to run pygame examples as standalone programs using the Python -m option. This allows running example modules directly from the command line.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pygame.examples.<example name> <example arguments>\n```\n\n----------------------------------------\n\nTITLE: Drawing Bézier Curve in Pygame\nDESCRIPTION: The bezier function draws a Bézier curve on a given surface. It takes parameters for the surface, points, number of interpolation steps, and color. The function requires at least 3 points, each with 2 coordinates, and a minimum of 2 steps for interpolation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.bezier(surface, points, steps, color)\n```\n\n----------------------------------------\n\nTITLE: Moving a Circle in Pygame\nDESCRIPTION: Demonstrates equivalent code for moving a circle by creating a new instance with updated coordinates.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCircle((circle.x + x, circle.y + y), circle.r)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Music Metadata Example in Pygame\nDESCRIPTION: Example showing the dictionary structure returned by get_metadata() containing music track information like title, album, artist and copyright.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n{'title': 'Small Tone', 'album': 'Tones', 'artist': 'Audacity Generator', 'copyright': ''}\n```\n\n----------------------------------------\n\nTITLE: Initializing Individual Pygame Module\nDESCRIPTION: Shows how to initialize a specific Pygame module (font in this example) individually. This method allows for more precise control and will raise exceptions if initialization fails.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/import-init.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npygame.font.init()\n```\n\n----------------------------------------\n\nTITLE: Loading Music File from File Object in Pygame Mixer Music\nDESCRIPTION: Shows how to load music from a file object with an optional namehint parameter to specify the type of music data. This is useful when loading from memory or non-standard sources.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nload(fileobj, namehint=\"\") -> None\n```\n\n----------------------------------------\n\nTITLE: Getting SDL Error Message in Python\nDESCRIPTION: Retrieves the current SDL error message. Usually not needed as the message is provided when pygame.error is raised.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nget_error() -> errorstr\n```\n\n----------------------------------------\n\nTITLE: Supported MIDI Interfaces List\nDESCRIPTION: Lists the supported MIDI interfaces across different operating systems, including those not yet implemented\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nMMSystem   # the only Win32 interface currently supported\nALSA       # the only Linux interface currently supported\nCoreMIDI   # the only Mac OS X interface currently supported\n# DirectX - not implemented\n# OSS     - not implemented\n```\n\n----------------------------------------\n\nTITLE: Vector Equality Tolerance Configuration in Pygame\nDESCRIPTION: Configuration value that determines when two vectors are considered equal based on their length difference. References the epsilon property of Pygame's Vector2 class to establish floating point comparison tolerance.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\npygame.math.Vector2.epsilon\n```\n\n----------------------------------------\n\nTITLE: Registering Quit Function in Python\nDESCRIPTION: Registers a function to be called when pygame.quit() is called. Rarely needed as pygame modules do this automatically.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nregister_quit(callable, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Music Play Time in Pygame Mixer Music\nDESCRIPTION: Shows how to get the number of milliseconds that the music has been playing. The returned time only represents how long the music has been playing and does not account for starting position offsets.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nget_pos() -> time\n```\n\n----------------------------------------\n\nTITLE: Surface Height Property\nDESCRIPTION: Read-only property that returns the height of the surface in pixels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nheight -> int\n```\n\n----------------------------------------\n\nTITLE: Audio File Player with Playback Control in Pygame\nDESCRIPTION: This function implements a simple music player with window and keyboard playback control. It can play an audio file, pause playback, and rewind to the beginning, showcasing Pygame's audio playback capabilities.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef playmus.main(file_path):\n    \"\"\"A simple music player with window and keyboard playback control.\"\"\"\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation between Colors in Python\nDESCRIPTION: Method to perform linear interpolation between two Colors in RGBA space. The second parameter determines the interpolation amount.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nlerp(Color, float) -> Color\n```\n\n----------------------------------------\n\nTITLE: Clearing Events from Queue in Python using Pygame\nDESCRIPTION: This function removes all events or specific event types from the queue. It can optionally pump events.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclear(eventtype=None) -> None\nclear(eventtype=None, pump=True) -> None\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pygame Community Edition\nDESCRIPTION: Pip command to upgrade pygame-ce to the latest full release. This ensures you have the most recent stable version with all fixes and improvements.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pygame-ce --upgrade\n```\n\n----------------------------------------\n\nTITLE: Surface Size Property\nDESCRIPTION: Read-only property that returns the dimensions (width, height) of the surface as a tuple of integers.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nsize -> tuple[int, int]\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame Window Module Documentation in RST\nDESCRIPTION: Sphinx documentation markup that includes common text file and sets up auto-documentation for the pygame.Window class and its members.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/window.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: common.txt\n\n:mod:`pygame.Window`\n=====================\n\n.. currentmodule:: pygame\n\n.. autopgclass:: pygame.Window\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Getting Bit Value in Mask in Python\nDESCRIPTION: Gets the bit value (0 or 1) at the given position in the mask.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nget_at(pos) -> int\n```\n\n----------------------------------------\n\nTITLE: Copying Mask Object in Python\nDESCRIPTION: Returns a new copy of the mask with the same dimensions and set/unset bits.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncopy() -> Mask\n```\n\n----------------------------------------\n\nTITLE: Queuing Music File by Filename in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to queue a sound file to play after the current one finishes. Only one sound can be queued at a time. If the current sound is stopped or changed, the queued sound will be lost.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nqueue(filename) -> None\n```\n\n----------------------------------------\n\nTITLE: Calculating Dot Product in Vector3 Class (Python)\nDESCRIPTION: Calculates the dot or scalar product with another vector. Returns a float value.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndot(Vector3, /) -> float\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Objects in Pygame\nDESCRIPTION: Demonstrates different ways to create a Circle object in pygame using coordinates and radius values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n((x, y), radius)\n(x, y, radius)\n(vector2, radius)\n```\n\n----------------------------------------\n\nTITLE: Updating Color Components in Python\nDESCRIPTION: Method to set the elements of the color. It can accept either separate r, g, b (and optionally a) values or a single color value.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nupdate(r, g, b, /) -> None\nupdate(r, g, b, a=255, /) -> None\nupdate(color_value, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Including Common Documentation File in reStructuredText\nDESCRIPTION: This directive includes a common documentation file named 'common.txt' into the current document. It's likely used to share common content across multiple documentation files.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: common.txt\n```\n\n----------------------------------------\n\nTITLE: Vector3 Magnitude Clamping in Pygame\nDESCRIPTION: Methods for clamping the magnitude of a Vector3 object between specified minimum and maximum values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nclamp_magnitude(max_length, /) -> Vector3\nclamp_magnitude(min_length, max_length, /) -> Vector3\nclamp_magnitude_ip(max_length, /) -> None\nclamp_magnitude_ip(min_length, max_length, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Closing PixelArray and Releasing Surface Lock in Pygame\nDESCRIPTION: This method is used to explicitly close a PixelArray object and release the lock on its associated Surface. It returns the PixelArray object itself. This method was added in Pygame version 1.9.4.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclose() -> PixelArray\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector Components in Pygame\nDESCRIPTION: Demonstrates how to retrieve and set vector coordinates using attributes or subscripts in Pygame's Vector3 class.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nv = pygame.Vector3()\n\nv.x = 5\nv[1] = 2 * v.x\nprint(v[1]) # 10\n\nv.x == v[0]\nv.y == v[1]\nv.z == v[2]\n```\n\n----------------------------------------\n\nTITLE: Initializing BufferProxy in Python\nDESCRIPTION: Creates a BufferProxy object to export a surface buffer through an array protocol. It can be initialized with a parent object or a dictionary describing the buffer layout.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nBufferProxy(parent) -> BufferProxy\n```\n\n----------------------------------------\n\nTITLE: Using Threshold Function in Pygame Transform Module\nDESCRIPTION: This code snippet is part of a test case for the threshold() function in the Pygame transform module. It demonstrates how to use the function to count pixels within a certain color threshold without modifying the destination surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../test/transform_test.py\n   :pyobject: TransformModuleTest.test_threshold_dest_surf_not_change\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple MIDI Messages with Timestamps\nDESCRIPTION: Example of writing a list of MIDI data to an Output device with timestamps. This shows how to send a program change followed by a note on command with specific timing.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Program change at time 20000 and 500ms later send note 65 with\n# velocity 100.\nwrite([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])\n```\n\n----------------------------------------\n\nTITLE: Converting Circle to FRect in Pygame\nDESCRIPTION: Creates the smallest possible FRect object that contains the circle.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nFRect(circle.x - circle.r, circle.y - circle.r, circle.r * 2, circle.r * 2)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector3 in Python\nDESCRIPTION: Shows different ways to initialize a Vector3 object in Pygame, including default initialization, single value, and coordinate-based initialization.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nVector3() -> Vector3(0, 0, 0)\nVector3(int) -> Vector3\nVector3(float) -> Vector3\nVector3(Vector3) -> Vector3\nVector3(x, y, z) -> Vector3\nVector3((x, y, z)) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Setting End Event for Music Playback in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to set up an event to be sent when music playback stops. The event will be queued every time the music finishes, not just the first time.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nset_endevent(type, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Active Array Type in Python (Deprecated)\nDESCRIPTION: Deprecated function that returns the currently active array type used for array creation. This will be a value from the get_arraytypes() tuple.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget_arraytype() -> str\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector3 around X-axis in Pygame\nDESCRIPTION: Methods for rotating a Vector3 object around the x-axis, including both degree and radian versions, as well as in-place and return-new-vector operations.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nrotate_x_rad(angle, /) -> Vector3\nrotate_x_ip(angle, /) -> None\nrotate_x_ip_rad(angle, /) -> None\nrotate_x_rad_ip(angle, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Importing Experimental Pygame Modules\nDESCRIPTION: Demonstrates different ways to import experimental Pygame modules that are still in development and subject to change. Shows importing general experimental modules and specific SDL2 components.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pygame import experimental_module\n# Or for specific modules like _sdl2.controller\nfrom pygame._sdl2 import controller\n# Or\nimport pygame.experimental_module\n```\n\n----------------------------------------\n\nTITLE: Writing a Single MIDI Message with write_short\nDESCRIPTION: Example demonstrating how to send a note on command using the write_short method, which is used for MIDI messages of 3 bytes or less.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# note 65 on with velocity 100\nwrite_short(0x90, 65, 100)\n```\n\n----------------------------------------\n\nTITLE: Rewinding Music in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to reset playback of the current music to the beginning. If music was previously paused, it will remain paused. Note that WAV files are not supported for rewinding.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrewind() -> None\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Straight Alpha Composition with Text in Pygame\nDESCRIPTION: This code example shows the limitations of straight alpha composition when blending two surfaces with per-pixel alpha, such as text rendering on a semi-transparent background.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/premultiplied-alpha.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\n\npygame.init()\n\npygame.display.set_caption(\"Straight Alpha\")\ndisplay_surf = pygame.display.set_mode((300, 170))\n\ntext_font = pygame.font.Font(\"fonts/verdana.ttf\", size=12)\n\ntool_tip_text = text_font.render(\n    \"Some text in a box, to test alpha blending. \"\n    \"A quick brown fox jumps over the lazy dog.\",\n    True,\n    (200, 200, 250),\n    wraplength=100,\n).convert_alpha()\n\ntool_tip_surf = pygame.Surface((120, 120), flags=pygame.SRCALPHA)\ntool_tip_surf.fill((50, 50, 50, 25))\n\ntool_tip_surf.blit(tool_tip_text, (10, 10))\n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    display_surf.fill((180, 140, 50))\n\n    display_surf.blit(tool_tip_surf, (25, 25))\n\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Putting Data into Clipboard with pygame.scrap.put\nDESCRIPTION: Demonstrates how to place image data and text into the clipboard using the deprecated pygame.scrap.put function. Shows both predefined types and custom user types.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"example.bmp\", \"rb\") as fp:\n    pygame.scrap.put(pygame.SCRAP_BMP, fp.read())\n# The image data is now on the clipboard for other applications to access\n# it.\npygame.scrap.put(pygame.SCRAP_TEXT, b\"A text to copy\")\npygame.scrap.put(\"Plain text\", b\"Data for user defined type 'Plain text'\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default MIDI Device with Environment Variables\nDESCRIPTION: Examples showing how to set default MIDI input and output devices using environment variables on Windows. This allows users to specify which device to use by default.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nset PM_RECOMMENDED_INPUT_DEVICE=1\nor\nset PM_RECOMMENDED_OUTPUT_DEVICE=1\n```\n\n----------------------------------------\n\nTITLE: Channel Creation Function\nDESCRIPTION: Creates a Channel object for controlling audio playback. The id parameter must be between 0 and the total number of channels.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nChannel(id) -> Channel\n```\n\n----------------------------------------\n\nTITLE: Calculating Squared Magnitude in Vector3 Class (Python)\nDESCRIPTION: Returns the squared Euclidean magnitude of the vector, which is faster than magnitude() as it avoids the square root operation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nmagnitude_squared() -> float\n```\n\n----------------------------------------\n\nTITLE: Calculating Magnitude in Vector3 Class (Python)\nDESCRIPTION: Returns the Euclidean magnitude of the vector using the Pythagorean theorem.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nmagnitude() -> float\n```\n\n----------------------------------------\n\nTITLE: Building and Testing pygame-ce Wheels in VM\nDESCRIPTION: Commands to navigate to the manylinux build directory, build pygame-ce wheels using pre-built Docker images, and test the built wheels in a Python virtual environment.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /vagrant_pygame/buildconfig/manylinux-build\n\n# To make the base docker images and push them to docker hub do these commands.\n# Note, these have already been built, so only needed if rebuilding dependencies.\n# https://hub.docker.com/u/pygame/\n#make base-images\n#make push\n\n# We use the prebuilt docker images, which should be quicker.\nmake wheels\n\n# List the wheels we've built\nls -la wheelhouse\n\n# Testing\nexport SDL_AUDIODRIVER=disk\nexport SDL_VIDEODRIVER=dummy\n\npython3.5 -m venv anenv35\n. ./anenv35/bin/activate\npip install wheelhouse/pygame-*cp35-cp35m-manylinux1_x86_64.whl\npython -m pygame.tests --exclude opengl,music\n```\n\n----------------------------------------\n\nTITLE: Calculating Cross Product in Vector3 Class (Python)\nDESCRIPTION: Calculates the cross or vector product with another vector. Returns a new Vector3 instance.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ncross(Vector3, /) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Getting SDL Byte Order in Python\nDESCRIPTION: Returns the byte order of the SDL library. 1234 for little endian, 4321 for big endian.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nget_sdl_byteorder() -> int\n```\n\n----------------------------------------\n\nTITLE: Queuing Music from File Object in Pygame Mixer Music\nDESCRIPTION: Shows how to queue music from a file object with optional namehint and loops parameters. The namehint specifies the type of music data, and loops controls repetition of the queued music.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nqueue(fileobj, namehint=\"\", loops=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Stopping Music Playback in Pygame Mixer Music\nDESCRIPTION: Shows how to stop the music playback if it is currently playing. This will trigger an endevent if one was set, but it will not unload the music.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstop() -> None\n```\n\n----------------------------------------\n\nTITLE: Accessing SDL Version Information\nDESCRIPTION: Demonstrates how to access SDL version information through the pygame.version.SDL attribute.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> pygame.version.SDL.major\n2\n\n>>> pygame.version.SDL\nSDLVersion(major=2, minor=26, patch=5)\n```\n\n----------------------------------------\n\nTITLE: Vector Magnitude Clamping in Python\nDESCRIPTION: Shows the clamp_magnitude method of Vector2, which returns a copy of the vector with its magnitude clamped between specified minimum and maximum lengths.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclamp_magnitude(max_length, /) -> Vector2\nclamp_magnitude(min_length, max_length, /) -> Vector2\n```\n\n----------------------------------------\n\nTITLE: Querying Relative Mouse Mode in Pygame\nDESCRIPTION: Checks whether relative mouse mode is currently enabled. Returns a boolean value indicating the state of relative mouse mode.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mouse.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nget_relative_mode() -> bool\n```\n\n----------------------------------------\n\nTITLE: Writing to BufferProxy in Python\nDESCRIPTION: Overwrites bytes in the parent object's data. The buffer must be C or F contiguous. An optional offset can be provided to specify the start position for overwriting.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nwrite(buffer, offset=0)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Live Camera Stream Class with Pygame in Python\nDESCRIPTION: This class, Capture, sets up a live camera stream. It initializes the camera, creates a display surface, and provides methods to continuously capture and display images from the camera.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass Capture:\n    def __init__(self):\n        self.size = (640,480)\n        self.display = pygame.display.set_mode(self.size, 0)\n        self.clist = pygame.camera.list_cameras()\n        if not self.clist:\n            raise ValueError(\"Sorry, no cameras detected.\")\n        self.cam = pygame.camera.Camera(self.clist[0], self.size)\n        self.cam.start()\n        self.snapshot = pygame.surface.Surface(self.size, 0, self.display)\n\n    def get_and_flip(self):\n        if self.cam.query_image():\n            self.snapshot = self.cam.get_image(self.snapshot)\n        self.display.blit(self.snapshot, (0,0))\n        pygame.display.flip()\n\n    def main(self):\n        going = True\n        while going:\n            events = pygame.event.get()\n            for e in events:\n                if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):\n                    self.cam.stop()\n                    going = False\n            self.get_and_flip()\n```\n\n----------------------------------------\n\nTITLE: Configuring User Permissions and Reloading Vagrant VM\nDESCRIPTION: Commands to add the 'ubuntu' user to the Docker group to allow running Docker without sudo, followed by reloading the Vagrant VM to apply these changes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# We should have been in our python package clone root directory before we ran vagrant ssh\ncd /vagrant_pygame\n\n# We need to be able to run docker as the ubuntu user.\nsudo usermod -aG docker ubuntu\nsudo usermod -aG docker $USER\n\n# now log out of vagrant. Need to reload it because docker.\nexit\n\nvagrant reload\nvagrant ssh\n\n# now we can start docker. Should be started already.\nsudo service docker start\n```\n\n----------------------------------------\n\nTITLE: Setting Bit Value in Mask in Python\nDESCRIPTION: Sets the bit value at the given position in the mask to 0 or 1.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nset_at(pos) -> None\nset_at(pos, value=1) -> None\n```\n\n----------------------------------------\n\nTITLE: Value Remapping Example in Pygame\nDESCRIPTION: Shows how to remap a value from one range to another using pygame.math.remap function.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n> value = 50\n> pygame.math.remap(0, 100, 0, 200, value)\n> 100.0\n```\n\n----------------------------------------\n\nTITLE: Reserving Channels from Automatic Use\nDESCRIPTION: Reserves a specified number of channels that will not be automatically selected for playback. Useful for ensuring important sounds always have dedicated channels available.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.set_reserved(count)\n```\n\n----------------------------------------\n\nTITLE: Stopping Joystick Rumble Effect in Python\nDESCRIPTION: This method stops any rumble effect currently playing on the joystick. It is used in conjunction with the rumble method to control haptic feedback.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstop_rumble() -> None\n```\n\n----------------------------------------\n\nTITLE: Using MIME Types Constants in Pygame Scrap Module\nDESCRIPTION: Defines the standard MIME type constants used in the scrap module for clipboard operations. These constants identify the format of data being transferred to/from the clipboard.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npygame         string\nconstant        value        description\n--------------------------------------------------\nSCRAP_TEXT   \"text/plain\"    plain text\nSCRAP_BMP    \"image/bmp\"     BMP encoded image data\nSCRAP_PBM    \"image/pbm\"     PBM encoded image data\nSCRAP_PPM    \"image/ppm\"     PPM encoded image data\n```\n\n----------------------------------------\n\nTITLE: Incorrect Surface Loading Without Conversion\nDESCRIPTION: Shows an example of loading a surface without proper conversion, which may lead to performance issues in Pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/newbie-guide.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsurface = pygame.image.load('foo.png')\n```\n\n----------------------------------------\n\nTITLE: Updating Vector Coordinates in Python\nDESCRIPTION: Illustrates the update method of Vector2, which sets the coordinates of the vector in place using various input formats.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nupdate() -> None\nupdate(int) -> None\nupdate(float) -> None\nupdate(Vector2) -> None\nupdate(x, y) -> None\nupdate((x, y)) -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Padding Mode in Pygame\nDESCRIPTION: Determines if the text boundary rectangle should be inflated to match pygame.font.Font. When True, the boundary is inflated; otherwise, it's just large enough for the text.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npad -> bool\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unicode and ASCII String Path Handling in Pygame\nDESCRIPTION: Shows how Pygame functions accept file paths as either Unicode or byte strings. Unicode strings are translated to the system's filesystem encoding, while byte strings are passed unchanged to the OS.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/filepaths.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Unicode strings are translated to Python's default filesystem encoding\n# Example of a 32-bit Unicode escape sequence\npath = \"folder/file_\\U00010000.txt\"  # Unicode code point above U+FFFF\n\n# Byte strings are passed unchanged\nbyte_path = b\"folder/file.txt\"\n\n# This would raise an exception due to null character\n# invalid_path = \"folder/file\\x00.txt\"\n```\n\n----------------------------------------\n\nTITLE: Right Stick Axis Mapping\nDESCRIPTION: Maps the right analog stick's horizontal and vertical movements to Pygame axis numbers.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nLeft -> Right   - Axis 2\nUp   -> Down    - Axis 3\n```\n\n----------------------------------------\n\nTITLE: Creating New BufferProxy Instance in C for Pygame\nDESCRIPTION: Function to create a new pygame.BufferProxy instance. Takes the Python object to be exposed and a buffer getter callback. Returns NULL on failure with a Python error raised.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nPyObject* pgBufferProxy_New(PyObject *obj, getbufferproc get_buffer)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Underline in Pygame\nDESCRIPTION: Controls whether text is rendered with an underline. The underline is always one pixel thick, regardless of font size.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nset_underline(bool, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Accessing Pygame Documentation Locally\nDESCRIPTION: Python command to access pygame documentation locally. If local docs aren't found, it will launch the online documentation website instead.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pygame.docs\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Movement in Pygame\nDESCRIPTION: Demonstrates how to create smooth movement of an object across the screen. It uses a loop to update the object's position and redraw it, creating the illusion of animation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfor x in range(100):                   #animate 100 frames\n    screen.blit(background, position, position) #erase\n    position = position.move(2, 0)     #move player\n    screen.blit(player, position)      #draw new player\n    pygame.display.update()            #and show it all\n    clock.tick(60)                     #update 60 times per second\n```\n\n----------------------------------------\n\nTITLE: Creating New Color Objects from RGBA Array\nDESCRIPTION: Function to create a new pygame.Color instance from a four-element RGBA array. Returns NULL and raises a Python exception on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgColor_New(Uint8 rgba[])\n```\n\n----------------------------------------\n\nTITLE: Defining Test Level Tags in Python for Pygame Tests\nDESCRIPTION: Shows how to specify tags for individual test methods in Pygame tests. Tags are defined in the test method's docstring using a specific format.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/test/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_something__about_something(self):\n    \"\"\"\n    |Tags:interactive,some_other_tag|\n\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting End Event for Channel Playback in Pygame\nDESCRIPTION: Shows how to set an event to be sent when playback stops on a Channel. The event can be customized with a specific type ID.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nset_endevent() -> None\nset_endevent(type, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Example of Running Pygame Scaletest Example\nDESCRIPTION: Demonstrates how to run the pygame scaletest example with an image file argument.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pygame.examples.scaletest someimage.png\n```\n\n----------------------------------------\n\nTITLE: MIDI Device Specification Example\nDESCRIPTION: Shows how to specify both interface and device name in the registry\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nMMSystem, In USB MidiSport 1x1\n```\n\n----------------------------------------\n\nTITLE: Color Thresholding with Pygame Camera in Python\nDESCRIPTION: This snippet demonstrates how to perform color thresholding on a camera image. It uses the transform module to isolate a specific color (green in this case) in the image.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nself.thresholded = pygame.surface.Surface(self.size, 0, self.display)\nself.snapshot = self.cam.get_image(self.snapshot)\npygame.transform.threshold(self.thresholded,self.snapshot,(0,255,0),(90,170,170),(0,0,0),2)\n```\n\n----------------------------------------\n\nTITLE: Including Common Content in Pygame Documentation\nDESCRIPTION: Includes a common content file that likely contains shared definitions or settings for Pygame documentation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../common.txt\n```\n\n----------------------------------------\n\nTITLE: Comparing Pixel Colors with Surface.map_rgb()\nDESCRIPTION: Demonstrates how to compare a pixel color to a specific color value by using the Surface.map_rgb() method to convert RGB values to the surface's pixel format.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npxarray = pygame.PixelArray(surface)\n# Check, if the first pixel at the topleft corner is blue\nif pxarray[0, 0] == surface.map_rgb((0, 0, 255)):\n    ...\n```\n\n----------------------------------------\n\nTITLE: MIDI Note to Frequency Conversion Example\nDESCRIPTION: Shows how to convert a MIDI note number to its corresponding frequency\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmidi_to_frequency(21) == 27.5\n```\n\n----------------------------------------\n\nTITLE: Creating Pygame Display Window\nDESCRIPTION: Demonstrates how to create a new window for graphics in Pygame. This code creates a 640x480 surface with default color depth and pixel format.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nscreen = pygame.display.set_mode((640, 480))\n```\n\n----------------------------------------\n\nTITLE: Defining Module Level Tags in Python for Pygame Tests\nDESCRIPTION: Shows how to define module level tags for Pygame tests. These tags can be used to categorize tests and exclude certain types of tests during test runs.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/test/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__tags__ = ['display', 'interactive']\n```\n\n----------------------------------------\n\nTITLE: Generating Pygame Time Module Documentation using Autopgmodule\nDESCRIPTION: This directive uses the autopgmodule extension to automatically generate documentation for all members of the pygame.time module. It simplifies the process of documenting the module's functions and classes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autopgmodule:: pygame.time\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Moving a Line Object In-Place in Pygame\nDESCRIPTION: Modifies an existing Line object by moving it by the given x,y offset.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nline.ax += x\nline.ay += y\nline.bx += x\nline.by += y\n```\n\n----------------------------------------\n\nTITLE: Copying Green Pixel Values to 2D Array in Python\nDESCRIPTION: The array_green function copies pixel green values from a Surface into a 2D array. It works for any Surface format and temporarily locks the Surface while copying.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\narray_green(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Frequency to MIDI Note Conversion Example\nDESCRIPTION: Demonstrates converting a frequency value to its corresponding MIDI note number\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrequency_to_midi(27.5) == 21\n```\n\n----------------------------------------\n\nTITLE: Getting Font Metrics in Pygame\nDESCRIPTION: Retrieves metrics for each character in the passed string. Returns a list of tuples containing minimum and maximum X and Y offsets, and advance offset for each character.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nmetrics(text, /) -> list\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Linux/Mac Terminal\nDESCRIPTION: Shows how to set environment variables before running a Python application on Linux/Mac systems.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nENV_VAR=value python my_application.py\n```\n\n----------------------------------------\n\nTITLE: Using map_array in pygame.pixelcopy\nDESCRIPTION: Maps an array of color element values to an array of pixels according to the format of the provided surface. Converts from a (w, h, 3) array to a (w, h) pixel array.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmap_array(array, array, surface, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining Point Type Examples\nDESCRIPTION: Examples of valid Point types representing sequences of two numbers.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/typing.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npygame.Vector2(a, b)\n[a, b]\n(a, b)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Controller Objects in Python\nDESCRIPTION: Illustrates the creation and basic management of Controller objects, including initialization, quitting, and checking status. These methods are fundamental for working with specific controllers.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncontroller = pygame._sdl2.controller.Controller(index)\ncontroller.init()\ncontroller.quit()\ncontroller.get_init()\ncontroller.attached()\n```\n\n----------------------------------------\n\nTITLE: Getting BufferProxy Length in Python\nDESCRIPTION: Returns the size in bytes of the exported buffer, excluding any gaps in discontinuous data.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlength -> int\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame Time Module Section in reStructuredText\nDESCRIPTION: This snippet defines the section for the pygame.time module documentation. It uses a reStructuredText heading syntax to create a new section.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:mod:`pygame.time`\n==================\n```\n\n----------------------------------------\n\nTITLE: Drawing Triangle/Trigon in Pygame\nDESCRIPTION: Draws an unfilled triangle on a surface using three corner coordinates. Takes surface, three sets of (x,y) coordinates and color as parameters.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntrigon(surface, x1, y1, x2, y2, x3, y3, color)\n```\n\n----------------------------------------\n\nTITLE: Copying Colorkey Values to 2D Array in Python\nDESCRIPTION: The array_colorkey function creates a new array with colorkey transparency values from each pixel. It works on any Surface format and returns a solid opaque array if the image has no colorkey.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\narray_colorkey(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Installing Pygame Community Edition with pip\nDESCRIPTION: Simple pip command to install the pygame-ce package. This is the recommended way to get the latest stable release of pygame-ce.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pygame-ce\n```\n\n----------------------------------------\n\nTITLE: Queuing Multiple Music Files Example in Pygame Mixer Music\nDESCRIPTION: Example demonstrating how to play one music file multiple times followed by another music file. This plays bach.ogg six times, then plays mozart.ogg once.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.music.load('bach.ogg')\npygame.mixer.music.play(5)        # Plays six times, not five!\npygame.mixer.music.queue('mozart.ogg')\n```\n\n----------------------------------------\n\nTITLE: Referencing Red Pixel Values in 2D Array in Python\nDESCRIPTION: The pixels_red function creates a 2D array directly referencing red values in a Surface. It only works on 24-bit or 32-bit Surfaces and keeps the Surface locked while the array exists.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npixels_red(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Defining SequenceLike Type Examples\nDESCRIPTION: Examples of valid SequenceLike types that implement __getitem__ and __len__, including strings and sequences.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/typing.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"abcdefg\"\n[a, b, c, d, ...]\n(a, b, c, d, ...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bouncing Ball Animation in PyGame\nDESCRIPTION: Basic PyGame animation example showing a ball bouncing within window boundaries. Demonstrates screen setup, image loading, collision detection, and screen updates.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/2.Print_text/Basic TEMPLATE and OUTPUT.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 220, 140\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"Basic-ouput-sourcecode.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Key State Information Functions\nDESCRIPTION: Functions that return boolean arrays for tracking key press and release states using SDL scan codes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nchar* pgEvent_GetKeyDownInfo(void)\nchar* pgEvent_GetKeyUpInfo(void)\n```\n\n----------------------------------------\n\nTITLE: Running Pygame Test Suite from Command Line (Python)\nDESCRIPTION: Demonstrates how to run the Pygame test suite package from the command line using Python's -m option to import the go submodule.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/tests.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m pygame.tests [<test options>]\n```\n\n----------------------------------------\n\nTITLE: Surface Blitting Function in C\nDESCRIPTION: Implements surface blitting with support for various blend modes. Takes source and destination surfaces, rectangles, and blend flags. Updates destination rectangle with actual affected area. Returns 1 on success, 0 on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_Blit(PyObject *dstobj, PyObject *srcobj, SDL_Rect *dstrect, SDL_Rect *srcrect, int blend_flags)\n```\n\n----------------------------------------\n\nTITLE: Referencing Pixels in 2D Array in Python\nDESCRIPTION: The pixels2d function creates a new 2D array that directly references the pixel values in a Surface. Changes to the array affect the Surface pixels. It's fast but doesn't work with 24-bit Surfaces.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npixels2d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Pausing Music Playback in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to temporarily stop playback of the music stream. The playback can be resumed with the unpause function.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npause() -> None\n```\n\n----------------------------------------\n\nTITLE: Accessing Pygame Documentation via Python Command\nDESCRIPTION: This command launches the Pygame documentation using Python's module execution feature.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m pygame.docs\n```\n\n----------------------------------------\n\nTITLE: Defining FileLike Type Examples\nDESCRIPTION: Examples of valid FileLike types including string paths, file objects, pathlib.Path objects, and BytesIO objects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/typing.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"my/string/path.txt\"\nopen(\"my/file/path.txt\")\npathlib.Path(\"my/pathlib/path.txt\")\nio.BytesIO(b\"my data: \\x00\\x01\")\nb\"my/bytes/path.txt\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Text in Clipboard with pygame.scrap.get\nDESCRIPTION: Demonstrates how to check if text data is available in the clipboard using the pygame.scrap.get function with the SCRAP_TEXT type identifier. This function is deprecated as of pygame 2.2.0.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntext = pygame.scrap.get(pygame.SCRAP_TEXT)\nif text:\n    print(\"There is text in the clipboard.\")\nelse:\n    print(\"There does not seem to be text in the clipboard.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Pygame Animation Template - Version 3\nDESCRIPTION: Third version of the basic Pygame setup code with identical functionality but using a different image file.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedOutputAlpha3.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Event Posting Functions\nDESCRIPTION: Functions for posting SDL user events with optional Python dictionary data. Return 1 on success, 0 if blocked, -1 on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint pg_post_event(Uint32 type, PyObject *dict)\nint pg_post_event_dictproxy(Uint32 type, pgEventDictProxy *dict_proxy)\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Array Types in Python (Deprecated)\nDESCRIPTION: Deprecated function that returns a tuple of strings representing available array systems. Returns None if no supported array system is found.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_arraytypes() -> tuple\n```\n\n----------------------------------------\n\nTITLE: Referencing Blue Pixel Values in 2D Array in Python\nDESCRIPTION: The pixels_blue function creates a 2D array directly referencing blue values in a Surface. It only works on 24-bit or 32-bit Surfaces and keeps the Surface locked while the array exists.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\npixels_blue(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Unloading Music Resources in Pygame Mixer Music\nDESCRIPTION: Demonstrates how to unload the currently loaded music to free up resources. This closes resources like files for any music that may be loaded.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nunload() -> None\n```\n\n----------------------------------------\n\nTITLE: Rectangle Type Object Declarations\nDESCRIPTION: Global type object declarations for Pygame's rectangle classes pygame.Rect and pygame.FRect.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyTypeObject *pgRect_Type;\nPyTypeObject *pgFRect_Type;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Screen List in Python\nDESCRIPTION: Demonstrates creating a simple list to represent a screen background with numeric values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscreen = [1, 1, 2, 2, 2, 1]\nprint(screen)\n```\n\n----------------------------------------\n\nTITLE: Color Division Example\nDESCRIPTION: Example showing floor division and modulus operations with Color objects, demonstrating how division by zero is handled\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# These expressions are True\nColor(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)\nColor(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)\n```\n\n----------------------------------------\n\nTITLE: Adding Player Character to Screen\nDESCRIPTION: Shows how to place a player character (represented by number 8) on the screen list at a specific position.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscreen[3] = 8\nprint(screen)\n```\n\n----------------------------------------\n\nTITLE: Creating SDL_RWops from Python Object in C\nDESCRIPTION: This function creates an SDL_RWops struct from a Python object, handling both file paths and file-like objects. It optionally returns the file extension and acquires the Python GIL when necessary.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_RWops* pgRWops_FromObject(PyObject *obj, char **extptr)\n```\n\n----------------------------------------\n\nTITLE: Creating Aliased Code Line Reference Role with Custom Class\nDESCRIPTION: Defines an alias 'clr' for the 'codelineref' role with an additional CSS class for styling.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/common.txt#2025-04-20_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: clr(codelineref)\n   :class: codelineref\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Buffer Data in Python\nDESCRIPTION: Returns a copy of the exported buffer as a single block of bytes, with any gaps in the exported data removed.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nraw -> bytes\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Movement with Position Tracking\nDESCRIPTION: Demonstrates tracking player position and moving the character, showing the issue of leaving behind a trail.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/move-it.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplayerpos = 3\nscreen[playerpos] = 8\nprint(screen)\nplayerpos = playerpos - 1\nscreen[playerpos] = 8\nprint(screen)\n```\n\n----------------------------------------\n\nTITLE: Getting End Event Type for Music Playback in Pygame Mixer Music\nDESCRIPTION: Shows how to get the event type that is sent when music playback stops. This returns the event type that was set with set_endevent().\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nget_endevent() -> type\n```\n\n----------------------------------------\n\nTITLE: Rectangle Conversion Functions\nDESCRIPTION: Functions for converting Python objects to SDL rectangle structures, handling various input formats.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSDL_Rect* pgRect_FromObject(PyObject *obj, SDL_Rect *temp);\nSDL_FRect* pgFRect_FromObject(PyObject *obj, SDL_FRect *temp);\n```\n\n----------------------------------------\n\nTITLE: Importing Test Utils in Python for Pygame Tests\nDESCRIPTION: Demonstrates how to properly import test_utils and unittest for Pygame test modules. This ensures the correct sys.path is set for test.unittest to run.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/test/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport test_utils\nimport test.unittest as unittest\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Pygame Animation Template - Version 1\nDESCRIPTION: Basic Pygame setup code demonstrating window creation and ball animation with collision detection for tutorial purposes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedOutputAlpha1.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Registry Path Example for PortMidi Device Configuration\nDESCRIPTION: Shows the Windows registry paths used to configure default MIDI input and output devices\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device\nor\nHKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device\n```\n\n----------------------------------------\n\nTITLE: Copying Red Pixel Values to 2D Array in Python\nDESCRIPTION: The array_red function copies pixel red values from a Surface into a 2D array. It works for any Surface format and temporarily locks the Surface while copying.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\narray_red(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Creating SDL_RWops from Python File Object in C\nDESCRIPTION: This function creates an SDL_RWops struct specifically from a Python file-like object, using its read, write, seek, tell, and close methods. It acquires the Python GIL when threads are available.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_RWops* pgRWops_FromFileObject(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Basic Pygame Ball Movement\nDESCRIPTION: Initial implementation showing basic ball movement with boundary collision detection using Pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedInputOutput1.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Managing Controller Mappings in Python\nDESCRIPTION: Shows how to get and set controller mappings, allowing customization of controller layouts. This is useful for supporting different controller types or user preferences.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nmapping = controller.get_mapping()\ncontroller.set_mapping(mapping)\n```\n\n----------------------------------------\n\nTITLE: Surface Conversion Macro in C\nDESCRIPTION: Macro to convert a PyObject representing a pygame Surface into its underlying SDL_Surface pointer. Assumes input is a valid Surface or Surface subclass instance.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface* pgSurface_AsSurface(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Game Object Initialization in Pygame\nDESCRIPTION: Initializes game objects including sound effects, sprite instances, and sprite groups. Sets up the game clock for timing control.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/ChimpanceLineaporLinea.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nwhiff_sound = load_sound(\"whiff.wav\")\npunch_sound = load_sound(\"punch.wav\")\nchimp = Chimp()\nfist = Fist()\nallsprites = pg.sprite.Group((chimp, fist))\nclock = pg.time.Clock()\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Pygame Animation Template - Version 2\nDESCRIPTION: Second version of the basic Pygame setup code with identical functionality but different image file.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedOutputAlpha2.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame Rectangle Types\nDESCRIPTION: Core type definitions for Pygame's rectangle objects, including pgRectObject with SDL_Rect member and pgFRectObject with SDL_FRect member.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    SDL_Rect r;\n} pgRectObject;\n\ntypedef struct {\n    SDL_FRect r;\n} pgFRectObject;\n```\n\n----------------------------------------\n\nTITLE: Encoding Python String with Custom Encoding in C\nDESCRIPTION: This function encodes a Python string object as a byte string using specified encoding and error handling. It allows for custom exception handling and passes through existing exceptions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pg_EncodeString(PyObject *obj, const char *encoding, const char *errors, PyObject *eclass)\n```\n\n----------------------------------------\n\nTITLE: Rectangle Normalization Functions\nDESCRIPTION: Functions for normalizing rectangles by adjusting negative sizes to positive values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid pgRect_Normalize(SDL_Rect *rect);\nvoid pgFRect_Normalize(SDL_FRect *rect);\n```\n\n----------------------------------------\n\nTITLE: Defining ColorLike Type Examples\nDESCRIPTION: Examples of valid ColorLike types including RGB tuples, RGBA tuples, color names, and hex values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/typing.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npygame.Color(ColorLike)\n(r, g, b)\n(r, g, b, a)\n[r, g, b, a]\n\"green\"\n\"#rrggbbaa\"\n0  # mapped color\n```\n\n----------------------------------------\n\nTITLE: Pygame Camera Backends Table\nDESCRIPTION: A table showing the available camera backends in pygame.camera, their supported operating systems, and descriptions. This includes the native backends for Windows and Linux, as well as the OpenCV-based backends.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/camera.rst#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBackend           OS        Description\n---------------------------------------------------------------------------------\n_camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3\n_camera (V4L2)    Linux     Builtin\nOpenCV            Any       Uses `opencv-python` module, can't enumerate cameras\nOpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Pygame Surface with External Owner in C\nDESCRIPTION: Removes the lock on the pygame surface owned by the specified Python object.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_UnLockBy(pgSurfaceObject *surfobj, PyObject *lockobj)\n```\n\n----------------------------------------\n\nTITLE: Updating Circle Position and Radius\nDESCRIPTION: Shows equivalent code for updating a circle's position and radius values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/geometry.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncircle.x = x\ncircle.y = y\ncircle.r = radius\n```\n\n----------------------------------------\n\nTITLE: Basic Pygame Ball Movement\nDESCRIPTION: This snippet sets up a basic Pygame window with a moving ball that bounces off the window edges. It demonstrates the fundamental structure of a Pygame application.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/ko/빨간블록 검은블록/6.버튼들/심화 입력 그리고 심화 출력.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedInputOutput1.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Defining Window Object Type in C for Pygame\nDESCRIPTION: Defines the C type for a pygame.Window instance. This type is used internally by Pygame to represent Window objects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/window.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef pgWindowObject\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parent Object from BufferProxy in C for Pygame\nDESCRIPTION: Function to get the Python object wrapped by a BufferProxy instance. Returns NULL on failure with a Python error raised.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nPyObject* pgBufferProxy_GetParent(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Initial Background Display\nDESCRIPTION: Displays the prepared background surface on screen using blit operation and screen flip to update display.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscreen.blit(background, (0, 0))\npygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Uninitializing Pygame Mixer Module\nDESCRIPTION: Uninitializes the mixer module, stopping all playback. Any loaded Sound objects may not be compatible if the mixer is reinitialized later.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects with Specific Length\nDESCRIPTION: Function that creates a new pygame.Color instance with a specified number of elements (1-4), using values from an RGBA array. Returns NULL and raises a Python exception on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgColor_NewLength(Uint8 rgba[], Uint8 length)\n```\n\n----------------------------------------\n\nTITLE: Finding Pygame Examples Installation Location\nDESCRIPTION: Shows how to locate where the example files are installed on your system using Python's import system and accessing the __file__ attribute.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.__file__\n'/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame with Basic Animation\nDESCRIPTION: Sets up a Pygame window with a moving ball image. This snippet demonstrates the basic structure of a Pygame program including initialization, event handling, and screen updates.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/Red_or_Black/5.HP_bar/Advanced OUTPUT with Advanced PROCESS.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedOutputProcess1.webp\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Creating New Pygame Joystick Instance in C\nDESCRIPTION: Function that creates and returns a new pygame.Joystick instance given a device ID. Returns NULL and raises a Python exception on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/joystick.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgJoystick_New(int id)\n```\n\n----------------------------------------\n\nTITLE: Checking Window Object Type in C for Pygame\nDESCRIPTION: Defines a macro to check if a PyObject is an instance of pygame.window.Window. It returns true for Window instances but false for subclasses.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/window.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgWindow_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Rectangle Access Macros\nDESCRIPTION: Macros for accessing the SDL_Rect and SDL_FRect fields of Pygame rectangle instances.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSDL_Rect pgRect_AsRect(PyObject *obj);\nSDL_FRect pgFRect_AsRect(PyObject *obj);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Pygame Resources\nDESCRIPTION: Demonstrates the proper way to clean up and exit a Pygame application. Calling pygame.quit() ensures that all Pygame's internal resources are properly released when the game ends.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/chimp-explanation.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npygame.quit()\n```\n\n----------------------------------------\n\nTITLE: Defining MIDI Event Constants in Pygame\nDESCRIPTION: Constants for MIDI input and output events used by pygame.event system. These are used by pygame.midi.midis2events when converting MIDI events to pygame events.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMIDIIN\nMIDIOUT\n```\n\n----------------------------------------\n\nTITLE: Event Creation from SDL Event\nDESCRIPTION: Creates a new pygame event instance from an SDL_Event pointer. Returns NULL on failure with Python exception set.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgEvent_New(SDL_Event *event)\n```\n\n----------------------------------------\n\nTITLE: Setting Script Code for Text Shaping in Pygame\nDESCRIPTION: The set_script method sets the script used by harfbuzz text shaping. It takes a 4-character script code as input, such as 'Deva' for Devanagari. This method requires Pygame built with SDL_ttf 2.20.0 or above.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nset_script(str, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Accessing Surface Pixel Buffer Address Property\nDESCRIPTION: Read-only property that returns the starting memory address of the surface's raw pixel data as an integer.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n_pixels_address -> int\n```\n\n----------------------------------------\n\nTITLE: Defining pgFont_Type for Python Font Type in C\nDESCRIPTION: C type definition that represents the pygame.freetype.Font Python type.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npgFont_Type\n```\n\n----------------------------------------\n\nTITLE: Getting Joystick Device Index by Instance ID in C\nDESCRIPTION: Function that retrieves a joystick's device index given its instance ID. Returns -1 on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/joystick.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgJoystick_GetDeviceIndexByInstanceID(int instance_id)\n```\n\n----------------------------------------\n\nTITLE: Unlocking Surface Memory in Pygame\nDESCRIPTION: The unlock method releases the lock on the Surface pixel data after it has been locked, allowing the surface to be drawn and managed by Pygame again.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nSurface.unlock() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Command Line\nDESCRIPTION: Shows how to set environment variables before running a Python application on Windows.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_13\n\nLANGUAGE: batch\nCODE:\n```\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\npython my_application.py\n```\n\n----------------------------------------\n\nTITLE: Defining pgFontObject Type for FreeType Font Handling in C\nDESCRIPTION: C type definition for the internal structure of pygame.freetype.Font instances.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\npgFontObject\n```\n\n----------------------------------------\n\nTITLE: Renderer Class Constructor\nDESCRIPTION: Constructor for creating a 2D rendering context for a window. Accepts parameters for window, driver index, acceleration preferences, vsync, and texture target support.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nRenderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer\n```\n\n----------------------------------------\n\nTITLE: Printing Debug Information in Python for Pygame\nDESCRIPTION: Retrieves and prints or writes to a file useful information for debugging and issue-reporting purposes.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nprint_debug_info(filename=None) -> None\n```\n\n----------------------------------------\n\nTITLE: Declaring the pgVidInfo_Type Variable in C\nDESCRIPTION: Declares the PyTypeObject pointer for the pgVidInfoObject Python type.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyTypeObject *pgVidInfo_Type\n```\n\n----------------------------------------\n\nTITLE: Checking Font File Status in C\nDESCRIPTION: Macro that verifies if a pygame.freetype.Font object has an open font file. Does not perform NULL checks or type verification.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pgFont_IS_ALIVE(PyObject *o)\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame Display Module Documentation\nDESCRIPTION: This code snippet includes a common text file and sets up the autodoc for the pygame.display module. It's typically used in Sphinx documentation to generate API references.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: common.txt\n\n:mod:`pygame.display`\n=====================\n\n.. autopgmodule:: pygame.display\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Raising Pygame Error Exception in Python\nDESCRIPTION: Raises a standard pygame exception with a descriptive message about the problem. Derived from RuntimeError.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nraise pygame.error(message)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Available Clipboard Types\nDESCRIPTION: Shows how to iterate through all available data types in the clipboard and access text content. This uses the deprecated get_types and get functions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor t in pygame.scrap.get_types():\n    if \"text\" in t:\n        # There is some content with the word \"text\" in its type string.\n        print(pygame.scrap.get(t))\n```\n\n----------------------------------------\n\nTITLE: Declaring BufferProxy Type Object in C for Pygame\nDESCRIPTION: Declaration of the PyTypeObject for the pygame.BufferProxy type. This type object represents the BufferProxy class in the C API.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nPyTypeObject *pgBufferProxy_Type\n```\n\n----------------------------------------\n\nTITLE: Retrieving Glyph Metrics Tuple Structure in Pygame Font\nDESCRIPTION: Shows the structure of the glyph metrics tuple returned by the get_metrics method. Each tuple contains six values representing the bounding box coordinates and advance values for a single character glyph.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)\n```\n\n----------------------------------------\n\nTITLE: Encoding Strings in Python for Pygame\nDESCRIPTION: Encodes a Unicode or bytes object. Used internally for encoding file paths. Default encoding is 'unicode_escape'.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nencode_string([obj [, encoding [, errors [, etype]]]]) -> bytes or None\n```\n\n----------------------------------------\n\nTITLE: Mouse Button State Information Functions\nDESCRIPTION: Functions that return boolean arrays for tracking mouse button press and release states.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nchar* pgEvent_GetMouseButtonDownInfo(void)\nchar* pgEvent_GetMouseButtonUpInfo(void)\n```\n\n----------------------------------------\n\nTITLE: Setting End Event for Music Playback in Pygame Mixer Music (No Args)\nDESCRIPTION: Shows how to remove an event that would be sent when music playback stops. Calling this method with no argument stops events from being queued.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nset_endevent() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Python\nDESCRIPTION: Shows how to set environment variables programmatically in Python, including an example of preserving user overrides.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n\n# Preserving user overrides\nos.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')\n```\n\n----------------------------------------\n\nTITLE: Defining the pgVidInfoObject Type in C\nDESCRIPTION: Defines the pgVidInfoObject type which is a wrapper around the SDL_VideoInfo struct. This is the return type of pygame.display.Info().\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef pgVidInfoObject\n```\n\n----------------------------------------\n\nTITLE: Getting SDL Version in Python\nDESCRIPTION: Returns the version numbers of the SDL library. Can return linked or compiled version based on the 'linked' parameter.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nget_sdl_version(linked=True) -> major, minor, patch\n```\n\n----------------------------------------\n\nTITLE: Creating a New pgVidInfoObject from SDL_VideoInfo in C\nDESCRIPTION: Function that creates a new pgVidInfoObject from an SDL_VideoInfo pointer. Returns NULL and raises a Python exception on failure.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgVidInfo_New(SDL_VideoInfo *i)\n```\n\n----------------------------------------\n\nTITLE: Checking for Data Type Availability in Clipboard\nDESCRIPTION: Shows how to check if specific data types are available in the clipboard using the deprecated pygame.scrap.contains function.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif pygame.scrap.contains(pygame.SCRAP_TEXT):\n    print(\"There is text in the clipboard.\")\nif pygame.scrap.contains(\"own_data_type\"):\n    print(\"There is stuff in the clipboard.\")\n```\n\n----------------------------------------\n\nTITLE: Surface Type Check Function in C\nDESCRIPTION: Function to check if a PyObject is a pygame.Surface instance. Returns false for Surface subclasses. This is implemented as a macro that assumes input is not NULL.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Android-Specific Events in Pygame\nDESCRIPTION: Event types specific to Android platform in Pygame, including application lifecycle events such as termination, memory warnings, and background/foreground transitions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nEvent type                 Short description\n\nAPP_TERMINATING           OS is terminating the application\nAPP_LOWMEMORY             OS is low on memory, try to free memory if possible\nAPP_WILLENTERBACKGROUND   Application is entering background\nAPP_DIDENTERBACKGROUND    Application entered background\nAPP_WILLENTERFOREGROUND   Application is entering foreground\nAPP_DIDENTERFOREGROUND    Application entered foreground\n```\n\n----------------------------------------\n\nTITLE: Pygame Application with HP and Buttons\nDESCRIPTION: This comprehensive snippet shows a Pygame application with HP display, custom buttons, and mouse click handling. It demonstrates advanced GUI elements and event processing in Pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/ko/빨간블록 검은블록/6.버튼들/심화 입력 그리고 심화 출력.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10\nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"Array buttons Project\")\nwidth = 640\nheight = 480\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2)\nfpsClock = pygame.time.Clock()\n\ndef main():\n    HP = 5\n\n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n\n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP)\n        drawButtons()\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n            elif event.type == MOUSEBUTTONUP: #1\n                x, y = event.pos\n                if pygame.Rect(270, 425, 45, 45).collidepoint(x, y):\n                    if HP != 10:\n                        HP = HP + 1\n                elif pygame.Rect(325, 425, 45, 45).collidepoint(x, y):\n                    if HP != 0:\n                        HP = HP - 1\n\n        pygame.display.update()\n        fpsClock.tick(60)\n\ndef drawHP(HP):\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\ndef drawButtons():\n    r = 45\n    r_margin = 10\n    colors = [red, black]\n\n    num = 2\n    margin = int((width - ((r * num) + (r_margin * (num - 1)))) / 2)\n    for i in range(0, num):\n        left = margin + (i * r) + (i * r_margin)\n        up = height - r - 10\n        pygame.draw.rect(myScreen, colors[i], (left, up, r, r))\n        pygame.draw.rect(myScreen, gray, (left + 2, up + 2, r - 4, r - 4), 2)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Importing the Base Module\nDESCRIPTION: Code required in modules that want to use functions exported from the base module, such as pg_RGBAFromObj.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/slots.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nimport_pygame_base();\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Error Message in Python\nDESCRIPTION: Sets the current SDL error message. Rarely needed as the message is usually set internally by SDL.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nset_error(error_msg, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Pulling Pre-built Docker Base Images for pygame-ce Dependencies\nDESCRIPTION: Commands to pull pre-built Docker base images containing pygame-ce dependencies for either 64-bit, 32-bit, or both architectures.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake pull-x64    # 64 bit, or\nmake pull-x86    # 32 bit, or\nmake pull        # Both\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL License Notice to Source Files\nDESCRIPTION: This snippet demonstrates how to attach the LGPL license notice to source files of a library. It includes placeholders for the description, year, and author name, and provides the standard LGPL text to be included.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/licenses/LICENSE.fluidsynth.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    {description}\n    Copyright (C) {year} {fullname}\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n    USA\n```\n\n----------------------------------------\n\nTITLE: Checking Clipboard Ownership Status\nDESCRIPTION: Demonstrates how to check if the pygame application has lost ownership of the clipboard using the deprecated pygame.scrap.lost function.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif pygame.scrap.lost():\n    print(\"The clipboard is in use by another application.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Pygame-CE Build Options with Meson\nDESCRIPTION: This snippet defines various build options for Pygame-CE using Meson's option() function. It controls the inclusion of different modules and features, as well as build behavior such as error handling and documentation requirements.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/meson_options.txt#2025-04-20_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n# Controls whether pygame.image is built with extended image format support.\n# Enabled by default, disable explicitly if you don't want to compile with SDL_image.\noption('image', type: 'feature', value: 'enabled')\n\n# Controls whether pygame.mixer, pygame.mixer.music and pygame._sdl2.mixer are built.\n# Enabled by default, disable explicitly if you don't want to compile with SDL_mixer.\noption('mixer', type: 'feature', value: 'enabled')\n\n# Controls whether pygame.font is built using SDL_ttf.\n# Enabled by default, disable explicitly if you don't want to compile with SDL_ttf.\n# If this is disabled, and the freetype option is enabled, a pygame.font module will\n# be created based on the freetype module (ftfont)\noption('font', type: 'feature', value: 'enabled')\n\n# Controls whether pygame.freetype is built.\n# Enabled by default, disable explicitly if you don't want to compile with freetype2.\noption('freetype', type: 'feature', value: 'enabled')\n\n# Controls whether pygame.midi is built.\n# Enabled by default, disable explicitly if you don't want to compile with\n# portmidi/porttime.\noption('midi', type: 'feature', value: 'enabled')\n\n# Controls whether to make a \"stripped\" pygame install. Enabling this disables\n# the bundling of docs/examples/tests/stubs in the wheels.\n# The default behaviour is to bundle all of these.\noption('stripped', type: 'boolean', value: 'false')\n\n# Controls whether to compile with -Werror (or its msvc equivalent). The default\n# behaviour is to not do this by default\noption('error_on_warns', type: 'boolean', value: 'false')\n\n# Controls whether to error on build if generated docs are missing. Defaults to\n# false.\noption('error_docs_missing', type: 'boolean', value: 'false')\n\n# Controls whether to do a coverage build.\n# This argument must be used together with the editable install.\noption('coverage', type: 'boolean', value: false)\n\n# Controls whether to use SDL3 instead of SDL2. The default is to use SDL2\noption('sdl_api', type: 'integer', min: 2, max: 3, value: 2)\n```\n\n----------------------------------------\n\nTITLE: Converting Python Objects to Mapped Surface Colors\nDESCRIPTION: Function that converts a Python object to a mapped color value for a specific SDL surface. Unlike pg_RGBAFromObjEx, this function directly interprets integers as mapped colors for the given surface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pg_MappedColorFromObj(PyObject *val, SDL_Surface *surf, Uint32 *color, pgColorHandleFlags handle_flags)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom reStructuredText Roles for Pygame Documentation\nDESCRIPTION: Sets up custom roles for use in Pygame documentation, including summaryline (sl), signature (sg), and small-heading. These roles help create consistent formatting across all documentation files.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. Pygame specific reST elements.\n\n.. role:: summaryline\n\n.. role:: sl(summaryline)\n   :class: summaryline\n\n.. role:: signature\n\n.. role:: sg(signature)\n   :class: signature\n\n.. role:: small-heading\n   :class: small-heading\n```\n\n----------------------------------------\n\nTITLE: Defining Class Level Tags in Python for Pygame Tests\nDESCRIPTION: Demonstrates how to override specific tags at the TestCase level in Pygame tests. This example shows how to negate the 'interactive' tag for a specific test class.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/test/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SomeTest(unittest.TestCase):\n    __tags__ = ['-interactive']\n```\n\n----------------------------------------\n\nTITLE: Code Style Example - Score Increment in Python\nDESCRIPTION: Demonstrates an example of overly obvious code commenting, used to illustrate poor documentation practices in game development.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/make-games.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nplayer1.score += scoreup        # Add scoreup to player1 score\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Base Images for Updated Dependencies\nDESCRIPTION: Commands to rebuild the Docker base images if the dependency files in 'docker_base' directory have been changed, such as adding or updating dependencies.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake base-image-x64  # 64 bit, or\nmake base-image-x86  # 32 bit, or\nmake base-images     # both\n```\n\n----------------------------------------\n\nTITLE: Encoding File Path for OS in C\nDESCRIPTION: This function encodes a Python file path object as a byte string suitable for the operating system. It forbids null bytes in the encoded path and handles error cases with an optional exception class.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pg_EncodeFilePath(PyObject *obj, PyObject *eclass)\n```\n\n----------------------------------------\n\nTITLE: Exposing a Function in C API Structure\nDESCRIPTION: Example of how a function (pg_RGBAFromObj) is exposed to the c_api structure in base.c. This makes the function available to other modules.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/slots.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nc_api[12] = pg_RGBAFromObj;\n```\n\n----------------------------------------\n\nTITLE: Converting Python Objects to RGBA Values\nDESCRIPTION: Extended function to fill an RGBA array from a Python color object. Optimized for pgColor_Type instances and tuples, with additional support for integer and string color inputs based on handle_flags parameter.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pg_RGBAFromObjEx(PyObject *color, Uint8 rgba[], pgColorHandleFlags handle_flags)\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer View for BufferProxy in C for Pygame\nDESCRIPTION: Function to trigger the creation of a pg_buffer view of the parent object in a BufferProxy instance. Returns 0 on success, -1 on failure with a Python error raised.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nint pgBufferProxy_Trip(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Fully Regenerating Pygame Documentation\nDESCRIPTION: This command forces a full regeneration of the Pygame documentation, useful when editing theme CSS.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython dev.py docs --full\n```\n\n----------------------------------------\n\nTITLE: Creating Color from I1I2I3 Components in Python\nDESCRIPTION: Class method to create a Color object from I1I2I3 color space components. It can accept either a single object or separate i1, i2, i3 values.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom_i1i2i3(object, /) -> Color\nfrom_i1i2i3(i1, i2, i3, /) -> Color\n```\n\n----------------------------------------\n\nTITLE: Configuring /etc/hosts for Docker in Ubuntu VM\nDESCRIPTION: Commands to modify the /etc/hosts file to include the hostname 'ubuntu-xenial', which is required for Docker to start properly in the Vagrant VM.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Now edit /etc/hosts so it has a first line with the hostname ubuntu-xenial in it.\n# Otherwise docker does not start.\n# 127.0.0.1 localhost ubuntu-xenial\n# makes a /etc/hosts.bak in case something breaks.\nsudo sed -i\".bak\" '/127.0.0.1 localhost/s/$/ ubuntu-xenial/' /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Event Type Structure Definition\nDESCRIPTION: C struct definition for pygame.event.EventType object containing an event type code.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    int type;\n} pgEventObject;\n```\n\n----------------------------------------\n\nTITLE: Declaring Window Type Object Pointer in C for Pygame\nDESCRIPTION: Declares a pointer to the PyTypeObject for pygame.window.Window. This is used to reference the Python type from C code.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/window.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyTypeObject *pgWindow_Type\n```\n\n----------------------------------------\n\nTITLE: Generating Pygame Documentation using setup.py (Deprecated)\nDESCRIPTION: This deprecated command uses setup.py to generate Pygame documentation. It may require updating pip and setuptools first.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython -m pip install -U pip setuptools\npython setup.py docs\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Repository and Installing Docker CE\nDESCRIPTION: Commands to add the Docker repository GPG key, add the repository to APT sources, and install Docker CE on the Ubuntu Xenial VM.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo apt-get update\n\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n\nsudo apt-get install docker-ce\n\n# check that it runs.\nsudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Pygame Surface in C\nDESCRIPTION: Removes the pygame surface object's lock on itself.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_UnLock(pgSurfaceObject *surfobj)\n```\n\n----------------------------------------\n\nTITLE: Event Validation Check\nDESCRIPTION: Macro function to check if a PyObject is a pygame event instance. Returns false for event subclasses.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint pgEvent_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Locking a Pygame Surface in C\nDESCRIPTION: Locks the given pygame surface object, with the surface owning its own lock.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_Lock(pgSurfaceObject *surfobj)\n```\n\n----------------------------------------\n\nTITLE: Validating Font Objects in C\nDESCRIPTION: Macro that checks if an object is a pygame.freetype.Font instance. Returns false for subclasses and doesn't verify if the input is NULL.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgFont_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mypy Stubtest Allowlist for Pygame\nDESCRIPTION: This code snippet defines regex patterns and module names to be excluded from mypy stubtest checks. It covers Cython-related patterns, example and test modules, packaging hooks, and private modules specific to Pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/stubs/mypy_allow_list.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is an \"allowlist\" used by mypy stubtest. The modules/classes/functions\n# listed here are not checked by the mypy stubtest program\n# This allowlist supports regex\n\n# cython files have this top level dunder\npygame\\._sdl2\\..*\\.__test__\n\n# cython classes have some special dunders for internal use, ignore that in\n# stubtest\npygame\\._sdl2\\..*\\.__pyx_.*__\n\n# don't look for stubs for examples or for tests\npygame\\.examples.*\npygame\\.tests.*\n\n# don't look for stubs for pyinstaller hook\npygame\\.__pyinstaller.*\npygame\\.__briefcase.*\n\n# don't look for stubs for these private modules either\npygame\\.ftfont\npygame\\.imageext\npygame\\.macosx\npygame\\.newbuffer\npygame\\.pkgdata\npygame\\.pypm\npygame\\._sdl2\\.mixer\npygame\\.sysfont.*\npygame\\.docs.*\n```\n\n----------------------------------------\n\nTITLE: Including RST Common Text and Documenting Pygame System Module\nDESCRIPTION: Sphinx RST documentation configuration that includes a common text file and sets up automated documentation for the pygame.system module with all its members\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/system.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: common.txt\n\n:mod:`pygame.system`\n====================\n\n.. autopgmodule:: pygame.system\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Getting a Shell in Docker Containers\nDESCRIPTION: Commands to run bash shells in various manylinux Docker containers for debugging or manual intervention. This includes containers for different platforms and architectures.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manylinux2010_base_x86_64 -it pygame/manylinux2010_base_x86_64\ndocker run --name manylinux2010_base_i686 -it pygame/manylinux2010_base_i686\n\ndocker run --name manylinux1_base_x86_64 -it pygame/manylinux1_base_x86_64\ndocker run --name manylinux1_base_i686 -it pygame/manylinux1_base_i686\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Macro in C\nDESCRIPTION: Macro that checks if the current Pygame version is at least equal to a specified version number.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/version.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPG_VERSION_ATLEAST(MAJOR, MINOR, PATCH)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Macro in Header File\nDESCRIPTION: Example showing how a function is defined as a macro in the _pygame.h header file to be used by other modules.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/slots.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define pg_RGBAFromObj\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrantfile for pygame-ce Directory Sync\nDESCRIPTION: Configuration snippet for the Vagrantfile to set up a synced folder between the host machine's pygame directory and the '/vagrant_pygame' directory in the virtual machine.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# edit your Vagrantfile to add /vagrant_pygame synced folder.\n# You pygame folder is next to your vagrant\nconfig.vm.synced_folder \"../pygame\", \"/vagrant_pygame\"\n```\n\n----------------------------------------\n\nTITLE: Preparing a Surface for Locking in C\nDESCRIPTION: Locks the parent surface if the given surface object is a subsurface. The subsurface becomes the owner of the lock.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid pgSurface_Prep(pgSurfaceObject *surfobj)\n```\n\n----------------------------------------\n\nTITLE: Version Component Macros in C\nDESCRIPTION: Individual macros that define the major, minor, and patch version numbers of Pygame.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/version.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPG_MAJOR_VERSION\nPG_MINOR_VERSION\nPG_PATCH_VERSION\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block for RPM Package Verification\nDESCRIPTION: ASCII-armored PGP public key block used to verify RPM packages from dag.wieers.com repository. The key belongs to Dag Wieers and is compatible with GNU GPG v1.2.1.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/docker_base/RPM-GPG-KEY.dag.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.2.1 (GNU/Linux)\n\nmQGiBD9JMT0RBAC9Q2B0AloUMTxaK73sD0cOu1MMdD8yuDagbMlDtUYA1aGeJVO6\nTV02JLGr67OBY+UkYuC1c3PUwmb3+jakZd5bW1L8E2L705wS0129xQOZPz6J+alF\n5rTzVkiefg8ch1yEcMayK20NdyOmhDGXQXNQS8OJFLTIC6bJs+7MZL83/wCg3cG3\n3q7MWHm3IpJb+6QKpB9YH58D/2WjPDK+7YIky/JbFBT4JPgTSBy611+bLqHA6PXq\n39tzY6un8KDznAMNtm+NAsr6FEG8PHe406+tbgd7tBkecz3HPX8nR5v0JtDT+gzN\n8fM3kAiAzjCHUAFWVAMAZLr5TXuoq4lGTTxvZbwTjZfyjCm7gIieCu8+qnPWh6hm\n30NgA/0ZyEHG6I4rOWqPks4vZuD+wlp5XL8moBXEKfEVOMh2MCNDRGnvVHu1P3eD\noHOooVMt9sWrGcgxpYuupPNL4Uf6B6smiLlH6D4tEg+qCxC17zABI5572XJTJ170\nJklZJrPGtnkPrrKMamnN9MU4RjGmjh9JZPa7rKjZHyWP/z/CBrQ1RGFnIFdpZWVy\ncyAoRGFnIEFwdCBSZXBvc2l0b3J5IHYxLjApIDxkYWdAd2llZXJzLmNvbT6IWQQT\nEQIAGQUCP0kxPQQLBwMCAxUCAwMWAgECHgECF4AACgkQog5SFGuNeeYvDQCeKHST\nhIq/WzFBXtJOnQkJGSqAoHoAnRtsJVWYmzYKHqzkRx1qAzL18Sd0iEYEEBECAAYF\nAj9JMWAACgkQoj2iXPqnmevnOACfRQaageMcESHVE1+RSuP3txPUvoEAoJAtOHon\ng+3SzVNSZLn/g7/Ljfw+uQENBD9JMT8QBACj1QzRptL6hbpWl5DdQ2T+3ekEjJGt\nllCwt4Mwt/yOHDhzLe8SzUNyYxTXUL4TPfFvVW9/j8WOkNGvffbs7g84k7a5h/+l\nIJTTlP9V9NruDt1dlrBe+mWF6eCY55OFHjb6nOIkcJwKxRd3nGlWnLsz0ce9Hjrg\n6lMrn0lPsMV6swADBQP9H42sss6mlqnJEFA97Fl3V9s+7UVJoAIA5uSVXxEOwVoh\nVq7uECQRvWzif6tzOY+vHkUxOBRvD6oIU6tlmuG3WByKyA1d0MTqMr3eWieSYf/L\nn5VA9NuD7NwjFA1kLkoDwfSbsF51LppTMkUggzwgvwE46MB6yyuqAVI1kReAWw+I\nRgQYEQIABgUCP0kxPwAKCRCiDlIUa4155oktAKDAzm9QYbDpk6SrQhkSFy016BjE\nBACeJU1hpElFnUZCL4yKj4EuLnlo8kc=\n=mqUt\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Checking Color Type in C API\nDESCRIPTION: Macro for checking if an object is an exact instance of the pygame Color type, not including subclasses. This function does not verify if the object is NULL or a valid Python type.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint pgColor_CheckExact(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Building pygame-ce Wheels Using Docker Images\nDESCRIPTION: Commands to build pygame-ce wheels using the Docker base images, for either 64-bit, 32-bit, or both architectures. The wheels will be created in a directory called 'wheelhouse'.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake wheels-x64  # 64 bit, or\nmake wheels-x86  # 32 bit, or\nmake wheels      # both\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Image Build Options for Linux and Mac OSX\nDESCRIPTION: Conditional script that sets different SDL_IMAGE_CONFIGURE options based on the operating system. For Mac OSX, it disables imageio to avoid compatibility issues with jpg/png files.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/macdependencies/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n      # linux\n      export SDL_IMAGE_CONFIGURE=\nelif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      # Mac OSX\n      # --disable-imageio is so it doesn't use the built in mac image loading.\n      #     Since it is not as compatible with some jpg/png files.\n      export SDL_IMAGE_CONFIGURE=--disable-imageio\nfi\n```\n\n----------------------------------------\n\nTITLE: Surface Creation Function in C\nDESCRIPTION: Creates a new pygame surface instance from an SDL_Surface pointer. Returns NULL if an error occurs during creation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npgSurfaceObject* pgSurface_New(SDL_Surface *s)\n```\n\n----------------------------------------\n\nTITLE: SDL Image Library License Comment Block\nDESCRIPTION: Copyright notice and license terms for SDL_image library, defining usage permissions and restrictions for software distribution. The license allows free use, modification and redistribution while requiring original attribution and transparent modification marking.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/licenses/LICENSE.sdl2_image.txt#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*\n  SDL_image:  An example image loading library for use with SDL\n  Copyright (C) 1997-2019 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating Pygame Documentation using dev.py\nDESCRIPTION: This command uses the dev.py script to generate Pygame documentation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython dev.py docs\n```\n\n----------------------------------------\n\nTITLE: Creating New Font Instances from Files in C\nDESCRIPTION: Function that creates a new pygame.freetype.Font instance from a file path. Handles font index for multi-font files and returns NULL with a Python exception on errors.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgFont_New(const char *filename, long font_index)\n```\n\n----------------------------------------\n\nTITLE: Checking if SDL_RWops is a Python File Object in C\nDESCRIPTION: This function checks if the given SDL_RWops struct is a wrapper for a Python file-like object, returning true if it was created by pgRWops_FromObject or pgRWops_FromFileObject.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgRWops_IsFileObject(SDL_RWops *rw)\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer for LGPL Licensed Library\nDESCRIPTION: This snippet provides a template for a copyright disclaimer that can be used by employers or institutions to disclaim copyright interest in an LGPL-licensed library created by their employee or student.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/licenses/LICENSE.fluidsynth.txt#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random\n  Hacker.\n\n  {signature of Ty Coon}, 1 April 1990\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Releasing Surface Lock Preparation in C\nDESCRIPTION: Releases the lock on the parent surface if the given surface object is a subsurface.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid pgSurface_Unprep(pgSurfaceObject *surfobj)\n```\n\n----------------------------------------\n\nTITLE: RST Link Definitions for Documentation Languages\nDESCRIPTION: Defines reference links for various language versions of the documentation and community resources using RST syntax.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/readmes/README.it.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _Pygame Community Discord Server: https://discord.gg/pygame\n.. _wiki pages: https://github.com/pygame-community/pygame-ce/wiki\n\n.. _English: ./../../README.rst\n.. _简体中文: README.zh-cn.rst\n.. _繁體中文: README.zh-tw.rst\n.. _فارسی: README.fa.rst\n.. _Français: README.fr.rst\n.. _Español: README.es.rst\n.. _日本語: README.ja.rst\n.. _Italiano: README.it.rst\n.. _Русский: README.ru.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame Test Suite run() Function (Python)\nDESCRIPTION: Defines the run() function in the pygame.tests module, which executes the Pygame unit test suite. It explains the function's parameters, return value, and behavior in detail.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/tests.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrun(*args, **kwds) -> tuple\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vagrant VM for Cross-Platform Wheel Building\nDESCRIPTION: Commands to set up a Vagrant virtual machine with Ubuntu Xenial for building pygame-ce wheels from Mac, Windows, or Linux hosts. This includes creating and configuring the VM with a synced folder.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# You should be in the base of the pygame repo when you run all this.\n$ pwd\n/home/jblogs/pygame\n\n# Download many megabytes of ubuntu.\nmkdir vagrant.xenial64\ncd vagrant.xenial64\nvagrant init ubuntu/xenial64\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Pygame C API Documentation in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the Pygame C API documentation using reStructuredText syntax. It includes directives for structuring the document and lists various module-specific documentation files.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\npygame C API\n============\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   c_api/slots.rst\n   c_api/base.rst\n   c_api/bufferproxy.rst\n   c_api/color.rst\n   c_api/display.rst\n   c_api/event.rst\n   c_api/freetype.rst\n   c_api/joystick.rst\n   c_api/mixer.rst\n   c_api/rect.rst\n   c_api/rwobject.rst\n   c_api/surface.rst\n   c_api/surflock.rst\n   c_api/version.rst\n   c_api/window.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Surface from String Data in Pygame (Deprecated)\nDESCRIPTION: This deprecated function creates a new Surface from a byte buffer. It has been replaced by frombytes() which should be used instead. Takes size, format and optional flipped parameter.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfromstring(bytes, size, format, flipped=False, pitch=-1) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant VM and Installing Docker on Ubuntu\nDESCRIPTION: Commands to start the Vagrant VM, SSH into it, and install Docker on the Ubuntu Xenial host following the official Docker installation instructions.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# now start vagrant.\nvagrant up\nvagrant ssh\n\n# now we are on the vagrant ubuntu host\n# We set up docker following these instructions for ubuntu-xenial\n# https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\nsudo apt-get update\nsudo apt-get remove docker docker-engine docker.io\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\n----------------------------------------\n\nTITLE: Checking pgVidInfo Type in C\nDESCRIPTION: Function-like macro that checks if an object is a pgVidInfo_Type instance. Returns false for subclasses and does not check for NULL.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pgVidInfo_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Accessing BufferProxy Parent in Python\nDESCRIPTION: Returns the wrapped exporting object, which can be a Surface or the parent object passed to BufferProxy initialization.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nparent -> Surface\nparent -> parent\n```\n\n----------------------------------------\n\nTITLE: Accessing SDL_VideoInfo from pgVidInfoObject in C\nDESCRIPTION: Function-like macro that returns the SDL_VideoInfo field from a pgVidInfo_Type instance. This macro does not perform type checking on the object.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSDL_VideoInfo pgVidInfo_AsVidInfo(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Array Types in Pygame (Deprecated)\nDESCRIPTION: Deprecated function that returns a tuple of strings representing available array systems. Returns None if no supported array system is found.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nget_arraytypes() -> tuple\n```\n\n----------------------------------------\n\nTITLE: Locking a Pygame Surface with External Owner in C\nDESCRIPTION: Locks the given pygame surface object with an external Python object owning the lock. The surface keeps a weak reference to the lock owner.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_LockBy(pgSurfaceObject *surfobj, PyObject *lockobj)\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame Joystick Type Object in C\nDESCRIPTION: Declaration of the PyTypeObject for the Pygame joystick object type that implements pygame.Joystick class functionality.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/joystick.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nPyTypeObject *pgJoystick_Type\n```\n\n----------------------------------------\n\nTITLE: Including Common Documentation Text in reStructuredText\nDESCRIPTION: Simple directive to include a common text file (common.txt) from a parent directory using relative path notation in reStructuredText format.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../common.txt\n```\n\n----------------------------------------\n\nTITLE: Version Number Generation Macro in C\nDESCRIPTION: Macro that generates an integer representation of a version number from major, minor, and patch components.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/version.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nPG_VERSIONNUM(MAJOR, MINOR, PATCH)\n```\n\n----------------------------------------\n\nTITLE: Copying Files from Docker Container to Host\nDESCRIPTION: Command to copy a file (config.log) from a Docker container to the host machine, useful for debugging build issues with SDL2.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run pygame/manylinux1_base_i686 tar -c -C /sdl_build SDL2-2.0.12/config.log | tar x\n```\n\n----------------------------------------\n\nTITLE: Setting Array Type in Pygame (Deprecated)\nDESCRIPTION: Deprecated function to set the array system type. Only accepts 'numpy' as valid input, other values raise ValueError.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nuse_arraytype(arraytype) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Roles for Pygame Documentation\nDESCRIPTION: Sets up reStructuredText role definitions including codelineref and a clr class alias. Includes common definitions from a parent directory.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Common definitions for tutorials\n\n.. include:: ../common.txt\n\n.. role:: codelineref\n\n.. role:: clr(codelineref)\n   :class: codelineref\n```\n\n----------------------------------------\n\nTITLE: License Information for Bayer to RGB Conversion\nDESCRIPTION: License information for the Bayer to RGB conversion function used in the pygame.camera module. The code is based on the Sonix SN9C101 webcam interface routines and is licensed under a BSD-style license.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/camera.rst#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSonix SN9C101 based webcam basic I/F routines\nCopyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Setting Array Type for Sound Arrays in Python (Deprecated)\nDESCRIPTION: Deprecated function that sets the array system to be used for sound arrays. Only supports 'numpy' as an arraytype, with other values raising ValueError.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuse_arraytype(arraytype) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining Code Line Reference Role in Pygame Documentation\nDESCRIPTION: Creates a custom role 'codelineref' for referencing specific lines of code in the documentation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/es/common.txt#2025-04-20_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: codelineref\n```\n\n----------------------------------------\n\nTITLE: Uploading pygame-ce Wheels to PyPI\nDESCRIPTION: Commands to prepare and upload the built pygame-ce wheels to PyPI using twine. This includes copying the wheels to the dist directory and using twine to upload them.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Now upload all the linux wheels to pypi.\n# Make sure your PYPI vars are set. See .travis_osx_upload_whl.py\n# Note you will need to increment the version in setup.py first.\ncd ..\nmkdir -p dist\nrm -f dist/*.whl\ncp buildconfig/manylinux-build/wheelhouse/*.whl dist/\n\npip install twine\n\ntwine upload dist/*.whl --user=pygameci\n```\n\n----------------------------------------\n\nTITLE: Setting Color Length in Python (Deprecated)\nDESCRIPTION: Deprecated method to set the number of elements in the Color. It's recommended to use unpacking instead.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nset_length(len, /) -> None\n```\n\n----------------------------------------\n\nTITLE: Launching Local Pygame Documentation\nDESCRIPTION: This command launches the locally generated Pygame documentation using Python's module execution feature.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython -m docs\n```\n\n----------------------------------------\n\nTITLE: Generating PyGame CE Documentation\nDESCRIPTION: Command to run the documentation generation script that converts RST files in docs/reST/ref/ into header files\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/src_c/doc/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython buildconfig/make_docs.py\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Cameras with Pygame in Python\nDESCRIPTION: This snippet shows how to get a list of connected cameras and initialize the first available camera. It's useful when you don't know the exact path of the camera.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ncamlist = pygame.camera.list_cameras()\nif camlist:\n    cam = pygame.camera.Camera(camlist[0],(640,480))\n```\n\n----------------------------------------\n\nTITLE: LGPL License Notice Template\nDESCRIPTION: Standard license notice template to be included at the start of source files, including copyright declaration and license terms.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/LGPL.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Pygame Camera Module in Python\nDESCRIPTION: This snippet shows how to import the necessary Pygame modules and initialize the camera module. It's the first step in using Pygame's camera functionality.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/tutorials/en/intro-to-camera.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nimport pygame.camera\nfrom pygame.locals import *\n\npygame.init()\npygame.camera.init()\n```\n\n----------------------------------------\n\nTITLE: Checking BufferProxy Instance in C for Pygame\nDESCRIPTION: Function to check if a Python object is an instance of pygame.BufferProxy. Returns true for direct instances, false for subclass instances or non-BufferProxy objects.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint pgBufferProxy_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Running Pygame Examples in Python Interpreter\nDESCRIPTION: Shows how to import and run pygame examples directly from the Python interpreter by calling each module's main() function.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.main()\n```\n\n----------------------------------------\n\nTITLE: Rectangle Creation Functions\nDESCRIPTION: Functions for creating new Pygame rectangle instances from SDL rectangles or coordinate components.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgRect_New(SDL_Rect *r);\nPyObject* pgFRect_New(SDL_FRect *r);\nPyObject* pgRect_New4(int x, int y, int w, int h);\nPyObject* pgFRect_New4(float x, float y, float w, float h);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Array Type in Pygame (Deprecated)\nDESCRIPTION: Deprecated function that returns the currently active array type used for array creation.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nget_arraytype() -> str\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Sample copyright disclaimer template for employers or institutions to disclaim copyright interest in the library.\nSOURCE: https://github.com/pygame-community/pygame-ce/blob/main/docs/LGPL.txt#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```"
  }
]