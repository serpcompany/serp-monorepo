[
  {
    "owner": "encode",
    "repo": "databases",
    "content": "TITLE: Managing Database Transactions with Context Manager in Python\nDESCRIPTION: Shows how to use async context manager to handle database transactions which automatically commits or rolls back based on execution success.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync with database.transaction():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database Using Context Manager in Python\nDESCRIPTION: Demonstrates how to connect to a database using an async context manager which automatically handles connection acquisition and release.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with Database(DATABASE_URL) as database:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Transactions with Savepoints in Python\nDESCRIPTION: Demonstrates how to use nested transactions which are implemented using database savepoints, allowing partial transaction rollback.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync with databases.Database(database_url) as db:\n    async with db.transaction() as outer:\n        # Do something in the outer transaction\n        ...\n\n        # Suppress to prevent influence on the outer transaction\n        with contextlib.suppress(ValueError):\n            async with db.transaction():\n                # Do something in the inner transaction\n                ...\n\n                raise ValueError('Abort the inner transaction')\n\n    # Observe the results of the outer transaction,\n    # without effects from the inner transaction.\n    await db.fetch_all('SELECT * FROM ...')\n```\n\n----------------------------------------\n\nTITLE: Executing Database Queries with SQLAlchemy Core in Python\nDESCRIPTION: This snippet demonstrates how to execute various database operations using SQLAlchemy core with the 'databases' library. It includes inserting data, fetching rows, and iterating over results.\nSOURCE: https://github.com/encode/databases/blob/master/docs/database_queries.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom databases import Database\n\ndatabase = Database('postgresql+asyncpg://localhost/example')\n\n\n# Establish the connection pool\nawait database.connect()\n\n# Execute\nquery = notes.insert()\nvalues = {\"text\": \"example1\", \"completed\": True}\nawait database.execute(query=query, values=values)\n\n# Execute many\nquery = notes.insert()\nvalues = [\n    {\"text\": \"example2\", \"completed\": False},\n    {\"text\": \"example3\", \"completed\": True},\n]\nawait database.execute_many(query=query, values=values)\n\n# Fetch multiple rows\nquery = notes.select()\nrows = await database.fetch_all(query=query)\n\n# Fetch single row\nquery = notes.select()\nrow = await database.fetch_one(query=query)\n\n# Fetch single value, defaults to `column=0`.\nquery = notes.select()\nvalue = await database.fetch_val(query=query)\n\n# Fetch multiple rows without loading them all into memory at once\nquery = notes.select()\nasync for row in database.iterate(query=query):\n    ...\n\n# Close all connections in the connection pool\nawait database.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with Databases Library in Python\nDESCRIPTION: This snippet shows how to perform raw SQL queries using the 'databases' library. It includes examples of inserting data, fetching multiple rows, and fetching a single row.\nSOURCE: https://github.com/encode/databases/blob/master/docs/database_queries.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Execute\nquery = \"INSERT INTO notes(text, completed) VALUES (:text, :completed)\"\nvalues = {\"text\": \"example1\", \"completed\": True}\nawait database.execute(query=query, values=values)\n\n# Execute many\nquery = \"INSERT INTO notes(text, completed) VALUES (:text, :completed)\"\nvalues = [\n    {\"text\": \"example2\", \"completed\": False},\n    {\"text\": \"example3\", \"completed\": True},\n]\nawait database.execute_many(query=query, values=values)\n\n# Fetch multiple rows\nquery = \"SELECT * FROM notes WHERE completed = :completed\"\nrows = await database.fetch_all(query=query, values={\"completed\": True})\n\n# Fetch single row\nquery = \"SELECT * FROM notes WHERE id = :id\"\nresult = await database.fetch_one(query=query, values={\"id\": 1})\n```\n\n----------------------------------------\n\nTITLE: Using Transaction as Function Decorator in Python\nDESCRIPTION: Demonstrates how to use the transaction method as a decorator on async functions to wrap the entire function execution in a transaction.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@database.transaction()\nasync def create_users(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Low-Level Transaction API in Python\nDESCRIPTION: Shows how to use the lower-level transaction API for more explicit control over transaction lifecycle with manual commit and rollback.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntransaction = await database.transaction()\ntry:\n    ...\nexcept:\n    await transaction.rollback()\nelse:\n    await transaction.commit()\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting Explicitly to Database in Python\nDESCRIPTION: Shows how to explicitly connect and disconnect from a database without using a context manager, which requires manual connection management.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndatabase = Database(DATABASE_URL)\nawait database.connect()\n...\nawait database.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Integrating Database Connection with Starlette Web Framework in Python\nDESCRIPTION: Demonstrates how to hook into Starlette framework startup and shutdown events to manage database connections for web applications.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Results in Python with Databases Library\nDESCRIPTION: This snippet demonstrates how to access query results using the 'databases' library. It shows both attribute-based access and mapping-based access to result fields.\nSOURCE: https://github.com/encode/databases/blob/master/docs/database_queries.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = \"SELECT * FROM notes WHERE id = :id\"\nresult = await database.fetch_one(query=query, values={\"id\": 1})\nresult.id  # Access field via attribute\nresult._mapping['id']  # Access field via mapping\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Force-Rollback Transactions in Python\nDESCRIPTION: This snippet demonstrates how to create an explicit force-rollback transaction using the database.transaction() method. This allows for more granular control over transaction behavior in specific parts of the code.\nSOURCE: https://github.com/encode/databases/blob/master/docs/tests_and_migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with database.transaction(force_rollback=True):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with Force Rollback for Test Isolation in Python\nDESCRIPTION: This snippet demonstrates how to create a Database instance with force_rollback enabled, ensuring that all database connections are run within a transaction that rolls back once the database is disconnected. This is useful for maintaining strict test isolation.\nSOURCE: https://github.com/encode/databases/blob/master/docs/tests_and_migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndatabase = Database(DATABASE_URL, force_rollback=True)\n```\n\n----------------------------------------\n\nTITLE: Sharing Transaction Connection Between Tasks in Python\nDESCRIPTION: Shows how to share a database connection between different asynchronous tasks to influence an active transaction from another task.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def add_excitement(connnection: databases.core.Connection, id: int):\n    await connection.execute(\n        \"UPDATE notes SET text = CONCAT(text, '!!!') WHERE id = :id\",\n        {\"id\": id}\n    )\n\n\nasync with Database(database_url) as database:\n    async with database.transaction():\n        # This note won't exist until the transaction closes...\n        await database.execute(\n            \"INSERT INTO notes(id, text) values (1, 'databases is cool')\"\n        )\n        # ...but child tasks can use this connection now!\n        await asyncio.create_task(add_excitement(database.connection(), id=1))\n\n    await database.fetch_val(\"SELECT text FROM notes WHERE id=1\")\n    # ^ returns: \"databases is cool!!!\"\n```\n\n----------------------------------------\n\nTITLE: Managing Database Transactions with Specific Connection in Python\nDESCRIPTION: Demonstrates how to acquire a specific database connection and manage transactions on that connection.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync with database.connection() as connection:\n    async with connection.transaction():\n        ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Isolation Level in Python\nDESCRIPTION: Shows how to specify the transaction isolation level when creating a transaction, which controls how concurrent transactions interact.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync with database.transaction(isolation=\"serializable\"):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Passing Connection Options as Keyword Arguments in Python\nDESCRIPTION: Demonstrates how to pass connection options as keyword arguments instead of URL parameters when creating a database instance.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndatabase = Database('postgresql+asyncpg://localhost/example', ssl=True, min_size=5, max_size=20)\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Options in Python\nDESCRIPTION: Shows how to configure PostgreSQL and MySQL connection options like SSL and connection pool size using URL parameters.\nSOURCE: https://github.com/encode/databases/blob/master/docs/connections_and_transactions.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Use an SSL connection.\ndatabase = Database('postgresql+asyncpg://localhost/example?ssl=true')\n\n# Use a connection pool of between 5-20 connections.\ndatabase = Database('mysql+aiomysql://localhost/example?min_size=5&max_size=20')\n```\n\n----------------------------------------\n\nTITLE: Declaring Database Tables with SQLAlchemy in Python\nDESCRIPTION: This snippet demonstrates how to declare database tables using SQLAlchemy core. It creates a 'notes' table with id, text, and completed columns.\nSOURCE: https://github.com/encode/databases/blob/master/docs/database_queries.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sqlalchemy\n\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String(length=100)),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with SQLAlchemy and Databases in Python\nDESCRIPTION: This snippet shows how to create database tables using SQLAlchemy core and the 'databases' library. It establishes a connection, defines tables, and executes create table queries.\nSOURCE: https://github.com/encode/databases/blob/master/docs/database_queries.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom databases import Database\nimport sqlalchemy\n\ndatabase = Database(\"postgresql+asyncpg://localhost/example\")\n\n# Establish the connection pool\nawait database.connect()\n\nmetadata = sqlalchemy.MetaData()\ndialect = sqlalchemy.dialects.postgresql.dialect()\n\n# Define your table(s)\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String(length=100)),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n# Create tables\nfor table in metadata.tables.values():\n    # Set `if_not_exists=False` if you want the query to throw an\n    # exception when the table already exists\n    schema = sqlalchemy.schema.CreateTable(table, if_not_exists=True)\n    query = str(schema.compile(dialect=dialect))\n    await database.execute(query=query)\n\n# Close all connections in the connection pool\nawait database.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Based on Testing Environment in Python\nDESCRIPTION: This code snippet shows how to set up different database connections for testing and development environments. It uses a test database with force rollback for testing, and a regular database for development.\nSOURCE: https://github.com/encode/databases/blob/master/docs/tests_and_migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif TESTING:\n    database = Database(TEST_DATABASE_URL, force_rollback=True)\nelse:\n    database = Database(DATABASE_URL)\n```\n\n----------------------------------------\n\nTITLE: Databases Quickstart Example in Python\nDESCRIPTION: A complete example demonstrating how to use Databases with SQLite, including connecting to a database, creating a table, inserting data, and querying data.\nSOURCE: https://github.com/encode/databases/blob/master/docs/index.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a database instance, and connect to it.\nfrom databases import Database\ndatabase = Database('sqlite+aiosqlite:///example.db')\nawait database.connect()\n\n# Create a table.\nquery = \"\"\"CREATE TABLE HighScores (id INTEGER PRIMARY KEY, name VARCHAR(100), score INTEGER)\"\"\"\nawait database.execute(query=query)\n\n# Insert some data.\nquery = \"INSERT INTO HighScores(name, score) VALUES (:name, :score)\"\nvalues = [\n    {\"name\": \"Daisy\", \"score\": 92},\n    {\"name\": \"Neil\", \"score\": 87},\n    {\"name\": \"Carol\", \"score\": 43},\n]\nawait database.execute_many(query=query, values=values)\n\n# Run a database query.\nquery = \"SELECT * FROM HighScores\"\nrows = await database.fetch_all(query=query)\nprint('High Scores:', rows)\n```\n\n----------------------------------------\n\nTITLE: Basic SQLite Database Operations with Databases Package\nDESCRIPTION: Python code demonstrating basic database operations including connecting to a SQLite database, creating a table, inserting data, and querying records using async/await syntax.\nSOURCE: https://github.com/encode/databases/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a database instance, and connect to it.\nfrom databases import Database\ndatabase = Database('sqlite+aiosqlite:///example.db')\nawait database.connect()\n\n# Create a table.\nquery = \"\"\"CREATE TABLE HighScores (id INTEGER PRIMARY KEY, name VARCHAR(100), score INTEGER)\"\"\"\nawait database.execute(query=query)\n\n# Insert some data.\nquery = \"INSERT INTO HighScores(name, score) VALUES (:name, :score)\"\nvalues = [\n    {\"name\": \"Daisy\", \"score\": 92},\n    {\"name\": \"Neil\", \"score\": 87},\n    {\"name\": \"Carol\", \"score\": 43},\n]\nawait database.execute_many(query=query, values=values)\n\n# Run a database query.\nquery = \"SELECT * FROM HighScores\"\nrows = await database.fetch_all(query=query)\nprint('High Scores:', rows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alembic Environment for Dynamic Database URL and Metadata in Python\nDESCRIPTION: This Python code snippet shows how to configure the Alembic environment to use a dynamic DATABASE_URL and table metadata. It sets up the necessary configuration for Alembic to work with the application's database setup.\nSOURCE: https://github.com/encode/databases/blob/master/docs/tests_and_migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# The Alembic Config object.\nconfig = context.config\n\n# Configure Alembic to use our DATABASE_URL and our table definitions.\n# These are just examples - the exact setup will depend on whatever\n# framework you're integrating against.\nfrom myapp.settings import DATABASE_URL\nfrom myapp.tables import metadata\n\nconfig.set_main_option('sqlalchemy.url', str(DATABASE_URL))\ntarget_metadata = metadata\n\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Databases Package with Different Drivers\nDESCRIPTION: Shell commands for installing the Databases package with various database drivers including asyncpg, aiopg, aiomysql, asyncmy, and aiosqlite.\nSOURCE: https://github.com/encode/databases/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install databases\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install databases[asyncpg]\n$ pip install databases[aiopg]\n$ pip install databases[aiomysql]\n$ pip install databases[asyncmy]\n$ pip install databases[aiosqlite]\n```\n\n----------------------------------------\n\nTITLE: Installing Databases and Database Drivers\nDESCRIPTION: Commands for installing the Databases package and various database drivers using pip.\nSOURCE: https://github.com/encode/databases/blob/master/docs/index.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install databases\n$ pip install databases[asyncpg]\n$ pip install databases[aiopg]\n$ pip install databases[aiomysql]\n$ pip install databases[asyncmy]\n$ pip install databases[aiosqlite]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for Database Project\nDESCRIPTION: Requirements file listing necessary Python packages including async database drivers (asyncmy, aiomysql, aiopg, aiosqlite, asyncpg), sync database drivers (psycopg, pymysql), testing utilities, documentation tools, and packaging dependencies.\nSOURCE: https://github.com/encode/databases/blob/master/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\\n\\n# Async database drivers\\nasyncmy==0.2.9\\naiomysql==0.2.0\\naiopg==1.4.0\\naiosqlite==0.20.0\\nasyncpg==0.29.0\\n\\n# Sync database drivers for standard tooling around setup/teardown/migrations.\\npsycopg==3.1.18\\npymysql==1.1.0\\n\\n# Testing\\nautoflake==1.4\\nblack==22.6.0\\nhttpx==0.24.1\\nisort==5.10.1\\nmypy==0.971\\npytest==7.1.2\\npytest-cov==3.0.0\\nstarlette==0.36.2\\nrequests==2.31.0\\n\\n# Documentation\\nmkdocs==1.3.1\\nmkdocs-material==8.3.9\\nmkautodoc==0.1.0\\n\\n# Packaging\\ntwine==4.0.1\\nwheel==0.38.1\\nsetuptools==69.0.3\n```\n\n----------------------------------------\n\nTITLE: Installing Alembic for Database Migrations using pip\nDESCRIPTION: These shell commands show how to install Alembic using pip and initialize a migrations directory for managing database schema changes.\nSOURCE: https://github.com/encode/databases/blob/master/docs/tests_and_migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install alembic\n$ alembic init migrations\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Database Testing\nDESCRIPTION: A sample Docker Compose configuration that sets up PostgreSQL and MySQL services for testing the databases library with multiple backends.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nversion: '2.1'\nservices:\n  postgres:\n    image: postgres:10.8\n    environment:\n      POSTGRES_USER: username\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: testsuite\n    ports:\n      - 5432:5432\n\n  mysql:\n    image: mysql:5.7\n    environment:\n      MYSQL_USER: username\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_DATABASE: testsuite\n    ports:\n      - 3306:3306\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SQLite Example\nDESCRIPTION: Shell commands for installing the required packages to run the SQLite example, including the aiosqlite driver and IPython for interactive console usage.\nSOURCE: https://github.com/encode/databases/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install databases[aiosqlite]\n$ pip install ipython\n```\n\n----------------------------------------\n\nTITLE: Setting Up Databases Example Environment\nDESCRIPTION: Commands for installing the required packages for the quickstart example.\nSOURCE: https://github.com/encode/databases/blob/master/docs/index.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install databases[aiosqlite]\n$ pip install ipython\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Development\nDESCRIPTION: Command to install databases and all its dependencies including test requirements.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated development.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvirtualenv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository and Setting Up Development Environment\nDESCRIPTION: Instructions for forking the databases repository, cloning it locally, and setting up a virtual environment for development.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your username>/databases.git\ncd databases\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting and Formatting\nDESCRIPTION: Command to run the linting script which uses black for formatting, autoflake for linting, and mypy for type checking.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/lint\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to execute the test suite for the databases library.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test\n```\n\n----------------------------------------\n\nTITLE: Changelog Documentation in Markdown\nDESCRIPTION: A comprehensive changelog that follows the Keep a Changelog format, documenting version updates from 0.4.0 to 0.9.0. Includes sections for Added, Changed, and Fixed modifications with associated pull request references.\nSOURCE: https://github.com/encode/databases/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.9.0 (February 23th, 2024)\n\n### Changed\n\n* Drop support for Python 3.7 and add support for Python 3.12 ([#583][#583])\n* Add support for SQLAlchemy 2+ ([#540][#540])\n* Allow SSL string parameters in PostgresSQL URL ([#575][#575]) and ([#576][#576])\n\n[#583]: https://github.com/encode/databases/pull/583\n[#540]: https://github.com/encode/databases/pull/540\n[#575]: https://github.com/encode/databases/pull/575\n[#576]: https://github.com/encode/databases/pull/576\n```\n\n----------------------------------------\n\nTITLE: Removing SQLAlchemy URL from Alembic Configuration\nDESCRIPTION: This shell command demonstrates how to remove the default SQLAlchemy URL from the alembic.ini file, allowing for dynamic configuration in the migration environment.\nSOURCE: https://github.com/encode/databases/blob/master/docs/tests_and_migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsqlalchemy.url = driver://user:pass@localhost/dbname\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: Git command to create and checkout a new branch for feature development.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build and preview the documentation for the databases library.\nSOURCE: https://github.com/encode/databases/blob/master/docs/contributing.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/docs\n```\n\n----------------------------------------\n\nTITLE: Listing Development Scripts in Markdown\nDESCRIPTION: This snippet lists various development scripts used in the project, including their purposes. It covers scripts for building, checking, cleaning, testing, and publishing the package.\nSOURCE: https://github.com/encode/databases/blob/master/scripts/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Development Scripts\n\n* `scripts/build` - Build package and documentation.\n* `scripts/check` - Check lint and formatting.\n* `scripts/clean` - Delete any build artifacts.\n* `scripts/coverage` - Check test coverage.\n* `scripts/docs` - Run documentation server locally.\n* `scripts/install` - Install dependencies in a virtual environment.\n* `scripts/lint` - Run the code linting.\n* `scripts/publish` - Publish the latest version to PyPI.\n* `scripts/test` - Run the test suite.\n\nStyled after GitHub's [\"Scripts to Rule Them All\"](https://github.com/github/scripts-to-rule-them-all).\n```"
  }
]