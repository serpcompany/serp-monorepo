[
  {
    "owner": "threepointone",
    "repo": "partyserver",
    "content": "TITLE: Handling User Presence in Party Server React Integration\nDESCRIPTION: This code demonstrates a complete implementation of a real-time collaborative app using Party Server with React. It shows how to handle user presence, manage user-specific state, and work with the usePartySocket hook for real-time updates.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/auth.md#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// src/App.jsx \nimport { useState, useEffect } from \"react\";\nimport { usePartySocket } from \"partykit/react\";\n\nexport default function App() {\n  // local state for current user\n  const [username, setUsername] = useState(\"guest-\" + Math.floor(Math.random() * 10000));\n  const [message, setMessage] = useState(\"\");\n\n  // local state for all users\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n  // connect to the party\n  const socket = usePartySocket({\n    host: PARTYKIT_HOST,\n    room: \"my-room\",\n    id: username, // use username as connection id\n    onMessage(message) {\n      const data = JSON.parse(message.data);\n      if (data.type === \"sync\") {\n        // initial sync\n        setUsers(data.users);\n        setMessages(data.messages);\n      } else if (data.type === \"users\") {\n        // users update\n        setUsers(data.users);\n      } else if (data.type === \"message\") {\n        // new message\n        setMessages((prev) => [...prev, data.message]);\n      }\n    },\n  });\n\n  // send message\n  function sendMessage(e) {\n    e.preventDefault();\n    if (!message) return;\n    socket.send(\n      JSON.stringify({\n        type: \"message\",\n        message: { username, text: message },\n      })\n    );\n    setMessage(\"\");\n  }\n\n  return (\n    <div>\n      <h1>Chat</h1>\n\n      <div className=\"users\">\n        <h2>Users</h2>\n        <ul>\n          {users.map((user) => (\n            <li key={user}>{user}</li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"messages\">\n        <h2>Messages</h2>\n        <ul>\n          {messages.map((msg, i) => (\n            <li key={i}>\n              <strong>{msg.username}:</strong> {msg.text}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <form onSubmit={sendMessage}>\n        <input\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          placeholder=\"Username\"\n        />\n        <input\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Message\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple WebSocket Server with PartyServer\nDESCRIPTION: Basic example showing how to create a WebSocket server using PartyServer. It demonstrates initializing the server, handling message events, and sending data to clients.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rpc.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { partyserver } from 'partyserver'\n\nconst server = partyserver({ port: 3000 })\n\nserver.on('connection', socket => {\n  console.log('new connection!', socket)\n\n  socket.on('message', message => console.log(message))\n\n  socket.send('hello from server!')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Zustand Store with Party Server Integration\nDESCRIPTION: This custom hook creates a Zustand store that synchronizes with Party Server. It sets up a connection to the Party Server and handles real-time state updates between all connected clients.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/quickstart.md#2025-04-15_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Party from \"partykit/client\";\nimport { create } from \"zustand\";\n\nexport function usePartyStore(room, initialState) {\n  const useStore = create(() => ({ ...initialState }));\n\n  const conn = new Party.Connection(room, {\n    initial: useStore.getState(),\n    prepare: (state) => {\n      useStore.setState(state, true);\n    },\n    mutation: (state, { action, data }) => {\n      console.log(\"Got\", action, data);\n      useStore.setState(data, true);\n      return state;\n    },\n    sync: (state) => {\n      useStore.setState(state, true);\n    },\n  });\n\n  // expose proxy\n  useStore.send = conn.send.bind(conn);\n\n  return useStore;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Party Server and Zustand\nDESCRIPTION: A React component that demonstrates real-time state synchronization using Party Server and Zustand. It implements a counter that can be incremented or decremented, with changes reflected across all connected clients.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/quickstart.md#2025-04-15_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { usePartyStore } from \"./usePartyStore\";\n\nexport default function Counter() {\n  const { count, send } = usePartyStore(\"my-room:state\", { count: 0 });\n\n  const add = () => {\n    send(\"update\", { count: count + 1 });\n  };\n\n  const sub = () => {\n    send(\"update\", { count: count - 1 });\n  };\n\n  return (\n    <div>\n      <h1>Counter: {count}</h1>\n      <button onClick={sub}>-</button>\n      <button onClick={add}>+</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic PartyServer in TypeScript\nDESCRIPTION: A complete example showing how to define a PartyServer class with connection and message handling, as well as a fetch handler to route requests. Demonstrates the core functionality of creating a WebSocket server with broadcasting capabilities.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyserver/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport { routePartykitRequest, Server } from \"partyserver\";\n\n// Define your Server\nexport class MyServer extends Server {\n  onConnect(connection) {\n    console.log(\"Connected\", connection.id, \"to server\", this.name);\n  }\n\n  onMessage(connection, message) {\n    console.log(\"Message from\", connection.id, \":\", message);\n    // Send the message to every other connection\n    this.broadcast(message, [connection.id]);\n  }\n}\n\nexport default {\n  // Set up your fetch handler to use configured Servers\n  fetch(request, env) {\n    return (\n      routePartykitRequest(request, env) ||\n      new Response(\"Not Found\", { status: 404 })\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Local State with Remote Party Server State\nDESCRIPTION: This example shows how to synchronize local React state with the remote state from Party Server. It uses useState for local state and manages updates by sending and receiving messages via the socket connection.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/auth.md#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// src/App.jsx \nimport { usePartySocket } from \"partykit/react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function App() {\n  // local state\n  const [count, setCount] = useState(0);\n\n  // connect to the party\n  const socket = usePartySocket({\n    host: PARTYKIT_HOST,\n    room: \"counter\",\n    onMessage(message) {\n      // when we get a message from the server, update our local state\n      const data = JSON.parse(message.data);\n      setCount(data.count);\n    },\n  });\n\n  // when local state changes, notify the party\n  useEffect(() => {\n    socket.send(JSON.stringify({ count }));\n  }, [count, socket]);\n\n  return (\n    <div>\n      <h1>Counter: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Server and Client with PartyServer in JavaScript\nDESCRIPTION: This code snippet demonstrates the creation of a basic chat server and client using PartyServer. It includes server-side logic for handling connections and broadcasting messages, as well as client-side code for connecting to a room and sending messages.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/fixtures/chat/README.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Party from \"partykit/server\";\n\nexport default class ChatServer implements Party.Server {\n  constructor(readonly room: Party.Room) {}\n\n  onConnect(conn: Party.Connection, ctx: Party.ConnectionContext) {\n    // A new connection is established\n  }\n\n  onMessage(message: string, sender: Party.Connection) {\n    // Broadcast the message to all connections in the room\n    this.room.broadcast(message);\n  }\n}\n\nChatServer satisfies Party.Worker;\n\n// Client\n\nconst room = new PartySocket({\n  host: PARTYKIT_HOST,\n  room: \"my-room\"\n});\n\nroom.addEventListener(\"message\", (event) => {\n  console.log(event.data);\n});\n\nroom.send(\"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: Connecting to PartyServer with PartySocket Client\nDESCRIPTION: Client-side code using PartySocket to establish a WebSocket connection to a PartyServer instance. Demonstrates how to specify the host, party (server name), and room for the connection.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyserver/README.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PartySocket } from \"partysocket\";\n\nconst socket = new PartySocket({\n  host: \"https://my-partyserver-app.threepointone.workers.dev\", // optional, defaults to window.location.host,\n  party: \"my-server\", // the server name. if you use routePartykitRequest, it automatically uses the kebab-cased version of the binding name (MyServer -> my-server)\n  room: \"my-room\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Rich Client for Party Protocol\nDESCRIPTION: HTML and JavaScript example showing how to implement a client-side application that connects to a PartyServer using the Party protocol. Demonstrates connection, sending messages, and handling server events.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rpc.md#2025-04-15_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/partyserver/client.js\"></script>\n\n<script>\n  const { party } = window.PartySocket\n  \n  // connect to a party channel\n  const socket = party('wss://my-app.fly.dev', 'my-room', {\n    // onopen\n    onopen: () => console.log('connected!'),\n    \n    // define message handlers\n    welcome: data => console.log('got welcome!', data),\n    'user-joined': data => console.log('user joined!', data)\n  })\n  \n  // send a message\n  socket.send('rename', { name: 'sunil' })\n  \n  // add more event handlers\n  socket.on('user-left', data => console.log('user left!', data))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring PartyServer with Advanced Options\nDESCRIPTION: Example showing the available configuration options for PartyServer. Demonstrates how to set up server with custom ports, headers, subprotocols, and authentication callbacks.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rpc.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = partyserver({\n  port: 3000, // optional, defaults to process.env.PORT || 3000\n  subprotocols: ['json'], // subprotocols to accept, defaults to []\n  authenticate: req => true, // optional auth function, return false to reject\n  onUpgrade: (req, socket, head) => {}, // optional callback for upgrade event (ws handshake)\n  headers: { // optional custom headers\n    'X-Custom-Header': 'value'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with Custom Hook\nDESCRIPTION: Example of a React component that uses the custom useCounter hook to display and manipulate a counter. Shows how to integrate the custom hook with UI elements.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Counter.js\n\nimport { useCounter } from './useCounter'\n\nexport function Counter() {\n  const { counter, increment, decrement } = useCounter()\n\n  return (\n    <div>\n      <h1>{counter}</h1>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useParty Hook in a React Component\nDESCRIPTION: Example of how to use the useParty hook to access the party context in a React component. It demonstrates submitting mutations and handling party state.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useParty } from '@partyserver/sdk'\n\nexport default function Counter() {\n  // get the party\n  const party = useParty()\n\n  async function onClick() {\n    // submit a mutation to the party\n    await party.mutate('increment')\n  }\n\n  return (\n    <div>\n      <h1>{party.state.counter}</h1>\n      <button onClick={onClick}>increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component with Party Server Integration\nDESCRIPTION: This snippet demonstrates how to create a React component that integrates with Party Server. It shows the basic setup including importing the usePartySocket hook and initializing a connection to the Party Server.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/auth.md#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// src/App.jsx \nimport { usePartySocket } from \"partykit/react\";\n\nexport default function App() {\n  // connect to a party\n  const socket = usePartySocket({\n    host: PARTYKIT_HOST, // e.g. \"localhost:1999\" or \"party.example.com\"\n    room: \"my-room\", // room name\n    id: \"user-1\", // connection id\n  });\n\n  return <div>Hello world!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Party Server with Vite and Express in JavaScript\nDESCRIPTION: This code sets up the Party Server using Vite and Express. It creates a Vite server instance, configures Express middleware, and handles both static and RSC requests. The server supports streaming React Server Components.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/ai-agents.md#2025-04-15_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createServer as createViteServer } from 'vite'\nimport express from 'express'\nimport { renderToPipeableStream } from 'react-dom/server'\nimport { createElement } from 'react'\nimport { resolve, dirname } from 'path'\nimport { fileURLToPath } from 'url'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport async function createServer() {\n  const app = express()\n  const vite = await createViteServer({\n    server: { middlewareMode: true },\n    appType: 'custom',\n  })\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res, next) => {\n    const url = req.originalUrl\n\n    try {\n      // 1. Read index.html\n      let template = '<!DOCTYPE html><html><head></head><body><div id=\"root\"></div></body></html>'\n\n      // 2. Apply Vite HTML transforms. This injects the Vite HMR client, and\n      //    also applies HTML transforms from Vite plugins, e.g. global preambles\n      //    from @vitejs/plugin-react\n      template = await vite.transformIndexHtml(url, template)\n\n      // 3. Load the server entry. vite.ssrLoadModule automatically transforms\n      //    your ESM source code to be usable in Node.js! There is no bundling\n      //    required, and provides efficient invalidation similar to HMR.\n      const { render } = await vite.ssrLoadModule('/src/entry-server.jsx')\n\n      // 4. render the app HTML. This assumes entry-server.js's exported `render`\n      //    function calls appropriate framework SSR APIs,\n      //    e.g. ReactDOMServer.renderToString()\n      const appHtml = await render(url)\n\n      // 5. Inject the app-rendered HTML into the template.\n      const html = template.replace(`<div id=\"root\"></div>`, `<div id=\"root\">${appHtml}</div>`)\n\n      // 6. Send the rendered HTML back.\n      res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n    } catch (e) {\n      // If an error is caught, let Vite fix the stack trace so it maps back to\n      // your actual source code.\n      vite.ssrFixStacktrace(e)\n      next(e)\n    }\n  })\n\n  return { app, vite }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Options Configuration\nDESCRIPTION: Example of configuring PartySocket with custom options including WebSocket constructor and connection parameters\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebSocket } from \"partysocket\";\nimport WS from \"ws\";\n\nconst options = {\n  WebSocket: WS, // custom WebSocket constructor\n  connectionTimeout: 1000,\n  maxRetries: 10\n};\nconst ws = new WebSocket(\"wss://my.site.com\", [], options);\n```\n\n----------------------------------------\n\nTITLE: Client-side PartySocket Implementation\nDESCRIPTION: Example of client-side implementation using PartySocket for connecting to the PubSub server and handling messages\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysub/README.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PartySocket } from \"partysocket\";\n\nconst ws = new PartySocket({\n  host: \"...\", // the host of the partyserver, defaults to window.location.host\n  party: \"pubsub\", // the name of the party, use the binding's lowercase form\n  room: \"default\", // the name of the room/channel\n  query: {\n    // by default, it subscribes to all topics\n    // but you can set it to specific topics\n    topics: [\n      \"topic-abc\", // a specific topic\n      \"prefix:*\" // a prefixed topic,\n    ]\n  }\n});\n\n// Listen to incoming messages\nclient.addEventListener(\"message\", (event) => {\n  console.log(event.topic, event.data);\n});\n\n// publish a message to the server\nws.send(JSON.stringify({ topic: \"topic-abc\", data: \"hello world\" }));\n\n// You can also POST a message to the server\nPartySocket.fetch(\n  {\n    host: window.location.host, // the host of the partyserver\n    party: \"pubsub\", // the name of the party, use the binding's lowercase form\n    room: \"default\" // the name of the room/channel\n  },\n  {\n    method: \"POST\",\n    body: JSON.stringify({ topic: \"topic-abc\", data: \"hello world\" })\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Example Party Server Counter Implementation\nDESCRIPTION: Example implementation of a simple counter server using the Party Server framework, handling connections and maintaining a count of connections.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/observability.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// server/counter.js\nmodule.exports = {\n  onConnect(room, conn) {\n    room.count = (room.count || 0) + 1\n    conn.send(JSON.stringify({ count: room.count }))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useParty Hook with TypeScript\nDESCRIPTION: Example of using the useParty hook with TypeScript type definitions. Shows how to properly type the state and mutation handlers for better type safety.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useParty } from '@partyserver/sdk'\nimport type { State } from './party'\n\nexport default function Counter() {\n  // use type inference for state\n  const party = useParty<State>()\n\n  async function onClick() {\n    // mutation is type-safe\n    await party.mutate('increment')\n  }\n\n  return (\n    <div>\n      <h1>{party.state.counter}</h1>\n      <button onClick={onClick}>increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server with Party Protocol Support\nDESCRIPTION: Example showing how to create a WebSocket server with Party protocol support, which enables communication with multiple clients. Demonstrates handling connections, registering with a lobby, and managing state.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rpc.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { partyserver } from 'partyserver'\n\nconst server = partyserver()\n\nserver.party({\n  onConnect(channel, socket) {\n    console.log(`${socket.id} connected to ${channel}!`)\n    \n    // broadcast to all other clients in this channel\n    socket.broadcast('user-joined', { id: socket.id })\n    \n    // send to just this client\n    socket.send('welcome', { message: 'hello!' })\n    \n    // share state with the lobby\n    socket.lobby.register('users', socket.id, { name: 'sunil' })\n    \n    // get some state\n    const users = socket.lobby.get('users')\n    \n    // on message from client\n    socket.on('message', (type, data) => {\n      if (type === 'rename') {\n        socket.lobby.register('users', socket.id, { name: data.name })\n      }\n    })\n    \n    // on close\n    socket.on('close', () => {\n      socket.lobby.unregister('users', socket.id)\n      socket.broadcast('user-left', { id: socket.id })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook for Party Server Integration\nDESCRIPTION: Implementation of a custom React hook that leverages the Party Server SDK. This hook manages a counter state and provides methods to increment and decrement it using party mutations.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// useCounter.js\n\nimport { useCallback } from 'react'\nimport { useParty } from '@partyserver/sdk'\n\nexport function useCounter() {\n  const party = useParty()\n\n  // get the counter from the state\n  const counter = party.state.counter ?? 0\n\n  // create methods to increment and decrement\n  const increment = useCallback(\n    () => party.mutate('increment'),\n    [party]\n  )\n  const decrement = useCallback(\n    () => party.mutate('decrement'),\n    [party]\n  )\n\n  return {\n    counter,\n    increment,\n    decrement,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PartyServer Connection in Client-Side JavaScript\nDESCRIPTION: This code demonstrates how to initialize a connection to a PartyServer instance, create a party connection, and handle reconnection events.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rate-limiting.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// initialize party\nconst party = Party.get('ws://your-party-server.com/party/:id');\n\n// listen for reconnect events\nparty.onReconnect(() => {\n  // do anything, e.g. get current state from the server\n});\n```\n\n----------------------------------------\n\nTITLE: Using PartySocket in React\nDESCRIPTION: Examples of using usePartySocket hook in React for various connection scenarios, including basic connection, game connection, document connection, and authenticated connection.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/README.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePartySocket } from \"partysocket/react\";\n\n// Basic connection\nconst socket = usePartySocket({ party: \"chat\", room: \"general\" });\n\n// game connection\nconst socket = usePartySocket({ party: \"game\", room: \"uuid\" });\n\n// document connection\nconst socket = usePartySocket({ party: \"document\", room: \"id\" });\n\n// With auth\nconst socket = usePartySocket({\n  party: \"chat\",\n  room: \"general\",\n  headers: { authorization: `Bearer ${token}` }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Client to Connect to PartyServer\nDESCRIPTION: Example of implementing a WebSocket client that connects to a PartyServer instance. Shows basic connection setup, message handling, and sending data to the server.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rpc.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst socket = new WebSocket('ws://localhost:3000')\n\nsocket.onopen = () => {\n  socket.send('hello!')\n}\n\nsocket.onmessage = message => {\n  console.log(message.data)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Party Connection and Event Listeners in JavaScript\nDESCRIPTION: This snippet shows how to set up an event listener for party messages using the 'onMessage' method, allowing the client to receive and handle messages from other participants.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rate-limiting.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// listen for messages\nparty.onMessage(message => {\n  // do something with the message\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Party Server Provider Implementation in React\nDESCRIPTION: Example showing how to implement the Party Server Provider in a React application. It sets up the connection to the Party Server and provides the party context to child components.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PartyServerProvider } from '@partyserver/sdk'\n\nexport default function App() {\n  return (\n    <PartyServerProvider\n      env=\"dev\"\n      socket=\"wss://dev.socket.partyserver.workers.dev/\"\n    >\n      <div>\n        <h1>🎈</h1>\n        <MyComponent />\n      </div>\n    </PartyServerProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Party Server in a React Component\nDESCRIPTION: Example React code showing how to import and use Party Server in a React component, demonstrating its integration with React applications.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client'\nimport { useState } from 'react'\n\nfunction App() {\n  let [count, setCount] = useState(0)\n  return (\n    <div\n      style={{\n        fontFamily: 'system-ui, sans-serif',\n        lineHeight: 1.8,\n      }}\n    >\n      <h1>Welcome to Party Server</h1>\n      <div>\n        <button onClick={() => setCount(count + 1)}>count: {count}</button>\n      </div>\n    </div>\n  )\n}\n\nlet root = createRoot(document.getElementById('root'))\nroot.render(<App />)\n```\n\n----------------------------------------\n\nTITLE: Implementing PartyServer with Hono\nDESCRIPTION: Example of setting up PartyServer middleware with Hono, including multiple server classes, basic setup, authentication, error handling, and custom routing.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/README.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { partyserverMiddleware } from \"hono-party\";\nimport { Server } from \"partyserver\";\n\n// Multiple party servers\nexport class Chat extends Server {}\nexport class Game extends Server {}\nexport class Document extends Server {}\n\n// Basic setup\nconst app = new Hono();\napp.use(\"*\", partyserverMiddleware());\n\n// or with authentication\napp.use(\n  \"*\",\n  partyserverMiddleware({\n    options: {\n      onBeforeConnect: async (req) => {\n        const token = req.headers.get(\"authorization\");\n        // validate token\n        if (!token) return new Response(\"Unauthorized\", { status: 401 });\n      }\n    }\n  })\n);\n\n// With error handling\napp.use(\n  \"*\",\n  partyserverMiddleware({ onError: (error) => console.error(error) })\n);\n\n// With custom routing\napp.use(\n  \"*\",\n  partyserverMiddleware({\n    options: {\n      prefix: \"/party\" // Handles /party/* routes only\n    }\n  })\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing RSC Middleware for Party Server in JavaScript\nDESCRIPTION: This code defines the RSC middleware for the Party Server. It handles RSC requests, processes them through Vite, and streams the response back to the client. The middleware supports both initial loads and subsequent client-side navigations.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/ai-agents.md#2025-04-15_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function rsc(vite) {\n  return async function rscMiddleware(req, res) {\n    // TODO use a real parser\n    let action = ''\n    if (req.headers['x-rsc-action']) {\n      action = JSON.parse(req.headers['x-rsc-action'])\n    }\n\n    const url = new URL(req.url, `http://${req.headers.host}`)\n    const rscPath = url.searchParams.get('rsc')\n    if (!rscPath) {\n      return res.status(400).end('RSC path missing')\n    }\n\n    let mod\n    try {\n      mod = await vite.ssrLoadModule(rscPath)\n    } catch (e) {\n      vite.ssrFixStacktrace(e)\n      return res.status(500).end(e.stack)\n    }\n\n    // TODO: Use proper module resolution\n    const root = mod.default || mod.Root || mod\n\n    if (!root) {\n      return res.status(500).end(`No default export in ${rscPath}`)\n    }\n\n    function onShellReady() {\n      res.writeHead(200, {\n        'Content-Type': 'application/json',\n        'Transfer-Encoding': 'chunked',\n        'X-Content-Type-Options': 'nosniff',\n      })\n      stream.pipe(res)\n    }\n\n    function onShellError(error) {\n      console.error(error)\n      res.statusCode = 500\n      res.setHeader('Content-Type', 'text/plain')\n      res.end('Server error')\n    }\n\n    const { pipe: stream } = renderToPipeableStream(\n      createElement(root, {\n        action: action || null,\n        url: url.pathname + url.search,\n      }),\n      {\n        onShellReady,\n        onShellError,\n      }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Party Configuration\nDESCRIPTION: TypeScript implementation for configuring Party Server types and handlers. Defines the State interface and handler functions for increment and decrement operations.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// party.ts\n\nimport { Party } from '@partyserver/sdk/server'\n\nexport interface State {\n  counter: number\n}\n\nconst party = new Party<State>()\n\n// initialize the state\nparty.init(() => ({\n  counter: 0,\n}))\n\n// define handlers for mutations\nparty.mutation('increment', ({ state }) => {\n  state.counter += 1\n})\n\nparty.mutation('decrement', ({ state }) => {\n  state.counter -= 1\n})\n\nexport default party\n```\n\n----------------------------------------\n\nTITLE: Configuring Party Server in package.json for React Development\nDESCRIPTION: This snippet shows how to configure the Party Server in the package.json file for a React development environment. It includes settings for the entry point, public directory, and various build options.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multiplayer.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"party\": {\n    \"entry\": \"src/entry-server.tsx\",\n    \"public\": \"public\",\n    \"build\": {\n      \"entry\": \"src/entry-client.tsx\",\n      \"outdir\": \"dist\",\n      \"minify\": true,\n      \"sourcemap\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Sync with React Hook in TypeScript\nDESCRIPTION: This snippet shows how to use the useSync hook from partysync/react to synchronize state on the client side. It includes an example of optimistic updates and sending actions to the server.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysync/README.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// client.tsx\nimport { useSync } from \"partysync/react\";\n\nimport type { TodoAction, TodoRecord } from \"./shared\";\n\n// in your component...\nconst [todos, sendAction] = useSync<TodoRecord, TodoAction>(\n  \"todos\",\n  socket, // your websocket\n  // optionally do an optimistic update\n  (todos, action) => {\n    switch (action.type) {\n      case \"create\": {\n        const { id, text, completed } = action.payload;\n        return [...todos, [id, text, completed, Date.now(), Date.now(), null]];\n      }\n      // ... etc\n    }\n  }\n);\n\n// call the action whenever\nfunction onClick() {\n  sendAction({\n    type: \"create\",\n    payload: { id: \"1\", text: \"hello\", completed: 0 }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example Jest Unit Test for Party Server\nDESCRIPTION: An example of a Jest test file that tests a simple counter implementation in Party Server, showing how to write unit tests for server-side functionality.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/observability.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// test/counter.test.js\nconst { onConnect } = require('../server/counter')\n\ntest('Counter increments correctly', () => {\n  const room = { count: 0 }\n  const conn = { send: jest.fn() }\n  \n  onConnect(room, conn)\n  \n  expect(room.count).toBe(1)\n  expect(conn.send).toHaveBeenCalledWith(JSON.stringify({ count: 1 }))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PartyTracks Client with WebRTC\nDESCRIPTION: Example client implementation showing how to set up local and remote video streams using PartyTracks and WebRTC. Demonstrates track handling, MediaStream setup, and cleanup.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partytracks/README.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// needed to smooth out cross browser behavior inconsistencies\nimport \"webrtc-adapter\";\n\nimport { PartyTracks, resilientTrack$ } from \"partytracks/client\";\nimport { of } from \"rxjs\";\n\nconst localVideo = document.querySelector(\"video.local-video\");\nconst remoteVideo = document.querySelector(\"video.remote-video\");\n\n// resilientTrack$ will follow a prioritized list of devices and\n// try them in order, checking track health and re-evaluating\n// when available devices change\nconst track$ = resilientTrack$({ kind: \"videoinput\" });\n\n// Subscribe so that we can receive updates if the track changes,\n// for example if a webcam is unplugged.\ntrack$.subscribe((track) => {\n  // Attach the webcam MediaStreamTrack to the \"local video\" for display\n  const localMediaStream = new MediaStream();\n  localMediaStream.addTrack(track);\n  localVideo.srcObject = localMediaStream;\n});\n\n// Instantiate PartyTracks\nconst partyTracks = new PartyTracks();\n\n// When pushing, you supply an Observable of a MediaStreamTrack, and you will\n// receive an Observable of the metadata needed for someone else to pull that\n// track. This metadata is a small POJO (Plain Old JavaScript Object) that can\n// be serialized and sent to another user (usually via websocket).\nconst pushedTrackMetadata$ = partyTracks.push(track$);\n// When pulling, you supply an Observable of the track metadata (from another\n// user), and you will receive an Observable of that pulled MediaStreamTrack.\nconst pulledTrack$ = partyTracks.pull(pushedTrackMetadata$);\n\n// Subscribing to the resulting Observable will trigger all of the WebRTC\n// negotiation and the Observable will emit the track when it is ready.\nconst subscription = pulledTrack$.subscribe((track) => {\n  // Attach the pulled MediaStreamTrack to the \"remote video\" for display\n  const remoteMediaStream = new MediaStream();\n  remoteMediaStream.addTrack(track);\n  remoteVideo.srcObject = remoteMediaStream;\n});\n\nsetTimeout(() => {\n  // After 20 seconds, let's clean up by unsubscribing. This will close\n  // the pulled track, and since our local demo is also pushing it will\n  // close the pushed track as well since there are no other subscribers.\n  subscription.unsubscribe();\n}, 20000);\n```\n\n----------------------------------------\n\nTITLE: React Integration with PartySocket\nDESCRIPTION: React component implementation using the usePartySocket hook for PubSub functionality\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysub/README.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePartySocket } from \"partysocket/react\";\n\nfunction App() {\n  usePartySocket({\n    party: \"pubsub\",\n    room: \"default\",\n    query: {\n      // by default, it subscribes to all topics\n      // but you can set it to specific topics\n      topics: [\n        \"topic-abc\", // a specific topic\n        \"prefix:*\" // a prefixed topic,\n      ]\n    },\n    onMessage: (event) => {\n      console.log(event.topic, event.data);\n    }\n  });\n\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Todo Records and Actions in TypeScript\nDESCRIPTION: This snippet defines the shape of todo records stored in the Durable Object database and the actions that can be performed on them. It includes types for the record structure and various action payloads.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysync/README.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// shared.ts\n\n// define the shape of the records that are stored in the Durable Object database\nexport type TodoRecord = [\n  // NOTE: _always_ add id\n  string, // id\n  string, // text\n  0 | 1, // completed\n  number, // created_at\n  number, // updated_at\n  // NOTE: _always_ add deleted_at\n  number | null // deleted_at\n];\n\n// define your actions\nexport type TodoAction =\n  | {\n      type: \"create\";\n      payload: {\n        id: string;\n        text: string;\n        completed: 0 | 1; // to match sqlite's idea of a boolean\n      };\n    }\n  | {\n      type: \"update\";\n      // ... etc\n    };\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Server with SyncServer in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the server using the SyncServer class from partysync. It includes methods for initializing the database and handling actions on todo items.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysync/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nimport { SyncServer } from \"partysync\";\n\nimport type { TodoAction, TodoRecord } from \"./shared\";\n\nexport class MyServer extends SyncServer<\n  Env,\n  { todos: [TodoRecord, TodoAction] }\n> {\n  onStart() {\n    // setup a database table for your records\n    this.ctx.storage.sql.exec(\n      `CREATE TABLE IF NOT EXISTS todos (\n      id TEXT PRIMARY KEY NOT NULL UNIQUE, \n      text TEXT NOT NULL, \n      completed INTEGER NOT NULL, \n      created_at INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP, \n      updated_at INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP,\n      deleted_at INTEGER DEFAULT NULL\n    )`\n    );\n  }\n  // setup a handler for actions\n  onAction(channel: \"todos\", action: TodoAction) {\n    switch (action.type) {\n      case \"create\": {\n        const { id, text, completed } = action.payload;\n        // return any changed records\n        return [\n          ...this.ctx.storage.sql\n            .exec(\n              \"INSERT INTO todos (id, text, completed) VALUES (?, ?, ?) RETURNING *\",\n              id,\n              text,\n              completed\n            )\n            .raw()\n        ] as TodoRecord[];\n      }\n      // etc\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Hibernation for PartyServer\nDESCRIPTION: Code example showing how to enable hibernation for a PartyServer by setting a static options property. This allows the server to hibernate when not in use and wake up when a new connection is established.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyserver/README.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyServer extends Server {\n  static options = {\n    hibernate: true\n  };\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Partyserver in JavaScript\nDESCRIPTION: This snippet defines a Vite plugin for Partyserver. It sets up various configurations including CSS modules, React refresh, and custom resolve options for handling different file types and imports.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/migrating-from-partykit.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function partyserver(options = {}) {\n  return {\n    name: 'partyserver',\n    config(config) {\n      // Enable CSS modules\n      config.css = config.css || {}\n      config.css.modules = config.css.modules || {}\n      config.css.modules.localsConvention = 'camelCaseOnly'\n\n      // Enable React refresh\n      config.plugins = config.plugins || []\n      config.plugins.push(reactRefresh())\n\n      // Set up resolve options\n      config.resolve = config.resolve || {}\n      config.resolve.extensions = [\n        '.js',\n        '.jsx',\n        '.ts',\n        '.tsx',\n        '.json',\n        '.mjs',\n      ]\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        react: 'preact/compat',\n        'react-dom': 'preact/compat',\n      }\n\n      // Set up esbuild options\n      config.esbuild = config.esbuild || {}\n      config.esbuild.jsxInject = `import React from 'react'`\n      config.esbuild.jsxFactory = 'React.createElement'\n      config.esbuild.jsxFragment = 'React.Fragment'\n\n      return config\n    },\n    // ... (additional configuration)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up YServer Backend\nDESCRIPTION: Basic setup for creating a Yjs backend server by extending YServer from y-partyserver\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/y-partyserver/README.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport { YServer as MyYServer } from \"y-partyserver\";\n\n// then setup wrangler.toml and a default fetch handler\n// like you would for PartyServer.\n```\n\n----------------------------------------\n\nTITLE: Configuring PartyTracks Server with Hono\nDESCRIPTION: Server-side setup for PartyTracks using Hono framework to proxy requests to Cloudflare Calls API. Includes type definitions and route handling.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partytracks/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { routePartyTracksRequest } from \"partytracks/server\";\n\ntype Bindings = {\n  CALLS_APP_ID: string;\n  CALLS_APP_TOKEN: string;\n};\n\nconst app = new Hono<{ Bindings: Bindings }>();\n\napp.all(\"/partytracks/*\", (c) =>\n  routePartyTracksRequest({\n    appId: c.env.CALLS_APP_ID,\n    token: c.env.CALLS_APP_TOKEN,\n    request: c.req.raw\n  }));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for TypeScript Node.js Testing\nDESCRIPTION: This configuration sets up Jest for testing a TypeScript Node.js project. It defines module name mapping for import resolution, configures transformations for TypeScript and JavaScript files, and sets up code coverage reporting parameters.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/how it works.md#2025-04-15_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\nmodule.exports = {\n  moduleNameMapper: {\n    '^@/(.*)$': '<rootDir>/src/$1',\n  },\n  transform: {\n    '^.+\\\\.tsx?$': ['ts-jest', { tsconfig: 'tsconfig.json' }],\n    '^.+\\\\.jsx?$': ['ts-jest', { useESM: true }],\n  },\n  testRegex: '(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$',\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n  collectCoverage: true,\n  collectCoverageFrom: [\n    'src/**/*.{ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/**/*.test.{ts,tsx}',\n  ],\n  coverageDirectory: 'coverage',\n  coverageReporters: ['json', 'lcov', 'text', 'clover'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Partyserver in package.json\nDESCRIPTION: Example configuration for Partyserver in the package.json file, specifying the entry point and additional options.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/chat.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"partyserver\": {\n    \"entry\": \"./src/index.js\",\n    \"options\": {\n      \"port\": 1234,\n      \"debug\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced YProvider Options\nDESCRIPTION: Shows advanced configuration options for YProvider including connection settings, WebSocket implementation, and sync intervals\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/y-partyserver/README.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new YProvider(\n  /* host */\n  \"localhost:8787\",\n  /* document/room name */\n  \"my-document-name\",\n  /* Yjs document instance */\n  yDoc,\n  {\n    /* whether to connect to the server immediately */\n    connect: false,\n    /* the party server path to connect to, defaults to \"main\" */\n    party: \"my-party\",\n    /* the path to the Yjs document on the server\n     * This replaces the default path of /parties/:party/:room.\n     */\n    prefix: \"/my/own/path\",\n    /* use your own Yjs awareness instance */\n    awareness: new awarenessProtocol.Awareness(yDoc),\n    /* query params to add to the websocket connection\n     * This can be an object or a function that returns an object\n     */\n    params: async () => ({\n      token: await getAuthToken()\n    }),\n    /* the WebSocket implementation to use\n     * This can be a polyfill or a custom implementation\n     */\n    WebSocketPolyfill: WebSocket,\n    /* the interval at which to resync the document\n     * This is set to -1 by default to disable resyncing by polling\n     */\n    resyncInterval: -1,\n    /* Maximum amount of time to wait before trying to reconnect\n     * (we try to reconnect using exponential backoff)\n     */\n    maxBackoffTimeout: 2500,\n\n    /* Disable cross-tab BroadcastChannel communication */\n    disableBc: false\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting Yjs Client Provider\nDESCRIPTION: Demonstrates how to connect a client to the Yjs server using YProvider with basic configuration\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/y-partyserver/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport YProvider from \"y-partyserver/provider\";\nimport * as Y from \"yjs\";\n\nconst yDoc = new Y.Doc();\n\nconst provider = new YProvider(\"localhost:8787\", \"my-document-name\", yDoc);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for PartyServer\nDESCRIPTION: Wrangler configuration that sets up the Durable Objects binding and migration for the PartyServer application. Required for deploying the server to Cloudflare Workers.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyserver/README.md#2025-04-15_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nname = \"my-partyserver-app\"\nmain = \"index.ts\"\n\n[[durable_objects.bindings]]\nname = \"MyServer\"\nclass_name = \"MyServer\"\n\n[[migrations]]\ntag = \"v1\" # Should be unique for each entry\nnew_classes = [\"MyServer\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring PubSub Server in Cloudflare Worker\nDESCRIPTION: Server-side setup for PubSub functionality including node configuration and request routing\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysub/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPubSubServer } from \"partysub/server\";\n\nconst { PubSubServer, routePubSubRequest } = createPubSubServer({\n  binding: \"PubSub\", // the name of the binding\n  nodes: /* number of nodes _PER :id_, default 1 */ 100,\n\n  locations: {\n    // optionally define locations, and weight them\n    // the weight determines how many nodes are spun up in that location\n    // possible values at https://developers.cloudflare.com/durable-objects/reference/data-location/#provide-a-location-hint\n    // example:\n    eu: 1,\n    wnam: 3\n    // If a user connects from one of these areas, they will\n    // be connected to a node in that location\n    // If a user connects from an area not listed here,\n    // they will be connected to a random node\n\n    // Note: location hints are best attempt, not guaranteed\n\n    // Note: In the future, we will autoscale servers\n    // so this configuration isn't needed anymore\n  },\n\n  // The below config doesn't work _yet_, but it's the goal\n  jurisdiction: \"eu\" /* optional, default undefined */\n  // Note: You CANNOT define a jurisdiction and locations at the same time\n});\n\nexport { PubSubServer };\n\n// setup your worker handler\nexport default {\n  async fetch(request, env) {\n    const pubSubResponse = await routePubSubRequest(request, env);\n    return pubSubResponse || new Response(\"Not found\", { status: 404 });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration for Durable Objects\nDESCRIPTION: TOML configuration for setting up Durable Objects bindings and migrations in wrangler.toml\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysub/README.md#2025-04-15_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[durable_objects.bindings]]\nname = \"PubSub\" # This MUST match the binding name in the PubSubServer config\nclass_name = \"PubSubServer\"\n\n[[migrations]]\ntag = \"v1\"\nnew_classes = [\"PubSubServer\"]\n```\n\n----------------------------------------\n\nTITLE: React Integration with useYProvider Hook\nDESCRIPTION: Example of using the React hook version of YProvider for integration with React applications\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/y-partyserver/README.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport useYProvider from \"y-partyserver/react\";\n\nfunction App() {\n  const provider = useYProvider({\n    host: \"localhost:8787\", // optional, defaults to window.location.host\n    room: \"my-document-name\",\n    party: \"my-party\", // optional, defaults to \"main\"\n    doc: yDoc, // optional!\n    options\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Partywhen Scheduler in Cloudflare Worker\nDESCRIPTION: This snippet demonstrates how to import and set up the Partywhen Scheduler in a Cloudflare Worker. It includes instructions for configuring the wrangler.toml file and accessing a scheduler instance.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partywhen/README.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scheduler } from \"partywhen\";\n\nexport { Scheduler };\n// also setup wrangler.toml to create a durable object binding\n// let's say you've done it this way:\n\n// [[durable_objects.bindings]]\n// name = \"SCHEDULER\"\n// class_name = \"Scheduler\"\n\nexport default {\n  fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    // access a scheduler instance\n    const id = env.SCHEDULER.idFromName(\"my-scheduler\");\n    const scheduler = env.SCHEDULER.get(id);\n    // now you can use the scheduler\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using PartyTracks React Utilities\nDESCRIPTION: React utility hooks for working with Observables in PartyTracks, including value conversion and event handling.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partytracks/README.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  useObservableAsValue,\n  useOnEmit,\n  useValueAsObservable\n} from \"partytracks/react\";\n\nfunction SomeComponent({ value }) {\n  // creates a stable observable that will\n  // emit when a new value is passed in\n  const value$ = useValueAsObservable(value);\n  // subscribes and gives you the latest value\n  // second arg is the default value if nothing\n  // has been emitted yet\n  const latestValue = useObservableAsValue(value$, \"default value\");\n  // calls the callback whenever a value\n  // is emitted\n  useOnEmit(value$, (v) => console.log(v));\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Cron Task with Durable Object Callback in Partywhen\nDESCRIPTION: This example demonstrates scheduling a cron task using Partywhen. The task is set to run every Friday at 6pm and calls a function on a Durable Object.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partywhen/README.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nscheduler.scheduleTask({\n  description: \"my-task\",\n  type: \"cron\",\n  cron: \"0 18 * * 5\",\n  payload: {\n    message: \"Hello, world!\"\n  },\n  callback: {\n    type: \"durable-object\",\n    namespace: \"MYDURABLE\",\n    name: \"some-id\",\n    function: \"myFunction\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Middleware for Party Server in TypeScript\nDESCRIPTION: A middleware function that logs request information including method, path, status code, and timing. It wraps the handler function and applies console logging before and after handling each request to provide diagnostic information during development.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/text-editors.md#2025-04-15_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Middleware } from './types';\n\nexport const debug: Middleware = (options) => (handler) => async (request, ...rest) => {\n  console.log(`> ${request.method} ${request.url}`);\n\n  const startTime = performance.now();\n  const response = await handler(request, ...rest);\n  const endTime = performance.now();\n\n  console.log(\n    `< ${request.method} ${request.url} ${response.status} ${(\n      endTime - startTime\n    ).toFixed(2)}ms`,\n  );\n\n  return response;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for PartyServer\nDESCRIPTION: Configuration example for wrangler.json, including durable object bindings and migrations for Chat, Game, and Document classes.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/README.md#2025-04-15_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n// wrangler.json\n{\n  \"durable_objects\": {\n    \"bindings\": [\n      { \"name\": \"Chat\", \"class_name\": \"Chat\" },\n      { \"name\": \"Game\", \"class_name\": \"Game\" },\n      { \"name\": \"Document\", \"class_name\": \"Document\" }\n    ]\n  },\n  \"migrations\": [{ \"tag\": \"v1\", \"new_classes\": [\"Chat\", \"Game\", \"Document\"] }]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing PartyServer with Environment Variables\nDESCRIPTION: Multiple environment variable examples for configuring PartyServer, including listening ports, database connection, and other settings.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPARTY_PORT=8080 # Port for the server to listen on\nPARTY_HOST=0.0.0.0 # Host for the server to listen on (0.0.0.0 = all interfaces)\nPARTY_DB_NAME=partyserver # Database name\nPARTY_DB_USER=postgres # Database user\nPARTY_DB_PASS=postgres # Database password\nPARTY_DB_HOST=localhost # Database host\nPARTY_DB_PORT=5432 # Database port\nPARTY_DB_SSL=true # Enable SSL for database connection\nPARTY_DEFAULT_ROOM_PERMISSIONS=\"{\\\"canRead\\\":true,\\\"canWrite\\\":true}\" # Default permissions for rooms\nPARTY_DISABLE_AUTHENTICATION=true # Disable authentication\nPARTY_DISABLE_ANONYMOUS_CONNECTIONS=true # Disable anonymous connections\nPARTY_DISABLE_RATE_LIMIT=true # Disable rate limiting\nPARTY_ALLOW_ORIGIN=* # CORS origin\nPARTY_REDIS_URL=redis://localhost:6379 # Redis URL\nPARTY_REDIS_PASSWORD=password # Redis password\nPARTY_REDIS_PREFIX=party: # Redis key prefix\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Development\nDESCRIPTION: Example of setting environment variables in a development environment using .env file or manual setting. Shows how to specify project ID, region, auth type, and application credentials for local development.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/alarms.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# for development\nPROJECT_ID=my-project\nPARTY_REGION=us-central1\nPARTY_AUTH_TYPE=gcp\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Implementation\nDESCRIPTION: Simple example showing how to create a WebSocket connection using PartySocket's WebSocket implementation\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebSocket } from \"partysocket\";\n\nconst ws = new WebSocket(\"wss://my.site.com\");\n\nws.addEventListener(\"open\", () => {\n  ws.send(\"hello!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Node.js\nDESCRIPTION: Example of setting environment variables in a Node.js application using both code and a .env file. Demonstrates setting up project ID, region, auth type, and application credentials.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/alarms.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// via code\nprocess.env.PROJECT_ID = 'my-project'\nprocess.env.PARTY_REGION = 'us-central1'\nprocess.env.PARTY_AUTH_TYPE = 'gcp'\nprocess.env.GOOGLE_APPLICATION_CREDENTIALS = '/path/to/key.json'\n\n// or via .env file\n// PROJECT_ID=my-project\n// PARTY_REGION=us-central1\n// PARTY_AUTH_TYPE=gcp\n// GOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json\n```\n\n----------------------------------------\n\nTITLE: Starting Party Server with Default Options\nDESCRIPTION: Basic command to start the party server pointing to the app directory.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/games.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npartyserver ./app\n```\n\n----------------------------------------\n\nTITLE: Party Server Environment Variables for React Development\nDESCRIPTION: This snippet shows the environment variables that can be used to configure the Party Server. These variables allow for setting the entry point, public directory, port, and various build options without modifying the package.json or using CLI arguments.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multiplayer.md#2025-04-15_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPARTYSERVER_ENTRY=src/entry-server.tsx\nPARTYSERVER_PUBLIC=public\nPARTYSERVER_PORT=1999\nPARTYSERVER_HOST=localhost\nPARTYSERVER_BUILD_ENTRY=src/entry-client.tsx\nPARTYSERVER_BUILD_OUTDIR=dist\nPARTYSERVER_BUILD_MINIFY=false\nPARTYSERVER_BUILD_SOURCEMAP=false\n```\n\n----------------------------------------\n\nTITLE: Protocol Configuration Examples\nDESCRIPTION: Demonstrations of different protocol configuration approaches including static and dynamic providers\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebSocket } from \"partysocket\";\n\nconst ws = new WebSocket(\"wss://your.site.com\", \"your protocol\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport WebSocket from 'partysocket`;\n\nconst protocols = ['p1', 'p2', ['p3.1', 'p3.2']];\nlet protocolsIndex = 0;\n\n// round robin protocols provider\nconst protocolsProvider = () => protocols[protocolsIndex++ % protocols.length];\n\nconst ws = new WebSocket('wss://your.site.com', protocolsProvider);\n```\n\n----------------------------------------\n\nTITLE: Party Server CLI Options for React Development\nDESCRIPTION: This snippet lists the command-line interface (CLI) options available for the Party Server. It includes options for specifying the entry point, public directory, port, and various build-related settings.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multiplayer.md#2025-04-15_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nparty [entry] [options]\n\n  --entry, -e       Entry point for server          [string] [default: \"src/entry-server.tsx\"]\n  --public, -p      Public directory                [string] [default: \"public\"]\n  --port            Port to run server on           [number] [default: 1999]\n  --host            Host to run server on           [string] [default: \"localhost\"]\n  --build.entry     Entry point for client build    [string] [default: \"src/entry-client.tsx\"]\n  --build.outdir    Output directory for build      [string] [default: \"dist\"]\n  --build.minify    Minify output                   [boolean] [default: false]\n  --build.sourcemap Generate sourcemaps              [boolean] [default: false]\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Task with Webhook Callback in Partywhen\nDESCRIPTION: This example shows how to schedule a delayed task using Partywhen. The task is set to run after 60 seconds and calls a webhook with a payload.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partywhen/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nscheduler.scheduleTask({\n  description: \"my-task\",\n  type: \"delayed\",\n  delayInSeconds: 60,\n  payload: {\n    message: \"Hello, world!\"\n  },\n  callback: {\n    type: \"webhook\",\n    url: \"https://example.com/webhook\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: PartyKit Integration Setup\nDESCRIPTION: Example showing PartySocket configuration with PartyKit, including optional node.js setup and connection property updates\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PartySocket from \"partysocket\";\n\n// optional: only needed if creating using inside node.js. Run `npm install ws`, and then add:\n// import WS from \"ws\";\n\nconst ws = new PartySocket({\n  host: \"project.name.partykit.dev\", // or localhost:1999 in dev\n  room: \"my-room\",\n  // add an optional id to identify the client\n  // if not provided, a random id will be generated\n  id: \"some-connection-id\"\n  // optional: if used from node.js, you need to pass the WebSocket polyfill imported from `ws`\n  // WebSocket: WS\n});\n\n// optionally, update the properties of the connection\n// (e.g. to change the host or room)\nws.updateProperties({\n  host: \"another-project.username.partykit.dev\",\n  room: \"my-new-room\"\n});\n\nws.reconnect(); // make sure to call reconnect() after updating the properties\n```\n\n----------------------------------------\n\nTITLE: Scheduling Task at Specific Date with Service Callback in Partywhen\nDESCRIPTION: This example shows how to schedule a task for a specific date and time using Partywhen. The task calls a function on a service binding when executed.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partywhen/README.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nscheduler.scheduleTask({\n  description: \"my-task\",\n  type: \"scheduled\",\n  time: new Date(\"2024-01-01T12:00:00Z\"),\n  payload: {\n    message: \"Hello, world!\"\n  },\n  callback: {\n    type: \"service\",\n    service: \"MYSERVICE\",\n    function: \"myFunction\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Provider Implementation\nDESCRIPTION: Examples of implementing dynamic URL providers including round-robin and async token-based approaches\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebSocket } from \"partysocket\";\n\nconst urls = [\n  \"wss://my.site.com\",\n  \"wss://your.site.com\",\n  \"wss://their.site.com\"\n];\nlet urlIndex = 0;\n\n// round robin url provider\nconst urlProvider = () => urls[urlIndex++ % urls.length];\n\nconst ws = new WebSocket(urlProvider);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebSocket } from \"partysocket\";\n\n// async url provider\nconst urlProvider = async () => {\n  const token = await getSessionToken();\n  return `wss://my.site.com/${token}`;\n};\n\nconst ws = new WebSocket(urlProvider);\n```\n\n----------------------------------------\n\nTITLE: Importing npm Packages with Party Server\nDESCRIPTION: Example of importing npm packages in a React component with Party Server, which handles module resolution from node_modules.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { motion } from 'framer-motion'\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistence with YServer\nDESCRIPTION: Shows how to implement persistence in YServer using onLoad and onSave handlers with configurable callback options\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/y-partyserver/README.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nimport { YServer } from \"y-partyserver\";\n\nexport class MyDocument extends YServer {\n  /* control how often the onSave handler\n   * is called with these options */\n  static callbackOptions = {\n    // all of these are optional\n    debounceWait: /* number, default = */ 2000,\n    debounceMaxWait: /* number, default = */ 10000,\n    timeout: /* number, default = */ 5000\n  };\n\n  async onLoad() {\n    // load a document from a database, or some remote resource\n    // and apply it on to the Yjs document instance at `this.document`\n    const content = (await fetchDataFromExternalService(\n      this.name\n    )) as Uint8Array;\n    if (content) {\n      Y.applyUpdate(this.document, content);\n    }\n    return;\n  }\n\n  async onSave() {\n    // called every few seconds after edits, and when the room empties\n    // you can use this to write to a database or some external storage\n\n    await sendDataToExternalService(\n      this.name,\n      Y.encodeStateAsUpdate(this.document) satisfies Uint8Array\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External CSS in React with Party Server\nDESCRIPTION: Code snippet showing how to import external CSS files in a React component when using Party Server, which handles the module resolution.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css'\n```\n\n----------------------------------------\n\nTITLE: Example of Live Party Server Testing\nDESCRIPTION: An example demonstrating how to test the Party Server in a live environment by connecting to a running server and asserting on the expected behavior.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/observability.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// test/live.test.js\nconst { Party } = require('partykit/client')\n\ntest('Live counter works', async () => {\n  const party = new Party('counter', 'test-room')\n  \n  let result\n  party.onMessage(msg => {\n    result = JSON.parse(msg)\n  })\n  \n  await party.connect()\n  \n  // Wait for message\n  await new Promise(resolve => setTimeout(resolve, 100))\n  \n  expect(result.count).toBeGreaterThan(0)\n  \n  party.disconnect()\n})\n```\n\n----------------------------------------\n\nTITLE: Types and Interface Definitions\nDESCRIPTION: TypeScript definitions for options configuration and API methods\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  WebSocket?: any; // WebSocket constructor, if none provided, defaults to global WebSocket\n  maxReconnectionDelay?: number; // max delay in ms between reconnections\n  minReconnectionDelay?: number; // min delay in ms between reconnections\n  reconnectionDelayGrowFactor?: number; // how fast the reconnection delay grows\n  minUptime?: number; // min time in ms to consider connection as stable\n  connectionTimeout?: number; // retry connect if not connected after this time, in ms\n  maxRetries?: number; // maximum number of retries\n  maxEnqueuedMessages?: number; // maximum number of messages to buffer until reconnection\n  startClosed?: boolean; // start websocket in CLOSED state, call `.reconnect()` to connect\n  debug?: boolean; // enables debug output\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(url: UrlProvider, protocols?: ProtocolsProvider, options?: Options)\n\nclose(code?: number, reason?: string)\nreconnect(code?: number, reason?: string)\n\nsend(data: string | ArrayBuffer | Blob | ArrayBufferView)\n\naddEventListener(type: 'open' | 'close' | 'message' | 'error', listener: EventListener)\nremoveEventListener(type:  'open' | 'close' | 'message' | 'error', listener: EventListener)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Production\nDESCRIPTION: Example of setting environment variables in a production environment (Google Cloud Platform). Shows minimal configuration needed when running on GCP infrastructure.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/alarms.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# for production (on GCP)\nPROJECT_ID=my-project\nPARTY_REGION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Importing and using Party Server in JavaScript\nDESCRIPTION: Example of how to import and use Party Server programmatically in a JavaScript file.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/composition.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport party from 'partyserver'\n\nparty({\n  port: 1234,\n  dir: './src'\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in PartyServer\nDESCRIPTION: JavaScript code showing how to enable a feature flag for testing a new implementation.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.PARTY_FF_YOUR_FEATURE = true\n```\n\n----------------------------------------\n\nTITLE: Importing Party Server in JavaScript\nDESCRIPTION: Code snippet showing how to import and use party server programmatically in a JavaScript file.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/games.md#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'partyserver'\n\nconst server = createServer({\n  dir: './app',\n  port: 3000\n})\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Entry Points for Party Server\nDESCRIPTION: Command showing how to specify custom entry points for the server to use, allowing for serving specific files in a project.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @partyserver/dev src/index.tsx src/about.tsx\n```\n\n----------------------------------------\n\nTITLE: Starting Party Server with Default Configuration\nDESCRIPTION: Basic command to start Party Server which will serve React applications with hot module reloading on port 1234.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @partyserver/dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ngrok with Specific Configuration\nDESCRIPTION: Command to run ngrok with a specific configuration file and domain, allowing for consistent URLs during development.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/debugging.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http --domain=your-ngrok-domain.ngrok-free.app --config=your-ngrok.yml 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Party Server Port with Environment Variable\nDESCRIPTION: Setting a custom port using environment variables before starting the Party Server, useful for avoiding port conflicts.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPORT=4321 npx @partyserver/dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Party Server with custom options\nDESCRIPTION: Example of running Party Server with custom port and directory options.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/composition.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nparty --port 1234 --dir ./src\n```\n\n----------------------------------------\n\nTITLE: Starting Party Server with Custom Port\nDESCRIPTION: Command to start party server with a custom port option using the -p flag.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/games.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npartyserver ./app -p 3001\n```\n\n----------------------------------------\n\nTITLE: Running Partyserver\nDESCRIPTION: Command to start Partyserver in the current directory, serving files and providing fast refresh functionality.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/chat.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npartyserver\n```\n\n----------------------------------------\n\nTITLE: Installing Party Server via yarn\nDESCRIPTION: Command to install party server globally using yarn package manager.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/games.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add partyserver\n```\n\n----------------------------------------\n\nTITLE: Starting PartyServer in Development Mode\nDESCRIPTION: Command to start the PartyServer in development mode with automatic reloading.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing PartyServer Library via npm\nDESCRIPTION: Command to install PartyServer using npm package manager. This is the recommended way to add the library to your project.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/rpc.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i partyserver\n```\n\n----------------------------------------\n\nTITLE: Running Party Server with default options\nDESCRIPTION: Basic command to start Party Server in the current directory with default settings.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/composition.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nparty\n```\n\n----------------------------------------\n\nTITLE: Installing Partyserver via npm\nDESCRIPTION: Command to install Partyserver globally using npm package manager.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/chat.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g partyserver\n```\n\n----------------------------------------\n\nTITLE: Installing Party Server SDK with npm\nDESCRIPTION: Command to install the Party Server SDK using npm package manager.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/multi-parties.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @partyserver/sdk\n```\n\n----------------------------------------\n\nTITLE: Installing PartyServer with NPM\nDESCRIPTION: Command to install the PartyServer package using npm package manager.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyserver/README.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install partyserver\n```\n\n----------------------------------------\n\nTITLE: Installing Party Server via npm\nDESCRIPTION: Command to install Party Server globally using npm, making the CLI tool available system-wide.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/presence.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @partyserver/dev\n```\n\n----------------------------------------\n\nTITLE: Showing Party Server Help Information\nDESCRIPTION: Command to display the help information for party server, showing available options and their descriptions.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/games.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npartyserver --help\n```\n\n----------------------------------------\n\nTITLE: Installing Party Server via npm\nDESCRIPTION: Command to install party server globally using npm package manager.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/games.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g partyserver\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for PartyServer\nDESCRIPTION: Command to install the required development dependencies using npm.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Index List\nDESCRIPTION: A markdown formatted list of documentation sections with links to their respective pages.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/_index.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [quickstart](quickstart.md)\n- [how it works](how-it-works.md)\n- [routing](routing.md)\n- [scaling](scaling.md)\n- [composition](composition.md)\n- [configuration](configuration.md)\n- [multiplayer](multiplayer.md)\n- [full stack](full-stack.md)\n- [more on durable objects](durable-objects.md)\n- [alarms](alarms.md)\n- [auth](auth.md)\n- [debugging](debugging.md)\n- [observability](observability.md)\n- [testing](testing.md)\n- [presence](presence.md)\n- [storage](storage.md)\n- [rate limiting](rate-limiting.md)\n- [rpc](rpc.md)\n- [multi party](multi-party.md)\n- [games](games.md)\n- [text editors](text-editors.md)\n- [chat](chat.md)\n- [ai agents](ai-agents.md)\n- [pubsub](pubsub.md)\n- [migrating from partykit](migrating-from-partykit.md)\n```\n\n----------------------------------------\n\nTITLE: Installing Party Server via npm\nDESCRIPTION: Command to install Party Server globally using npm package manager.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/composition.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g partyserver\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Party Server Testing\nDESCRIPTION: Commands for installing the required dependencies for testing the Party Server, including both development dependencies (jest and concurrently) and the partykit package.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/observability.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D jest concurrently\nnpm i partykit\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.0.2\nDESCRIPTION: Documents patch changes and dependency updates for version 0.0.2, referencing specific commit hashes and version bumps for partyserver dependency.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/fixtures/tldraw/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [[`c41057b`](https://github.com/threepointone/partyserver/commit/c41057ba5c738496bc7e2a4968357f1f5b65707b), [`b3701a5`](https://github.com/threepointone/partyserver/commit/b3701a5f5eee278c96587d9e29e42992806733ac)]]:\n  - partyserver@0.0.66\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jest Test Configuration in package.json\nDESCRIPTION: Configuration in package.json for running Jest tests, including script definitions for running tests, starting the server, and running both concurrently.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/observability.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"start\": \"partykit dev\",\n    \"dev\": \"concurrently \\\"npm start\\\" \\\"npm test\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.0.1\nDESCRIPTION: Documents patch changes and dependency updates for version 0.0.1, referencing specific commit hash and version bump for partyserver dependency.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/fixtures/tldraw/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [[`3e56cce`](https://github.com/threepointone/partyserver/commit/3e56cceca2c253d7b4368299e018b73af6deb42b)]]:\n  - partyserver@0.0.65\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database and Running Tests for PartyServer\nDESCRIPTION: Command to run the database setup and execute tests in development mode.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev:test\n```\n\n----------------------------------------\n\nTITLE: Installing PartySocket via NPM\nDESCRIPTION: Command to install the PartySocket package using npm package manager\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysocket/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install partysocket\n```\n\n----------------------------------------\n\nTITLE: Running Tests for PartyServer\nDESCRIPTION: Command to execute the test suite for PartyServer.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Hono-Party and Dependencies\nDESCRIPTION: Command to install hono-party, hono, and partyserver packages using npm.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hono-party hono partyserver\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch for PartyServer Development\nDESCRIPTION: Instructions for creating a feature branch for development, including naming convention and origin tracking.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/pubsub.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\ngit push -u origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Installing PartySub Dependencies\nDESCRIPTION: Command to install the required npm packages for using PartySub with PartyServer\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysub/README.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install partyserver partysub partysocket\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok Tunnel for Local Development\nDESCRIPTION: Command to create an ngrok tunnel to a local server running on port 3000, making it accessible over the internet for testing.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/docs/guides/debugging.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Markdown formatted changelog entries tracking version changes, pull requests, and commit references for the partyserver project.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyhard/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# partyhard\n\n## 0.0.3\n\n### Patch Changes\n\n- [#161](https://github.com/threepointone/partyserver/pull/161) [`c73b724`](https://github.com/threepointone/partyserver/commit/c73b724685581fe381bcb34d5944e9d4bfa1b17a) Thanks [@joelhooks](https://github.com/joelhooks)! - feat(docs): spruce up readmes\n\n## 0.0.2\n\n### Patch Changes\n\n- [`84436f6`](https://github.com/threepointone/partyserver/commit/84436f66104e9c8e67520bfa15418aa329d98aeb) Thanks [@threepointone](https://github.com/threepointone)! - stubs\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Markdown Documentation\nDESCRIPTION: Markdown formatted changelog entries documenting various patch changes, dependency updates, and build triggers for y-partyserver package versions 0.0.2 through current.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/y-partyserver/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`5b91153`](https://github.com/threepointone/partyserver/commit/5b91153bceef64079eb5e3d86900fa916fbf2cf5) Thanks [@threepointone](https://github.com/threepointone)! - try another release\n\n- Updated dependencies [[`5b91153`](https://github.com/threepointone/partyserver/commit/5b91153bceef64079eb5e3d86900fa916fbf2cf5)]:\n  - partyserver@0.0.37\n\n## 0.0.5\n\n### Patch Changes\n\n- [`53b8d67`](https://github.com/threepointone/partyserver/commit/53b8d671dec97143e8011a4c1fe2266e7b0e3e8e) Thanks [@threepointone](https://github.com/threepointone)! - trigger a build\n\n## 0.0.4\n\n### Patch Changes\n\n- [`eb347bc`](https://github.com/threepointone/partyserver/commit/eb347bc1da9bf4c1a6499b716ab4b33050afec00) Thanks [@threepointone](https://github.com/threepointone)! - trigger a build\n\n## 0.0.3\n\n### Patch Changes\n\n- [`de8500e`](https://github.com/threepointone/partyserver/commit/de8500e4287d434ef07509ab6dbd56512626d73d) Thanks [@threepointone](https://github.com/threepointone)! - build y-partyserver and publish it\n\n## 0.0.2\n\n### Patch Changes\n\n- [`ecec09d`](https://github.com/threepointone/partyserver/commit/ecec09dc329eeeb8789c969135812f7d55e9b8cb) Thanks [@threepointone](https://github.com/threepointone)! - use ts for workflow scripts, add y-partyserver to version-script\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.7\nDESCRIPTION: Documents dependency updates with references to specific commits\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.7\n\n### Patch Changes\n\n- Updated dependencies [[`c41057b`](https://github.com/threepointone/partyserver/commit/c41057ba5c738496bc7e2a4968357f1f5b65707b), [`b3701a5`](https://github.com/threepointone/partyserver/commit/b3701a5f5eee278c96587d9e29e42992806733ac)]:\n  - partyserver@0.0.66\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.0.3\nDESCRIPTION: Documents enhancement to package documentation via PR #161\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysession/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.3\n\n### Patch Changes\n\n- [#161](https://github.com/threepointone/partyserver/pull/161) [`c73b724`](https://github.com/threepointone/partyserver/commit/c73b724685581fe381bcb34d5944e9d4bfa1b17a) Thanks [@joelhooks](https://github.com/joelhooks)! - feat(docs): spruce up readmes\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.5\nDESCRIPTION: Documents updates to dependencies and implementation of Vite for fixtures\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.5\n\n### Patch Changes\n\n- [`a240942`](https://github.com/threepointone/partyserver/commit/a240942d20540d70fc0076edb779302e6d621c65) Thanks [@threepointone](https://github.com/threepointone)! - update deps, use vite for one fixture\n\n- Updated dependencies [[`a240942`](https://github.com/threepointone/partyserver/commit/a240942d20540d70fc0076edb779302e6d621c65)]:\n  - partyserver@0.0.64\n```\n\n----------------------------------------\n\nTITLE: Referencing GenServer in Elixir\nDESCRIPTION: This snippet provides a link to the Elixir documentation for GenServer, which is a behaviour module for implementing the server of a client-server relation. It's used to illustrate the inspiration for Durable Objects.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partyserver/README.md#2025-04-15_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[GenServer](https://hexdocs.pm/elixir/1.12/GenServer.html)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog for @partyserver/fixture-todo-sync\nDESCRIPTION: A markdown changelog document showing version history for the @partyserver/fixture-todo-sync package, including version 0.0.2 and 0.0.1 with their respective dependency updates to partyserver.\nSOURCE: https://github.com/threepointone/partyserver/blob/main/fixtures/todo-sync/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @partyserver/fixture-todo-sync\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [[`c41057b`](https://github.com/threepointone/partyserver/commit/c41057ba5c738496bc7e2a4968357f1f5b65707b), [`b3701a5`](https://github.com/threepointone/partyserver/commit/b3701a5f5eee278c96587d9e29e42992806733ac)]]:\n  - partyserver@0.0.66\n\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [[`3e56cce`](https://github.com/threepointone/partyserver/commit/3e56cceca2c253d7b4368299e018b73af6deb42b)]]:\n  - partyserver@0.0.65\n```\n\n----------------------------------------\n\nTITLE: Initial Release Changelog Entries\nDESCRIPTION: Documents the initial releases including package creation and readme improvements\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.4\n\n### Patch Changes\n\n- [`31fd65a`](https://github.com/threepointone/partyserver/commit/31fd65ad4239bf02a564d0fd2759b4bdd8529ac4) Thanks [@threepointone](https://github.com/threepointone)! - again\n\n## 0.0.3\n\n### Patch Changes\n\n- [`d27636b`](https://github.com/threepointone/partyserver/commit/d27636b857e337faa7f66f3f8f33cdb40ca99bba) Thanks [@threepointone](https://github.com/threepointone)! - hono-party: better readme\n\n## 0.0.2\n\n### Patch Changes\n\n- [#157](https://github.com/threepointone/partyserver/pull/157) [`63258e3`](https://github.com/threepointone/partyserver/commit/63258e3d14fe17cbc51f479b6021704469c05419) Thanks [@aulneau](https://github.com/aulneau)! - Add new Hono middleware package for PartyKit/PartyServer integration. Allows for easily exposing many PartyKit servers within a single Hono app.\n\n- Updated dependencies [[`7710635`](https://github.com/threepointone/partyserver/commit/7710635d7fd0ca68047d966e0d1640a9fd3c09bc)]:\n  - partyserver@0.0.63\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.6\nDESCRIPTION: Documents dependency updates and general package updates\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/hono-party/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.6\n\n### Patch Changes\n\n- [#181](https://github.com/threepointone/partyserver/pull/181) [`3e56cce`](https://github.com/threepointone/partyserver/commit/3e56cceca2c253d7b4368299e018b73af6deb42b) Thanks [@threepointone](https://github.com/threepointone)! - update dependencies\n\n- Updated dependencies [[`3e56cce`](https://github.com/threepointone/partyserver/commit/3e56cceca2c253d7b4368299e018b73af6deb42b)]:\n  - partyserver@0.0.65\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.0.2\nDESCRIPTION: Documents implementation of stubs in the package\nSOURCE: https://github.com/threepointone/partyserver/blob/main/packages/partysession/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- [`1da2079`](https://github.com/threepointone/partyserver/commit/1da2079d49468b0fb5d5725e748076b6c66e7ca8) Thanks [@threepointone](https://github.com/threepointone)! - stubs\n```"
  }
]