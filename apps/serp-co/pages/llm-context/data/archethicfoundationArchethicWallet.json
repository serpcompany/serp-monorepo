[
  {
    "owner": "archethic-foundation",
    "repo": "archethic-wallet",
    "content": "TITLE: Running Flutter Application\nDESCRIPTION: This snippet shows how to run the Flutter application using the command `flutter run`.  This command builds and runs the application on a connected device or emulator. It's the standard command for launching Flutter applications during development.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Build Linux App with Flutter\nDESCRIPTION: These commands build the Linux version of the Flutter application and create an AppImage package. Requires Flutter, `appimagetool`, and setting the `PATH` environment variable. The `export` command adds the `appimagetool` to the system's `PATH`.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nflutter build linux\nexport PATH=$PATH:/home/xxx/archethic-wallet/linux/appimage/appimagetool\nappimagetool-x86_64.AppImage linux/appimage/AppDir/ build/linux/archethic_wallet.AppImage\n```\n\n----------------------------------------\n\nTITLE: Generating Icon Font and Dart Class using icon_font_generator\nDESCRIPTION: This command utilizes the `icon_font_generator` tool to create a TTF font file (`assets/fonts/ui_icons.ttf`) and a corresponding Dart class (`lib/ui/widgets/components/icons.dart`). It reads SVG icons from the `assets/icons/menu` directory and names the generated class `UiIcons`.  It requires the `icon_font_generator` tool to be installed and accessible in the system's PATH. The output Dart file provides a way to use the generated icons within the Flutter application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/update_icons.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nicon_font_generator --from=assets/icons/menu --class-name=UiIcons --out-font=assets/fonts/ui_icons.ttf --out-flutter=lib/ui/widgets/components/icons.dart\n```\n\n----------------------------------------\n\nTITLE: Build Android APK with Flutter\nDESCRIPTION: This command builds an Android APK, splitting it per ABI to optimize for different architectures. Requires Flutter to be installed. The `--split-per-abi` flag ensures the APK is optimized for different Android device architectures.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nflutter build apk --split-per-abi\n```\n\n----------------------------------------\n\nTITLE: Riverpod Generator Command\nDESCRIPTION: This command starts the Riverpod code generator to automatically create boilerplate code for Riverpod providers. It requires the `riverpod_generator` package to be installed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrun build_runner watch\n```\n\n----------------------------------------\n\nTITLE: Build Windows App with Flutter and Create MSIX Package\nDESCRIPTION: These commands build the Windows version of the Flutter application and then create an MSIX package. The first `msix:create` command uses a certificate and password. The second command creates the package without certificate. Requires Flutter and the `msix` Flutter package to be installed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter build windows\nflutter pub run msix:create -c windows/certificates/archethic_wallet.pfx -p password12345\nflutter pub run msix:create\n```\n\n----------------------------------------\n\nTITLE: Icon Font Generator Command\nDESCRIPTION: This command converts SVG icons from the `assets/fonts` folder into a TTF font and a Dart file with icon definitions. It relies on the `icon_font_generator` package and creates `ui_icons.ttf` and `lib/ui/widgets/components/icons.dart` files.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nicon_font_generator --from=assets/icons/menu --class-name=UiIcons --out-font=assets/fonts/ui_icons.ttf --out-flutter=lib/ui/widgets/components/icons.dart\n```\n\n----------------------------------------\n\nTITLE: Build iOS App with Flutter and Deploy using Fastlane\nDESCRIPTION: This snippet builds the iOS version of the Flutter application and then uses Fastlane to deploy it.  Requires Flutter and Fastlane to be installed and configured. The `cd ios` command navigates to the iOS directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd ios\nflutter build ios\nfastlane beta\n```\n\n----------------------------------------\n\nTITLE: Building Flutter project with build_runner\nDESCRIPTION: This command builds a Flutter project using the `build_runner` package. It executes `build_runner build` with the `--delete-conflicting-outputs` flag, which ensures that any previously generated files that conflict with the new build are deleted. This helps to prevent build errors and ensures a clean build process. Requires Flutter SDK and build_runner package to be installed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/update_g_cmd.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter packages pub run build_runner build --delete-conflicting-outputs\n```\n\n----------------------------------------\n\nTITLE: Generating CRT on Windows using OpenSSL\nDESCRIPTION: This command generates a CRT certificate file using OpenSSL on Windows. It uses the private key 'archethic_wallet.key' and the CSR file 'archethic_wallet.csr' as input. The certificate is valid for 365 days and the output file is named 'archethic_wallet.crt'.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_5\n\nLANGUAGE: Batch Script\nCODE:\n```\nopenssl x509 -in archethic_wallet.csr -out archethic_wallet.crt -req -signkey archethic_wallet.key -days 365\n```\n\n----------------------------------------\n\nTITLE: Android Google Play Release with Fastlane\nDESCRIPTION: This command publishes a new release build to the Google Play Store using fastlane. It automates the process of building, signing, and uploading the application to the store.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_5\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane android release\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: This command ensures the latest version of Xcode command line tools is installed, a prerequisite for using fastlane. It's necessary for building and deploying applications for Apple platforms.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: iOS App Store Release with Fastlane\nDESCRIPTION: This command pushes a new release build to the iOS App Store using fastlane. It automates building, signing, and submitting the application to the App Store.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane ios release\n```\n\n----------------------------------------\n\nTITLE: Flutter Project Maintenance Commands\nDESCRIPTION: These commands perform common maintenance tasks on a Flutter project, including checking outdated dependencies, running dependency validation, generating localization files, fetching dependencies, formatting code, and creating a native splash screen.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nflutter pub outdated\nflutter pub run dependency_validator\nflutter gen-l10n\nflutter pub get\ndart format lib packages\ndart fix --dry-run\nflutter pub run flutter_native_splash:create --path=flutter_native_splash.yaml\n```\n\n----------------------------------------\n\nTITLE: Flutter Package Installation\nDESCRIPTION: This snippet shows how to install Flutter packages for the project.  Running `flutter pub get` in the project directory downloads all dependencies specified in the `pubspec.yaml` file. This is a necessary step before building and running the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Mac App Store Release with Fastlane\nDESCRIPTION: This command pushes a new release build to the Mac App Store using fastlane. It automates the process of building, signing, and submitting the application to the store.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane mac release\n```\n\n----------------------------------------\n\nTITLE: iOS TestFlight Release with Fastlane\nDESCRIPTION: This command pushes a new release build to TestFlight for beta testing of the iOS application. It helps in distributing builds to testers for pre-release feedback.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_4\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane ios beta\n```\n\n----------------------------------------\n\nTITLE: Mac TestFlight Release with Fastlane\nDESCRIPTION: This command pushes a new release build to TestFlight for beta testing of the Mac application. It simplifies the process of distributing builds to testers before a public release.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane mac beta\n```\n\n----------------------------------------\n\nTITLE: Flutter Internationalization Usage\nDESCRIPTION: This snippet demonstrates how to retrieve localized labels in Flutter widgets using the `AppLocalizations` class. It requires the `flutter_localizations` dependency and the presence of `lib/intl_en.arb` and `lib/intl_fr.arb` files for English and French translations, respectively.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal localizations = AppLocalizations.of(context)!;\n```\n\n----------------------------------------\n\nTITLE: Using Native Commands in Tests - Dart\nDESCRIPTION: This code demonstrates how to use native commands within Patrol tests written in Dart. It shows how to interact with the native environment, such as pressing the home button and opening the app, and then assert the state of the UI elements.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/integration_test/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  patrolTest(\n    'counter state is the same after going to Home and switching apps',\n    nativeAutomation: true,\n    nativeAutomatorConfig: NativeAutomatorConfig(\n      packageName: 'pl.leancode.patrol.example',\n      bundleId: 'pl.leancode.patrol.Example',\n    ),\n    ($) async {\n      await $.pumpWidget(ExampleApp());\n\n      await $(FloatingActionButton).tap();\n      expect($(#counterText).text, '1');\n\n      await $.native.pressHome();\n      await $.native.openApp();\n\n      expect($(#counterText).text, '1');\n\n      await $(FloatingActionButton).tap();\n      expect($(#counterText).text, '2');\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Android Google Play Alpha Release with Fastlane\nDESCRIPTION: This command publishes an alpha version to Google Play Alpha track using fastlane, for internal testing. It's the earliest testing phase with limited testers.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_7\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane android alpha\n```\n\n----------------------------------------\n\nTITLE: Updating App Version in pubspec.yaml\nDESCRIPTION: This snippet describes how to update the app's version in the `pubspec.yaml` file before building the Archethic Wallet.  The version should follow the format `M.m.p+build` (e.g., `version: 2.3.8+528`).  This is a prerequisite step before building and deploying the wallet application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: M.m.p+build\n```\n\n----------------------------------------\n\nTITLE: Run Dependency Validator\nDESCRIPTION: This command executes the dependency validator to check and enforce the integrity of the project's dependencies. It requires the dependency_validator package to be installed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nflutter pub run dependency_validator\n```\n\n----------------------------------------\n\nTITLE: Running Build Runner in Watch Mode - Dart\nDESCRIPTION: This command initiates the Dart build runner in watch mode. This is used during development to automatically rebuild the project whenever changes are made to the source code. It helps in generating code and assets required by the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/update_riverpod.txt#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ndart run build_runner watch\n```\n\n----------------------------------------\n\nTITLE: Generating PFX on Windows using OpenSSL\nDESCRIPTION: This command generates a PFX (Personal Information Exchange) file using OpenSSL on Windows.  It uses the private key 'archethic_wallet.key' and the CRT certificate file 'archethic_wallet.crt' as input. The output file is named 'archethic_wallet.pfx'.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_6\n\nLANGUAGE: Batch Script\nCODE:\n```\nopenssl pkcs12 -export -out archethic_wallet.pfx -inkey archethic_wallet.key -in archethic_wallet.crt\n```\n\n----------------------------------------\n\nTITLE: Deeplink URL Schema\nDESCRIPTION: This snippet defines the deeplink URL schema used for opening DApps in the aeWallet webview. The base64Url_encoded_parameters portion contains encoded URL parameters such as the DApp URL, name, code, icon URL, description, and category.  Encoding ensures compatibility across different platforms and systems.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\naewallet://dapps_webview?[base64Url_encoded_parameters]\n```\n\n----------------------------------------\n\nTITLE: Creating Android Instrumentation Test - Java\nDESCRIPTION: This code snippet demonstrates how to create an instrumentation test file in Java for enabling native actions in Android using Patrol. It imports necessary classes from the Patrol library and sets up a PatrolTestRule.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/integration_test/README.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage net.archethic.archethic_wallet\n\nimport org.junit.Rule;\nimport org.junit.runner.RunWith;\nimport pl.leancode.patrol.PatrolTestRule;\nimport pl.leancode.patrol.PatrolTestRunner;\n\n@RunWith(PatrolTestRunner.class)\npublic class MainActivityTest {\n    @Rule\n    public PatrolTestRule<MainActivity> rule = new PatrolTestRule<>(MainActivity.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build, allowing Flutter's CMake build rules to be used.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Build Settings\nDESCRIPTION: This function applies standard build settings to the specified target, including setting the C++ standard to C++14, enabling compiler warnings and errors, and setting optimization levels and preprocessor definitions based on the build configuration.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter subdirectory to the build process. It's essential for integrating the Flutter framework into the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Android Google Play Beta Release with Fastlane\nDESCRIPTION: This command publishes a beta version to Google Play Beta track using fastlane, for internal testing. It allows for distributing pre-release versions to a specific group of testers.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/fastlane/README.md#_snippet_6\n\nLANGUAGE: Shell Script\nCODE:\n```\n[bundle exec] fastlane android beta\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Tool Backend\nDESCRIPTION: Adds a custom command to execute the Flutter tool backend. This command is responsible for generating the Flutter library and related headers. A phony output is used to force the command to run every time.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings and Version Definitions\nDESCRIPTION: This snippet applies standard build settings, adds preprocessor definitions for the Flutter version information, and disables conflicting Windows macros.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet sets up the CMake project, specifying the minimum required CMake version, the project name, and the languages used (CXX). It's the starting point for configuring the build process.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(archethic_wallet LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter wrapper library for the application\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` that contains the C++ wrapper code required for the Flutter application. It links against the `flutter` interface library and sets include directories.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version, project name, and supported languages. It also defines variables for the binary name and application ID.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"archethic_wallet\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"net.archethic.archethic_wallet\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: This snippet links the Flutter and GTK libraries to the application executable target.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Updating Versions using update_version.sh script\nDESCRIPTION: This snippet describes executing the `scripts/update_version.sh` script to update version numbers in configuration files related to the application build. Specifically, it updates the `msix_config` section within `pubspec.yaml` and `/web_chrome_extension/public/manifest.json` to ensure version consistency across different platforms and distribution channels.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscripts/update_version.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This snippet configures the available build types (Debug, Profile, Release) based on whether the generator is multi-config.  It sets the `CMAKE_BUILD_TYPE` if it's not already defined, defaulting to \"Debug\".\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the Executable\nDESCRIPTION: This snippet installs the application executable to the specified destination within the installation prefix.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process.  Ensures compatibility with CMake 3.10 or higher.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings\nDESCRIPTION: This function applies standard compilation settings to a specified target, including C++ standard version, warning levels, exception handling, and debug definitions. It takes the target name as input.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version\nDESCRIPTION: Specifies the minimum required version of CMake for this project to be 3.14. This ensures that the CMake features used in the script are supported.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies\nDESCRIPTION: Uses `pkg-config` to find system-level dependencies such as GTK, GLIB, and GIO. The `REQUIRED IMPORTED_TARGET` options ensure that the dependencies are found and imported as CMake targets.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Web App\nDESCRIPTION: These commands build the web application using a custom shell script and then deploy it to Firebase. Requires Firebase CLI to be installed and configured and the `scripts/build_webapp.sh` script to exist. The final line provides the URL where the deployed web app is accessible.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nscripts/build_webapp.sh\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines the installation directories for data and library files within the application bundle.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Tool Dependencies\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool's build process is executed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses the PkgConfig module to find the GTK library and create an imported target for it.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Example Deeplink URL (Unencoded)\nDESCRIPTION: This snippet provides an example of a deeplink URL *before* base64Url encoding.  It includes mandatory parameters like `url`, `name`, and `code`, as well as optional parameters like `iconUrl` and `description`. All parameters are passed as query parameters.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\naewallet://dapps_webview?code=aeWebsite&url=https://archethic.net&category=info&description=Archethic Official Website&name=Archethic Website&iconUrl=https://archethic.net/favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target for the application, specifying the source files to be compiled.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting the Binary Name\nDESCRIPTION: This snippet sets the name of the executable file that will be created when the project is built. Changing this variable will change the on-disk name of the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"archethic_wallet\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and specifies the include directories and link libraries required to use it. It depends on `flutter_assemble` target to ensure the flutter library is built.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: This snippet adds a preprocessor definition to define the APPLICATION_ID for the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to specify include directories and link libraries required by Flutter. Links against GTK, GLIB and GIO.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake. This ensures compatibility and best practices.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings to the application executable target.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter wrapper library for plugins\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` that contains the C++ wrapper code required for Flutter plugins. It links against the `flutter` interface library and sets include directories and compile options.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the application executable target, placing the unbundled executable in a subdirectory to prevent accidental execution.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet removes the existing assets directory and then installs the Flutter assets directory to the data directory within the installation prefix.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs the Flutter assets to the data directory, first removing any existing assets to ensure a clean install.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory to the build process. This directory likely contains application-specific code.  See runner/CMakeLists.txt for further details.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library to the data directory for Profile and Release builds only.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Mode\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build mode, copying the flags from the 'Release' build mode. This ensures consistent optimization levels.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Data Files\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation prefix.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the main executable to the installation prefix.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the installation prefix.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the installation library directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet conditionally installs the AOT library to the lib directory within the installation prefix, only for non-Debug builds.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries and installs each one to the lib directory within the installation prefix.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting fallback target platform\nDESCRIPTION: Sets the `FLUTTER_TARGET_PLATFORM` variable to `windows-x64` if it is not already defined. This provides a fallback configuration for older versions of the Flutter tool.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building\nDESCRIPTION: This snippet configures the CMake environment for cross-building. It sets the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on the FLUTTER_TARGET_PLATFORM_SYSROOT, and configures the search paths for programs, packages, libraries, and includes.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Install Bundle Directory\nDESCRIPTION: This snippet defines the directory where the installed application bundle will be placed. It uses the target file directory of the binary name.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting the ephemeral directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable to point to the `ephemeral` directory within the current source directory. This directory typically contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the application bundle. This file is necessary for internationalization support.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Generating Private Key on Windows using OpenSSL\nDESCRIPTION: This command generates a private key using OpenSSL on Windows. The generated key will be an RSA key with a key size of 2048 bits. The output file is named 'archethic_wallet.key'.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_3\n\nLANGUAGE: Batch Script\nCODE:\n```\nopenssl genrsa -out archethic_wallet.key 2048\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Include Directories\nDESCRIPTION: This snippet links the necessary libraries (flutter, flutter_wrapper_app, dwmapi.lib) and adds the include directories to the project.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This snippet installs the bundled libraries for plugins to the installation library directory, if they exist.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake and sets the RPATH to load bundled libraries from the 'lib/' directory relative to the binary.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Compilation Setting\nDESCRIPTION: This snippet adds definitions to enable Unicode support for the project, ensuring proper handling of international characters.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function\nDESCRIPTION: Defines a function to prepend a prefix to each element in a list. This is used as a substitute for `list(TRANSFORM ... PREPEND ...)` which is not available in CMake 3.10. Modifies the list in the parent scope.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD\nDESCRIPTION: This snippet sets the CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD variable to 1, making the install step the default in Visual Studio. It also sets the CMAKE_INSTALL_PREFIX to the build bundle directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library. It uses the Flutter tool backend script to generate the necessary files. The `_phony_` file ensures the command runs every time. Requires CMake command and Flutter tool environment.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter library path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable to point to the `flutter_windows.dll` file within the ephemeral directory.  It also publishes several variables to the PARENT_SCOPE for use in the install step.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating app-level build.gradle - JSON\nDESCRIPTION: This snippet shows the required updates to the app-level build.gradle file for Android to include the testInstrumentationRunner and JUnit dependency needed for Patrol to function correctly. This configuration allows Patrol to run instrumentation tests.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/integration_test/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nandroid {\n  // ...\n  defaultConfig {\n    //...\n    testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n  }\n}\n\ndependencies {\n    testImplementation \"junit:junit:4.13.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This snippet sets the default build type to \"Debug\" if not already specified and defines the allowed build types as \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting the Wrapper root directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable to point to the `cpp_client_wrapper` directory within the ephemeral directory. This directory contains the source code for the C++ wrapper that interfaces with the Flutter engine.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Installing Patrol Package\nDESCRIPTION: This snippet shows how to install the Patrol package using `flutter pub get`. Patrol is a Flutter package used for integration testing. It needs to be installed before running integration tests for the Archethic Wallet.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Defining a custom target for flutter_assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that the Flutter library and related files are built before other targets that depend on them.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Generating CSR on Windows using OpenSSL\nDESCRIPTION: This command generates a Certificate Signing Request (CSR) file using OpenSSL on Windows.  It requires the private key 'archethic_wallet.key' generated in the previous step and creates a CSR file named 'archethic_wallet.csr'.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_4\n\nLANGUAGE: Batch Script\nCODE:\n```\nopenssl req -new -key archethic_wallet.key -out archethic_wallet.csr\n```\n\n----------------------------------------\n\nTITLE: Define Flutter Library Headers\nDESCRIPTION: Defines a list of header files required for the Flutter library. These headers are then prepended with the path to the Flutter Linux directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Generating JKS Keystore on MacOS using keytool\nDESCRIPTION: This command generates a Java Keystore (JKS) file on MacOS. The keytool utility is used to create a new key pair with a specified algorithm (RSA), keysize (2048 bits), validity period (10000 days), and alias (key). The keystore is stored at ~/key.jks.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nkeytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Sets the ephemeral directory path, which is used to store generated configuration files. This directory is relative to the current source directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target is used to trigger the assembly process.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Including the generated configuration\nDESCRIPTION: Includes the `generated_config.cmake` file from the ephemeral directory. This file contains configuration settings provided by the Flutter tool, such as build flags and target platform information.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, defines the application target, and adds source files to the executable.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Build Chrome Extension\nDESCRIPTION: This command builds the Chrome extension using a custom shell script. Requires the `scripts/build_chrome_extension.sh` script to exist.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nscripts/build_chrome_extension.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the default installation prefix to a bundle directory within the build directory and initializes the bundle data and library directories.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Encoding JKS Keystore to Base64\nDESCRIPTION: This command encodes the generated JKS keystore file to Base64 format. It takes the input file 'key.jks' and outputs the Base64 encoded content to 'key.jks.enc'.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nbase64 -i key.jks -o key.jks.enc\n```\n\n----------------------------------------\n\nTITLE: Displaying Encoded JKS Keystore Content\nDESCRIPTION: This command displays the content of the Base64 encoded JKS keystore file. It's useful for verifying the encoding process and viewing the encoded data.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/keystore.txt#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\nmore key.jks.enc\n```\n\n----------------------------------------\n\nTITLE: Add Dependency Validator\nDESCRIPTION: This command adds the dependency_validator package as a dev dependency to the project. It validates the project's dependencies according to predefined rules.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ndart pub add --dev dependency_validator\n```\n\n----------------------------------------\n\nTITLE: Add Translations Cleaner\nDESCRIPTION: This command adds the translations_cleaner package as a dev dependency. It helps in cleaning up unused keys in the localization files.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\ndart pub add --dev translations_cleaner\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a generated configuration file from the ephemeral directory. This file is expected to contain configurations provided by the Flutter tool.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Remove Dependency Validator\nDESCRIPTION: This command removes the dependency_validator package from the project's dev dependencies. It is used to clean up dependencies after validation is complete.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\ndart pub remove dependency_validator\n```\n\n----------------------------------------\n\nTITLE: Remove Translations Cleaner\nDESCRIPTION: This command removes the translations_cleaner package from the project's dev dependencies. It is used after cleaning the localization files.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\ndart pub remove translations_cleaner\n```\n\n----------------------------------------\n\nTITLE: Run Translations Cleaner\nDESCRIPTION: This command executes the translations cleaner to remove unused keys from the ARB localization files. It requires the translations_cleaner package to be installed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\ndart run translations_cleaner clean-translations\n```\n\n----------------------------------------\n\nTITLE: Add DaUnused\nDESCRIPTION: This command adds the daunused package as a dev dependency. It is used to list unused files in the project.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\ndart pub add --dev daunused\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog File\nDESCRIPTION: This snippet describes the process of creating a new changelog file, named `build.txt`, in the `/fastlane/metadata/android/en-US/changelogs/` directory. This file will contain the changes made in the specific build version, and is used by Fastlane during the deployment process to the Google Play Store.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/fastlane/metadata/android/en-US/changelogs/build.txt\n```\n\n----------------------------------------\n\nTITLE: Run DaUnused\nDESCRIPTION: This command executes daunused to list all unused files in the project, starting from the current directory (.). It requires the daunused package to be installed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nflutter pub run daunused:daunused.dart .\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter library (`libflutter_linux_gtk.so`). This path is defined relative to the ephemeral directory and is propagated to the parent scope for use in install steps.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Example Deeplink URL (Encoded)\nDESCRIPTION: This snippet provides an example of a deeplink URL *after* base64Url encoding.  The entire query parameter string after `aewallet://dapps_webview?` is base64Url encoded to ensure proper handling of special characters and compatibility with deeplinking mechanisms.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/README.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\naewallet://dapps_webview?ZGFwcFVybD1odHRwczovL2FyY2hldGhpYy5uZXQmZGFwcE5hbWU9QXJjaGV0aGljJTIwV2Vic2l0ZSZkYXBwQ29kZT1hZVdlYnNpdGUmY2F0ZWdvcnk9aW5mbyZkZXNjcmlwdGlvbj1BcmNoZXRoaWMlMjBPZmZpY2lhbCUyMFdlYnNpdGUm...\n```\n\n----------------------------------------\n\nTITLE: Remove DaUnused\nDESCRIPTION: This command removes the daunused package from the project's dev dependencies. It is used after listing the unused files.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/preparePackage.txt#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\ndart pub remove daunused\n```\n\n----------------------------------------\n\nTITLE: Build MacOS App with Flutter\nDESCRIPTION: This command builds the MacOS version of the Flutter application. Requires Flutter to be installed. The `cd macos` command navigates to the MacOS directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/scripts/build.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd macos\nflutter build macos\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs native assets generated by the build.dart script to the installation library directory.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are executed.\nSOURCE: https://github.com/archethic-foundation/archethic-wallet/blob/dev/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```"
  }
]