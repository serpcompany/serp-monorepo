[
  {
    "owner": "candidhealth",
    "repo": "candid-node",
    "content": "TITLE: Creating Encounter with Candid Node Client v4\nDESCRIPTION: Demonstrates creating a detailed encounter object using the Candid Node client v4 API. The example includes patient information, multiple providers, insurance details, clinical notes, service lines, and supplemental information. Shows proper usage of CandidApi typed fields and complex nested objects.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounters.v4.create({\n    patient: {\n        phoneNumbers: [\n            {\n                number: \"1234567890\",\n                type: \"Home\",\n            },\n        ],\n        phoneConsent: true,\n        email: CandidApi.Email(\"johndoe@joincandidhealth.com\"),\n        nonInsurancePayers: [CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")],\n        nonInsurancePayersInfo: [\n            {\n                nonInsurancePayerId: CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n                memberId: \"string\",\n                clinicalTrialInfo: [\n                    {\n                        clinicalTrialId: CandidApi.ClinicalTrialId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n                    },\n                ],\n            },\n        ],\n        emailConsent: true,\n        externalId: \"string\",\n        dateOfBirth: \"2023-01-15\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        gender: \"male\",\n    },\n    billingProvider: {\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        taxId: \"string\",\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        providerCommercialLicenseType: \"0\",\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    renderingProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    referringProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    initialReferringProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        qualifier: \"DQ\",\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    supervisingProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    serviceFacility: {\n        organizationName: \"string\",\n        npi: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        secondaryIdentification: \"string\",\n    },\n    subscriberPrimary: {\n        insuranceCard: {\n            memberId: \"string\",\n            payerName: \"string\",\n            payerId: \"string\",\n            rxBin: \"string\",\n            rxPcn: \"string\",\n            imageUrlFront: \"string\",\n            imageUrlBack: \"string\",\n            emrPayerCrosswalk: \"HEALTHIE\",\n            groupNumber: \"string\",\n            planName: \"string\",\n            planType: \"09\",\n            insuranceType: \"01\",\n            payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        },\n        patientRelationshipToSubscriberCode: \"01\",\n        dateOfBirth: \"2023-01-15\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        gender: \"male\",\n    },\n    subscriberSecondary: {\n        insuranceCard: {\n            memberId: \"string\",\n            payerName: \"string\",\n            payerId: \"string\",\n            rxBin: \"string\",\n            rxPcn: \"string\",\n            imageUrlFront: \"string\",\n            imageUrlBack: \"string\",\n            emrPayerCrosswalk: \"HEALTHIE\",\n            groupNumber: \"string\",\n            planName: \"string\",\n            planType: \"09\",\n            insuranceType: \"01\",\n            payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        },\n        patientRelationshipToSubscriberCode: \"01\",\n        dateOfBirth: \"2023-01-15\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        gender: \"male\",\n    },\n    subscriberTertiary: {\n        insuranceCard: {\n            memberId: \"string\",\n            payerName: \"string\",\n            payerId: \"string\",\n            rxBin: \"string\",\n            rxPcn: \"string\",\n            imageUrlFront: \"string\",\n            imageUrlBack: \"string\",\n            emrPayerCrosswalk: \"HEALTHIE\",\n            groupNumber: \"string\",\n            planName: \"string\",\n            planType: \"09\",\n            insuranceType: \"01\",\n            payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        },\n        patientRelationshipToSubscriberCode: \"01\",\n        dateOfBirth: \"2023-01-15\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        gender: \"male\",\n    },\n    priorAuthorizationNumber: CandidApi.PriorAuthorizationNumber(\"string\"),\n    responsibleParty: \"INSURANCE_PAY\",\n    diagnoses: [\n        {\n            name: \"string\",\n            codeType: \"ABF\",\n            code: \"string\",\n        },\n    ],\n    clinicalNotes: [\n        {\n            category: \"clinical\",\n            notes: [],\n        },\n    ],\n    billingNotes: [\n        {\n            text: \"string\",\n        },\n    ],\n    placeOfServiceCode: \"01\",\n    patientHistories: [\n        {\n            category: \"present_illness\",\n            questions: [\n                {\n                    id: CandidApi.IntakeQuestionId(\"6E7FBCE4-A8EA-46D0-A8D8-FF83CA3BB176\"),\n                    text: \"Do you have any allergies?\",\n                    responses: [\n                        {\n                            response: \"No allergies\",\n                            followUps: [\n                                {\n                                    id: CandidApi.IntakeFollowUpId(\"4F3D57F9-AC94-49D6-87E4-E804B709917A\"),\n                                    text: \"Do you have any allergies?\",\n                                    response: \"No allergies\",\n                                },\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n    serviceLines: [\n        {\n            procedureCode: \"string\",\n            quantity: CandidApi.Decimal(\"string\"),\n            units: \"MJ\",\n            diagnosisPointers: [],\n        },\n    ],\n    guarantor: {\n        phoneNumbers: [\n            {\n                number: \"1234567890\",\n                type: \"Home\",\n            },\n        ],\n        phoneConsent: true,\n        email: CandidApi.Email(\"johndoe@joincandidhealth.com\"),\n        emailConsent: true,\n        firstName: \"string\",\n        lastName: \"string\",\n        externalId: \"string\",\n        dateOfBirth: \"2023-01-15\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n    },\n    externalClaimSubmission: {\n        claimCreatedAt: \"2023-01-01T12:00:00.000000Z\",\n        patientControlNumber: \"PATIENT_CONTROL_NUMBER\",\n        submissionRecords: [\n            {\n                submittedAt: \"2023-01-01T13:00:00.000000Z\",\n                claimFrequencyCode: \"1\",\n                payerResponsibility: \"primary\",\n                intendedSubmissionMedium: \"electronic\",\n            },\n            {\n                submittedAt: \"2023-01-04T12:00:00.000000Z\",\n                claimFrequencyCode: \"7\",\n                payerResponsibility: \"primary\",\n                intendedSubmissionMedium: \"paper\",\n            },\n        ],\n    },\n    tagIds: [CandidApi.TagId(\"string\")],\n    schemaInstances: [\n        {\n            schemaId: CandidApi.SchemaId(\"ec096b13-f80a-471d-aaeb-54b021c9d582\"),\n            content: {\n                provider_category: \"internist\",\n                is_urgent_care: true,\n                bmi: 24.2,\n                age: 38,\n            },\n        },\n    ],\n    referralNumber: \"string\",\n    epsdtReferral: {\n        conditionIndicator1: \"AV\",\n        conditionIndicator2: \"AV\",\n        conditionIndicator3: \"AV\",\n    },\n    claimSupplementalInformation: [\n        {\n            attachmentReportTypeCode: \"03\",\n            attachmentTransmissionCode: \"BM\",\n```\n\n----------------------------------------\n\nTITLE: Basic Client Usage with Eligibility Check\nDESCRIPTION: Example demonstrating how to initialize the Candid API client and perform an eligibility check with required parameters.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CandidApiClient } from \"candidhealth\";\n\nconst client = new CandidApiClient({ clientId: \"YOUR_CLIENT_ID\", clientSecret: \"YOUR_CLIENT_SECRET\" });\nawait client.preEncounter.eligibilityChecks.v1.post({\n    payerId: \"string\",\n    provider: {\n        firstName: \"string\",\n        lastName: \"string\",\n        npi: \"string\",\n    },\n    subscriber: {\n        memberId: \"string\",\n        firstName: \"string\",\n        lastName: \"string\",\n        dateOfBirth: \"2023-01-15\",\n    },\n    dependent: {\n        memberId: \"string\",\n        firstName: \"string\",\n        lastName: \"string\",\n        dateOfBirth: \"2023-01-15\",\n    },\n    encounter: {\n        dateOfService: \"2023-01-15\",\n        serviceTypeCodes: [\"string\"],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Candid API using OAuth 2.0\nDESCRIPTION: This example demonstrates how to obtain an authentication token using client credentials. The token expires after 5 hours and should be reused between requests to avoid rate limiting.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.auth.v2.getToken({\n    clientId: \"YOUR_CLIENT_ID\",\n    clientSecret: \"YOUR_CLIENT_SECRET\",\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Eligibility Check with Availity POST in TypeScript\nDESCRIPTION: Shows how to use the POST endpoint for submitting eligibility checks with Availity. This is the recommended approach as Availity has transitioned from GET to POST endpoints.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.eligibility.v2.submitEligibilityCheckAvailityPost({\n    key: \"value\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Encounters in TypeScript\nDESCRIPTION: Methods for retrieving encounter data, including getting all encounters with filtering options and getting a single encounter by ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounters.v4.getAll({\n    limit: 100,\n    claimStatus: \"biller_received\",\n    sort: \"created_at:asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    dateOfServiceMin: \"2019-08-24\",\n    dateOfServiceMax: \"2019-08-25\",\n    primaryPayerNames: \"Medicare,Medicaid\",\n    searchTerm: \"doe\",\n    externalId: CandidApi.EncounterExternalId(\"123456\"),\n    diagnosesUpdatedSince: \"2019-08-24T14:15:22Z\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounters.v4.get(CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Candid TypeScript SDK\nDESCRIPTION: Command to install the Candid TypeScript library via npm package manager.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -s candidhealth\n```\n\n----------------------------------------\n\nTITLE: Retrieving Patient List with PreEncounter API in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a list of patients with dependent objects using the PreEncounter API. It includes pagination, sorting, and filtering options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.lists.v1.getPatientList({\n    pageToken: CandidApi.PageToken(\"string\"),\n    limit: 1,\n    sortField: CandidApi.SortFieldString(\"string\"),\n    sortDirection: \"asc\",\n    filters: CandidApi.FilterQueryString(\"string\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Retries\nDESCRIPTION: Example demonstrating how to configure retry behavior for API requests.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.preEncounter.eligibilityChecks.v1.post(..., {\n    maxRetries: 0 // override maxRetries at the request level\n});\n```\n\n----------------------------------------\n\nTITLE: Searching for Patients in Candid Node API\nDESCRIPTION: Returns a list of patients based on specific search criteria like medical record number (MRN) or similar name ordering.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_173\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.search({\n    mrn: \"string\",\n    similarNameOrdering: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ordering Provider in TypeScript\nDESCRIPTION: Creates an ordering provider for a service line. Requires service line ID and provider details including NPI, taxonomy code, address and name information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.createOrderingProvider(\n    CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Referring Provider in TypeScript\nDESCRIPTION: Creates an initial referring provider for an encounter with a qualifier. Requires encounter ID and provider details including NPI, taxonomy code, address and name information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.createInitialReferringProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        qualifier: \"DQ\",\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Client\nDESCRIPTION: Example showing how to provide a custom fetch implementation for the SDK.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CandidApiClient } from \"candidhealth\";\n\nconst client = new CandidApiClient({\n    ...\n    fetcher: // provide your implementation here\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointment List with PreEncounter API in TypeScript\nDESCRIPTION: This snippet shows how to retrieve a list of appointments that match specific query parameters using the PreEncounter API. It includes sorting, pagination, and filtering options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.lists.v1.getAppointmentList({\n    sortField: CandidApi.SortFieldString(\"string\"),\n    sortDirection: \"asc\",\n    limit: 1,\n    pageToken: CandidApi.PageToken(\"string\"),\n    filters: CandidApi.FilterQueryString(\"string\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with Candid API\nDESCRIPTION: Example showing how to create a task with the Candid API client. The task includes encounter ID, task type, description, and assignment details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_127\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tasks.v3.create({\n    encounterId: CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    taskType: \"CUSTOMER_DATA_REQUEST\",\n    description: \"string\",\n    blocksClaimSubmission: true,\n    assigneeUserId: CandidApi.UserId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    category: \"other\",\n    workQueueId: CandidApi.WorkQueueId(\"string\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Abortion\nDESCRIPTION: Example demonstrating how to implement request abortion using AbortController.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = new AbortController();\nconst response = await client.preEncounter.eligibilityChecks.v1.post(..., {\n    abortSignal: controller.signal\n});\ncontroller.abort(); // aborts the request\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Tasks in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve multiple tasks using the Candid API client. It includes various optional parameters for filtering and pagination.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tasks.v3.getMulti({\n    limit: 1,\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    status: \"finished\",\n    taskType: \"CUSTOMER_DATA_REQUEST\",\n    categories: \"string\",\n    updatedSince: \"2024-01-15T09:30:00Z\",\n    encounterId: CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    searchTerm: \"string\",\n    assignedToId: CandidApi.UserId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    dateOfServiceMin: \"2023-01-15\",\n    dateOfServiceMax: \"2023-01-15\",\n    billingProviderNpi: \"string\",\n    sort: \"updated_at:asc\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching External Payment Account Configurations in TypeScript\nDESCRIPTION: Demonstrates how to retrieve multiple external payment account configurations with pagination. The request takes optional limit and page token parameters to control the amount of data returned.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.externalPaymentAccountConfig.v1.getMulti({\n    limit: 1,\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Eligibility - TypeScript\nDESCRIPTION: Initiates an eligibility check for a specific coverage, including service code and date of service details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_150\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.checkEligibility(CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    serviceCode: \"1\",\n    dateOfService: \"2023-01-15\",\n    npi: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Payer Plan Groups in TypeScript\nDESCRIPTION: Retrieves payer plan groups matching specified filter criteria. Supports filtering by plan group name, payer information, plan type, and other attributes.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payerPlanGroups.v1.getMulti({\n    planGroupName: \"string\",\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    payerId: CandidApi.PayerId(\"string\"),\n    planType: \"09\",\n    isActive: true,\n    payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    limit: 1,\n    sortBySimilarity: \"string\",\n    sort: \"plan_group_name\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Insurance Adjudication in TypeScript using Candid API\nDESCRIPTION: Example of creating a new insurance adjudication record with payer information, payee details, check information, claims data, and remit draft ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceAdjudications.v1.create({\n    payerIdentifier: {\n        type: \"payer_info\",\n    },\n    payee: {\n        payeeName: \"string\",\n        payeeIdentifier: {\n            type: \"npi\",\n            value: CandidApi.Npi(\"string\"),\n        },\n    },\n    postDate: \"2023-01-15\",\n    checkNumber: \"string\",\n    checkDate: \"2023-01-15\",\n    note: \"string\",\n    claims: {\n        \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\": [\n            {\n                claimStatusCode: \"1\",\n                serviceLines: {},\n                carcs: [],\n            },\n        ],\n    },\n    remitDraftId: CandidApi.RemitDraftId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Medical Encounter with Patient Data in TypeScript\nDESCRIPTION: Code demonstrating creation of a medical encounter record with vital signs, medications, interventions and billing information. Uses CandidApi types for encounter creation with external IDs, service dates, vitals, interventions and address details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    externalId: CandidApi.EncounterExternalId(\"string\"),\n    dateOfService: \"2023-01-15\",\n    endDateOfService: \"2023-01-15\",\n    patientAuthorizedRelease: true,\n    benefitsAssignedToProvider: true,\n    providerAcceptsAssignment: true,\n    appointmentType: \"string\",\n    existingMedications: [\n        {\n            name: \"Lisinopril\",\n            rxCui: CandidApi.RxCui(\"860975\"),\n            dosage: \"10mg\",\n            dosageForm: \"Tablet\",\n            frequency: \"Once Daily\",\n            asNeeded: true,\n        },\n    ],\n    vitals: {\n        heightIn: 70,\n        weightLbs: 165,\n        bloodPressureSystolicMmhg: 115,\n        bloodPressureDiastolicMmhg: 85,\n        bodyTemperatureF: 98,\n        hemoglobinGdl: 15.1,\n        hematocritPct: 51.2,\n    },\n    interventions: [\n        {\n            name: \"Physical Therapy Session\",\n            category: \"lifestyle\",\n            description:\n                \"A session focused on improving muscular strength, flexibility, and range of motion post-injury.\",\n            medication: {\n                name: \"Lisinopril\",\n                rxCui: CandidApi.RxCui(\"860975\"),\n                dosage: \"10mg\",\n                dosageForm: \"Tablet\",\n                frequency: \"Once Daily\",\n                asNeeded: true,\n            },\n            labs: [\n                {\n                    name: \"Genetic Health Labs\",\n                    code: \"GH12345\",\n                    codeType: \"quest\",\n                },\n            ],\n        },\n    ],\n    payToAddress: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n    synchronicity: \"Synchronous\",\n    billableStatus: \"BILLABLE\",\n    additionalInformation: \"string\",\n    serviceAuthorizationExceptionCode: \"1\",\n    admissionDate: \"2023-01-15\",\n    dischargeDate: \"2023-01-15\",\n    onsetOfCurrentIllnessOrSymptomDate: \"2023-01-15\",\n    lastMenstrualPeriodDate: \"2023-01-15\",\n    delayReasonCode: \"1\",\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Patient Refunds in TypeScript\nDESCRIPTION: Fetches patient refunds matching specific search criteria from the Candid API. Parameters allow filtering by various attributes like patient ID, claim ID, and service line ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientRefunds.v1.getMulti({\n    limit: 1,\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    claimId: CandidApi.ClaimId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    serviceLineId: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    billingProviderId: CandidApi.ProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    unattributed: true,\n    invoiceId: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sources: \"MANUAL_ENTRY\",\n    sort: \"refund_source\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated Coverages - TypeScript\nDESCRIPTION: Fetches a paginated list of coverages based on search criteria including patient ID and payer plan group ID. Supports pagination through page tokens and limit parameters.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_144\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.getMultiPaginated({\n    patientId: \"string\",\n    payerPlanGroupId: \"string\",\n    pageToken: CandidApi.PageToken(\"string\"),\n    limit: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Encounter from Pre-Encounter Patient with TypeScript\nDESCRIPTION: This example demonstrates how to create a new encounter from an existing pre-encounter patient using the Candid API client. It includes all required parameters such as provider information, diagnoses, service lines, and patient-related data.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounters.v4.createFromPreEncounterPatient({\n    preEncounterPatientId: CandidApi.PreEncounterPatientId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    preEncounterAppointmentIds: [CandidApi.PreEncounterAppointmentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")],\n    billingProvider: {\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        taxId: \"string\",\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        providerCommercialLicenseType: \"0\",\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    renderingProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    initialReferringProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        qualifier: \"DQ\",\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    supervisingProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    serviceFacility: {\n        organizationName: \"string\",\n        npi: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        secondaryIdentification: \"string\",\n    },\n    diagnoses: [\n        {\n            name: \"string\",\n            codeType: \"ABF\",\n            code: \"string\",\n        },\n    ],\n    clinicalNotes: [\n        {\n            category: \"clinical\",\n            notes: [],\n        },\n    ],\n    billingNotes: [\n        {\n            text: \"string\",\n        },\n    ],\n    placeOfServiceCode: \"01\",\n    patientHistories: [\n        {\n            category: \"present_illness\",\n            questions: [\n                {\n                    id: CandidApi.IntakeQuestionId(\"6E7FBCE4-A8EA-46D0-A8D8-FF83CA3BB176\"),\n                    text: \"Do you have any allergies?\",\n                    responses: [\n                        {\n                            response: \"No allergies\",\n                            followUps: [\n                                {\n                                    id: CandidApi.IntakeFollowUpId(\"4F3D57F9-AC94-49D6-87E4-E804B709917A\"),\n                                    text: \"Do you have any allergies?\",\n                                    response: \"No allergies\",\n                                },\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n    serviceLines: [\n        {\n            procedureCode: \"string\",\n            quantity: CandidApi.Decimal(\"string\"),\n            units: \"MJ\",\n            diagnosisPointers: [],\n        },\n    ],\n    externalClaimSubmission: {\n        claimCreatedAt: \"2023-01-01T12:00:00.000000Z\",\n        patientControlNumber: \"PATIENT_CONTROL_NUMBER\",\n        submissionRecords: [\n            {\n                submittedAt: \"2023-01-01T13:00:00.000000Z\",\n                claimFrequencyCode: \"1\",\n                payerResponsibility: \"primary\",\n                intendedSubmissionMedium: \"electronic\",\n            },\n            {\n                submittedAt: \"2023-01-04T12:00:00.000000Z\",\n                claimFrequencyCode: \"7\",\n                payerResponsibility: \"primary\",\n                intendedSubmissionMedium: \"paper\",\n            },\n        ],\n    },\n    tagIds: [CandidApi.TagId(\"string\")],\n    schemaInstances: [\n        {\n            schemaId: CandidApi.SchemaId(\"ec096b13-f80a-471d-aaeb-54b021c9d582\"),\n            content: {\n                provider_category: \"internist\",\n                is_urgent_care: true,\n                bmi: 24.2,\n                age: 38,\n            },\n        },\n    ],\n    externalId: CandidApi.EncounterExternalId(\"string\"),\n    dateOfService: \"2023-01-15\",\n    endDateOfService: \"2023-01-15\",\n    patientAuthorizedRelease: true,\n    benefitsAssignedToProvider: true,\n    providerAcceptsAssignment: true,\n    appointmentType: \"string\",\n    existingMedications: [\n        {\n            name: \"Lisinopril\",\n            rxCui: CandidApi.RxCui(\"860975\"),\n            dosage: \"10mg\",\n            dosageForm: \"Tablet\",\n            frequency: \"Once Daily\",\n            asNeeded: true,\n        },\n    ],\n    vitals: {\n        heightIn: 70,\n        weightLbs: 165,\n        bloodPressureSystolicMmhg: 115,\n        bloodPressureDiastolicMmhg: 85,\n        bodyTemperatureF: 98,\n        hemoglobinGdl: 15.1,\n        hematocritPct: 51.2,\n    },\n    interventions: [\n        {\n            name: \"Physical Therapy Session\",\n            category: \"lifestyle\",\n            description:\n                \"A session focused on improving muscular strength, flexibility, and range of motion post-injury.\",\n            medication: {\n                name: \"Lisinopril\",\n                rxCui: CandidApi.RxCui(\"860975\"),\n                dosage: \"10mg\",\n                dosageForm: \"Tablet\",\n                frequency: \"Once Daily\",\n                asNeeded: true,\n            },\n            labs: [\n                {\n                    name: \"Genetic Health Labs\",\n                    code: \"GH12345\",\n                    codeType: \"quest\",\n                },\n            ],\n        },\n    ],\n    payToAddress: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n    synchronicity: \"Synchronous\",\n    billableStatus: \"BILLABLE\",\n    additionalInformation: \"string\",\n    serviceAuthorizationExceptionCode: \"1\",\n    admissionDate: \"2023-01-15\",\n    dischargeDate: \"2023-01-15\",\n    onsetOfCurrentIllnessOrSymptomDate: \"2023-01-15\",\n    lastMenstrualPeriodDate: \"2023-01-15\",\n    delayReasonCode: \"1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Appointments with Candid API\nDESCRIPTION: Example of creating a new appointment with patient details, timestamp, status, services, and provider information using the pre-encounter appointments API.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_135\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.create({\n    patientId: CandidApi.PatientId(\"string\"),\n    startTimestamp: \"2024-01-15T09:30:00Z\",\n    status: \"PENDING\",\n    serviceDuration: 1,\n    services: [\n        {\n            universalServiceIdentifier: \"MD_Visit\",\n            startTimestamp: \"2024-01-15T09:30:00Z\",\n        },\n    ],\n    placerAppointmentId: \"string\",\n    attendingDoctor: {\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        type: \"PRIMARY\",\n        npi: \"string\",\n        telecoms: [\n            {\n                value: \"string\",\n                use: \"HOME\",\n            },\n        ],\n        addresses: [],\n        period: {},\n        canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n        fax: \"string\",\n    },\n    estimatedCopayCents: 1,\n    estimatedPatientResponsibilityCents: 1,\n    patientDepositCents: 1,\n    checkedInTimestamp: \"2024-01-15T09:30:00Z\",\n    notes: \"string\",\n    locationResourceId: \"string\",\n    automatedEligibilityCheckComplete: true,\n    workQueue: \"EMERGENT_ISSUE\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Fee Schedule Rates in TypeScript\nDESCRIPTION: Shows how to retrieve a list of dimensions with their rates. Various filters can be applied including payer information, provider data, geographical constraints, and procedure codes. Returns the most recent versions of the matching rates.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.getMulti({\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    limit: 1,\n    activeDate: \"2023-01-15\",\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    organizationBillingProviderId: CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    states: \"AA\",\n    zipCodes: \"string\",\n    licenseTypes: \"MD\",\n    facilityTypeCodes: \"01\",\n    networkTypes: \"12\",\n    payerPlanGroupIds: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    cptCode: \"string\",\n    modifiers: \"AV\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Patient by ID using Candid Health API in TypeScript\nDESCRIPTION: Example showing how to retrieve a single patient by ID using the get method. The method requires a valid PatientId and returns the complete patient record.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_168\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.get(CandidApi.PatientId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Patients in Candid API\nDESCRIPTION: This code demonstrates how to create a new patient record with the Candid API. It includes comprehensive patient data structures covering demographics, contact information, providers, insurance details, and more.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.create({\n    skipDuplicateCheck: true,\n    body: {\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        otherNames: [\n            {\n                family: \"string\",\n                given: [\"string\"],\n                use: \"USUAL\",\n                period: {},\n                suffix: \"string\",\n            },\n        ],\n        otherIdentifiers: [\n            {\n                value: \"string\",\n                system: \"string\",\n            },\n        ],\n        gender: \"MAN\",\n        birthDate: \"2023-01-15\",\n        socialSecurityNumber: \"string\",\n        biologicalSex: \"FEMALE\",\n        sexualOrientation: \"HETEROSEXUAL\",\n        pronouns: [\"string\"],\n        race: \"AMERICAN_INDIAN_OR_ALASKA_NATIVE\",\n        ethnicity: \"HISPANIC_OR_LATINO\",\n        disabilityStatus: \"DISABLED\",\n        maritalStatus: \"ANNULLED\",\n        deceased: \"2024-01-15T09:30:00Z\",\n        multipleBirth: 1,\n        primaryAddress: {\n            use: \"HOME\",\n            line: [\"string\"],\n            city: \"string\",\n            state: \"string\",\n            postalCode: \"string\",\n            country: \"string\",\n            period: {},\n        },\n        otherAddresses: [\n            {\n                use: \"HOME\",\n                line: [\"string\"],\n                city: \"string\",\n                state: \"string\",\n                postalCode: \"string\",\n                country: \"string\",\n                period: {},\n            },\n        ],\n        primaryTelecom: {\n            value: \"string\",\n            use: \"HOME\",\n        },\n        otherTelecoms: [\n            {\n                value: \"string\",\n                use: \"HOME\",\n            },\n        ],\n        email: \"string\",\n        electronicCommunicationOptIn: true,\n        photo: \"string\",\n        language: \"string\",\n        externalProvenance: {\n            externalId: \"string\",\n            systemName: \"string\",\n        },\n        contacts: [\n            {\n                relationship: [\"SELF\"],\n                name: {\n                    family: \"string\",\n                    given: [\"string\"],\n                    use: \"USUAL\",\n                    period: {},\n                    suffix: \"string\",\n                },\n                telecoms: [\n                    {\n                        value: \"string\",\n                        use: \"HOME\",\n                    },\n                ],\n                addresses: [\n                    {\n                        use: \"HOME\",\n                        line: [\"string\"],\n                        city: \"string\",\n                        state: \"string\",\n                        postalCode: \"string\",\n                        country: \"string\",\n                        period: {},\n                    },\n                ],\n                period: {},\n                hipaaAuthorization: true,\n            },\n        ],\n        generalPractitioners: [\n            {\n                name: {\n                    family: \"string\",\n                    given: [\"string\"],\n                    use: \"USUAL\",\n                    period: {},\n                    suffix: \"string\",\n                },\n                type: \"PRIMARY\",\n                npi: \"string\",\n                telecoms: [\n                    {\n                        value: \"string\",\n                        use: \"HOME\",\n                    },\n                ],\n                addresses: [],\n                period: {},\n                canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n                fax: \"string\",\n            },\n        ],\n        filingOrder: {\n            coverages: [CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")],\n        },\n        nonInsurancePayers: [CandidApi.CanonicalNonInsurancePayerId(\"string\")],\n        nonInsurancePayerAssociations: [\n            {\n                id: CandidApi.CanonicalNonInsurancePayerId(\"string\"),\n            },\n        ],\n        guarantor: {\n            name: {\n                family: \"string\",\n                given: [\"string\"],\n                use: \"USUAL\",\n                period: {},\n                suffix: \"string\",\n            },\n            telecom: {\n                value: \"string\",\n                use: \"HOME\",\n            },\n            email: \"string\",\n            birthDate: \"2023-01-15\",\n            address: {\n                use: \"HOME\",\n                line: [\"string\"],\n                city: \"string\",\n                state: \"string\",\n                postalCode: \"string\",\n                country: \"string\",\n                period: {},\n            },\n        },\n        selfPay: true,\n        authorizations: [\n            {\n                payerId: CandidApi.PayerId(\"string\"),\n                payerName: \"string\",\n                additionalPayerInformation: {},\n                authorizationNumber: \"string\",\n                cptCode: \"string\",\n                applyForAllCptCodes: true,\n                units: \"VISIT\",\n                quantity: 1,\n                period: {},\n                notes: \"string\",\n            },\n        ],\n        referrals: [\n            {\n                provider: {\n                    name: {\n                        family: \"string\",\n                        given: [\"string\"],\n                        use: \"USUAL\",\n                        period: {},\n                        suffix: \"string\",\n                    },\n                    type: \"PRIMARY\",\n                    npi: \"string\",\n                    telecoms: [\n                        {\n                            value: \"string\",\n                            use: \"HOME\",\n                        },\n                    ],\n                    addresses: [],\n                    period: {},\n                    canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n                    fax: \"string\",\n                },\n                referralNumber: \"string\",\n            },\n        ],\n        primaryServiceFacilityId: \"string\",\n        doNotInvoiceReason: \"BANKRUPTCY\",\n        noteIds: [CandidApi.NoteId(\"string\")],\n        tagIds: [CandidApi.TagId(\"string\")],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning Patient Updates in Candid Node API\nDESCRIPTION: Scans up to 100 patient updates since a specified timestamp. The 'since' parameter is inclusive, and results are ordered by updatedAt ascending.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_174\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.scan({\n    since: \"2024-01-15T09:30:00Z\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Task in TypeScript\nDESCRIPTION: This code snippet shows how to retrieve information about a specific task using the Candid API client. It requires the task ID as a parameter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tasks.v3.get(CandidApi.TaskId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks with Candid API\nDESCRIPTION: Shows how to update an existing task by ID in the Candid API. This example updates the task status, assignee, and blocksClaimSubmission properties.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_128\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tasks.v3.update(CandidApi.TaskId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    status: \"finished\",\n    assigneeUserId: CandidApi.UserId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    blocksClaimSubmission: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Eligibility Check with PreEncounter API in TypeScript\nDESCRIPTION: This snippet demonstrates how to perform an eligibility check using the PreEncounter API. It includes details for the payer, provider, subscriber, dependent, and encounter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_152\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.eligibilityChecks.v1.post({\n    payerId: \"string\",\n    provider: {\n        firstName: \"string\",\n        lastName: \"string\",\n        npi: \"string\",\n    },\n    subscriber: {\n        memberId: \"string\",\n        firstName: \"string\",\n        lastName: \"string\",\n        dateOfBirth: \"2023-01-15\",\n    },\n    dependent: {\n        memberId: \"string\",\n        firstName: \"string\",\n        lastName: \"string\",\n        dateOfBirth: \"2023-01-15\",\n    },\n    encounter: {\n        dateOfService: \"2023-01-15\",\n        serviceTypeCodes: [\"string\"],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Patient with MRN using Candid Health API in TypeScript\nDESCRIPTION: Example showing how to create a patient with a Medical Record Number (MRN) in the Candid Health API. The request includes comprehensive patient information such as personal details, contact information, insurance coverage, and medical associations.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.createWithMrn({\n    skipDuplicateCheck: true,\n    body: {\n        mrn: \"string\",\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        otherNames: [\n            {\n                family: \"string\",\n                given: [\"string\"],\n                use: \"USUAL\",\n                period: {},\n                suffix: \"string\",\n            },\n        ],\n        otherIdentifiers: [\n            {\n                value: \"string\",\n                system: \"string\",\n            },\n        ],\n        gender: \"MAN\",\n        birthDate: \"2023-01-15\",\n        socialSecurityNumber: \"string\",\n        biologicalSex: \"FEMALE\",\n        sexualOrientation: \"HETEROSEXUAL\",\n        pronouns: [\"string\"],\n        race: \"AMERICAN_INDIAN_OR_ALASKA_NATIVE\",\n        ethnicity: \"HISPANIC_OR_LATINO\",\n        disabilityStatus: \"DISABLED\",\n        maritalStatus: \"ANNULLED\",\n        deceased: \"2024-01-15T09:30:00Z\",\n        multipleBirth: 1,\n        primaryAddress: {\n            use: \"HOME\",\n            line: [\"string\"],\n            city: \"string\",\n            state: \"string\",\n            postalCode: \"string\",\n            country: \"string\",\n            period: {},\n        },\n        otherAddresses: [\n            {\n                use: \"HOME\",\n                line: [\"string\"],\n                city: \"string\",\n                state: \"string\",\n                postalCode: \"string\",\n                country: \"string\",\n                period: {},\n            },\n        ],\n        primaryTelecom: {\n            value: \"string\",\n            use: \"HOME\",\n        },\n        otherTelecoms: [\n            {\n                value: \"string\",\n                use: \"HOME\",\n            },\n        ],\n        email: \"string\",\n        electronicCommunicationOptIn: true,\n        photo: \"string\",\n        language: \"string\",\n        externalProvenance: {\n            externalId: \"string\",\n            systemName: \"string\",\n        },\n        contacts: [\n            {\n                relationship: [\"SELF\"],\n                name: {\n                    family: \"string\",\n                    given: [\"string\"],\n                    use: \"USUAL\",\n                    period: {},\n                    suffix: \"string\",\n                },\n                telecoms: [\n                    {\n                        value: \"string\",\n                        use: \"HOME\",\n                    },\n                ],\n                addresses: [\n                    {\n                        use: \"HOME\",\n                        line: [\"string\"],\n                        city: \"string\",\n                        state: \"string\",\n                        postalCode: \"string\",\n                        country: \"string\",\n                        period: {},\n                    },\n                ],\n                period: {},\n                hipaaAuthorization: true,\n            },\n        ],\n        generalPractitioners: [\n            {\n                name: {\n                    family: \"string\",\n                    given: [\"string\"],\n                    use: \"USUAL\",\n                    period: {},\n                    suffix: \"string\",\n                },\n                type: \"PRIMARY\",\n                npi: \"string\",\n                telecoms: [\n                    {\n                        value: \"string\",\n                        use: \"HOME\",\n                    },\n                ],\n                addresses: [],\n                period: {},\n                canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n                fax: \"string\",\n            },\n        ],\n        filingOrder: {\n            coverages: [CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")],\n        },\n        nonInsurancePayers: [CandidApi.CanonicalNonInsurancePayerId(\"string\")],\n        nonInsurancePayerAssociations: [\n            {\n                id: CandidApi.CanonicalNonInsurancePayerId(\"string\"),\n            },\n        ],\n        guarantor: {\n            name: {\n                family: \"string\",\n                given: [\"string\"],\n                use: \"USUAL\",\n                period: {},\n                suffix: \"string\",\n            },\n            telecom: {\n                value: \"string\",\n                use: \"HOME\",\n            },\n            email: \"string\",\n            birthDate: \"2023-01-15\",\n            address: {\n                use: \"HOME\",\n                line: [\"string\"],\n                city: \"string\",\n                state: \"string\",\n                postalCode: \"string\",\n                country: \"string\",\n                period: {},\n            },\n        },\n        selfPay: true,\n        authorizations: [\n            {\n                payerId: CandidApi.PayerId(\"string\"),\n                payerName: \"string\",\n                additionalPayerInformation: {},\n                authorizationNumber: \"string\",\n                cptCode: \"string\",\n                applyForAllCptCodes: true,\n                units: \"VISIT\",\n                quantity: 1,\n                period: {},\n                notes: \"string\",\n            },\n        ],\n        referrals: [\n            {\n                provider: {\n                    name: {\n                        family: \"string\",\n                        given: [\"string\"],\n                        use: \"USUAL\",\n                        period: {},\n                        suffix: \"string\",\n                    },\n                    type: \"PRIMARY\",\n                    npi: \"string\",\n                    telecoms: [\n                        {\n                            value: \"string\",\n                            use: \"HOME\",\n                        },\n                    ],\n                    addresses: [],\n                    period: {},\n                    canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n                    fax: \"string\",\n                },\n                referralNumber: \"string\",\n            },\n        ],\n        primaryServiceFacilityId: \"string\",\n        doNotInvoiceReason: \"BANKRUPTCY\",\n        noteIds: [CandidApi.NoteId(\"string\")],\n        tagIds: [CandidApi.TagId(\"string\")],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning Coverage Updates - TypeScript\nDESCRIPTION: Scans for coverage updates since a specified timestamp, returning up to 100 records ordered by update time.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_148\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.scan({\n    since: \"2024-01-15T09:30:00Z\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Coverage - TypeScript\nDESCRIPTION: Retrieves a specific coverage record by its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.get(CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Create Patient Payment\nDESCRIPTION: Creates a new patient payment record with specified amount and allocations.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientPayments.v4.create({\n    amountCents: 1,\n    paymentTimestamp: \"2024-01-15T09:30:00Z\",\n    paymentNote: \"string\",\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    allocations: [\n        {\n            amountCents: 1,\n            target: {\n                type: \"service_line_by_id\",\n                value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            },\n        },\n    ],\n    invoice: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Service Line in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a service line using the Candid API client. It includes various parameters such as modifiers, charge amount, diagnosis IDs, and claim details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.serviceLines.v2.create({\n    modifiers: [\"AV\"],\n    chargeAmountCents: 1,\n    diagnosisIdZero: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    diagnosisIdOne: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    diagnosisIdTwo: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    diagnosisIdThree: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    denialReason: {\n        reason: \"Authorization Required\",\n    },\n    placeOfServiceCode: \"01\",\n    procedureCode: \"string\",\n    quantity: CandidApi.Decimal(\"string\"),\n    units: \"MJ\",\n    claimId: CandidApi.ClaimId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    description: \"string\",\n    dateOfService: \"2023-01-15\",\n    endDateOfService: \"2023-01-15\",\n    drugIdentification: {\n        serviceIdQualifier: \"EN\",\n        nationalDrugCode: \"string\",\n        nationalDrugUnitCount: \"string\",\n        measurementUnitCode: \"ML\",\n        linkSequenceNumber: \"string\",\n        pharmacyPrescriptionNumber: \"string\",\n        conversionFormula: \"string\",\n        drugDescription: \"string\",\n    },\n    orderingProvider: {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n    testResults: [\n        {\n            value: 1.1,\n            resultType: \"HEMATOCRIT\",\n        },\n    ],\n    hasEpsdtIndicator: true,\n    hasFamilyPlanningIndicator: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Searching for Patients using Candid Health API in TypeScript\nDESCRIPTION: Example showing how to search for patients with the getMulti method. The request can include parameters like limit, MRN, page token, sort field, and sort direction to filter and paginate the results.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_166\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.getMulti({\n    limit: 1,\n    mrn: \"string\",\n    pageToken: CandidApi.PageToken(\"string\"),\n    sortField: CandidApi.PatientSortField(\"string\"),\n    sortDirection: \"asc\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Service Line in TypeScript\nDESCRIPTION: This code snippet shows how to update an existing service line using the Candid API client. It includes parameters for modifying various aspects of the service line.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.serviceLines.v2.update(CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    editReason: \"string\",\n    modifiers: [\"AV\"],\n    chargeAmountCents: 1,\n    diagnosisIdZero: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    diagnosisIdOne: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    diagnosisIdTwo: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    diagnosisIdThree: CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    drugIdentification: {\n        serviceIdQualifier: \"EN\",\n        nationalDrugCode: \"string\",\n        nationalDrugUnitCount: \"string\",\n        measurementUnitCode: \"ML\",\n        linkSequenceNumber: \"string\",\n        pharmacyPrescriptionNumber: \"string\",\n        conversionFormula: \"string\",\n        drugDescription: \"string\",\n    },\n    denialReason: {\n        reason: \"Authorization Required\",\n    },\n    placeOfServiceCode: \"01\",\n    units: \"MJ\",\n    procedureCode: \"string\",\n    quantity: CandidApi.Decimal(\"string\"),\n    description: \"string\",\n    dateOfService: \"2023-01-15\",\n    endDateOfService: \"2023-01-15\",\n    testResults: [\n        {\n            value: 1.1,\n            resultType: \"HEMATOCRIT\",\n        },\n    ],\n    hasEpsdtIndicator: true,\n    hasFamilyPlanningIndicator: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Guarantor in TypeScript using Candid API\nDESCRIPTION: Example of updating a guarantor's information including personal details, address, contact information, and consent settings using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.guarantor.v1.update(CandidApi.GuarantorId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    firstName: \"string\",\n    lastName: \"string\",\n    externalId: \"string\",\n    dateOfBirth: \"2023-01-15\",\n    address: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n    phoneNumbers: [\n        {\n            number: \"1234567890\",\n            type: \"Home\",\n        },\n    ],\n    phoneConsent: true,\n    email: CandidApi.Email(\"johndoe@joincandidhealth.com\"),\n    emailConsent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Supervising Provider for an Encounter in TypeScript\nDESCRIPTION: Demonstrates how to update the supervising provider information for a specific healthcare encounter using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.updateSupervisingProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Computing Network Status for Rendering Provider in TypeScript\nDESCRIPTION: Demonstrates how to check network status for a rendering provider. This method requires the provider ID and request parameters including service type, place of service, subscriber information, patient address, and date of service.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.expectedNetworkStatus.v2.computeForRenderingProvider(\n    CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        serviceType: \"new_patient_video_appt\",\n        placeOfServiceCode: \"01\",\n        subscriberInformation: {\n            payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            memberId: \"string\",\n            insuranceType: {\n                lineOfBusiness: \"medicare\",\n                insuranceTypeCodes: {\n                    type: \"insurance_type_code\",\n                    value: \"01\",\n                },\n            },\n        },\n        patientAddress: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        billingProviderId: CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        organizationServiceFacilityId: CandidApi.OrganizationServiceFacilityId(\"30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569\"),\n        dateOfService: \"2023-01-15\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Patient in Candid Node API\nDESCRIPTION: Updates a patient record with detailed information including personal details, contact information, insurance information, and medical associations. The request must include the most recent version to prevent race conditions.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_170\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.update(CandidApi.PatientId(\"string\"), \"string\", {\n    name: {\n        family: \"string\",\n        given: [\"string\"],\n        use: \"USUAL\",\n        period: {},\n        suffix: \"string\",\n    },\n    otherNames: [\n        {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n    ],\n    otherIdentifiers: [\n        {\n            value: \"string\",\n            system: \"string\",\n        },\n    ],\n    gender: \"MAN\",\n    birthDate: \"2023-01-15\",\n    socialSecurityNumber: \"string\",\n    biologicalSex: \"FEMALE\",\n    sexualOrientation: \"HETEROSEXUAL\",\n    pronouns: [\"string\"],\n    race: \"AMERICAN_INDIAN_OR_ALASKA_NATIVE\",\n    ethnicity: \"HISPANIC_OR_LATINO\",\n    disabilityStatus: \"DISABLED\",\n    maritalStatus: \"ANNULLED\",\n    deceased: \"2024-01-15T09:30:00Z\",\n    multipleBirth: 1,\n    primaryAddress: {\n        use: \"HOME\",\n        line: [\"string\"],\n        city: \"string\",\n        state: \"string\",\n        postalCode: \"string\",\n        country: \"string\",\n        period: {},\n    },\n    otherAddresses: [\n        {\n            use: \"HOME\",\n            line: [\"string\"],\n            city: \"string\",\n            state: \"string\",\n            postalCode: \"string\",\n            country: \"string\",\n            period: {},\n        },\n    ],\n    primaryTelecom: {\n        value: \"string\",\n        use: \"HOME\",\n    },\n    otherTelecoms: [\n        {\n            value: \"string\",\n            use: \"HOME\",\n        },\n    ],\n    email: \"string\",\n    electronicCommunicationOptIn: true,\n    photo: \"string\",\n    language: \"string\",\n    externalProvenance: {\n        externalId: \"string\",\n        systemName: \"string\",\n    },\n    contacts: [\n        {\n            relationship: [\"SELF\"],\n            name: {\n                family: \"string\",\n                given: [\"string\"],\n                use: \"USUAL\",\n                period: {},\n                suffix: \"string\",\n            },\n            telecoms: [\n                {\n                    value: \"string\",\n                    use: \"HOME\",\n                },\n            ],\n            addresses: [\n                {\n                    use: \"HOME\",\n                    line: [\"string\"],\n                    city: \"string\",\n                    state: \"string\",\n                    postalCode: \"string\",\n                    country: \"string\",\n                    period: {},\n                },\n            ],\n            period: {},\n            hipaaAuthorization: true,\n        },\n    ],\n    generalPractitioners: [\n        {\n            name: {\n                family: \"string\",\n                given: [\"string\"],\n                use: \"USUAL\",\n                period: {},\n                suffix: \"string\",\n            },\n            type: \"PRIMARY\",\n            npi: \"string\",\n            telecoms: [\n                {\n                    value: \"string\",\n                    use: \"HOME\",\n                },\n            ],\n            addresses: [],\n            period: {},\n            canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n            fax: \"string\",\n        },\n    ],\n    filingOrder: {\n        coverages: [CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")],\n    },\n    nonInsurancePayers: [CandidApi.CanonicalNonInsurancePayerId(\"string\")],\n    nonInsurancePayerAssociations: [\n        {\n            id: CandidApi.CanonicalNonInsurancePayerId(\"string\"),\n        },\n    ],\n    guarantor: {\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        telecom: {\n            value: \"string\",\n            use: \"HOME\",\n        },\n        email: \"string\",\n        birthDate: \"2023-01-15\",\n        address: {\n            use: \"HOME\",\n            line: [\"string\"],\n            city: \"string\",\n            state: \"string\",\n            postalCode: \"string\",\n            country: \"string\",\n            period: {},\n        },\n    },\n    selfPay: true,\n    authorizations: [\n        {\n            payerId: CandidApi.PayerId(\"string\"),\n            payerName: \"string\",\n            additionalPayerInformation: {},\n            authorizationNumber: \"string\",\n            cptCode: \"string\",\n            applyForAllCptCodes: true,\n            units: \"VISIT\",\n            quantity: 1,\n            period: {},\n            notes: \"string\",\n        },\n    ],\n    referrals: [\n        {\n            provider: {\n                name: {\n                    family: \"string\",\n                    given: [\"string\"],\n                    use: \"USUAL\",\n                    period: {},\n                    suffix: \"string\",\n                },\n                type: \"PRIMARY\",\n                npi: \"string\",\n                telecoms: [\n                    {\n                        value: \"string\",\n                        use: \"HOME\",\n                    },\n                ],\n                addresses: [],\n                period: {},\n                canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n                fax: \"string\",\n            },\n            referralNumber: \"string\",\n        },\n    ],\n    primaryServiceFacilityId: \"string\",\n    doNotInvoiceReason: \"BANKRUPTCY\",\n    noteIds: [CandidApi.NoteId(\"string\")],\n    tagIds: [CandidApi.TagId(\"string\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Insurance Refunds with TypeScript\nDESCRIPTION: Shows how to query insurance refunds with various filter parameters. This endpoint returns all insurance refunds matching the criteria whose organization_id matches the authenticated user's organization.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceRefunds.v1.getMulti({\n    limit: 1,\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    claimId: CandidApi.ClaimId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    serviceLineId: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    billingProviderId: CandidApi.ProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sort: \"amount_cents\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Providers in TypeScript\nDESCRIPTION: Collection of methods for deleting different types of providers (referring, initial referring, supervising, ordering) from encounters and service lines.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.deleteReferringProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.deleteInitialReferringProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.deleteSupervisingProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.deleteOrderingProvider(\n    CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Insurance Coverage in Candid Health API\nDESCRIPTION: Creates a new insurance coverage record with detailed information about the plan, subscriber, and benefits. Links the coverage to a specific patient and includes eligibility verification details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_142\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.create({\n    status: \"ACTIVE\",\n    subscriber: {\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        dateOfBirth: \"2023-01-15\",\n        biologicalSex: \"FEMALE\",\n        address: {\n            use: \"HOME\",\n            line: [\"string\"],\n            city: \"string\",\n            state: \"string\",\n            postalCode: \"string\",\n            country: \"string\",\n            period: {},\n        },\n    },\n    relationship: \"SELF\",\n    patient: CandidApi.PatientId(\"string\"),\n    insurancePlan: {\n        memberId: \"string\",\n        payerId: CandidApi.PayerId(\"string\"),\n        payerName: \"string\",\n        additionalPayerInformation: {},\n        groupNumber: \"string\",\n        name: \"string\",\n        planType: \"09\",\n        type: \"01\",\n        period: {},\n        insuranceCardImageLocator: \"string\",\n        payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    },\n    verified: true,\n    eligibilityChecks: [],\n    latestEligibilityCheck: {\n        checkId: \"string\",\n        status: \"ACTIVE\",\n        initiatedAt: \"2024-01-15T09:30:00Z\",\n    },\n    benefits: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Expected Network Status with TypeScript\nDESCRIPTION: This example demonstrates how to compute the expected network status based on patient and provider information. It utilizes the expectedNetworkStatus.v1.compute endpoint with all required parameters.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.expectedNetworkStatus.v1.compute({\n    externalPatientId: \"string\",\n    subscriberPayerId: \"string\",\n    subscriberPayerName: \"string\",\n    subscriberInsuranceType: \"01\",\n    subscriberPlanName: \"string\",\n    billingProviderNpi: \"string\",\n    billingProviderTin: \"string\",\n    renderingProviderNpi: \"string\",\n    contractedState: \"AA\",\n    dateOfService: CandidApi.Date_(\"string\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Non-Insurance Payer Payments with TypeScript\nDESCRIPTION: Shows how to query non-insurance payer payments with various filter parameters, pagination, and sorting options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerPayments.v1.getMulti({\n    limit: 1,\n    nonInsurancePayerId: CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    checkNumber: \"string\",\n    invoiceId: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sort: \"amount_cents\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Service Line Against Rate in TypeScript\nDESCRIPTION: Demonstrates how to test if a specific service line matches against a particular rate. This endpoint requires both the service line ID and rate ID to perform the comparison.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.testMatch(\n    CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    CandidApi.RateId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payer Information in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve information about a specific payer using the Candid API client. It requires the payer UUID as a parameter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payers.v3.get(CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Updating an Encounter in TypeScript\nDESCRIPTION: This example shows how to update an existing encounter using its ID. The update includes changing diagnosis IDs and the place of service code.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounters.v4.update(CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    diagnosisIds: [CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")],\n    placeOfServiceCodeAsSubmitted: \"01\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eligibility Check Results - TypeScript\nDESCRIPTION: Retrieves the results of a specific eligibility check for a coverage record.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_151\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.getEligibility(\n    CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    \"string\",\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointment Version History in Candid Health API\nDESCRIPTION: Fetches the complete history of an appointment with all its versions. Returns a list of appointment objects ordered by version in ascending order.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.getHistory(CandidApi.AppointmentId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Write-Offs with Candid API\nDESCRIPTION: Demonstrates creating one or more write-offs through the API. This example creates a patient write-off with a specific reason, timestamp, and amount.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_131\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.writeOffs.v1.create({\n    writeOffs: [\n        {\n            type: \"patient\",\n            writeOffTimestamp: \"2024-01-15T09:30:00Z\",\n            writeOffNote: \"string\",\n            writeOffReason: \"SMALL_BALANCE\",\n            serviceLineId: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            amountCents: 1,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Searching for Healthcare Providers using Candid Health API in TypeScript\nDESCRIPTION: Example showing how to search for referring providers using the searchProviders method. The search is case-insensitive, supports fuzzy matching, and matches against provider name and NPI. The method returns up to 20 results.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_167\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.searchProviders({\n    searchCriteria: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Coverage Information - TypeScript\nDESCRIPTION: Updates coverage information for a patient including subscriber details, insurance plan information, and eligibility status. Takes a coverage ID, version string, and comprehensive coverage object as parameters.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_143\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.update(CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), \"string\", {\n    status: \"ACTIVE\",\n    subscriber: {\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        dateOfBirth: \"2023-01-15\",\n        biologicalSex: \"FEMALE\",\n        address: {\n            use: \"HOME\",\n            line: [\"string\"],\n            city: \"string\",\n            state: \"string\",\n            postalCode: \"string\",\n            country: \"string\",\n            period: {},\n        },\n    },\n    relationship: \"SELF\",\n    patient: CandidApi.PatientId(\"string\"),\n    insurancePlan: {\n        memberId: \"string\",\n        payerId: CandidApi.PayerId(\"string\"),\n        payerName: \"string\",\n        additionalPayerInformation: {},\n        groupNumber: \"string\",\n        name: \"string\",\n        planType: \"09\",\n        type: \"01\",\n        period: {},\n        insuranceCardImageLocator: \"string\",\n        payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    },\n    verified: true,\n    eligibilityChecks: [],\n    latestEligibilityCheck: {\n        checkId: \"string\",\n        status: \"ACTIVE\",\n        initiatedAt: \"2024-01-15T09:30:00Z\",\n    },\n    benefits: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Referring Provider for an Encounter in TypeScript\nDESCRIPTION: Demonstrates how to update the referring provider information for a specific encounter. Includes patient address details and provider identification information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.updateReferringProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Update Patient Payment\nDESCRIPTION: Updates an existing patient payment record with new timestamp, note, or invoice information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientPayments.v4.update(CandidApi.PatientPaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    paymentTimestamp: \"2024-01-15T09:30:00Z\",\n    paymentNote: {\n        type: \"set\",\n        value: \"string\",\n    },\n    invoice: {\n        type: \"set\",\n        value: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Insurance Payment Data with TypeScript\nDESCRIPTION: Demonstrates how to retrieve a specific insurance payment by its ID using the Candid API client. Returns the insurance payment object if found, otherwise throws a 403 error.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insurancePayments.v1.get(CandidApi.InsurancePaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Appointment by ID in Candid Health API\nDESCRIPTION: Gets a specific appointment by its unique identifier. Requires an appointment ID formatted as a CandidApi.AppointmentId type.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.get(CandidApi.AppointmentId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointments with Pagination and Filtering in Candid Health API\nDESCRIPTION: Retrieves a paginated list of visits/appointments using the preEncounter appointments API. Supports pagination tokens, result limits, sorting, and filtering options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_136\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.getVisits({\n    pageToken: CandidApi.PageToken(\"string\"),\n    limit: 1,\n    sortField: CandidApi.SortFieldString(\"string\"),\n    sortDirection: \"asc\",\n    filters: CandidApi.FilterQueryString(\"string\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Ordering Provider for a Service Line in TypeScript\nDESCRIPTION: Shows how to update the ordering provider information for a specific service line rather than an entire encounter, using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.updateOrderingProvider(\n    CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Image with PreEncounter API in TypeScript\nDESCRIPTION: This snippet shows how to create an image using the PreEncounter API. It includes parameters for file details, coverage information, and patient data.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_153\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.images.v1.create({\n    fileName: \"string\",\n    displayName: \"string\",\n    fileType: \"string\",\n    status: \"PENDING\",\n    coverage: {\n        id: CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        side: \"FRONT\",\n    },\n    patient: {\n        id: CandidApi.PatientId(\"string\"),\n        notes: \"string\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning for Recent Appointment Updates in Candid Health API\nDESCRIPTION: Retrieves up to 100 appointment updates since a specified timestamp. Results are ordered by updatedAt timestamp in ascending order.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_140\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.scan({\n    since: \"2024-01-15T09:30:00Z\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Contract\nDESCRIPTION: Creates a new contract within the user's current organization with full contract details\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contracts.v2.create({\n    contractingProviderId: CandidApi.ContractingProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    renderingProviderIds: new Set([CandidApi.RenderingProviderid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")]),\n    payerUuid: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    effectiveDate: CandidApi.Date_(\"string\"),\n    expirationDate: CandidApi.Date_(\"string\"),\n    regions: {\n        type: \"states\",\n    },\n    contractStatus: \"pending\",\n    authorizedSignatory: {\n        firstName: \"string\",\n        lastName: \"string\",\n        title: \"string\",\n        email: \"string\",\n        phone: \"string\",\n        fax: \"string\",\n    },\n    commercialInsuranceTypes: {\n        type: \"allApply\",\n    },\n    medicareInsuranceTypes: {\n        type: \"allApply\",\n    },\n    medicaidInsuranceTypes: {\n        type: \"allApply\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Payer Plan Group - TypeScript\nDESCRIPTION: Updates payer plan group fields for all coverages associated with a specific PPG ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.batchUpdatePpg(\n    CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        payerPlanGroupId: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        payerId: CandidApi.PayerId(\"string\"),\n        payerName: \"string\",\n        planType: \"09\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Search Organization Providers\nDESCRIPTION: Retrieves multiple organization providers with filtering, sorting and pagination options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationProviders.v3.getMulti({\n    limit: 100,\n    searchTerm: \"john\",\n    npi: \"1234567890\",\n    isRendering: true,\n    isBilling: true,\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    sort: \"provider_name:asc\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Insurance Payer Refund in TypeScript\nDESCRIPTION: Creates a new non-insurance payer refund record with specified details such as payer ID, amount, timestamp, and allocations.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerRefunds.v1.create({\n    nonInsurancePayerId: CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    invoiceId: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    amountCents: 1,\n    refundTimestamp: \"2024-01-15T09:30:00Z\",\n    refundNote: \"string\",\n    checkNumber: \"string\",\n    allocations: [\n        {\n            amountCents: 1,\n            target: {\n                type: \"service_line_by_id\",\n                value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            },\n        },\n    ],\n    refundReason: \"OVERCHARGED\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding All In-Network Providers in TypeScript\nDESCRIPTION: Shows how to find all in-network providers for a given set of parameters. This endpoint may require special access through the Candid sales team and includes details like service type, insurance information, and location data.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.expectedNetworkStatus.v2.computeAllInNetworkProviders({\n    serviceType: \"new_patient_video_appt\",\n    placeOfServiceCode: \"01\",\n    subscriberInformation: {\n        payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        memberId: \"string\",\n        insuranceType: {\n            lineOfBusiness: \"medicare\",\n            insuranceTypeCodes: {\n                type: \"insurance_type_code\",\n                value: \"01\",\n            },\n        },\n    },\n    patientAddress: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n    billingProviderId: CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    organizationServiceFacilityId: CandidApi.OrganizationServiceFacilityId(\"30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569\"),\n    dateOfService: \"2023-01-15\",\n});\n```\n\n----------------------------------------\n\nTITLE: Create Organization Provider\nDESCRIPTION: Creates a new organization provider with detailed provider information including address and qualifications.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationProviders.v3.create({\n    npi: \"string\",\n    isRendering: true,\n    isBilling: true,\n    firstName: \"string\",\n    lastName: \"string\",\n    organizationName: \"string\",\n    providerType: \"INDIVIDUAL\",\n    taxId: \"string\",\n    taxonomyCode: \"string\",\n    licenseType: \"MD\",\n    addresses: [\n        {\n            address: {\n                address1: \"123 Main St\",\n                address2: \"Apt 1\",\n                city: \"New York\",\n                state: \"NY\",\n                zipCode: \"10001\",\n                zipPlusFourCode: \"1234\",\n            },\n            addressType: \"DEFAULT\",\n        },\n    ],\n    employmentStartDate: \"2023-01-15\",\n    employmentTerminationDate: \"2023-01-15\",\n    qualifications: [\n        {\n            period: {\n                startDate: CandidApi.Date_(\"string\"),\n            },\n            identifierCode: \"MCR\",\n            identifierValue: {\n                type: \"medicare_provider_identifier\",\n            },\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Payer Plan Group in TypeScript\nDESCRIPTION: Creates a new payer plan group with the specified name, payer UUID, and plan type using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payerPlanGroups.v1.create({\n    planGroupName: \"string\",\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    planType: \"09\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Non-Insurance Payers\nDESCRIPTION: Fetches multiple non-insurance payers with optional filtering, sorting and pagination parameters\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayers.v1.getMulti({\n    name: \"string\",\n    category: \"string\",\n    enabled: true,\n    sort: \"NAME\",\n    sortDirection: \"asc\",\n    limit: 1,\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Imported Invoice in TypeScript using Candid API\nDESCRIPTION: Example of updating an existing imported invoice with new information, such as URL, status, notes, due date, and line items.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.importInvoice.v1.update(CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    customerInvoiceUrl: \"string\",\n    status: \"DRAFT\",\n    note: \"string\",\n    dueDate: \"2023-01-15\",\n    items: {\n        updateType: \"APPEND\",\n        items: [\n            {\n                attribution: {\n                    type: \"service_line_id\",\n                    value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n                },\n                amountCents: 1,\n            },\n        ],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Insurance Refund with TypeScript\nDESCRIPTION: Demonstrates how to create a new insurance refund record. The request includes refund details and allocations that can target specific service lines, claims, or billing providers.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceRefunds.v1.create({\n    payerIdentifier: {\n        type: \"payer_info\",\n    },\n    amountCents: 1,\n    refundTimestamp: \"2024-01-15T09:30:00Z\",\n    refundNote: \"string\",\n    allocations: [\n        {\n            amountCents: 1,\n            target: {\n                type: \"service_line_by_id\",\n                value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            },\n        },\n    ],\n    refundReason: \"OVERCHARGED\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Insurance Payer Payment in TypeScript\nDESCRIPTION: Creates a new non-insurance payer payment record with specified details such as payer ID, amount, timestamp, and allocations.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerPayments.v1.create({\n    nonInsurancePayerId: CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    amountCents: 1,\n    paymentTimestamp: \"2024-01-15T09:30:00Z\",\n    paymentNote: \"string\",\n    checkNumber: \"string\",\n    allocations: [\n        {\n            amountCents: 1,\n            target: {\n                type: \"service_line_by_id\",\n                value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            },\n        },\n    ],\n    invoiceId: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Provider Credentialings\nDESCRIPTION: Fetches multiple provider credentialing spans with filtering and pagination options\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.credentialing.v2.getAll({\n    limit: 1,\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    payerUuid: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    providerId: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    asRenderingProvider: true,\n    asContractingProvider: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Payer Plan Group in TypeScript\nDESCRIPTION: Retrieves a specific payer plan group by its ID using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payerPlanGroups.v1.get(CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Note with PreEncounter API in TypeScript\nDESCRIPTION: This snippet shows how to create a new note using the PreEncounter API. It includes the note's value, author email, and author name.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_161\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.notes.v1.create({\n    value: \"string\",\n    authorEmail: \"string\",\n    authorName: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Patient Refund in TypeScript\nDESCRIPTION: Creates a new patient refund record with allocations specifying if the refund applies to a specific service line, claim, or billing provider. Returns the newly created PatientRefund object.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientRefunds.v1.create({\n    amountCents: 1,\n    refundTimestamp: \"2024-01-15T09:30:00Z\",\n    refundNote: \"string\",\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    allocations: [\n        {\n            amountCents: 1,\n            target: {\n                type: \"service_line_by_id\",\n                value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            },\n        },\n    ],\n    invoice: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    refundReason: \"OVERCHARGED\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Insurance Payer\nDESCRIPTION: Creates a new non-insurance payer with specified details including name, description, category, address and clinical trials information\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayers.v1.create({\n    name: \"string\",\n    description: \"string\",\n    category: \"string\",\n    address: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n    clinicalTrials: [\n        {\n            name: \"string\",\n            clinicalTrialNumber: \"string\",\n            clinicalTrialPhase: \"Phase 1\",\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Organization Service Facilities\nDESCRIPTION: Fetches multiple organization service facilities with optional filtering and pagination\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationServiceFacilities.v2.getMulti({\n    limit: 100,\n    name: \"Test Service Facility\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Charge Captures\nDESCRIPTION: Fetches multiple charge captures with filtering and pagination options\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCapture.v1.getAll({\n    limit: 1,\n    sort: \"created_at\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    patientExternalId: \"string\",\n    status: \"planned\",\n    chargeExternalId: \"string\",\n    dateOfService: \"2023-01-15\",\n    bundleId: CandidApi.ChargeCaptureBundleId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    excludeBundled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Imported Invoices in TypeScript using Candid API\nDESCRIPTION: Example of querying multiple imported invoices with filters for patient ID, encounter ID, date ranges, status, and pagination options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.importInvoice.v1.getMulti({\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    encounterExternalId: CandidApi.EncounterExternalId(\"string\"),\n    note: \"string\",\n    dueDateBefore: \"2023-01-15\",\n    dueDateAfter: \"2023-01-15\",\n    status: \"DRAFT\",\n    limit: 1,\n    sort: \"CREATED_AT\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Appointment in Candid Health API\nDESCRIPTION: Updates an appointment with new information. Requires the appointment ID, current version to prevent race conditions, and updated appointment details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_139\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.update(CandidApi.AppointmentId(\"string\"), \"string\", {\n    patientId: CandidApi.PatientId(\"string\"),\n    startTimestamp: \"2024-01-15T09:30:00Z\",\n    status: \"PENDING\",\n    serviceDuration: 1,\n    services: [\n        {\n            universalServiceIdentifier: \"MD_Visit\",\n            startTimestamp: \"2024-01-15T09:30:00Z\",\n        },\n    ],\n    placerAppointmentId: \"string\",\n    attendingDoctor: {\n        name: {\n            family: \"string\",\n            given: [\"string\"],\n            use: \"USUAL\",\n            period: {},\n            suffix: \"string\",\n        },\n        type: \"PRIMARY\",\n        npi: \"string\",\n        telecoms: [\n            {\n                value: \"string\",\n                use: \"HOME\",\n            },\n        ],\n        addresses: [],\n        period: {},\n        canonicalId: CandidApi.CanonicalProviderId(\"string\"),\n        fax: \"string\",\n    },\n    estimatedCopayCents: 1,\n    estimatedPatientResponsibilityCents: 1,\n    patientDepositCents: 1,\n    checkedInTimestamp: \"2024-01-15T09:30:00Z\",\n    notes: \"string\",\n    locationResourceId: \"string\",\n    automatedEligibilityCheckComplete: true,\n    workQueue: \"EMERGENT_ISSUE\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deactivating an Image with PreEncounter API in TypeScript\nDESCRIPTION: This snippet demonstrates how to deactivate an image using the PreEncounter API. It requires the image ID and version.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.images.v1.deactivate(CandidApi.ImageId(\"string\"), \"string\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Write-Off by ID\nDESCRIPTION: Shows how to retrieve a single write-off record by its unique identifier using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.writeOffs.v1.get(CandidApi.WriteOffId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Contracts\nDESCRIPTION: Fetches multiple contracts with filtering and pagination options\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contracts.v2.getMulti({\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    limit: 1,\n    contractingProviderId: CandidApi.ContractingProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    renderingProviderIds: CandidApi.RenderingProviderid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    payerNames: \"string\",\n    states: \"AA\",\n    contractStatus: \"pending\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Medication Dispense Record with TypeScript\nDESCRIPTION: Shows how to create a medication dispense record with details like drug identification, procedure code, quantity and units, and date of service.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.medicationDispense.v1.create({\n    medicationDispenseExternalId: \"string\",\n    patientExternalId: \"string\",\n    procedureCode: \"string\",\n    quantity: CandidApi.Decimal(\"string\"),\n    units: \"MJ\",\n    dateOfService: \"2023-01-15\",\n    drugIdentification: {\n        serviceIdQualifier: \"EN\",\n        nationalDrugCode: \"string\",\n        nationalDrugUnitCount: \"string\",\n        measurementUnitCode: \"ML\",\n        linkSequenceNumber: \"string\",\n        pharmacyPrescriptionNumber: \"string\",\n        conversionFormula: \"string\",\n        drugDescription: \"string\",\n    },\n    description: \"string\",\n    modifiers: [\"AV\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Supervising Provider in TypeScript\nDESCRIPTION: Creates a supervising provider for an encounter. Requires encounter ID and provider details including NPI, taxonomy code, address and name information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.createSupervisingProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Provider Credentialing\nDESCRIPTION: Creates a new provider credentialing span with specified details\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.credentialing.v2.create({\n    renderingProviderId: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    contractingProviderId: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    payerUuid: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    startDate: \"2023-01-15\",\n    endDate: \"2023-01-15\",\n    regions: {\n        type: \"states\",\n        states: [\"AA\"],\n    },\n    submittedDate: \"2023-01-15\",\n    payerLoadedDate: \"2023-01-15\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Non-Insurance Payer Refund in TypeScript\nDESCRIPTION: Updates an existing non-insurance payer refund record with new details such as refund timestamp, note, reason, and invoice ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerRefunds.v1.update(\n    CandidApi.NonInsurancePayerRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        refundTimestamp: \"2024-01-15T09:30:00Z\",\n        refundNote: {\n            type: \"set\",\n            value: \"string\",\n        },\n        refundReason: {\n            type: \"set\",\n            value: \"OVERCHARGED\",\n        },\n        invoiceId: {\n            type: \"set\",\n            value: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        },\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exports Data in TypeScript\nDESCRIPTION: Shows how to retrieve CSV-formatted reports on claim submissions and outcomes. This endpoint returns Export objects with authenticated URLs that have a 2-minute time-to-live and includes date range parameters.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.exports.v3.getExports({\n    startDate: \"2023-10-01\",\n    endDate: \"2023-10-02\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Diagnosis in TypeScript\nDESCRIPTION: Creates a new diagnosis for an encounter. This method adds a new diagnosis record associated with a specific encounter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_180\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.diagnoses.create({\n    encounterId: CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    name: \"string\",\n    codeType: \"ABF\",\n    code: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Guarantor in TypeScript\nDESCRIPTION: Creates a new guarantor and returns the newly created Guarantor object.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.guarantor.v1.create(CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    phoneNumbers: [\n        {\n            number: \"1234567890\",\n            type: \"Home\",\n        },\n    ],\n    phoneConsent: true,\n    email: CandidApi.Email(\"johndoe@joincandidhealth.com\"),\n    emailConsent: true,\n    firstName: \"string\",\n    lastName: \"string\",\n    externalId: \"string\",\n    dateOfBirth: \"2023-01-15\",\n    address: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Update Organization Provider\nDESCRIPTION: Updates an existing organization provider's information including credentials and address details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationProviders.v3.update(CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    npi: \"string\",\n    isRendering: true,\n    isBilling: true,\n    firstName: \"string\",\n    lastName: \"string\",\n    organizationName: \"string\",\n    providerType: \"INDIVIDUAL\",\n    taxId: \"string\",\n    taxonomyCode: \"string\",\n    licenseType: \"MD\",\n    addresses: [\n        {\n            address: {\n                address1: \"123 Main St\",\n                address2: \"Apt 1\",\n                city: \"New York\",\n                state: \"NY\",\n                zipCode: \"10001\",\n                zipPlusFourCode: \"1234\",\n            },\n            addressType: \"DEFAULT\",\n        },\n    ],\n    employmentStartDate: CandidApi.Date_(\"string\"),\n    employmentTerminationDate: CandidApi.Date_(\"string\"),\n    qualifications: [\n        {\n            type: \"add\",\n            period: {\n                startDate: CandidApi.Date_(\"string\"),\n            },\n            identifierCode: \"MCR\",\n            identifierValue: {\n                type: \"medicare_provider_identifier\",\n            },\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Custom Schemas in CustomSchemas v1\nDESCRIPTION: Demonstrates how to fetch all custom schemas defined in the system using the getMulti endpoint.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customSchemas.v1.getMulti();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Non-Insurance Payer\nDESCRIPTION: Fetches a specific non-insurance payer by its UUID\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayers.v1.get(CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Service Facility\nDESCRIPTION: Creates a new organization service facility with specified details including name, aliases, status and address\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationServiceFacilities.v2.create({\n    name: \"Test Service Facility\",\n    aliases: [\"Test Service Facility Alias\"],\n    description: \"Test Service Facility Description\",\n    status: \"active\",\n    operationalStatus: \"C\",\n    mode: \"instance\",\n    type: \"DX\",\n    physicalType: \"si\",\n    telecoms: [\"555-555-5555\"],\n    address: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Custom Schema in CustomSchemas v1\nDESCRIPTION: Demonstrates creating a custom schema with typed fields that can be referenced in rules or attached to claims. The example creates a schema for general medicine with various field types.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customSchemas.v1.create({\n    name: \"General Medicine\",\n    description: \"Values associated with a generic visit\",\n    fields: [\n        {\n            key: \"provider_category\",\n            type: \"STRING\",\n        },\n        {\n            key: \"is_urgent_care\",\n            type: \"BOOLEAN\",\n        },\n        {\n            key: \"bmi\",\n            type: \"DOUBLE\",\n        },\n        {\n            key: \"age\",\n            type: \"INTEGER\",\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pre-Encounter Tag in TypeScript\nDESCRIPTION: Adds a new tag if it does not already exist, otherwise returns the existing tag. This method creates or retrieves a pre-encounter tag based on the provided value.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_177\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.tags.v1.create({\n    value: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Post-Billed Charge Change\nDESCRIPTION: Updates the status of a post-billed charge capture change\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCapture.v1.updatePostBilledChange(\n    CandidApi.ChargeCapturePostBilledChangeId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        resolved: true,\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Referring Provider in TypeScript\nDESCRIPTION: Creates a referring provider for an encounter. Requires encounter ID and provider details including NPI, taxonomy code, address and name information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.createReferringProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Requests\nDESCRIPTION: Example showing how to add custom headers to API requests.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.preEncounter.eligibilityChecks.v1.post(..., {\n    headers: {\n        'X-Custom-Header': 'custom value'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Charge Capture\nDESCRIPTION: Creates a new charge capture entry with patient and service information. Requires external IDs for linking with other systems.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCapture.v1.create({\n    data: {},\n    chargeExternalId: \"string\",\n    ehrSourceUrl: \"string\",\n    dateOfService: \"2023-01-15\",\n    patientExternalId: \"string\",\n    status: \"planned\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Service Facility\nDESCRIPTION: Fetches a specific organization service facility by its UUID\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationServiceFacilities.v2.get(\n    CandidApi.OrganizationServiceFacilityId(\"30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Reverting a Write-Off in Candid API\nDESCRIPTION: Shows how to revert a previously created write-off by providing its unique identifier to the revert endpoint.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.writeOffs.v1.revert(CandidApi.WriteOffId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Image with PreEncounter API in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve an image by its ID using the PreEncounter API.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_154\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.images.v1.get(CandidApi.ImageId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeouts\nDESCRIPTION: Example showing how to set custom timeout values for API requests.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.preEncounter.eligibilityChecks.v1.post(..., {\n    timeoutInSeconds: 30 // override timeout to 30s\n});\n```\n\n----------------------------------------\n\nTITLE: Importing an Invoice in TypeScript using Candid API\nDESCRIPTION: Example of importing an existing invoice from a third-party service to Candid, including customer information, due dates, line items, and status details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.importInvoice.v1.importInvoice({\n    externalPaymentAccountConfigId: CandidApi.PaymentAccountConfigId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    externalCustomerIdentifier: \"string\",\n    note: \"string\",\n    dueDate: \"2023-01-15\",\n    items: [\n        {\n            attribution: {\n                type: \"service_line_id\",\n                value: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            },\n            amountCents: 1,\n        },\n    ],\n    status: \"DRAFT\",\n    externalIdentifier: \"string\",\n    customerInvoiceUrl: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Charge Capture Bundle Summary\nDESCRIPTION: Retrieves a summary of charge capture bundles for the current organization.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCaptureBundles.v1.getSummary();\n```\n\n----------------------------------------\n\nTITLE: Updating an Image with PreEncounter API in TypeScript\nDESCRIPTION: This snippet shows how to update an existing image using the PreEncounter API. It requires the image ID and version, along with the updated image details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.images.v1.update(CandidApi.ImageId(\"string\"), \"string\", {\n    fileName: \"string\",\n    displayName: \"string\",\n    fileType: \"string\",\n    status: \"PENDING\",\n    coverage: {\n        id: CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        side: \"FRONT\",\n    },\n    patient: {\n        id: CandidApi.PatientId(\"string\"),\n        notes: \"string\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Fee Schedule Rate Match for Service Line in TypeScript\nDESCRIPTION: Shows how to retrieve the rate that matches a specific service line. No result means no rate exists matching the service line's dimensions. This endpoint only requires the service line ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.getMatch(CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Billing Note\nDESCRIPTION: Creates a new billing note associated with a specific encounter. Requires an encounter ID and text content for the note.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.billingNotes.v2.create({\n    encounterId: CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    text: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Eligibility Check with Availity in TypeScript\nDESCRIPTION: Demonstrates how to submit an eligibility check using Availity's API through the Candid client. This endpoint is being deprecated in favor of Candid's Stedi passthrough endpoint.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.eligibility.v2.submitEligibilityCheckAvaility();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Note with PreEncounter API in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a note by its ID using the PreEncounter API.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_160\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.notes.v1.get(CandidApi.NoteId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Uploading Fee Schedule in TypeScript\nDESCRIPTION: Uploads a new fee schedule. Each rate may be new or a new version of an existing rate. Use the dry run flag to discover existing rates and run validations.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.uploadFeeSchedule({\n    dryRun: true,\n    rates: [\n        {\n            type: \"new_rate\",\n            dimensions: {\n                payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n                organizationBillingProviderId: CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n                states: new Set([\"AA\"]),\n                zipCodes: new Set([\"string\"]),\n                licenseTypes: new Set([\"MD\"]),\n                facilityTypeCodes: new Set([\"01\"]),\n                networkTypes: new Set([\"12\"]),\n                payerPlanGroupIds: new Set([CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")]),\n                cptCode: \"string\",\n                modifiers: new Set([\"AV\"]),\n            },\n            entries: [\n                {\n                    startDate: \"2024-04-11\",\n                    rateCents: 33000,\n                    isDeactivated: false,\n                },\n            ],\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All Pre-Encounter Tags in TypeScript\nDESCRIPTION: Gets all tags with pagination support. This method retrieves all pre-encounter tags, defaulting to a page size of 1000.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_176\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.tags.v1.getAll({\n    limit: 1,\n    pageToken: CandidApi.PageToken(\"string\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Rate in TypeScript\nDESCRIPTION: Soft deletes a rate from the system. Only the most recent version of a rate can be deleted.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.deleteRate(CandidApi.RateId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), 1);\n```\n\n----------------------------------------\n\nTITLE: Updating a Note with PreEncounter API in TypeScript\nDESCRIPTION: This snippet demonstrates how to update an existing note using the PreEncounter API. It requires the note ID and version, along with the updated note details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_162\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.notes.v1.update(CandidApi.NoteId(\"string\"), \"string\", {\n    value: \"string\",\n    authorEmail: \"string\",\n    authorName: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Patient in Candid Node API\nDESCRIPTION: Sets a patient as deactivated. The path must include the most recent version plus 1 to prevent race conditions. Historic versions cannot be deactivated.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_171\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.deactivate(CandidApi.PatientId(\"string\"), \"string\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Patient Refund in TypeScript\nDESCRIPTION: Retrieves a previously created patient refund by its patient_refund_id using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientRefunds.v1.get(CandidApi.PatientRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Reverting Insurance Balance Adjustment in Candid API\nDESCRIPTION: Example showing how to revert an insurance balance adjustment by providing its adjustment ID to the appropriate API endpoint.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.writeOffs.v1.revertInsuranceBalanceAdjustment(\n    CandidApi.AdjustmentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Insurance Refund with TypeScript\nDESCRIPTION: Shows how to retrieve a specific insurance refund by its ID. This endpoint returns the refund details or throws a 403 error if the refund doesn't exist.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceRefunds.v1.get(CandidApi.InsuranceRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Reactivating a Patient in Candid Node API\nDESCRIPTION: Removes the deactivated flag for a patient. The path must include the most recent version plus 1 to prevent race conditions. Historic versions cannot be reactivated.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_172\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.reactivate(CandidApi.PatientId(\"string\"), \"string\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Insurance Adjudication in TypeScript using Candid API\nDESCRIPTION: Example of retrieving details of a specific insurance adjudication by its ID using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceAdjudications.v1.get(CandidApi.InsuranceAdjudicationId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Payer Threshold in TypeScript\nDESCRIPTION: Sets the threshold information for a payer.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.setPayerThreshold(CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    upperThresholdCents: 1,\n    lowerThresholdCents: 1,\n    disablePaidIncorrectly: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Actions in TypeScript\nDESCRIPTION: This code snippet shows how to retrieve actions associated with a specific task using the Candid API client. It requires the task ID as a parameter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tasks.v3.getActions(CandidApi.TaskId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Coverages - TypeScript\nDESCRIPTION: Fetches multiple coverage records based on patient ID search criteria.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.getMulti({\n    patientId: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Guarantor in TypeScript\nDESCRIPTION: Retrieves a guarantor by its guarantor_id.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.guarantor.v1.get(CandidApi.GuarantorId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Payer Threshold in TypeScript\nDESCRIPTION: Gets the default payer threshold.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.getPayerThresholdsDefault();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Patient History using Candid Health API in TypeScript\nDESCRIPTION: Example showing how to retrieve a patient's complete history using the getHistory method. The method returns an array of patient records ordered by version ascending, showing all historical versions of the patient record.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_169\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.patients.v1.getHistory(CandidApi.PatientId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coverage History - TypeScript\nDESCRIPTION: Fetches the complete history of a coverage record, returning versions in ascending order.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_146\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.coverages.v1.getHistory(CandidApi.CoverageId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider Credentialing by ID\nDESCRIPTION: Gets a single provider credentialing span using its unique identifier\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.credentialing.v2.get(CandidApi.ProviderCredentialingSpanId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Patient Refund in TypeScript\nDESCRIPTION: Deletes the patient refund record matching the provided patient_refund_id using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientRefunds.v1.delete(CandidApi.PatientRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Write-Offs with Candid API\nDESCRIPTION: Demonstrates retrieving write-offs based on various filter criteria including patient ID, payer, service line, and more. Includes pagination and sorting options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.writeOffs.v1.getMulti({\n    limit: 1,\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    serviceLineId: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    claimId: CandidApi.ClaimId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    billingProviderId: CandidApi.ProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sort: \"amount_cents\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    accountTypes: \"PATIENT\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Diagnosis in TypeScript\nDESCRIPTION: Updates the diagnosis record matching the provided diagnosis_id. This method modifies an existing diagnosis with new information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_181\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.diagnoses.update(CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    name: \"string\",\n    codeType: \"ABF\",\n    code: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Charge Capture by ID\nDESCRIPTION: Gets a single charge capture record using its unique identifier\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCapture.v1.get(CandidApi.ChargeCaptureId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deactivating Payer Plan Group in TypeScript\nDESCRIPTION: This code snippet shows how to deactivate a payer plan group using the Candid API client. It requires the payer plan group ID as a parameter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payerPlanGroups.v1.deactivate(CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Payers in TypeScript\nDESCRIPTION: This code snippet shows how to retrieve a list of all payers using the Candid API client. It includes optional parameters for pagination and search.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payers.v3.getAll({\n    limit: 100,\n    searchTerm: \"john\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Service Facility Information in TypeScript\nDESCRIPTION: Updates the service facility information for a given service facility ID. This method modifies details such as organization name and address.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_183\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.serviceFacility.update(CandidApi.ServiceFacilityId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    organizationName: \"Test Organization\",\n    address: {\n        address1: \"123 Main St\",\n        address2: \"Apt 1\",\n        city: \"New York\",\n        state: \"NY\",\n        zipCode: \"10001\",\n        zipPlusFourCode: \"1234\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Charge Capture Bundle\nDESCRIPTION: Fetches a specific charge capture bundle by its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCaptureBundles.v1.get(CandidApi.ChargeCaptureBundleId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Non-Insurance Payer Payment in TypeScript\nDESCRIPTION: Deletes a non-insurance payer payment record using its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerPayments.v1.delete(\n    CandidApi.NonInsurancePayerPaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Charge Capture\nDESCRIPTION: Modifies an existing charge capture with updated information like status, patient data, or service details.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCapture.v1.update(CandidApi.ChargeCaptureId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    data: {},\n    chargeExternalId: \"string\",\n    ehrSourceUrl: \"string\",\n    patientExternalId: \"string\",\n    status: \"planned\",\n    dateOfService: \"2023-01-15\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Pre-Encounter Tag in TypeScript\nDESCRIPTION: Updates a tag. The path must contain the most recent version to prevent races. This method modifies an existing pre-encounter tag with new information.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_178\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.tags.v1.update(CandidApi.TagId(\"string\"), \"string\", {\n    value: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rate History in TypeScript\nDESCRIPTION: Gets every version of a rate using its rate ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.getRateHistory(CandidApi.RateId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Service Facility\nDESCRIPTION: Deletes a specific organization service facility by its UUID\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationServiceFacilities.v2.delete(\n    CandidApi.OrganizationServiceFacilityId(\"30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Payer Plan Group in TypeScript\nDESCRIPTION: This snippet demonstrates how to update a payer plan group using the Candid API client. It includes parameters for the plan group ID, name, payer UUID, and plan type.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.payerPlanGroups.v1.update(CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    planGroupName: \"string\",\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    planType: \"09\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pre-Encounter Tag by ID in TypeScript\nDESCRIPTION: Gets a tag by TagId. This method retrieves a specific pre-encounter tag using its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_175\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.tags.v1.get(CandidApi.TagId(\"string\"));\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Pre-Encounter Tag in TypeScript\nDESCRIPTION: Sets a tag as deactivated. The path must contain the most recent version to prevent races. This method deactivates an existing pre-encounter tag.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_179\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.tags.v1.deactivate(CandidApi.TagId(\"string\"), \"string\");\n```\n\n----------------------------------------\n\nTITLE: Deactivating Notes in Candid API\nDESCRIPTION: This code demonstrates how to deactivate a note in the Candid API. It requires a note ID and version parameter to prevent race conditions when deactivating.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_163\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.notes.v1.deactivate(CandidApi.NoteId(\"string\"), \"string\");\n```\n\n----------------------------------------\n\nTITLE: Updating Initial Referring Provider for an Encounter in TypeScript\nDESCRIPTION: Shows how to update the initial referring provider information for a specific encounter, including a qualifier field not present in regular referring provider updates.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.encounterProviders.v2.updateInitialReferringProvider(\n    CandidApi.EncounterId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        npi: \"string\",\n        taxonomyCode: \"string\",\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n        qualifier: \"DQ\",\n        firstName: \"string\",\n        lastName: \"string\",\n        organizationName: \"string\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Images with PreEncounter API in TypeScript\nDESCRIPTION: This snippet shows how to retrieve multiple images that match specific query parameters using the PreEncounter API.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_157\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.images.v1.getMulti({\n    patientId: \"string\",\n    coverageId: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting an Insurance Adjudication in TypeScript using Candid API\nDESCRIPTION: Example of deleting a specific insurance adjudication record by its ID using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceAdjudications.v1.delete(\n    CandidApi.InsuranceAdjudicationId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Provider Credentialing Span in Credentialing v2\nDESCRIPTION: Demonstrates how to soft delete a credentialing span rate from the system using the Credentialing v2 API.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.credentialing.v2.delete(CandidApi.ProviderCredentialingSpanId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Service Facility\nDESCRIPTION: Updates an existing organization service facility's details\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationServiceFacilities.v2.update(\n    CandidApi.OrganizationServiceFacilityId(\"30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569\"),\n    {\n        name: \"Test Service Facility\",\n        aliases: [\"Test Service Facility Alias\"],\n        description: \"Test Service Facility Description\",\n        status: \"active\",\n        operationalStatus: \"C\",\n        mode: \"instance\",\n        type: \"DX\",\n        physicalType: \"si\",\n        telecoms: [\"555-555-5555\"],\n        address: {\n            address1: \"123 Main St\",\n            address2: \"Apt 1\",\n            city: \"New York\",\n            state: \"NY\",\n            zipCode: \"10001\",\n            zipPlusFourCode: \"1234\",\n        },\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Insurance Payments in TypeScript using Candid API\nDESCRIPTION: Example of retrieving non-ERA originated insurance payments with filters for payer, claim, service line, provider, and sorting and pagination options.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insurancePayments.v1.getMulti({\n    limit: 1,\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    claimId: CandidApi.ClaimId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    serviceLineId: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    billingProviderId: CandidApi.ProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sort: \"amount_cents\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Non-Insurance Payer Refund in TypeScript\nDESCRIPTION: Deletes a non-insurance payer refund record using its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerRefunds.v1.delete(\n    CandidApi.NonInsurancePayerRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Submitting Eligibility Check in Eligibility v2\nDESCRIPTION: Demonstrates how to submit an eligibility check using the deprecated wrapper around Change Healthcare's eligibility API. Includes references to extensive documentation for various aspects of eligibility checking.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.eligibility.v2.submitEligibilityCheck({\n    key: \"value\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Non-Insurance Payer Refunds in TypeScript\nDESCRIPTION: Fetches multiple non-insurance payer refunds based on specified search criteria such as payer ID, check number, and invoice ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerRefunds.v1.getMulti({\n    limit: 1,\n    nonInsurancePayerId: CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    checkNumber: \"string\",\n    invoiceId: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sort: \"amount_cents\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Patient Payment in TypeScript\nDESCRIPTION: Deletes the patient payment record matching the provided patient_payment_id using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientPayments.v4.delete(CandidApi.PatientPaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting Service Line in TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a service line using the Candid API client. It requires the service line ID as a parameter.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.serviceLines.v2.delete(CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Updating an Insurance Refund with TypeScript\nDESCRIPTION: Shows how to update an existing insurance refund record. When updating the refund amount, allocations must also be updated appropriately.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceRefunds.v1.update(CandidApi.InsuranceRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    refundTimestamp: \"2024-01-15T09:30:00Z\",\n    refundNote: {\n        type: \"set\",\n        value: \"string\",\n    },\n    refundReason: {\n        type: \"set\",\n        value: \"OVERCHARGED\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Non-Insurance Payer\nDESCRIPTION: Deletes a specific non-insurance payer by its UUID\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayers.v1.delete(CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deactivating an Appointment in Candid Health API\nDESCRIPTION: Marks an appointment as deactivated. Requires the appointment ID and current version to prevent race conditions. The appointment can be reactivated with a subsequent update operation.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.preEncounter.appointments.v1.deactivate(CandidApi.AppointmentId(\"string\"), \"string\");\n```\n\n----------------------------------------\n\nTITLE: Deleting an Insurance Refund with TypeScript\nDESCRIPTION: Demonstrates how to delete an insurance refund by its ID. If the record's organization_id doesn't match the authenticated user's current organization_id, a 403 response will be returned.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.insuranceRefunds.v1.delete(CandidApi.InsuranceRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Diagnosis in TypeScript\nDESCRIPTION: Deletes the diagnosis record associated with the provided diagnosis_id. This method removes a specific diagnosis from the system.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_182\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.diagnoses.delete(CandidApi.DiagnosisId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Credentialing Span in Credentialing v2\nDESCRIPTION: Shows how to update provider credentialing span information including contract details, dates, and regions.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.credentialing.v2.update(CandidApi.ProviderCredentialingSpanId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    contractingProviderId: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    payerUuid: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    startDate: \"2023-01-15\",\n    endDate: \"2023-01-15\",\n    regions: {\n        type: \"states\",\n        states: [\"AA\"],\n    },\n    submittedDate: \"2023-01-15\",\n    payerLoadedDate: \"2023-01-15\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Patient Refund in TypeScript\nDESCRIPTION: Updates an existing patient refund record with the specified changes. Fields can be updated individually using the 'set' type object pattern.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientRefunds.v1.update(CandidApi.PatientRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    refundTimestamp: \"2024-01-15T09:30:00Z\",\n    refundNote: {\n        type: \"set\",\n        value: \"string\",\n    },\n    invoice: {\n        type: \"set\",\n        value: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    },\n    refundReason: {\n        type: \"set\",\n        value: \"OVERCHARGED\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Request and Response Types\nDESCRIPTION: Example showing how to import and use request/response types from the SDK.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CandidApi } from \"candidhealth\";\n\nconst request: CandidApi.AuthGetTokenRequest = {\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating a Non-Insurance Payer Payment in TypeScript\nDESCRIPTION: Updates an existing non-insurance payer payment record with new details such as payment timestamp, note, and invoice ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerPayments.v1.update(\n    CandidApi.NonInsurancePayerPaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        paymentTimestamp: \"2024-01-15T09:30:00Z\",\n        paymentNote: {\n            type: \"set\",\n            value: \"string\",\n        },\n        invoiceId: {\n            type: \"set\",\n            value: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n        },\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Get Multiple Patient Payments\nDESCRIPTION: Retrieves patient payments matching specified criteria with support for pagination and filtering by various parameters.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientPayments.v4.getMulti({\n    limit: 1,\n    patientExternalId: CandidApi.PatientExternalId(\"string\"),\n    claimId: CandidApi.ClaimId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    serviceLineId: CandidApi.ServiceLineId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    billingProviderId: CandidApi.ProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    unattributed: true,\n    invoiceId: CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    sources: \"MANUAL_ENTRY\",\n    sort: \"payment_source\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation\nDESCRIPTION: Example demonstrating how to handle API errors using try-catch and the CandidApiError class.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CandidApiError } from \"candidhealth\";\n\ntry {\n    await client.preEncounter.eligibilityChecks.v1.post(...);\n} catch (err) {\n    if (err instanceof CandidApiError) {\n        console.log(err.statusCode);\n        console.log(err.message);\n        console.log(err.body);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Non-Insurance Payer Refund in TypeScript\nDESCRIPTION: Fetches a specific non-insurance payer refund using its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerRefunds.v1.get(\n    CandidApi.NonInsurancePayerRefundId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Reverting ERA-Originated Insurance Balance Adjustment\nDESCRIPTION: Demonstrates reverting an ERA-originated insurance balance adjustment by its adjustment ID using the specialized revert endpoint.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.writeOffs.v1.revertEraOriginatedInsuranceBalanceAdjustment(\n    CandidApi.AdjustmentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Non-Insurance Payer\nDESCRIPTION: Updates an existing non-insurance payer's details with optional field removal\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayers.v1.update(CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    name: \"string\",\n    description: {\n        type: \"remove\",\n    },\n    category: {\n        type: \"remove\",\n    },\n    address: {\n        type: \"remove\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Listing All Charge Capture Bundles with Filtering\nDESCRIPTION: Retrieves a paginated list of charge capture bundles with various filtering options including status, patient ID, and date of service.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCaptureBundles.v1.getAll({\n    limit: 1,\n    sort: \"created_at\",\n    sortDirection: \"asc\",\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    patientExternalId: \"string\",\n    bundleStatus: \"not-started\",\n    chargeStatus: \"planned\",\n    chargeExternalId: \"string\",\n    dateOfService: \"2023-01-15\",\n    hasChargeCaptureUpdates: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Charge Capture\nDESCRIPTION: Removes a specific charge capture from the system using its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCapture.v1.delete(CandidApi.ChargeCaptureId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Resubmitting a Charge Capture Bundle\nDESCRIPTION: Resubmits a previously created charge capture bundle for processing.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chargeCaptureBundles.v1.resubmit(CandidApi.ChargeCaptureBundleId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Get Single Patient Payment\nDESCRIPTION: Retrieves a specific patient payment by its ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.patientPayments.v4.get(CandidApi.PatientPaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Non-Insurance Payer Payment with TypeScript\nDESCRIPTION: Demonstrates how to retrieve a specific non-insurance payer payment by its ID using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayerPayments.v1.get(\n    CandidApi.NonInsurancePayerPaymentId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Billing Note\nDESCRIPTION: Modifies the content of an existing billing note identified by its unique ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.billingNotes.v2.update(CandidApi.BillingNoteId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    text: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Imported Invoice in TypeScript using Candid API\nDESCRIPTION: Example of retrieving details of a specific import invoice by its ID using the Candid API client.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.importInvoice.v1.get(CandidApi.InvoiceId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique Dimension Values for Fee Schedules in TypeScript\nDESCRIPTION: Gets unique values for a dimension based on other selection criteria. This method is useful for driving pivots on dimension values.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.getUniqueValuesForDimension({\n    pageToken: CandidApi.PageToken(\"eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9\"),\n    limit: 1,\n    pivotDimension: \"payer_uuid\",\n    payerUuid: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    organizationBillingProviderId: CandidApi.OrganizationProviderId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    states: \"AA\",\n    zipCodes: \"string\",\n    licenseTypes: \"MD\",\n    facilityTypeCodes: \"01\",\n    networkTypes: \"12\",\n    payerPlanGroupIds: CandidApi.PayerPlanGroupId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    cptCode: \"string\",\n    modifiers: \"AV\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Guarantor in TypeScript\nDESCRIPTION: Updates a guarantor by its guarantor_id.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.guarantor.v1.update(CandidApi.GuarantorId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), { ... });\n```\n\n----------------------------------------\n\nTITLE: Toggling Non-Insurance Payer Enablement\nDESCRIPTION: Toggles the enabled status of a specific non-insurance payer identified by UUID\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.nonInsurancePayers.v1.toggleEnablement(\n    CandidApi.NonInsurancePayerId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n    {\n        enabled: true,\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payer Thresholds in TypeScript\nDESCRIPTION: Gets a list of payers and thresholds by their UUIDs.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.feeSchedules.v3.getPayerThresholds({\n    payerUuids: CandidApi.PayerUuid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Custom Schema in CustomSchemas v1\nDESCRIPTION: Shows how to update a preexisting schema by modifying its name, description, or adding new fields to it.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customSchemas.v1.update(CandidApi.SchemaId(\"ec096b13-f80a-471d-aaeb-54b021c9d582\"), {\n    name: \"General Medicine and Health\",\n    description: \"Values collected during all visits\",\n    fieldsToAdd: [\n        {\n            key: \"visit_type\",\n            type: \"STRING\",\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Custom Schema in CustomSchemas v1\nDESCRIPTION: Shows how to fetch a single custom schema by its ID using the get endpoint.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customSchemas.v1.get(CandidApi.SchemaId(\"ec096b13-f80a-471d-aaeb-54b021c9d582\"));\n```\n\n----------------------------------------\n\nTITLE: Updating Contract\nDESCRIPTION: Updates an existing contract with new information\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contracts.v2.update(CandidApi.ContractId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"), {\n    renderingProviderIds: new Set([CandidApi.RenderingProviderid(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\")]),\n    effectiveDate: CandidApi.Date_(\"string\"),\n    expirationDate: {\n        type: \"set\",\n        value: CandidApi.Date_(\"string\"),\n    },\n    regions: {\n        type: \"set\",\n        value: {\n            type: \"states\",\n            states: [\"AA\"],\n        },\n    },\n    contractStatus: \"pending\",\n    authorizedSignatory: {\n        type: \"set\",\n        firstName: \"string\",\n        lastName: \"string\",\n        title: \"string\",\n        email: \"string\",\n        phone: \"string\",\n        fax: \"string\",\n    },\n    commercialInsuranceTypes: {\n        type: \"allApply\",\n    },\n    medicareInsuranceTypes: {\n        type: \"allApply\",\n    },\n    medicaidInsuranceTypes: {\n        type: \"allApply\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Contract\nDESCRIPTION: Deletes a contract using its unique identifier\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contracts.v2.delete(CandidApi.ContractId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract by ID\nDESCRIPTION: Gets a single contract with associated provider information\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contracts.v2.get(CandidApi.ContractId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```\n\n----------------------------------------\n\nTITLE: Get Organization Provider by ID\nDESCRIPTION: Retrieves a single organization provider by its ID.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.organizationProviders.v3.get(CandidApi.OrganizationProviderId(\"965A563A-0285-4910-9569-E3739C0F6EAB\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Billing Note\nDESCRIPTION: Removes a specific billing note from the system using its unique identifier.\nSOURCE: https://github.com/candidhealth/candid-node/blob/master/reference.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.billingNotes.v2.delete(CandidApi.BillingNoteId(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"));\n```"
  }
]