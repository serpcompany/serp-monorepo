[
  {
    "owner": "microsoft",
    "repo": "typescript-website",
    "content": "TITLE: Creating a Generic Identity Function in TypeScript\nDESCRIPTION: A generic identity function that uses a type variable to capture and preserve the type of the argument. This maintains type safety while allowing for flexibility across different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Type Annotation in TypeScript\nDESCRIPTION: Demonstrates how to explicitly annotate variable types in TypeScript using the colon syntax after variable names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet myName: string = \"Alice\";\n//        ^^^^^^^^ Type annotation\n```\n\n----------------------------------------\n\nTITLE: Function Return Type Annotation in TypeScript\nDESCRIPTION: Demonstrates how to specify the return type of a function using type annotations after the parameter list.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getFavoriteNumber(): number {\n  return 26;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Specific Identity Function in TypeScript\nDESCRIPTION: A simple identity function with a specific number type that returns whatever argument is passed to it. This demonstrates a non-generic approach with a fixed type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity(arg: number): number {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Properties in Object Types\nDESCRIPTION: Demonstrates how to handle optional properties in object types using the question mark syntax and undefined checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printName(obj: { first: string; last?: string }) {\n  // Error - might crash if 'obj.last' wasn't provided!\n  console.log(obj.last.toUpperCase());\n  if (obj.last !== undefined) {\n    // OK\n    console.log(obj.last.toUpperCase());\n  }\n\n  // A safe alternative using modern JavaScript syntax:\n  console.log(obj.last?.toUpperCase());\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation with Type Guard\nDESCRIPTION: Shows the correct implementation using typeof type guard to handle both number and string cases.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(padding: number | string, input: string): string {\n  if (typeof padding === \"number\") {\n    return \" \".repeat(padding) + input;\n  }\n  return padding + input;\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Functions with Interfaces in TypeScript\nDESCRIPTION: Shows how interfaces can be used to type function parameters and return values for improved type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deleteUser(user: User) {\n  // ...\n}\n\nfunction getAdminUser(): User {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Identity Function in TypeScript\nDESCRIPTION: This snippet introduces a generic identity function using a type variable T, preserving type information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Inference Example\nDESCRIPTION: This example shows TypeScript's ability to infer types without explicit annotations. Here, TypeScript automatically infers that 'msg' is of type string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nlet msg = \"hello there!\";\n```\n\n----------------------------------------\n\nTITLE: Problematic Optional Parameters in Callbacks\nDESCRIPTION: Demonstrates a common mistake when defining callbacks with optional parameters, which can lead to unexpected type checking behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    callback(arr[i], i);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Return Types with infer\nDESCRIPTION: Demonstrates creating a utility type that extracts the return type from function types using conditional types with the 'infer' keyword.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetReturnType<Type> = Type extends (...args: never[]) => infer Return\n  ? Return\n  : never;\n\ntype Num = GetReturnType<() => number>;\n//   ^?\n\ntype Str = GetReturnType<(x: string) => string>;\n//   ^?\n\ntype Bools = GetReturnType<(a: boolean, b: boolean) => boolean[]>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Type Assertion in TypeScript\nDESCRIPTION: Shows how to use type assertion in TypeScript to specify a more specific type than what TypeScript infers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;\n```\n\n----------------------------------------\n\nTITLE: Using Discriminated Unions for Type-Safe Area Calculation in TypeScript\nDESCRIPTION: This snippet demonstrates how to use discriminated unions to perform type-safe calculations. It shows a getArea function that uses a switch statement to handle different shape types correctly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.sideLength ** 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Indexed Access Type in TypeScript\nDESCRIPTION: Demonstrates how to access a specific property type from a defined type using bracket notation. This creates a new type that represents the type of the accessed property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = { age: number; name: string; alive: boolean };\ntype Age = Person[\"age\"];\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Handling Excess Property Checks in TypeScript\nDESCRIPTION: Illustrates TypeScript's excess property checking mechanism and how it affects object literal assignments. The example shows how TypeScript catches potential errors when assigning object literals with extra properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  return {\n    color: config.color || \"red\",\n    area: config.width ? config.width * config.width : 20,\n  };\n}\n\nlet mySquare = createSquare({ colour: \"red\", width: 100 });\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Types in TypeScript\nDESCRIPTION: This example demonstrates how to export and import types using the same syntax as JavaScript values in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: animal.ts\nexport type Cat = { breed: string; yearOfBirth: number };\n\nexport interface Dog {\n  breeds: string[];\n  yearOfBirth: number;\n}\n\n// @filename: app.ts\nimport { Cat, Dog } from \"./animal.js\";\ntype Animals = Cat | Dog;\n```\n\n----------------------------------------\n\nTITLE: Working with Generic Array Types in TypeScript (Array Syntax)\nDESCRIPTION: A generic function that works with arrays of a specific type, using the Type[] syntax. This allows accessing array properties like length while maintaining the generic typing for array elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<Type>(arg: Type[]): Type[] {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Null Checks in TypeScript\nDESCRIPTION: This snippet demonstrates how to safely handle potentially null values by checking for null before accessing properties or methods, preventing runtime errors when strictNullChecks is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doSomething(x: string | null) {\n  if (x === null) {\n    // do nothing\n  } else {\n    console.log(\"Hello, \" + x.toUpperCase());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Properties in TypeScript\nDESCRIPTION: Demonstrates how TypeScript treats optional properties as potentially undefined. The example shows accessing optional properties directly and how TypeScript infers their types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction paintShape(opts: PaintOptions) {\n  let xPos = opts.xPos;\n  //              ^?\n  let yPos = opts.yPos;\n  //              ^?\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Class in TypeScript\nDESCRIPTION: Demonstrates the basic structure of a TypeScript class including properties, constructor, and methods. Creates a Greeter class with a greeting property and a greet method, then instantiates it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nlet greeter = new Greeter(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Generic Class with String Type\nDESCRIPTION: Shows how the same generic class can be used with string type, demonstrating type flexibility.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet stringNumeric = new GenericNumber<string>();\nstringNumeric.zeroValue = \"\";\nstringNumeric.add = function (x, y) {\n  return x + y;\n};\n\nconsole.log(stringNumeric.add(stringNumeric.zeroValue, \"test\"));\n```\n\n----------------------------------------\n\nTITLE: Using Readonly Properties in TypeScript Object Types\nDESCRIPTION: Demonstrates how to use the readonly modifier on object properties to prevent reassignment. The example shows that TypeScript will produce errors when attempting to write to readonly properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SomeType {\n  readonly prop: string;\n}\n\nfunction doSomething(obj: SomeType) {\n  // We can read from 'obj.prop'.\n  console.log(`prop has the value '${obj.prop}'.`);\n\n  // But we can't re-assign it.\n  obj.prop = \"hello\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type Aliases for Union Types\nDESCRIPTION: A simple example showing how to create a type alias for a union type. The ID type aliases the union of number | string for more readable type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype ID = number | string;\n```\n\n----------------------------------------\n\nTITLE: Advanced Generic Class Relationships\nDESCRIPTION: Shows complex generic relationships between classes including inheritance and keeper pattern.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass BeeKeeper {\n  hasMask: boolean = true;\n}\n\nclass ZooKeeper {\n  nametag: string = \"Mikle\";\n}\n\nclass Animal {\n  numLegs: number = 4;\n}\n\nclass Bee extends Animal {\n  numLegs = 6;\n  keeper: BeeKeeper = new BeeKeeper();\n}\n\nclass Lion extends Animal {\n  keeper: ZooKeeper = new ZooKeeper();\n}\n\nfunction createInstance<A extends Animal>(c: new () => A): A {\n  return new c();\n}\n\ncreateInstance(Lion).keeper.nametag;\ncreateInstance(Bee).keeper.hasMask;\n```\n\n----------------------------------------\n\nTITLE: Understanding Type Aliases as True Aliases\nDESCRIPTION: This example illustrates that type aliases are just names for types, not distinct types. UserInputSanitizedString is just an alias for string, so any string can be assigned to a variable of this type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getInput(): string;\ndeclare function sanitize(str: string): string;\n// ---cut---\ntype UserInputSanitizedString = string;\n\nfunction sanitizeInput(str: string): UserInputSanitizedString {\n  return sanitize(str);\n}\n\n// Create a sanitized input\nlet userInput = sanitizeInput(getInput());\n\n// Can still be re-assigned with a string though\nuserInput = \"new input\";\n```\n\n----------------------------------------\n\nTITLE: Using Type Argument Inference in TypeScript Generics\nDESCRIPTION: Calling a generic function without explicitly specifying the type argument, allowing the compiler to infer it from the provided value. This demonstrates TypeScript's type inference capabilities.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet output = identity(\"myString\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Class in TypeScript\nDESCRIPTION: Demonstrates creating a generic class that can work with different types. Shows usage with both number and string types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass GenericNumber<NumType> {\n  zeroValue: NumType;\n  add: (x: NumType, y: NumType) => NumType;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function (x, y) {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Aliases for Object Types\nDESCRIPTION: This snippet demonstrates creating a type alias for an object type and using it in a function parameter. The Point type defines a structure with x and y number properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype Point = {\n  x: number;\n  y: number;\n};\n\n// Exactly the same as the earlier example\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n```\n\n----------------------------------------\n\nTITLE: Creating an Object with Inferred Types in TypeScript\nDESCRIPTION: Creates an object with name and id properties where TypeScript infers string and number types respectively.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  name: \"Hayes\",\n  id: 0,\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Static Type Checking Example\nDESCRIPTION: Demonstrates how TypeScript catches type errors before runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = \"hello!\";\n\nmessage();\n```\n\n----------------------------------------\n\nTITLE: Declaring Class Fields with Type Annotations\nDESCRIPTION: Defines a Point class with x and y fields that have explicit number type annotations. This demonstrates how to add typed properties to a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictPropertyInitialization: false\nclass Point {\n  x: number;\n  y: number;\n}\n\nconst pt = new Point();\npt.x = 0;\npt.y = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an intersection type by combining two interfaces using the & operator. It also shows how to use the resulting type in a function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Colorful {\n  color: string;\n}\ninterface Circle {\n  radius: number;\n}\n\ntype ColorfulCircle = Colorful & Circle;\n\nfunction draw(circle: Colorful & Circle) {\n  console.log(`Color was ${circle.color}`);\n  console.log(`Radius was ${circle.radius}`);\n}\n\n// okay\ndraw({ color: \"blue\", radius: 42 });\n\n// oops\ndraw({ color: \"red\", raidus: 42 });\n```\n\n----------------------------------------\n\nTITLE: ES Module Format Example\nDESCRIPTION: Demonstrates ES module format usage with various import styles and exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport x, { y, z } from \"mod\";\nimport * as mod from \"mod\";\nconst dynamic = import(\"mod\");\nconsole.log(x, y, z, mod, dynamic);\n\nexport const e1 = 0;\nexport default \"default export\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\nimport x, { y, z } from \"mod\";\nimport * as mod from \"mod\";\nconst dynamic = import(\"mod\");\nconsole.log(x, y, z, mod, dynamic);\n\nexport const e1 = 0;\nexport default \"default export\";\n```\n\n----------------------------------------\n\nTITLE: Anonymous Functions with Contextual Typing\nDESCRIPTION: Demonstrates how TypeScript infers types for parameters in anonymous functions based on context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst names = [\"Alice\", \"Bob\", \"Eve\"];\n\n// Contextual typing for function - parameter s inferred to have type string\nnames.forEach(function (s) {\n  console.log(s.toUpperCase());\n});\n\n// Contextual typing also applies to arrow functions\nnames.forEach((s) => {\n  console.log(s.toUpperCase());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Object Types in TypeScript\nDESCRIPTION: This snippet introduces generic object types using a Box interface as an example. It shows how to define a generic interface and use it with different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Box<Type> {\n  contents: Type;\n}\n\nlet box: Box<string>;\n\nlet boxA: Box<string> = { contents: \"hello\" };\nboxA.contents;\n\nlet boxB: StringBox = { contents: \"world\" };\nboxB.contents;\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods in TypeScript Classes\nDESCRIPTION: Demonstrates how to override a base class method in a derived class, using the 'super' keyword to access the base implementation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n  greet() {\n    console.log(\"Hello, world!\");\n  }\n}\n\nclass Derived extends Base {\n  greet(name?: string) {\n    if (name === undefined) {\n      super.greet();\n    } else {\n      console.log(`Hello, ${name.toUpperCase()}`);\n    }\n  }\n}\n\nconst d = new Derived();\nd.greet();\nd.greet(\"reader\");\n```\n\n----------------------------------------\n\nTITLE: Narrowing Union Types with Type Guards\nDESCRIPTION: This example demonstrates type narrowing using typeof to safely operate on a union type. Within the if branch, TypeScript knows id is a string, allowing string-specific methods to be used.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printId(id: number | string) {\n  if (typeof id === \"string\") {\n    // In this branch, id is of type 'string'\n    console.log(id.toUpperCase());\n  } else {\n    // Here, id is of type 'number'\n    console.log(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Interface for Functions in TypeScript\nDESCRIPTION: Defining a generic interface with a call signature that can be used to type generic functions. This demonstrates how to create reusable generic interfaces for functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenericIdentityFn {\n  <Type>(arg: Type): Type;\n}\n\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n\nlet myIdentity: GenericIdentityFn = identity;\n```\n\n----------------------------------------\n\nTITLE: Promise Return Type Annotation in TypeScript\nDESCRIPTION: Shows how to annotate functions that return Promises using the Promise<T> type syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFavoriteNumber(): Promise<number> {\n  return 26;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Union Type Declaration with Leading Separator\nDESCRIPTION: An example showing how to format multi-line union types with the separators at the beginning of each line for better readability.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printTextOrNumberOrBool(\n  textOrNumberOrBool:\n    | string\n    | number\n    | boolean\n) {\n  console.log(textOrNumberOrBool);\n}\n```\n\n----------------------------------------\n\nTITLE: Null Checking in TypeScript\nDESCRIPTION: Shows how TypeScript narrows types when checking for null values. The 'printAll' function demonstrates handling of string, string array, and null types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printAll(strs: string | string[] | null) {\n  if (strs !== null) {\n    if (typeof strs === \"object\") {\n      for (const s of strs) {\n        //            ^?\n        console.log(s);\n      }\n    } else if (typeof strs === \"string\") {\n      console.log(strs);\n      //          ^?\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Safety with 'this' Parameter Annotations\nDESCRIPTION: Shows how 'this' parameter types provide additional type safety by preventing derived class instances from accepting base class instances as parameters when using 'this' as the parameter type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box {\n  content: string = \"\";\n  sameAs(other: this) {\n    return other.content === this.content;\n  }\n}\n\nclass DerivedBox extends Box {\n  otherContent: string = \"?\";\n}\n\nconst base = new Box();\nconst derived = new DerivedBox();\nderived.sameAs(base);\n```\n\n----------------------------------------\n\nTITLE: Using 'as const' to Preserve Literal Types in Objects\nDESCRIPTION: This example demonstrates using the 'as const' assertion to make all properties of an object retain their literal types rather than widening to more general types like string or number.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n// ---cut---\nconst req = { url: \"https://example.com\", method: \"GET\" } as const;\nhandleRequest(req.url, req.method);\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Union Types in TypeScript\nDESCRIPTION: This snippet defines a function that accepts a union type (number | string) and demonstrates valid and invalid parameter values. It shows how TypeScript enforces type checking for union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\nfunction printId(id: number | string) {\n  console.log(\"Your ID is: \" + id);\n}\n// OK\nprintId(101);\n// OK\nprintId(\"202\");\n// Error\nprintId({ myID: 22342 });\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuple Type in TypeScript\nDESCRIPTION: Demonstrates how to define a tuple type in TypeScript. This example creates a StringNumberPair type that represents an array with exactly two elements: a string at index 0 and a number at index 1.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringNumberPair = [string, number];\n//                      ^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Extending Types in TypeScript Interfaces\nDESCRIPTION: Shows how to extend existing interfaces in TypeScript to create more specific types. This example demonstrates extending a BasicAddress interface to create an AddressWithUnit interface with an additional property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BasicAddress {\n  name?: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n}\n\ninterface AddressWithUnit extends BasicAddress {\n  unit: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Interface with Type Parameter in TypeScript\nDESCRIPTION: Defining an interface that takes a type parameter and applies it to its members. This approach makes the generic type visible at the interface level rather than just the method level.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenericIdentityFn<Type> {\n  (arg: Type): Type;\n}\n\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n\nlet myIdentity: GenericIdentityFn<number> = identity;\n```\n\n----------------------------------------\n\nTITLE: Complete Module Declaration File Template\nDESCRIPTION: A reference template for creating a new module declaration file, including various export patterns, type declarations, and documentation comments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myLib;\n\n/*~ If this module exports functions, declare them like so.\n */\nexport function myFunction(a: string): string;\nexport function myOtherFunction(a: number): number;\n\n/*~ You can declare types that are available via importing the module */\nexport interface SomeType {\n  name: string;\n  length: number;\n  extras?: string[];\n}\n\n/*~ You can declare properties of the module using const, let, or var */\nexport const myField: number;\n```\n\n----------------------------------------\n\nTITLE: Writing a Simple TypeScript Program\nDESCRIPTION: A basic 'Hello world' program written in TypeScript. This demonstrates that TypeScript is a superset of JavaScript, as this code is valid in both languages.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Greets the world.\nconsole.log(\"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Conditional Type Syntax Pattern\nDESCRIPTION: Shows the general syntax pattern for conditional types in TypeScript, following the pattern similar to JavaScript's conditional expression.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SomeType = any;\ntype OtherType = any;\ntype TrueType = any;\ntype FalseType = any;\ntype Stuff =\n  // ---cut---\n  SomeType extends OtherType ? TrueType : FalseType;\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types with Type Aliases in TypeScript\nDESCRIPTION: Demonstrates how to use type aliases to create named object types. The example creates a Person type with name and age properties that can be used as a function parameter type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n  // ^^^^^^\n  name: string;\n  age: number;\n};\n\nfunction greet(person: Person) {\n  return \"Hello \" + person.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Types with 'infer' for Unwrapping Types\nDESCRIPTION: A series of nested conditional types using 'infer' to extract the inner type from arrays, functions, and promises.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype Unpacked<T> = T extends (infer U)[]\n  ? U\n  : T extends (...args: any[]) => infer U\n  ? U\n  : T extends Promise<infer U>\n  ? U\n  : T;\n\ntype T0 = Unpacked<string>;\n//   ^?\ntype T1 = Unpacked<string[]>;\n//   ^?\ntype T2 = Unpacked<() => string>;\n//   ^?\ntype T3 = Unpacked<Promise<string>>;\n//   ^?\ntype T4 = Unpacked<Promise<string>[]>;\n//   ^?\ntype T5 = Unpacked<Unpacked<Promise<string>[]>>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference in TypeScript\nDESCRIPTION: Shows how TypeScript automatically infers the string type from variable assignment without explicit type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet helloWorld = \"Hello World\";\n//  ^?\n```\n\n----------------------------------------\n\nTITLE: Using ECMAScript Private Fields in TypeScript\nDESCRIPTION: Demonstrates TypeScript's support for ECMAScript private fields using the # prefix. Shows an Animal class with a private #name field that cannot be accessed from outside the class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 18013\nclass Animal {\n  #name: string;\n  constructor(theName: string) {\n    this.#name = theName;\n  }\n}\n\nnew Animal(\"Cat\").#name;\n```\n\n----------------------------------------\n\nTITLE: Exhaustiveness Checking with the 'never' Type in TypeScript\nDESCRIPTION: This snippet shows how to implement exhaustiveness checking in a switch statement using the 'never' type. It ensures that all possible cases of the Shape union are handled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Object Property Type Checking\nDESCRIPTION: Demonstrates how TypeScript catches undefined property access.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  name: \"Daniel\",\n  age: 26,\n};\n\nuser.location;\n```\n\n----------------------------------------\n\nTITLE: Using a Tuple Type in a Function Parameter\nDESCRIPTION: Shows how to use a tuple type for a function parameter. TypeScript tracks the types at specific indices, allowing type-safe access to the elements of the tuple.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doSomething(pair: [string, number]) {\n  const a = pair[0];\n  //    ^?\n  const b = pair[1];\n  //    ^?\n  // ...\n}\n\ndoSomething([\"hello\", 42]);\n```\n\n----------------------------------------\n\nTITLE: Type Constraint in Generic Type\nDESCRIPTION: Demonstrates using type constraints to ensure a generic type has certain properties before accessing them.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype MessageOf<T extends { message: unknown }> = T[\"message\"];\n\ninterface Email {\n  message: string;\n}\n\ntype EmailMessageContents = MessageOf<Email>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: TypeScript Method Name Typo Detection\nDESCRIPTION: Shows how TypeScript catches method name typos during development.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst announcement = \"Hello World!\";\n\n// How quickly can you spot the typos?\nannouncement.toLocaleLowercase();\nannouncement.toLocalLowerCase();\n\n// We probably meant to write this...\nannouncement.toLocaleLowerCase();\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces for Object Types\nDESCRIPTION: This snippet demonstrates how to use an interface to define an object type. The Point interface specifies an object with x and y number properties, similar to the type alias example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mapped Type in TypeScript\nDESCRIPTION: Shows how to create a mapped type that transforms all properties of an input type to boolean values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype OptionsFlags<Type> = {\n  [Property in keyof Type]: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Invalid Operations on Union Types\nDESCRIPTION: This snippet demonstrates that TypeScript only allows operations valid for all members of a union. The string method toUpperCase() is not available on numbers, so using it directly on a string | number union causes an error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339\nfunction printId(id: number | string) {\n  console.log(id.toUpperCase());\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Type Imports in TypeScript\nDESCRIPTION: This example demonstrates how to use inline 'type' imports in TypeScript 4.5+, allowing individual imports to be prefixed with 'type' to indicate that the imported reference is a type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCatName, type Cat, type Dog } from \"./animal.js\";\n\nexport type Animals = Cat | Dog;\nconst name = createCatName();\n```\n\n----------------------------------------\n\nTITLE: Distributive Conditional Types with Union Types in TypeScript\nDESCRIPTION: Examples showing how conditional types distribute over union types, evaluating the condition separately for each constituent of the union.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype TypeName<T> = T extends string\n  ? \"string\"\n  : T extends number\n  ? \"number\"\n  : T extends boolean\n  ? \"boolean\"\n  : T extends undefined\n  ? \"undefined\"\n  : T extends Function\n  ? \"function\"\n  : \"object\";\n// ---cut---\ntype T5 = TypeName<string | (() => void)>;\n//   ^?\ntype T6 = TypeName<string | string[] | undefined>;\n//   ^?\ntype T7 = TypeName<string[] | number[]>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Generic Constraints Implementation\nDESCRIPTION: Shows how to implement generic constraints using interfaces to ensure types have specific properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<Type extends Lengthwise>(arg: Type): Type {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Output\nDESCRIPTION: This is the JavaScript output generated by the TypeScript compiler from the previous 'Hello world' example. In this case, the output is identical to the input as there were no TypeScript-specific features to transform.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Greets the world.\nconsole.log(\"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadonlyArray Type in TypeScript\nDESCRIPTION: Demonstrates usage of the ReadonlyArray type in a function that can read values from an array but cannot mutate it. The example shows that while reading operations like array access and slice() are permitted, mutation operations like push() are not allowed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339\nfunction doStuff(values: ReadonlyArray<string>) {\n  // We can read from 'values'...\n  const copy = values.slice();\n  console.log(`The first value is ${values[0]}`);\n\n  // ...but we can't mutate 'values'.\n  values.push(\"hello!\");\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Property Access and Function Calls\nDESCRIPTION: Demonstrates basic JavaScript operations on a variable including property access and function calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing the property 'toLowerCase'\n// on 'message' and then calling it\nmessage.toLowerCase();\n\n// Calling 'message'\nmessage();\n```\n\n----------------------------------------\n\nTITLE: Object Type Definition in TypeScript\nDESCRIPTION: Shows how to define and use object types with required properties in function parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printCoord(pt: { x: number; y: number }) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n```\n\n----------------------------------------\n\nTITLE: Using ReturnType with a function type\nDESCRIPTION: Shows how to use the ReturnType utility type to extract the return type from a predefined function type called Predicate.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Predicate = (x: unknown) => boolean;\ntype K = ReturnType<Predicate>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Type Guard with Type Annotations\nDESCRIPTION: Demonstrates type narrowing with visible type annotations in comments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(padding: number | string, input: string): string {\n  if (typeof padding === \"number\") {\n    return \" \".repeat(padding) + input;\n  }\n  return padding + input;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in TypeScript\nDESCRIPTION: Shows how to define optional parameters using the question mark notation, making the parameter have a type of number | undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x?: number) {\n  // ...\n}\nf(); // OK\nf(10); // OK\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Module Export/Import Example\nDESCRIPTION: Demonstrates basic module export and import syntax in TypeScript using ES Modules format. Shows how to export a constant from one file and import it in another.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// @filename: index.ts\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Classes and Members\nDESCRIPTION: Demonstrates abstract classes and members, which define shape without implementation. Abstract classes cannot be instantiated directly and must be subclassed with concrete implementations of all abstract members.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Base {\n  abstract getName(): string;\n\n  printName() {\n    console.log(\"Hello, \" + this.getName());\n  }\n}\n\nconst b = new Base();\n```\n\n----------------------------------------\n\nTITLE: Basic Inheritance in TypeScript Classes\nDESCRIPTION: Shows a simple inheritance example where a Dog class extends an Animal class. The Dog class inherits the move method from the Animal class and adds its own bark method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  move(distanceInMeters: number = 0) {\n    console.log(`Animal moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Dog extends Animal {\n  bark() {\n    console.log(\"Woof! Woof!\");\n  }\n}\n\nconst dog = new Dog();\ndog.bark();\ndog.move(10);\ndog.bark();\n```\n\n----------------------------------------\n\nTITLE: Defining Class Methods with Type Annotations\nDESCRIPTION: Creates a Point class with a scale method that has a parameter type annotation and return type annotation. This demonstrates how to type methods in a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x = 10;\n  y = 10;\n\n  scale(n: number): void {\n    this.x *= n;\n    this.y *= n;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Conditional Types with Mapped Types in TypeScript\nDESCRIPTION: Using conditional types with mapped types to filter object properties based on their types, separating function properties from non-function properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n\ntype NonFunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? never : K;\n}[keyof T];\ntype NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;\n\ninterface Part {\n  id: number;\n  name: string;\n  subparts: Part[];\n  updatePart(newName: string): void;\n}\n\ntype T1 = FunctionPropertyNames<Part>;\n//   ^?\ntype T2 = NonFunctionPropertyNames<Part>;\n//   ^?\ntype T3 = FunctionProperties<Part>;\n//   ^?\ntype T4 = NonFunctionProperties<Part>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Properties in Class Constructors\nDESCRIPTION: Demonstrates parameter properties, a TypeScript feature that turns constructor parameters into class properties with the same name and value. This reduces boilerplate code for class property initialization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nclass Params {\n  constructor(\n    public readonly x: number,\n    protected y: number,\n    private z: number\n  ) {\n    // No body necessary\n  }\n}\nconst a = new Params(1, 2, 3);\nconsole.log(a.x);\nconsole.log(a.z);\n```\n\n----------------------------------------\n\nTITLE: Using Object Literal Type for Generic Functions in TypeScript\nDESCRIPTION: Defining a generic function type using an object literal with a call signature. This is an alternative syntax for expressing generic function types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n\nlet myIdentity: { <Type>(arg: Type): Type } = identity;\n```\n\n----------------------------------------\n\nTITLE: Converting CommonJS require to TypeScript import\nDESCRIPTION: Example showing how to convert a Node.js/CommonJS require statement to TypeScript's import syntax while maintaining the same functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = require(\"foo\");\n\nfoo.doStuff();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport foo = require(\"foo\");\n\nfoo.doStuff();\n```\n\n----------------------------------------\n\nTITLE: Defining Required and Validate Decorators in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of '@required' parameter decorator and '@validate' method decorator. It uses reflect-metadata to store and retrieve metadata about required parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"reflect-metadata\";\nconst requiredMetadataKey = Symbol(\"required\");\n\nfunction required(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n  let existingRequiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];\n  existingRequiredParameters.push(parameterIndex);\n  Reflect.defineMetadata( requiredMetadataKey, existingRequiredParameters, target, propertyKey);\n}\n\nfunction validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {\n  let method = descriptor.value!;\n\n  descriptor.value = function () {\n    let requiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyName);\n    if (requiredParameters) {\n      for (let parameterIndex of requiredParameters) {\n        if (parameterIndex >= arguments.length || arguments[parameterIndex] === undefined) {\n          throw new Error(\"Missing required argument.\");\n        }\n      }\n    }\n    return method.apply(this, arguments);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'satisfies' to Validate Property Value Types in TypeScript\nDESCRIPTION: This example demonstrates how 'satisfies' can be used to ensure all property values of an object conform to specific types while maintaining type information for each property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype RGB = [red: number, green: number, blue: number];\n\nconst palette = {\n    red: [255, 0, 0],\n    green: \"#00ff00\",\n    blue: [0, 0]\n    //    ~~~~~~ error!\n} satisfies Record<string, string | RGB>;\n\n// Information about each property is still maintained.\nconst redComponent = palette.red.at(0);\nconst greenNormalized = palette.green.toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Using Uppercase Intrinsic String Manipulation Type in TypeScript\nDESCRIPTION: Shows the usage of the built-in Uppercase type for converting string literals to uppercase in type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Greeting = \"Hello, world\"\ntype ShoutyGreeting = Uppercase<Greeting>\n\ntype ASCIICacheKey<Str extends string> = `ID-${Uppercase<Str>}`\ntype MainID = ASCIICacheKey<\"my_app\">\n```\n\n----------------------------------------\n\nTITLE: Renaming Generic Type Parameters in TypeScript\nDESCRIPTION: Demonstrating that the names of generic type parameters don't matter as long as they're used consistently. This shows the flexibility in naming type parameters when defining generic function types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n\nlet myIdentity: <Input>(arg: Input) => Input = identity;\n```\n\n----------------------------------------\n\nTITLE: Attempting to Modify a Readonly Tuple\nDESCRIPTION: Shows that TypeScript prevents writes to any property of a readonly tuple. This example attempts to modify the first element of a readonly tuple, resulting in a type error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2540\nfunction doSomething(pair: readonly [string, number]) {\n  pair[0] = \"hello!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Existing Interface in TypeScript\nDESCRIPTION: Illustrates how to add new fields to an existing interface in TypeScript, demonstrating interface merging.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Window {\n  title: string;\n}\n\ninterface Window {\n  ts: TypeScriptAPI;\n}\n\nconst src = 'const a = \"Hello World\"';\nwindow.ts.transpileModule(src, {});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Numeric Enum in TypeScript\nDESCRIPTION: Demonstrates how to create a basic numeric enum with auto-incrementing values starting from 1.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Function with Conditional Type\nDESCRIPTION: Uses a conditional type to simplify a function that would otherwise require multiple overloads, determining the return type based on the input parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IdLabel {\n  id: number /* some fields */;\n}\ninterface NameLabel {\n  name: string /* other fields */;\n}\ntype NameOrId<T extends number | string> = T extends number\n  ? IdLabel\n  : NameLabel;\n// ---cut---\nfunction createLabel<T extends number | string>(idOrName: T): NameOrId<T> {\n  throw \"unimplemented\";\n}\n\nlet a = createLabel(\"typescript\");\n//  ^?\n\nlet b = createLabel(2.8);\n//  ^?\n\nlet c = createLabel(Math.random() ? \"hello\" : 42);\n//  ^?\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Interface with Contravariance in TypeScript\nDESCRIPTION: Defines a generic Consumer interface showing contravariant relationship through consume method accepting type T\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Consumer<T> {\n  consume: (arg: T) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Guards with Union Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to use type guards with union types to differentiate between Fish and Bird objects. It shows the limitations of property access with union types and introduces the 'in' operator for type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\n\nlet pet = getSmallPet();\n\n// You can use the 'in' operator to check\nif (\"swim\" in pet) {\n  pet.swim();\n}\n// However, you cannot use property access\nif (pet.fly) {\n  pet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Interface Extension and Intersection Types in TypeScript\nDESCRIPTION: This snippet shows the difference between interface extension and intersection types when dealing with conflicting property types. It demonstrates how intersection types can result in a 'never' type for conflicting properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person1 {\n  name: string;\n}\n\ninterface Person2 {\n  name: number;\n}\n\ntype Staff = Person1 & Person2\n\ndeclare const staffer: Staff;\nstaffer.name;\n```\n\n----------------------------------------\n\nTITLE: Await Using Declaration for Asynchronous Resource Management in TypeScript\nDESCRIPTION: This example introduces the 'await using' declaration for asynchronous resource management. It shows how to use it in an async function to handle resources that require asynchronous cleanup.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nasync function f() {\n  await using x = new C();\n} // `await x[Symbol.asyncDispose]()` is invoked\n```\n\n----------------------------------------\n\nTITLE: User-Defined Type Guards in TypeScript\nDESCRIPTION: Shows how to create and use user-defined type guards in TypeScript. The 'isFish' function demonstrates a type predicate for narrowing between Fish and Bird types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\n\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nlet pet = getSmallPet();\n\nif (isFish(pet)) {\n  pet.swim();\n} else {\n  pet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuple Types in TypeScript\nDESCRIPTION: Demonstrates how to use JavaScript's array destructuring with TypeScript tuple types. The destructuring syntax provides a convenient way to extract and name the tuple elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doSomething(stringHash: [string, number]) {\n  const [inputString, hash] = stringHash;\n\n  console.log(inputString);\n  //          ^?\n\n  console.log(hash);\n  //          ^?\n}\n```\n\n----------------------------------------\n\nTITLE: Protected Member Visibility in TypeScript Classes\nDESCRIPTION: Demonstrates protected members in TypeScript classes, which are only visible to subclasses of the class they're declared in.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  public greet() {\n    console.log(\"Hello, \" + this.getName());\n  }\n  protected getName() {\n    return \"hi\";\n  }\n}\n\nclass SpecialGreeter extends Greeter {\n  public howdy() {\n    // OK to access protected member here\n    console.log(\"Howdy, \" + this.getName());\n    //                          ^^^^^^^^^^^^^^\n  }\n}\nconst g = new SpecialGreeter();\ng.greet(); // OK\ng.getName();\n```\n\n----------------------------------------\n\nTITLE: Double Assertion for Complex Coercions in TypeScript\nDESCRIPTION: Demonstrates how to use double assertion to perform more complex type coercions in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const expr: any;\ntype T = { a: 1; b: 2; c: 3 };\nconst a = expr as any as T;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Labeled Tuple Types\nDESCRIPTION: Examples of labeled tuple types introduced in TypeScript 4.0 for improved readability.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Range = [start: number, end: number];\ntype Foo = [first: number, second?: string, ...rest: any[]];\n```\n\n----------------------------------------\n\nTITLE: Rest Parameters in TypeScript\nDESCRIPTION: Shows how to use rest parameters to accept an unbounded number of arguments in a function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nfunction multiply(n: number, ...m: number[]) {\n  return m.map((x) => n * x);\n}\n// 'a' gets value [10, 20, 30, 40]\nconst a = multiply(10, 1, 2, 3, 4);\n```\n\n----------------------------------------\n\nTITLE: Consuming Declaration Files with Module Imports in TypeScript\nDESCRIPTION: Shows how to use the lodash library with TypeScript after installing its declaration files. This example imports lodash as a module and uses its padStart method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Consumption.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _ from \"lodash\";\n_.padStart(\"Hello TypeScript!\", 20, \" \");\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Variables and Functions in TypeScript\nDESCRIPTION: This example demonstrates how to export multiple variables, constants, classes, and functions from a TypeScript module using named exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport var pi = 3.14;\nexport let squareTwo = 1.41;\nexport const phi = 1.61;\n\nexport class RandomNumberGenerator {}\n\nexport function absolute(num: number) {\n  if (num < 0) return num * -1;\n  return num;\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Type Checking for Intrinsic Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to perform attribute type checking for intrinsic elements in TypeScript using the JSX.IntrinsicElements interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare namespace JSX {\n  interface IntrinsicElements {\n    foo: { bar?: boolean };\n  }\n}\n\n// element attributes type for 'foo' is '{bar?: boolean}'\n<foo bar />;\n```\n\n----------------------------------------\n\nTITLE: Numeric Types in TypeScript\nDESCRIPTION: Shows different numeric literal types including decimal, hexadecimal, binary, octal, and BigInt declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet decimal: number = 6;\nlet hex: number = 0xf00d;\nlet binary: number = 0b1010;\nlet octal: number = 0o744;\nlet big: bigint = 100n;\n```\n\n----------------------------------------\n\nTITLE: Class Constructor with Overloads\nDESCRIPTION: Shows a Point class with constructor overloads, allowing it to be initialized with either separate x/y coordinates or a string representation of coordinates.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x: number = 0;\n  y: number = 0;\n\n  // Constructor overloads\n  constructor(x: number, y: number);\n  constructor(xy: string);\n  constructor(x: string | number, y: number = 0) {\n    // Code logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Factory Function\nDESCRIPTION: Demonstrates creating a generic factory function that works with class constructors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create<Type>(c: { new (): Type }): Type {\n  return new c();\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with 'infer' in Conditional Types - ReturnType\nDESCRIPTION: Using the 'infer' keyword to extract the return type of a function within a conditional type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\ntype ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;\n```\n\n----------------------------------------\n\nTITLE: Enforcing Method Context with 'this' Parameter\nDESCRIPTION: Shows how to add a 'this' parameter to class method definitions to statically enforce that the method is called with the correct context. This prevents runtime errors from incorrect method usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  name = \"MyClass\";\n  getName(this: MyClass) {\n    return this.name;\n  }\n}\nconst c = new MyClass();\n// OK\nc.getName();\n\n// Error, would crash\nconst g = c.getName;\nconsole.log(g());\n```\n\n----------------------------------------\n\nTITLE: Filtering Properties with Mapped Types in TypeScript\nDESCRIPTION: Shows how to use conditional types within mapped types to filter out specific properties from an input type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype RemoveKindField<Type> = {\n    [Property in keyof Type as Exclude<Property, \"kind\">]: Type[Property]\n};\n\ninterface Circle {\n    kind: \"circle\";\n    radius: number;\n}\n\ntype KindlessCircle = RemoveKindField<Circle>;\n```\n\n----------------------------------------\n\nTITLE: Class Inheritance with extends\nDESCRIPTION: Demonstrates class inheritance using the extends keyword. A derived Dog class inherits the move method from the Animal base class while adding its own woof method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  move() {\n    console.log(\"Moving along!\");\n  }\n}\n\nclass Dog extends Animal {\n  woof(times: number) {\n    for (let i = 0; i < times; i++) {\n      console.log(\"woof!\");\n    }\n  }\n}\n\nconst d = new Dog();\n// Base class method\nd.move();\n// Derived class method\nd.woof(3);\n```\n\n----------------------------------------\n\nTITLE: Numeric Literal Types in TypeScript\nDESCRIPTION: Demonstrates the use of numeric literal types in a function return type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compare(a: string, b: string): -1 | 0 | 1 {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interface to Define Object Shape in TypeScript\nDESCRIPTION: Rewriting the previous example using an interface to define the shape of the object parameter. It shows how interfaces can be used to name and reuse type shapes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LabeledValue {\n  label: string;\n}\n\nfunction printLabel(labeledObj: LabeledValue) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = { size: 10, label: \"Size 10 Object\" };\nprintLabel(myObj);\n```\n\n----------------------------------------\n\nTITLE: Defining Template Literal Types in TypeScript\nDESCRIPTION: Demonstrates the basic syntax of template literal types, showing how they can be used to create new string literal types by concatenating contents.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype World = \"world\";\n\ntype Greeting = `hello ${World}`;\n```\n\n----------------------------------------\n\nTITLE: Using Default Parameter Values in TypeScript\nDESCRIPTION: Demonstrates how to provide default values for parameters, which changes the parameter type from including undefined to the specific type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x = 10) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Literal Types with Non-Literal Types\nDESCRIPTION: Shows how to combine literal types with non-literal types in a function parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  width: number;\n}\nfunction configure(x: Options | \"auto\") {\n  // ...\n}\nconfigure({ width: 100 });\nconfigure(\"auto\");\nconfigure(\"automatic\");\n```\n\n----------------------------------------\n\nTITLE: Using Type Alias for Function Type in TypeScript\nDESCRIPTION: Shows how to create a type alias for a function type, improving code readability and reusability.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype GreetFunction = (a: string) => void;\nfunction greeter(fn: GreetFunction) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'satisfies' Operator in TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how the new 'satisfies' operator in TypeScript 4.9 can be used to validate types without changing the resulting type of an expression.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Colors = \"red\" | \"green\" | \"blue\";\n\ntype RGB = [red: number, green: number, blue: number];\n\nconst palette = {\n    red: [255, 0, 0],\n    green: \"#00ff00\",\n    bleu: [0, 0, 255]\n//  ~~~~ The typo is now caught!\n} satisfies Record<Colors, string | RGB>;\n\n// toUpperCase() method is still accessible!\nconst greenNormalized = palette.green.toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Number Class in TypeScript\nDESCRIPTION: Demonstrates creating a generic class that can work with different types. The class includes a zero value property and an add method that works with the specified type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass GenericNumber<T> {\n  zeroValue: T;\n  add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function (x, y) {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Generic Class Factory with Inheritance\nDESCRIPTION: Demonstrates a more complex example of generic factory pattern with class inheritance and type constraints.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass BeeKeeper {\n  hasMask: boolean;\n}\n\nclass ZooKeeper {\n  nametag: string;\n}\n\nclass Animal {\n  numLegs: number;\n}\n\nclass Bee extends Animal {\n  keeper: BeeKeeper;\n}\n\nclass Lion extends Animal {\n  keeper: ZooKeeper;\n}\n\nfunction createInstance<A extends Animal>(c: new () => A): A {\n  return new c();\n}\n\ncreateInstance(Lion).keeper.nametag;\ncreateInstance(Bee).keeper.hasMask;\n```\n\n----------------------------------------\n\nTITLE: Error Detection with Optional Properties in TypeScript\nDESCRIPTION: This example shows how TypeScript detects property name typos in interfaces with optional properties, providing type safety even with optional fields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  let newSquare = { color: \"white\", area: 100 };\n  if (config.clor) {\n    // Error: Property 'clor' does not exist on type 'SquareConfig'\n    newSquare.color = config.clor;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({ color: \"black\" });\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Property Access in TypeScript\nDESCRIPTION: Demonstrates the use of optional chaining operator (?.) for safely accessing nested properties when parent objects might be null or undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = foo?.bar.baz();\n```\n\n----------------------------------------\n\nTITLE: Declaring Index Signature Type in TypeScript\nDESCRIPTION: Demonstrates how to declare a type with an index signature, allowing for dynamic property names with specific value types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype OnlyBoolsAndHorses = {\n  [key: string]: boolean | Horse;\n};\n\nconst conforms: OnlyBoolsAndHorses = {\n  del: true,\n  rodney: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Required Type Usage in TypeScript\nDESCRIPTION: Shows how Required makes all properties mandatory, opposite of Partial.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  a?: number;\n  b?: string;\n}\n\nconst obj: Props = { a: 5 };\n\nconst obj2: Required<Props> = { a: 5 };\n```\n\n----------------------------------------\n\nTITLE: Private Member Visibility in TypeScript Classes\nDESCRIPTION: Illustrates private members in TypeScript classes, which are not accessible even from subclasses.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n  private x = 0;\n}\nconst b = new Base();\n// Can't access from outside the class\nconsole.log(b.x);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Narrowing in TypeScript\nDESCRIPTION: This snippet shows how TypeScript narrows the type of a variable based on type checks, specifically demonstrating narrowing a union type of string | number to string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction uppercaseStrings(x: string | number) {\n    if (typeof x === \"string\") {\n        // TypeScript knows 'x' is a 'string' here.\n        return x.toUpperCase();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Guards for Null Checking in TypeScript\nDESCRIPTION: Shows how to use type guards to handle nullable types safely, including both explicit null checks and the nullish coalescing operator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(stringOrNull: string | null): string {\n  if (stringOrNull === null) {\n    return \"default\";\n  } else {\n    return stringOrNull;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(stringOrNull: string | null): string {\n  return stringOrNull ?? \"default\";\n}\n```\n\n----------------------------------------\n\nTITLE: Control Flow Analysis in TypeScript\nDESCRIPTION: Demonstrates how TypeScript uses control flow analysis for type narrowing. The 'example' function shows how x's type changes throughout the function based on assignments and conditionals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction example() {\n  let x: string | number | boolean;\n\n  x = Math.random() < 0.5;\n\n  console.log(x);\n  //          ^?\n\n  if (Math.random() < 0.5) {\n    x = \"hello\";\n    console.log(x);\n    //          ^?\n  } else {\n    x = 100;\n    console.log(x);\n    //          ^?\n  }\n\n  return x;\n  //     ^?\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Type Arguments in Generic Function Calls\nDESCRIPTION: Demonstrates how to manually specify type arguments when calling generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction combine<Type>(arr1: Type[], arr2: Type[]): Type[] {\n  return arr1.concat(arr2);\n}\n\nconst arr = combine<string | number>([1, 2, 3], [\"hello\"]);\n```\n\n----------------------------------------\n\nTITLE: Using Discriminating Unions for Type Narrowing in TypeScript\nDESCRIPTION: This function demonstrates how to use discriminating unions for type narrowing. It uses a switch statement on the 'state' property to determine the specific type of NetworkState at runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype NetworkState =\n  | NetworkLoadingState\n  | NetworkFailedState\n  | NetworkSuccessState;\n\nfunction logger(state: NetworkState): string {\n  // Right now TypeScript does not know which of the three\n  // potential types state could be.\n\n  // Trying to access a property which isn't shared\n  // across all types will raise an error\n  state.code;\n\n  // By switching on state, TypeScript can narrow the union\n  // down in code flow analysis\n  switch (state.state) {\n    case \"loading\":\n      return \"Downloading...\";\n    case \"failed\":\n      // The type must be NetworkFailedState here,\n      // so accessing the `code` field is safe\n      return `Error ${state.code} downloading`;\n    case \"success\":\n      return `Downloaded ${state.response.title} - ${state.response.summary}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Type Guards in TypeScript\nDESCRIPTION: Shows how to narrow a union type within a function using the typeof operator to provide type-specific behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction wrapInArray(obj: string | string[]) {\n  if (typeof obj === \"string\") {\n    return [obj];\n//          ^?\n  }\n  return obj;\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Properties in TypeScript Interfaces\nDESCRIPTION: Defining an interface with readonly properties that can only be set during object creation and cannot be modified afterwards. This example shows a Point interface with readonly coordinates.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  readonly x: number;\n  readonly y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tuple Types with Rest Parameters\nDESCRIPTION: Demonstrates how tuple types can be used with rest parameters in function signatures. This pattern is useful when you need to ensure specific types for the initial parameters while allowing variable arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readButtonInput(...args: [string, number, ...boolean[]]) {\n  const [name, version, ...input] = args;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Class Field Initializers\nDESCRIPTION: Demonstrates how TypeScript infers the type of class fields from their initializers, showing a type error when attempting to assign a string to a number field.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nclass Point {\n  x = 0;\n  y = 0;\n}\n// ---cut---\nconst pt = new Point();\npt.x = \"0\";\n```\n\n----------------------------------------\n\nTITLE: Subclassing with 'this' Type Return Values\nDESCRIPTION: Shows how the 'this' type preserves the derived class type in method return values. When a base class method returns 'this', it will return the derived class type when called on a derived class instance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClearableBox extends Box {\n  clear() {\n    this.contents = \"\";\n  }\n}\n\nconst a = new ClearableBox();\nconst b = a.set(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Static Block Implementation in Classes\nDESCRIPTION: Shows how to use static blocks for complex static initialization with access to private fields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    static #count = 0;\n\n    get count() {\n        return Foo.#count;\n    }\n\n    static {\n        try {\n            const lastInstances = loadLastInstances();\n            Foo.#count += lastInstances.length;\n        }\n        catch {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Common Properties on Union Types\nDESCRIPTION: This example shows that properties common to all union members can be accessed without type narrowing. Both string and number[] have a slice method, so it can be called directly on the union type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Return type is inferred as number[] | string\nfunction getFirstThree(x: number[] | string) {\n  return x.slice(0, 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Functions in TypeScript\nDESCRIPTION: Demonstrates how class declarations create both instance types and constructor functions. Shows basic class instantiation and method usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types with Interfaces in TypeScript\nDESCRIPTION: Shows how to create a named object type using an interface. The interface defines a Person type with name and age properties that can be used as a function parameter type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  //      ^^^^^^\n  name: string;\n  age: number;\n}\n\nfunction greet(person: Person) {\n  return \"Hello \" + person.name;\n}\n```\n\n----------------------------------------\n\nTITLE: String Variable Declaration in JavaScript\nDESCRIPTION: Shows string variable declaration and potential runtime error scenario.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = \"Hello World!\";\n```\n\n----------------------------------------\n\nTITLE: Using 'this'-based Type Guards for Lazy Validation\nDESCRIPTION: Shows how to use 'this'-based type guards for lazy validation of fields. This pattern allows TypeScript to narrow the type of a nullable field after validation, providing type-safe access to the field.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box<T> {\n  value?: T;\n\n  hasValue(): this is { value: T } {\n    return this.value !== undefined;\n  }\n}\n\nconst box = new Box<string>();\nbox.value = \"Gameboy\";\n\nbox.value;\n\nif (box.hasValue()) {\n  box.value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optional Properties in TypeScript Object Types\nDESCRIPTION: Shows how to define optional properties in interfaces using the question mark notation. The example demonstrates that optional properties can be omitted when creating objects of that type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  //  ^\n  yPos?: number;\n  //  ^\n}\n\nfunction paintShape(opts: PaintOptions) {\n  // ...\n}\n\nconst shape = getShape();\npaintShape({ shape });\npaintShape({ shape, xPos: 100 });\npaintShape({ shape, yPos: 100 });\npaintShape({ shape, xPos: 100, yPos: 100 });\n```\n\n----------------------------------------\n\nTITLE: Using 'this' Types in Class Methods\nDESCRIPTION: Demonstrates how the special 'this' type in classes dynamically refers to the type of the current class. This allows method chaining to work properly with inheritance by returning the correct derived type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box {\n  contents: string = \"\";\n  set(value: string) {\n    this.contents = value;\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: The 'in' Operator for Type Narrowing in TypeScript\nDESCRIPTION: Demonstrates how the 'in' operator is used for type narrowing in TypeScript. The 'move' function shows narrowing of union types based on property existence.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction move(animal: Fish | Bird) {\n  if (\"swim\" in animal) {\n    return animal.swim();\n  }\n\n  return animal.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Class as an Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how a class (Point) can be used as an interface and extended by another interface (Point3d). It shows the declaration of a 2D point class and a 3D point interface that extends it, followed by the creation of a Point3d object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @strict: false\nclass Point {\n  x: number;\n  y: number;\n}\n\ninterface Point3d extends Point {\n  z: number;\n}\n\nlet point3d: Point3d = { x: 1, y: 2, z: 3 };\n```\n\n----------------------------------------\n\nTITLE: Abstract Classes in TypeScript\nDESCRIPTION: Demonstrates implementation of abstract classes and methods. Shows how abstract classes serve as base classes and cannot be instantiated directly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Animal {\n  abstract makeSound(): void;\n\n  move(): void {\n    console.log(\"roaming the earth...\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Assignments in TypeScript\nDESCRIPTION: Illustrates how TypeScript narrows types based on assignments. The example shows how the type of variable x changes with different assignments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = Math.random() < 0.5 ? 10 : \"hello world!\";\n//  ^?\nx = 1;\n\nconsole.log(x);\n//          ^?\nx = \"goodbye!\";\n\nconsole.log(x);\n//          ^?\n```\n\n----------------------------------------\n\nTITLE: JavaScript Private Fields Implementation\nDESCRIPTION: Shows the usage of JavaScript's native private fields using the # prefix, which provides true private encapsulation at runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dog {\n  #barkAmount = 0;\n  personality = \"happy\";\n\n  constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Inheritance with Method Overriding in TypeScript\nDESCRIPTION: Demonstrates more advanced inheritance with constructor chaining via super() and method overriding. Shows how Snake and Horse classes extend the Animal class and override its move method with specialized implementations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n  move(distanceInMeters: number = 0) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Snake extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  move(distanceInMeters = 5) {\n    console.log(\"Slithering...\");\n    super.move(distanceInMeters);\n  }\n}\n\nclass Horse extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  move(distanceInMeters = 45) {\n    console.log(\"Galloping...\");\n    super.move(distanceInMeters);\n  }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncDisposable Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement the AsyncDisposable interface for asynchronous resource management. It shows an implementation of a DatabaseTransaction class with async disposal.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AsyncDisposable {\n  [Symbol.asyncDispose]: PromiseLike<void>;\n}\n\nclass DatabaseTransaction implements AsyncDisposable {\n  public success = false;\n  private db: Database | undefined;\n\n  private constructor(db: Database) {\n    this.db = db;\n  }\n\n  static async create(db: Database) {\n    await db.execAsync(\"BEGIN TRANSACTION\");\n    return new DatabaseTransaction(db);\n  }\n\n  async [Symbol.asyncDispose]() {\n    if (this.db) {\n      const db = this.db:\n      this.db = undefined;\n      if (this.success) {\n        await db.execAsync(\"COMMIT TRANSACTION\");\n      }\n      else {\n        await db.execAsync(\"ROLLBACK TRANSACTION\");\n      }\n    }\n  }\n}\n\nasync function transfer(db: Database, account1: Account, account2: Account, amount: number) {\n  using tx = await DatabaseTransaction.create(db);\n  if (await debitAccount(db, account1, amount)) {\n    await creditAccount(db, account2, amount);\n  }\n  // if an exception is thrown before this line, the transaction will roll back\n  tx.success = true;\n  // now the transaction will commit\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Destructuring with Type Annotations\nDESCRIPTION: Shows how to use parameter destructuring with TypeScript type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum({ a, b, c }: { a: number; b: number; c: number }) {\n  console.log(a + b + c);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-null Assertion Operator in TypeScript\nDESCRIPTION: This example shows the non-null assertion operator (!) which tells TypeScript to ignore potential null or undefined values, removing them from the type without runtime checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nfunction liveDangerously(x?: number | null) {\n  // No error\n  console.log(x!.toFixed());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index Signatures in TypeScript Interfaces\nDESCRIPTION: Demonstrates how to use index signatures in TypeScript interfaces to describe objects with dynamic property names. The example shows a StringArray interface that allows indexing with numbers to retrieve string values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringArray {\n  [index: number]: string;\n}\n\nconst myArray: StringArray = getStringArray();\nconst secondItem = myArray[1];\n```\n\n----------------------------------------\n\nTITLE: Invalid Variance Annotation Example in TypeScript\nDESCRIPTION: Shows an error case where the variance annotation conflicts with the interface's actual variance\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Error, this interface is definitely contravariant on T\ninterface Foo<out T> {\n  consume: (arg: T) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Code Before super() Call in TypeScript\nDESCRIPTION: Demonstrates the new ability to include code before super() calls in class constructors while still ensuring super() occurs before this references.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n  // ...\n}\n\nclass Derived extends Base {\n  someProperty = true;\n\n  constructor() {\n    // error!\n    // have to call 'super()' first because it needs to initialize 'someProperty'.\n    doSomeStuff();\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Guards to Filter Arrays in TypeScript\nDESCRIPTION: This snippet demonstrates how to use type guards to filter an array of union types. It shows how to obtain an array of Fish from an array of Fish | Bird using the 'isFish' type guard.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nconst zoo: (Fish | Bird)[] = [getSmallPet(), getSmallPet(), getSmallPet()];\nconst underWater1: Fish[] = zoo.filter(isFish);\n// or, equivalently\nconst underWater2: Fish[] = zoo.filter<Fish>(isFish);\nconst underWater3: Fish[] = zoo.filter<Fish>((pet) => isFish(pet));\n```\n\n----------------------------------------\n\nTITLE: Tuple Types in TypeScript\nDESCRIPTION: Demonstrates tuple type declaration and type checking for fixed-length arrays with known types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet x: [string, number];\nx = [\"hello\", 10];\nx = [10, \"hello\"];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Mapped Types Examples\nDESCRIPTION: Examples of mapped types in TypeScript showing how to create new types by transforming properties of existing types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Properties in TypeScript Classes\nDESCRIPTION: Shows how to use parameter properties to create and initialize class members in one place. Demonstrates simplified class member declaration using constructor parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Octopus {\n  readonly numberOfLegs: number = 8;\n  constructor(readonly name: string) {}\n}\n\nlet dad = new Octopus(\"Man with the 8 strong legs\");\ndad.name;\n```\n\n----------------------------------------\n\nTITLE: Union Exhaustiveness Checking with Never Type in TypeScript\nDESCRIPTION: This snippet shows how to use the 'never' type to check for exhaustiveness in discriminated unions, providing more explicit error messages.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype NetworkLoadingState = { state: \"loading\" };\ntype NetworkFailedState = { state: \"failed\"; code: number };\ntype NetworkSuccessState = { state: \"success\" };\ntype NetworkFromCachedState = { state: \"from_cache\" };\n\ntype NetworkState =\n  | NetworkLoadingState\n  | NetworkFailedState\n  | NetworkSuccessState\n  | NetworkFromCachedState;\n// ---cut---\nfunction assertNever(x: never): never {\n  throw new Error(\"Unexpected object: \" + x);\n}\n\nfunction logger(s: NetworkState): string {\n  switch (s.state) {\n    case \"loading\":\n      return \"loading request\";\n    case \"failed\":\n      return `failed with code ${s.code}`;\n    case \"success\":\n      return \"got response\";\n    default:\n      return assertNever(s);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Overloads in TypeScript\nDESCRIPTION: This snippet shows how to use function overloads to provide type-safe signatures for a function that handles different input types. It defines separate overloads for array and number inputs.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlet suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];\n\nfunction pickCard(x: { suit: string; card: number }[]): number;\nfunction pickCard(x: number): { suit: string; card: number };\nfunction pickCard(x: any): any {\n  // Check to see if we're working with an object/array\n  // if so, they gave us the deck and we'll pick the card\n  if (typeof x == \"object\") {\n    let pickedCard = Math.floor(Math.random() * x.length);\n    return pickedCard;\n  }\n  // Otherwise just let them pick the card\n  else if (typeof x == \"number\") {\n    let pickedSuit = Math.floor(x / 13);\n    return { suit: suits[pickedSuit], card: x % 13 };\n  }\n}\n\nlet myDeck = [\n  { suit: \"diamonds\", card: 2 },\n  { suit: \"spades\", card: 10 },\n  { suit: \"hearts\", card: 4 },\n];\n\nlet pickedCard1 = myDeck[pickCard(myDeck)];\nalert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);\n\nlet pickedCard2 = pickCard(15);\nalert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);\n```\n\n----------------------------------------\n\nTITLE: Polymorphic This Types in TypeScript\nDESCRIPTION: Demonstrates the fluent interface pattern using polymorphic this types, allowing method chaining with proper type inheritance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass BasicCalculator {\n  public constructor(protected value: number = 0) {}\n  public currentValue(): number {\n    return this.value;\n  }\n  public add(operand: number): this {\n    this.value += operand;\n    return this;\n  }\n  public multiply(operand: number): this {\n    this.value *= operand;\n    return this;\n  }\n}\n\nlet v = new BasicCalculator(2).multiply(5).add(1).currentValue();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass ScientificCalculator extends BasicCalculator {\n  public constructor(value = 0) {\n    super(value);\n  }\n  public sin() {\n    this.value = Math.sin(this.value);\n    return this;\n  }\n}\n\nlet v = new ScientificCalculator(2).multiply(5).sin().add(1).currentValue();\n```\n\n----------------------------------------\n\nTITLE: Defining Discriminating Unions in TypeScript\nDESCRIPTION: This code defines a discriminating union for network states. It creates three separate types for loading, failed, and success states, then combines them into a union type NetworkState.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype NetworkLoadingState = {\n  state: \"loading\";\n};\n\ntype NetworkFailedState = {\n  state: \"failed\";\n  code: number;\n};\n\ntype NetworkSuccessState = {\n  state: \"success\";\n  response: {\n    title: string;\n    duration: number;\n    summary: string;\n  };\n};\n\n// Create a type which represents only one of the above types\n// but you aren't sure which it is yet.\ntype NetworkState =\n  | NetworkLoadingState\n  | NetworkFailedState\n  | NetworkSuccessState;\n```\n\n----------------------------------------\n\nTITLE: Error When Modifying Readonly Properties in TypeScript\nDESCRIPTION: Demonstrating how TypeScript prevents modification of readonly properties after object initialization, providing compile-time immutability for object properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Components in TypeScript\nDESCRIPTION: Examples of defining Function Components in TypeScript with props typing, showing both regular function and arrow function syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ninterface FooProp {\n  name: string;\n  X: number;\n  Y: number;\n}\n\ndeclare function AnotherComponent(prop: { name: string });\nfunction ComponentFoo(prop: FooProp) {\n  return <AnotherComponent name={prop.name} />;\n}\n\nconst Button = (prop: { value: string }, context: { color: string }) => (\n  <button />\n);\n```\n\n----------------------------------------\n\nTITLE: Working with Abstract Constructor Signatures\nDESCRIPTION: Shows how to write functions that accept class constructors that produce instances of classes derived from abstract classes. This pattern uses constructor signatures to ensure type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(ctor: typeof Base) {\n  const instance = new ctor();\n  instance.printName();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tuple Index Out of Bounds Error\nDESCRIPTION: Shows that TypeScript will produce an error when attempting to access an index beyond the defined length of a tuple. This example tries to access the non-existent index 2 in a 2-element tuple.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2493\nfunction doSomething(pair: [string, number]) {\n  // ...\n\n  const c = pair[2];\n}\n```\n\n----------------------------------------\n\nTITLE: Function Compatibility in TypeScript\nDESCRIPTION: This snippet shows how function compatibility is checked in TypeScript, demonstrating that a function with fewer parameters can be assigned to a variable expecting a function with more parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = (a: number) => 0;\nlet y = (b: number, s: string) => 0;\n\ny = x; // OK\nx = y; // Error\n```\n\n----------------------------------------\n\nTITLE: Working with Constructor Signatures and Instance Types\nDESCRIPTION: Demonstrates how to use the InstanceType utility type to model the result of instantiating a class with the 'new' operator. This allows functions to accept instances of specific classes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  createdAt: number;\n  x: number;\n  y: number\n  constructor(x: number, y: number) {\n    this.createdAt = Date.now()\n    this.x = x;\n    this.y = y;\n  }\n}\ntype PointInstance = InstanceType<typeof Point>\n\nfunction moveRight(point: PointInstance) {\n  point.x += 5;\n}\n\nconst point = new Point(3, 4);\nmoveRight(point);\npoint.x; // => 8\n```\n\n----------------------------------------\n\nTITLE: Filtering Union Types with Conditional Types in TypeScript\nDESCRIPTION: Using conditional types to filter union types by including or excluding types that satisfy a condition, with practical examples.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2300 2322\n// Remove types from T that are assignable to U\ntype Diff<T, U> = T extends U ? never : T;\n// Remove types from T that are not assignable to U\ntype Filter<T, U> = T extends U ? T : never;\n\ntype T1 = Diff<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;\n//   ^?\ntype T2 = Filter<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">; // \"a\" | \"c\"\n//   ^?\ntype T3 = Diff<string | number | (() => void), Function>; // string | number\n//   ^?\ntype T4 = Filter<string | number | (() => void), Function>; // () => void\n//   ^?\n\n// Remove null and undefined from T\ntype NotNullable<T> = Diff<T, null | undefined>;\n\ntype T5 = NotNullable<string | number | undefined>;\n//   ^?\ntype T6 = NotNullable<string | string[] | null | undefined>;\n//   ^?\n\nfunction f1<T>(x: T, y: NotNullable<T>) {\n  x = y;\n  y = x;\n}\n\nfunction f2<T extends string | undefined>(x: T, y: NotNullable<T>) {\n  x = y;\n  y = x;\n  let s1: string = x;\n  let s2: string = y;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Literal Types in Unions\nDESCRIPTION: Demonstrates creating more complex union types using string and number literals to represent specific allowed values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype WindowStates = \"open\" | \"closed\" | \"minimized\";\ntype LockStates = \"locked\" | \"unlocked\";\ntype PositiveOddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;\n```\n\n----------------------------------------\n\nTITLE: Using interfaces and explicit 'this' parameters for type safety\nDESCRIPTION: This example uses TypeScript interfaces to define Card and Deck types, and explicitly declares 'this' parameter types to ensure type safety. The createCardPicker function specifically requires 'this' to be of type Deck, which helps catch errors with the noImplicitThis compiler flag.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Card {\n  suit: string;\n  card: number;\n}\n\ninterface Deck {\n  suits: string[];\n  cards: number[];\n  createCardPicker(this: Deck): () => Card;\n}\n\nlet deck: Deck = {\n  suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n  cards: Array(52),\n  // NOTE: The function now explicitly specifies that its callee must be of type Deck\n  createCardPicker: function (this: Deck) {\n    return () => {\n      let pickedCard = Math.floor(Math.random() * 52);\n      let pickedSuit = Math.floor(pickedCard / 13);\n\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n    };\n  },\n};\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n----------------------------------------\n\nTITLE: Extending Types via Intersections in TypeScript\nDESCRIPTION: Shows how to extend a type using intersections in TypeScript to combine properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Animal = {\n  name: string;\n}\n\ntype Bear = Animal & { \n  honey: boolean;\n}\n\nconst bear = getBear();\nbear.name;\nbear.honey;\n```\n\n----------------------------------------\n\nTITLE: Classes Implementing Interfaces\nDESCRIPTION: Shows how to use the implements clause to ensure a class satisfies a particular interface. Includes both a valid implementation and an error case where the interface is not correctly implemented.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2420\ninterface Pingable {\n  ping(): void;\n}\n\nclass Sonar implements Pingable {\n  ping() {\n    console.log(\"ping!\");\n  }\n}\n\nclass Ball implements Pingable {\n  pong() {\n    console.log(\"pong!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Strict Mode Configuration\nDESCRIPTION: Shows the compiler option flag for enabling all strict type checking options in TypeScript. This is the recommended setting for new projects to catch potential type-related issues early.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Strict_Type_Checking_Options_6173.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"strict\"\n```\n\n----------------------------------------\n\nTITLE: Readonly Type Example in TypeScript\nDESCRIPTION: Demonstrates making properties read-only using the Readonly utility type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Todo {\n  title: string;\n}\n\nconst todo: Readonly<Todo> = {\n  title: \"Delete inactive users\",\n};\n\ntodo.title = \"Hello\";\n```\n\n----------------------------------------\n\nTITLE: Using Readonly Tuple Types in TypeScript\nDESCRIPTION: Demonstrates how to define a readonly tuple type by adding the readonly modifier. This prevents any mutation of the tuple's elements after creation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doSomething(pair: readonly [string, number]) {\n  //                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using extends Constraint on infer Type Variable in TypeScript 4.7\nDESCRIPTION: Demonstrates the new feature in TypeScript 4.7 that allows placing an extends constraint directly on an infer type variable in conditional types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype FirstIfString<T> =\n    T extends [infer S extends string, ...unknown[]]\n        ? S\n        : never;\n```\n\n----------------------------------------\n\nTITLE: Applying Constraints to Generic Types in TypeScript\nDESCRIPTION: Shows how to use constraints to limit the types that can be used with generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction longest<Type extends { length: number }>(a: Type, b: Type) {\n  if (a.length >= b.length) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nconst longerArray = longest([1, 2], [1, 2, 3]);\nconst longerString = longest(\"alice\", \"bob\");\nconst notOK = longest(10, 100);\n```\n\n----------------------------------------\n\nTITLE: Static Members in TypeScript Classes\nDESCRIPTION: Demonstrates the implementation of static class members that are shared across all instances of a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  static x = 0;\n  static printX() {\n    console.log(MyClass.x);\n  }\n}\nconsole.log(MyClass.x);\nMyClass.printX();\n```\n\n----------------------------------------\n\nTITLE: Literal Types with Variables in TypeScript\nDESCRIPTION: Illustrates how TypeScript infers literal types for constants but not for variables declared with 'let'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nlet changingString = \"Hello World\";\nchangingString = \"Olá Mundo\";\n\nconst constantString = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Overloads in TypeScript\nDESCRIPTION: Demonstrates how to write function overloads to support multiple calling patterns, such as creating a Date with different parameter sets.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeDate(timestamp: number): Date;\nfunction makeDate(m: number, d: number, y: number): Date;\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date {\n  if (d !== undefined && y !== undefined) {\n    return new Date(y, mOrTimestamp, d);\n  } else {\n    return new Date(mOrTimestamp);\n  }\n}\nconst d1 = makeDate(12345678);\nconst d2 = makeDate(5, 5, 5);\nconst d3 = makeDate(1, 3);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Optional Properties in TypeScript\nDESCRIPTION: Shows how to handle undefined values from optional properties by providing default values. The example uses conditional logic to set defaults when properties are undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction paintShape(opts: PaintOptions) {\n  let xPos = opts.xPos === undefined ? 0 : opts.xPos;\n  //  ^?\n  let yPos = opts.yPos === undefined ? 0 : opts.yPos;\n  //  ^?\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Indexed Access Types with Unions and keyof in TypeScript\nDESCRIPTION: Shows advanced indexed access types using union types, the keyof operator, and type aliases as index types. These techniques allow extracting multiple property types simultaneously.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype I1 = Person[\"age\" | \"name\"];\n//   ^?\n\ntype I2 = Person[keyof Person];\n//   ^?\n\ntype AliveOrName = \"alive\" | \"name\";\ntype I3 = Person[AliveOrName];\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Narrowing Union Types with Array.isArray\nDESCRIPTION: This snippet shows how to use Array.isArray() for type narrowing. In the first branch, TypeScript knows x is a string array, while in the else branch, it's narrowed to a string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction welcomePeople(x: string[] | string) {\n  if (Array.isArray(x)) {\n    // Here: 'x' is 'string[]'\n    console.log(\"Hello, \" + x.join(\" and \"));\n  } else {\n    // Here: 'x' is 'string'\n    console.log(\"Welcome lone traveler \" + x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays with Type Guards in TypeScript\nDESCRIPTION: Demonstrates using type guards to filter arrays in TypeScript. The example shows how to use the 'isFish' type guard to filter an array of Fish | Bird to get an array of Fish.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void; name: string };\ntype Bird = { fly: () => void; name: string };\ndeclare function getSmallPet(): Fish | Bird;\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nconst zoo: (Fish | Bird)[] = [getSmallPet(), getSmallPet(), getSmallPet()];\nconst underWater1: Fish[] = zoo.filter(isFish);\n// or, equivalently\nconst underWater2: Fish[] = zoo.filter(isFish) as Fish[];\n\n// The predicate may need repeating for more complex examples\nconst underWater3: Fish[] = zoo.filter((pet): pet is Fish => {\n  if (pet.name === \"sharkey\") return false;\n  return isFish(pet);\n});\n```\n\n----------------------------------------\n\nTITLE: String Enum Definition\nDESCRIPTION: Shows how to create a string-based enum where each member is initialized with string literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nenum Direction {\n  Up = \"UP\",\n  Down = \"DOWN\",\n  Left = \"LEFT\",\n  Right = \"RIGHT\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Class for Mixins in TypeScript\nDESCRIPTION: Creating a Sprite class that will serve as the base class for applying mixins. This class represents a basic sprite with name, x and y properties, and a constructor that accepts a name parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Sprite {\n  name = \"\";\n  x = 0;\n  y = 0;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Array Types with Conditional Types\nDESCRIPTION: Demonstrates using conditional types to create a type that extracts the element type from an array or leaves non-array types unchanged.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Flatten<T> = T extends any[] ? T[number] : T;\n\n// Extracts out the element type.\ntype Str = Flatten<string[]>;\n//   ^?\n\n// Leaves the type alone.\ntype Num = Flatten<number>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface in TypeScript\nDESCRIPTION: Demonstrates how to create an interface that defines the shape of an object with specific property types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  name: string;\n  id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Values in Object Destructuring in TypeScript\nDESCRIPTION: This function demonstrates how to specify default values for properties when destructuring an object in a function parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keepWholeObject(wholeObject: { a: string; b?: number }) {\n  let { a, b = 1001 } = wholeObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Using readonly Modifier for Class Properties\nDESCRIPTION: Demonstrates the readonly modifier which prevents assignments to class fields outside of the constructor, showing the resulting TypeScript errors when attempting to modify such fields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2540 2540\nclass Greeter {\n  readonly name: string = \"world\";\n\n  constructor(otherName?: string) {\n    if (otherName !== undefined) {\n      this.name = otherName;\n    }\n  }\n\n  err() {\n    this.name = \"not ok\";\n  }\n}\nconst g = new Greeter();\ng.name = \"also not ok\";\n```\n\n----------------------------------------\n\nTITLE: Readonly Properties with Nested Objects in TypeScript\nDESCRIPTION: Shows that readonly only prevents reassignment of the property itself, not modification of the object it points to. Properties of nested objects can still be modified even when the parent reference is readonly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Home {\n  readonly resident: { name: string; age: number };\n}\n\nfunction visitForBirthday(home: Home) {\n  // We can read and update properties from 'home.resident'.\n  console.log(`Happy birthday ${home.resident.name}!`);\n  home.resident.age++;\n}\n\nfunction evict(home: Home) {\n  // But we can't write to the 'resident' property itself on a 'Home'.\n  home.resident = {\n    name: \"Victor the Evictor\",\n    age: 42,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using arrow functions to correctly handle 'this' in callbacks\nDESCRIPTION: This example demonstrates using arrow functions to solve the 'this' context problem in callbacks. Arrow functions capture the outer 'this' value, allowing the Handler class to maintain its context while still conforming to the addClickListener interface that expects 'this: void'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass Handler {\n  info: string;\n  onClickGood = (e: Event) => {\n    this.info = e.message;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Type Assertion in TypeScript\nDESCRIPTION: Demonstrates the angle-bracket syntax for type assertion in TypeScript, which is equivalent to the 'as' syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst myCanvas = <HTMLCanvasElement>document.getElementById(\"main_canvas\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Conditional Types in TypeScript\nDESCRIPTION: Demonstrates how to use recursive conditional types to flatten nested arrays using the ElementType type helper. Shows type checking for arrays of different nesting levels.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementType<T> = T extends ReadonlyArray<infer U> ? ElementType<U> : T;\n\nfunction deepFlatten<T extends readonly unknown[]>(x: T): ElementType<T>[] {\n  throw \"not implemented\";\n}\n\n// All of these return the type 'number[]':\ndeepFlatten([1, 2, 3]);\ndeepFlatten([[1], [2, 3]]);\ndeepFlatten([[1], [[2]], [[[3]]]]);\n```\n\n----------------------------------------\n\nTITLE: Class Index Signatures\nDESCRIPTION: Implements an index signature in a class, allowing properties with string keys to be added. The signature includes both boolean values and functions returning boolean.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  [s: string]: boolean | ((s: string) => boolean);\n\n  check(s: string) {\n    return this[s] as boolean;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'typeof' Type Guards in TypeScript\nDESCRIPTION: This snippet demonstrates the use of 'typeof' type guards for primitive types. It shows how TypeScript recognizes 'typeof' checks as type guards, allowing for inline type narrowing without custom functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(value: string, padding: string | number) {\n  if (typeof padding === \"number\") {\n    return Array(padding + 1).join(\" \") + value;\n  }\n  if (typeof padding === \"string\") {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got '${padding}'.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Class Implementation\nDESCRIPTION: Demonstrates the implementation of generic classes in TypeScript with type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box<Type> {\n  contents: Type;\n  constructor(value: Type) {\n    this.contents = value;\n  }\n}\n\nconst b = new Box(\"hello!\");\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type Expression in TypeScript\nDESCRIPTION: Demonstrates how to use function type expressions to describe function parameters and return types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greeter(fn: (a: string) => void) {\n  fn(\"Hello, World\");\n}\n\nfunction printToConsole(s: string) {\n  console.log(s);\n}\n\ngreeter(printToConsole);\n```\n\n----------------------------------------\n\nTITLE: Using Unions with Template Literal Types in TypeScript\nDESCRIPTION: Shows how unions can be used in interpolated positions of template literal types to create a set of all possible string literal combinations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailLocaleIDs = \"welcome_email\" | \"email_heading\";\ntype FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\";\n\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;\n```\n\n----------------------------------------\n\nTITLE: Typing Getter/Setter with Separate Read/Write Types in TypeScript\nDESCRIPTION: Shows how to use TypeScript 4.3's new feature to specify different types for reading and writing to properties in a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Thing {\n  #size = 0;\n\n  get size(): number {\n    return this.#size;\n  }\n\n  set size(value: string | number | boolean) {\n    let num = Number(value);\n\n    // Don't allow NaN and stuff.\n    if (!Number.isFinite(num)) {\n      this.#size = 0;\n      return;\n    }\n\n    this.#size = num;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contextual Typing for UI Event Handler in TypeScript\nDESCRIPTION: Demonstrates how TypeScript infers the type of a function parameter as UIEvent based on its assignment to window.onscroll. Shows error detection for accessing non-existent properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.onscroll = function (uiEvent) {\n  console.log(uiEvent.button);\n};\n```\n\n----------------------------------------\n\nTITLE: ReadonlyArray Usage in TypeScript\nDESCRIPTION: Using the built-in ReadonlyArray type to create immutable arrays where mutating methods are removed, ensuring arrays cannot be changed after creation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\n\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n```\n\n----------------------------------------\n\nTITLE: Adding String Index Signature to Interface\nDESCRIPTION: Demonstrates how to define an interface that allows additional properties of any type using an index signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n  [propName: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Overloaded Functions in TypeScript Declaration Files\nDESCRIPTION: Syntax for declaring function overloads in .d.ts files, allowing a function to accept different parameter types and return different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getWidget(n: number): Widget;\ndeclare function getWidget(s: string): Widget[];\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Operator for Type Narrowing in TypeScript\nDESCRIPTION: This snippet shows how to use the 'in' operator as a narrowing expression for types. It demonstrates narrowing a Fish | Bird union type based on the presence of the 'swim' property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction move(pet: Fish | Bird) {\n  if (\"swim\" in pet) {\n    return pet.swim();\n  }\n  return pet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Elements in Tuple Types\nDESCRIPTION: Shows how to create tuple types with optional elements using a question mark notation. Optional elements can only appear at the end of a tuple and affect the type of the length property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype Either2dOr3d = [number, number, number?];\n\nfunction setCoordinate(coord: Either2dOr3d) {\n  const [x, y, z] = coord;\n  //           ^?\n\n  console.log(`Provided coordinates had ${coord.length} dimensions`);\n  //                                            ^?\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union Types Instead of Function Overloads\nDESCRIPTION: Shows a better approach using union types instead of function overloads when the implementations are similar, making the function more flexible.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nfunction len(x: any[] | string) {\n  return x.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Helper Types with Type Aliases in TypeScript\nDESCRIPTION: This snippet shows how to create generic helper types using type aliases, demonstrating their flexibility compared to interfaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype OrNull<Type> = Type | null;\n\ntype OneOrMany<Type> = Type | Type[];\n\ntype OneOrManyOrNull<Type> = OrNull<OneOrMany<Type>>;\n\ntype OneOrManyOrNullStrings = OneOrManyOrNull<string>;\n```\n\n----------------------------------------\n\nTITLE: Limitation of Function Overloads with Union Types\nDESCRIPTION: Shows the limitation of function overloads when dealing with values that could be either of the overloaded types, as TypeScript can only resolve to a single overload.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nlen(\"\"); // OK\nlen([0]); // OK\nlen(Math.random() > 0.5 ? \"hello\" : [0]);\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Types of Indexers in TypeScript\nDESCRIPTION: Illustrates the use of multiple indexers in a TypeScript interface, highlighting the constraint that numeric indexers must return a subtype of string indexers. This example shows an error case where this rule is violated.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  breed: string;\n}\n\n// Error: indexing with a numeric string might get you a completely separate type of Animal!\ninterface NotOkay {\n  [x: number]: Animal;\n  [x: string]: Dog;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding String Index Signatures for Flexible Object Types\nDESCRIPTION: Demonstrates how to add a string index signature to an interface to allow for additional properties of unknown types. This approach provides flexibility while maintaining type safety for known properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n  [propName: string]: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Union Types in Index Signatures\nDESCRIPTION: Shows how to use union types in index signatures to allow properties of different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberOrStringDictionary {\n  [index: string]: number | string;\n\n  length: number; // ok, length is a number\n  name: string; // ok, name is a string\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Generic Array Types in TypeScript (Generic Syntax)\nDESCRIPTION: A generic function that works with arrays using the Array<Type> syntax. This is an alternative way to express the same generic array type as the previous example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<Type>(arg: Array<Type>): Array<Type> {\n  console.log(arg.length); // Array has a .length, so no more error\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Generic Array Type in TypeScript\nDESCRIPTION: This snippet explains the Array type as a generic object type and demonstrates its usage with different element types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doSomething(value: Array<string>) {\n  // ...\n}\n\nlet myArray: string[] = [\"hello\", \"world\"];\n\n// either of these work!\ndoSomething(myArray);\ndoSomething(new Array(\"hello\", \"world\"));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Logic Error Detection\nDESCRIPTION: Demonstrates TypeScript's ability to catch logical code flow errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = Math.random() < 0.5 ? \"a\" : \"b\";\nif (value !== \"a\") {\n  // ...\n} else if (value === \"b\") {\n  // Oops, unreachable\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structural Typing with Interfaces in TypeScript\nDESCRIPTION: This example shows how TypeScript's structural type system works with interfaces. It demonstrates that an object can satisfy multiple interfaces based on its structure rather than explicit declarations, illustrating the 'types as sets' concept.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for OOPers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Pointlike {\n  x: number;\n  y: number;\n}\ninterface Named {\n  name: string;\n}\n\nfunction logPoint(point: Pointlike) {\n  console.log(\"x = \" + point.x + \", y = \" + point.y);\n}\n\nfunction logName(x: Named) {\n  console.log(\"Hello, \" + x.name);\n}\n\nconst obj = {\n  x: 0,\n  y: 0,\n  name: \"Origin\",\n};\n\nlogPoint(obj);\nlogName(obj);\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters and Setters in TypeScript\nDESCRIPTION: Demonstrates implementation of getter and setter accessors with validation logic. Shows how to control property access and add constraints.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst fullNameMaxLength = 10;\n\nclass Employee {\n  private _fullName: string = \"\";\n\n  get fullName(): string {\n    return this._fullName;\n  }\n\n  set fullName(newName: string) {\n    if (newName && newName.length > fullNameMaxLength) {\n      throw new Error(\"fullName has a max length of \" + fullNameMaxLength);\n    }\n\n    this._fullName = newName;\n  }\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\n\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Generic Type Compatibility in TypeScript\nDESCRIPTION: This snippet shows how generic types without differentiating members are compatible, while those with differentiating members are not.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Empty<T> {}\nlet x: Empty<number>;\nlet y: Empty<string>;\n\nx = y; // OK, because y matches structure of x\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotEmpty<T> {\n  data: T;\n}\nlet x: NotEmpty<number>;\nlet y: NotEmpty<string>;\n\nx = y; // Error, because x and y are not compatible\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Assignability Error in TypeScript\nDESCRIPTION: This snippet shows an error when assigning an object with a string array to a variable expecting a number array. It demonstrates how TypeScript explains type incompatibility in detail.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Understanding Errors.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet a: { m: number[] };\nlet b = { m: [\"\"] };\na = b;\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Function Type in TypeScript\nDESCRIPTION: Assigning a generic function to a variable with a matching generic function type. This shows how to declare a variable with a generic function type signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n\nlet myIdentity: <Type>(arg: Type) => Type = identity;\n```\n\n----------------------------------------\n\nTITLE: Interface with Optional Properties in TypeScript\nDESCRIPTION: Demonstrating how to define optional properties in interfaces using the question mark notation. This example shows a function that creates a square based on optional configuration parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  let newSquare = { color: \"white\", area: 100 };\n  if (config.color) {\n    newSquare.color = config.color;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({ color: \"black\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Only Imports and Exports in TypeScript\nDESCRIPTION: Demonstrates the new syntax for type-only imports and exports in TypeScript 3.8. This feature allows importing types without runtime overhead and is especially useful when working with isolatedModules or Babel.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SomeThing } from \"./some-module.js\";\n\nexport type { SomeThing };\n```\n\n----------------------------------------\n\nTITLE: Contextual Typing with Map Function\nDESCRIPTION: Demonstrates TypeScript's contextual typing capabilities using a generic map function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function map<T, U>(f: (t: T) => U, ts: T[]): U[];\nlet sns = map((n) => n.toString(), [1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Generic Function with Lengthwise Interface Constraint\nDESCRIPTION: Shows how to properly constrain a generic type to ensure it has a length property using an interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with var in TypeScript\nDESCRIPTION: This snippet demonstrates basic variable declaration using var in TypeScript. It shows how var can be used to declare variables at different scopes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar a = 10;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  var message = \"Hello, world!\";\n\n  return message;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  var a = 10;\n  return function g() {\n    var b = a + 1;\n    return b;\n  };\n}\n\nvar g = f();\ng(); // returns '11'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  var a = 1;\n\n  a = 2;\n  var b = g();\n  a = 3;\n\n  return b;\n\n  function g() {\n    return a;\n  }\n}\n\nf(); // returns '2'\n```\n\n----------------------------------------\n\nTITLE: Combining Call and Construct Signatures in TypeScript\nDESCRIPTION: Shows how to define an interface that combines both call and construct signatures for versatile function types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CallOrConstruct {\n  (n?: number): string;\n  new (s: string): Date;\n}\n\nfunction fn(ctor: CallOrConstruct) {\n  console.log(ctor(10));\n  console.log(new ctor(\"10\"));\n}\n\nfn(Date);\n```\n\n----------------------------------------\n\nTITLE: Fixing 'this' context with arrow functions in TypeScript\nDESCRIPTION: This example demonstrates how to fix the 'this' context issue by using arrow functions. The arrow function captures 'this' from the context where it's created, ensuring that 'this' refers to the deck object even when the function is called elsewhere.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet deck = {\n  suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n  cards: Array(52),\n  createCardPicker: function () {\n    // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\n    return () => {\n      let pickedCard = Math.floor(Math.random() * 52);\n      let pickedSuit = Math.floor(pickedCard / 13);\n\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n    };\n  },\n};\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n----------------------------------------\n\nTITLE: Using Generic Functions with Generic Object Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to use generic functions with generic object types, avoiding the need for function overloads.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Box<Type> {\n  contents: Type;\n}\n\nfunction setContents<Type>(box: Box<Type>, newContents: Type) {\n  box.contents = newContents;\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-incrementing Numeric Enum\nDESCRIPTION: Shows how to create a numeric enum without initializers, where values auto-increment from 0.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Enumerable Method Decorator in TypeScript\nDESCRIPTION: Implementation of an @enumerable decorator factory that takes a boolean parameter and returns a decorator function which modifies the PropertyDescriptor's enumerable property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction enumerable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.enumerable = value;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON files with resolveJsonModule enabled\nDESCRIPTION: Shows how enabling the resolveJsonModule option allows importing JSON files and provides type checking based on the JSON structure. The example demonstrates validation of JSON property types and detects a type error when comparing a boolean with a number.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/resolveJsonModule.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n```\n\n----------------------------------------\n\nTITLE: Initializing Class Fields with Default Values\nDESCRIPTION: Creates a Point class with x and y fields initialized to 0. This shows how to provide default values for class properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x = 0;\n  y = 0;\n}\n\nconst pt = new Point();\n// Prints 0, 0\nconsole.log(`${pt.x}, ${pt.y}`);\n```\n\n----------------------------------------\n\nTITLE: Renaming Imports in TypeScript\nDESCRIPTION: This example demonstrates how to rename an import using the 'as' keyword in TypeScript. It renames the imported 'pi' to 'π'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pi as π } from \"./maths.js\";\n\nconsole.log(π);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Compatibility in TypeScript\nDESCRIPTION: This snippet illustrates how an object with extra properties can be assigned to a variable of a type with fewer properties, as long as it has all the required properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Pet {\n  name: string;\n}\n\nlet pet: Pet;\n// dog's inferred type is { name: string; owner: string; }\nlet dog = { name: \"Lassie\", owner: \"Rudd Weatherwax\" };\npet = dog;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Initialization Check in TypeScript\nDESCRIPTION: This snippet shows how TypeScript 5.7 can catch issues when a variable is not initialized in all code branches. It demonstrates an error when a variable is used before being assigned.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet result: number\nif (someCondition()) {\n    result = doSomeWork();\n}\nelse {\n    let temporaryWork = doSomeWork();\n    temporaryWork *= 2;\n    // forgot to assign to 'result'\n}\n\nconsole.log(result); // error: Variable 'result' is used before being assigned.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Property Plucking\nDESCRIPTION: Type-safe implementation of property plucking using TypeScript's index type query and indexed access operators.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pluck<T, K extends keyof T>(o: T, propertyNames: K[]): T[K][] {\n  return propertyNames.map((n) => o[n]);\n}\n\ninterface Car {\n  manufacturer: string;\n  model: string;\n  year: number;\n}\n\nlet taxi: Car = {\n  manufacturer: \"Toyota\",\n  model: \"Camry\",\n  year: 2014,\n};\n\nlet makeAndModel: string[] = pluck(taxi, [\"manufacturer\", \"model\"]);\n\nlet modelYear = pluck(taxi, [\"model\", \"year\"]);\n```\n\n----------------------------------------\n\nTITLE: Optional Interface Properties Not Created by implements\nDESCRIPTION: Shows that implementing an interface with an optional property doesn't automatically create that property on the class, resulting in an error when trying to access it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339\ninterface A {\n  x: number;\n  y?: number;\n}\nclass C implements A {\n  x = 0;\n}\nconst c = new C();\nc.y = 10;\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise Unwrapping with Recursive Types\nDESCRIPTION: Shows how to create an Awaited type that recursively unwraps Promise types, similar to how Promise.then() works but with more precise typing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Awaited<T> = T extends PromiseLike<infer U> ? Awaited<U> : T;\n\n/// Like `promise.then(...)`, but more accurate in types.\ndeclare function customThen<T, U>(\n  p: Promise<T>,\n  onFulfilled: (value: Awaited<T>) => U\n): Promise<Awaited<U>>;\n```\n\n----------------------------------------\n\nTITLE: Using infer in Conditional Types\nDESCRIPTION: Shows how to use the 'infer' keyword in conditional types to extract and infer types from complex structures rather than accessing them manually.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Flatten<Type> = Type extends Array<infer Item> ? Item : Type;\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Class Members\nDESCRIPTION: Shows how to properly extend an abstract class by implementing all its abstract members in a derived class. The derived class can then be instantiated.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nclass Derived extends Base {\n  getName() {\n    return \"world\";\n  }\n}\n\nconst d = new Derived();\nd.printName();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Partial Application\nDESCRIPTION: Function implementation for partial application using variadic tuple types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partialCall<T extends Arr, U extends Arr, R>(\n  f: (...args: [...T, ...U]) => R,\n  ...headArgs: T\n) {\n  return (...tailArgs: U) => f(...headArgs, ...tailArgs);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic tsconfig.json Configuration File\nDESCRIPTION: A minimal TypeScript configuration file that specifies output directory, enables JavaScript files as input, sets the target to ES5, and includes all files in the src directory.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"outDir\": \"./built\",\n    \"allowJs\": true,\n    \"target\": \"es5\"\n  },\n  \"include\": [\"./src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring this in TypeScript Functions\nDESCRIPTION: Demonstrates how TypeScript infers 'this' context in object methods and how to explicitly declare 'this' type in functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  id: 123,\n\n  admin: false,\n  becomeAdmin: function () {\n    this.admin = true;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Type Aliases in TypeScript\nDESCRIPTION: Demonstrates how to use generics to create type-safe array definitions that can contain specific types of elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringArray = Array<string>;\ntype NumberArray = Array<number>;\ntype ObjectWithNameArray = Array<{ name: string }>;\n```\n\n----------------------------------------\n\nTITLE: Implementing String Padding Function with Union Type in TypeScript\nDESCRIPTION: This function adds padding to the left side of a string. It uses a union type (string | number) for the padding parameter, providing better type safety than the 'any' type version.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(value: string, padding: string | number) {\n  // ...\n}\n\nlet indentedString = padLeft(\"Hello world\", true);\n```\n\n----------------------------------------\n\nTITLE: Function Overloads for String and Array Length\nDESCRIPTION: Demonstrates writing function overloads to handle different parameter types (string and array) that share a common operation (length).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nfunction len(s: string): number;\nfunction len(arr: any[]): number;\nfunction len(x: any) {\n  return x.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Property Initialization in TypeScript Classes\nDESCRIPTION: This example shows how TypeScript enforces proper initialization of class properties when strictPropertyInitialization is enabled. It demonstrates four scenarios: explicit initialization in constructor, default initialization, missing initialization (which causes an error), and optional properties with undefined type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictPropertyInitialization.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2564\nclass UserAccount {\n  name: string;\n  accountType = \"user\";\n\n  email: string;\n  address: string | undefined;\n\n  constructor(name: string) {\n    this.name = name;\n    // Note that this.email is not set\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named and Anonymous Functions in TypeScript\nDESCRIPTION: This snippet demonstrates how to create named and anonymous functions in TypeScript, similar to JavaScript but without type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Named function\nfunction add(x, y) {\n  return x + y;\n}\n\n// Anonymous function\nlet myAdd = function (x, y) {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Distributing Conditional Types Over Unions\nDESCRIPTION: Demonstrates how a conditional type distributes over each member of a union type when applied to a union.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToArray<Type> = Type extends any ? Type[] : never;\n\ntype StrArrOrNumArr = ToArray<string | number>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Implementing a Method Decorator in TypeScript\nDESCRIPTION: Example of applying a method decorator to a class method to control its enumerable property. This decorator modifies the PropertyDescriptor of the method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Method Decorator Implementation\nDESCRIPTION: Implementation of a loggedMethod decorator that adds entry and exit logging to methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggedMethod(originalMethod: any, _context: any) {\n\n    function replacementMethod(this: any, ...args: any[]) {\n        console.log(\"LOG: Entering method.\")\n        const result = originalMethod.call(this, ...args);\n        console.log(\"LOG: Exiting method.\")\n        return result;\n    }\n\n    return replacementMethod;\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Type Aliases in TypeScript 3.7\nDESCRIPTION: Illustrates the new capability in TypeScript 3.7 to define recursive type aliases without introducing helper interfaces, using the ValueOrArray example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ValueOrArray<T> = T | Array<ValueOrArray<T>>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [property: string]: Json }\n  | Json[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype VirtualNode = string | [string, { [key: string]: any }, ...VirtualNode[]];\n\nconst myNode: VirtualNode = [\n  \"div\",\n  { id: \"parent\" },\n  [\"div\", { id: \"first-child\" }, \"I'm the first child\"],\n  [\"div\", { id: \"second-child\" }, \"I'm the second child\"],\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Union Types with Common Fields in TypeScript\nDESCRIPTION: This snippet shows how union types work with common fields. It defines Bird and Fish interfaces, and demonstrates that only common methods can be accessed when using a union type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Bird {\n  fly(): void;\n  layEggs(): void;\n}\n\ninterface Fish {\n  swim(): void;\n  layEggs(): void;\n}\n\ndeclare function getSmallPet(): Fish | Bird;\n\nlet pet = getSmallPet();\npet.layEggs();\n\n// Only available in one of the two possible types\npet.swim();\n```\n\n----------------------------------------\n\nTITLE: Using Optional Parameters in TypeScript Interfaces\nDESCRIPTION: Demonstrates the use of optional parameters in TypeScript interfaces to simplify overloads that differ only in trailing parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\ninterface Example {\n  diff(one: string): number;\n  diff(one: string, two: string): number;\n  diff(one: string, two: string, three: boolean): number;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\ninterface Example {\n  diff(one: string, two?: string, three?: boolean): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Union of Literal Types in Function Parameters\nDESCRIPTION: Shows how to use a union of literal types to restrict function parameters to a set of specific values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n  // ...\n}\nprintText(\"Hello, world\", \"left\");\nprintText(\"G'day, mate\", \"centre\");\n```\n\n----------------------------------------\n\nTITLE: Explicitly Calling a Generic Function with Type Argument in TypeScript\nDESCRIPTION: This example demonstrates how to explicitly specify the type when calling a generic function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet output = identity<string>(\"myString\");\n```\n\n----------------------------------------\n\nTITLE: Union Types and Array Annotations\nDESCRIPTION: Demonstrates JSDoc syntax for union types and various ways to specify array types\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {string | boolean}\n */\nvar sb;\n\n/** @type {number[]} */\nvar ns;\n/** @type {Array.<number>} */\nvar jsdoc;\n/** @type {Array<number>} */\nvar nas;\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Functions in TypeScript\nDESCRIPTION: Demonstrates how to create generic functions to handle multiple types while maintaining type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Key Remapping with 'as' in Mapped Types (TypeScript)\nDESCRIPTION: Illustrates how to use the 'as' clause in mapped types to rename properties, utilizing template literal types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Getters<Type> = {\n    [Property in keyof Type as `get${Capitalize<string & Property>}`]: () => Type[Property]\n};\n\ninterface Person {\n    name: string;\n    age: number;\n    location: string;\n}\n\ntype LazyPerson = Getters<Person>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Enabled noImplicitAny in TypeScript\nDESCRIPTION: Demonstrates how TypeScript generates an error when noImplicitAny is enabled and encounters a variable without type annotation that would be implicitly typed as 'any'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitAny.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7006\nfunction fn(s) {\n  console.log(s.subtr(3));\n}\n```\n\n----------------------------------------\n\nTITLE: Object Destructuring in TypeScript\nDESCRIPTION: This example demonstrates basic object destructuring, creating new variables from object properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet o = {\n  a: \"foo\",\n  b: 12,\n  c: \"bar\",\n};\nlet { a, b } = o;\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Overloads in TypeScript\nDESCRIPTION: Demonstrates how to define function overloads in TypeScript, allowing a function to be called with different argument types and return values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// Our overloads:\nfunction printValue(str: string): void;\nfunction printValue(num: number, maxFractionDigits?: number): void;\n\n// Our implementation:\nfunction printValue(value: string | number, maximumFractionDigits?: number) {\n    if (typeof value === \"number\") {\n        const formatter = Intl.NumberFormat(\"en-US\", {\n            maximumFractionDigits,\n        });\n        value = formatter.format(value);\n    }\n\n    console.log(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Template String Type Inference with Generic Functions in TypeScript\nDESCRIPTION: Demonstrates TypeScript's enhanced inference capabilities for template strings, showing how different input types are inferred when used with template strings in generic function contexts.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo<V extends string>(arg: `*${V}*`): V;\n\nfunction test<T extends string>(s: string, n: number, b: boolean, t: T) {\n    let x1 = foo(\"*hello*\");            // \"hello\"\n    let x2 = foo(\"**hello**\");          // \"*hello*\"\n    let x3 = foo(`*${s}*` as const);    // string\n    let x4 = foo(`*${n}*` as const);    // `${number}`\n    let x5 = foo(`*${b}*` as const);    // \"true\" | \"false\"\n    let x6 = foo(`*${t}*` as const);    // `${T}`\n    let x7 = foo(`**${s}**` as const);  // `*${string}*`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Interfaces for Functions in TypeScript\nDESCRIPTION: This example demonstrates how to create a generic interface for functions and use it to type a variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenericIdentityFn {\n  <T>(arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nlet myIdentity: GenericIdentityFn = identity;\n```\n\n----------------------------------------\n\nTITLE: Using satisfies Operator in TypeScript\nDESCRIPTION: Demonstrates the 'satisfies' operator which validates an object against a type without changing the inferred type, preserving more precise type information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CompilerOptions {\n    strict?: boolean;\n    outDir?: string;\n    // ...\n}\n\ninterface ConfigSettings {\n    compilerOptions?: CompilerOptions;\n    extends?: string | string[];\n    // ...\n}\n\nlet myConfigSettings = {\n    compilerOptions: {\n        strict: true,\n        outDir: \"../lib\",\n        // ...\n    },\n\n    extends: [\n        \"@tsconfig/strictest/tsconfig.json\",\n        \"../../../tsconfig.base.json\"\n    ],\n\n} satisfies ConfigSettings;\n```\n\n----------------------------------------\n\nTITLE: Public Member Visibility in TypeScript Classes\nDESCRIPTION: Shows the default public visibility of class members in TypeScript, which allows access from anywhere.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  public greet() {\n    console.log(\"hi!\");\n  }\n}\nconst g = new Greeter();\ng.greet();\n```\n\n----------------------------------------\n\nTITLE: Distributive Conditional Types\nDESCRIPTION: Explains how conditional types distribute over union types when acting on a generic type, applying the conditional to each member of the union independently.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToArray<Type> = Type extends any ? Type[] : never;\n```\n\n----------------------------------------\n\nTITLE: React Integration with TypeScript JSX\nDESCRIPTION: This snippet demonstrates how to use JSX with React in TypeScript, including defining props interfaces and using them in class components.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n/// <reference path=\"react.d.ts\" />\n\ninterface Props {\n  foo: string;\n}\n\nclass MyComponent extends React.Component<Props, {}> {\n  render() {\n    return <span>{this.props.foo}</span>;\n  }\n}\n\n<MyComponent foo=\"bar\" />; // ok\n<MyComponent foo={0} />; // error\n```\n\n----------------------------------------\n\nTITLE: Using Separate Read/Write Types in TypeScript\nDESCRIPTION: Demonstrates how to use a class with separate read/write types, showing that assigning different types works and reading always produces a number.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet thing = new Thing();\n\n// Assigning other types to `thing.size` works!\nthing.size = \"hello\";\nthing.size = true;\nthing.size = 42;\n\n// Reading `thing.size` always produces a number!\nlet mySize: number = thing.size;\n```\n\n----------------------------------------\n\nTITLE: Getters and Setters with Different Types\nDESCRIPTION: Demonstrates a class with accessors that have different types for getting and setting, allowing the setter to accept multiple types while the getter returns a single type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Thing {\n  _size = 0;\n\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: string | number | boolean) {\n    let num = Number(value);\n\n    // Don't allow NaN, Infinity, etc\n\n    if (!Number.isFinite(num)) {\n      this._size = 0;\n      return;\n    }\n\n    this._size = num;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generator Function Example in TypeScript\nDESCRIPTION: Example of a generator function that yields values directly and delegates to an array using yield*\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* f() {\n  yield 1;\n  yield* [2, 3];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating strictBindCallApply in TypeScript\nDESCRIPTION: Shows how the new strictBindCallApply compiler option provides strong typing for bind, call, and apply methods on function objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(a: number, b: string): string {\n  return a + b;\n}\n\nlet a = foo.apply(undefined, [10]); // error: too few arguments\nlet b = foo.apply(undefined, [10, 20]); // error: 2nd argument is a number\nlet c = foo.apply(undefined, [10, \"hello\", 30]); // error: too many arguments\nlet d = foo.apply(undefined, [10, \"hello\"]); // okay! returns a string\n```\n\n----------------------------------------\n\nTITLE: Non-null Assertion Operator Usage in TypeScript\nDESCRIPTION: Demonstrates using the non-null assertion operator (!) to bypass null checks when the developer is confident about value existence.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserAccount {\n  id: number;\n  email?: string;\n}\n\nconst user = getUser(\"admin\");\nuser.id;\n\nif (user) {\n  user.email.length;\n}\n\nuser!.email!.length;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Proxy Type Implementation\nDESCRIPTION: Example showing how to create and use proxy wrapper types with TypeScript mapped types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Proxy<T> = {\n  get(): T;\n  set(value: T): void;\n};\n\ntype Proxify<T> = {\n  [P in keyof T]: Proxy<T[P]>;\n};\n\nfunction proxify<T>(o: T): Proxify<T> {\n  return {} as any;\n}\n\nfunction unproxify<T>(t: Proxify<T>): T {\n  let result = {} as T;\n  for (const k in t) {\n    result[k] = t[k].get();\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Mapped Type to Create Feature Options in TypeScript\nDESCRIPTION: Demonstrates the application of a mapped type to transform a type with function properties into a type with boolean properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Features = {\n  darkMode: () => void;\n  newUserProfile: () => void;\n};\n\ntype FeatureOptions = OptionsFlags<Features>;\n```\n\n----------------------------------------\n\nTITLE: Inferring from Overloaded Functions\nDESCRIPTION: Shows how type inference works with overloaded functions, where inferences are made from the last signature which is typically the most general case.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function stringOrNum(x: string): number;\ndeclare function stringOrNum(x: number): string;\ndeclare function stringOrNum(x: string | number): string | number;\n\ntype T1 = ReturnType<typeof stringOrNum>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Using keyof with Object Types in TypeScript\nDESCRIPTION: Demonstrates how the keyof operator works with a simple object type, producing a union of its keys.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Keyof Type Operator.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Point = { x: number; y: number };\ntype P = keyof Point;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Exporting a Default Function in TypeScript\nDESCRIPTION: This example demonstrates how to declare a main export using the 'export default' syntax in TypeScript. It exports a function named 'helloWorld' as the default export of the module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function helloWorld() {\n  console.log(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Event Handling with Template Literals\nDESCRIPTION: Demonstrates how to use template literal types to create a type-safe event handling system that infers correct types for callback arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype PropEventSource<Type> = {\n    on<Key extends string & keyof Type>\n        (eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void;\n};\n\ndeclare function makeWatchedObject<Type>(obj: Type): Type & PropEventSource<Type>;\n\nconst person = makeWatchedObject({\n  firstName: \"Saoirse\",\n  lastName: \"Ronan\",\n  age: 26\n});\n\nperson.on(\"firstNameChanged\", newName => {\n    console.log(`new name is ${newName.toUpperCase()}`);\n});\n\nperson.on(\"ageChanged\", newAge => {\n    if (newAge < 0) {\n        console.warn(\"warning! negative age\");\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Call Signatures in TypeScript\nDESCRIPTION: Illustrates how to use call signatures to describe functions with additional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribableFunction = {\n  description: string;\n  (someArg: number): boolean;\n};\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + \" returned \" + fn(6));\n}\n\nfunction myFunc(someArg: number) {\n  return someArg > 3;\n}\nmyFunc.description = \"default description\";\n\ndoSomething(myFunc);\n```\n\n----------------------------------------\n\nTITLE: Importing All Exports as Namespace in TypeScript\nDESCRIPTION: This example demonstrates how to import all exported objects from a module into a single namespace using the '* as name' syntax in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as math from \"./maths.js\";\n\nconsole.log(math.pi);\nconst positivePhi = math.absolute(math.phi);\n```\n\n----------------------------------------\n\nTITLE: Implementing Disposable Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement the Disposable interface to create a disposable resource. It shows the implementation of a TraceActivity class with a dispose method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Disposable {\n  [Symbol.dispose](): void;\n}\n\nclass TraceActivity implements Disposable {\n  readonly name: string;\n  constructor(name: string) {\n    this.name = name;\n    console.log(`Entering: ${name}`);\n  }\n\n  [Symbol.dispose](): void {\n    console.log(`Exiting: ${name}`);\n  }\n}\n\nfunction f() {\n  using _activity = new TraceActivity(\"f\");\n  console.log(\"Hello world!\");\n}\n\nf();\n// prints:\n//   Entering: f\n//   Hello world!\n//   Exiting: f\n```\n\n----------------------------------------\n\nTITLE: Union Type Inference with 'infer' in Co-variant Positions\nDESCRIPTION: Demonstrates how using 'infer' in co-variant positions with multiple candidates results in a union type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T> = T extends { a: infer U; b: infer U } ? U : never;\n\ntype T1 = Foo<{ a: string; b: string }>;\n//   ^?\ntype T2 = Foo<{ a: string; b: number }>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inferred Type Predicates with Standalone Functions\nDESCRIPTION: This snippet shows how TypeScript 5.5 infers type predicates for standalone functions that meet certain criteria, improving type narrowing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// function isBirdReal(bird: Bird | undefined): bird is Bird\nfunction isBirdReal(bird: Bird | undefined) {\n  return bird !== undefined;\n}\n\n// const isNumber: (x: unknown) => x is number\nconst isNumber = (x: unknown) => typeof x === 'number';\n\n// const isNonNullish: <T>(x: T) => x is NonNullable<T>\nconst isNonNullish = <T,>(x: T) => x != null;\n```\n\n----------------------------------------\n\nTITLE: Detecting Invalid Named Capturing Groups in Regular Expressions\nDESCRIPTION: TypeScript 5.5 checks for references to named capturing groups that don't exist in the regular expression, showing an error for an invalid named group reference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet myRegex = /@typedef \\{import\\((?<importPath>.+)\\)\\.(?<importedEntity>[a-zA-Z_]+)\\} \\k<namedImport>/;\n//                                                                                        ~~~~~~~~~~~\n// error!\n// There is no capturing group named 'namedImport' in this regular expression.\n```\n\n----------------------------------------\n\nTITLE: Using Type-only Imports and Exports\nDESCRIPTION: Example demonstrating type-only imports and exports which are guaranteed to be elided from output JavaScript, with both source TypeScript and compiled JavaScript output shown.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport { f, type SomeInterface } from \"./module.js\";\nimport type { SomeType } from \"./module.js\";\n\nclass C implements SomeInterface {\n  constructor(p: SomeType) {\n    f();\n  }\n}\n\nexport type { C };\n\n// @Filename: main.js\nimport { f } from \"./module.js\";\n\nclass C {\n  constructor(p) {\n    f();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variance Annotations in TypeScript\nDESCRIPTION: Demonstrates explicit variance annotations using 'in' for contravariance and 'out' for covariance in interface definitions\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Contravariant annotation\ninterface Consumer<in T> {\n  consume: (arg: T) => void;\n}\n\n// Covariant annotation\ninterface Producer<out T> {\n  make(): T;\n}\n\n// Invariant annotation\ninterface ProducerConsumer<in out T> {\n  consume: (arg: T) => void;\n  make(): T;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in Index Signatures\nDESCRIPTION: Shows how to use union types in index signatures to allow properties of different types. This example demonstrates an interface that can have both number and string properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberOrStringDictionary {\n  [index: string]: number | string;\n  length: number; // ok, length is a number\n  name: string; // ok, name is a string\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Types in TypeScript Interfaces\nDESCRIPTION: Illustrates how to extend multiple interfaces in TypeScript to combine their properties. This example shows creating a ColorfulCircle interface by extending both Colorful and Circle interfaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Colorful {\n  color: string;\n}\n\ninterface Circle {\n  radius: number;\n}\n\ninterface ColorfulCircle extends Colorful, Circle {}\n\nconst cc: ColorfulCircle = {\n  color: \"red\",\n  radius: 42,\n};\n```\n\n----------------------------------------\n\nTITLE: Using 'object' Type in TypeScript Function Declaration\nDESCRIPTION: This example demonstrates the use of the 'object' type in a function declaration. It shows valid and invalid uses of the 'create' function, highlighting that 'object' type represents non-primitive types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function create(o: object | null): void;\n\n// OK\ncreate({ prop: 0 });\ncreate(null);\ncreate(undefined); // with `--strictNullChecks` flag enabled, undefined is not a subtype of null\n\ncreate(42);\ncreate(\"string\");\ncreate(false);\n```\n\n----------------------------------------\n\nTITLE: Extending Interfaces in TypeScript\nDESCRIPTION: Demonstrates how to extend an interface in TypeScript to add new properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  name: string;\n}\n\ninterface Bear extends Animal {\n  honey: boolean;\n}\n\nconst bear = getBear();\nbear.name;\nbear.honey;\n```\n\n----------------------------------------\n\nTITLE: Configuring Decorators in tsconfig.json for TypeScript\nDESCRIPTION: JSON configuration for enabling experimental decorator support in TypeScript using tsconfig.json file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equality Narrowing in TypeScript\nDESCRIPTION: Demonstrates how TypeScript narrows types based on equality checks. The function 'example' shows type narrowing for parameters x and y when they are equal.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction example(x: string | number, y: string | boolean) {\n  if (x === y) {\n    // We can now call any 'string' method on 'x' or 'y'.\n    x.toUpperCase();\n    // ^?\n    y.toLowerCase();\n    // ^?\n  } else {\n    console.log(x);\n    //          ^?\n    console.log(y);\n    //          ^?\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Array Type with Multiple Element Types in TypeScript\nDESCRIPTION: Shows how TypeScript infers the type of an array containing numbers and null. The inferred type is an array of number or null.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = [0, 1, null];\n```\n\n----------------------------------------\n\nTITLE: Structural Typing Example in TypeScript\nDESCRIPTION: Demonstrates TypeScript's structural typing system, where object types are compatible based on their structure rather than their name. Shows how an object with extra properties is assignable to a type requiring fewer properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @strict: false\nlet o = { x: \"hi\", extra: 1 }; // ok\nlet o2: { x: string } = o; // ok\n```\n\n----------------------------------------\n\nTITLE: Defining String Enums in TypeScript\nDESCRIPTION: Shows the new capability to define enums with string initializers in TypeScript 2.4. Note that string-initialized enums cannot be reverse-mapped.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Colors {\n  Red = \"RED\",\n  Green = \"GREEN\",\n  Blue = \"BLUE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element Types with Indexed Access Types in TypeScript\nDESCRIPTION: Shows how to combine indexed access types with typeof to extract the type of array elements. This technique allows for capturing complex types from array literals without manual definition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyArray = [\n  { name: \"Alice\", age: 15 },\n  { name: \"Bob\", age: 23 },\n  { name: \"Eve\", age: 38 },\n];\n\ntype Person = typeof MyArray[number];\n//   ^?\ntype Age = typeof MyArray[number][\"age\"];\n//   ^?\n// Or\ntype Age2 = Person[\"age\"];\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Comparing Enum and Object-based Approach in TypeScript\nDESCRIPTION: This snippet compares the traditional enum approach with an object-based alternative using 'as const'. It demonstrates how to define directions using both methods and shows how to use them in function parameters. The object-based approach aligns better with JavaScript and can be easily transitioned to enums if they are added to JavaScript in the future.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum EDirection {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nconst ODirection = {\n  Up: 0,\n  Down: 1,\n  Left: 2,\n  Right: 3,\n} as const;\n\nEDirection.Up;\n//         ^?\n\nODirection.Up;\n//         ^?\n\n// Using the enum as a parameter\nfunction walk(dir: EDirection) {}\n\n// It requires an extra line to pull out the values\ntype Direction = typeof ODirection[keyof typeof ODirection];\nfunction run(dir: Direction) {}\n\nwalk(EDirection.Left);\nrun(ODirection.Right);\n```\n\n----------------------------------------\n\nTITLE: Mixing Default and Named Imports in TypeScript\nDESCRIPTION: This snippet shows how to import both a default export and named exports in a single import statement in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport RandomNumberGenerator, { pi as π } from \"./maths.js\";\n\nRandomNumberGenerator;\nconsole.log(π);\n```\n\n----------------------------------------\n\nTITLE: Comparing Type Parameter Usage in TypeScript Functions\nDESCRIPTION: Demonstrates two approaches to writing generic functions, showing why using the type parameter directly (firstElement1) is better than constraining it (firstElement2) for type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction firstElement1<Type>(arr: Type[]) {\n  return arr[0];\n}\n\nfunction firstElement2<Type extends any[]>(arr: Type) {\n  return arr[0];\n}\n\n// a: number (good)\nconst a = firstElement1([1, 2, 3]);\n// b: any (bad)\nconst b = firstElement2([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Output Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript transforms ES module syntax to CommonJS format when using the 'commonjs' module option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: commonjs\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Unit Types with String Literals in TypeScript\nDESCRIPTION: Demonstrates how to use string literal types as a form of enum pattern in TypeScript with a pad function example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function pad(s: string, n: number, direction: \"left\" | \"right\"): string;\npad(\"hi\", 10, \"left\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Functions in TypeScript\nDESCRIPTION: Demonstrates various ways to declare and use async functions in TypeScript, including function declarations, arrow functions, and class methods. Shows usage of await keyword and Promise return types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nvar p: Promise<number> = /* ... */;\nasync function fn(): Promise<number> {\n  var i = await p; // suspend execution until 'p' is settled. 'i' has type \"number\"\n  return 1 + i;\n}\n\nvar a = async (): Promise<number> => 1 + await p; // suspends execution.\nvar a = async () => 1 + await p; // suspends execution. return type is inferred as \"Promise<number>\" when compiling with --target ES6\nvar fe = async function(): Promise<number> {\n  var i = await p; // suspend execution until 'p' is settled. 'i' has type \"number\"\n  return 1 + i;\n}\n\nclass C {\n  async m(): Promise<number> {\n    var i = await p; // suspend execution until 'p' is settled. 'i' has type \"number\"\n    return 1 + i;\n  }\n\n  async get p(): Promise<number> {\n    var i = await p; // suspend execution until 'p' is settled. 'i' has type \"number\"\n    return 1 + i;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'this' in Parameter Type Annotations\nDESCRIPTION: Demonstrates using 'this' as a parameter type annotation, which ensures that method arguments match the exact class instance type. This is more specific than using the class name as the type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box {\n  content: string = \"\";\n  sameAs(other: this) {\n    return other.content === this.content;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Scope Augmentation\nDESCRIPTION: Demonstrates how to augment the global scope from within a module by adding methods to built-in types like Array. Shows declaration and implementation of a global augmentation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Declaration Merging.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// observable.ts\nexport class Observable<T> {\n  // ... still no implementation ...\n}\n\ndeclare global {\n  interface Array<T> {\n    toObservable(): Observable<T>;\n  }\n}\n\nArray.prototype.toObservable = function () {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Array.find() type definition with and without strictNullChecks in TypeScript\nDESCRIPTION: This snippet shows the difference in the Array.find() method's type definition when strictNullChecks is enabled or disabled. It illustrates how the undefined return type is handled in each case.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictNullChecks.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// When strictNullChecks: true\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S | undefined;\n};\n\n// When strictNullChecks: false the undefined is removed from the type system,\n// allowing you to write code which assumes it always found a result\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S;\n};\n```\n\n----------------------------------------\n\nTITLE: Optional Function Calls with TypeScript\nDESCRIPTION: Demonstrates optional function calls using the ?. operator, allowing safe function execution when the function might be undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function makeRequest(url: string, log?: (msg: string) => void) {\n  log?.(`Request started at ${new Date().toISOString()}`);\n  const result = (await fetch(url)).json();\n  log?.(`Request finished at ${new Date().toISOString()}`);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Class Definition in TypeScript\nDESCRIPTION: Simple implementation of a Person class with a name property and greet method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log(`Hello, my name is ${this.name}.`);\n    }\n}\n\nconst p = new Person(\"Ray\");\np.greet();\n```\n\n----------------------------------------\n\nTITLE: Private Field Bracket Notation Access\nDESCRIPTION: Demonstrates how TypeScript's private fields can be accessed using bracket notation, showing the difference between compile-time and runtime privacy checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass MySafe {\n  private secretKey = 12345;\n}\n\nconst s = new MySafe();\n\n// Not allowed during type checking\nconsole.log(s.secretKey);\n\n// OK\nconsole.log(s[\"secretKey\"]);\n```\n\n----------------------------------------\n\nTITLE: Converting CommonJS default export to TypeScript\nDESCRIPTION: Example showing how to convert a CommonJS pattern where the entire module is a callable function to TypeScript's export = syntax for equivalent functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n  // ...\n}\nmodule.exports = foo;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  // ...\n}\nexport = foo;\n```\n\n----------------------------------------\n\nTITLE: Class Getters and Setters\nDESCRIPTION: Defines a class with a private field and get/set accessors to control access to that field, demonstrating TypeScript's support for JavaScript accessors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  _length = 0;\n  get length() {\n    return this._length;\n  }\n  set length(value) {\n    this._length = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Compatibility in TypeScript Functions\nDESCRIPTION: This snippet illustrates how return types are checked for compatibility in TypeScript, showing that a function returning a subtype can be assigned to a variable expecting a function returning a supertype.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = () => ({ name: \"Alice\" });\nlet y = () => ({ name: \"Alice\", location: \"Seattle\" });\n\nx = y; // OK\ny = x; // Error, because x() lacks a location property\n```\n\n----------------------------------------\n\nTITLE: Improved Generics Inference for Return Types\nDESCRIPTION: Demonstrates improved inference for generics, where TypeScript can now make inferences for the return type of a call, enhancing type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction arrayMap<T, U>(f: (x: T) => U): (a: T[]) => U[] {\n  return a => a.map(f);\n}\n\nconst lengths: (a: string[]) => number[] = arrayMap(s => s.length);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Compatibility with Interfaces in TypeScript\nDESCRIPTION: Shows how classes can structurally match interfaces without explicitly implementing them if they have compatible properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass VirtualPoint {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst newVPoint = new VirtualPoint(13, 56);\nlogPoint(newVPoint); // logs \"13, 56\"\n```\n\n----------------------------------------\n\nTITLE: Valid Implementations of Functions with Void Return Type in TypeScript\nDESCRIPTION: Demonstrates different valid ways to implement a function type with void return. These functions can return values, but the values are ignored when the function type expects void.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype voidFunc = () => void;\n\nconst f1: voidFunc = () => {\n  return true;\n};\n\nconst f2: voidFunc = () => true;\n\nconst f3: voidFunc = function () {\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Using for..of Loop with an Array in TypeScript\nDESCRIPTION: Shows how to iterate over an array using a for..of loop, which accesses each element's value directly. The loop invokes the Symbol.iterator property on the array to retrieve values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Iterators and Generators.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet someArray = [1, \"string\", false];\n\nfor (let entry of someArray) {\n  console.log(entry); // 1, \"string\", false\n}\n```\n\n----------------------------------------\n\nTITLE: Using querySelector and querySelectorAll in TypeScript\nDESCRIPTION: Example showing how to use querySelector to select the first list item element and querySelectorAll to select all list item elements in a document. The first variable will contain the first li element, while the all variable will contain a NodeListOf all li elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ul>\n  <li>First :)</li>\n  <li>Second!</li>\n  <li>Third times a charm.</li>\n</ul>;\n\nconst first = document.querySelector(\"li\"); // returns the first li element\nconst all = document.querySelectorAll(\"li\"); // returns the list of all li elements\n```\n\n----------------------------------------\n\nTITLE: Generic Parameter Defaults\nDESCRIPTION: Demonstrates how to implement generic parameter defaults in function declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function create<T extends HTMLElement = HTMLDivElement, U extends HTMLElement[] = T[]>(\n  element?: T,\n  children?: U\n): Container<T, U>;\n\nconst div = create();\nconst p = create(new HTMLParagraphElement());\n```\n\n----------------------------------------\n\nTITLE: Class Compatibility in TypeScript\nDESCRIPTION: This snippet demonstrates how classes are compared for compatibility in TypeScript, showing that only instance members are considered and static members and constructors do not affect compatibility.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  feet: number;\n  constructor(name: string, numFeet: number) {}\n}\n\nclass Size {\n  feet: number;\n  constructor(numFeet: number) {}\n}\n\nlet a: Animal;\nlet s: Size;\n\na = s; // OK\ns = a; // OK\n```\n\n----------------------------------------\n\nTITLE: Explaining Union Assignment Error in TypeScript\nDESCRIPTION: This snippet shows an error when assigning an object with an incorrect property type to a union type. It illustrates how TypeScript handles type checking for union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Understanding Errors.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Thing = \"none\" | { name: string };\n\nconst a: Thing = { name: 0 };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Union Exhaustiveness Checking in TypeScript\nDESCRIPTION: This snippet shows how to define a discriminated union type 'NetworkState' and a logger function that doesn't handle all possible states, resulting in a TypeScript error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype NetworkLoadingState = { state: \"loading\" };\ntype NetworkFailedState = { state: \"failed\"; code: number };\ntype NetworkSuccessState = {\n  state: \"success\";\n  response: {\n    title: string;\n    duration: number;\n    summary: string;\n  };\n};\n// ---cut---\ntype NetworkFromCachedState = {\n  state: \"from_cache\";\n  id: string;\n  response: NetworkSuccessState[\"response\"];\n};\n\ntype NetworkState =\n  | NetworkLoadingState\n  | NetworkFailedState\n  | NetworkSuccessState\n  | NetworkFromCachedState;\n\nfunction logger(s: NetworkState) {\n  switch (s.state) {\n    case \"loading\":\n      return \"loading request\";\n    case \"failed\":\n      return `failed with code ${s.code}`;\n    case \"success\":\n      return \"got response\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Const Type Parameters for Precise Type Inference in TypeScript\nDESCRIPTION: Shows how to use the new const modifier on type parameters to achieve const-like inference by default, without requiring 'as const' assertions in function calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype HasNames = { names: readonly string[] };\nfunction getNamesExactly<const T extends HasNames>(arg: T): T[\"names\"] {\n//                       ^^^^^\n    return arg.names;\n}\n\n// Inferred type: readonly [\"Alice\", \"Bob\", \"Eve\"]\n// Note: Didn't need to write 'as const' here\nconst names = getNamesExactly({ names: [\"Alice\", \"Bob\", \"Eve\"] });\n```\n\n----------------------------------------\n\nTITLE: Using export = with TypeScript-only Types\nDESCRIPTION: Example demonstrating how export = can be used with TypeScript interfaces unlike standard module.exports, and how import = require() allows using those imports as types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: a.ts\ninterface Options { /* ... */ }\nmodule.exports = Options; // Error: 'Options' only refers to a type, but is being used as a value here.\nexport = Options; // Ok\n\n// @Filename: b.ts\nconst Options = require(\"./a\");\nconst options: Options = { /* ... */ }; // Error: 'Options' refers to a value, but is being used as a type here.\n\n// @Filename: c.ts\nimport Options = require(\"./a\");\nconst options: Options = { /* ... */ }; // Ok\n```\n\n----------------------------------------\n\nTITLE: Conditional Type Resolution Example in TypeScript\nDESCRIPTION: An example showing how conditional types resolve based on boolean type parameters, producing either string or number depending on the condition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function f<T extends boolean>(x: T): T extends true ? string : number;\n\n// Type is 'string | number'\nlet x = f(Math.random() < 0.5);\n//  ^?\n```\n\n----------------------------------------\n\nTITLE: Implicit Returns for undefined-Returning Functions\nDESCRIPTION: Demonstrates how functions without return statements implicitly return undefined in JavaScript and TypeScript's handling of this behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n    // no return\n}\n// x = undefined\nlet x = foo();\n```\n\n----------------------------------------\n\nTITLE: Implementing 'this'-based Type Guards\nDESCRIPTION: Demonstrates 'this is Type' return annotations that act as type guards, allowing the type of the object to be narrowed when combined with conditional statements. This enables type-safe access to properties based on runtime checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileSystemObject {\n  isFile(): this is FileRep {\n    return this instanceof FileRep;\n  }\n  isDirectory(): this is Directory {\n    return this instanceof Directory;\n  }\n  isNetworked(): this is Networked & this {\n    return this.networked;\n  }\n  constructor(public path: string, private networked: boolean) {}\n}\n\nclass FileRep extends FileSystemObject {\n  constructor(path: string, public content: string) {\n    super(path, false);\n  }\n}\n\nclass Directory extends FileSystemObject {\n  children: FileSystemObject[];\n}\n\ninterface Networked {\n  host: string;\n}\n\nconst fso: FileSystemObject = new FileRep(\"foo/bar.txt\", \"foo\");\n\nif (fso.isFile()) {\n  fso.content;\n} else if (fso.isDirectory()) {\n  fso.children;\n} else if (fso.isNetworked()) {\n  fso.host;\n}\n```\n\n----------------------------------------\n\nTITLE: instanceof Narrowing in TypeScript\nDESCRIPTION: Demonstrates how the instanceof operator is used for type narrowing in TypeScript. The 'logValue' function shows narrowing between Date and string types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n    //          ^?\n  } else {\n    console.log(x.toUpperCase());\n    //          ^?\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Generic Function with Type Parameter for Collection Type\nDESCRIPTION: A code diff showing how to improve the 'makeUnique' function by adding a generic type parameter 'C' to preserve the original collection type. This shows the pattern that caused issues in earlier TypeScript versions but works in 4.3 with improved generic narrowing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n- function makeUnique<T>(collection: Set<T> | T[], comparer: (x: T, y: T) => number): Set<T> | T[]\n+ function makeUnique<T, C extends Set<T> | T[]>(collection: C, comparer: (x: T, y: T) => number): C\n```\n\n----------------------------------------\n\nTITLE: Removing Optional Modifier with Mapped Types in TypeScript\nDESCRIPTION: Demonstrates using a mapped type to remove the optional modifier from all properties of an input type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Concrete<Type> = {\n  [Property in keyof Type]-?: Type[Property];\n};\n\ntype MaybeUser = {\n  id: string;\n  name?: string;\n  age?: number;\n};\n\ntype User = Concrete<MaybeUser>;\n```\n\n----------------------------------------\n\nTITLE: Type Inference for TypeScript Functions\nDESCRIPTION: This snippet shows how TypeScript can infer function types when type annotations are provided on only one side of an assignment.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// The parameters 'x' and 'y' have the type number\nlet myAdd = function (x: number, y: number): number {\n  return x + y;\n};\n\n// myAdd has the full function type\nlet myAdd2: (baseValue: number, increment: number) => number = function (x, y) {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: noImplicitOverride Compiler Option Usage\nDESCRIPTION: Demonstrates the usage of noImplicitOverride compiler option which requires explicit override keyword for method overriding, showing error when override modifier is missing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitOverride.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noImplicitOverride\n// @errors: 4114\nclass Album {\n  setup() {}\n}\n\nclass MLAlbum extends Album {\n  override setup() {}\n}\n\nclass SharedAlbum extends Album {\n  setup() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Function that Accepts Union Types\nDESCRIPTION: Demonstrates a function that works with multiple types by accepting either a string or an array of strings using a union type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getLength(obj: string | string[]) {\n  return obj.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uncapitalize Intrinsic String Manipulation Type in TypeScript\nDESCRIPTION: Shows the usage of the built-in Uncapitalize type for converting the first character of a string literal to lowercase in type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype UppercaseGreeting = \"HELLO WORLD\";\ntype UncomfortableGreeting = Uncapitalize<UppercaseGreeting>;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Generic Function Compatibility in TypeScript\nDESCRIPTION: This example demonstrates how generic functions are checked for compatibility by specifying 'any' in place of unspecified type arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet identity = function <T>(x: T): T {\n  // ...\n};\n\nlet reverse = function <U>(y: U): U {\n  // ...\n};\n\nidentity = reverse; // OK, because (x: any) => any matches (y: any) => any\n```\n\n----------------------------------------\n\nTITLE: Removing Readonly Modifier with Mapped Types in TypeScript\nDESCRIPTION: Shows how to use a mapped type to remove the 'readonly' modifier from all properties of an input type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateMutable<Type> = {\n  -readonly [Property in keyof Type]: Type[Property];\n};\n\ntype LockedAccount = {\n  readonly id: string;\n  readonly name: string;\n};\n\ntype UnlockedAccount = CreateMutable<LockedAccount>;\n```\n\n----------------------------------------\n\nTITLE: Converting CommonJS module.exports to TypeScript export\nDESCRIPTION: Example showing how to convert a CommonJS module export for a function to TypeScript's export syntax for cleaner and more standardized module definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.feedPets = function (pets) {\n  // ...\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function feedPets(pets) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Full Function Types in TypeScript\nDESCRIPTION: This example demonstrates how to write out the full type of a function, including parameter types and return type, as well as how parameter names in the type declaration are for readability only.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet myAdd: (x: number, y: number) => number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n\nlet myAdd: (baseValue: number, increment: number) => number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Function Type Syntax\nDESCRIPTION: Shows TypeScript's function type declaration syntax, which includes parameter names. The example demonstrates both a general and a more precise generic function type for a 'first' function that returns its first argument.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet fst: (a: any, b: any) => any = (a, b) => a;\n\n// or more precisely:\n\nlet fst: <T, U>(a: T, b: U) => T = (a, b) => a;\n```\n\n----------------------------------------\n\nTITLE: Ordering Function Overloads in TypeScript\nDESCRIPTION: Illustrates the correct ordering of function overloads in TypeScript, placing more specific signatures before more general ones to ensure proper type resolution.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\ndeclare function fn(x: unknown): unknown;\ndeclare function fn(x: HTMLElement): number;\ndeclare function fn(x: HTMLDivElement): string;\n\nvar myElem: HTMLDivElement;\nvar x = fn(myElem); // x: unknown, wat?\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\ndeclare function fn(x: HTMLDivElement): string;\ndeclare function fn(x: HTMLElement): number;\ndeclare function fn(x: unknown): unknown;\n\nvar myElem: HTMLDivElement;\nvar x = fn(myElem); // x: string, :)\n```\n\n----------------------------------------\n\nTITLE: Using 'instanceof' Type Guards in TypeScript\nDESCRIPTION: This snippet illustrates the use of 'instanceof' type guards for narrowing types based on their constructor functions. It shows how TypeScript narrows the type of a variable within conditional blocks using 'instanceof' checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Padder {\n  getPaddingString(): string;\n}\n\nclass SpaceRepeatingPadder implements Padder {\n  constructor(private numSpaces: number) {}\n  getPaddingString() {\n    return Array(this.numSpaces + 1).join(\" \");\n  }\n}\n\nclass StringPadder implements Padder {\n  constructor(private value: string) {}\n  getPaddingString() {\n    return this.value;\n  }\n}\n\nfunction getRandomPadder() {\n  return Math.random() < 0.5\n    ? new SpaceRepeatingPadder(4)\n    : new StringPadder(\"  \");\n}\n\nlet padder: Padder = getRandomPadder();\n\nif (padder instanceof SpaceRepeatingPadder) {\n  padder;\n}\nif (padder instanceof StringPadder) {\n  padder;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Checked JavaScript with @ts-check\nDESCRIPTION: Shows how to enable TypeScript error checking in JavaScript files using the @ts-check directive. Demonstrates type enforcement with JSDoc annotations and type checking errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Intro to JS with TS.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n/** @type {number} */\nvar x;\n\nx = 0; // OK\nx = false; // Not OK\n```\n\n----------------------------------------\n\nTITLE: Cross Multiplication of Unions in Template Literal Types\nDESCRIPTION: Illustrates how unions in multiple interpolated positions of a template literal type are cross multiplied to generate all possible combinations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailLocaleIDs = \"welcome_email\" | \"email_heading\";\ntype FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\";\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;\ntype Lang = \"en\" | \"ja\" | \"pt\";\n\ntype LocaleMessageIDs = `${Lang}_${AllLocaleIDs}`;\n```\n\n----------------------------------------\n\nTITLE: Optional Element Access in TypeScript Arrays\nDESCRIPTION: Shows how to safely access array elements using optional chaining, returning undefined if the array is null or undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tryGetFirstElement<T>(arr?: T[]) {\n  return arr?.[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Abstract Class Construction\nDESCRIPTION: Demonstrates the proper way to define functions that instantiate derived classes from abstract base classes. Using the 'new () => Base' type ensures only concrete classes can be instantiated.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(ctor: new () => Base) {\n  const instance = new ctor();\n  instance.printName();\n}\ngreet(Derived);\ngreet(Base);\n```\n\n----------------------------------------\n\nTITLE: Key Remapping in Mapped Types\nDESCRIPTION: Demonstrates the new as clause in mapped types for transforming property names and filtering keys.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Getters<T> = {\n    [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]\n};\n\ninterface Person {\n    name: string;\n    age: number;\n    location: string;\n}\n\ntype LazyPerson = Getters<Person>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Classes in TypeScript Declaration Files\nDESCRIPTION: Syntax for declaring a class with a constructor, properties, and methods in a declaration file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class Greeter {\n  constructor(greeting: string);\n\n  greeting: string;\n  showGreeting(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Identical Structural Types in TypeScript\nDESCRIPTION: This example shows how classes with identical structure (same method signatures) are considered compatible in TypeScript's type system, even if they have different semantic meanings. This demonstrates structural versus nominal typing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for OOPers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Car {\n  drive() {\n    // hit the gas\n  }\n}\nclass Golfer {\n  drive() {\n    // hit the ball far\n  }\n}\n\n// No error?\nlet w: Car = new Golfer();\n```\n\n----------------------------------------\n\nTITLE: Cross-instance Private Access in TypeScript Classes\nDESCRIPTION: Demonstrates how TypeScript allows different instances of the same class to access each other's private members. This is similar to Java and C# but different from Ruby.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass A {\n  private x = 10;\n\n  public sameAs(other: A) {\n    // No error\n    return other.x === this.x;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Let Declarations in Loops for Proper Variable Scoping in TypeScript\nDESCRIPTION: This example shows how using let in a for loop creates a new scope for each iteration, solving the classic setTimeout loop problem.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfor (let i = 0; i < 10; i++) {\n  setTimeout(function () {\n    console.log(i);\n  }, 100 * i);\n}\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Type Annotation in TypeScript\nDESCRIPTION: Shows how to add type annotations to function parameters to enforce type checking on function arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(name: string) {\n  console.log(\"Hello, \" + name.toUpperCase() + \"!!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Input ESM Module Syntax Example\nDESCRIPTION: Demonstrates basic ESM import syntax in TypeScript, showing how the same input can be transformed differently based on compiler options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sayHello } from \"greetings\";\nsayHello(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Literal Narrowing in TypeScript\nDESCRIPTION: This snippet shows how const and let declarations affect type inference for string literals. The const declaration narrows the type to the specific string value, while let keeps it as a general string type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Literal Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// We're making a guarantee that this variable\n// helloWorld will never change, by using const.\n\n// So, TypeScript sets the type to be \"Hello World\", not string\nconst helloWorld = \"Hello World\";\n\n// On the other hand, a let can change, and so the compiler declares it a string\nlet hiWorld = \"Hi World\";\n```\n\n----------------------------------------\n\nTITLE: Defining Separate Interfaces for Circle and Square in TypeScript\nDESCRIPTION: This snippet shows a better approach to defining shapes by creating separate interfaces for Circle and Square, each with their own required properties. The Shape type is then defined as a union of these interfaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square;\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Support in JavaScript Files\nDESCRIPTION: Demonstrates TypeScript's understanding of CommonJS module format in JavaScript files, recognizing exports and require calls as module-related operations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// same as `import module \"fs\"`\nconst fs = require(\"fs\");\n\n// same as `export function readFile`\nmodule.exports.readFile = function (f) {\n  return fs.readFileSync(f);\n};\n```\n\n----------------------------------------\n\nTITLE: Template Literal Types with Simple Concatenation\nDESCRIPTION: Demonstrates basic template literal type usage to create new string literal types by concatenating existing ones.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype World = \"world\";\n\ntype Greeting = `hello ${World}`;\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Destructuring in TypeScript\nDESCRIPTION: This function shows how to use destructuring in function parameters to extract values from an array argument.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f([first, second]: [number, number]) {\n  console.log(first);\n  console.log(second);\n}\nf([1, 2]);\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Module Import Example\nDESCRIPTION: Shows a simple module export and import between two TypeScript files to demonstrate basic module resolution.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: math.ts\nexport function add(a: number, b: number) {\n  return a + b;\n}\n\n// @Filename: main.ts\nimport { add } from \"./math\";\nadd(1, 2);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Detection for Misspelled Property\nDESCRIPTION: This snippet shows how TypeScript detects an error when trying to access a misspelled property on an object, which JavaScript would silently allow.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for the New Programmer.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { width: 10, height: 15 };\nconst area = obj.width * obj.heigth;\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Composition in TypeScript\nDESCRIPTION: Defines a 'compose' function that takes two functions as arguments and returns a new function that applies them in sequence. This example demonstrates higher order type inference from generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compose<A, B, C>(f: (arg: A) => B, g: (arg: B) => C): (arg: A) => C {\n  return (x) => g(f(x));\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing for..in and for..of Loops with Arrays in TypeScript\nDESCRIPTION: Illustrates the difference between for..in and for..of loops. The for..in loop iterates over the keys/indices of the array, while for..of iterates over the values. This distinction is important when choosing the appropriate loop type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Iterators and Generators.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet list = [4, 5, 6];\n\nfor (let i in list) {\n  console.log(i); // \"0\", \"1\", \"2\",\n}\n\nfor (let i of list) {\n  console.log(i); // 4, 5, 6\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion in TypeScript Using 'as' Syntax\nDESCRIPTION: This snippet shows how to use type assertion in TypeScript using the 'as' syntax. It demonstrates asserting an unknown type to a string type to access its length property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet someValue: unknown = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```\n\n----------------------------------------\n\nTITLE: Using 'this' incorrectly with standard function expressions in TypeScript\nDESCRIPTION: This example demonstrates a common error with 'this' context where the function loses its original context when returned. The function creates a card picker that fails because 'this' inside the returned function refers to the global window object instead of the deck object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet deck = {\n  suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n  cards: Array(52),\n  createCardPicker: function () {\n    return function () {\n      let pickedCard = Math.floor(Math.random() * 52);\n      let pickedSuit = Math.floor(pickedCard / 13);\n\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n    };\n  },\n};\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Index Signatures in TypeScript\nDESCRIPTION: This snippet shows how TypeScript handles objects with unknown keys but known values using index signatures. It illustrates how properties are typed without the 'noUncheckedIndexedAccess' option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUncheckedIndexedAccess.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Operator in TypeScript\nDESCRIPTION: Shows usage of the nullish coalescing operator (??) to provide fallback values when dealing with null or undefined values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = foo ?? bar();\n```\n\n----------------------------------------\n\nTITLE: Various JSDoc Patterns in JavaScript\nDESCRIPTION: This example showcases various JSDoc patterns in JavaScript, including documentation for object properties, variable assignments, class methods, arrow functions, function components, and special parameter types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar someObj = {\n  /**\n   * @param {string} param1 - JSDocs on property assignments work\n   */\n  x: function (param1) {},\n};\n\n/**\n * As do jsdocs on variable assignments\n * @return {Window}\n */\nlet someFunc = function () {};\n\n/**\n * And class methods\n * @param {string} greeting The greeting to use\n */\nFoo.prototype.sayHi = (greeting) => console.log(\"Hi!\");\n\n/**\n * And arrow function expressions\n * @param {number} x - A multiplier\n */\nlet myArrow = (x) => x * x;\n\n/**\n * Which means it works for function components in JSX too\n * @param {{a: string, b: number}} props - Some param\n */\nvar fc = (props) => <div>{props.a.charAt(0)}</div>;\n\n/**\n * A parameter can be a class constructor, using Google Closure syntax.\n *\n * @param {{new(...args: any[]): object}} C - The class to register\n */\nfunction registerClass(C) {}\n\n/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */\nfunction fn10(p1) {}\n\n/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */\nfunction fn9(p1) {\n  return p1.join();\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Method Decorator with Context\nDESCRIPTION: Improved version of loggedMethod decorator using ClassMethodDecoratorContext for better type safety and method name logging.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggedMethod(originalMethod: any, context: ClassMethodDecoratorContext) {\n    const methodName = String(context.name);\n\n    function replacementMethod(this: any, ...args: any[]) {\n        console.log(`LOG: Entering method '${methodName}'.`)\n        const result = originalMethod.call(this, ...args);\n        console.log(`LOG: Exiting method '${methodName}'.`)\n        return result;\n    }\n\n    return replacementMethod;\n}\n```\n\n----------------------------------------\n\nTITLE: Control Flow Based Type Analysis in TypeScript\nDESCRIPTION: This code demonstrates how TypeScript 2.0 performs control flow-based type analysis for local variables and parameters. It shows type narrowing based on type guards and assignments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(x: string | number | boolean) {\n  if (typeof x === \"string\") {\n    x; // type of x is string here\n    x = 1;\n    x; // type of x is number here\n  }\n  x; // type of x is number | boolean here\n}\n\nfunction bar(x: string | number) {\n  if (typeof x === \"number\") {\n    return;\n  }\n  x; // type of x is string here\n}\n\nfunction test(x: string | null) {\n  if (x === null) {\n    return;\n  }\n  x; // type of x is string in remainder of function\n}\n\nfunction mumble(check: boolean) {\n  let x: number; // Type doesn't permit undefined\n  x; // Error, x is undefined\n  if (check) {\n    x = 1;\n    x; // Ok\n  }\n  x; // Error, x is possibly undefined\n  x = 2;\n  x; // Ok\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Regex Syntax Errors in TypeScript\nDESCRIPTION: Example showing how TypeScript 5.5 detects syntax errors in regular expressions, specifically catching an unexpected closing parenthesis.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet myRegex = /@robot(\\s+(please|immediately)))? do some task/;\n//                                            ~\n// error!\n// Unexpected ')'. Did you mean to escape it with backslash?\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation Without Type Checking\nDESCRIPTION: Shows an implementation that fails type checking because it doesn't handle the union type properly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(padding: number | string, input: string): string {\n  return \" \".repeat(padding) + input;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Interfaces with Type Parameters in TypeScript\nDESCRIPTION: This snippet shows how to create a generic interface with a type parameter that applies to the whole interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenericIdentityFn<T> {\n  (arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nlet myIdentity: GenericIdentityFn<number> = identity;\n```\n\n----------------------------------------\n\nTITLE: Using Partial Type in TypeScript\nDESCRIPTION: Demonstrates using Partial to make all properties optional when updating a Todo interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Todo {\n  title: string;\n  description: string;\n}\n\nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {\n  return { ...todo, ...fieldsToUpdate };\n}\n\nconst todo1 = {\n  title: \"organize desk\",\n  description: \"clear clutter\",\n};\n\nconst todo2 = updateTodo(todo1, {\n  description: \"throw out trash\",\n});\n```\n\n----------------------------------------\n\nTITLE: Introducing Auto-Accessors in Classes with TypeScript 4.9\nDESCRIPTION: This snippet introduces the new auto-accessors feature in TypeScript 4.9, which provides a concise way to declare getter and setter properties in classes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    accessor name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Overloaded Functions in TypeScript\nDESCRIPTION: Example of calling an overloaded function that returns different types based on input parameter types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet x: Widget = getWidget(43);\n\nlet arr: Widget[] = getWidget(\"all of them\");\n```\n\n----------------------------------------\n\nTITLE: Exporting TypeScript-specific Declarations in TypeScript\nDESCRIPTION: Example of exporting function, type, and interface declarations using standard JavaScript export syntax extended to TypeScript-specific declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Standard JavaScript syntax...\nexport function f() {}\n// ...extended to type declarations\nexport type SomeType = /* ... */;\nexport interface SomeInterface { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Using Named Exports with TypeScript Declarations\nDESCRIPTION: Example of using named exports to export functions and TypeScript-specific declarations like types and interfaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { f, SomeType, SomeInterface };\n```\n\n----------------------------------------\n\nTITLE: Using Omit Helper Type in TypeScript\nDESCRIPTION: Demonstrates the usage of the new Omit helper type in TypeScript 3.5, which creates a new type by dropping specified properties from an existing type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.5.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n  name: string;\n  age: number;\n  location: string;\n};\n\ntype QuantumPerson = Omit<Person, \"location\">;\n\n// equivalent to\ntype QuantumPerson = {\n  name: string;\n  age: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Named Tuple Types in TypeScript\nDESCRIPTION: Demonstrates how to create tuple types with labels (names) for the elements. Labels improve readability and tooling but don't change the type's behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype Pair<T> = [first: T, second: T];\n```\n\n----------------------------------------\n\nTITLE: Conditional Type Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript handles type information in conditional types using Zoo and Animal interfaces. Shows the relationship between conditional type checking and type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Zoo<T extends Animal> {\n    // ...\n}\n\ntype MakeZoo<A> = A extends Animal ? Zoo<A> : never;\n```\n\n----------------------------------------\n\nTITLE: Contextual Typing in Function Return Type Inference in TypeScript\nDESCRIPTION: Demonstrates how TypeScript uses the expected return type of a function to infer the type of the returned array, choosing the common base type 'Animal' for the array elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {}\nclass Rhino extends Animal {\n  hasHorn: true;\n}\nclass Elephant extends Animal {\n  hasTrunk: true;\n}\nclass Snake extends Animal {\n  hasLegs: false;\n}\n\nfunction createZoo(): Animal[] {\n  return [new Rhino(), new Elephant(), new Snake()];\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion in TypeScript Using Angle-Bracket Syntax\nDESCRIPTION: This example illustrates type assertion in TypeScript using the angle-bracket syntax. It shows how to assert an unknown type to a string type to access its length property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet someValue: unknown = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n```\n\n----------------------------------------\n\nTITLE: Rest Parameters in TypeScript Functions\nDESCRIPTION: This example demonstrates how to use rest parameters in TypeScript to work with multiple parameters as a group, gathering them into an array.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\n// employeeName will be \"Joseph Samuel Lucas MacKinzie\"\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n\nlet buildNameFun: (fname: string, ...rest: string[]) => string = buildName;\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Built-in Types in TypeScript\nDESCRIPTION: Demonstrates issues when inheriting from built-in types like Error in TypeScript and provides a workaround using Object.setPrototypeOf().\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass MsgError extends Error {\n  constructor(m: string) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, MsgError.prototype);\n  }\n\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Node.js Applications\nDESCRIPTION: Recommended TypeScript compiler options for Node.js applications that compile TypeScript and run the JavaScript outputs.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // This is not a complete template; it only\n    // shows relevant module-related settings.\n    // Be sure to set other important options\n    // like `target`, `lib`, and `strict`.\n\n    // Required\n    \"module\": \"nodenext\",\n\n    // Implied by `\"module\": \"nodenext\"`:\n    // \"moduleResolution\": \"nodenext\",\n    // \"esModuleInterop\": true,\n    // \"target\": \"esnext\",\n\n    // Recommended\n    \"verbatimModuleSyntax\": true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Interface Extension\nDESCRIPTION: Demonstrates extending multiple interfaces to combine their members into a new interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Shape {\n  color: string;\n}\n\ninterface PenStroke {\n  penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n  sideLength: number;\n}\n\nlet square = {} as Square;\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n\n----------------------------------------\n\nTITLE: Conditional Types with Default Values\nDESCRIPTION: Shows using conditional types to handle cases where a property might not exist, providing a default value (never) when the condition is not met.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype MessageOf<T> = T extends { message: unknown } ? T[\"message\"] : never;\n\ninterface Email {\n  message: string;\n}\n\ninterface Dog {\n  bark(): void;\n}\n\ntype EmailMessageContents = MessageOf<Email>;\n//   ^?\n\ntype DogMessageContents = MessageOf<Dog>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Setting up Rollup with TypeScript\nDESCRIPTION: Configuration for using Rollup with TypeScript via @rollup/plugin-typescript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @rollup/plugin-typescript --save-dev\n```\n\nLANGUAGE: js\nCODE:\n```\n// rollup.config.js\nimport typescript from '@rollup/plugin-typescript';\n\nexport default {\n  input: 'src/index.ts',\n  output: {\n    dir: 'output',\n    format: 'cjs'\n  },\n  plugins: [typescript()]\n};\n```\n\n----------------------------------------\n\nTITLE: Const Assertion Limitations\nDESCRIPTION: Illustrates limitations of const assertions, showing which expressions are valid and invalid for const assertions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Error! A 'const' assertion can only be applied to a\n// to a string, number, boolean, array, or object literal.\nlet a = (Math.random() < 0.5 ? 0 : 1) as const;\nlet b = (60 * 60 * 1000) as const;\n\n// Works!\nlet c = Math.random() < 0.5 ? (0 as const) : (1 as const);\nlet d = 3_600_000 as const;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Resource Cleanup with `await using` in TypeScript\nDESCRIPTION: Demonstrates the use of `await using` declarations with AsyncDisposable objects that implement Symbol.asyncDispose. This allows for proper handling of asynchronous cleanup operations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function doWork() {\n    // Do fake work for half a second.\n    await new Promise(resolve => setTimeout(resolve, 500));\n}\n\nfunction loggy(id: string): AsyncDisposable {\n    console.log(`Constructing ${id}`);\n    return {\n        async [Symbol.asyncDispose]() {\n            console.log(`Disposing (async) ${id}`);\n            await doWork();\n        },\n    }\n}\n\nasync function func() {\n    await using a = loggy(\"a\");\n    await using b = loggy(\"b\");\n    {\n        await using c = loggy(\"c\");\n        await using d = loggy(\"d\");\n    }\n    await using e = loggy(\"e\");\n    return;\n\n    // Unreachable.\n    // Never created, never disposed.\n    await using f = loggy(\"f\");\n}\n\nfunc();\n// Constructing a\n// Constructing b\n// Constructing c\n// Constructing d\n// Disposing (async) d\n// Disposing (async) c\n// Constructing e\n// Disposing (async) e\n// Disposing (async) b\n// Disposing (async) a\n```\n\n----------------------------------------\n\nTITLE: Defining a Sealed Class Decorator in TypeScript\nDESCRIPTION: Function definition for a @sealed class decorator in TypeScript that prevents adding or removing properties from a class after its definition by using Object.seal().\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sealed(constructor: Function) {\n  Object.seal(constructor);\n  Object.seal(constructor.prototype);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple Types with Optional and Rest Elements in TypeScript\nDESCRIPTION: Demonstrates various ways to define tuple types in TypeScript, including optional elements, labeled elements, and rest elements. This showcases the flexibility of tuple types in TypeScript 4.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// A tuple that has either one or two strings.\nlet c: [string, string?] = [\"hello\"];\nc = [\"hello\", \"world\"];\n\n// A labeled tuple that has either one or two strings.\nlet d: [first: string, second?: string] = [\"hello\"];\nd = [\"hello\", \"world\"];\n\n// A tuple with a *rest element* - holds at least 2 strings at the front,\n// and any number of booleans at the back.\nlet e: [string, string, ...boolean[]];\n\ne = [\"hello\", \"world\"];\ne = [\"hello\", \"world\", false];\ne = [\"hello\", \"world\", true, false, true];\n```\n\n----------------------------------------\n\nTITLE: Union Type Discrimination in TypeScript\nDESCRIPTION: Shows how to handle union types in TypeScript by discriminating between different types using type predicates. The example demonstrates handling a function that accepts string, string array, function, or object with a string property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction start(\n  arg: string | string[] | (() => string) | { s: string }\n): string {\n  // this is super common in JavaScript\n  if (typeof arg === \"string\") {\n    return commonCase(arg);\n  } else if (Array.isArray(arg)) {\n    return arg.map(commonCase).join(\",\");\n  } else if (typeof arg === \"function\") {\n    return commonCase(arg());\n  } else {\n    return commonCase(arg.s);\n  }\n\n  function commonCase(s: string): string {\n    // finally, just convert a string to another string\n    return s;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Class Expressions with Type Parameters\nDESCRIPTION: Shows how to use class expressions, which don't require a name, with type parameters. Class expressions can be assigned to variables and used similarly to class declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst someClass = class<Type> {\n  content: Type;\n  constructor(value: Type) {\n    this.content = value;\n  }\n};\n\nconst m = new someClass(\"Hello, world\");\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying Generic Type Arguments in TypeScript\nDESCRIPTION: Calling a generic function with an explicitly specified type argument. This example shows how to manually set the type parameter when invoking a generic function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet output = identity<string>(\"myString\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Null and Undefined Types\nDESCRIPTION: Example of TypeScript null and undefined types that are checked when strictNullChecks is enabled. These types represent absence of value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nnull\n```\n\nLANGUAGE: typescript\nCODE:\n```\nundefined\n```\n\n----------------------------------------\n\nTITLE: Array.forEach Example with Void Return Type in TypeScript\nDESCRIPTION: Demonstrates a practical use case for the void return type behavior, where Array.prototype.push returns a number but can be used in Array.prototype.forEach which expects a void-returning function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst src = [1, 2, 3];\nconst dst = [0];\n\nsrc.forEach((el) => dst.push(el));\n```\n\n----------------------------------------\n\nTITLE: Defining a Shape Interface with Optional Properties in TypeScript\nDESCRIPTION: This snippet shows an initial attempt at defining a Shape interface with optional radius and sideLength properties. It uses a union of string literal types for the 'kind' property to distinguish between circle and square shapes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  sideLength?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Shape Using Interface and Type in TypeScript\nDESCRIPTION: Demonstrates two equivalent ways to define an object's shape in TypeScript using both interface and type alias syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/shape.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface House {\n  name: string;\n  road: string;\n  town: string;\n  country: string;\n}\n\n// or\n\ntype House = {\n  name: string;\n  road: string;\n  town: string;\n  country: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Classes and Construct Signatures in TypeScript\nDESCRIPTION: This snippet demonstrates the use of abstract classes and the new abstract construct signatures feature in TypeScript 4.2, allowing for more flexible use of abstract classes in generic contexts.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2511\nabstract class Shape {\n  abstract getArea(): number;\n}\n\nnew Shape();\n\nclass Square extends Shape {\n  #sideLength: number;\n\n  constructor(sideLength: number) {\n    super();\n    this.#sideLength = sideLength;\n  }\n\n  getArea() {\n    return this.#sideLength ** 2;\n  }\n}\n\n// Works fine.\nnew Square(42);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nabstract class Shape {\n  abstract getArea(): number;\n}\n// ---cut---\ninterface HasArea {\n  getArea(): number;\n}\n\nlet Ctor: new () => HasArea = Shape;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\nabstract class Shape {\n  abstract getArea(): number;\n}\n\ninterface HasArea {\n  getArea(): number;\n}\n\nfunction makeSubclassWithArea(Ctor: new () => HasArea) {\n  return class extends Ctor {\n    getArea() {\n      return 42\n    }\n  };\n}\n\nlet MyShape = makeSubclassWithArea(Shape);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2344\nabstract class Shape {\n  abstract getArea(): number;\n}\n// ---cut---\ntype MyInstance = InstanceType<typeof Shape>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Shape {\n  abstract getArea(): number;\n}\n// ---cut---\ninterface HasArea {\n    getArea(): number;\n}\n\n// Works!\nlet Ctor: abstract new () => HasArea = Shape;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class SuperClass {\n    abstract someMethod(): void;\n    badda() {}\n}\n\ntype AbstractConstructor<T> = abstract new (...args: any[]) => T\n\nfunction withStyles<T extends AbstractConstructor<object>>(Ctor: T) {\n    abstract class StyledClass extends Ctor {\n        getStyles() {\n            // ...\n        }\n    }\n    return StyledClass;\n}\n\nclass SubClass extends withStyles(SuperClass) {\n    someMethod() {\n        this.someMethod()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Constructor with Default Parameters\nDESCRIPTION: Defines a Point class with a constructor that has default parameter values, initializing the class fields with those values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x: number;\n  y: number;\n\n  // Normal signature with defaults\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object Properties in TypeScript\nDESCRIPTION: Example of TypeScript code accessing properties and methods on a library object called myLib.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = myLib.makeGreeting(\"hello, world\");\nconsole.log(\"The computed greeting is:\" + result);\n\nlet count = myLib.numberOfGreetings;\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Types for Type Categorization in TypeScript\nDESCRIPTION: A type alias that uses nested conditional types to determine the name of a type based on its category (string, number, boolean, etc).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype TypeName<T> = T extends string\n  ? \"string\"\n  : T extends number\n  ? \"number\"\n  : T extends boolean\n  ? \"boolean\"\n  : T extends undefined\n  ? \"undefined\"\n  : T extends Function\n  ? \"function\"\n  : \"object\";\n\ntype T0 = TypeName<string>;\n//   ^?\ntype T1 = TypeName<\"a\">;\n//   ^?\ntype T2 = TypeName<true>;\n//   ^?\ntype T3 = TypeName<() => void>;\n//   ^?\ntype T4 = TypeName<string[]>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Defining Anonymous Object Types in TypeScript\nDESCRIPTION: Demonstrates how to use an anonymous object type to specify the shape of a function parameter. The function accepts an object with name (string) and age (number) properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: { name: string; age: number }) {\n  //                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  return \"Hello \" + person.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Literal Types in TypeScript\nDESCRIPTION: This example demonstrates the use of numeric literal types in TypeScript. It shows how they can be used to define a function that returns specific numeric values and in describing configuration values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Literal Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rollDice(): 1 | 2 | 3 | 4 | 5 | 6 {\n  return (Math.floor(Math.random() * 6) + 1) as 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nconst result = rollDice();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/** Creates a map centered at loc/lat */\ndeclare function setupMap(config: MapConfig): void;\n// ---cut---\ninterface MapConfig {\n  lng: number;\n  lat: number;\n  tileSize: 8 | 16 | 32;\n}\n\nsetupMap({ lng: -73.935242, lat: 40.73061, tileSize: 16 });\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Generic Type Variable in TypeScript\nDESCRIPTION: This example demonstrates an error when trying to use a property that may not exist on all types in a generic function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<T>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Private Field Access in JavaScript Runtime\nDESCRIPTION: Shows how TypeScript's private fields can still be accessed at runtime using JavaScript mechanisms, demonstrating the 'soft private' nature of TypeScript privacy.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nclass MySafe {\n  private secretKey = 12345;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// In a JavaScript file...\nconst s = new MySafe();\n// Will print 12345\nconsole.log(s.secretKey);\n```\n\n----------------------------------------\n\nTITLE: Function Overloads with Conditional Types\nDESCRIPTION: Demonstrates how conditional types can simplify function overloads by encoding type logic in a conditional type rather than using multiple function signatures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IdLabel {\n  id: number /* some fields */;\n}\ninterface NameLabel {\n  name: string /* other fields */;\n}\n\nfunction createLabel(id: number): IdLabel;\nfunction createLabel(name: string): NameLabel;\nfunction createLabel(nameOrId: string | number): IdLabel | NameLabel;\nfunction createLabel(nameOrId: string | number): IdLabel | NameLabel {\n  throw \"unimplemented\";\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference Without Const Type Parameters in TypeScript\nDESCRIPTION: Shows basic type inference behavior in TypeScript without const type parameters. The inferred type becomes the more general string[] rather than a tuple with specific string literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype HasNames = { names: readonly string[] };\nfunction getNamesExactly<T extends HasNames>(arg: T): T[\"names\"] {\n    return arg.names;\n}\n\n// Inferred type: string[]\nconst names = getNamesExactly({ names: [\"Alice\", \"Bob\", \"Eve\"]});\n```\n\n----------------------------------------\n\nTITLE: Object and Function Type Annotations\nDESCRIPTION: Shows JSDoc syntax for declaring object literal types, map-like objects, and function types using both Closure and TypeScript syntax\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {{ a: string, b: number }} */\nvar var9;\n\n/**\n * A map-like object that maps arbitrary `string` properties to `number`s.\n *\n * @type {Object.<string, number>}\n */\nvar stringToNumber;\n\n/** @type {Object.<number, object>} */\nvar arrayLike;\n\n/** @type {function(string, boolean): number} Closure syntax */\nvar sbn;\n/** @type {(s: string, b: boolean) => number} TypeScript syntax */\nvar sbn2;\n```\n\n----------------------------------------\n\nTITLE: Importing with allowSyntheticDefaultImports in TypeScript\nDESCRIPTION: Demonstrates the import syntax allowed when 'allowSyntheticDefaultImports' is set to true, enabling a more concise import statement for modules without explicit default exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowSyntheticDefaultImports.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\n```\n\n----------------------------------------\n\nTITLE: Extending Base Configuration in TypeScript\nDESCRIPTION: Example of a TypeScript configuration file that extends a base configuration. It inherits all compiler options from the base while specifying its own files to be compiled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/extends.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./configs/base\",\n  \"files\": [\"main.ts\", \"supplemental.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Class Expression with Constructor Interface\nDESCRIPTION: Demonstrates using class expressions to implement constructor interfaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClockConstructor {\n  new (hour: number, minute: number): ClockInterface;\n}\n\ninterface ClockInterface {\n  tick(): void;\n}\n\nconst Clock: ClockConstructor = class Clock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n    console.log(\"beep beep\");\n  }\n};\n\nlet clock = new Clock(12, 17);\nclock.tick();\n```\n\n----------------------------------------\n\nTITLE: Unknown Type in TypeScript\nDESCRIPTION: Demonstrates the use of the unknown type for variables with uncertain types that require type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet notSure: unknown = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Symbol Uniqueness in TypeScript\nDESCRIPTION: Shows that symbols are immutable and unique, even when created with the same string key. Two symbols with identical string descriptions will still be different values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Symbols.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet sym2 = Symbol(\"key\");\nlet sym3 = Symbol(\"key\");\n\nsym2 === sym3; // false, symbols are unique\n```\n\n----------------------------------------\n\nTITLE: Async Generator Function Example\nDESCRIPTION: Complex async generator function demonstrating yielding values, delays, and delegation to both sync and async iterables\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function* g() {\n  yield 1;\n  await sleep(100);\n  yield* [2, 3];\n  yield* (async function*() {\n    await sleep(100);\n    yield 4;\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Literal Inference using Type Assertions\nDESCRIPTION: This snippet shows two approaches to fix literal inference issues: adding a type assertion to a specific property, or asserting the type when the property is used.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n// ---cut---\n// Change 1:\nconst req = { url: \"https://example.com\", method: \"GET\" as \"GET\" };\n// Change 2\nhandleRequest(req.url, req.method as \"GET\");\n```\n\n----------------------------------------\n\nTITLE: Assigning Regular Arrays to ReadonlyArray Type in TypeScript\nDESCRIPTION: Demonstrates how to assign a regular array to a ReadonlyArray variable. This is the proper way to create a ReadonlyArray since no constructor exists.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst roArray: ReadonlyArray<string> = [\"red\", \"green\", \"blue\"];\n```\n\n----------------------------------------\n\nTITLE: Creating a Scale Mixin with TypeScript Class Expression Pattern\nDESCRIPTION: Implementation of a Scale mixin using the class expression pattern. It defines a Constructor type and a Scale function that returns a class extending the base class with scale functionality including a private field, setter method, and getter property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// To get started, we need a type which we'll use to extend\n// other classes from. The main responsibility is to declare\n// that the type being passed in is a class.\n\ntype Constructor = new (...args: any[]) => {};\n\n// This mixin adds a scale property, with getters and setters\n// for changing it with an encapsulated private property:\n\nfunction Scale<TBase extends Constructor>(Base: TBase) {\n  return class Scaling extends Base {\n    // Mixins may not declare private/protected properties\n    // however, you can use ES2020 private fields\n    _scale = 1;\n\n    setScale(scale: number) {\n      this._scale = scale;\n    }\n\n    get scale(): number {\n      return this._scale;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript's private Modifier\nDESCRIPTION: Shows TypeScript's private access modifier which prevents access to members from outside their containing class. Creates an Animal class with a private name property that cannot be accessed externally.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2341\nclass Animal {\n  private name: string;\n\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nnew Animal(\"Cat\").name;\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Constructor Type with Constraints in TypeScript\nDESCRIPTION: Defines a generic constructor type that can apply constraints on the classes to which mixins are applied. This enables creating mixins that require specific capabilities in their base classes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This was our previous constructor:\ntype Constructor = new (...args: any[]) => {};\n// Now we use a generic version which can apply a constraint on\n// the class which this mixin is applied to\ntype GConstructor<T = {}> = new (...args: any[]) => T;\n```\n\n----------------------------------------\n\nTITLE: Working with Unique Symbol Types in TypeScript\nDESCRIPTION: Demonstrates the unique symbol type, which is a special subtype of symbol meant for treating symbols as unique literals. This shows declaration constraints and reference patterns for unique symbols.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Symbols.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 1332\ndeclare const sym1: unique symbol;\n\n// sym2 can only be a constant reference.\nlet sym2: unique symbol = Symbol();\n\n// Works - refers to a unique symbol, but its identity is tied to 'sym1'.\nlet sym3: typeof sym1 = sym1;\n\n// Also works.\nclass C {\n  static readonly StaticSymbol: unique symbol = Symbol();\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Type Aliases in TypeScript\nDESCRIPTION: Shows how to create and use generic type aliases, including self-referential types and complex data structures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype Container<T> = { value: T };\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Tree<T> = {\n  value: T;\n  left?: Tree<T>;\n  right?: Tree<T>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc to Specify Property Types in JavaScript Classes\nDESCRIPTION: Shows how to use JSDoc annotations to specify types for class properties in JavaScript, especially for properties that are only read from and not set in the class body.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @checkJs\n// @errors: 2322\nclass C {\n  constructor() {\n    /** @type {number | undefined} */\n    this.prop = undefined;\n    /** @type {number | undefined} */\n    this.count;\n  }\n}\n\nlet c = new C();\nc.prop = 0; // OK\nc.count = \"string\";\n```\n\n----------------------------------------\n\nTITLE: Using Rest Elements in Tuple Types\nDESCRIPTION: Demonstrates how to define tuple types with rest elements, which allow for a variable number of elements of a specific type. The example shows three different patterns for placing rest elements in tuples.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringNumberBooleans = [string, number, ...boolean[]];\ntype StringBooleansNumber = [string, ...boolean[], number];\ntype BooleansStringNumber = [...boolean[], string, number];\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Decorator in TypeScript\nDESCRIPTION: This example shows the use of a parameter decorator '@required' applied to the 'verbose' parameter of the 'print' method in the BugReport class. It also uses a method decorator '@validate'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass BugReport {\n  type = \"report\";\n  title: string;\n\n  constructor(t: string) {\n    this.title = t;\n  }\n\n  @validate\n  print(@required verbose: boolean) {\n    if (verbose) {\n      return `type: ${this.type}\\ntitle: ${this.title}`;\n    } else {\n     return this.title; \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces Extending Classes in TypeScript\nDESCRIPTION: This code snippet demonstrates how interfaces can extend classes and how this affects class implementations. It shows the relationship between Control, SelectableControl, and various implementing classes, highlighting the implications of private member inheritance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2300 2420 2300\nclass Control {\n  private state: any;\n}\n\ninterface SelectableControl extends Control {\n  select(): void;\n}\n\nclass Button extends Control implements SelectableControl {\n  select() {}\n}\n\nclass TextBox extends Control {\n  select() {}\n}\n\nclass ImageControl implements SelectableControl {\n  private state: any;\n  select() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Property Getter with Key Constraints\nDESCRIPTION: Implements a type-safe property accessor using generic constraints to ensure the key exists on the object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\n\ngetProperty(x, \"a\");\ngetProperty(x, \"m\");\n```\n\n----------------------------------------\n\nTITLE: Complex Function Declaration with Destructuring and Defaults in TypeScript\nDESCRIPTION: This example shows a more complex function declaration using destructuring with default values and optional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f({ a, b = 0 } = { a: \"\" }): void {\n  // ...\n}\nf({ a: \"yes\" }); // ok, default b = 0\nf(); // ok, default to { a: \"\" }, which then defaults b = 0\nf({}); // error, 'a' is required if you supply an argument\n```\n\n----------------------------------------\n\nTITLE: Inferring Properties from Class Body Assignments in JavaScript\nDESCRIPTION: Demonstrates how TypeScript infers property types in JavaScript classes based on assignments in the class body. Properties are considered optional unless defined in the constructor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @checkJs\n// @errors: 2322\nclass C {\n  constructor() {\n    this.constructorOnly = 0;\n    this.constructorUnknown = undefined;\n  }\n  method() {\n    this.constructorOnly = false;\n    this.constructorUnknown = \"plunkbat\"; // ok, constructorUnknown is string | undefined\n    this.methodOnly = \"ok\"; // ok, but methodOnly could also be undefined\n  }\n  method2() {\n    this.methodOnly = true; // also, ok, methodOnly's type is string | boolean | undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Protected Constructors in TypeScript\nDESCRIPTION: Shows how to create a class with a protected constructor, which prevents direct instantiation but allows extension. The Person class can be extended by Employee but cannot be instantiated directly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2674\nclass Person {\n  protected name: string;\n  protected constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\n// Employee can extend Person\nclass Employee extends Person {\n  private department: string;\n\n  constructor(name: string, department: string) {\n    super(name);\n    this.department = department;\n  }\n\n  public getElevatorPitch() {\n    return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n  }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nlet john = new Person(\"John\");\n```\n\n----------------------------------------\n\nTITLE: Using the Awaited Type in TypeScript\nDESCRIPTION: Illustrates the usage of the new Awaited utility type in TypeScript 4.5. It shows how Awaited recursively unwraps Promise types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// A = string\ntype A = Awaited<Promise<string>>;\n\n// B = number\ntype B = Awaited<Promise<Promise<number>>>;\n\n// C = boolean | number\ntype C = Awaited<boolean | Promise<number>>;\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Type Parameters in Generic Functions\nDESCRIPTION: Illustrates how to use multiple type parameters in a generic function for more complex type relationships.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction map<Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[] {\n  return arr.map(func);\n}\n\nconst parsed = map([\"1\", \"2\", \"3\"], (n) => parseInt(n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent Interface with This-Typing in TypeScript\nDESCRIPTION: Demonstrates the use of this-typing in TypeScript to create a fluent interface for a basic calculator class. This allows method chaining while preserving type information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.7.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class BasicCalculator {\n  public constructor(protected value: number = 0) {}\n\n  public currentValue(): number {\n    return this.value;\n  }\n\n  public add(operand: number) {\n    this.value += operand;\n    return this;\n  }\n\n  public subtract(operand: number) {\n    this.value -= operand;\n    return this;\n  }\n\n  public multiply(operand: number) {\n    this.value *= operand;\n    return this;\n  }\n\n  public divide(operand: number) {\n    this.value /= operand;\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Type for Label Selection\nDESCRIPTION: Defines a conditional type that selects between IdLabel and NameLabel based on whether the input type extends number or string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IdLabel {\n  id: number /* some fields */;\n}\ninterface NameLabel {\n  name: string /* other fields */;\n}\n// ---cut---\ntype NameOrId<T extends number | string> = T extends number\n  ? IdLabel\n  : NameLabel;\n```\n\n----------------------------------------\n\nTITLE: Symbol Index Signature Example\nDESCRIPTION: Shows new TypeScript 4.4 feature allowing symbol-based index signatures for creating symbol-keyed objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Colors {\n  [sym: symbol]: number;\n}\n\nconst red = Symbol(\"red\");\nconst green = Symbol(\"green\");\nconst blue = Symbol(\"blue\");\n\nlet colors: Colors = {};\n\n// Assignment of a number is allowed\ncolors[red] = 255;\nlet redVal = colors[red];\n//  ^?\n\ncolors[blue] = \"da ba dee\";\n```\n\n----------------------------------------\n\nTITLE: Basic Type Guard Control Flow Analysis\nDESCRIPTION: Demonstrates basic type guard functionality using typeof check on an unknown argument to narrow its type to string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(arg: unknown) {\n  if (typeof arg === \"string\") {\n    console.log(arg.toUpperCase());\n    //           ^?\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: keyof with Index Signatures in TypeScript\nDESCRIPTION: Shows how keyof behaves with types that have number or string index signatures, returning the index type instead of specific keys.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Keyof Type Operator.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Arrayish = { [n: number]: unknown };\ntype A = keyof Arrayish;\n//   ^?\n\ntype Mapish = { [k: string]: boolean };\ntype M = keyof Mapish;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Creating Readonly Index Signatures in TypeScript\nDESCRIPTION: Demonstrates how to create readonly index signatures in TypeScript interfaces to prevent assignment to their indices. This example shows a ReadonlyStringArray interface with a readonly index signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadonlyStringArray {\n  readonly [index: number]: string;\n}\n\nlet myArray: ReadonlyStringArray = getReadOnlyStringArray();\nmyArray[2] = \"Mallory\";\n```\n\n----------------------------------------\n\nTITLE: Static Private Class Members in TypeScript\nDESCRIPTION: Demonstrates TypeScript's support for ECMAScript's #private syntax on static class members, making them truly private at runtime and inaccessible outside their containing class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  static #someMethod() {\n    // ...\n  }\n}\n\nFoo.#someMethod();\n//  ~~~~~~~~~~~\n// error!\n// Property '#someMethod' is not accessible\n// outside class 'Foo' because it has a private identifier.\n```\n\n----------------------------------------\n\nTITLE: Loose Equality Checks in TypeScript\nDESCRIPTION: Illustrates how TypeScript handles loose equality checks (== and !=) for type narrowing. The 'multiplyValue' function shows narrowing of null and undefined types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Container {\n  value: number | null | undefined;\n}\n\nfunction multiplyValue(container: Container, factor: number) {\n  // Remove both 'null' and 'undefined' from the type.\n  if (container.value != null) {\n    console.log(container.value);\n    //                    ^?\n\n    // Now we can safely multiply 'container.value'.\n    container.value *= factor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Object Assignment Type Checking\nDESCRIPTION: Shows how TypeScript's type system catches mismatched property names during object assignment, providing compile-time error detection for typos and incorrect property names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/type-system.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet shop = {\n  name: \"Table Store\",\n  address: \"Maplewood\",\n};\n\nshop = {\n  nme: \"Chair Store\",\n  address: \"Maplewood\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using Enums in Functions\nDESCRIPTION: Example of using enum values in function parameters and implementation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum UserResponse {\n  No = 0,\n  Yes = 1,\n}\n\nfunction respond(recipient: string, message: UserResponse): void {\n  // ...\n}\n\nrespond(\"Princess Caroline\", UserResponse.Yes);\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Types in TypeScript\nDESCRIPTION: Demonstrates basic conditional type expressions that evaluate to different types based on whether the left type extends the right type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  live(): void;\n}\ninterface Dog extends Animal {\n  woof(): void;\n}\n\ntype Example1 = Dog extends Animal ? number : string;\n//   ^?\n\ntype Example2 = RegExp extends Animal ? number : string;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Arrow Function Transformation with ES5 Target in TypeScript\nDESCRIPTION: Shows how TypeScript transforms an ES6 arrow function into a traditional function expression when the target is set to ES5 or lower. This transformation preserves the behavior while ensuring compatibility with older JavaScript environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/target.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => this\n```\n\n----------------------------------------\n\nTITLE: Fixing 'this' in callbacks with explicit void type\nDESCRIPTION: This example shows how to fix the callback issue by explicitly marking the method's 'this' parameter as void. This tells TypeScript that the method doesn't rely on any object context, making it compatible with the addClickListener interface, but preventing use of 'this' inside the method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Handler {\n  info: string;\n  onClickGood(this: void, e: Event) {\n    // can't use `this` here because it's of type void!\n    console.log(\"clicked!\");\n  }\n}\n\nlet h = new Handler();\nuiElement.addClickListener(h.onClickGood);\n```\n\n----------------------------------------\n\nTITLE: Implicit Subtype Relationships Between Classes in TypeScript\nDESCRIPTION: This snippet shows how TypeScript recognizes subtype relationships between classes even without explicit inheritance. The Employee class has all properties of Person plus an additional salary property, making it a structural subtype of Person.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n// @strict: false\nclass Person {\n  name: string;\n  age: number;\n}\n\nclass Employee {\n  name: string;\n  age: number;\n  salary: number;\n}\n\n// OK\nconst p: Person = new Employee();\n```\n\n----------------------------------------\n\nTITLE: Comparing Structurally Identical Classes in TypeScript\nDESCRIPTION: This example demonstrates how two classes with identical structures can be used interchangeably in TypeScript, even without any inheritance relationship between them. The compiler allows this because TypeScript uses structural typing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point1 {\n  x = 0;\n  y = 0;\n}\n\nclass Point2 {\n  x = 0;\n  y = 0;\n}\n\n// OK\nconst p: Point1 = new Point2();\n```\n\n----------------------------------------\n\nTITLE: Using Intersection Types for Consistent Error Handling in TypeScript\nDESCRIPTION: This example demonstrates how to use intersection types to combine error handling with specific response types, creating reusable and consistent interfaces for network responses.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ErrorHandling {\n  success: boolean;\n  error?: { message: string };\n}\n\ninterface ArtworksData {\n  artworks: { title: string }[];\n}\n\ninterface ArtistsData {\n  artists: { name: string }[];\n}\n\n// These interfaces are composed to have\n// consistent error handling, and their own data.\n\ntype ArtworksResponse = ArtworksData & ErrorHandling;\ntype ArtistsResponse = ArtistsData & ErrorHandling;\n\nconst handleArtistsResponse = (response: ArtistsResponse) => {\n  if (response.error) {\n    console.error(response.error.message);\n    return;\n  }\n\n  console.log(response.artists);\n};\n```\n\n----------------------------------------\n\nTITLE: Unknown Type Examples in TypeScript\nDESCRIPTION: Comprehensive examples showing the behavior and usage of the new unknown type including type operations, constraints, and assignments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// In an intersection everything absorbs unknown\n\ntype T00 = unknown & null; // null\ntype T01 = unknown & undefined; // undefined\ntype T02 = unknown & null & undefined; // null & undefined (which becomes never)\ntype T03 = unknown & string; // string\ntype T04 = unknown & string[]; // string[]\ntype T05 = unknown & unknown; // unknown\ntype T06 = unknown & any; // any\n\n// In a union an unknown absorbs everything\n\ntype T10 = unknown | null; // unknown\ntype T11 = unknown | undefined; // unknown\ntype T12 = unknown | null | undefined; // unknown\ntype T13 = unknown | string; // unknown\ntype T14 = unknown | string[]; // unknown\ntype T15 = unknown | unknown; // unknown\ntype T16 = unknown | any; // any\n\n// Type variable and unknown in union and intersection\n\ntype T20<T> = T & {}; // T & {}\ntype T21<T> = T | {}; // T | {}\ntype T22<T> = T & unknown; // T\ntype T23<T> = T | unknown; // unknown\n\n// unknown in conditional types\n\ntype T30<T> = unknown extends T ? true : false; // Deferred\ntype T31<T> = T extends unknown ? true : false; // Deferred (so it distributes)\ntype T32<T> = never extends T ? true : false; // true\ntype T33<T> = T extends never ? true : false; // Deferred\n\n// keyof unknown\n\ntype T40 = keyof any; // string | number | symbol\ntype T41 = keyof unknown; // never\n\n// Only equality operators are allowed with unknown\n\nfunction f10(x: unknown) {\n  x == 5;\n  x !== 10;\n  x >= 0; // Error\n  x + 1; // Error\n  x * 2; // Error\n  -x; // Error\n  +x; // Error\n}\n\n// No property accesses, element accesses, or function calls\n\nfunction f11(x: unknown) {\n  x.foo; // Error\n  x[5]; // Error\n  x(); // Error\n  new x(); // Error\n}\n\n// typeof, instanceof, and user defined type predicates\n\ndeclare function isFunction(x: unknown): x is Function;\n\nfunction f20(x: unknown) {\n  if (typeof x === \"string\" || typeof x === \"number\") {\n    x; // string | number\n  }\n  if (x instanceof Error) {\n    x; // Error\n  }\n  if (isFunction(x)) {\n    x; // Function\n  }\n}\n\n// Homomorphic mapped type over unknown\n\ntype T50<T> = { [P in keyof T]: number };\ntype T51 = T50<any>; // { [x: string]: number }\ntype T52 = T50<unknown>; // {}\n\n// Anything is assignable to unknown\n\nfunction f21<T>(pAny: any, pNever: never, pT: T) {\n  let x: unknown;\n  x = 123;\n  x = \"hello\";\n  x = [1, 2, 3];\n  x = new Error();\n  x = x;\n  x = pAny;\n  x = pNever;\n  x = pT;\n}\n\n// unknown assignable only to itself and any\n\nfunction f22(x: unknown) {\n  let v1: any = x;\n  let v2: unknown = x;\n  let v3: object = x; // Error\n  let v4: string = x; // Error\n  let v5: string[] = x; // Error\n  let v6: {} = x; // Error\n  let v7: {} | null | undefined = x; // Error\n}\n\n// Type parameter 'T extends unknown' not related to object\n\nfunction f23<T extends unknown>(x: T) {\n  let y: object = x; // Error\n}\n\n// Anything but primitive assignable to { [x: string]: unknown }\n\nfunction f24(x: { [x: string]: unknown }) {\n  x = {};\n  x = { a: 5 };\n  x = [1, 2, 3];\n  x = 123; // Error\n}\n\n// Locals of type unknown always considered initialized\n\nfunction f25() {\n  let x: unknown;\n  let y = x;\n}\n\n// Spread of unknown causes result to be unknown\n\nfunction f26(x: {}, y: unknown, z: any) {\n  let o1 = { a: 42, ...x }; // { a: number }\n  let o2 = { a: 42, ...x, ...y }; // unknown\n  let o3 = { a: 42, ...x, ...y, ...z }; // any\n}\n\n// Functions with unknown return type don't need return expressions\n\nfunction f27(): unknown {}\n\n// Rest type cannot be created from unknown\n\nfunction f28(x: unknown) {\n  let { ...a } = x; // Error\n}\n\n// Class properties of type unknown don't need definite assignment\n\nclass C1 {\n  a: string; // Error\n  b: unknown;\n  c: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Generic Identity Function in TypeScript\nDESCRIPTION: This snippet shows a basic identity function with a specific number type, demonstrating the limitation of non-generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity(arg: number): number {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Strict Bind Call Apply Enabled Example\nDESCRIPTION: Demonstrates type checking behavior when strictBindCallApply is enabled. Shows how TypeScript enforces correct argument types when using function.call method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictBindCallApply.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictBindCallApply: true\n// @errors: 2345\n\n// With strictBindCallApply on\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\nconst n1 = fn.call(undefined, \"10\");\n\nconst n2 = fn.call(undefined, false);\n```\n\n----------------------------------------\n\nTITLE: Using String Index Signatures for Dictionary-like Objects in TypeScript\nDESCRIPTION: Shows how to use string index signatures to type dictionary-like objects in TypeScript, allowing access with arbitrary string keys. This example demonstrates a movie watch counter implementation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst movieWatchCount: { [key: string]: number } = {};\n\nfunction watchMovie(title: string) {\n  movieWatchCount[title] = (movieWatchCount[title] ?? 0) + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Functions with Leading Rest Parameters in TypeScript\nDESCRIPTION: Demonstrates how to use non-trailing rest elements in tuple types to model functions with any number of leading arguments followed by fixed arguments in TypeScript 4.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function doStuff(...args: [...names: string[], shouldCapitalize: boolean]): void;\n\ndoStuff(/*shouldCapitalize:*/ false)\ndoStuff(\"fee\", \"fi\", \"fo\", \"fum\", /*shouldCapitalize:*/ true);\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Module Import Example\nDESCRIPTION: Demonstrates basic module imports using both namespace and default import syntax with fs and lodash modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/esModuleInterop.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n```\n\n----------------------------------------\n\nTITLE: Conditional Type with Constraints\nDESCRIPTION: Shows how conditional types can provide type constraints and narrow types within the true branch of the condition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2536\ntype MessageOf<T> = T[\"message\"];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Well-Typed Method Decorator in TypeScript\nDESCRIPTION: Demonstrates how to implement a well-typed method decorator that logs method entry and exit. Uses generic type parameters to properly type this, arguments, and return values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggedMethod<This, Args extends any[], Return>(\n    target: (this: This, ...args: Args) => Return,\n    context: ClassMethodDecoratorContext<This, (this: This, ...args: Args) => Return>\n) {\n    const methodName = String(context.name);\n\n    function replacementMethod(this: This, ...args: Args): Return {\n        console.log(`LOG: Entering method '${methodName}'.`)\n        const result = target.call(this, ...args);\n        console.log(`LOG: Exiting method '${methodName}'.`)\n        return result;\n    }\n\n    return replacementMethod;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Re-declaration Rules with let in TypeScript\nDESCRIPTION: This snippet shows how let prevents re-declaration of variables in the same scope, unlike var declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = 10;\nlet x = 20; // error: can't re-declare 'x' in the same scope\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x) {\n  let x = 100; // error: interferes with parameter declaration\n}\n\nfunction g() {\n  let x = 100;\n  var x = 100; // error: can't have both declarations of 'x'\n}\n```\n\n----------------------------------------\n\nTITLE: Infer Type Constraints Example\nDESCRIPTION: Shows usage of extends constraints with infer type variables in conditional types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype TryGetNumberIfFirst<T> =\n    T extends [infer U extends number, ...unknown[]] ? U : never;\n```\n\n----------------------------------------\n\nTITLE: Declaring Interfaces in TypeScript Declaration Files\nDESCRIPTION: Syntax for declaring interfaces with required and optional properties, and a function that accepts that interface as a parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GreetingSettings {\n  greeting: string;\n  duration?: number;\n  color?: string;\n}\n\ndeclare function greet(setting: GreetingSettings): void;\n```\n\n----------------------------------------\n\nTITLE: Using the Never Type in TypeScript\nDESCRIPTION: Shows how to use the never type for functions that never return and handling exhaustive checks. Includes examples of error handlers and infinite loops.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction error(message: string): never {\n  throw new Error(message);\n}\n\nfunction fail() {\n  return error(\"Something failed\");\n}\n\nfunction infiniteLoop(): never {\n  while (true) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Distribution in Conditional Types\nDESCRIPTION: Shows how to prevent distributive behavior in conditional types by wrapping each side of the extends keyword with square brackets.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToArrayNonDist<Type> = [Type] extends [any] ? Type[] : never;\n\n// 'ArrOfStrOrNum' is no longer a union.\ntype ArrOfStrOrNum = ToArrayNonDist<string | number>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Boolean Comparison Type Narrowing\nDESCRIPTION: Shows how TypeScript narrows types when comparing type predicates directly with boolean values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface A {\n    a: string;\n}\n\ninterface B {\n    b: string;\n}\n\ntype MyType = A | B;\n\nfunction isA(x: MyType): x is A {\n    return \"a\" in x;\n}\n\nfunction someFn(x: MyType) {\n    if (isA(x) === true) {\n        console.log(x.a); // works!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Null Handling with Truthiness\nDESCRIPTION: Shows how to use truthiness checking to handle null values safely.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printAll(strs: string | string[] | null) {\n  if (strs && typeof strs === \"object\") {\n    for (const s of strs) {\n      console.log(s);\n    }\n  } else if (typeof strs === \"string\") {\n    console.log(strs);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inferred Type Predicates in TypeScript 5.5\nDESCRIPTION: This snippet shows how TypeScript 5.5 improves type inference for filtered arrays, automatically inferring type predicates for certain filter functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Bird {\n    commonName: string;\n    scientificName: string;\n    sing(): void;\n}\n\n// Maps country names -> national bird.\n// Not all nations have official birds (looking at you, Canada!)\ndeclare const nationalBirds: Map<string, Bird>;\n\nfunction makeBirdCalls(countries: string[]) {\n  // birds: Bird[]\n  const birds = countries\n    .map(country => nationalBirds.get(country))\n    .filter(bird => bird !== undefined);\n\n  for (const bird of birds) {\n    bird.sing();  // ok!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Function Using the Iterable Interface in TypeScript\nDESCRIPTION: Demonstrates how to create a generic function that accepts any iterable object and converts it to an array using the spread operator. This function works with any object that implements the Symbol.iterator property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Iterators and Generators.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toArray<X>(xs: Iterable<X>): X[] {\n  return [...xs]\n}\n```\n\n----------------------------------------\n\nTITLE: Destructured Discriminated Unions Analysis\nDESCRIPTION: Demonstrates improved type narrowing with destructured discriminated unions, allowing TypeScript to track relationships between destructured properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Action =\n  | { kind: \"NumberContents\"; payload: number }\n  | { kind: \"StringContents\"; payload: string };\n\nfunction processAction(action: Action) {\n  const { kind, payload } = action;\n  if (kind === \"NumberContents\") {\n    let num = payload * 2;\n    // ...\n  } else if (kind === \"StringContents\") {\n    const str = payload.trim();\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Augmentations vs Ambient Module Declarations\nDESCRIPTION: Example demonstrating how identical syntax can represent either an ambient module declaration or a module augmentation depending on whether the file is a module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Not an ambient module declaration anymore!\nexport {};\ndeclare module \"path\" {\n  export function normalize(p: string): string;\n  export function join(...paths: any[]): string;\n  export var sep: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with SuppressedError in TypeScript\nDESCRIPTION: Demonstrates how the new SuppressedError type handles cases where both the function body and the disposal code throw errors, preserving both error instances for proper diagnosis.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorA extends Error {\n    name = \"ErrorA\";\n}\nclass ErrorB extends Error {\n    name = \"ErrorB\";\n}\n\nfunction throwy(id: string) {\n    return {\n        [Symbol.dispose]() {\n            throw new ErrorA(`Error from ${id}`);\n        }\n    };\n}\n\nfunction func() {\n    using a = throwy(\"a\");\n    throw new ErrorB(\"oops!\")\n}\n\ntry {\n    func();\n}\ncatch (e: any) {\n    console.log(e.name); // SuppressedError\n    console.log(e.message); // An error was suppressed during disposal.\n\n    console.log(e.error.name); // ErrorA\n    console.log(e.error.message); // Error from a\n\n    console.log(e.suppressed.name); // ErrorB\n    console.log(e.suppressed.message); // oops!\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Initializing Class Properties in Constructor\nDESCRIPTION: Demonstrates the correct way to initialize class properties in the constructor, satisfying the strictPropertyInitialization requirement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoodGreeter {\n  name: string;\n\n  constructor() {\n    this.name = \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Express Server Setup with Tooling\nDESCRIPTION: Shows TypeScript's tooling capabilities in an Express.js server context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nconst app = express();\n\napp.get(\"/\", function (req, res) {\n  res.sen\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Classes and Methods in TypeScript 1.6\nDESCRIPTION: Shows how to define and use abstract classes and methods in TypeScript 1.6, including inheritance and implementation rules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Base {\n  abstract getThing(): string;\n  getOtherThing() {\n    return \"hello\";\n  }\n}\n\nlet x = new Base(); // Error, 'Base' is abstract\n\n// Error, must either be 'abstract' or implement concrete 'getThing'\nclass Derived1 extends Base {}\n\nclass Derived2 extends Base {\n  getThing() {\n    return \"hello\";\n  }\n  foo() {\n    super.getThing(); // Error: cannot invoke abstract members through 'super'\n  }\n}\n\nvar x = new Derived2(); // OK\nvar y: Base = new Derived2(); // Also OK\ny.getThing(); // OK\ny.getOtherThing(); // OK\n```\n\n----------------------------------------\n\nTITLE: Basic Module Augmentation with Observable Class\nDESCRIPTION: Demonstrates basic module augmentation pattern by extending an Observable class with a map method. Shows the initial class definition and prototype extension.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Declaration Merging.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// observable.ts\nexport class Observable<T> {\n  // ... implementation left as an exercise for the reader ...\n}\n\n// map.ts\nimport { Observable } from \"./observable\";\nObservable.prototype.map = function (f) {\n  // ... another exercise for the reader\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'never' Type Usage in TypeScript Functions\nDESCRIPTION: This snippet shows three functions that return the 'never' type. The first throws an error, the second calls an error function, and the third is an infinite loop. These examples illustrate situations where a function never produces a value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Function returning never must not have a reachable end point\nfunction error(message: string): never {\n  throw new Error(message);\n}\n\n// Inferred return type is never\nfunction fail() {\n  return error(\"Something failed\");\n}\n\n// Function returning never must not have a reachable end point\nfunction infiniteLoop(): never {\n  while (true) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Ambient Enum in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare an ambient enum in TypeScript. Ambient enums are used to describe the shape of already existing enum types. Unlike regular enums, non-const ambient enum members without initializers are always considered computed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare enum Enum {\n  A = 1,\n  B,\n  C = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript's typeof in type context\nDESCRIPTION: Demonstrates how to use TypeScript's typeof operator in a type context to refer to the type of a variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet s = \"hello\";\nlet n: typeof s;\n//  ^?\n```\n\n----------------------------------------\n\nTITLE: Enhanced Template String Type Compatibility in TypeScript\nDESCRIPTION: Showcases TypeScript's improved ability to relate different template string types. This example demonstrates how TypeScript can now better determine compatibility between different template patterns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let s1: `${number}-${number}-${number}`;\ndeclare let s2: `1-2-3`;\ndeclare let s3: `${number}-2-3`;\n\ns1 = s2;\ns1 = s3;\n```\n\n----------------------------------------\n\nTITLE: Basic Module Export Declaration in TypeScript\nDESCRIPTION: Demonstrates how to export both a variable and an interface with distinct types in a declaration file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport var SomeVar: { a: SomeType };\nexport interface SomeType {\n  count: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Runtime Usage\nDESCRIPTION: Demonstrates how enums exist as objects at runtime and can be passed to functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  X,\n  Y,\n  Z,\n}\n\nfunction f(obj: { X: number }) {\n  return obj.X;\n}\n\n// Works, since 'E' has a property named 'X' which is a number.\nf(E);\n```\n\n----------------------------------------\n\nTITLE: Abstract Class Implementation Example\nDESCRIPTION: Shows practical implementation of abstract classes with derived classes. Demonstrates inheritance and method implementation requirements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Department {\n  constructor(public name: string) {}\n\n  printName(): void {\n    console.log(\"Department name: \" + this.name);\n  }\n\n  abstract printMeeting(): void;\n}\n\nclass AccountingDepartment extends Department {\n  constructor() {\n    super(\"Accounting and Auditing\");\n  }\n\n  printMeeting(): void {\n    console.log(\"The Accounting Department meets each Monday at 10am.\");\n  }\n\n  generateReports(): void {\n    console.log(\"Generating accounting reports...\");\n  }\n}\n\nlet department: Department;\ndepartment = new Department();\ndepartment = new AccountingDepartment();\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports();\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorator Factory in TypeScript\nDESCRIPTION: Implementation of a decorator factory in TypeScript that returns a decorator function. This pattern allows for customized decorator application with parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction color(value: string) {\n  // this is the decorator factory, it sets up\n  // the returned decorator function\n  return function (target) {\n    // this is the decorator\n    // do something with 'target' and 'value'...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Output Example\nDESCRIPTION: Demonstrates how TypeScript code is transformed when targeting CommonJS module format. Shows the conversion from ES Modules syntax to CommonJS require/exports syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class Decorator that Overrides Constructor in TypeScript\nDESCRIPTION: Advanced class decorator example that returns a new class extending the original, adding new properties to instances. Note that TypeScript's type system doesn't recognize these new properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reportableClassDecorator<T extends { new (...args: any[]): {} }>(constructor: T) {\n  return class extends constructor {\n    reportingURL = \"http://www...\";\n  };\n}\n\n@reportableClassDecorator\nclass BugReport {\n  type = \"report\";\n  title: string;\n\n  constructor(t: string) {\n    this.title = t;\n  }\n}\n\nconst bug = new BugReport(\"Needs dark mode\");\nconsole.log(bug.title); // Prints \"Needs dark mode\"\nconsole.log(bug.type); // Prints \"report\"\n\n// Note that the decorator _does not_ change the TypeScript type\n// and so the new property `reportingURL` is not known\n// to the type system:\nbug.reportingURL;\n```\n\n----------------------------------------\n\nTITLE: Using noUncheckedIndexedAccess in TypeScript\nDESCRIPTION: This snippet demonstrates the effect of enabling the 'noUncheckedIndexedAccess' compiler option. It shows how undeclared fields in the type are now considered potentially undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUncheckedIndexedAccess.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n// @noUncheckedIndexedAccess\n// ---cut---\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Decorator Evaluation Order in TypeScript\nDESCRIPTION: Example that demonstrates how multiple decorators are evaluated in TypeScript. Factory functions are evaluated top-to-bottom, while decorators are applied bottom-to-top.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction first() {\n  console.log(\"first(): factory evaluated\");\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(\"first(): called\");\n  };\n}\n\nfunction second() {\n  console.log(\"second(): factory evaluated\");\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(\"second(): called\");\n  };\n}\n\nclass ExampleClass {\n  @first()\n  @second()\n  method() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Function Type Interface Definition\nDESCRIPTION: Shows how to define an interface that describes a function type with a call signature, including parameter types and return type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using satisfies with Arrays\nDESCRIPTION: Shows how the 'satisfies' operator preserves the array type information, allowing methods like map to be used without losing type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function resolveConfig(configPath: string): CompilerOptions;\n\nlet inheritedConfigs = myConfigSettings.extends.map(resolveConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Discriminant Unions in TypeScript\nDESCRIPTION: Demonstrates how to use discriminant unions with interfaces and type guards to create type-safe shape calculations. Shows narrowing of types based on a discriminant property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Square {\n  kind: \"square\";\n  size: number;\n}\n\ninterface Rectangle {\n  kind: \"rectangle\";\n  width: number;\n  height: number;\n}\n\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ntype Shape = Square | Rectangle | Circle;\n\nfunction area(s: Shape) {\n  switch (s.kind) {\n    case \"square\":\n      return s.size * s.size;\n    case \"rectangle\":\n      return s.width * s.height;\n    case \"circle\":\n      return Math.PI * s.radius * s.radius;\n  }\n}\n\nfunction test1(s: Shape) {\n  if (s.kind === \"square\") {\n    s; // Square\n  } else {\n    s; // Rectangle | Circle\n  }\n}\n\nfunction test2(s: Shape) {\n  if (s.kind === \"square\" || s.kind === \"rectangle\") {\n    return;\n  }\n  s; // Circle\n}\n```\n\n----------------------------------------\n\nTITLE: Template String Types as Discriminants in TypeScript\nDESCRIPTION: Shows how TypeScript 4.5 can narrow values with template string types and recognize them as discriminants in union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Success {\n    type: `${string}Success`;\n    body: string;\n}\n\nexport interface Error {\n    type: `${string}Error`;\n    message: string\n}\n\nexport function handler(r: Success | Error) {\n    if (r.type === \"HttpSuccess\") {\n        const token = r.body;\n        //            ^?\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'this' Parameter in TypeScript Functions\nDESCRIPTION: Demonstrates how a special 'this' parameter in TypeScript functions is erased during compilation. The 'this' parameter allows TypeScript to check that the function is called with the correct context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(this: SomeType, x: number) {\n  /* ... */\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn(x) {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Properties with Null Checking in TypeScript\nDESCRIPTION: Demonstrates how optional properties behave with strictNullChecks, showing which value assignments are allowed and which are not.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  a: number;\n  b?: number;\n}\n\nlet c = new C();\n\nc.a = 12;\nc.a = undefined;\nc.b = 13;\nc.b = undefined;\nc.b = null;\n```\n\n----------------------------------------\n\nTITLE: Defining Watched Object Type with Template Literal in TypeScript\nDESCRIPTION: Creates a type for a watched object with an 'on' method that uses template literal types to constrain event names based on object properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PropEventSource<Type> = {\n    on(eventName: `${string & keyof Type}Changed`, callback: (newValue: any) => void): void;\n};\n\ndeclare function makeWatchedObject<Type>(obj: Type): Type & PropEventSource<Type>;\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in TypeScript Interfaces\nDESCRIPTION: Shows how to use union types in TypeScript interfaces to simplify overloads that differ by type in only one argument position.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\ninterface Moment {\n  utcOffset(): number;\n  utcOffset(b: number): Moment;\n  utcOffset(b: string): Moment;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\ninterface Moment {\n  utcOffset(): number;\n  utcOffset(b: number | string): Moment;\n}\n```\n\n----------------------------------------\n\nTITLE: Rest Elements in Tuple Types\nDESCRIPTION: Shows how to use rest elements in tuple types and their behavior with the tuple function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tuple<T extends any[]>(...args: T): T {\n  return args;\n}\n\nconst numbers: number[] = getArrayOfNumbers();\nconst t1 = tuple(\"foo\", 1, true); // [string, number, boolean]\nconst t2 = tuple(\"bar\", ...numbers); // [string, ...number[]]\n```\n\n----------------------------------------\n\nTITLE: Type Compatibility with Private Members in TypeScript\nDESCRIPTION: Demonstrates how TypeScript treats types with private members differently in its structural type system. Shows that private members are only compatible if they originate from the same declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nclass Animal {\n  private name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nclass Rhino extends Animal {\n  constructor() {\n    super(\"Rhino\");\n  }\n}\n\nclass Employee {\n  private name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nlet animal = new Animal(\"Goat\");\nlet rhino = new Rhino();\nlet employee = new Employee(\"Bob\");\n\nanimal = rhino;\nanimal = employee;\n```\n\n----------------------------------------\n\nTITLE: UMD Module Output Example\nDESCRIPTION: Shows how TypeScript code is transformed when targeting Universal Module Definition (UMD) format, which provides compatibility with multiple module systems.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Handling never-returning functions in TypeScript 3.7\nDESCRIPTION: Demonstrates how TypeScript 3.7 improves support for functions that return never, eliminating the need for explicit return statements in certain scenarios.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dispatch(x: string | number): SomeType {\n  if (typeof x === \"string\") {\n    return doThingWithString(x);\n  } else if (typeof x === \"number\") {\n    return doThingWithNumber(x);\n  }\n  process.exit(1);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration with Custom Type\nDESCRIPTION: A TypeScript declaration that defines a custom type for the metadata object and declares the function that returns it, providing type safety for consumers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ArrayMetadata = {\n  length: number;\n  firstObject: any | undefined;\n};\nexport function getArrayMetadata(arr: any[]): ArrayMetadata;\n```\n\n----------------------------------------\n\nTITLE: Template Literal Types with Union Types\nDESCRIPTION: Shows how template literal types handle union types in substitution positions to generate all possible combinations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Color = \"red\" | \"blue\";\ntype Quantity = \"one\" | \"two\";\n\ntype SeussFish = `${Quantity | Color} fish`;\n```\n\n----------------------------------------\n\nTITLE: Using 'override' Keyword in TypeScript Class Extension\nDESCRIPTION: Shows how to use the new 'override' keyword when extending a class to explicitly indicate method overriding.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass SpecializedComponent extends SomeComponent {\n    override show() {\n        // ...\n    }\n    override hide() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Private Field Presence Check in TypeScript\nDESCRIPTION: This class demonstrates the new ability to check for the presence of a private field using the 'in' operator, which also helps narrow down the type of the object being checked.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    #name: string;\n    constructor(name: string) {\n        this.#name = name;\n    }\n\n    equals(other: unknown) {\n        return other &&\n            typeof other === \"object\" &&\n            #name in other && // <- this is new!\n            this.#name === other.#name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Expressions in TypeScript JSX\nDESCRIPTION: This snippet shows how to embed expressions in TypeScript JSX using curly braces and demonstrates type checking for these expressions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst a = (\n  <div>\n    {[\"foo\", \"bar\"].map((i) => (\n      <span>{i / 2}</span>\n    ))}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using @extends with Generic Base Classes in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @extends tag to extend a generic base class in JavaScript, allowing the passing of type arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @template T\n * @extends {Set<T>}\n */\nclass SortableSet extends Set {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Distributive Conditional Types with Boxing in TypeScript\nDESCRIPTION: Demonstrates how conditional types can be used to create different wrapper types based on whether the input is an array or not.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntype BoxedValue<T> = { value: T };\ntype BoxedArray<T> = { array: T[] };\ntype Boxed<T> = T extends any[] ? BoxedArray<T[number]> : BoxedValue<T>;\n\ntype T1 = Boxed<string>;\n//   ^?\ntype T2 = Boxed<number[]>;\n//   ^?\ntype T3 = Boxed<string | number[]>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Illustrating Improved Mapped Type Preservation in TypeScript 5.4\nDESCRIPTION: This example demonstrates how TypeScript 5.4 improves type inference when applying mapped types with 'any' to tuples. It shows that the head element retains its string type, while the tail is correctly inferred as any[].\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.all([\"\", ...([] as any)])\n    .then((result) => {\n        const head = result[0];       // 5.3: any, 5.4: string\n        const tail = result.slice(1); // 5.3 any, 5.4: any[]\n    });\n```\n\n----------------------------------------\n\nTITLE: Shape Discriminant Control Flow Analysis\nDESCRIPTION: Shows how TypeScript 4.4 handles discriminated unions with extracted conditions, allowing type narrowing based on the 'kind' property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Shape =\n  | { kind: \"circle\"; radius: number }\n  | { kind: \"square\"; sideLength: number };\n\nfunction area(shape: Shape): number {\n  const isCircle = shape.kind === \"circle\";\n  if (isCircle) {\n    // We know we have a circle here!\n    return Math.PI * shape.radius ** 2;\n  } else {\n    // We know we're left with a square here!\n    return shape.sideLength ** 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'as const' for Precise Type Inference in TypeScript\nDESCRIPTION: Demonstrates using 'as const' assertion to get more specific type inference for arrays, preserving the literal types of elements instead of widening to string[].\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// The type we wanted:\n//    readonly [\"Alice\", \"Bob\", \"Eve\"]\n// The type we got:\n//    string[]\nconst names1 = getNamesExactly({ names: [\"Alice\", \"Bob\", \"Eve\"]});\n\n// Correctly gets what we wanted:\n//    readonly [\"Alice\", \"Bob\", \"Eve\"]\nconst names2 = getNamesExactly({ names: [\"Alice\", \"Bob\", \"Eve\"]} as const);\n```\n\n----------------------------------------\n\nTITLE: Function Overloading with String Literal Types in TypeScript\nDESCRIPTION: This snippet shows how string literal types can be used to create function overloads, allowing for more specific type checking based on the input string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Literal Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement(tagName: \"img\"): HTMLImageElement;\nfunction createElement(tagName: \"input\"): HTMLInputElement;\n// ... more overloads ...\nfunction createElement(tagName: string): Element {\n  // ... code goes here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Intersection Types in TypeScript 1.6\nDESCRIPTION: Shows how to use intersection types to combine multiple types into one, including an example of extending objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extend<T, U>(first: T, second: U): T & U {\n  let result = <T & U>{};\n  for (let id in first) {\n    result[id] = first[id];\n  }\n  for (let id in second) {\n    if (!result.hasOwnProperty(id)) {\n      result[id] = second[id];\n    }\n  }\n  return result;\n}\n\nvar x = extend({ a: \"hello\" }, { b: 42 });\nvar s = x.a;\nvar n = x.b;\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Format Examples\nDESCRIPTION: Shows CommonJS module format with both import/export and require/module.exports patterns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport mod = require(\"mod\");\nconsole.log(mod);\n\nexport = {\n    p1: true,\n    p2: false\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\n\"use strict\";\nconst mod = require(\"mod\");\nconsole.log(mod);\n\nmodule.exports = {\n    p1: true,\n    p2: false\n};\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup with `using` Declaration in TypeScript\nDESCRIPTION: A simplified approach using the new `using` declaration which automatically calls Symbol.dispose at the end of the scope or before early returns. This eliminates the need for explicit try/finally blocks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function doSomeWork() {\n    using file = new TempFile(\".some_temp_file\");\n\n    // use file...\n\n    if (someCondition()) {\n        // do some more work...\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Decorator Function in TypeScript\nDESCRIPTION: A simple TypeScript decorator implementation showing the basic structure of a decorator function that takes a target as its parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sealed(target) {\n  // do something with 'target' ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration File Template for Global-Modifying Modules\nDESCRIPTION: A template for creating declaration files for global-modifying modules in TypeScript. It shows how to augment global types and export module types and functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the global-modifying module template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ Note: If your global-modifying module is callable or constructable, you'll\n *~ need to combine the patterns here with those in the module-class or module-function\n *~ template files\n */\ndeclare global {\n  /*~ Here, declare things that go in the global namespace, or augment\n   *~ existing declarations in the global namespace\n   */\n  interface String {\n    fancyFormat(opts: StringFormatOptions): string;\n  }\n}\n\n/*~ If your module exports types or values, write them as usual */\nexport interface StringFormatOptions {\n  fancinessLevel: number;\n}\n\n/*~ For example, declaring a method on the module (in addition to its global side effects) */\nexport function doSomething(): void;\n\n/*~ If your module exports nothing, you'll need this line. Otherwise, delete it */\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Exports Blocking Other Subpaths in package.json\nDESCRIPTION: This example shows how the presence of 'exports' in package.json prevents resolution of subpaths that are not explicitly included in the exports mapping.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"main\": \"./dist/index.js\",\n  \"exports\": \"./dist/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using @satisfies for Type Checking in JavaScript\nDESCRIPTION: This example shows how to use the @satisfies tag to declare that a value implements a type without affecting the type of the value. It demonstrates type checking with and without @satisfies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 1360\n// @ts-check\n/**\n * @typedef {\"hello world\" | \"Hello, world\"} WelcomeMessage\n */\n\n/** @satisfies {WelcomeMessage} */\nconst message = \"hello world\"\n//     ^?\n\n/** @satisfies {WelcomeMessage} */\nconst failingMessage = \"Hello world!\"\n\n/** @type {WelcomeMessage} */\nconst messageUsingType = \"hello world\"\n//     ^?\n```\n\n----------------------------------------\n\nTITLE: ECMAScript Modules Import Example\nDESCRIPTION: Demonstrates how to import a default export from another module using ECMAScript Modules (ESM) syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// b.js\nimport a from \"./a.js\";\nconsole.log(a); // 'Hello from a.js'\n```\n\n----------------------------------------\n\nTITLE: Optional Parameters in TypeScript Functions\nDESCRIPTION: This example demonstrates how to use optional parameters in TypeScript functions by adding a '?' after the parameter name.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildName(firstName: string, lastName?: string) {\n  if (lastName) return firstName + \" \" + lastName;\n  else return firstName;\n}\n\nlet result1 = buildName(\"Bob\"); // works correctly now\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\"); // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\"); // ah, just right\n```\n\n----------------------------------------\n\nTITLE: ECMAScript Private Fields Implementation\nDESCRIPTION: Demonstrates the implementation of ECMAScript private fields using the # prefix, showing basic usage and access restrictions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  #name: string;\n\n  constructor(name: string) {\n    this.#name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.#name}!`);\n  }\n}\n\nlet jeremy = new Person(\"Jeremy Bearimy\");\n\njeremy.#name;\n//     ~~~~~\n// Property '#name' is not accessible outside class 'Person'\n// because it has a private identifier.\n```\n\n----------------------------------------\n\nTITLE: Importing React for JSX in TypeScript\nDESCRIPTION: Example of importing React for JSX usage in TypeScript, necessary for the JSX factory to be in scope.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport * as React from 'react';\n```\n\n----------------------------------------\n\nTITLE: Control Flow Analysis with Discriminated Unions\nDESCRIPTION: Shows how TypeScript narrows types based on discriminant properties in union types, using the kind property to determine payload type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Action =\n  | { kind: \"NumberContents\"; payload: number }\n  | { kind: \"StringContents\"; payload: string };\n\nfunction processAction(action: Action) {\n  if (action.kind === \"NumberContents\") {\n    // `action.payload` is a number here.\n    let num = action.payload * 2;\n    // ...\n  } else if (action.kind === \"StringContents\") {\n    // `action.payload` is a string here.\n    const str = action.payload.trim();\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ThisType for Contextual 'this' Typing in TypeScript\nDESCRIPTION: Illustrates the use of ThisType to provide type information for 'this' in method contexts. The example defines an ObjectDescriptor type and a makeObject function that use ThisType to ensure proper typing of 'this' in object methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @noImplicitThis: true\ntype ObjectDescriptor<D, M> = {\n  data?: D;\n  methods?: M & ThisType<D & M>; // Type of 'this' in methods is D & M\n};\n\nfunction makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M {\n  let data: object = desc.data || {};\n  let methods: object = desc.methods || {};\n  return { ...data, ...methods } as D & M;\n}\n\nlet obj = makeObject({\n  data: { x: 0, y: 0 },\n  methods: {\n    moveBy(dx: number, dy: number) {\n      this.x += dx; // Strongly typed this\n      this.y += dy; // Strongly typed this\n    },\n  },\n});\n\nobj.x = 10;\nobj.y = 20;\nobj.moveBy(5, 5);\n```\n\n----------------------------------------\n\nTITLE: Defining Class and Factory Function Components in TypeScript\nDESCRIPTION: This snippet demonstrates how to define class components and factory function components in TypeScript, explaining the concepts of element class type and element instance type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n  render() {}\n}\n\n// use a construct signature\nconst myComponent = new MyComponent();\n\n// element class type => MyComponent\n// element instance type => { render: () => void }\n\nfunction MyFactoryFunction() {\n  return {\n    render: () => {},\n  };\n}\n\n// use a call signature\nconst myComponent = MyFactoryFunction();\n\n// element class type => MyFactoryFunction\n// element instance type => { render: () => void }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Granular Checks for Branches in Return Expressions in TypeScript\nDESCRIPTION: This snippet shows how TypeScript 5.8 improves type checking for conditional expressions in return statements, catching potential bugs that were previously missed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const untypedCache: Map<any, any>;\n\nfunction getUrlObject(urlString: string): URL {\n    return untypedCache.has(urlString) ?\n        untypedCache.get(urlString) :\n        urlString;\n    //  ~~~~~~~~~\n    // error! Type 'string' is not assignable to type 'URL'.\n}\n```\n\n----------------------------------------\n\nTITLE: Decorator Factory Implementation\nDESCRIPTION: Implementation of a decorator factory that allows customization of the logging prefix.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggedMethod(headMessage = \"LOG:\") {\n    return function actualDecorator(originalMethod: any, context: ClassMethodDecoratorContext) {\n        const methodName = String(context.name);\n\n        function replacementMethod(this: any, ...args: any[]) {\n            console.log(`${headMessage} Entering method '${methodName}'.`)\n            const result = originalMethod.call(this, ...args);\n            console.log(`${headMessage} Exiting method '${methodName}'.`)\n            return result;\n        }\n\n        return replacementMethod;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ES7 Exponentiation Operator in TypeScript\nDESCRIPTION: Demonstrates the use of the ES7 exponentiation operator (**) and its assignment form (**=) in TypeScript, which are transformed to Math.pow calls in ES3/ES5 output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.7.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar x = 2 ** 3;\nvar y = 10;\ny **= 2;\nvar z = -(4 ** 3);\n```\n\n----------------------------------------\n\nTITLE: Type Consistency in Index Signatures\nDESCRIPTION: Shows error case when numeric and string indexers return incompatible types. Demonstrates type hierarchy requirements for different index signatures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  breed: string;\n}\n\ninterface NotOkay {\n  [x: number]: Animal;\n  [x: string]: Dog;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Argument Compatibility in TypeScript\nDESCRIPTION: This snippet demonstrates how function argument checking works with structural typing, allowing an object with extra properties to be passed as an argument.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Pet {\n  name: string;\n}\n\nlet dog = { name: \"Lassie\", owner: \"Rudd Weatherwax\" };\n\nfunction greet(pet: Pet) {\n  console.log(\"Hello, \" + pet.name);\n}\ngreet(dog); // OK\n```\n\n----------------------------------------\n\nTITLE: Failed TypeScript Import Without allowJs\nDESCRIPTION: Demonstration of an error when attempting to import JavaScript file without enabling allowJs option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowJs.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Aliases in TypeScript Declaration Files\nDESCRIPTION: Syntax for creating a type alias that combines multiple types with a union, and a function that accepts that type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype GreetingLike = string | (() => string) | MyGreeter;\n\ndeclare function greet(g: GreetingLike): void;\n```\n\n----------------------------------------\n\nTITLE: Potential Implementation with Optional Callback Parameters\nDESCRIPTION: Illustrates how a function might implement a callback with an optional parameter by choosing not to provide the optional value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    // I don't feel like providing the index today\n    callback(arr[i]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertions with Union Types in TypeScript\nDESCRIPTION: This snippet shows how to use type assertions to access properties of union types. It demonstrates casting the pet variable to specific types (Fish or Bird) to access their respective methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\n\nlet pet = getSmallPet();\nlet fishPet = pet as Fish;\nlet birdPet = pet as Bird;\n\nif (fishPet.swim) {\n  fishPet.swim();\n} else if (birdPet.fly) {\n  birdPet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Children Type Checking in TypeScript JSX\nDESCRIPTION: This snippet demonstrates how to perform type checking on children in TypeScript JSX using the JSX.ElementChildrenAttribute interface and custom props types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare namespace JSX {\n  interface ElementChildrenAttribute {\n    children: {}; // specify children name to use\n  }\n}\n\n<div>\n  <h1>Hello</h1>\n</div>;\n\n<div>\n  <h1>Hello</h1>\n  World\n</div>;\n\nconst CustomComp = (props) => <div>{props.children}</div>\n<CustomComp>\n  <div>Hello World</div>\n  {\"This is just a JS expression...\" + 1000}\n</CustomComp>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structural Typing in TypeScript\nDESCRIPTION: Shows how TypeScript's structural type system works by focusing on the shape of objects rather than their explicit type declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction logPoint(p: Point) {\n  console.log(`${p.x}, ${p.y}`);\n}\n\n// logs \"12, 26\"\nconst point = { x: 12, y: 26 };\nlogPoint(point);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class Decorator in TypeScript\nDESCRIPTION: Implementation of a class decorator in TypeScript that seals both the constructor and its prototype, preventing modifications to the class structure at runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@sealed\nclass BugReport {\n  type = \"report\";\n  title: string;\n\n  constructor(t: string) {\n    this.title = t;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorator Metadata in TypeScript\nDESCRIPTION: Example showing how to use decorator metadata to track decorated class members and their metadata information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Context {\n    name: string;\n    metadata: Record<PropertyKey, unknown>;\n}\n\nfunction setMetadata(_target: any, context: Context) {\n    context.metadata[context.name] = true;\n}\n\nclass SomeClass {\n    @setMetadata\n    foo = 123;\n\n    @setMetadata\n    accessor bar = \"hello!\";\n\n    @setMetadata\n    baz() { }\n}\n```\n\n----------------------------------------\n\nTITLE: React State Hook Reference\nDESCRIPTION: Example showing TypeScript's ability to model React's useState pattern. This is referenced in the documentation but not shown in actual code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/React.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseState\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter/Setter with Separate Types in Object Literal\nDESCRIPTION: Shows how to use separate read/write types for properties in an object literal returned by a function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeThing(): Thing {\n  let size = 0;\n  return {\n    get size(): number {\n      return size;\n    },\n    set size(value: string | number | boolean) {\n      let num = Number(value);\n\n      // Don't allow NaN and stuff.\n      if (!Number.isFinite(num)) {\n        size = 0;\n        return;\n      }\n\n      size = num;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON files without resolveJsonModule (error scenario)\nDESCRIPTION: Demonstrates attempting to import a JSON file in TypeScript without enabling resolveJsonModule, which results in an error. The code shows the default behavior where TypeScript cannot resolve the .json extension.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/resolveJsonModule.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n```\n\n----------------------------------------\n\nTITLE: Generic JSX Component Implementation\nDESCRIPTION: Demonstrates the new support for generic type arguments in JSX elements in TypeScript 2.9.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass GenericComponent<P> extends React.Component<P> {\n  internalProp: P;\n}\n\ntype Props = { a: number; b: string };\n\nconst x = <GenericComponent<Props> a={10} b=\"hi\" />; // OK\n\nconst y = <GenericComponent<Props> a={10} b={20} />; // Error\n```\n\n----------------------------------------\n\nTITLE: Advanced Class Usage with Static Members\nDESCRIPTION: Demonstrates advanced usage of classes including static members and type manipulation. Shows how to work with class types and instances.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  static standardGreeting = \"Hello, there\";\n  greeting: string;\n  greet() {\n    if (this.greeting) {\n      return \"Hello, \" + this.greeting;\n    } else {\n      return Greeter.standardGreeting;\n    }\n  }\n}\n\nlet greeter1: Greeter;\ngreeter1 = new Greeter();\nconsole.log(greeter1.greet());\n\nlet greeterMaker: typeof Greeter = Greeter;\ngreeterMaker.standardGreeting = \"Hey there!\";\n\nlet greeter2: Greeter = new greeterMaker();\nconsole.log(greeter2.greet());\n\nlet greeter3: Greeter;\ngreeter3 = new Greeter();\nconsole.log(greeter3.greet());\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Generic Array Functions in TypeScript\nDESCRIPTION: This example demonstrates an alternative way to write generic functions working with arrays using Array<T> syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<T>(arg: Array<T>): Array<T> {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Improved 'in' Operator Narrowing in TypeScript 4.9\nDESCRIPTION: This example demonstrates how TypeScript 4.9 improves type narrowing with the 'in' operator for properties that are not explicitly listed in the type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Context {\n    packageJSON: unknown;\n}\n\nfunction tryGetPackageName(context: Context): string | undefined {\n    const packageJSON = context.packageJSON;\n    // Check to see if we have an object.\n    if (packageJSON && typeof packageJSON === \"object\") {\n        // Check to see if it has a string name property.\n        if (\"name\" in packageJSON && typeof packageJSON.name === \"string\") {\n            // Just works!\n            return packageJSON.name;\n        }\n    }\n\n    return undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interface Objects in TypeScript\nDESCRIPTION: Example of passing an object literal that conforms to an interface shape with required and optional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngreet({\n  greeting: \"hello world\",\n  duration: 4000\n});\n```\n\n----------------------------------------\n\nTITLE: Exact Optional Property Types Example\nDESCRIPTION: Demonstrates the exactOptionalPropertyTypes flag behavior which enforces strict interpretation of optional properties without implicit undefined union.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  name: string;\n  age?: number;\n}\n\nconst p: Person = {\n  name: \"Daniel\",\n  age: undefined, // Error! undefined isn't a number\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Const Assertions in TypeScript\nDESCRIPTION: Demonstrates basic usage of const assertions with different types of literals, showing how they affect type inference for strings, arrays, and objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Type '\"hello\"'\nlet x = \"hello\" as const;\n\n// Type 'readonly [10, 20]'\nlet y = [10, 20] as const;\n\n// Type '{ readonly text: \"hello\" }'\nlet z = { text: \"hello\" } as const;\n```\n\n----------------------------------------\n\nTITLE: Using ES2017 String Library Reference in TypeScript\nDESCRIPTION: Demonstrates how to use the triple-slash reference directive to include the ES2017 string library, enabling the use of string methods like padStart.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference lib=\"es2017.string\" />\n\n\"foo\".padStart(4);\n```\n\n----------------------------------------\n\nTITLE: Accessing CommonJS Default Exports in Node.js\nDESCRIPTION: Demonstrates how default exports from CommonJS modules are accessed in Node.js environment using the .default property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from \"pkg\";\npkg.default();\n```\n\n----------------------------------------\n\nTITLE: Declaring Namespaces for Type Organization in TypeScript\nDESCRIPTION: Syntax for using namespaces to organize related interface definitions, creating logical groupings of types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace GreetingLib {\n  interface LogOptions {\n    verbose?: boolean;\n  }\n  interface AlertOptions {\n    modal: boolean;\n    title?: string;\n    color?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Readonly Properties in TypeScript\nDESCRIPTION: Demonstrates how to declare and use readonly properties in interfaces and classes to prevent mutation after initialization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  readonly x: number;\n  readonly y: number;\n}\n\nvar p1: Point = { x: 10, y: 20 };\np1.x = 5; // Error, p1.x is read-only\n\nvar p2 = { x: 1, y: 1 };\nvar p3: Point = p2; // Ok, read-only alias for p2\np3.x = 5; // Error, p3.x is read-only\np2.x = 5; // Ok, but also changes p3.x because of aliasing\n```\n\n----------------------------------------\n\nTITLE: Illustrating Extra Properties Error in TypeScript\nDESCRIPTION: This example demonstrates an error when assigning an object with an extra property to a variable of a type that doesn't include that property. It shows how TypeScript handles excess property checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Understanding Errors.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = { m: number };\nconst a: A = { m: 10, n: \"\" };\n```\n\n----------------------------------------\n\nTITLE: Static Properties in TypeScript Classes\nDESCRIPTION: Shows implementation of static class members and their usage. Demonstrates how static properties are shared across all instances of a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Grid {\n  static origin = { x: 0, y: 0 };\n\n  calculateDistanceFromOrigin(point: { x: number; y: number }) {\n    let xDist = point.x - Grid.origin.x;\n    let yDist = point.y - Grid.origin.y;\n    return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n  }\n\n  constructor(public scale: number) {}\n}\n\nlet grid1 = new Grid(1.0);\nlet grid2 = new Grid(5.0);\n\nconsole.log(grid1.calculateDistanceFromOrigin({ x: 10, y: 10 }));\nconsole.log(grid2.calculateDistanceFromOrigin({ x: 10, y: 10 }));\n```\n\n----------------------------------------\n\nTITLE: Illustrating New Restrictions for Enums with Unknown Values in TypeScript 5.4\nDESCRIPTION: This example demonstrates new restrictions in TypeScript 5.4 for enum compatibility when one enum member doesn't have a statically known value. It shows that string enum members are only compatible with other string enums of the same value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace First {\n    export declare enum SomeEnum {\n        A,\n        B,\n    }\n}\n\nnamespace Second {\n    export declare enum SomeEnum {\n        A,\n        B = \"some known string\",\n    }\n}\n\nfunction foo(x: First.SomeEnum, y: Second.SomeEnum) {\n    // Both used to be compatible - no longer the case,\n    // TypeScript errors with something like:\n    //\n    //  One value of 'SomeEnum.B' is the string '\"some known string\"', and the other is assumed to be an unknown numeric value.\n    x = y;\n    y = x;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Import in TypeScript\nDESCRIPTION: Demonstrates the use of dynamic import expressions to asynchronously load a module. This feature allows for conditional and lazy loading of modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getZipFile(name: string, files: File[]): Promise<File> {\n  const zipUtil = await import(\"./utils/create-zip-file\");\n  const zipContents = await zipUtil.getContentAsBlob(files);\n  return new File(zipContents, name);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Type Interface\nDESCRIPTION: Demonstrates how to implement a function type interface with explicit parameter types and return type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet mySearch: SearchFunc;\n\nmySearch = function (source: string, subString: string): boolean {\n  let result = source.search(subString);\n  return result > -1;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Types in TypeScript\nDESCRIPTION: Demonstrates how to declare a boolean variable in TypeScript using type annotation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet isDone: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Constrained Mixin Classes in TypeScript\nDESCRIPTION: Shows how to create a mixin class that constrains the types it can mix into using a construct signature return type in the type parameter constraint.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.2.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  x: number;\n  y: number;\n}\n\nconst WithLocation = <T extends Constructor<Point>>(Base: T) =>\n  class extends Base {\n    getLocation(): [number, number] {\n      return [this.x, this.y];\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Importing from ES Module with Named and Default Exports\nDESCRIPTION: ES module import syntax with corresponding CommonJS transpiled output, showing how default and named imports are accessed from the required module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello, { A, B } from \"./module\";\nconsole.log(hello, A, B);\n\n// transpiles to:\n\nconst module_1 = require(\"./module\");\nconsole.log(module_1.default, module_1.A, module_1.B);\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring Assignment in TypeScript\nDESCRIPTION: This example demonstrates basic array destructuring, creating new variables from array elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet input = [1, 2];\nlet [first, second] = input;\nconsole.log(first); // outputs 1\nconsole.log(second); // outputs 2\n```\n\n----------------------------------------\n\nTITLE: Implementing the Disposable Interface in TypeScript\nDESCRIPTION: Creating a class that implements the Disposable interface by defining a method using Symbol.dispose. This encapsulates the cleanup logic within the resource class itself.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass TempFile implements Disposable {\n    #path: string;\n    #handle: number;\n\n    constructor(path: string) {\n        this.#path = path;\n        this.#handle = fs.openSync(path, \"w+\");\n    }\n\n    // other methods\n\n    [Symbol.dispose]() {\n        // Close the file and delete it.\n        fs.closeSync(this.#handle);\n        fs.unlinkSync(this.#path);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Values in ES Modules\nDESCRIPTION: An ES module exporting two constants and a default string value, demonstrating both named and default exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const A = {};\nexport const B = {};\nexport default \"Hello, world!\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Temporal Dead Zone with let in TypeScript\nDESCRIPTION: This snippet illustrates the temporal dead zone behavior of let declarations in TypeScript, where variables cannot be accessed before their declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\na++; // illegal to use 'a' before it's declared;\nlet a;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  // okay to capture 'a'\n  return a;\n}\n\n// illegal call 'foo' before 'a' is declared\n// runtimes should throw an error here\nfoo();\n\nlet a;\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Return Types in TypeScript\nDESCRIPTION: Illustrates the proper way to define return types for callbacks in TypeScript, using 'void' instead of 'any' when the return value is ignored.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\nfunction fn(x: () => any) {\n  x();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\nfunction fn(x: () => void) {\n  x();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(x: () => void) {\n  var k = x(); // oops! meant to do something else\n  k.doSomething(); // error, but would be OK if the return type had been 'any'\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Symbol-based Control-Flow Analysis in TypeScript\nDESCRIPTION: TypeScript code showing improved control-flow analysis for bracketed element access with symbols. The compiler can now correctly narrow types when accessing properties using symbol keys.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst key = Symbol();\n\nconst numberOrString = Math.random() < 0.5 ? 42 : \"hello\";\n\nconst obj = {\n    [key]: numberOrString,\n};\n\nif (typeof obj[key] === \"string\") {\n    let str = obj[key].toUpperCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Record Type Usage in TypeScript\nDESCRIPTION: Shows how to use Record to create an object type with specific key types and value types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype CatName = \"miffy\" | \"boris\" | \"mordred\";\n\ninterface CatInfo {\n  age: number;\n  breed: string;\n}\n\nconst cats: Record<CatName, CatInfo> = {\n  miffy: { age: 10, breed: \"Persian\" },\n  boris: { age: 5, breed: \"Maine Coon\" },\n  mordred: { age: 16, breed: \"British Shorthair\" },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Type Guards with Type Predicates in TypeScript\nDESCRIPTION: This snippet introduces user-defined type guards using type predicates. It defines an 'isFish' function that acts as a type guard, allowing TypeScript to narrow the type within conditional blocks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\n\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nlet pet = getSmallPet();\n\nif (isFish(pet)) {\n  pet.swim();\n} else {\n  pet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Only Import Conflicts in TypeScript\nDESCRIPTION: Demonstrates new error handling for conflicts between type-only imports and local values when using isolatedModules, and shows how to resolve these conflicts.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Something } from \"./some/path\";\n\nlet Something = 123;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Something } from \"./some/path\";\n\n// or\n\nimport { type Something } from \"./some/path\";\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Decorators on Multiple Lines in TypeScript\nDESCRIPTION: Example of applying multiple decorators to a single declaration in TypeScript across multiple lines, showing decorator composition syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@f\n@g\nx\n```\n\n----------------------------------------\n\nTITLE: Import Types Example\nDESCRIPTION: Demonstrates how to use import types to access module types without importing the module in TypeScript 2.9.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// module.d.ts\n\nexport declare class Pet {\n  name: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// global-script.ts\n\nfunction adopt(p: import(\"./module\").Pet) {\n  console.log(`Adopting ${p.name}...`);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// a.js\n\n/**\n * @param p { import(\"./module\").Pet }\n */\nfunction walk(p) {\n  console.log(`Walking ${p.name}...`);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Detection in Promise Initialization\nDESCRIPTION: Shows how TypeScript 2.4's improved type inference can catch errors in Promise initialization, enhancing type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet x: Promise<string> = new Promise(resolve => {\n  resolve(10);\n  //      ~~ Error!\n});\n```\n\n----------------------------------------\n\nTITLE: Any Type in TypeScript\nDESCRIPTION: Shows usage of the any type for opting out of type checking and working with dynamic values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getValue(key: string): any;\nconst str: string = getValue(\"myString\");\n```\n\n----------------------------------------\n\nTITLE: Class with Method and Prototype Extension in TypeScript\nDESCRIPTION: A TypeScript example showing a class with methods and a prototype extension that has implicit 'this' typing issues. This demonstrates a common pattern that can cause errors with strict 'this' checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nclass Point {\n  constructor(public x, public y) {}\n  getDistance(p: Point) {\n    let dx = p.x - this.x;\n    let dy = p.y - this.y;\n    return Math.sqrt(dx ** 2 + dy ** 2);\n  }\n}\n// ...\n\n// Reopen the interface.\ninterface Point {\n  distanceFromOrigin(): number;\n}\nPoint.prototype.distanceFromOrigin = function () {\n  return this.getDistance({ x: 0, y: 0 });\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Spread in TypeScript\nDESCRIPTION: This snippet shows how to use the spread operator to combine arrays in TypeScript. It creates a new array 'bothPlus' by spreading elements from 'first' and 'second' arrays, along with additional values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nlet first = [1, 2];\nlet second = [3, 4];\nlet bothPlus = [0, ...first, ...second, 5];\n```\n\n----------------------------------------\n\nTITLE: Using Variance Annotations in TypeScript 4.7\nDESCRIPTION: Demonstrates the use of out and in modifiers to explicitly specify variance on type parameters for Getter and Setter types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Getter<out T> = () => T;\n\ntype Setter<in T> = (value: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Interface Extension Example\nDESCRIPTION: Shows how to extend interfaces to create new interfaces with additional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Shape {\n  color: string;\n}\n\ninterface Square extends Shape {\n  sideLength: number;\n}\n\nlet square = {} as Square;\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n----------------------------------------\n\nTITLE: Defining Format Decorator and GetFormat Function in TypeScript\nDESCRIPTION: This snippet shows the implementation of the '@format' decorator and 'getFormat' function. It uses the reflect-metadata library to add and retrieve metadata for the decorated property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"reflect-metadata\";\n\nconst formatMetadataKey = Symbol(\"format\");\n\nfunction format(formatString: string) {\n  return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Object Destructuring Declaration in TypeScript\nDESCRIPTION: Demonstrates object destructuring syntax for declaring variables from object properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvar { x, y, z } = getSomeObject();\n```\n\n----------------------------------------\n\nTITLE: Discriminated Unions in TypeScript\nDESCRIPTION: Shows how to define and use discriminated unions with shape types as an example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype Shape =\n  | { kind: \"circle\"; radius: number }\n  | { kind: \"square\"; x: number }\n  | { kind: \"triangle\"; x: number; y: number };\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Files with .ts Extension in Node.js\nDESCRIPTION: This code demonstrates how to import a TypeScript file with the .ts extension when using Node.js experimental support for running TypeScript files directly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\n\nimport * as foo from \"./foo.ts\"; // <- we need foo.ts here, not foo.js\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Type Syntax in TypeScript\nDESCRIPTION: The fundamental syntax for conditional types in TypeScript, where a type is selected based on whether T is assignable to U.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nT extends U ? X : Y\n```\n\n----------------------------------------\n\nTITLE: Example of Browser Import Maps with TypeScript\nDESCRIPTION: An example showing how to use HTML import maps with TypeScript to map bare specifiers to URLs in the browser while resolving types locally.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"lodash\": \"https://esm.sh/lodash@4.17.21\"\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Downleveled for/of Loop With downlevelIteration\nDESCRIPTION: Demonstrates how TypeScript transpiles a for/of loop when the downlevelIteration flag is enabled, using a helper function to check for Symbol.iterator implementation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @target: ES5\n// @downlevelIteration\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error for NaN Equality Comparisons\nDESCRIPTION: Example showing how TypeScript 4.9 now issues an error when directly comparing against NaN, suggesting using Number.isNaN instead.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction validate(someValue: number) {\n    return someValue !== NaN;\n    //     ~~~~~~~~~~~~~~~~~\n    // error: This condition will always return 'true'.\n    //        Did you mean '!Number.isNaN(someValue)'?\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Interface for Type Checking an Object in TypeScript\nDESCRIPTION: Shows how to declare that an object conforms to an interface shape using the type annotation syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user: User = {\n  name: \"Hayes\",\n  id: 0,\n};\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing Examples\nDESCRIPTION: Shows improved type narrowing behavior for union types and unknown types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction narrowUnknownishUnion(x: {} | null | undefined) {\n    if (x) {\n        x;  // {}\n    }\n    else {\n        x;  // {} | null | undefined\n    }\n}\n\nfunction narrowUnknown(x: unknown) {\n    if (x) {\n        x;  // used to be 'unknown', now '{}'\n    }\n    else {\n        x;  // unknown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Over Arbitrary Unions in TypeScript\nDESCRIPTION: Demonstrates how to use mapped types with unions of complex types, not just primitive key types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype EventConfig<Events extends { kind: string }> = {\n    [E in Events as E[\"kind\"]]: (event: E) => void;\n}\n\ntype SquareEvent = { kind: \"square\", x: number, y: number };\ntype CircleEvent = { kind: \"circle\", radius: number };\n\ntype Config = EventConfig<SquareEvent | CircleEvent>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rest Parameters with Tuple Types in TypeScript\nDESCRIPTION: Shows how tuple types are expanded into discrete parameters in function declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(...args: [number, string, boolean]): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(args_0: number, args_1: string, args_2: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Using Unknown Type in Catch Variables\nDESCRIPTION: Demonstrates the behavior of catch clause variables with the useUnknownInCatchVariables flag, which changes the default type from any to unknown for better type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  executeSomeThirdPartyCode();\n} catch (err) {\n  // err: unknown\n\n  // Error! Property 'message' does not exist on type 'unknown'.\n  console.error(err.message);\n\n  // Works! We can narrow 'err' from 'unknown' to 'Error'.\n  if (err instanceof Error) {\n    console.error(err.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js CJS/ESM Interop Example\nDESCRIPTION: Demonstrates CommonJS to ES Module interoperability in Node.js environment.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: export.cjs\nmodule.exports = { hello: \"world\" };\n\n// @Filename: import.mjs\nimport greeting from \"./export.cjs\";\ngreeting.hello; // \"world\"\n```\n\n----------------------------------------\n\nTITLE: Defining callback interfaces with 'this' parameters\nDESCRIPTION: This code shows how library authors can annotate callback types with 'this' parameters. By specifying 'this: void' in the callback signature, the library indicates that the callback function should not rely on any specific 'this' context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UIElement {\n  addClickListener(onclick: (this: void, e: Event) => void): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to TypeScript Functions\nDESCRIPTION: This snippet illustrates how to add type annotations to function parameters and return values in TypeScript for both named and anonymous functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\nlet myAdd = function (x: number, y: number): number {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: This-Based Type Guards - TypeScript\nDESCRIPTION: Demonstrates the use of this-based type guards in class methods for type narrowing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileSystemObject {\n  isFile(): this is File {\n    return this instanceof File;\n  }\n  isDirectory(): this is Directory {\n    return this instanceof Directory;\n  }\n  isNetworked(): this is Networked & this {\n    return this.networked;\n  }\n  constructor(public path: string, private networked: boolean) {}\n}\n\nclass File extends FileSystemObject {\n  constructor(path: string, public content: string) {\n    super(path, false);\n  }\n}\nclass Directory extends FileSystemObject {\n  children: FileSystemObject[];\n}\ninterface Networked {\n  host: string;\n}\n\nlet fso: FileSystemObject = new File(\"foo/bar.txt\", \"foo\");\nif (fso.isFile()) {\n  fso.content; // fso is File\n} else if (fso.isDirectory()) {\n  fso.children; // fso is Directory\n} else if (fso.isNetworked()) {\n  fso.host; // fso is networked\n}\n```\n\n----------------------------------------\n\nTITLE: Static Blocks in Classes\nDESCRIPTION: Showcases the new static blocks feature in classes that allows complex initialization of static members with proper scoping and access to private fields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    static count = 0;\n\n    // This is a static block:\n    static {\n        if (someCondition()) {\n            Foo.count++;\n        }\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    static #count = 0;\n\n    get count() {\n        return Foo.#count;\n    }\n\n    static {\n        try {\n            const lastInstances = loadLastInstances();\n            Foo.#count += lastInstances.length;\n        }\n        catch {}\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    static prop = 1\n    static {\n        console.log(Foo.prop++);\n    }\n    static {\n        console.log(Foo.prop++);\n    }\n    static {\n        console.log(Foo.prop++);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Parameters as Constraints in TypeScript\nDESCRIPTION: This snippet shows how to use type parameters as constraints in TypeScript 1.8, implementing F-Bounded Polymorphism. It defines an assign function that extends one object with properties from another.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assign<T extends U, U>(target: T, source: U): T {\n  for (let id in source) {\n    target[id] = source[id];\n  }\n  return target;\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\nassign(x, { b: 10, d: 20 });\nassign(x, { e: 0 }); // Error\n```\n\n----------------------------------------\n\nTITLE: Type Guards with Union Types\nDESCRIPTION: Shows how to use type guards to work with variables of union types safely.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction formatCommandline(c: string | string[]) {\n  if (typeof c === \"string\") {\n    return c.trim();\n  } else {\n    return c.join(\" \");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Attributes in TypeScript\nDESCRIPTION: Demonstrates the usage of import attributes to specify module format information using the 'with' keyword. Shows both static imports and dynamic import() calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// We only want this to be interpreted as JSON,\n// not a runnable/malicious JavaScript file with a `.json` extension.\nimport obj from \"./something.json\" with { type: \"json\" };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript is fine with this.\n// But your browser? Probably not.\nimport * as foo from \"./foo.js\" with { type: \"fluffy bunny\" };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = await import(\"./something.json\", {\n    with: { type: \"json\" }\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript for..of Loop and ES5 Transpilation Example\nDESCRIPTION: Shows a for..of loop in TypeScript and the resulting JavaScript code when targeting ES5. The compiler transforms the for..of loop into a traditional for loop with an index variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Iterators and Generators.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet numbers = [1, 2, 3];\nfor (let num of numbers) {\n  console.log(num);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar numbers = [1, 2, 3];\nfor (var _i = 0; _i < numbers.length; _i++) {\n  var num = numbers[_i];\n  console.log(num);\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Types Basic Usage in TypeScript\nDESCRIPTION: Demonstrates how strictNullChecks affects type checking with null and undefined values in TypeScript. Shows type checking behavior with and without explicit null unions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet exampleString = \"foo\";\nexampleString = null;\n\nlet stringOrNull: string | null = \"bar\";\nstringOrNull = null;\n\nstringOrNull = undefined;\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup with Conditional Paths in TypeScript\nDESCRIPTION: An example showing how manual resource cleanup becomes more complex when dealing with early returns and conditional logic, leading to code duplication and potential errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function doSomeWork() {\n    const path = \".some_temp_file\";\n    const file = fs.openSync(path, \"w+\");\n\n    // use file...\n    if (someCondition()) {\n        // do some more work...\n\n        // Close the file and delete it.\n        fs.closeSync(file);\n        fs.unlinkSync(path);\n        return;\n    }\n\n    // Close the file and delete it.\n    fs.closeSync(file);\n    fs.unlinkSync(path);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Accessor Overwriting with useDefineForClassFields\nDESCRIPTION: This snippet illustrates how the useDefineForClassFields flag can cause set accessors from base classes to be overwritten in derived classes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n  set data(value: string) {\n    console.log(\"data changed to \" + value);\n  }\n}\n\nclass Derived extends Base {\n  // No longer triggers a 'console.log'\n  // when using 'useDefineForClassFields'.\n  data = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import with Import Maps\nDESCRIPTION: Example of a TypeScript import that resolves differently in the browser (via import maps) and in TypeScript (via node_modules).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {} from \"lodash\";\n// Browser: https://esm.sh/lodash@4.17.21\n// TypeScript: ./node_modules/@types/lodash/index.d.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Strict Mode in tsconfig.json\nDESCRIPTION: Example of enabling strict mode in TypeScript configuration file. This setting enables all strict type checking options including noImplicitAny and strictNullChecks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"strict\": true\n```\n\n----------------------------------------\n\nTITLE: Combined Type and Value Export\nDESCRIPTION: Example of using the same name for both a type and value export.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport var Bar: { a: Bar };\nexport interface Bar {\n  count: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Property Getter\nDESCRIPTION: Generic function demonstrating type-safe property access using index types and the keyof operator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n  return o[propertyName];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with files property in tsconfig.json\nDESCRIPTION: A basic tsconfig.json configuration using the files property to explicitly list all TypeScript files to be included in compilation. It specifies compiler options like module system, strict typing, and source map generation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/tsconfig.json.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"sourceMap\": true\n  },\n  \"files\": [\n    \"core.ts\",\n    \"sys.ts\",\n    \"types.ts\",\n    \"scanner.ts\",\n    \"parser.ts\",\n    \"utilities.ts\",\n    \"binder.ts\",\n    \"checker.ts\",\n    \"emitter.ts\",\n    \"program.ts\",\n    \"commandLineParser.ts\",\n    \"tsc.ts\",\n    \"diagnosticInformationMap.generated.ts\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Object Literal Type Syntax in TypeScript\nDESCRIPTION: Demonstrates how TypeScript's object literal type syntax mirrors the syntax of object literal values. The example shows a typed object with number and array properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet o: { n: number; xs: object[] } = { n: 1, xs: [] };\n```\n\n----------------------------------------\n\nTITLE: Empty Classes as Universal Supertypes in TypeScript\nDESCRIPTION: This example illustrates how empty classes in TypeScript become universal supertypes due to structural typing rules. Since an empty class has no members to satisfy, any value can be assigned to a variable of an empty class type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nclass Empty {}\n\nfunction fn(x: Empty) {\n  // can't do anything with 'x', so I won't\n}\n\n// All OK!\nfn(window);\nfn({});\nfn(fn);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating var Scoping Rules in TypeScript\nDESCRIPTION: This snippet illustrates the function-scoping behavior of var declarations in TypeScript. It shows how variables declared with var are accessible outside their containing block.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(shouldInitialize: boolean) {\n  if (shouldInitialize) {\n    var x = 10;\n  }\n\n  return x;\n}\n\nf(true); // returns '10'\nf(false); // returns 'undefined'\n```\n\n----------------------------------------\n\nTITLE: Document.createElement Type Definition\nDESCRIPTION: The TypeScript type definition for createElement, showing both overloads. The first uses generics to provide specific element types based on tag names, while the second accepts any string and returns a generic HTMLElement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];\ncreateElement(tagName: string, options?: ElementCreationOptions): HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Complex JSDoc to TypeScript Declaration Conversion\nDESCRIPTION: Demonstrates how TypeScript 3.7 converts more complex JSDoc-annotated JavaScript classes and types into corresponding TypeScript declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @callback Job\n * @returns {void}\n */\n\n/** Queues work */\nexport class Worker {\n  constructor(maxDepth = 10) {\n    this.started = false;\n    this.depthLimit = maxDepth;\n    /**\n     * NOTE: queued jobs may add more items to queue\n     * @type {Job[]}\n     */\n    this.queue = [];\n  }\n  /**\n   * Adds a work item to the queue\n   * @param {Job} work\n   */\n  push(work) {\n    if (this.queue.length + 1 > this.depthLimit) throw new Error(\"Queue full!\");\n    this.queue.push(work);\n  }\n  /**\n   * Starts the queue if it has not yet started\n   */\n  start() {\n    if (this.started) return false;\n    this.started = true;\n    while (this.queue.length) {\n      /** @type {Job} */ (this.queue.shift())();\n    }\n    return true;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @callback Job\n * @returns {void}\n */\n/** Queues work */\nexport class Worker {\n  constructor(maxDepth?: number);\n  started: boolean;\n  depthLimit: number;\n  /**\n   * NOTE: queued jobs may add more items to queue\n   * @type {Job[]}\n   */\n  queue: Job[];\n  /**\n   * Adds a work item to the queue\n   * @param {Job} work\n   */\n  push(work: Job): void;\n  /**\n   * Starts the queue if it has not yet started\n   */\n  start(): boolean;\n}\nexport type Job = () => void;\n```\n\n----------------------------------------\n\nTITLE: Combining Mapped Types with Conditional Types in TypeScript\nDESCRIPTION: Shows an advanced example of using mapped types with conditional types to extract information about properties in a type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExtractPII<Type> = {\n  [Property in keyof Type]: Type[Property] extends { pii: true } ? true : false;\n};\n\ntype DBFields = {\n  id: { format: \"incrementing\" };\n  name: { type: string; pii: true };\n};\n\ntype ObjectsNeedingGDPRDeletion = ExtractPII<DBFields>;\n```\n\n----------------------------------------\n\nTITLE: Creating and Interacting with a Virtual TypeScript Environment\nDESCRIPTION: Shows how to create a virtual TypeScript environment using the created system and interact with its language service. This setup allows for code introspection and analysis in a virtual context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem, createVirtualTypeScriptEnvironment } from \"@typescript/vfs\"\nimport ts from \"typescript\"\n\nconst fsMap = new Map<string, string>()\nconst system = createSystem(fsMap)\n\nconst compilerOpts = {}\nconst env = createVirtualTypeScriptEnvironment(system, [\"index.ts\"], ts, compilerOpts)\n\n// You can then interact with the languageService to introspect the code\nenv.languageService.getDocumentHighlights(\"index.ts\", 0, [\"index.ts\"])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'override' Error with Missing Base Method\nDESCRIPTION: Illustrates how TypeScript catches errors when using 'override' on a method that doesn't exist in the base class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeComponent {\n    setVisible(value: boolean) {\n        // ...\n    }\n}\nclass SpecializedComponent extends SomeComponent {\n    override show() {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Parameters with Null Checking in TypeScript\nDESCRIPTION: Shows how optional parameters automatically include undefined in their type with strictNullChecks enabled. Demonstrates valid and invalid parameter passing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x: number, y?: number) {\n  return x + (y ?? 0);\n}\n\nf(1, 2);\nf(1);\nf(1, undefined);\nf(1, null);\n```\n\n----------------------------------------\n\nTITLE: Module Import Examples\nDESCRIPTION: Example syntax for different module import approaches in TypeScript, showing the contrast between import and require statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { something } from 'module';\nrequire('module');\n```\n\n----------------------------------------\n\nTITLE: Using Primitive Types in TypeScript Declarations\nDESCRIPTION: Demonstrates the correct usage of primitive types (number, string, boolean, symbol) instead of their boxed object counterparts (Number, String, Boolean, Symbol) in TypeScript declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\nfunction reverse(s: String): String;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\nfunction reverse(s: string): string;\n```\n\n----------------------------------------\n\nTITLE: Property Renaming in Object Destructuring in TypeScript\nDESCRIPTION: This snippet shows how to rename properties when destructuring an object, assigning new variable names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlet { a: newName1, b: newName2 } = o;\n```\n\n----------------------------------------\n\nTITLE: Void Return Type Example\nDESCRIPTION: Demonstrates the void return type in TypeScript functions that don't return a value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nfunction noop() {\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interfaces with Classes in TypeScript\nDESCRIPTION: Demonstrates implementing an interface through a class with a constructor that initializes the required properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  name: string;\n  id: number;\n}\n\nclass UserAccount {\n  name: string;\n  id: number;\n\n  constructor(name: string, id: number) {\n    this.name = name;\n    this.id = id;\n  }\n}\n\nconst user: User = new UserAccount(\"Murphy\", 1);\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Function Types in TypeScript\nDESCRIPTION: This snippet shows how to define the type of a generic function and assign it to a variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nlet myIdentity: <T>(arg: T) => T = identity;\n```\n\n----------------------------------------\n\nTITLE: String Index Signature with Property Type Mismatch\nDESCRIPTION: Illustrates error case when property type doesn't match index signature return type in dictionary pattern.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberDictionary {\n  [index: string]: number;\n\n  length: number; // ok, length is a number\n  name: string; // error, the type of 'name' is not a subtype of the indexer\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling decorator metadata in TypeScript via command line\nDESCRIPTION: Command line options to enable experimental decorators and emit decorator metadata in TypeScript compilation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ntsc --target ES5 --experimentalDecorators --emitDecoratorMetadata\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in TypeScript Declaration Files\nDESCRIPTION: Shows how to declare dependencies on global libraries, modules, and UMD libraries in TypeScript declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"someLib\" />\n\nfunction getThing(): someLib.thing;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as moment from \"moment\";\n\nfunction getThing(): moment;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"moment\" />\n\nfunction getThing(): moment;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as someLib from \"someLib\";\n```\n\n----------------------------------------\n\nTITLE: Complete Module Augmentation Implementation\nDESCRIPTION: Shows a full implementation of module augmentation including type declarations, implementation, and consumer usage. Demonstrates how to properly declare and use augmented types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Declaration Merging.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// observable.ts\nexport class Observable<T> {\n  // ... implementation left as an exercise for the reader ...\n}\n\n// map.ts\nimport { Observable } from \"./observable\";\ndeclare module \"./observable\" {\n  interface Observable<T> {\n    map<U>(f: (x: T) => U): Observable<U>;\n  }\n}\nObservable.prototype.map = function (f) {\n  // ... another exercise for the reader\n};\n\n// consumer.ts\nimport { Observable } from \"./observable\";\nimport \"./map\";\nlet o: Observable<number>;\no.map((x) => x.toFixed());\n```\n\n----------------------------------------\n\nTITLE: Marking Destructured Variables as Unused in TypeScript\nDESCRIPTION: Demonstrates how to mark unused destructured variables with an underscore prefix to avoid TypeScript's noUnusedLocals error. This feature was introduced in TypeScript 4.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet [_first, second] = getValues();\n```\n\n----------------------------------------\n\nTITLE: Extending from TSConfig Bases in Node.js environment\nDESCRIPTION: A tsconfig.json configuration that extends from a base configuration for Node.js v12. This approach simplifies configuration by inheriting runtime-specific settings while allowing project-specific customizations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/tsconfig.json.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@tsconfig/node12/tsconfig.json\",\n\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true\n  },\n\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"**/*.spec.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Library Development\nDESCRIPTION: This code snippet shows recommended compiler options for TypeScript library development. It includes settings for module resolution, target ECMAScript version, strict type-checking, and declaration file generation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_6\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"node18\",\n    \"target\": \"es2020\", // set to the *lowest* target you support\n    \"strict\": true,\n    \"verbatimModuleSyntax\": true,\n    \"declaration\": true,\n    \"sourceMap\": true,\n    \"declarationMap\": true,\n    \"rootDir\": \"src\",\n    \"outDir\": \"dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Construct Signatures in TypeScript\nDESCRIPTION: Demonstrates how to use construct signatures to describe functions that can be invoked with the 'new' operator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype SomeConstructor = {\n  new (s: string): SomeObject;\n};\nfunction fn(ctor: SomeConstructor) {\n  return new ctor(\"hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Index Signatures in TypeScript\nDESCRIPTION: Demonstrates how to create readonly index signatures to prevent assignment to indices.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadonlyStringArray {\n  readonly [index: number]: string;\n}\n\nlet myArray: ReadonlyStringArray = [\"Alice\", \"Bob\"];\nmyArray[2] = \"Mallory\"; // error!\n```\n\n----------------------------------------\n\nTITLE: Using Symbols as Object Property Keys in TypeScript\nDESCRIPTION: Demonstrates how symbols can be used as keys for object properties using computed property syntax. This shows how to define and access symbol-keyed properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Symbols.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sym = Symbol();\n\nlet obj = {\n  [sym]: \"value\",\n};\n\nconsole.log(obj[sym]); // \"value\"\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Bivariance in TypeScript\nDESCRIPTION: This snippet demonstrates function parameter bivariance in TypeScript, showing how it allows for common JavaScript patterns but can lead to unsound behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum EventType {\n  Mouse,\n  Keyboard,\n}\n\ninterface Event {\n  timestamp: number;\n}\ninterface MyMouseEvent extends Event {\n  x: number;\n  y: number;\n}\ninterface MyKeyEvent extends Event {\n  keyCode: number;\n}\n\nfunction listenEvent(eventType: EventType, handler: (n: Event) => void) {\n  /* ... */\n}\n\n// Unsound, but useful and common\nlistenEvent(EventType.Mouse, (e: MyMouseEvent) => console.log(e.x + \",\" + e.y));\n\n// Undesirable alternatives in presence of soundness\nlistenEvent(EventType.Mouse, (e: Event) =>\n  console.log((e as MyMouseEvent).x + \",\" + (e as MyMouseEvent).y)\n);\nlistenEvent(EventType.Mouse, ((e: MyMouseEvent) =>\n  console.log(e.x + \",\" + e.y)) as (e: Event) => void);\n\n// Still disallowed (clear error). Type safety enforced for wholly incompatible types\nlistenEvent(EventType.Mouse, (e: number) => console.log(e));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the New JSDoc @import Tag in JavaScript\nDESCRIPTION: This snippet shows how to use the new @import JSDoc tag in TypeScript 5.5 to import types for use in JavaScript files without affecting runtime behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @import { SomeType } from \"some-module\" */\n\n/**\n * @param {SomeType} myValue\n */\nfunction doSomething(myValue) {\n    // ...\n}\n\n/** @import * as someModule from \"some-module\" */\n\n/**\n * @param {someModule.SomeType} myValue\n */\nfunction doSomething(myValue) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Types Compiler Option in TypeScript\nDESCRIPTION: The 'types' compiler option allows specifying type package names to be included without being referenced in a source file. This helps include type definitions that aren't automatically imported in the codebase.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<code><a href='/tsconfig/#types'>--types</a></code>\n```\n\n----------------------------------------\n\nTITLE: Using Function Overloads in TypeScript for Variable Arguments\nDESCRIPTION: A TypeScript implementation showing how to use function overloads to properly type a function that accepts variable arguments. This provides type safety while preserving the original function's behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nfunction myCoolFunction(f: (x: number) => void, nums: number[]): void;\nfunction myCoolFunction(f: (x: number) => void, ...nums: number[]): void;\nfunction myCoolFunction() {\n  if (arguments.length == 2 && !Array.isArray(arguments[1])) {\n    var f = arguments[0];\n    var arr = arguments[1];\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Union Type for Array of Different Animal Classes in TypeScript\nDESCRIPTION: Illustrates how TypeScript infers a union type for an array containing instances of different classes that extend a common base class. The inferred type is (Rhino | Elephant | Snake)[].\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {}\nclass Rhino extends Animal {\n  hasHorn: true;\n}\nclass Elephant extends Animal {\n  hasTrunk: true;\n}\nclass Snake extends Animal {\n  hasLegs: false;\n}\n\nlet zoo = [new Rhino(), new Elephant(), new Snake()];\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for String Literals\nDESCRIPTION: Demonstrates how to use explicit type annotations to maintain string literal types with mutable variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet s: \"left\" | \"right\" = \"right\";\npad(\"hi\", 10, s);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Resolution in Node.js ESM and CommonJS Files\nDESCRIPTION: This snippet illustrates how module resolution differs between ESM (.mts) and CommonJS (.cts) files in Node.js, showing various import and require statements and their resolution algorithms.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: module.mts\nimport x from \"./mod.js\";             // `import` algorithm due to file format (emitted as-written)\nimport(\"./mod.js\");                   // `import` algorithm due to syntax (emitted as-written)\ntype Mod = typeof import(\"./mod.js\"); // `import` algorithm due to file format\nimport mod = require(\"./mod\");        // `require` algorithm due to syntax (emitted as `require`)\n\n// @Filename: commonjs.cts\nimport x from \"./mod\";                // `require` algorithm due to file format (emitted as `require`)\nimport(\"./mod.js\");                   // `import` algorithm due to syntax (emitted as-written)\ntype Mod = typeof import(\"./mod\");    // `require` algorithm due to file format\nimport mod = require(\"./mod\");        // `require` algorithm due to syntax (emitted as `require`)\n```\n\n----------------------------------------\n\nTITLE: Rest Arguments Spread Syntax\nDESCRIPTION: Demonstrates using spread syntax to provide variable arguments from an array.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2);\n```\n\n----------------------------------------\n\nTITLE: TempFile Implementation with Disposable Interface in TypeScript\nDESCRIPTION: A complete implementation of a TempFile class that implements the Disposable interface, demonstrating how to encapsulate resource acquisition and cleanup in a reusable class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass TempFile implements Disposable {\n    #path: string;\n    #handle: number;\n\n    constructor(path: string) {\n        this.#path = path;\n        this.#handle = fs.openSync(path, \"w+\");\n    }\n\n    // other methods\n\n    [Symbol.dispose]() {\n        // Close the file and delete it.\n        fs.closeSync(this.#handle);\n        fs.unlinkSync(this.#path);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Static Index Signatures in TypeScript Classes\nDESCRIPTION: New in TypeScript 4.3, this example shows how to use static index signatures on a class. This allows adding dynamic properties to the class itself rather than to instances, with type checking for those properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  static hello = \"hello\";\n  static world = 1234;\n\n  static [propName: string]: string | number | undefined;\n}\n\n// Valid.\nFoo[\"whatever\"] = 42;\n\n// Has type 'string | number | undefined'\nlet x = Foo[\"something\"];\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Declaration Files with npm\nDESCRIPTION: Demonstrates how to install TypeScript declaration files using npm, with lodash as an example. This command downloads the type definitions that enable TypeScript's type checking for the lodash library.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Consumption.md#2025-04-20_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install --save-dev @types/lodash\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables in TypeScript Declaration Files\nDESCRIPTION: Syntax for declaring global variables with types and documentation in declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/** The number of widgets present */\ndeclare var foo: number;\n```\n\n----------------------------------------\n\nTITLE: Improved Promise.all Inference with Awaited Type\nDESCRIPTION: Demonstrates how the Awaited type improves type inference for Promise.all, allowing for better handling of potentially nested Promises.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function MaybePromise<T>(value: T): T | Promise<T> | PromiseLike<T>;\n\nasync function doSomething(): Promise<[number, number]> {\n  const result = await Promise.all([MaybePromise(100), MaybePromise(200)]);\n\n  // Error!\n  //\n  //    [number | Promise<100>, number | Promise<200>]\n  //\n  // is not assignable to type\n  //\n  //    [number, number]\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with preserve Option\nDESCRIPTION: Shows how the preserve option keeps JSX syntax unchanged in the output, resulting in .jsx files rather than .js files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: preserve\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Interfaces with Intersection Types in TypeScript 1.6\nDESCRIPTION: Shows how to combine multiple interfaces into a single type using intersection types in TypeScript 1.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface A {\n  a: string;\n}\ninterface B {\n  b: string;\n}\ninterface C {\n  c: string;\n}\n\nvar abc: A & B & C;\nabc.a = \"hello\";\nabc.b = \"hello\";\nabc.c = \"hello\";\n```\n\n----------------------------------------\n\nTITLE: Namespace Aliases in TypeScript\nDESCRIPTION: Example of creating aliases for namespaced types using import statements\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace Shapes {\n  export namespace Polygons {\n    export class Triangle {}\n    export class Square {}\n  }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n----------------------------------------\n\nTITLE: Enum Compatibility in TypeScript\nDESCRIPTION: This snippet shows how enums are compatible with numbers but enum values from different enum types are considered incompatible in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nenum Status {\n  Ready,\n  Waiting,\n}\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n\nlet status = Status.Ready;\nstatus = Color.Green; // Error\n```\n\n----------------------------------------\n\nTITLE: Type-only Field Declarations in TypeScript Classes\nDESCRIPTION: Shows how to use 'declare' keyword for type-only field declarations in derived classes to avoid runtime effects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  dateOfBirth: any;\n}\n\ninterface Dog extends Animal {\n  breed: any;\n}\n\nclass AnimalHouse {\n  resident: Animal;\n  constructor(animal: Animal) {\n    this.resident = animal;\n  }\n}\n\nclass DogHouse extends AnimalHouse {\n  // Does not emit JavaScript code,\n  // only ensures the types are correct\n  declare resident: Dog;\n  constructor(dog: Dog) {\n    super(dog);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Declaration with Aliases in TypeScript\nDESCRIPTION: Shows how to import module members with optional alias names using the new ES6 import syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { read, write, standardOutput as stdout } from \"./inout\";\nvar s = read(stdout);\nwrite(stdout, s);\n```\n\n----------------------------------------\n\nTITLE: Using 'satisfies' to Ensure Exact Key Matching in TypeScript\nDESCRIPTION: This snippet shows how the 'satisfies' operator can be used to ensure an object has exactly the keys specified in a type, catching any extra or mismatched keys.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Colors = \"red\" | \"green\" | \"blue\";\n\n// Ensure that we have exactly the keys from 'Colors'.\nconst favoriteColors = {\n    \"red\": \"yes\",\n    \"green\": false,\n    \"blue\": \"kinda\",\n    \"platypus\": false\n//  ~~~~~~~~~~ error - \"platypus\" was never listed in 'Colors'.\n} satisfies Record<Colors, unknown>;\n\n// All the information about the 'red', 'green', and 'blue' properties are retained.\nconst g: boolean = favoriteColors.green;\n```\n\n----------------------------------------\n\nTITLE: Creating Symbol Values in TypeScript\nDESCRIPTION: Demonstrates how to create Symbol values with and without a string key parameter. The Symbol constructor can be called with an optional string parameter that serves as a description for debugging purposes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Symbols.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet sym1 = Symbol();\n\nlet sym2 = Symbol(\"key\"); // optional string key\n```\n\n----------------------------------------\n\nTITLE: Iterator Helper Methods Example\nDESCRIPTION: Example demonstrating the new iterator helper methods in TypeScript 5.6, showing map and take operations on an infinite sequence.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* positiveIntegers() {\n    let i = 1;\n    while (true) {\n        yield i;\n        i++;\n    }\n}\n\nconst evenNumbers = positiveIntegers().map(x => x * 2);\n\n// Output:\n//    2\n//    4\n//    6\n//    8\n//   10\nfor (const value of evenNumbers.take(5)) {\n    console.log(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Type Declarations in TypeScript 1.6\nDESCRIPTION: Demonstrates how to use block-scoped local type declarations within function bodies in TypeScript 1.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  if (true) {\n    interface T {\n      x: number;\n    }\n    let v: T;\n    v.x = 5;\n  } else {\n    interface T {\n      x: string;\n    }\n    let v: T;\n    v.x = \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing 'this' Parameter from Function Type in TypeScript\nDESCRIPTION: Demonstrates the use of OmitThisParameter to create a new function type without the 'this' parameter. The example shows how to bind a function with a 'this' parameter to a specific value, creating a new function without 'this'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toHex(this: Number) {\n  return this.toString(16);\n}\n\nconst fiveToHex: OmitThisParameter<typeof toHex> = toHex.bind(5);\n\nconsole.log(fiveToHex());\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Invalid Property Access in TypeScript\nDESCRIPTION: Demonstrates TypeScript's error detection when attempting to access a property that doesn't exist on the target type. The compiler will generate an error for non-existent properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype I1 = Person[\"alve\"];\n```\n\n----------------------------------------\n\nTITLE: Improved Narrowing in Closures in TypeScript 5.4\nDESCRIPTION: This example demonstrates how TypeScript 5.4 improves type narrowing within closures, allowing the type of 'url' to be correctly inferred as URL after assignment.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getUrls(url: string | URL, names: string[]) {\n    if (typeof url === \"string\") {\n        url = new URL(url);\n    }\n\n    return names.map(name => {\n        url.searchParams.set(\"name\", name)\n        //  ~~~~~~~~~~~~\n        // error!\n        // Property 'searchParams' does not exist on type 'string | URL'.\n\n        return url.toString();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Function with Conditional Return Type Using Type Alias in TypeScript\nDESCRIPTION: Illustrates a function that returns either the input type or undefined, using a previously defined type alias. This example showcases how TypeScript handles union types with aliases.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type BasicPrimitive = number | string | boolean;\n\nexport function doStuff(value: BasicPrimitive) {\n  if (Math.random() < 0.5) {\n    return undefined;\n  }\n\n  return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Arrays in Generic Functions in TypeScript\nDESCRIPTION: This snippet shows how to properly use generics with arrays, allowing access to array-specific properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<T>(arg: T[]): T[] {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Rest Element in Array Destructuring in TypeScript\nDESCRIPTION: This example demonstrates the use of the rest syntax (...) to capture remaining elements in an array during destructuring.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet [first, ...rest] = [1, 2, 3, 4];\nconsole.log(first); // outputs 1\nconsole.log(rest); // outputs [ 2, 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Equivalent De-sugared Auto-Accessors in TypeScript\nDESCRIPTION: This snippet shows the equivalent implementation of auto-accessors using traditional getter and setter methods with a private property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    #__name: string;\n\n    get name() {\n        return this.#__name;\n    }\n    set name(value: string) {\n        this.#__name = value;\n    }\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Methods on Primitive Types in TypeScript\nDESCRIPTION: Shows how to access methods on primitive types in TypeScript, demonstrating both direct method access on a numeric literal (requiring parentheses) and the equivalent call through the Number prototype.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(1).toExponential();\n// equivalent to\nNumber.prototype.toExponential.call(1);\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in Callback Interfaces\nDESCRIPTION: Shows the correct approach to defining callback parameters in TypeScript interfaces, avoiding unnecessary optional parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\ninterface Fetcher {\n  getObject(done: (data: unknown, elapsedTime?: number) => void): void;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\ninterface Fetcher {\n  getObject(done: (data: unknown, elapsedTime: number) => void): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Incompatible Function Overload Signatures (Argument Error)\nDESCRIPTION: Demonstrates an error where the implementation signature of an overloaded function has incompatible argument types with the overload signatures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(x: boolean): void;\n// Argument type isn't right\nfunction fn(x: string): void;\nfunction fn(x: boolean) {}\n```\n\n----------------------------------------\n\nTITLE: CSS Import with Side Effect in React Component\nDESCRIPTION: Demonstrates importing a CSS file as a side effect in a React component, which is a common pattern in bundled web applications.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./button-component.css\";\n\nexport function Button() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with Explicit Type Annotations\nDESCRIPTION: This function demonstrates the use of explicit type annotations in TypeScript. It specifies that 'person' should be a string and 'date' should be a Date object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type-Only Imports with TypeScript Implementation File Extensions\nDESCRIPTION: Demonstrates how TypeScript 5.2 allows declaration and implementation file extensions (.ts, .mts, .cts, .tsx) in type-only import paths, regardless of allowImportingTsExtensions setting.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { JustAType } from \"./justTypes.ts\";\n\nexport function f(param: JustAType) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Uncalled Function Checks in Logical Expressions\nDESCRIPTION: This snippet shows how TypeScript 4.2 improves uncalled function checks within logical expressions, helping to catch potential errors when functions are referenced but not called.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shouldDisplayElement(element: Element) {\n  // ...\n  return true;\n}\n\nfunction getVisibleItems(elements: Element[]) {\n  return elements.filter((e) => shouldDisplayElement && e.children.length);\n  //                          ~~~~~~~~~~~~~~~~~~~~\n  // This condition will always return true since the function is always defined.\n  // Did you mean to call it instead.\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting 'use strict' directive in TypeScript-generated JavaScript\nDESCRIPTION: By default, TypeScript adds a 'use strict' directive at the top of emitted JavaScript files when targeting non-ES6 module outputs. This option allows disabling this behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitUseStrict.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Literal Types in TypeScript\nDESCRIPTION: This snippet illustrates the use of boolean literal types in TypeScript. It shows how they can be used to constrain object values and create more specific interface definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Literal Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ValidationSuccess {\n  isValid: true;\n  reason: null;\n}\n\ninterface ValidationFailure {\n  isValid: false;\n  reason: string;\n}\n\ntype ValidationResult = ValidationSuccess | ValidationFailure;\n```\n\n----------------------------------------\n\nTITLE: Template String Index Signatures\nDESCRIPTION: Shows how to use template string patterns in index signatures for HTTP headers with custom properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HeadersResponse {\n  \"content-type\": string,\n  date: string,\n  \"content-length\": string\n\n  // Permit any property starting with 'x-'.\n  [headerName: `x-${string}`]: string;\n}\n\nfunction handleResponse(r: HeadersResponse) {\n  const type = r[\"content-type\"]\n  const poweredBy = r[\"x-powered-by\"]\n\n  const origin = r.origin\n}\n```\n\n----------------------------------------\n\nTITLE: Error from Incomplete Abstract Class Implementation\nDESCRIPTION: Demonstrates the error that occurs when a derived class fails to implement all abstract members from its base class. TypeScript enforces that all abstract members must be implemented.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nclass Derived extends Base {\n  // forgot to do anything\n}\n```\n\n----------------------------------------\n\nTITLE: Class with Uninitialized Property (Error with strictPropertyInitialization)\nDESCRIPTION: Shows a class with a property that has no initializer, causing a TypeScript error when strictPropertyInitialization is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2564\nclass BadGreeter {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Computed Property Names in TypeScript 5.8\nDESCRIPTION: This snippet shows how TypeScript 5.8 handles computed property names in class declarations, preserving the property name in the emitted declaration file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport let propName = \"theAnswer\";\n\nexport class MyClass {\n    [propName] = 42;\n//  ~~~~~~~~~~\n// error!\n// A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type.\n}\n```\n\n----------------------------------------\n\nTITLE: Literal Function Definitions with Void Return Type in TypeScript\nDESCRIPTION: Shows the special case where a literal function definition with an explicit void return type must not return a value, causing TypeScript errors when attempting to do so.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f2(): void {\n  // @ts-expect-error\n  return true;\n}\n\nconst f3 = function (): void {\n  // @ts-expect-error\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for CommonJS Module\nDESCRIPTION: The TypeScript declaration file (.d.ts) equivalent for the CommonJS module that exports a function and constant, showing how to declare exported members with their types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getArrayLength(arr: any[]): number;\nexport const maxInterval: 12;\n```\n\n----------------------------------------\n\nTITLE: Type-checking Object.defineProperty declarations in JavaScript with TypeScript\nDESCRIPTION: This example demonstrates how TypeScript recognizes Object.defineProperty to provide type checking in JavaScript files with @ts-check. It shows error detection for both method name typos and attempts to modify read-only properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nlet obj = {};\nObject.defineProperty(obj, \"x\", { value: \"hello\", writable: false });\n\nobj.x.toLowercase();\n//    ~~~~~~~~~~~\n//    error:\n//     Property 'toLowercase' does not exist on type 'string'.\n//     Did you mean 'toLowerCase'?\n\nobj.x = \"world\";\n//  ~\n//  error:\n//   Cannot assign to 'x' because it is a read-only property.\n```\n\n----------------------------------------\n\nTITLE: Using Definite Assignment Assertion for Class Properties\nDESCRIPTION: Shows how to use the definite assignment assertion operator (!) to tell TypeScript that a property will be initialized even though the code doesn't explicitly show it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass OKGreeter {\n  // Not initialized, but no error\n  name!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Variables in TypeScript Functions\nDESCRIPTION: This example shows how TypeScript functions can capture variables from the outer scope, demonstrating closure behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet z = 100;\n\nfunction addToZ(x, y) {\n  return x + y + z;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async/Await in TypeScript for ES6 Targets\nDESCRIPTION: Demonstrates the use of async/await syntax in TypeScript for engines supporting ES6 generators. The example shows an asynchronous function that prints elements with a delay.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.7.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use strict\";\n\n// printDelayed is a 'Promise<void>'\nasync function printDelayed(elements: string[]) {\n  for (const element of elements) {\n    await delay(400);\n    console.log(element);\n  }\n}\n\nasync function delay(milliseconds: number) {\n  return new Promise<void>((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n}\n\nprintDelayed([\"Hello\", \"beautiful\", \"asynchronous\", \"world\"]).then(() => {\n  console.log();\n  console.log(\"Printed every element!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating children vs childNodes with HTML Elements\nDESCRIPTION: A code example showing the difference between the children and childNodes properties when working with HTML elements. Both properties return collections of child elements, but with different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<div>\n  <p>Hello, World</p>\n  <p>TypeScript!</p>\n</div>;\n\nconst div = document.getElementsByTagName(\"div\")[0];\n\ndiv.children;\n// HTMLCollection(2) [p, p]\n\ndiv.childNodes;\n// NodeList(2) [p, p]\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Using the 'as' Operator\nDESCRIPTION: Demonstrates the alternative type assertion syntax using the 'as' operator, which is compatible with both TS and TSX files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst foo = bar as Foo;\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Path Mapping for Single Module\nDESCRIPTION: Shows how to configure path mapping for a single module (jquery) to a local vendor directory. This allows using simple imports while resolving to a specific local path.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/paths.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"jquery\": [\"./vendor/jquery/dist/jquery\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Resolution in TypeScript\nDESCRIPTION: This snippet shows how different import statements are resolved in TypeScript when using the 'nodenext' module resolution strategy. It illustrates the differences between import and require statements for package-relative paths.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: module.mts\nimport \"pkg/dist/foo\";                // ❌ import, needs `.js` extension\nimport \"pkg/dist/foo.js\";             // ✅\nimport foo = require(\"pkg/dist/foo\"); // ✅ require, no extension needed\n```\n\n----------------------------------------\n\nTITLE: Using Type Inference with Generic Functions in TypeScript\nDESCRIPTION: This snippet shows how TypeScript can infer the type argument for generic functions based on the provided value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet output = identity(\"myString\");\n```\n\n----------------------------------------\n\nTITLE: Object Literal with Properties in TypeScript\nDESCRIPTION: A TypeScript solution for creating objects with properties, avoiding the sequential assignment pattern. This approach directly assigns all properties during object creation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nlet options = {\n  color: \"red\",\n  volume: 11,\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating noUnusedParameters Option in TypeScript\nDESCRIPTION: This code snippet shows how the 'noUnusedParameters' compiler option works in TypeScript. It defines a function with an unused parameter, which triggers an error when this option is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUnusedParameters.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noUnusedParameters\n// @errors: 6133\nconst createDefaultKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID: defaultModelID };\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Generic Type Variables in TypeScript\nDESCRIPTION: An example showing an error when trying to access a property that may not exist on a generic type. This demonstrates the type safety of generics that prevents operations on unknown types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<Type>(arg: Type): Type {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Object Rest Variables and Parameters\nDESCRIPTION: Demonstrates how TypeScript 3.2 allows destructuring a rest binding from a generic variable using predefined Pick and Exclude helper types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction excludeTag<T extends { tag: string }>(obj: T) {\n  let { tag, ...rest } = obj;\n  return rest; // Pick<T, Exclude<keyof T, \"tag\">>\n}\n\nconst taggedPoint = { x: 10, y: 20, tag: \"point\" };\nconst point = excludeTag(taggedPoint); // { x: number, y: number }\n```\n\n----------------------------------------\n\nTITLE: Basic String Literal Types Example in TypeScript\nDESCRIPTION: Demonstrates how string literal types can be used to model functions that expect specific string values, with built-in type-checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setVerticalAlignment(location: \"top\" | \"middle\" | \"bottom\") {\n  // ...\n}\n\nsetVerticalAlignment(\"middel\");\n```\n\n----------------------------------------\n\nTITLE: Using Imports within Ambient Module Declarations\nDESCRIPTION: Example showing how imports can be used inside ambient module declaration bodies without turning the containing file into a module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"m\" {\n  // Moving this outside \"m\" would totally change the meaning of the file!\n  import { SomeType } from \"other\";\n  export function f(): SomeType;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @implements in JavaScript Classes\nDESCRIPTION: This example shows how to use the @implements tag in JavaScript classes to indicate that a class implements a TypeScript interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/** @implements {Print} */\nclass TextBook {\n  print() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Error with Function Overload Implementation\nDESCRIPTION: Shows a common error where the implementation signature of an overloaded function is incorrectly expected to be callable from outside.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(x: string): void;\nfunction fn() {\n  // ...\n}\n// Expected to be able to call with zero arguments\nfn();\n```\n\n----------------------------------------\n\nTITLE: Applying a Mixin to Create a New Class in TypeScript\nDESCRIPTION: Demonstrates how to compose a new class by applying the Scale mixin to the Sprite base class. It shows creating an instance of the composed class, setting the scale property, and accessing it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Compose a new class from the Sprite class,\n// with the Mixin Scale applier:\nconst EightBitSprite = Scale(Sprite);\n\nconst flappySprite = new EightBitSprite(\"Bird\");\nflappySprite.setScale(0.8);\nconsole.log(flappySprite.scale);\n```\n\n----------------------------------------\n\nTITLE: Matching Pattern Types with Template Strings in TypeScript\nDESCRIPTION: Demonstrates compatibility checking between template string types. TypeScript can verify if one template string type pattern matches another.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let s1: `${number}-${number}-${number}`;\ndeclare let s2: `1-2-3`;\n\n// Works!\ns1 = s2;\n```\n\n----------------------------------------\n\nTITLE: Using ReadonlyArray Shorthand Syntax in TypeScript\nDESCRIPTION: Shows the shorthand syntax for ReadonlyArray<Type> using 'readonly Type[]'. The example demonstrates the same behavior as with ReadonlyArray - allowing read operations but blocking mutations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339\nfunction doStuff(values: readonly string[]) {\n  //                     ^^^^^^^^^^^^^^^^^\n  // We can read from 'values'...\n  const copy = values.slice();\n  console.log(`The first value is ${values[0]}`);\n\n  // ...but we can't mutate 'values'.\n  values.push(\"hello!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Contextual Typing\nDESCRIPTION: Shows how TypeScript handles recursive contextual typing through object literals and return type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function run<T>(thunk: (t: T) => void): T;\nlet i: { inference: string } = run((o) => {\n  o.inference = \"INSERT STATE HERE\";\n});\n```\n\n----------------------------------------\n\nTITLE: Defining strictBuiltinIteratorReturn Option in TypeScript Configuration\nDESCRIPTION: This snippet shows the configuration for the 'strictBuiltinIteratorReturn' option in TypeScript. When enabled, built-in iterators are instantiated with a TReturn type of undefined instead of any, providing more type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictBuiltinIteratorReturn.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"strictBuiltinIteratorReturn\"\noneline: \"Built-in iterators are instantiated with a TReturn type of undefined instead of any.\"\n---\n```\n\n----------------------------------------\n\nTITLE: String Literal Inference Problem with Request Methods\nDESCRIPTION: This example demonstrates how TypeScript infers a string type rather than a literal \"GET\" type for an object property, causing type errors when passed to a function expecting specific literal types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n\nconst req = { url: \"https://example.com\", method: \"GET\" };\nhandleRequest(req.url, req.method);\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Template Literal Types\nDESCRIPTION: Implements a type-safe event handling system using template literal types to create and validate event names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype PropEventSource<T> = {\n    on<K extends string & keyof T>\n        (eventName: `${K}Changed`, callback: (newValue: T[K]) => void ): void;\n};\n\ndeclare function makeWatchedObject<T>(obj: T): T & PropEventSource<T>;\n\nlet person = makeWatchedObject({\n    firstName: \"Homer\",\n    age: 42,\n    location: \"Springfield\",\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Capturing Quirks with setTimeout\nDESCRIPTION: This snippet illustrates a common gotcha with var declarations and closures, showing how all function expressions passed to setTimeout reference the same variable instance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfor (var i = 0; i < 10; i++) {\n  setTimeout(function () {\n    console.log(i);\n  }, 100 * i);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Decorator in TypeScript\nDESCRIPTION: This example demonstrates the use of a property decorator '@format' applied to the 'greeting' property of a Greeter class. It uses the decorator to add metadata to the property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  @format(\"Hello, %s\")\n  greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  greet() {\n    let formatString = getFormat(this, \"greeting\");\n    return formatString.replace(\"%s\", this.greeting);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum-like Patterns with Const Assertions\nDESCRIPTION: Shows how to create enum-like structures using const assertions in plain JavaScript code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Colors = {\n  red: \"RED\",\n  blue: \"BLUE\",\n  green: \"GREEN\",\n} as const;\n\n// or use an 'export default'\n\nexport default {\n  red: \"RED\",\n  blue: \"BLUE\",\n  green: \"GREEN\",\n} as const;\n```\n\n----------------------------------------\n\nTITLE: ConstructorParameters Support for Abstract Classes in TypeScript\nDESCRIPTION: Shows how TypeScript 4.3 enables the ConstructorParameters utility type to work with abstract classes, extracting the parameter types from the constructor signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class C {\n  constructor(a: string, b: number) {\n    // ...\n  }\n}\n\n// Has the type '[a: string, b: number]'.\ntype CParams = ConstructorParameters<typeof C>;\n```\n\n----------------------------------------\n\nTITLE: Improved Implicit any Error Detection for Functions Returning null in TypeScript\nDESCRIPTION: Shows how TypeScript 5.7 now correctly provides an implicit 'any' error under noImplicitAny when a function expression returns null in a promise chain without a proper return type annotation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var p: Promise<number>;\nconst p2 = p.catch(() => null);\n//                 ~~~~~~~~~~\n// error TS7011: Function expression, which lacks return-type annotation, implicitly has an 'any' return type.\n```\n\n----------------------------------------\n\nTITLE: Generic Spread Expressions in Object Literals\nDESCRIPTION: Demonstrates how object literals now allow generic spread expressions that produce intersection types, similar to Object.assign and JSX literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction taggedObject<T, U extends string>(obj: T, tag: U) {\n  return { ...obj, tag }; // T & { tag: U }\n}\n\nlet x = taggedObject({ x: 10, y: 20 }, \"point\"); // { x: number, y: number } & { tag: \"point\" }\n```\n\n----------------------------------------\n\nTITLE: Tuple Destructuring in TypeScript\nDESCRIPTION: This snippet shows how to destructure a tuple, assigning types to variables based on the tuple's structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet tuple: [number, string, boolean] = [7, \"hello\", true];\n\nlet [a, b, c] = tuple; // a: number, b: string, c: boolean\n```\n\n----------------------------------------\n\nTITLE: Importing a Module Using baseUrl in TypeScript\nDESCRIPTION: Example of importing a module using a bare specifier path that resolves based on the baseUrl configuration. Shows how TypeScript resolves paths relative to the tsconfig.json location.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/baseUrl.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { helloWorld } from \"hello/world\";\n\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating limitations of typeof type operator\nDESCRIPTION: Illustrates that TypeScript limits typeof to be used only on identifiers or their properties, preventing confusing code that appears to execute but doesn't.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 1005\ndeclare const msgbox: (prompt: string) => boolean;\n// type msgbox = any;\n// ---cut---\n// Meant to use = ReturnType<typeof msgbox>\nlet shouldContinue: typeof msgbox(\"Are you sure you want to continue?\");\n```\n\n----------------------------------------\n\nTITLE: @ts-expect-error Usage Examples\nDESCRIPTION: Shows correct and incorrect usage of the @ts-expect-error directive with TypeScript error suppression.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-expect-error\nconsole.log(47 * \"octopus\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-expect-error\nconsole.log(1 + 1);\n```\n\n----------------------------------------\n\nTITLE: Defining Enums with Computed Values\nDESCRIPTION: Shows how enum members can be initialized with dynamic values like function calls, which previously prevented TypeScript from using union enum types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n    Blah = Math.random()\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Types in TypeScript\nDESCRIPTION: Shows enum declaration and usage with automatic and manual number assignment.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red,\n  Green,\n  Blue,\n}\nlet c: Color = Color.Green;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red = 1,\n  Green,\n  Blue,\n}\nlet c: Color = Color.Green;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red = 1,\n  Green = 2,\n  Blue = 4,\n}\nlet c: Color = Color.Green;\n```\n\n----------------------------------------\n\nTITLE: Basic Class Example Without Accessors\nDESCRIPTION: Simple class implementation without getters and setters, showing direct property access.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Employee {\n  fullName: string;\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\n\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Null Checks in TypeScript\nDESCRIPTION: This snippet shows how strict null checking affects type assignments and comparisons in TypeScript 2.0. It illustrates the behavior of number, number | undefined, and number | null | undefined types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Compiled with --strictNullChecks\nlet x: number;\nlet y: number | undefined;\nlet z: number | null | undefined;\nx = 1; // Ok\ny = 1; // Ok\nz = 1; // Ok\nx = undefined; // Error\ny = undefined; // Ok\nz = undefined; // Ok\nx = null; // Error\ny = null; // Error\nz = null; // Ok\nx = y; // Error\nx = z; // Error\ny = x; // Ok\ny = z; // Error\nz = x; // Ok\nz = y; // Ok\n```\n\n----------------------------------------\n\nTITLE: Demonstrating strictNullChecks: false behavior in TypeScript\nDESCRIPTION: This snippet shows how TypeScript behaves when strictNullChecks is set to false. It allows potentially unsafe operations on values that might be null or undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictNullChecks.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictNullChecks: false\n// @target: ES2015\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n```\n\n----------------------------------------\n\nTITLE: Checked Import Attributes in TypeScript\nDESCRIPTION: Shows how import attributes are now checked against the global ImportAttributes type, allowing runtimes to more accurately describe import attributes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// In some global file.\ninterface ImportAttributes {\n    type: \"json\";\n}\n\n// In some other module\nimport * as ns from \"foo\" with { type: \"not-json\" };\n//                                     ~~~~~~~~~~\n// error!\n//\n// Type '{ type: \"not-json\"; }' is not assignable to type 'ImportAttributes'.\n//  Types of property 'type' are incompatible.\n//    Type '\"not-json\"' is not assignable to type '\"json\"'.\n```\n\n----------------------------------------\n\nTITLE: Using Property Modifiers in JavaScript Classes\nDESCRIPTION: This example shows how to use @public, @private, and @protected modifiers in JavaScript classes. It demonstrates access control for class properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2341\n// @ts-check\n\nclass Car {\n  constructor() {\n    /** @private */\n    this.identifier = 100;\n  }\n\n  printIdentifier() {\n    console.log(this.identifier);\n  }\n}\n\nconst c = new Car();\nconsole.log(c.identifier);\n```\n\n----------------------------------------\n\nTITLE: Using Import Type with Resolution Mode Assertions in TypeScript\nDESCRIPTION: Example demonstrating how to use import type with resolution-mode assertions to control how types are resolved. This allows referencing types from CommonJS modules in ECMAScript modules or vice versa.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\n// Resolve `pkg` as if we were importing with a `require()`\nimport type { TypeFromRequire } from \"pkg\" assert {\n    \"resolution-mode\": \"require\"\n};\n\n// Resolve `pkg` as if we were importing with an `import`\nimport type { TypeFromImport } from \"pkg\" assert {\n    \"resolution-mode\": \"import\"\n};\n\nexport interface MergedType extends TypeFromRequire, TypeFromImport {}\n```\n\n----------------------------------------\n\nTITLE: Higher Order Type Inference from Generic Constructors\nDESCRIPTION: Demonstrates TypeScript 3.5's ability to perform higher order type inference from generic constructors, improving type inference in complex scenarios.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.5.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box<T> {\n  kind: \"box\";\n  value: T;\n  constructor(value: T) {\n    this.value = value;\n  }\n}\n\nclass Bag<U> {\n  kind: \"bag\";\n  value: U;\n  constructor(value: U) {\n    this.value = value;\n  }\n}\n\nfunction composeCtor<T, U, V>(\n  F: new (x: T) => U,\n  G: new (y: U) => V\n): (x: T) => V {\n  return x => new G(new F(x));\n}\n\nlet f = composeCtor(Box, Bag); // has type '<T>(x: T) => Bag<Box<T>>'\nlet a = f(1024); // has type 'Bag<Box<number>>'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved Never-Initialized Variable Detection in TypeScript 5.7\nDESCRIPTION: This snippet shows how TypeScript 5.7 can now report errors when variables have never been initialized at all, even when accessed in a separate function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n    let result: number\n    \n    // do work, but forget to assign to 'result'\n\n    function printResult() {\n        console.log(result); // error: Variable 'result' is used before being assigned.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using import() Types for Type References\nDESCRIPTION: Example demonstrating import() type syntax to reference the type of a module or its exports without writing an import declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Access an exported type:\ntype WriteFileOptions = import(\"fs\").WriteFileOptions;\n// Access the type of an exported value:\ntype WriteFileFunction = typeof import(\"fs\").writeFile;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protected Modifier in TypeScript 1.3\nDESCRIPTION: This snippet shows how the new 'protected' modifier works in TypeScript 1.3. It demonstrates the visibility of protected members within subclasses and the error when trying to access them outside the class hierarchy.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.3.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Thing {\n  protected doSomething() {\n    /* ... */\n  }\n}\n\nclass MyThing extends Thing {\n  public myMethod() {\n    // OK, can access protected member from subclass\n    this.doSomething();\n  }\n}\nvar t = new MyThing();\nt.doSomething(); // Error, cannot call protected member from outside class\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Defined Type Guard Functions\nDESCRIPTION: Shows how to create and use custom type guard functions with the 'is' operator for type narrowing in conditional blocks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isCat(a: any): a is Cat {\n  return a.name === \"kitty\";\n}\n\nvar x: Cat | Dog;\nif (isCat(x)) {\n  x.meow(); // OK, x is Cat in this block\n}\n```\n\n----------------------------------------\n\nTITLE: Extending from Both Local and NPM TSConfig Files\nDESCRIPTION: Shows a practical example of extending from both a published npm configuration and a local base configuration simultaneously.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n// packages/front-end/src/tsconfig.json\n{\n    \"extends\": [\"@tsconfig/strictest/tsconfig.json\", \"../../../tsconfig.base.json\"],\n    \"compilerOptions\": {\n        \"outDir\": \"../lib\",\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @satisfies with Complex Objects in JSDoc\nDESCRIPTION: Shows how @satisfies in JSDoc can be used with more complex object structures while preserving precise type information for array operations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/**\n * @typedef CompilerOptions\n * @prop {boolean} [strict]\n * @prop {string} [outDir]\n */\n\n/**\n * @typedef ConfigSettings\n * @prop {CompilerOptions} [compilerOptions]\n * @prop {string | string[]} [extends]\n */\n\n\n/**\n * @satisfies {ConfigSettings}\n */\nlet myConfigSettings = {\n    compilerOptions: {\n        strict: true,\n        outDir: \"../lib\",\n    },\n    extends: [\n        \"@tsconfig/strictest/tsconfig.json\",\n        \"../../../tsconfig.base.json\"\n    ],\n};\n\nlet inheritedConfigs = myConfigSettings.extends.map(resolveConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting up Directory Structure for TypeScript Migration\nDESCRIPTION: Recommended directory structure for a JavaScript to TypeScript migration project, with source files in the src directory, output files in the built directory, and a tsconfig.json file at the root.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprojectRoot\n├── src\n│   ├── file1.js\n│   └── file2.js\n├── built\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Numeric Separators Example - TypeScript\nDESCRIPTION: Shows how to use numeric separators in TypeScript to make number literals more readable using the underscore character.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.7.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst million = 1_000_000;\nconst phone = 555_734_2231;\nconst bytes = 0xff_0c_00_ff;\nconst word = 0b1100_0011_1101_0001;\n```\n\n----------------------------------------\n\nTITLE: Optional Function Parameters in JavaScript\nDESCRIPTION: Illustrates how all function parameters in JavaScript files are considered optional by default, allowing calls with fewer arguments than declared parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// @checkJs\n// @strict: false\n// @errors: 7006 7006 2554\nfunction bar(a, b) {\n  console.log(a + \" \" + b);\n}\n\nbar(1); // OK, second argument considered optional\nbar(1, 2);\nbar(1, 2, 3); // Error, too many arguments\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} [somebody] - Somebody's name.\n */\nfunction sayHello(somebody) {\n  if (!somebody) {\n    somebody = \"John Doe\";\n  }\n  console.log(\"Hello \" + somebody);\n}\n\nsayHello();\n```\n\n----------------------------------------\n\nTITLE: Union Exhaustiveness Checking with Strict Null Checks in TypeScript\nDESCRIPTION: This example demonstrates how to use strictNullChecks and specify a return type to catch non-exhaustive unions in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype NetworkLoadingState = { state: \"loading\" };\ntype NetworkFailedState = { state: \"failed\"; code: number };\ntype NetworkSuccessState = { state: \"success\" };\ntype NetworkFromCachedState = { state: \"from_cache\" };\n\ntype NetworkState =\n  | NetworkLoadingState\n  | NetworkFailedState\n  | NetworkSuccessState\n  | NetworkFromCachedState;\n\n// ---cut---\nfunction logger(s: NetworkState): string {\n  switch (s.state) {\n    case \"loading\":\n      return \"loading request\";\n    case \"failed\":\n      return `failed with code ${s.code}`;\n    case \"success\":\n      return \"got response\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Leading Rest Elements in Tuple Types in TypeScript 4.2\nDESCRIPTION: Shows how to use rest elements at the beginning and middle of tuple types in TypeScript 4.2. This new feature allows for more flexible tuple type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo: [...string[], number];\n\nfoo = [123];\nfoo = [\"hello\", 123];\nfoo = [\"hello!\", \"hello!\", \"hello!\", 123];\n\nlet bar: [boolean, ...string[], boolean];\n\nbar = [true, false];\nbar = [true, \"some text\", false];\nbar = [true, \"some\", \"separated\", \"text\", false];\n```\n\n----------------------------------------\n\nTITLE: Creating Union Types in TypeScript\nDESCRIPTION: Shows how to define a boolean type using a union of literal types true and false.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyBool = true | false;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Literal Type Inference in Objects with TypeScript\nDESCRIPTION: This snippet shows how TypeScript infers the type 'number' instead of the literal '0' for a property, allowing it to be reassigned to another number value without type errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { counter: 0 };\nif (someCondition) {\n  obj.counter = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template String Types in TypeScript\nDESCRIPTION: Shows how to construct new string-like types by concatenating other string types using template strings. This example creates a union type that combines two simpler union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Color = \"red\" | \"blue\";\ntype Quantity = \"one\" | \"two\";\n\ntype SeussFish = `${Quantity | Color} fish`;\n// same as\n//   type SeussFish = \"one fish\" | \"two fish\"\n//                  | \"red fish\" | \"blue fish\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Ambient Modules in TypeScript\nDESCRIPTION: Shows how to declare an ambient module in a declaration file. This allows referencing external modules that don't have TypeScript definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces and Modules.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In a .d.ts file or .ts file that is not a module:\ndeclare module \"SomeModule\" {\n  export function fn(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Extra Properties in Structural Typing\nDESCRIPTION: Shows how objects with additional properties still match an interface as long as they contain all the required properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst point3 = { x: 12, y: 26, z: 89 };\nlogPoint(point3); // logs \"12, 26\"\n\nconst rect = { x: 33, y: 3, width: 30, height: 80 };\nlogPoint(rect); // logs \"33, 3\"\n\nconst color = { hex: \"#187ABF\" };\nlogPoint(color);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Control Flow Narrowing for Constant Indexed Accesses\nDESCRIPTION: This snippet illustrates how TypeScript 5.5 can narrow types for constant indexed accesses, allowing for more precise type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f1(obj: Record<string, unknown>, key: string) {\n    if (typeof obj[key] === \"string\") {\n        // Now okay, previously was error\n        obj[key].toUpperCase();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Compatibility with Readonly Properties in TypeScript\nDESCRIPTION: Demonstrates that readonly modifiers don't affect type compatibility. A writable type can be assigned to a readonly type, and changes to the writable reference will be reflected in the readonly reference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  name: string;\n  age: number;\n}\n\ninterface ReadonlyPerson {\n  readonly name: string;\n  readonly age: number;\n}\n\nlet writablePerson: Person = {\n  name: \"Person McPersonface\",\n  age: 42,\n};\n\n// works\nlet readonlyPerson: ReadonlyPerson = writablePerson;\n\nconsole.log(readonlyPerson.age); // prints '42'\nwritablePerson.age++;\nconsole.log(readonlyPerson.age); // prints '43'\n```\n\n----------------------------------------\n\nTITLE: Intersection Types in TypeScript\nDESCRIPTION: Demonstrates TypeScript's intersection types which combine multiple types into one. Shows both a simple case where properties from two types are combined and a conflicting case where the same property has different types in the intersected types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Combined = { a: number } & { b: string };\ntype Conflicting = { a: number } & { a: string };\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual TypeScript System with Map-based File System\nDESCRIPTION: Demonstrates how to create a virtual TypeScript system using a Map to represent files. This is useful for running TypeScript in environments where the file system isn't the source of truth, such as browsers or virtual environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem } from \"@typescript/vfs\"\n\nconst fsMap = new Map<string, string>()\nfsMap.set(\"index.ts\", 'const a = \"Hello World\"')\n\nconst system = createSystem(fsMap)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with Type Inference\nDESCRIPTION: This TypeScript function demonstrates how TypeScript can infer types even without explicit annotations. However, it also shows how this can lead to errors if not all required arguments are provided.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// This is an industrial-grade general-purpose greeter function:\nfunction greet(person, date) {\n  console.log(`Hello ${person}, today is ${date}!`);\n}\n\ngreet(\"Brendan\");\n```\n\n----------------------------------------\n\nTITLE: Writable Utility Type in TypeScript 3.4\nDESCRIPTION: Demonstrates a 'Writable' utility type that removes readonly-ness from types, including converting readonly array containers back to their mutable equivalents.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Writable<T> = {\n  -readonly [K in keyof T]: T[K];\n};\n\n// { a: string, b: number }\ntype A = Writable<{\n  readonly a: string;\n  readonly b: number;\n}>;\n\n// number[]\ntype B = Writable<readonly number[]>;\n\n// [string, boolean]\ntype C = Writable<readonly [string, boolean]>;\n```\n\n----------------------------------------\n\nTITLE: Switch(true) Type Narrowing Example\nDESCRIPTION: Demonstrates TypeScript's ability to narrow types based on conditions in case clauses within a switch(true) statement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x: unknown) {\n    switch (true) {\n        case typeof x === \"string\":\n            // 'x' is a 'string' here\n            console.log(x.toUpperCase());\n            // falls through...\n\n        case Array.isArray(x):\n            // 'x' is a 'string | any[]' here.\n            console.log(x.length);\n            // falls through...\n\n        default:\n          // 'x' is 'unknown' here.\n          // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Bundlers\nDESCRIPTION: Recommended TypeScript compiler options for projects using bundlers. Includes settings for module resolution, interoperability, and emit behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // This is not a complete template; it only\n    // shows relevant module-related settings.\n    // Be sure to set other important options\n    // like `target`, `lib`, and `strict`.\n\n    // Required\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"esModuleInterop\": true,\n\n    // Consult your bundler's documentation\n    \"customConditions\": [\"module\"],\n\n    // Recommended\n    \"noEmit\": true, // or `emitDeclarationOnly`\n    \"allowImportingTsExtensions\": true,\n    \"allowArbitraryExtensions\": true,\n    \"verbatimModuleSyntax\": true, // or `isolatedModules`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Generator Function with Type Annotations\nDESCRIPTION: Demonstrates explicit type annotations for generator functions with complex yield/return patterns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* counter(): Generator<number, string, boolean> {\n  let i = 0;\n  while (true) {\n    if (yield i++) {\n      break;\n    }\n  }\n  return \"done!\";\n}\n\nvar iter = counter();\nvar curr = iter.next();\nwhile (!curr.done) {\n  console.log(curr.value);\n  curr = iter.next(curr.value === 5);\n}\nconsole.log(curr.value.toUpperCase());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Checking with Instantiation Expressions in TypeScript\nDESCRIPTION: Illustrates how TypeScript correctly enforces type checking when using instantiation expressions to create specialized functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst makeStringBox = makeBox<string>;\n\n// TypeScript correctly rejects this.\nmakeStringBox(42);\n```\n\n----------------------------------------\n\nTITLE: Using Methods on Union Types of Arrays\nDESCRIPTION: Shows how TypeScript 5.2 improves handling of method calls on unions of arrays, treating them as an array of the union of element types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let array: string[] | number[];\n\narray.filter(x => !!x);\n//    ~~~~~~ error!\n// This expression is not callable.\n//   Each member of the union type '...' has signatures,\n//   but none of those signatures are compatible\n//   with each other.\n```\n\n----------------------------------------\n\nTITLE: Handling Shape with Optional Properties in TypeScript\nDESCRIPTION: This snippet demonstrates an error that occurs when trying to access the optional 'radius' property without proper type checking. It highlights the need for a better approach to defining the Shape type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getArea(shape: Shape) {\n  return Math.PI * shape.radius ** 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intrinsic Elements in JSX\nDESCRIPTION: Example of defining intrinsic elements by specifying them in the JSX.IntrinsicElements interface, which enables type checking for built-in JSX elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare namespace JSX {\n  interface IntrinsicElements {\n    foo: any;\n  }\n}\n\n<foo />; // ok\n<bar />; // error\n```\n\n----------------------------------------\n\nTITLE: Showing Type Errors with Generic Types in TypeScript\nDESCRIPTION: Demonstrates how TypeScript reports type errors when attempting to assign incompatible generic types. The example shows that a Record<string, string> cannot be assigned to a Record<string, number> due to type incompatibility.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nconst a: Record<string, string> = {}\nlet b: Record<string, number> = {}\nb = a\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"See above\",\n  \"extension\": \"ts\",\n  \"highlights\": [],\n  \"queries\": [],\n  \"staticQuickInfos\": \"[ 6 items ]\",\n  \"errors\": [\n    {\n      \"category\": 1,\n      \"code\": 2322,\n      \"length\": 1,\n      \"start\": 72,\n      \"line\": 2,\n      \"character\": 0,\n      \"renderedMessage\": \"Type 'Record<string, string>' is not assignable to type 'Record<string, number>'.\\n  'string' index signatures are incompatible.\\n    Type 'string' is not assignable to type 'number'.\",\n      \"id\": \"err-2322-72-1\"\n    }\n  ],\n  \"playgroundURL\": \"https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGM4A7RAF1AENUAlSA6AEwB5ToBLQgcwBpQX2OAfKAC8oAN4BfHABtIZAEbVaCJn049CAVwC28mENGSc8kRRxA\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lowercase Intrinsic String Manipulation Type in TypeScript\nDESCRIPTION: Demonstrates the usage of the built-in Lowercase type for converting string literals to lowercase in type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Greeting = \"Hello, world\"\ntype QuietGreeting = Lowercase<Greeting>\n\ntype ASCIICacheKey<Str extends string> = `id-${Lowercase<Str>}`\ntype MainID = ASCIICacheKey<\"MY_APP\">\n```\n\n----------------------------------------\n\nTITLE: Heterogeneous Enum Example\nDESCRIPTION: Demonstrates mixing string and numeric enum members, though this practice is not recommended.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenum BooleanLikeHeterogeneousEnum {\n  No = 0,\n  Yes = \"YES\",\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with let in TypeScript\nDESCRIPTION: This snippet shows how to declare variables using let in TypeScript, demonstrating its block-scoping behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet hello = \"Hello!\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(input: boolean) {\n  let a = 100;\n\n  if (input) {\n    // Still okay to reference 'a'\n    let b = a + 1;\n    return b;\n  }\n\n  // Error: 'b' doesn't exist here\n  return b;\n}\n```\n\n----------------------------------------\n\nTITLE: Non-null and Non-undefined Type Guards in TypeScript\nDESCRIPTION: This snippet demonstrates how type guards are extended to support non-null and non-undefined checks in TypeScript 2.0. It shows how the compiler handles type narrowing in conditional statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Compiled with --strictNullChecks\ndeclare function f(x: number): string;\nlet x: number | null | undefined;\nif (x) {\n  f(x); // Ok, type of x is number here\n} else {\n  f(x); // Error, type of x is number? here\n}\nlet a = x != null ? f(x) : \"\"; // Type of a is string\nlet b = x && f(x); // Type of b is string | 0 | null | undefined\n```\n\n----------------------------------------\n\nTITLE: Promise.all Type Inference Example in TypeScript\nDESCRIPTION: Demonstrates improved type inference for Promise.all when handling mixed Promise types including undefined values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Lion {\n  roar(): void;\n}\n\ninterface Seal {\n  singKissFromARose(): void;\n}\n\nasync function visitZoo(\n  lionExhibit: Promise<Lion>,\n  sealExhibit: Promise<Seal | undefined>\n) {\n  let [lion, seal] = await Promise.all([lionExhibit, sealExhibit]);\n  lion.roar(); // uh oh\n  //  ~~~~\n  // Object is possibly 'undefined'.\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Literal Types with Union Types in TypeScript\nDESCRIPTION: This example demonstrates how string literal types can be combined with union types to create enum-like behavior. It shows type checking for a specific set of string values in a class method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Literal Types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\ntype Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\";\n\nclass UIElement {\n  animate(dx: number, dy: number, easing: Easing) {\n    if (easing === \"ease-in\") {\n      // ...\n    } else if (easing === \"ease-out\") {\n    } else if (easing === \"ease-in-out\") {\n    } else {\n      // It's possible that someone could reach this\n      // by ignoring your types though.\n    }\n  }\n}\n\nlet button = new UIElement();\nbutton.animate(0, 0, \"ease-in\");\nbutton.animate(0, 0, \"uneasy\");\n```\n\n----------------------------------------\n\nTITLE: Getter and Setter Type Examples\nDESCRIPTION: Shows how TypeScript handles different types for getters and setters in interfaces and classes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Serializer {\n    set value(v: string | number | boolean);\n    get value(): string;\n}\ndeclare let box: Serializer;\n// Allows writing a 'boolean'\nbox.value = true;\n// Comes out as a 'string'\nconsole.log(box.value.toUpperCase());\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Type Acquisition in TypeScript\nDESCRIPTION: Code example showing how to disable TypeScript's automatic type acquisition feature by setting the enable property to false in jsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/typeAcquisition.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"enable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting JSX Usage with ElementClass Interface in TypeScript\nDESCRIPTION: This snippet shows how to use the JSX.ElementClass interface to limit the use of JSX to only those types that conform to a specific interface, such as having a render method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare namespace JSX {\n  interface ElementClass {\n    render: any;\n  }\n}\n\nclass MyComponent {\n  render() {}\n}\nfunction MyFactoryFunction() {\n  return { render: () => {} };\n}\n\n<MyComponent />; // ok\n<MyFactoryFunction />; // ok\n\nclass NotAValidComponent {}\nfunction NotAValidFactoryFunction() {\n  return {};\n}\n\n<NotAValidComponent />; // error\n<NotAValidFactoryFunction />; // error\n```\n\n----------------------------------------\n\nTITLE: Contextual Typing for Mouse Event Handler in TypeScript\nDESCRIPTION: Shows how TypeScript uses contextual typing to infer the type of a function parameter based on its usage context. The 'mouseEvent' parameter is inferred to be of type MouseEvent.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.onmousedown = function (mouseEvent) {\n  console.log(mouseEvent.button);\n  console.log(mouseEvent.kangaroo);\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Any Type Usage in TypeScript\nDESCRIPTION: Shows how the 'any' type can be used to bypass TypeScript's type checking system. Demonstrates various operations that are allowed with any-typed variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet obj: any = { x: 0 };\n// None of the following lines of code will throw compiler errors.\n// Using `any` disables all further type checking, and it is assumed\n// you know the environment better than TypeScript.\nobj.foo();\nobj();\nobj.bar = 100;\nobj = \"hello\";\nconst n: number = obj;\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig for Babel Integration\nDESCRIPTION: TypeScript configuration for generating declaration files while using Babel for transpilation. Enables declaration file generation and isolated modules to ensure compatibility with Babel's transpilation process.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Babel with TypeScript.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n  // Ensure that .d.ts files are created by tsc, but not .js files\n  \"declaration\": true,\n  \"emitDeclarationOnly\": true,\n  // Ensure that Babel can safely transpile files in the TypeScript project\n  \"isolatedModules\": true\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS and ESM Interoperability Example\nDESCRIPTION: Demonstrates how ES modules can import and use CommonJS modules using default exports and named exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ./foo.cts\nexport function helper() {\n    console.log(\"hello world!\");\n}\n\n// ./bar.mts\nimport foo from \"./foo.cjs\";\n\n// prints \"hello world!\"\nfoo.helper();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ./foo.cts\nexport function helper() {\n    console.log(\"hello world!\");\n}\n\n// ./bar.mts\nimport { helper } from \"./foo.cjs\";\n\n// prints \"hello world!\"\nhelper();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ./foo.cts\nexport function helper() {\n    console.log(\"hello world!\");\n}\n\n// ./bar.mts\nimport foo = require(\"./foo.cjs\");\n\nfoo.helper()\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-existent Object Properties in JavaScript\nDESCRIPTION: This example demonstrates how JavaScript allows accessing properties that don't exist on an object, resulting in unexpected behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for the New Programmer.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { width: 10, height: 15 };\n// Why is this NaN? Spelling is hard!\nconst area = obj.width * obj.heigth;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Build Options\nDESCRIPTION: Build-related flags for TypeScript projects that control build behavior, cleaning outputs, and verbosity settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n--build   # boolean - Build one or more projects and their dependencies, if out of date\n--clean   # boolean - Delete the outputs of all projects.\n--dry     # boolean - Show what would be built (or deleted, if specified with '--clean')\n--force   # boolean - Build all projects, including those that appear to be up to date.\n--verbose # boolean - Enable verbose logging.\n```\n\n----------------------------------------\n\nTITLE: Configuring lib in tsconfig.json\nDESCRIPTION: Shows how to specify built-in type declarations in the tsconfig.json file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n    \"lib\": [\"es5\", \"es2015.promise\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @satisfies in JSDoc for Type Checking\nDESCRIPTION: Demonstrates how to use the new @satisfies JSDoc tag to catch type mismatches in JavaScript code that uses TypeScript type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/**\n * @typedef CompilerOptions\n * @prop {boolean} [strict]\n * @prop {string} [outDir]\n */\n\n/**\n * @satisfies {CompilerOptions}\n */\nlet myCompilerOptions = {\n    outdir: \"../lib\",\n//  ~~~~~~ oops! we meant outDir\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Never Type in Control Flow\nDESCRIPTION: Demonstrates practical usage of the never type in control flow scenarios like switch statements and conditional checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction move1(direction: \"up\" | \"down\") {\n  switch (direction) {\n    case \"up\":\n      return 1;\n    case \"down\":\n      return -1;\n  }\n  return error(\"Should never get here\");\n}\n\nfunction move2(direction: \"up\" | \"down\") {\n  return direction === \"up\"\n    ? 1\n    : direction === \"down\"\n    ? -1\n    : error(\"Should never get here\");\n}\n\nfunction check<T>(x: T | undefined) {\n  return x || error(\"Undefined value\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Type Declarations with --lib\nDESCRIPTION: Demonstrates how to include specific built-in type declarations in a TypeScript project using the --lib compiler option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ntsc --target es5 --lib es5,es2015.promise\n```\n\n----------------------------------------\n\nTITLE: Using the 'object' Type in TypeScript\nDESCRIPTION: Demonstrates the usage of the new 'object' type in TypeScript 2.2 for representing non-primitive types in APIs like Object.create.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.2.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function create(o: object | null): void;\n\ncreate({ prop: 0 }); // OK\ncreate(null); // OK\n\ncreate(42); // Error\ncreate(\"string\"); // Error\ncreate(false); // Error\ncreate(undefined); // Error\n```\n\n----------------------------------------\n\nTITLE: Namespace Static Addition to Class\nDESCRIPTION: Shows how to add static members to a class using namespace declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {}\n// ... elsewhere ...\nnamespace C {\n  export let x: number;\n}\nlet y = C.x; // OK\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-File Errors in TypeScript\nDESCRIPTION: Shows how errors are handled and displayed in a multi-file TypeScript setup. It includes a function definition, correct usage, and an error case.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: sum.ts\nexport function sum(a: number, b: number): number {\n  return a + b\n}\n\n// @filename: ok.ts\nimport { sum } from \"./sum\"\nsum(1, 2)\n\n// @filename: error.ts\n// @errors: 2345\nimport { sum } from \"./sum\"\nsum(4, \"woops\")\n```\n\n----------------------------------------\n\nTITLE: Contextual Typing with Template String Types in TypeScript\nDESCRIPTION: Shows how TypeScript infers template string types when a template string is contextually typed by a string-literal-like type, improving type safety in string return values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bar(s: string): `hello ${string}` {\n    // Previously an error, now works!\n    return `hello ${s}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Symbol.hasInstance Type Narrowing\nDESCRIPTION: Demonstrates type narrowing through custom instanceof behavior using Symbol.hasInstance with type predicates.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PointLike {\n    x: number;\n    y: number;\n}\n\nclass Point implements PointLike {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    distanceFromOrigin() {\n        return Math.sqrt(this.x ** 2 + this.y ** 2);\n    }\n\n    static [Symbol.hasInstance](val: unknown): val is PointLike {\n        return !!val && typeof val === \"object\" &&\n            \"x\" in val && \"y\" in val &&\n            typeof val.x === \"number\" &&\n            typeof val.y === \"number\";\n    }\n}\n\n\nfunction f(value: unknown) {\n    if (value instanceof Point) {\n        // Can access both of these - correct!\n        value.x;\n        value.y;\n\n        // Can't access this - we have a 'PointLike',\n        // but we don't *actually* have a 'Point'.\n        value.distanceFromOrigin();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialization Example with Decorator Metadata\nDESCRIPTION: Implementation of a serialization system using decorator metadata to mark and process serializable class members.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst serializables = new WeakMap<object, string[]>();\n\ntype Context =\n    | ClassAccessorDecoratorContext\n    | ClassGetterDecoratorContext\n    | ClassFieldDecoratorContext\n    ;\n\nexport function serialize(_target: any, context: Context): void {\n    if (context.static || context.private) {\n        throw new Error(\"Can only serialize public instance members.\")\n    }\n    if (typeof context.name !== \"string\") {\n        throw new Error(\"Can only serialize string properties.\");\n    }\n\n    let propNames = serializables.get(context.metadata);\n    if (propNames === undefined) {\n        serializables.set(context.metadata, propNames = []);\n    }\n    propNames.push(context.name);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error for Invalid Mathematical Operation\nDESCRIPTION: This example illustrates how TypeScript considers division of a number by an array to be an invalid operation and raises an error, while JavaScript would allow it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for the New Programmer.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(4 / []);\n```\n\n----------------------------------------\n\nTITLE: Definite Assignment Assertions in Classes\nDESCRIPTION: Demonstrates using definite assignment assertions with type annotations for properties initialized outside the constructor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Square {\n  sideLength!: number;\n\n  constructor(sideLength: number) {\n    this.initialize(sideLength);\n  }\n\n  initialize(sideLength: number) {\n    this.sideLength = sideLength;\n  }\n\n  get area() {\n    return this.sideLength ** 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Operator Precedence Example\nDESCRIPTION: Example showing incorrect operator precedence with the nullish coalescing operator (??) and comparison operator (<).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isValid(value: string | number, options: any, strictness: \"strict\" | \"loose\") {\n    if (strictness === \"loose\") {\n        value = +value\n    }\n    return value < options.max ?? 100;\n    // Oops! This is parsed as (value < options.max) ?? 100\n}\n```\n\n----------------------------------------\n\nTITLE: Key Filtering with Mapped Types\nDESCRIPTION: Shows how to filter out specific keys from an object type using the new as clause with never type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype RemoveKindField<T> = {\n    [K in keyof T as Exclude<K, \"kind\">]: T[K]\n};\n\ninterface Circle {\n    kind: \"circle\";\n    radius: number;\n}\n\ntype KindlessCircle = RemoveKindField<Circle>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Property Specialization Issues with useDefineForClassFields\nDESCRIPTION: This snippet shows how using class fields to specialize properties from base classes can lead to issues when using the useDefineForClassFields flag.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  animalStuff: any;\n}\ninterface Dog extends Animal {\n  dogStuff: any;\n}\n\nclass AnimalHouse {\n  resident: Animal;\n  constructor(animal: Animal) {\n    this.resident = animal;\n  }\n}\n\nclass DogHouse extends AnimalHouse {\n  // Initializes 'resident' to 'undefined'\n  // after the call to 'super()' when\n  // using 'useDefineForClassFields'!\n  resident: Dog;\n\n  constructor(dog: Dog) {\n    super(dog);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inference from Overloaded Functions in TypeScript\nDESCRIPTION: Shows how type inference works with overloaded functions, making inferences from the last signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(x: string): number;\ndeclare function foo(x: number): string;\ndeclare function foo(x: string | number): string | number;\n\ntype T1 = ReturnType<typeof foo>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Implementing a Singleton with Private Constructor\nDESCRIPTION: Demonstrates how to create a singleton class using a private constructor in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclass Singleton {\n  private static instance: Singleton;\n\n  private constructor() {}\n\n  static getInstance() {\n    if (!Singleton.instance) {\n      Singleton.instance = new Singleton();\n    }\n    return Singleton.instance;\n  }\n}\n\nlet e = new Singleton(); // Error: constructor of 'Singleton' is private.\nlet v = Singleton.getInstance();\n```\n\n----------------------------------------\n\nTITLE: Stricter Checks for 'in' Operator in TypeScript 4.2\nDESCRIPTION: Illustrates the new stricter checks for the 'in' operator in TypeScript 4.2, which catches runtime errors at compile-time when using non-object types on the right side of 'in'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"foo\" in 42;\n```\n\n----------------------------------------\n\nTITLE: Incompatible Function Overload Signatures (Return Error)\nDESCRIPTION: Shows an error where the implementation signature of an overloaded function has an incompatible return type with the overload signatures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(x: string): string;\n// Return type isn't right\nfunction fn(x: number): boolean;\nfunction fn(x: string | number) {\n  return \"oops\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit 'this' Parameter in TypeScript\nDESCRIPTION: A TypeScript example showing how to use an explicit 'this' parameter to fix type checking issues in prototype methods. This approach works with the noImplicitThis compiler option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nPoint.prototype.distanceFromOrigin = function (this: Point) {\n  return this.getDistance({ x: 0, y: 0 });\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Iterator Class Example\nDESCRIPTION: Example demonstrating how to extend the Iterator object to create a custom infinite sequence of zeros.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Provides an endless stream of `0`s.\n */\nclass Zeroes extends Iterator<number> {\n    next() {\n        return { value: 0, done: false } as const;\n    }\n}\n\nconst zeroes = new Zeroes();\n\n// Transform into an endless stream of `1`s.\nconst ones = zeroes.map(x => x + 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Bundler Module Resolution\nDESCRIPTION: JSON configuration example showing how to set up TypeScript to use the new 'bundler' module resolution strategy for integration with modern bundlers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"esnext\",\n        \"moduleResolution\": \"bundler\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Parameters and Constraints\nDESCRIPTION: Demonstrates the use of type parameters with constraints in generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction firstish<T extends { length: number }>(t1: T, t2: T): T {\n  return t1.length > t2.length ? t1 : t2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Const Type Parameters with Readonly Constraints\nDESCRIPTION: Shows the correct approach for using const type parameters with readonly array constraints, enabling proper tuple type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function fnGood<const T extends readonly string[]>(args: T): void;\n\n// T is readonly [\"a\", \"b\", \"c\"]\nfnGood([\"a\", \"b\" ,\"c\"]);\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript for DOM Manipulation\nDESCRIPTION: Updated main.ts file that manipulates the DOM to display the greeting message in the browser page, calling the sayHello function from the greet module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sayHello } from \"./greet\";\n\nfunction showHello(divName: string, name: string) {\n  const elt = document.getElementById(divName);\n  elt.innerText = sayHello(name);\n}\n\nshowHello(\"greeting\", \"TypeScript\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating keyof and Mapped Types with Symbol Properties\nDESCRIPTION: Shows how TypeScript 2.9 handles number and symbol named properties in index types and mapped types using various property declaration methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst c = \"c\";\nconst d = 10;\nconst e = Symbol();\n\nconst enum E1 {\n  A,\n  B,\n  C,\n}\nconst enum E2 {\n  A = \"A\",\n  B = \"B\",\n  C = \"C\",\n}\n\ntype Foo = {\n  a: string; // String-like name\n  5: string; // Number-like name\n  [c]: string; // String-like name\n  [d]: string; // Number-like name\n  [e]: string; // Symbol-like name\n  [E1.A]: string; // Number-like name\n  [E2.A]: string; // String-like name\n};\n\ntype K1 = keyof Foo; // \"a\" | 5 | \"c\" | 10 | typeof e | E1.A | E2.A\ntype K2 = Extract<keyof Foo, string>; // \"a\" | \"c\" | E2.A\ntype K3 = Extract<keyof Foo, number>; // 5 | 10 | E1.A\ntype K4 = Extract<keyof Foo, symbol>; // typeof e\n```\n\n----------------------------------------\n\nTITLE: Template String Type Inference\nDESCRIPTION: Demonstrates improved inference for infer types in template string types with primitive constraints.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype SomeNum = \"100\" extends `${infer U extends number}` ? U : never;\n\ntype SomeBigInt = \"100\" extends `${infer U extends bigint}` ? U : never;\n\ntype SomeBool = \"true\" extends `${infer U extends boolean}` ? U : never;\n```\n\n----------------------------------------\n\nTITLE: TSConfig for React JSX Transformation\nDESCRIPTION: TypeScript configuration file (tsconfig.json) set up for React JSX transformation using the new JSX transform introduced in React 17.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxImportSource.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Both in and out Variance Annotations in TypeScript\nDESCRIPTION: Shows how to use both in and out modifiers for invariant type parameters in a State interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface State<in out T> {\n    get: () => T;\n    set: (value: T) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Initialization Order in TypeScript\nDESCRIPTION: Illustrates the order of initialization in TypeScript classes, showing how base class fields are initialized before derived class fields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n  name = \"base\";\n  constructor() {\n    console.log(\"My name is \" + this.name);\n  }\n}\n\nclass Derived extends Base {\n  name = \"derived\";\n}\n\n// Prints \"base\", not \"derived\"\nconst d = new Derived();\n```\n\n----------------------------------------\n\nTITLE: Using Object.groupBy in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the new Object.groupBy method in JavaScript, which groups array elements into an object based on a grouping function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [0, 1, 2, 3, 4, 5];\n\nconst myObj = Object.groupBy(array, (num, index) => {\n    return num % 2 === 0 ? \"even\": \"odd\";\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Types in TypeScript\nDESCRIPTION: Demonstrates how to use union types to express values that can be one of several types. Shows interface definition with union type and type assignment behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RunOptions {\n  program: string;\n  commandline: string[] | string | (() => string);\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Symbol Primitive in TypeScript\nDESCRIPTION: This example shows how to create and use Symbol primitives in TypeScript, demonstrating their property of creating globally unique references even when created with the same description.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstName = Symbol(\"name\");\nconst secondName = Symbol(\"name\");\n\nif (firstName === secondName) {\n  // Can't ever happen\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Property Initialization with Symbol Keys\nDESCRIPTION: TypeScript code illustrating how strict property initialization now works with computed symbol properties, correctly checking that symbol-keyed properties are initialized in constructors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// 'key' has type 'unique symbol'\nconst key = Symbol();\n\nclass C {\n    [key]: string;\n\n    constructor(str: string) {\n        // oops, forgot to set 'this[key]'\n    }\n\n    screamString() {\n        return this[key].toUpperCase();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Readonly Tuples in TypeScript 3.4\nDESCRIPTION: Shows how to create and use readonly tuples in TypeScript 3.4. Readonly tuples only permit reading from their positions and cannot be modified.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(pair: readonly [string, string]) {\n  console.log(pair[0]); // okay\n  pair[1] = \"hello!\"; // error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertions to Bypass Excess Property Checks\nDESCRIPTION: Shows how to use type assertions in TypeScript to bypass excess property checks when assigning object literals. This technique should be used cautiously as it may hide potential errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig);\n```\n\n----------------------------------------\n\nTITLE: Array Types in TypeScript\nDESCRIPTION: Shows two ways to declare array types: using square bracket notation and generic Array type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet list: number[] = [1, 2, 3];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet list: Array<number> = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Parameter Destructuring with Named Types\nDESCRIPTION: Demonstrates parameter destructuring using a named type interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype ABC = { a: number; b: number; c: number };\nfunction sum({ a, b, c }: ABC) {\n  console.log(a + b + c);\n}\n```\n\n----------------------------------------\n\nTITLE: Tail-Recursive Conditional Type in TypeScript\nDESCRIPTION: Demonstrates a tail-recursive conditional type for trimming left spaces from string types. This type benefits from TypeScript 4.5's tail-recursion elimination optimization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype TrimLeft<T extends string> =\n    T extends ` ${infer Rest}` ? TrimLeft<Rest> : T;\n\n// Test = \"hello\" | \"world\"\ntype Test = TrimLeft<\"   hello\" | \" world\">;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Augmentation in TypeScript\nDESCRIPTION: These snippets show how to use module augmentation in TypeScript 1.8. It demonstrates augmenting an existing module with a new method and augmenting the global scope.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// observable.ts\nexport class Observable<T> {\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// map.ts\nimport { Observable } from \"./observable\";\n\n// Create an augmentation for \"./observable\"\ndeclare module \"./observable\" {\n\n    // Augment the 'Observable' class definition with interface merging\n    interface Observable<T> {\n        map<U>(proj: (el: T) => U): Observable<U>;\n    }\n\n}\n\nObservable.prototype.map = /*...*/;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// consumer.ts\nimport { Observable } from \"./observable\";\nimport \"./map\";\n\nlet o: Observable<number>;\no.map((x) => x.toFixed());\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Ensure this is treated as a module.\nexport {};\n\ndeclare global {\n  interface Array<T> {\n    mapToNumbers(): number[];\n  }\n}\n\nArray.prototype.mapToNumbers = function () {\n  /* ... */\n};\n```\n\n----------------------------------------\n\nTITLE: VerbatimModuleSyntax Compiler Option in TypeScript\nDESCRIPTION: The 'verbatimModuleSyntax' option preserves imports and exports not marked as type-only, ensuring they are written in the output file's format based on the module setting. Defaults to false.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<code><a href='/tsconfig/#verbatimModuleSyntax'>--verbatimModuleSyntax</a></code>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Method Syntax Exception in strictFunctionTypes\nDESCRIPTION: Example illustrating that strictFunctionTypes only applies to functions written in function syntax, not to methods. This shows how an unsafe assignment in method syntax is not detected even when the option is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictFunctionTypes.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Methodish = {\n  func(x: string | number): void;\n};\n\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\n// Ultimately an unsafe assignment, but not detected\nconst m: Methodish = {\n  func: fn,\n};\nm.func(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports with TypeScript Declarations in package.json\nDESCRIPTION: An extended package.json configuration that includes TypeScript declaration files for both CommonJS and ESM entry points, using the 'types' condition to specify type declaration locations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n    \"name\": \"my-package\",\n    \"type\": \"module\",\n    \"exports\": {\n        \".\": {\n            // Entry-point for `import \"my-package\"` in ESM\n            \"import\": {\n                // Where TypeScript will look.\n                \"types\": \"./types/esm/index.d.ts\",\n\n                // Where Node.js will look.\n                \"default\": \"./esm/index.js\"\n            },\n            // Entry-point for `require(\"my-package\") in CJS\n            \"require\": {\n                // Where TypeScript will look.\n                \"types\": \"./types/commonjs/index.d.cts\",\n\n                // Where Node.js will look.\n                \"default\": \"./commonjs/index.cjs\"\n            },\n        }\n    },\n\n    // Fall-back for older versions of TypeScript\n    \"types\": \"./types/index.d.ts\",\n\n    // CJS fall-back for older versions of Node.js\n    \"main\": \"./commonjs/index.cjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Classes with JSDoc in JavaScript\nDESCRIPTION: This snippet demonstrates how to declare classes using JSDoc annotations in JavaScript. It shows property type inference, explicit type annotations, and constructor parameter typing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass C {\n  /**\n   * @param {number} data\n   */\n  constructor(data) {\n    // property types can be inferred\n    this.name = \"foo\";\n\n    // or set explicitly\n    /** @type {string | null} */\n    this.title = null;\n\n    // or simply annotated, if they're set elsewhere\n    /** @type {number} */\n    this.size;\n\n    this.initialize(data); // Should error, initializer expects a string\n  }\n  /**\n   * @param {string} s\n   */\n  initialize = function (s) {\n    this.size = s.length;\n  };\n}\n\nvar c = new C(0);\n\n// C should only be called with new, but\n// because it is JavaScript, this is allowed and\n// considered an 'any'.\nvar result = C(1);\n```\n\n----------------------------------------\n\nTITLE: Private Fields Inheritance Behavior\nDESCRIPTION: Illustrates how private fields maintain unique scoping in inheritance scenarios, contrasting with regular property behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  #foo = 10;\n\n  cHelper() {\n    return this.#foo;\n  }\n}\n\nclass D extends C {\n  #foo = 20;\n\n  dHelper() {\n    return this.#foo;\n  }\n}\n\nlet instance = new D();\n// 'this.#foo' refers to a different field within each class.\nconsole.log(instance.cHelper()); // prints '10'\nconsole.log(instance.dHelper()); // prints '20'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Function Behavior in TypeScript\nDESCRIPTION: This snippet demonstrates a function that returns different types based on input arguments. It uses 'any' type for flexibility but lacks type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @strict: false\nlet suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];\n\nfunction pickCard(x: any): any {\n  // Check to see if we're working with an object/array\n  // if so, they gave us the deck and we'll pick the card\n  if (typeof x == \"object\") {\n    let pickedCard = Math.floor(Math.random() * x.length);\n    return pickedCard;\n  }\n  // Otherwise just let them pick the card\n  else if (typeof x == \"number\") {\n    let pickedSuit = Math.floor(x / 13);\n    return { suit: suits[pickedSuit], card: x % 13 };\n  }\n}\n\nlet myDeck = [\n  { suit: \"diamonds\", card: 2 },\n  { suit: \"spades\", card: 10 },\n  { suit: \"hearts\", card: 4 },\n];\n\nlet pickedCard1 = myDeck[pickCard(myDeck)];\nalert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);\n\nlet pickedCard2 = pickCard(15);\nalert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Destructuring in TypeScript\nDESCRIPTION: Demonstrates destructuring in function parameters with default values and nested patterns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction drawText({ text = \"\", location: [x, y] = [0, 0], bold = false }) {\n  // Draw text\n}\n\n// Call drawText with an object literal\nvar item = { text: \"someText\", location: [1, 2, 3], style: \"italics\" };\ndrawText(item);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing Tuple Types in TypeScript 1.3\nDESCRIPTION: This code demonstrates how to declare and initialize tuple types in TypeScript 1.3. It shows correct and incorrect initializations, highlighting type checking for tuples.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.3.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Declare a tuple type\nvar x: [string, number];\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n```\n\n----------------------------------------\n\nTITLE: Deferred Conditional Types in TypeScript\nDESCRIPTION: An example showing how conditional types can be deferred when they depend on type variables, not immediately resolving to a specific branch.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  propA: boolean;\n  propB: boolean;\n}\n\ndeclare function f<T>(x: T): T extends Foo ? string : number;\n\nfunction foo<U>(x: U) {\n  // Has type 'U extends Foo ? string : number'\n  let a = f(x);\n\n  // This assignment is allowed though!\n  let b: string | number = a;\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSX Factory Directive in TypeScript File\nDESCRIPTION: Demonstrates how to use a JSX factory directive within a TypeScript file, similar to Babel's @jsx directive. This approach allows specifying the JSX factory on a per-file basis.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxFactory.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsx h */\nimport { h } from \"preact\";\n\nconst HelloWorld = () => <div>Hello</div>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript 1.6 'as' Operator for Casting\nDESCRIPTION: Shows how the new 'as' operator can be used for type casting in TypeScript 1.6, which is equivalent to the previous angle bracket syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar x = <any>foo;\n// is equivalent to:\nvar x = foo as any;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Enum Assignability Restrictions in TypeScript 5.4\nDESCRIPTION: This snippet shows how TypeScript 5.4 enforces stricter compatibility checks between enums with the same names but different values. It illustrates that enums are no longer considered compatible if their values differ, even when they have the same structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace First {\n    export enum SomeEnum {\n        A = 0,\n        B = 1,\n    }\n}\n\nnamespace Second {\n    export enum SomeEnum {\n        A = 0,\n        B = 2,\n    }\n}\n\nfunction foo(x: First.SomeEnum, y: Second.SomeEnum) {\n    // Both used to be compatible - no longer the case,\n    // TypeScript errors with something like:\n    //\n    //  Each declaration of 'SomeEnum.B' differs in its value, where '1' was expected but '2' was given.\n    x = y;\n    y = x;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Alias in Function Definition in TypeScript\nDESCRIPTION: Shows how to use a previously defined type alias in a function parameter and return type. This example also demonstrates how TypeScript preserves type aliases in type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type BasicPrimitive = number | string | boolean;\n\nexport function doStuff(value: BasicPrimitive) {\n  let x = value;\n  return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessor Decorator in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of an accessor decorator '@configurable' applied to the 'x' and 'y' getters of a Point class. The decorator modifies the configurable property of the accessor's PropertyDescriptor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction configurable(value: boolean) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    descriptor.configurable = value;\n  };\n}\n\nclass Point {\n  private _x: number;\n  private _y: number;\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  @configurable(false)\n  get x() {\n    return this._x;\n  }\n\n  @configurable(false)\n  get y() {\n    return this._y;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uncalled Function Check in Conditional\nDESCRIPTION: Illustrates TypeScript's detection of potentially uncalled functions in conditional expressions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAllFiles(startFileName: string) {\n  const result: string[] = [];\n  traverse(startFileName);\n  return result;\n\n  function traverse(currentPath: string) {\n    return isDirectory\n      ? listFilesOfDirectory(currentPath).forEach(traverse)\n      : result.push(currentPath);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Component with Overloads in TypeScript\nDESCRIPTION: Demonstrates how to define a Function Component with multiple function overloads to handle different prop types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ninterface ClickableProps {\n  children: JSX.Element[] | JSX.Element;\n}\n\ninterface HomeProps extends ClickableProps {\n  home: JSX.Element;\n}\n\ninterface SideProps extends ClickableProps {\n  side: JSX.Element | string;\n}\n\nfunction MainButton(prop: HomeProps): JSX.Element;\nfunction MainButton(prop: SideProps): JSX.Element;\nfunction MainButton(prop: ClickableProps): JSX.Element {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator on JSX Element Children in TypeScript\nDESCRIPTION: Shows how to use the spread operator on JSX element children in TypeScript 2.2, which is useful for dynamic rendering of components.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.2.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Todo(prop: { key: number; todo: string }) {\n  return <div>{prop.key.toString() + prop.todo}</div>;\n}\n\nfunction TodoList({ todos }: TodoListProps) {\n  return (\n    <div>{...todos.map(todo => <Todo key={todo.id} todo={todo.todo} />)}</div>\n  );\n}\n\nlet x: TodoListProps;\n\n<TodoList {...x} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Method Override Example in TypeScript\nDESCRIPTION: Demonstrates a basic class inheritance scenario where a SharedAlbum class overrides the download method from the base Album class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitOverride.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Album {\n  download() {\n    // Default behavior\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Modifiers for Explicit Type-Only Imports/Exports\nDESCRIPTION: Shows how to use the 'type' modifier to explicitly mark imports and exports as type-only, indicating they should be dropped in JavaScript output regardless of usage context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/verbatimModuleSyntax.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// This statement can be dropped entirely in JS output\nimport type * as car from \"./car\";\n\n// The named import/export 'Car' can be dropped in JS output\nimport { type Car } from \"./car\";\nexport { type Car } from \"./car\";\n```\n\n----------------------------------------\n\nTITLE: String Case Manipulation with Utility Types\nDESCRIPTION: Shows usage of new utility types for manipulating string case in template literal types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype EnthusiasticGreeting<T extends string> = `${Uppercase<T>}`\n\ntype HELLO = EnthusiasticGreeting<\"hello\">;\n```\n\n----------------------------------------\n\nTITLE: Defining JSX Namespace for Preact\nDESCRIPTION: Shows how to define the JSX namespace for Preact, which uses 'h' as its JSX factory instead of React's createElement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport function h(props: any): any;\n\nexport namespace h.JSX {\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Issues with Const Type Parameters and Mutable Constraints\nDESCRIPTION: Demonstrates how using const type parameters with mutable type constraints can lead to surprising behavior, as readonly arrays aren't assignable to mutable array types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function fnBad<const T extends string[]>(args: T): void;\n\n// 'T' is still 'string[]' since 'readonly [\"a\", \"b\", \"c\"]' is not assignable to 'string[]'\nfnBad([\"a\", \"b\" ,\"c\"]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixin Classes in TypeScript\nDESCRIPTION: Demonstrates how to create and use mixin classes in TypeScript 2.2, including type constraints and constructor handling.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.2.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  constructor(public x: number, public y: number) {}\n}\n\nclass Person {\n  constructor(public name: string) {}\n}\n\ntype Constructor<T> = new (...args: any[]) => T;\n\nfunction Tagged<T extends Constructor<{}>>(Base: T) {\n  return class extends Base {\n    _tag: string;\n    constructor(...args: any[]) {\n      super(...args);\n      this._tag = \"\";\n    }\n  };\n}\n\nconst TaggedPoint = Tagged(Point);\n\nlet point = new TaggedPoint(10, 20);\npoint._tag = \"hello\";\n\nclass Customer extends Tagged(Person) {\n  accountBalance: number;\n}\n\nlet customer = new Customer(\"Joe\");\ncustomer._tag = \"test\";\ncustomer.accountBalance = 0;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error with Incorrect Variance Annotation in TypeScript\nDESCRIPTION: Illustrates how TypeScript reports an error when the variance annotation doesn't match the actual usage of the type parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface State<out T> {\n    //          ~~~~~\n    // error!\n    // Type 'State<sub-T>' is not assignable to type 'State<super-T>' as implied by variance annotation.\n    //   Types of property 'set' are incompatible.\n    //     Type '(value: sub-T) => void' is not assignable to type '(value: super-T) => void'.\n    //       Types of parameters 'value' and 'value' are incompatible.\n    //         Type 'super-T' is not assignable to type 'sub-T'.\n    get: () => T;\n    set: (value: T) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Typing Array of Animals in TypeScript\nDESCRIPTION: Demonstrates how to explicitly specify the type of an array containing different animal types, overriding the default union type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {}\nclass Rhino extends Animal {\n  hasHorn: true;\n}\nclass Elephant extends Animal {\n  hasTrunk: true;\n}\nclass Snake extends Animal {\n  hasLegs: false;\n}\n\nlet zoo: Animal[] = [new Rhino(), new Elephant(), new Snake()];\n```\n\n----------------------------------------\n\nTITLE: Configuring path mappings with wildcards in tsconfig.json\nDESCRIPTION: Example of using wildcard patterns in paths configuration to map module specifiers to file locations. The * token is used to substitute matched strings in the path.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@app/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UMD Module Browser Usage Example\nDESCRIPTION: Shows how to use a UMD module directly in a browser environment without module loading.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(moment.format());\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with TypeScript\nDESCRIPTION: Setup instructions for using Webpack with TypeScript using ts-loader.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ts-loader --save-dev\n```\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.ts',\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using @constructor for Constructor Functions in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @constructor tag to improve type checking and suggestions for constructor functions in JavaScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// @checkJs\n// @errors: 2345 2348\n/**\n * @constructor\n * @param {number} data\n */\nfunction C(data) {\n  // property types can be inferred\n  this.name = \"foo\";\n\n  // or set explicitly\n  /** @type {string | null} */\n  this.title = null;\n\n  // or simply annotated, if they're set elsewhere\n  /** @type {number} */\n  this.size;\n\n  this.initialize(data);\n}\n/**\n * @param {string} s\n */\nC.prototype.initialize = function (s) {\n  this.size = s.length;\n};\n\nvar c = new C(0);\nc.size;\n\nvar result = C(1);\n```\n\n----------------------------------------\n\nTITLE: Complex Alignment API with Template Literal Types\nDESCRIPTION: Implements a type-safe alignment API using template literal types to combine vertical and horizontal alignments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype VerticalAlignment = \"top\" | \"middle\" | \"bottom\";\ntype HorizontalAlignment = \"left\" | \"center\" | \"right\";\n\ndeclare function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void;\n\nsetAlignment(\"top-left\");   // works!\nsetAlignment(\"top-middel\"); // error!\nsetAlignment(\"top-pot\");    // error!\n```\n\n----------------------------------------\n\nTITLE: Super Call Requirement in Derived Class Constructors\nDESCRIPTION: Demonstrates the error that occurs when a derived class constructor attempts to access this before calling super(), which is required in JavaScript and enforced by TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 17009\nclass Base {\n  k = 4;\n}\n\nclass Derived extends Base {\n  constructor() {\n    // Prints a wrong value in ES5; throws exception in ES6\n    console.log(this.k);\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ES2020 Module Output Example\nDESCRIPTION: Shows how TypeScript code is emitted when using the ES2020 module format. The output remains essentially unchanged from the source as ES2020 supports ES Modules natively.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Using Capitalize Intrinsic String Manipulation Type in TypeScript\nDESCRIPTION: Illustrates the usage of the built-in Capitalize type for converting the first character of a string literal to uppercase in type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype LowercaseGreeting = \"hello, world\";\ntype Greeting = Capitalize<LowercaseGreeting>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved Function Inference in Objects\nDESCRIPTION: TypeScript code showing enhanced type inference for functions within objects, allowing more flexible ways of defining functions while maintaining correct type inference in a left-to-right manner.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function f<T>(arg: {\n    produce: (n: string) => T,\n    consume: (x: T) => void }\n): void;\n\n// Works\nf({\n    produce: () => \"hello\",\n    consume: x => x.toLowerCase()\n});\n\n// Works\nf({\n    produce: (n: string) => n,\n    consume: x => x.toLowerCase(),\n});\n\n// Was an error, now works.\nf({\n    produce: n => n,\n    consume: x => x.toLowerCase(),\n});\n\n// Was an error, now works.\nf({\n    produce: function () { return \"hello\"; },\n    consume: x => x.toLowerCase(),\n});\n\n// Was an error, now works.\nf({\n    produce() { return \"hello\" },\n    consume: x => x.toLowerCase(),\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Index Signature Access in TypeScript\nDESCRIPTION: This snippet shows how TypeScript handles property access from index signatures, illustrating the potential for accidental property access when using dotted notation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SomeType {\n  /** This is an index signature. */\n  [propName: string]: any;\n}\n\nfunction doStuff(value: SomeType) {\n  let x = value[\"someProperty\"];\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  /** File patterns to be excluded. */\n  exclude?: string[];\n\n  /**\n   * It handles any extra properties that we haven't declared as type 'any'.\n   */\n  [x: string]: any;\n}\n\nfunction processOptions(opts: Options) {\n  // Notice we're *intentionally* accessing `excludes`, not `exclude`\n  if (opts.excludes) {\n    console.error(\n      \"The option `excludes` is not valid. Did you mean `exclude`?\"\n    );\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  /** File patterns to be excluded. */\n  exclude?: string[];\n\n  /**\n   * It handles any extra properties that we haven't declared as type 'any'.\n   */\n  [x: string]: any;\n}\n// ---cut---\nfunction processOptions(opts: Options) {\n  // ...\n\n  // Notice we're *accidentally* accessing `excludes` this time.\n  // Oops! Totally valid.\n  for (const excludePattern of opts.excludes) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Spreading with Optional Chaining\nDESCRIPTION: Demonstrates conditional spreading using optional chaining, an alternative approach that is also affected by TypeScript 4.1's handling of optional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfunction copyOwner(pet?: Animal) {\n  return {\n    ...pet?.owner,\n    otherStuff: 123,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Functions in TypeScript\nDESCRIPTION: Demonstrates the implementation of assertion functions that help TypeScript understand type guarantees after runtime checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assert(condition: any, msg?: string): asserts condition {\n  if (!condition) {\n    throw new AssertionError(msg);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assertIsString(val: any): asserts val is string {\n  if (typeof val !== \"string\") {\n    throw new AssertionError(\"Not a string!\");\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assertIsDefined<T>(val: T): asserts val is NonNullable<T> {\n  if (val === undefined || val === null) {\n    throw new AssertionError(\n      `Expected 'val' to be defined, but received ${val}`\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Method Decorator\nDESCRIPTION: Example showing how to apply the loggedMethod decorator to a class method.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    @loggedMethod\n    greet() {\n        console.log(`Hello, my name is ${this.name}.`);\n    }\n}\n\nconst p = new Person(\"Ray\");\np.greet();\n```\n\n----------------------------------------\n\nTITLE: Overriding Contextual Typing with Explicit 'any' Type in TypeScript\nDESCRIPTION: Shows how to explicitly type a function parameter as 'any' to override contextual typing, allowing access to non-existent properties without type checking errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.onscroll = function (uiEvent: any) {\n  console.log(uiEvent.button); // <- Now, no error is given\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Imports in package.json\nDESCRIPTION: This package.json snippet demonstrates how to configure the 'imports' field to enable package-internal imports using the '#' prefix. It shows different import paths for 'import' and 'require' contexts.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"imports\": {\n    \"#utils\": {\n      \"import\": \"./dist/utils.d.mts\",\n      \"require\": \"./dist/utils.d.cts\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Types and Module References\nDESCRIPTION: Shows how to import and use types from other modules using TypeScript-specific import syntax in JSDoc\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {import(\"./types\").Pet} p\n */\nfunction walk(p) {\n  console.log(`Walking ${p.name}...`);\n}\n\n/**\n * @type {typeof import(\"./accounts\").userAccount}\n */\nvar x = require(\"./accounts\").userAccount;\n```\n\n----------------------------------------\n\nTITLE: Tracing with Using Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates using the 'using' declaration for tracing function entry and exit. It automatically traces the exit of the function when the block is left.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  using activity = new TraceActivity(\"f\"); // traces entry into function\n  // ...\n} // traces exit of function\n```\n\n----------------------------------------\n\nTITLE: BigInt Type Checking and Arithmetic\nDESCRIPTION: Shows type checking and arithmetic operations with BigInts, highlighting the separation between number and bigint types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let foo: number;\ndeclare let bar: bigint;\n\nfoo = bar; // error: Type 'bigint' is not assignable to type 'number'.\nbar = foo; // error: Type 'number' is not assignable to type 'bigint'.\n\nconsole.log(3.141592 * 10000n); // error\nconsole.log(3145 * 10n); // error\nconsole.log(BigInt(3145) * 10n); // okay!\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Cleanup with DisposableStack in TypeScript\nDESCRIPTION: Demonstrates how to use DisposableStack for managing resource cleanup in a TypeScript function. Uses defer() method to handle file operations cleanup in a structured way.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doSomeWork() {\n    const path = \".some_temp_file\";\n    const file = fs.openSync(path, \"w+\");\n\n    using cleanup = new DisposableStack();\n    cleanup.defer(() => {\n        fs.closeSync(file);\n        fs.unlinkSync(path);\n    });\n\n    // use file...\n\n    if (someCondition()) {\n        // do some more work...\n        return;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration Template for Function Modules\nDESCRIPTION: Comprehensive declaration file template for function modules with UMD support, multiple function overloads, and additional module properties and types. Includes detailed comments explaining the purpose of each section.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-function.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file for function modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n// Note that ES6 modules cannot directly export class objects.\n// This file should be imported using the CommonJS-style:\n//   import x = require('[~THE MODULE~]');\n//\n// Alternatively, if --allowSyntheticDefaultImports or\n// --esModuleInterop is turned on, this file can also be\n// imported as a default import:\n//   import x from '[~THE MODULE~]';\n//\n// Refer to the TypeScript documentation at\n// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require\n// to understand common workarounds for this limitation of ES6 modules.\n\n/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myFuncLib;\n\n/*~ This declaration specifies that the function\n *~ is the exported object from the file\n */\nexport = Greeter;\n\n/*~ This example shows how to have multiple overloads for your function */\ndeclare function Greeter(name: string): Greeter.NamedReturnType;\ndeclare function Greeter(length: number): Greeter.LengthReturnType;\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block. Often you will want to describe the\n *~ shape of the return type of the function; that type should\n *~ be declared in here, as this example shows.\n *~\n *~ Note that if you decide to include this namespace, the module can be\n *~ incorrectly imported as a namespace object, unless\n *~ --esModuleInterop is turned on:\n *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!\n */\ndeclare namespace Greeter {\n  export interface LengthReturnType {\n    width: number;\n    height: number;\n  }\n  export interface NamedReturnType {\n    firstName: string;\n    lastName: string;\n  }\n\n  /*~ If the module also has properties, declare them here. For example,\n   *~ this declaration says that this code is legal:\n   *~   import f = require('super-greeter');\n   *~   console.log(f.defaultName);\n   */\n  export const defaultName: string;\n  export let defaultLength: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Functions with @template in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @template tag to declare generic type parameters for functions, classes, or types in JavaScript. It shows a generic identity function and examples of its usage with different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @template T\n * @param {T} x - A generic parameter that flows through to the return type\n * @returns {T}\n */\nfunction id(x) {\n  return x;\n}\n\nconst a = id(\"string\");\nconst b = id(123);\nconst c = id({});\n```\n\n----------------------------------------\n\nTITLE: Indexed Access Inference with Mapped Types\nDESCRIPTION: Demonstrates improved type inference for indexed access into mapped object types with union records.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TypeMap {\n  number: number;\n  string: string;\n  boolean: boolean;\n}\n\ntype UnionRecord<P extends keyof TypeMap> = {\n  [K in P]: {\n    kind: K;\n    v: TypeMap[K];\n    f: (p: TypeMap[K]) => void;\n  };\n}[P];\n\nfunction processRecord<K extends keyof TypeMap>(record: UnionRecord<K>) {\n  record.f(record.v);\n}\n\nprocessRecord({\n  kind: \"string\",\n  v: \"hello!\",\n  f: (val) => {\n    console.log(val.toUpperCase());\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Invalid super Access on Class Fields\nDESCRIPTION: Demonstrates runtime error when using super to access class fields instead of prototype methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n    someMethod = () => {\n        console.log(\"someMethod called!\");\n    }\n}\n\nclass Derived extends Base {\n    someOtherMethod() {\n        super.someMethod();\n    }\n}\n\nnew Derived().someOtherMethod();\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports in TypeScript\nDESCRIPTION: This snippet shows how to import specific named exports from another module in TypeScript. It imports 'pi', 'phi', and 'absolute' from the 'maths.js' file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pi, phi, absolute } from \"./maths.js\";\n\nconsole.log(pi);\nconst absPhi = absolute(phi);\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Expressions in TypeScript 1.6\nDESCRIPTION: Shows how to use ES6 class expressions in TypeScript 1.6, where the class name is optional and scoped to the expression.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet Point = class {\n  constructor(public x: number, public y: number) {}\n  public length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n};\nvar p = new Point(3, 4); // p has anonymous class type\nconsole.log(p.length());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Resolution in Bundler Mode\nDESCRIPTION: This code snippet shows how import statements are resolved in bundler mode, demonstrating the use of import and require conditions based on syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport pkg1 from \"pkg\";       // Resolved with \"import\" condition\nimport pkg2 = require(\"pkg\"); // Resolved with \"require\" condition\n```\n\n----------------------------------------\n\nTITLE: Limitations of Narrowing in Nested Functions\nDESCRIPTION: This snippet illustrates a limitation of type narrowing in TypeScript 5.4, where modifying a variable in a nested function invalidates type refinements in closures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printValueLater(value: string | undefined) {\n    if (value === undefined) {\n        value = \"missing!\";\n    }\n\n    setTimeout(() => {\n        // Modifying 'value', even in a way that shouldn't affect\n        // its type, will invalidate type refinements in closures.\n        value = value;\n    }, 500);\n\n    setTimeout(() => {\n        console.log(value.toUpperCase());\n        //          ~~~~~\n        // error! 'value' is possibly 'undefined'.\n    }, 1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Suffixes in TypeScript tsconfig.json\nDESCRIPTION: Shows how to set up the 'moduleSuffixes' option in the tsconfig.json file. This configuration specifies a list of file name suffixes to be searched when resolving modules, including platform-specific extensions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/moduleSuffixes.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"moduleSuffixes\": [\".ios\", \".native\", \"\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Isolated Declarations in TypeScript\nDESCRIPTION: This snippet shows how the new --isolatedDeclarations option works in TypeScript. It demonstrates that explicit type annotations are required for exported functions when this option is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { add } from \"./add\";\n\nconst x = add();\n\nexport function foo() {\n    return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Private Class Methods and Accessors in TypeScript\nDESCRIPTION: Shows how TypeScript 4.3 supports ECMAScript's #private syntax for methods and accessors, making them truly private at runtime and inaccessible outside their containing class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  #someMethod() {\n    //...\n  }\n\n  get #someValue() {\n    return 100;\n  }\n\n  publicMethod() {\n    // These work.\n    // We can access private-named members inside this class.\n    this.#someMethod();\n    return this.#someValue;\n  }\n}\n\nnew Foo().#someMethod();\n//        ~~~~~~~~~~~\n// error!\n// Property '#someMethod' is not accessible\n// outside class 'Foo' because it has a private identifier.\n\nnew Foo().#someValue;\n//        ~~~~~~~~~~\n// error!\n// Property '#someValue' is not accessible\n// outside class 'Foo' because it has a private identifier.\n```\n\n----------------------------------------\n\nTITLE: Creating Simple TypeScript Example\nDESCRIPTION: A basic TypeScript file (main.ts) with a function that prints a greeting message to the console. This demonstrates TypeScript's type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(compiler: string) {\n  console.log(`Hello from ${compiler}`);\n}\nhello(\"TypeScript\");\n```\n\n----------------------------------------\n\nTITLE: Defining JSX Namespace for Classic Runtime\nDESCRIPTION: Shows how to define the JSX namespace for classic runtime in TypeScript, which is needed for the 'preserve', 'react', and 'react-native' JSX modes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function createElement(): any;\n\nexport namespace JSX {\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Dynamic Import Challenges with Path Rewriting in TypeScript\nDESCRIPTION: This code demonstrates the challenges of path rewriting with dynamic imports in TypeScript, showing why TypeScript generally avoids rewriting paths.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPath() {\n    if (Math.random() < 0.5) {\n        return \"./foo.ts\";\n    }\n    else {\n        return \"./foo.js\";\n    }\n}\n\nlet myImport = await import(getPath());\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Array Concat Type\nDESCRIPTION: Generic type signature for array concatenation without tuple specifics.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction concat<T, U>(arr1: T[], arr2: U[]): Array<T | U>;\n```\n\n----------------------------------------\n\nTITLE: ES Module Syntax with CommonJS Behavior in TypeScript\nDESCRIPTION: This snippet shows how to use ES Module syntax that directly correlates to CommonJS 'require' in TypeScript. This ensures a 1-to-1 match between TypeScript files and CommonJS output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs = require(\"fs\");\nconst code = fs.readFileSync(\"hello.ts\", \"utf8\");\n```\n\n----------------------------------------\n\nTITLE: Bound Method Pattern Examples\nDESCRIPTION: Traditional examples of binding this in class methods using constructor binding and arrow functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n\n        this.greet = this.greet.bind(this);\n    }\n\n    greet() {\n        console.log(`Hello, my name is ${this.name}.`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Catch Clause Variables in TypeScript 2.5\nDESCRIPTION: Demonstrates the new ECMAScript feature allowing omission of catch clause variables when handling errors. Shows example using JSON.parse where the SyntaxError parameter isn't needed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.5.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet input = \"...\";\ntry {\n  JSON.parse(input);\n} catch {\n  // ^ Notice that our `catch` clause doesn't declare a variable.\n  console.log(\"Invalid JSON given\\n\\n\" + input);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interface with Separate Read/Write Types in TypeScript\nDESCRIPTION: Demonstrates the new syntax for interfaces/object types to support different reading/writing types on properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Thing {\n    get size(): number\n    set size(value: number | string | boolean);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @overload Tag in JSDoc for Function Overloads\nDESCRIPTION: Shows how to use the new @overload tag in JSDoc to declare function overloads in JavaScript, providing type checking similar to TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/**\n * @overload\n * @param {string} value\n * @return {void}\n */\n\n/**\n * @overload\n * @param {number} value\n * @param {number} [maximumFractionDigits]\n * @return {void}\n */\n\n/**\n * @param {string | number} value\n * @param {number} [maximumFractionDigits]\n */\nfunction printValue(value, maximumFractionDigits) {\n    if (typeof value === \"number\") {\n        const formatter = Intl.NumberFormat(\"en-US\", {\n            maximumFractionDigits,\n        });\n        value = formatter.format(value);\n    }\n\n    console.log(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Example: Properties Overriding Accessors in TypeScript\nDESCRIPTION: This snippet demonstrates the error now raised when declaring a property in a derived class that overrides a getter or setter in the base class. TypeScript now always issues an error in this scenario, not just when using useDefineForClassFields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 1049 2610\nclass Base {\n  get foo() {\n    return 100;\n  }\n  set foo(value) {\n    // ...\n  }\n}\n\nclass Derived extends Base {\n  foo = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Suffix Resolution for Imports in TypeScript\nDESCRIPTION: Example of how TypeScript resolves imports when moduleSuffixes is configured. With the configured suffixes, TypeScript will try multiple file paths in sequence based on the suffix list.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport * as foo from \"./foo\";\n```\n\n----------------------------------------\n\nTITLE: Improved Template String Type Checking in TypeScript\nDESCRIPTION: Illustrates improved checking of string assignability to template string types with interpolations in TypeScript 5.4.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction a<T extends {id: string}>() {\n    let x: `-${keyof T & string}`;\n    \n    // Used to error, now doesn't.\n    x = \"-id\";\n}\n```\n\n----------------------------------------\n\nTITLE: This Context in TypeScript Classes\nDESCRIPTION: Shows how 'this' context behaves in TypeScript classes and demonstrates using arrow functions to preserve context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  name = \"MyClass\";\n  getName = () => {\n    return this.name;\n  };\n}\nconst c = new MyClass();\nconst g = c.getName;\n// Prints \"MyClass\" instead of crashing\nconsole.log(g());\n```\n\n----------------------------------------\n\nTITLE: Multiple pattern matching with paths in tsconfig.json\nDESCRIPTION: This example demonstrates how TypeScript handles multiple matching patterns in paths, using the longest matching prefix before any * token when resolving module specifiers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"*\": [\"./src/foo/one.ts\"],\n      \"foo/*\": [\"./src/foo/two.ts\"],\n      \"foo/bar\": [\"./src/foo/three.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Types in TypeScript's Structural Type System\nDESCRIPTION: This example demonstrates how empty types behave in TypeScript's structural typing. It shows that any object can satisfy an empty class type because the empty class has no properties to check against.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for OOPers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Empty {}\n\nfunction fn(arg: Empty) {\n  // do something?\n}\n\n// No error, but this isn't an 'Empty' ?\nfn({ k: 10 });\n```\n\n----------------------------------------\n\nTITLE: Boolean Dictionary Index Signature\nDESCRIPTION: Demonstrates the use of string index signatures to create a dictionary-like type that only accepts boolean values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BooleanDictionary {\n  [key: string]: boolean;\n}\n\ndeclare let myDict: BooleanDictionary;\n\n// Valid to assign boolean values\nmyDict[\"foo\"] = true;\nmyDict[\"bar\"] = false;\n\n// Error, \"oops\" isn't a boolean\nmyDict[\"baz\"] = \"oops\";\n```\n\n----------------------------------------\n\nTITLE: Emitted JavaScript from TypeScript with React JSX Transform\nDESCRIPTION: The JavaScript code generated by TypeScript when compiling a React component using the new JSX transform. It shows how the JSX is transformed without requiring React import.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxImportSource.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nfunction App() {\n    return _jsx(\"h1\", { children: \"Hello World\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Default Parameters in TypeScript Functions\nDESCRIPTION: This snippet shows how to use default parameters in TypeScript functions, which are assigned a value if the user doesn't provide one or passes undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildName(firstName: string, lastName = \"Smith\") {\n  return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\"); // works correctly now, returns \"Bob Smith\"\nlet result2 = buildName(\"Bob\", undefined); // still works, also returns \"Bob Smith\"\nlet result3 = buildName(\"Bob\", \"Adams\", \"Sr.\"); // error, too many parameters\nlet result4 = buildName(\"Bob\", \"Adams\"); // ah, just right\n```\n\n----------------------------------------\n\nTITLE: Optional Properties with 'in' Operator in TypeScript\nDESCRIPTION: Shows how the 'in' operator handles optional properties for type narrowing. The example includes a Human type with optional swim and fly methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ntype Human = { swim?: () => void; fly?: () => void };\n\nfunction move(animal: Fish | Bird | Human) {\n  if (\"swim\" in animal) {\n    animal;\n//  ^?\n  } else {\n    animal;\n//  ^?\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SafeBox Class Implementation\nDESCRIPTION: Shows a class implementation with different getter and setter types for validation purposes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass SafeBox {\n    #value: string | undefined;\n    // Only accepts strings!\n    set value(newValue: string) {\n    }\n    // Must check for 'undefined'!\n    get value(): string | undefined {\n        return this.#value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subpath Patterns in package.json Exports\nDESCRIPTION: This example demonstrates how TypeScript resolves wildcard patterns in package.json exports, allowing packages to map a pattern of module requests to corresponding file paths.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"type\": \"module\",\n  \"exports\": {\n    \"./*.js\": {\n      \"types\": \"./types/*.d.ts\",\n      \"default\": \"./dist/*.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Index Signatures Not Affected by Relaxed Rules\nDESCRIPTION: Shows that the relaxed rules for optional properties do not apply to number index signatures, which are assumed to be array-like and dense in TypeScript 4.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\ndeclare let sortOfArrayish: { [key: number]: string };\ndeclare let numberKeys: { 42?: string };\n\nsortOfArrayish = numberKeys;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options\nDESCRIPTION: This snippet shows how to configure various TypeScript compiler options in a tsconfig.json file. It includes options for project structure, code generation, and type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"assumeChangesOnlyAffectDirectDependencies\": false,\n    \"baseUrl\": \"string\",\n    \"charset\": \"utf8\",\n    \"checkJs\": false,\n    \"composite\": false,\n    \"customConditions\": [],\n    \"declaration\": true,\n    \"declarationDir\": \"string\",\n    \"declarationMap\": false,\n    \"diagnostics\": false,\n    \"disableReferencedProjectLoad\": false,\n    \"disableSizeLimit\": false,\n    \"disableSolutionSearching\": false,\n    \"disableSourceOfProjectReferenceRedirect\": false,\n    \"downlevelIteration\": false,\n    \"emitBOM\": false,\n    \"emitDeclarationOnly\": false,\n    \"emitDecoratorMetadata\": false,\n    \"erasableSyntaxOnly\": false,\n    \"esModuleInterop\": true,\n    \"exactOptionalPropertyTypes\": false,\n    \"experimentalDecorators\": false,\n    \"explainFiles\": false,\n    \"extendedDiagnostics\": false,\n    \"forceConsistentCasingInFileNames\": true,\n    \"generateCpuProfile\": \"profile.cpuprofile\",\n    \"generateTrace\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ES2015 Default Initializers for Function Components\nDESCRIPTION: Shows how to implement defaultProps functionality for function components (formerly known as SFCs) using ES2015 default initializers. This approach is recommended for function components in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Greet({ name = \"world\" }: Props) {\n  return <div>Hello {name.toUpperCase()}!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Ambient Module Declaration for CSS Files\nDESCRIPTION: Shows how to use ambient module declarations with wildcard patterns to allow TypeScript to recognize imports for specific file extensions like CSS.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/globals.d.ts\n\n// Recognize all CSS files as module imports.\ndeclare module \"*.css\" {}\n```\n\n----------------------------------------\n\nTITLE: Reference Directive in Declaration Emit (TypeScript)\nDESCRIPTION: Demonstrates the new behavior for reference directives in declaration file emission, including the use of the 'preserve' attribute.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"some-lib\" preserve=\"true\" />\n/// <reference types=\"jest\" />\nimport path from \"path\";\nexport const myPath = path.parse(__filename);\n```\n\n----------------------------------------\n\nTITLE: TSConfig with Project References\nDESCRIPTION: Example of a tsconfig.json file configuration showing how to specify project references\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Project References.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"compilerOptions\": {\n        // The usual\n    },\n    \"references\": [\n        { \"path\": \"../src\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Promise<void> to Make resolve Parameter Optional\nDESCRIPTION: Shows how to use Promise<void> to make the resolve parameter optional when no value needs to be passed, leveraging new TypeScript 4.1 functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nnew Promise<void>((resolve) => {\n  //     ^^^^^^\n  doSomethingAsync(() => {\n    doSomething();\n    resolve();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Type Aliases Definition\nDESCRIPTION: Shows how to create type aliases using the type keyword.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype PrimitiveArray = Array<string | number | boolean>;\ntype MyNumber = number;\ntype NgScope = ng.IScope;\ntype Callback = () => void;\n```\n\n----------------------------------------\n\nTITLE: Correct Reference Types in TypeScript Declaration Files\nDESCRIPTION: Example of the correct way to reference external packages in TypeScript declaration files using reference types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"typescript\" />\n....\n```\n\n----------------------------------------\n\nTITLE: Import Assertion in TypeScript\nDESCRIPTION: This example shows the new import assertion syntax, which allows specifying the expected format of an imported module to the runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport obj from \"./something.json\" assert { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Using Type Modifiers on Import Names\nDESCRIPTION: This example demonstrates the use of the 'type' modifier on individual named imports to mix value and type imports from the same module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someFunc, type BaseType } from \"./some-module.js\";\n\nexport class Thing implements BaseType {\n    someMethod() {\n        someFunc();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Declaration for Resource Management in TypeScript\nDESCRIPTION: This snippet introduces the 'using' declaration for resource management. It demonstrates how a resource is automatically disposed of when the block is exited.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  using x = new C();\n  doSomethingWith(x);\n} // `x[Symbol.dispose]()` is called\n```\n\n----------------------------------------\n\nTITLE: Decorator Usage Example in TypeScript\nDESCRIPTION: Shows how to use decorators to modify class method behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  @readonly\n  @enumerable(false)\n  method() { ... }\n}\n\nfunction readonly(target, key, descriptor) {\n    descriptor.writable = false;\n}\n\nfunction enumerable(value) {\n    return function (target, key, descriptor) {\n        descriptor.enumerable = value;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Non-Nullable Types in TypeScript JSDoc\nDESCRIPTION: This code illustrates that non-nullable types in JSDoc have no special meaning in TypeScript and are treated as their original type without any additional null-checking behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {!number}\n * Just has type number\n */\nvar normal;\n```\n\n----------------------------------------\n\nTITLE: Interface Extension Example\nDESCRIPTION: Shows how to extend an interface with additional members using multiple declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  x: number;\n}\n// ... elsewhere ...\ninterface Foo {\n  y: number;\n}\nlet a: Foo = ...;\nconsole.log(a.x + a.y); // OK\n```\n\n----------------------------------------\n\nTITLE: Implementing React Function Component Properties in TypeScript\nDESCRIPTION: Demonstrates how to declare default props on React function components using the new function property declaration feature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.1.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const FooComponent = ({ name }) => <div>Hello! I am {name}</div>;\n\nFooComponent.defaultProps = {\n  name: \"(anonymous)\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases in TypeScript\nDESCRIPTION: Example of passing different types (string, function, class instance) that all satisfy a type alias requirement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getGreeting() {\n  return \"howdy\";\n}\nclass MyGreeter extends Greeter {}\n\ngreet(\"hello\");\ngreet(getGreeting);\ngreet(new MyGreeter());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating this Binding in CommonJS Module Imports\nDESCRIPTION: Example showing how TypeScript 4.4 changes the behavior of this binding when calling imported functions from CommonJS and AMD modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet fooModule = {\n  foo() {\n    console.log(this);\n  },\n};\n\nfooModule.foo();\n```\n\n----------------------------------------\n\nTITLE: Class Property Type Inference in TypeScript\nDESCRIPTION: Demonstrates how TypeScript 4.0 infers property types in classes using control flow analysis when noImplicitAny is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Square {\n  area;\n  sideLength;\n  constructor(sideLength: number) {\n    this.sideLength = sideLength;\n    this.area = sideLength ** 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Generator Functions in TypeScript 1.6\nDESCRIPTION: Demonstrates how TypeScript 1.6 can infer the return type of a generator function from its yield statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* g() {\n  for (var i = 0; i < 100; i++) {\n    yield \"\"; // infer string\n  }\n  yield* otherStringGenerator(); // infer element type of otherStringGenerator\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Always-Truthy Promise Checks in TypeScript\nDESCRIPTION: This example shows TypeScript 4.3's ability to detect errors when checking Promises without awaiting them. Under strictNullChecks, TypeScript will warn when a Promise is used as a condition without await.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nasync function foo(): Promise<boolean> {\n  return false;\n}\n\nasync function bar(): Promise<string> {\n  if (foo()) {\n    //  ~~~~~\n    // Error!\n    // This condition will always return true since\n    // this 'Promise<boolean>' appears to always be defined.\n    // Did you forget to use 'await'?\n    return \"true\";\n  }\n  return \"false\";\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Subpaths with Conditions and Extensions in package.json Exports\nDESCRIPTION: This example demonstrates how TypeScript resolves a module request with conditions through package.json exports, showing the step-by-step resolution process including extension substitution.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./index.mjs\",\n      \"require\": \"./index.cjs\"\n    },\n    \"./subpath\": {\n      \"import\": \"./subpath/index.mjs\",\n      \"require\": \"./subpath/index.cjs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with react-jsx Option\nDESCRIPTION: Demonstrates how JSX is transformed using the react-jsx option, which converts JSX to _jsx calls optimized for production builds.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-jsx\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Generator Function with Yield and Return Values\nDESCRIPTION: Demonstrates a generator function that yields string values and returns a number value, showing how IteratorResult types work in practice with both yield and return operations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction abc123() {\n    yield \"a\";\n    yield \"b\";\n    yield \"c\";\n    return 123;\n}\n\nconst iter = abc123();\n\niter.next(); // { value: \"a\", done: false }\niter.next(); // { value: \"b\", done: false }\niter.next(); // { value: \"c\", done: false }\niter.next(); // { value: 123, done: true }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Build Info File in TypeScript\nDESCRIPTION: Shows how to customize the name and location of the .tsbuildinfo file using the 'tsBuildInfoFile' option in tsconfig.json. This allows for more control over incremental build caching.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n// front-end.tsconfig.json\n{\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"tsBuildInfoFile\": \"./buildcache/front-end\",\n    \"outDir\": \"./lib\"\n  },\n  \"include\": [\"./src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Disposal of a Disposable Object in TypeScript\nDESCRIPTION: Using a disposable object with a try/finally block, manually calling its Symbol.dispose method. This still requires explicit cleanup code but centralizes the cleanup logic in the object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function doSomeWork() {\n    const file = new TempFile(\".some_temp_file\");\n\n    try {\n        // ...\n    }\n    finally {\n        file[Symbol.dispose]();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Module Type Declaration for TypeScript\nDESCRIPTION: Shows how to create a declaration file for CSS modules in TypeScript 5.0, enabling type safety when importing CSS files with arbitrary extensions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n/* app.css */\n.cookie-banner {\n  display: none;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// app.d.css.ts\ndeclare const css: {\n  cookieBanner: string;\n};\nexport default css;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// App.tsx\nimport styles from \"./app.css\";\n\nstyles.cookieBanner; // string\n```\n\n----------------------------------------\n\nTITLE: Using Enum Type Checking in Function Parameters\nDESCRIPTION: Demonstrates how TypeScript's type system enforces enum type checks, allowing only enum values to be passed to functions expecting an enum type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeValue(e: E) {}\n\ntakeValue(E.Foo); // works\ntakeValue(123); // error!\n```\n\n----------------------------------------\n\nTITLE: Namespaced TypeScript Validators\nDESCRIPTION: Shows how to organize validators using TypeScript namespaces for better code organization and scope management\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n\n  const lettersRegexp = /^[A-Za-z]+$/;\n  const numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return lettersRegexp.test(s);\n    }\n  }\n\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return s.length === 5 && numberRegexp.test(s);\n    }\n  }\n}\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(\n      `\"${s}\" - ${\n        validators[name].isAcceptable(s) ? \"matches\" : \"does not match\"\n      } ${name}`\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Type Assignment Examples\nDESCRIPTION: Illustrates type checking behavior when assigning functions to parameters expecting undefined returns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function takesFunction(f: () => undefined): undefined;\n// ❌ error!\n// Argument of type '() => void' is not assignable to parameter of type '() => undefined'.\ntakesFunction(() => {\n    // no returns\n});\n// ❌ error!\n// A function whose declared type is neither 'void' nor 'any' must return a value.\ntakesFunction((): undefined => {\n    // no returns\n});\n// ❌ error!\n// Argument of type '() => void' is not assignable to parameter of type '() => undefined'.\ntakesFunction(() => {\n    return;\n});\n// ✅ works\ntakesFunction(() => {\n    return undefined;\n});\n// ✅ works\ntakesFunction((): undefined => {\n    return;\n});\n```\n\n----------------------------------------\n\nTITLE: Compatibility Between Optional Properties and String Index Signatures\nDESCRIPTION: This example demonstrates TypeScript 4.2's relaxed rules that now allow assignment of objects with optional properties to objects with string index signatures, which was previously disallowed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype WesAndersonWatchCount = {\n  \"Fantastic Mr. Fox\"?: number;\n  \"The Royal Tenenbaums\"?: number;\n  \"Moonrise Kingdom\"?: number;\n  \"The Grand Budapest Hotel\"?: number;\n};\n\ndeclare const wesAndersonWatchCount: WesAndersonWatchCount;\nconst movieWatchCount: { [key: string]: number } = wesAndersonWatchCount;\n//    ~~~~~~~~~~~~~~~ error!\n// Type 'WesAndersonWatchCount' is not assignable to type '{ [key: string]: number; }'.\n//    Property '\"Fantastic Mr. Fox\"' is incompatible with index signature.\n//      Type 'number | undefined' is not assignable to type 'number'.\n//        Type 'undefined' is not assignable to type 'number'. (2322)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Function with Contextual Narrowing in TypeScript\nDESCRIPTION: This example demonstrates a generic function 'makeUnique' that processes either a Set or Array, showing TypeScript 4.3's improved contextual narrowing for generic types. The function takes a collection and a comparer function, returning the original collection with duplicates removed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeUnique<T>(\n  collection: Set<T> | T[],\n  comparer: (x: T, y: T) => number\n): Set<T> | T[] {\n  // Early bail-out if we have a Set.\n  // We assume the elements are already unique.\n  if (collection instanceof Set) {\n    return collection;\n  }\n\n  // Sort the array, then remove consecutive duplicates.\n  collection.sort(comparer);\n  for (let i = 0; i < collection.length; i++) {\n    let j = i;\n    while (\n      j < collection.length &&\n      comparer(collection[i], collection[j + 1]) === 0\n    ) {\n      j++;\n    }\n    collection.splice(i + 1, j - i);\n  }\n  return collection;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReadonlyArray with New Syntax in TypeScript 3.4\nDESCRIPTION: Demonstrates the new syntax for ReadonlyArray using the 'readonly' modifier for array types. This provides a more concise way to declare read-only arrays.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(arr: readonly string[]) {\n  arr.slice(); // okay\n  arr.push(\"hello!\"); // error!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Destructuring with Default Values for Optional Properties\nDESCRIPTION: Demonstrates the JavaScript destructuring pattern to handle optional properties with default values. This approach simplifies the code while ensuring properties have values within the function body.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction paintShape({ shape, xPos = 0, yPos = 0 }: PaintOptions) {\n  console.log(\"x coordinate at\", xPos);\n  //                             ^?\n  console.log(\"y coordinate at\", yPos);\n  //                             ^?\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Numeric Enums in TypeScript\nDESCRIPTION: An example of TypeScript's original enum implementation with numeric constants, where each member is assigned a specific number value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n    Foo = 10,\n    Bar = 20,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript's Import Elision Behavior\nDESCRIPTION: Illustrates how TypeScript by default eliminates imports that are only used for types when generating JavaScript output. The example imports Car type but doesn't use it as a value, so the import statement is completely removed from the output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/verbatimModuleSyntax.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Car } from \"./car\";\n\nexport function drive(car: Car) {\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function drive(car) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TypeScript Types\nDESCRIPTION: Demonstrates how to query and display type information for a variable in TypeScript using a special comment syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo = \"hello there!\"\n//  ^?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Stricter Object Literal Assignment Checks in TypeScript 1.6\nDESCRIPTION: Shows how TypeScript 1.6 enforces stricter checks for object literal assignments to catch excess or misspelled properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nvar x: { foo: number };\nx = { foo: 1, baz: 2 }; // Error, excess property `baz`\n\nvar y: { foo: number; bar?: number };\ny = { foo: 1, baz: 2 }; // Error, excess or misspelled property `baz`\n```\n\n----------------------------------------\n\nTITLE: Using export = and import = require() Syntax\nDESCRIPTION: Example showing the TypeScript-specific export = and import = require() syntax for CommonJS module interoperability, with both source TypeScript and compiled JavaScript output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport fs = require(\"fs\");\nexport = fs.readFileSync(\"...\");\n\n// @Filename: main.js\n\"use strict\";\nconst fs = require(\"fs\");\nmodule.exports = fs.readFileSync(\"...\");\n```\n\n----------------------------------------\n\nTITLE: Correct Function Declarations with Type Annotations (TypeScript)\nDESCRIPTION: This snippet demonstrates the correct ways to declare a function with proper type annotations for its parameters in TypeScript 4.8. It shows two equivalent correct forms of the declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function makePerson(options: { name: string, age: number }): Person;\n\n// or\n\ndeclare function makePerson({ name, age }: { name: string, age: number }): Person;\n```\n\n----------------------------------------\n\nTITLE: JSX Configuration with Custom Factories\nDESCRIPTION: Shows how to configure custom JSX factory and fragment factory settings in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting in CommonJS Format with TypeScript\nDESCRIPTION: This example demonstrates how to export identifiers using the CommonJS format in TypeScript by setting the 'exports' property on the global 'module' object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction absolute(num: number) {\n  if (num < 0) return num * -1;\n  return num;\n}\n\nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n  absolute,\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Promise resolve Parameter by Passing a Value\nDESCRIPTION: Demonstrates how to fix the Promise resolve parameter error by properly passing a value to the resolve function and adding an explicit type argument.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nnew Promise<number>((resolve) => {\n  //     ^^^^^^^^\n  doSomethingAsync((value) => {\n    doSomething();\n    resolve(value);\n    //      ^^^^^\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Side Effect Import in TypeScript\nDESCRIPTION: Shows an example of a side effect import in TypeScript, which imports a module without importing any specific values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"some-module\";\n```\n\n----------------------------------------\n\nTITLE: Improved Conditional Type Constraints in TypeScript\nDESCRIPTION: Demonstrates a more accurate behavior in TypeScript 5.4 for checking conditional type constraints, which may result in new type errors in existing code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype IsArray<T> = T extends any[] ? true : false;\n\nfunction foo<U extends object>(x: IsArray<U>) {\n    let first: true = x;    // Error\n    let second: false = x;  // Error, but previously wasn't\n}\n```\n\n----------------------------------------\n\nTITLE: Type Aliases, Interfaces, and Classes in TypeScript\nDESCRIPTION: Compares different ways to define types in TypeScript - type aliases, interfaces, and classes - showing how they are structurally compatible when they have the same shape, regardless of how they're defined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\ntype One = { p: string };\ninterface Two {\n  p: string;\n}\nclass Three {\n  p = \"Hello\";\n}\n\nlet x: One = { p: \"hi\" };\nlet two: Two = x;\ntwo = new Three();\n```\n\n----------------------------------------\n\nTITLE: Optional Parameter Function Calls in TypeScript\nDESCRIPTION: Shows the different ways to call a function with an optional parameter, including passing undefined explicitly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// All OK\nf();\nf(10);\nf(undefined);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Path Resolution Example\nDESCRIPTION: Shows the difference in import path resolution between CommonJS and ESM modules in TypeScript, demonstrating the need for file extensions in ESM.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ./foo.ts\nexport function helper() {\n    // ...\n}\n\n// ./bar.ts\nimport { helper } from \"./foo\"; // only works in CJS\n\nhelper();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ./bar.ts\nimport { helper } from \"./foo.js\"; // works in ESM & CJS\n\nhelper();\n```\n\n----------------------------------------\n\nTITLE: Computed Properties in TypeScript\nDESCRIPTION: Demonstrates the use of computed property names in object literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeNode(name: string, initialNeighbor: Node): Node {\n  return {\n    name: name,\n    neighbors: {\n      [initialNeighbor.name]: initialNeighbor,\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Tagged Templates Usage\nDESCRIPTION: Shows how to use generic type arguments with tagged template strings in TypeScript 2.9.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function styledComponent<Props>(\n  strs: TemplateStringsArray\n): Component<Props>;\n\ninterface MyProps {\n  name: string;\n  age: number;\n}\n\nstyledComponent<MyProps>`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\ndeclare function tag<T>(strs: TemplateStringsArray, ...args: T[]): T;\n\nlet a = tag<string | number>`${100} ${\"hello\"}`;\n```\n\n----------------------------------------\n\nTITLE: Using Side Effect Imports in TypeScript\nDESCRIPTION: Shows a side effect import that doesn't import any bindings but just executes the module code, which may be used for polyfills or global registrations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"some-module\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Elision in TypeScript\nDESCRIPTION: Shows how TypeScript by default removes imports that are only used for types. The import of Car is used only as a type annotation, so it's removed in the JavaScript output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Car } from \"./car\";\n\nexport function drive(car: Car) {\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function drive(car) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Triple-Slash Reference Directives With Preserve\nDESCRIPTION: Demonstrates triple-slash directives with the preserve attribute that will be kept in the compiler output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"...\" preserve=\"true\" />\n/// <reference types=\"...\" preserve=\"true\" />\n/// <reference lib=\"...\" preserve=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing React defaultProps in TypeScript JSX\nDESCRIPTION: Demonstrates how to use defaultProps in a React component with TypeScript 3.0. The example shows a Greet component with a defaultProp for the name property, allowing the component to be used without explicitly passing a name prop.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Props {\n  name: string;\n}\n\nexport class Greet extends React.Component<Props> {\n  render() {\n    const { name } = this.props;\n    return <div>Hello {name.toUpperCase()}!</div>;\n  }\n  static defaultProps = { name: \"world\" };\n}\n\n// Type-checks! No type assertions needed!\nlet el = <Greet />;\n```\n\n----------------------------------------\n\nTITLE: Default Const Enum Compilation Output\nDESCRIPTION: Shows how const enums are compiled to JavaScript by default, where enum references are replaced with literal values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/preserveConstEnums.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Function Return Type Validation Examples\nDESCRIPTION: Shows various function return type scenarios and their validation in TypeScript, including void, any, and undefined returns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ fine - we inferred that 'f1' returns 'void'\nfunction f1() {\n    // no returns\n}\n// ✅ fine - 'void' doesn't need a return statement\nfunction f2(): void {\n    // no returns\n}\n// ✅ fine - 'any' doesn't need a return statement\nfunction f3(): any {\n    // no returns\n}\n// ❌ error!\n// A function whose declared type is neither 'void' nor 'any' must return a value.\nfunction f4(): undefined {\n    // no returns\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation to ES2015 JavaScript\nDESCRIPTION: This example demonstrates compiling TypeScript to ES2015 (ES6) JavaScript. The --target es2015 flag is used, resulting in output that preserves the template string syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(person, date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\ngreet(\"Maddison\", new Date());\n```\n\n----------------------------------------\n\nTITLE: Enforcing Indexed Accessors with noPropertyAccessFromIndexSignature in TypeScript\nDESCRIPTION: This code snippet demonstrates the behavior when 'noPropertyAccessFromIndexSignature' is enabled. It shows that accessing an unknown property 'username' using dot notation results in an error, enforcing the use of indexed syntax for such properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noPropertyAccessFromIndexSignature.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 4111\n// @noPropertyAccessFromIndexSignature\ndeclare function getSettings(): GameSettings;\ninterface GameSettings {\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n  [key: string]: string;\n}\n// ---cut---\nconst settings = getSettings();\nsettings.speed;\nsettings.quality;\n\n// This would need to be settings[\"username\"];\nsettings.username;\n//       ^?\n```\n\n----------------------------------------\n\nTITLE: Declaring Ambient Modules in TypeScript\nDESCRIPTION: Example of an ambient module declaration for a runtime-provided module like 'path' in Node.js.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"path\" {\n  export function normalize(p: string): string;\n  export function join(...paths: any[]): string;\n  export var sep: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigned-before-use Checking in TypeScript\nDESCRIPTION: This code demonstrates the assigned-before-use checking in strict null checking mode. It shows how the compiler requires variables to be assigned before use, depending on their type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Compiled with --strictNullChecks\nlet x: number;\nlet y: number | null;\nlet z: number | undefined;\nx; // Error, reference not preceded by assignment\ny; // Error, reference not preceded by assignment\nz; // Ok\nx = 1;\ny = null;\nx; // Ok\ny; // Ok\n```\n\n----------------------------------------\n\nTITLE: Exporting with Arbitrary Module Identifiers in TypeScript\nDESCRIPTION: Shows how to export a binding with an arbitrary string literal identifier (like an emoji) that isn't a valid JavaScript identifier name.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst banana = \"🍌\";\n\nexport { banana as \"🍌\" };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Compatibility with Static Index Signatures\nDESCRIPTION: This example shows how static properties must be compatible with the static index signature type in a class. TypeScript enforces that all static properties match the type declared in the index signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  static prop = true;\n  //     ~~~~\n  // Error! Property 'prop' of type 'boolean'\n  // is not assignable to string index type\n  // 'string | number | undefined'.\n\n  static [propName: string]: string | number | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Readonly Tuple Length Property in TypeScript\nDESCRIPTION: Shows how attempting to modify the length property of a readonly tuple results in a type error. The example illustrates that the length property is now treated as readonly, preventing direct manipulation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nfunction overwriteLength(tuple: readonly [string, string, string]) {\n    // Now errors.\n    tuple.length = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Lowercase String Type in TypeScript\nDESCRIPTION: This example shows the correct usage of the lowercase 'string' type in TypeScript. It demonstrates how to properly type a function that reverses a string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reverse(s: string): string {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nreverse(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Static Property Mixins with TypeScript Generics\nDESCRIPTION: Demonstrates a workaround for static property mixins using functions that return classes with different generic types. This solution addresses the limitation where class expression pattern creates singletons that can't map to different variable types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction base<T>() {\n  class Base {\n    static prop: T;\n  }\n  return Base;\n}\n\nfunction derived<T>() {\n  class Derived extends base<T>() {\n    static anotherProp: T;\n  }\n  return Derived;\n}\n\nclass Spec extends derived<string>() {}\n\nSpec.prop; // string\nSpec.anotherProp; // string\n```\n\n----------------------------------------\n\nTITLE: Generic Type Recursion Depth Example\nDESCRIPTION: Shows how TypeScript handles recursive generic types and compatibility checking between deeply nested generic types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo<T> {\n  prop: T;\n}\n\ndeclare let x: Foo<Foo<Foo<Foo<Foo<Foo<string>>>>>>;\ndeclare let y: Foo<Foo<Foo<Foo<Foo<string>>>>>;\n\nx = y;\n```\n\n----------------------------------------\n\nTITLE: Correcting Override Checks on Computed Properties in TypeScript 5.6\nDESCRIPTION: This snippet illustrates the improved checking for override modifiers on computed properties in TypeScript 5.6. It shows error messages for incorrect use of 'override' and missing 'override' modifiers on computed properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = Symbol(\"foo\");\nconst bar = Symbol(\"bar\");\n\nclass Base {\n    [bar]() {}\n}\n\nclass Derived extends Base {\n    override [foo]() {}\n//           ~~~~~\n// error: This member cannot have an 'override' modifier because it is not declared in the base class 'Base'.\n\n    [bar]() {}\n//  ~~~~~\n// error under noImplicitOverride: This member must have an 'override' modifier because it overrides a member in the base class 'Base'.\n}\n```\n\n----------------------------------------\n\nTITLE: Computed and Constant Enum Members\nDESCRIPTION: Shows various ways to define enum members including computed and constant values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum FileAccess {\n  // constant members\n  None,\n  Read = 1 << 1,\n  Write = 1 << 2,\n  ReadWrite = Read | Write,\n  // computed member\n  G = \"123\".length,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Function-Exporting CommonJS Module from ES Modules\nDESCRIPTION: ES module syntax to import a CommonJS module that exports a function, showing the mismatch between specification and runtime behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as hello from \"./exports-function\";\nhello();\n\n// transpiles to:\n\nconst hello = require(\"./exports-function\");\nhello();\n```\n\n----------------------------------------\n\nTITLE: Multi-file Namespace Implementation\nDESCRIPTION: Demonstrates how to split TypeScript namespaces across multiple files using reference tags\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n  const lettersRegexp = /^[A-Za-z]+$/;\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return lettersRegexp.test(s);\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n  const numberRegexp = /^[0-9]+$/;\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return s.length === 5 && numberRegexp.test(s);\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"Validation.ts\" />\n/// <reference path=\"LettersOnlyValidator.ts\" />\n/// <reference path=\"ZipCodeValidator.ts\" />\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(\n      `\"${s}\" - ${\n        validators[name].isAcceptable(s) ? \"matches\" : \"does not match\"\n      } ${name}`\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Fluent Interface with This-Typing in TypeScript\nDESCRIPTION: Shows how to extend the BasicCalculator class to create a ScientificCalculator, demonstrating the benefits of this-typing for preserving type information in method chaining.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.7.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport BasicCalculator from \"./BasicCalculator\";\n\nexport default class ScientificCalculator extends BasicCalculator {\n  public constructor(value = 0) {\n    super(value);\n  }\n\n  public square() {\n    this.value = this.value ** 2;\n    return this;\n  }\n\n  public sin() {\n    this.value = Math.sin(this.value);\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Rest with this Destructuring Breaking Change\nDESCRIPTION: Example showing another breaking change in TypeScript 4.6 where destructuring this with a rest element now drops unspreadable and non-public members for consistency with other destructuring patterns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nclass Thing {\n  someProperty = 42;\n\n  someMethod() {\n    // ...\n  }\n\n  someOtherMethod() {\n    let { someProperty, ...rest } = this;\n\n    // Used to work, is now an error!\n    // Property 'someMethod' does not exist on type 'Omit<T, \"someProperty\" | \"someMethod\">'.\n    rest.someMethod();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Union Enum Comparison with Type Assertion\nDESCRIPTION: Illustrates another workaround for the union enum comparison error using a type assertion to treat the enum as a number.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  A = 0,\n  B = 1,\n}\n\nfunction doSomething(x: E) {\n  // Use a type assertion on 'x' because we know we're not actually just dealing with values from 'E'.\n  if ((x as number) === -1) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Constraints with @template in JavaScript\nDESCRIPTION: This example illustrates how to specify type constraints for generic type parameters using the @template tag in JavaScript. It shows a function with constrained type parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @template {string} K - K must be a string or string literal\n * @template {{ serious(): string }} Seriousalizable - must have a serious method\n * @param {K} key\n * @param {Seriousalizable} object\n */\nfunction seriousalize(key, object) {\n  // ????\n}\n```\n\n----------------------------------------\n\nTITLE: UseDefineForClassFields Compiler Option in TypeScript\nDESCRIPTION: The 'useDefineForClassFields' option controls whether TypeScript emits ECMAScript-standard-compliant class fields. It defaults to true for ES2022 or higher targets and false otherwise.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<code><a href='/tsconfig/#useDefineForClassFields'>--useDefineForClassFields</a></code>\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript compiler with CPU profile generation\nDESCRIPTION: This command runs the TypeScript compiler and generates a CPU profile saved to 'tsc-output.cpuprofile'. The profile can be analyzed in Chromium-based browsers to identify performance bottlenecks in the build process.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/generateCpuProfile.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run tsc --generateCpuProfile tsc-output.cpuprofile\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Interface in TypeScript\nDESCRIPTION: Shows how to create and use a custom generic interface to enable type-safe operations with different types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Backpack<Type> {\n  add: (obj: Type) => void;\n  get: () => Type;\n}\n\n// This line is a shortcut to tell TypeScript there is a\n// constant called `backpack`, and to not worry about where it came from.\ndeclare const backpack: Backpack<string>;\n\n// object is a string, because we declared it above as the variable part of Backpack.\nconst object = backpack.get();\n\n// Since the backpack variable is a string, you can't pass a number to the add function.\nbackpack.add(23);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for ES6 with Module Output\nDESCRIPTION: Shows how to configure TypeScript to target ES6 while specifying a different module output system (AMD in this case) using tsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.7.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"amd\",\n    \"target\": \"es6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Name Restrictions on Enum Members in TypeScript 5.4\nDESCRIPTION: This snippet shows that TypeScript 5.4 no longer allows enum members to use the names 'Infinity', '-Infinity', or 'NaN'. Attempting to use these names will result in a compilation error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Errors on all of these:\n//\n//  An enum member cannot have a numeric name.\nenum E {\n    Infinity = 0,\n    \"-Infinity\" = 1,\n    NaN = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating One-Way Assignability Between Arrays and ReadonlyArrays\nDESCRIPTION: Illustrates that assignability between regular Arrays and ReadonlyArrays is not bidirectional. You can assign a regular array to a readonly array, but not vice versa.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 4104\nlet x: readonly string[] = [];\nlet y: string[] = [];\n\nx = y;\ny = x;\n```\n\n----------------------------------------\n\nTITLE: Practical Const Assertion Example with Shape Types\nDESCRIPTION: Demonstrates practical usage of const assertions in a function returning shape objects, showing type narrowing without explicit type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getShapes() {\n  let result = [\n    { kind: \"circle\", radius: 100 },\n    { kind: \"square\", sideLength: 50 },\n  ] as const;\n\n  return result;\n}\n\nfor (const shape of getShapes()) {\n  // Narrows perfectly!\n  if (shape.kind === \"circle\") {\n    console.log(\"Circle radius\", shape.radius);\n  } else {\n    console.log(\"Square side length\", shape.sideLength);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Variable Declaration\nDESCRIPTION: Shows basic type inference in TypeScript with string variable declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet s = \"I'm a string!\";\n```\n\n----------------------------------------\n\nTITLE: Inferring Number Type in TypeScript\nDESCRIPTION: Demonstrates how TypeScript infers the type of a variable initialized with a number literal. The type of 'x' is automatically inferred as 'number'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = 3;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Stricter Type Checking for Type Parameters in TypeScript\nDESCRIPTION: Shows how TypeScript 3.9 introduces stricter type checking for type parameters that extend 'any'. Previously, such parameters were treated as 'any', but now they receive proper type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo<T extends any>(arg: T) {\n  arg.spfjgerijghoied;\n  //  ~~~~~~~~~~~~~~~\n  // Property 'spfjgerijghoied' does not exist on type 'T'.\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Parameters with JSDoc\nDESCRIPTION: Example of using JSDoc @param tags to document function parameters in JavaScript. This shows the proper format for parameter documentation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param x The first operand\n * @param y The second operand\n */\nfunction add(x, y) {\n  return x + y;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Import File Exclude Patterns in VS Code Settings\nDESCRIPTION: This snippet demonstrates how to configure the new TypeScript 4.8 feature for excluding specific files from auto-imports in VS Code. The example shows how to exclude Node.js type definitions to reduce pollution in the auto-imports list.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // Note that `javascript.preferences.autoImportFileExcludePatterns` can be specified for JavaScript too.\n    \"typescript.preferences.autoImportFileExcludePatterns\": [\n      \"**/node_modules/@types/node\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Import in CommonJS Format with TypeScript\nDESCRIPTION: This example demonstrates how to use destructuring to import specific exports from a CommonJS module in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { squareTwo } = require(\"./maths\");\nsquareTwo;\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Public Modifiers in TypeScript Classes\nDESCRIPTION: Shows how to explicitly mark class members as public in TypeScript, which is the default visibility. Demonstrates adding the public keyword to the name property, constructor, and move method of the Animal class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public name: string;\n\n  public constructor(theName: string) {\n    this.name = theName;\n  }\n\n  public move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using require() with --module preserve in TypeScript\nDESCRIPTION: Demonstrates the new ability to use require() calls with the --module preserve option in TypeScript 5.4, which allows for better compatibility with bundlers and conditional exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// previously errored\nimport myModule = require(\"module/path\");\n```\n\n----------------------------------------\n\nTITLE: Emitting 'use strict' in TypeScript\nDESCRIPTION: When the 'alwaysStrict' compiler option is enabled, TypeScript ensures that 'use strict' is emitted at the beginning of each source file. This enforces ECMAScript strict mode, which improves performance and catches certain errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/alwaysStrict.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use strict\";\n```\n\n----------------------------------------\n\nTITLE: Computed Enum Values\nDESCRIPTION: Shows how TypeScript computes enum values using bitwise operations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nenum MyFlags {\n  None = 0,\n  Neat = 1,\n  Cool = 2,\n  Awesome = 4,\n  Best = Neat | Cool | Awesome\n}\nvar b = MyFlags.Best; // emits var b = 7;\n```\n\n----------------------------------------\n\nTITLE: Merging Ambient Class and Interface Declarations\nDESCRIPTION: Example of extending an ambient class declaration using an interface declaration, demonstrating property access on the merged type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class Foo {\n  public x: number;\n}\n\ninterface Foo {\n  y: string;\n}\n\nfunction bar(foo: Foo) {\n  foo.x = 1; // OK, declared in the class Foo\n  foo.y = \"1\"; // OK, declared in the interface Foo\n}\n```\n\n----------------------------------------\n\nTITLE: AMD Module Output Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript transforms ES module syntax to Asynchronous Module Definition (AMD) format when using the 'amd' module option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: amd\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Label Preservation in Merged Tuple Types\nDESCRIPTION: Demonstrates how tuple element labels were previously lost when spreading tuples, but are now preserved in TypeScript 5.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype HasLabels = [a: string, b: string];\ntype HasNoLabels = [number, number];\ntype Merged = [...HasNoLabels, ...HasLabels];\n//   ^ [number, number, string, string]\n//\n//     'a' and 'b' were lost in 'Merged'\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Module Settings for Node.js\nDESCRIPTION: Shows how to configure TypeScript compiler options to use Node.js-specific module resolution with the new 'node16' setting.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"node16\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Import in ES Modules with CJS Equivalent\nDESCRIPTION: A namespace import in ES modules and its CommonJS transpiled equivalent, demonstrating how the entire module is imported as an object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mod from \"./module\";\nconsole.log(mod.default, mod.A, mod.B);\n\n// transpiles to:\n\nconst mod = require(\"./module\");\nconsole.log(mod.default, mod.A, mod.B);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Function Module in TypeScript\nDESCRIPTION: Example showing how to import and use a function-based module in TypeScript with different argument types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-function.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport greeter from \"super-greeter\";\n\ngreeter(2);\ngreeter(\"Hello world\");\n```\n\n----------------------------------------\n\nTITLE: Required this Qualifier in Method Bodies\nDESCRIPTION: Shows an error case where a method attempts to modify a variable without using this, highlighting that unqualified names in method bodies refer to the enclosing scope, not class members.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nlet x: number = 0;\n\nclass C {\n  x: string = \"hello\";\n\n  m() {\n    // This is trying to modify 'x' from line 1, not the class property\n    x = \"world\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Different Tuple Type Definitions\nDESCRIPTION: Shows the different ways to define tuple types, including unlabeled tuples, fully labeled tuples, and mixed labeled/unlabeled tuples which previously caused errors but are now supported in TypeScript 5.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ fine - no labels\ntype Pair1<T> = [T, T];\n\n// ✅ fine - all fully labeled\ntype Pair2<T> = [first: T, second: T];\n\n// ❌ previously an error\ntype Pair3<T> = [first: T, T];\n//                         ~\n// Tuple members must all have names\n// or all not have names.\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Type Parameters in TypeScript\nDESCRIPTION: Demonstrates a case where a generic type parameter (Str) is unnecessary because it's only used once and doesn't relate multiple values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet<Str extends string>(s: Str) {\n  console.log(\"Hello, \" + s);\n}\n\ngreet(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Return Detection in TypeScript\nDESCRIPTION: This snippet illustrates how TypeScript 1.8 can detect and report implicit returns in functions. It shows a function with a conditional return that implicitly returns undefined in some cases.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x) {\n  // Error: Not all code paths return a value.\n  if (x) {\n    return false;\n  }\n\n  // implicitly returns `undefined`\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Template String Type Compatibility in TypeScript\nDESCRIPTION: Extended example showing how TypeScript can now successfully match different template string patterns with various substitution positions, proving compatibility between mixed template strings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let s1: `${number}-${number}-${number}`;\ndeclare let s2: `1-2-3`;\ndeclare let s3: `${number}-2-3`;\ndeclare let s4: `1-${number}-3`;\ndeclare let s5: `1-2-${number}`;\ndeclare let s6: `${number}-2-${number}`;\n\n// Now *all of these* work!\ns1 = s2;\ns1 = s3;\ns1 = s4;\ns1 = s5;\ns1 = s6;\n```\n\n----------------------------------------\n\nTITLE: Var-args Parameter Inference from 'arguments' Usage\nDESCRIPTION: Demonstrates how TypeScript infers a var-arg parameter for functions that reference the 'arguments' object in their body. JSDoc can be used to specify the type of arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @param {...number} args */\nfunction sum(/* numbers */) {\n  var total = 0;\n  for (var i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Logging Implementation\nDESCRIPTION: Example showing manual implementation of method logging without decorators.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log(\"LOG: Entering method.\");\n\n        console.log(`Hello, my name is ${this.name}.`);\n\n        console.log(\"LOG: Exiting method.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Type Aliases in TypeScript 1.6\nDESCRIPTION: Demonstrates how to create and use generic type aliases in TypeScript 1.6, allowing for more flexible type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype Lazy<T> = T | (() => T);\n\nvar s: Lazy<string>;\ns = \"eager\";\ns = () => \"lazy\";\n\ninterface Tuple<A, B> {\n  a: A;\n  b: B;\n}\n\ntype Pair<T> = Tuple<T, T>;\n```\n\n----------------------------------------\n\nTITLE: Using Organized Types in TypeScript\nDESCRIPTION: Example of using methods with different option objects on a class instance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst g = new Greeter(\"Hello\");\ng.log({ verbose: true });\ng.alert({ modal: false, title: \"Current Greeting\" });\n```\n\n----------------------------------------\n\nTITLE: Declaring UMD Modules\nDESCRIPTION: Demonstrates how to declare a module that can be used both as a module import and a global variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const isPrime(x: number): boolean;\nexport as namespace mathLib;\n```\n\n----------------------------------------\n\nTITLE: Symbol Polyfill Configuration for Disposable Features\nDESCRIPTION: Simple polyfill implementation for Symbol.dispose and Symbol.asyncDispose to enable using and await using features in environments without native support.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nSymbol.dispose ??= Symbol(\"Symbol.dispose\");\nSymbol.asyncDispose ??= Symbol(\"Symbol.asyncDispose\");\n```\n\n----------------------------------------\n\nTITLE: Importing in CommonJS Format with TypeScript\nDESCRIPTION: This snippet shows how to import a CommonJS module using the 'require' statement in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst maths = require(\"./maths\");\nmaths.pi;\n```\n\n----------------------------------------\n\nTITLE: Export * as Namespace Syntax\nDESCRIPTION: Shows the new ECMAScript 2020 syntax for re-exporting all members of a module as a single namespace object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport * as utilities from \"./utilities.js\";\n```\n\n----------------------------------------\n\nTITLE: Improved Generic Function Composition in TypeScript 3.4\nDESCRIPTION: Illustrates how TypeScript 3.4 improves type inference when composing generic functions, preserving genericity and allowing for more flexible usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Box<T> {\n  value: T;\n}\n\nfunction makeArray<T>(x: T): T[] {\n  return [x];\n}\n\nfunction makeBox<U>(value: U): Box<U> {\n  return { value };\n}\n\n// has type '<T>(arg: T) => Box<T[]>'\nconst makeBoxedArray = compose(makeArray, makeBox);\n\n// works with no problem!\nmakeBoxedArray(\"hello!\").value[0].toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Property Undefined Handling in Constructors\nDESCRIPTION: Shows how TypeScript handles properties that aren't assigned in all constructor paths, marking them as potentially undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Square {\n  sideLength;\n\n  constructor(sideLength: number) {\n    if (Math.random()) {\n      this.sideLength = sideLength;\n    }\n  }\n\n  get area() {\n    return this.sideLength ** 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Checking Function in TypeScript\nDESCRIPTION: Shows a function implementation with both TypeScript type checking and runtime assertions for string parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doStuff(abc: string, xyz: string) {\n  assert(typeof abc === \"string\");\n  assert(typeof xyz === \"string\");\n\n  // do some stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local and Imported Type Declaration Conflict in TypeScript\nDESCRIPTION: This code example shows a previously allowed but now disallowed pattern where a type is both imported and locally declared, causing confusion about which definition applies. TypeScript 3.7 now correctly identifies this as a duplicate identifier error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// ./someOtherModule.ts\ninterface SomeType {\n  y: string;\n}\n\n// ./myModule.ts\nimport { SomeType } from \"./someOtherModule\";\nexport interface SomeType {\n  x: number;\n}\n\nfunction fn(arg: SomeType) {\n  console.log(arg.x); // Error! 'x' doesn't exist on 'SomeType'\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing for..in and for..of Loops with Set Object in TypeScript\nDESCRIPTION: Demonstrates how for..in and for..of behave differently with a Set object. The for..in loop iterates over object properties (like 'species'), while for..of iterates over the values stored in the Set.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Iterators and Generators.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet pets = new Set([\"Cat\", \"Dog\", \"Hamster\"]);\npets[\"species\"] = \"mammals\";\n\nfor (let pet in pets) {\n  console.log(pet); // \"species\"\n}\n\nfor (let pet of pets) {\n  console.log(pet); // \"Cat\", \"Dog\", \"Hamster\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Property Access\nDESCRIPTION: Shows JavaScript's behavior when accessing undefined object properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  name: \"Daniel\",\n  age: 26,\n};\n\nuser.location; // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Using Index Signatures with Type Checking\nDESCRIPTION: Shows how TypeScript handles both defined and undefined properties when using index signatures. Demonstrates type inference for both explicit and dynamic properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/index-signatures.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const modernConstants: ModernConstants;\n\n// This was defined earlier\nmodernConstants.raabe;\n//              ^?\n\n// This field was not defined above, so it is just `number`\nmodernConstants.lebesgue;\n//              ^?\n```\n\n----------------------------------------\n\nTITLE: Node16 Module Resolution Example with Output Directory\nDESCRIPTION: Demonstrates Node.js ESM module resolution with explicit file extensions and separate input/output directories using the node16 resolution strategy.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @moduleResolution: node16\n// @rootDir: src\n// @outDir: dist\n\n// @Filename: src/math.mts\nexport function add(a: number, b: number) {\n  return a + b;\n}\n\n// @Filename: src/main.mts\nimport { add } from \"./math.mjs\";\nadd(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NaN Inequality Behavior in JavaScript\nDESCRIPTION: Examples showing how inequality operators (!= and !==) behave with NaN values in JavaScript, demonstrating that everything is always not-equal to NaN.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(NaN != 0)  // true\nconsole.log(NaN !== 0) // true\n\nconsole.log(NaN != NaN)  // true\nconsole.log(NaN !== NaN) // true\n```\n\n----------------------------------------\n\nTITLE: Correct usage of ReturnType with typeof on a function\nDESCRIPTION: Shows the proper way to get the return type of a function by combining ReturnType with typeof to reference the function's type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  return { x: 10, y: 3 };\n}\ntype P = ReturnType<typeof f>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Alternative to Using 'infer' in Constraints\nDESCRIPTION: An alternative approach to achieve the same effect as using 'infer' in constraints, by using a conditional type instead.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\ntype AnyFunction = (...args: any[]) => any;\ntype ReturnType<T extends AnyFunction> = T extends (...args: any[]) => infer R\n  ? R\n  : any;\n```\n\n----------------------------------------\n\nTITLE: Improved Type Inference with Contravariant Positions in TypeScript\nDESCRIPTION: Illustrates how TypeScript 2.6 improves type inference when dealing with contravariant positions in function parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction combine<T>(...funcs: ((x: T) => void)[]): (x: T) => void {\n  return x => {\n    for (const f of funcs) f(x);\n  };\n}\n\nfunction animalFunc(x: Animal) {}\nfunction dogFunc(x: Dog) {}\n\nlet combined = combine(animalFunc, dogFunc); // (x: Dog) => void\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Property Access Without noPropertyAccessFromIndexSignature in TypeScript\nDESCRIPTION: This code snippet shows how TypeScript allows dot syntax to access fields not explicitly defined in the interface when 'noPropertyAccessFromIndexSignature' is not enabled. It demonstrates accessing known properties and an unknown property 'username'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noPropertyAccessFromIndexSignature.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GameSettings {\n  // Known up-front properties\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n\n  // Assume anything unknown to the interface\n  // is a string.\n  [key: string]: string;\n}\n\nconst settings = getSettings();\nsettings.speed;\n//       ^?\nsettings.quality;\n//       ^?\n\n// Unknown key accessors are allowed on\n// this object, and are `string`\nsettings.username;\n//       ^?\n```\n\n----------------------------------------\n\nTITLE: Stricter Intersection Type Checking Example\nDESCRIPTION: Demonstrates TypeScript 3.9's stricter checking of intersection types with optional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface A {\n  a: number; // notice this is 'number'\n}\n\ninterface B {\n  b: string;\n}\n\ninterface C {\n  a?: boolean; // notice this is 'boolean'\n  b: string;\n}\n\ndeclare let x: A & B;\ndeclare let y: C;\n\ny = x;\n```\n\n----------------------------------------\n\nTITLE: Non-Tail-Recursive Conditional Type in TypeScript\nDESCRIPTION: Shows a non-tail-recursive conditional type that won't be optimized by TypeScript 4.5's tail-recursion elimination. It demonstrates how to refactor it into a tail-recursive form.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetChars<S> =\n    S extends `${infer Char}${infer Rest}` ? Char | GetChars<Rest> : never;\n\ntype GetChars<S> = GetCharsHelper<S, never>;\ntype GetCharsHelper<S, Acc> =\n    S extends `${infer Char}${infer Rest}` ? GetCharsHelper<Rest, Char | Acc> : Acc;\n```\n\n----------------------------------------\n\nTITLE: Defining explicit 'this' parameter type in a function\nDESCRIPTION: A simple example showing how to use an explicit 'this' parameter in a function declaration. The 'this: void' syntax makes it clear that the function doesn't use 'this' context and helps TypeScript prevent accidental usage of 'this'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(this: void) {\n  // make sure `this` is unusable in this standalone function\n}\n```\n\n----------------------------------------\n\nTITLE: Using Map.groupBy in JavaScript\nDESCRIPTION: This example shows how to use the new Map.groupBy method in JavaScript, which groups array elements into a Map based on a grouping function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObj = Map.groupBy(array, (num, index) => {\n    return num % 2 === 0 ? \"even\" : \"odd\";\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Uncalled Function Checks in TypeScript\nDESCRIPTION: This snippet illustrates how TypeScript 3.7 identifies likely errors when a function is not called in an if condition, particularly for functions with no arguments or named like properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  isAdministrator(): boolean;\n  notify(): void;\n  doNotDisturb?(): boolean;\n}\n\n// Broken code, do not use!\nfunction doAdminThing(user: User) {\n  // oops!\n  if (user.isAdministrator) {\n    sudo();\n    editTheConfiguration();\n  } else {\n    throw new AccessDeniedError(\"User is not an admin\");\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doAdminThing(user: User) {\n    if (user.isAdministrator) {\n    //  ~~~~~~~~~~~~~~~~~~~~\n    // error! This condition will always return true since the function is always defined.\n    //        Did you mean to call it instead?\n```\n\n----------------------------------------\n\nTITLE: Using typesVersions with File Redirects in package.json\nDESCRIPTION: Configuration for package.json that uses typesVersions to redirect specific files based on the TypeScript version, allowing for version-specific declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"package-name\",\n  \"version\": \"1.0.0\",\n  \"types\": \"./index.d.ts\",\n  \"typesVersions\": {\n    \"<4.0\": { \"index.d.ts\": [\"index.v3.d.ts\"] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Incremental Builds in TypeScript\nDESCRIPTION: Demonstrates how to set up incremental builds using the 'incremental' flag in tsconfig.json. This feature saves information about the project graph from the last compilation to speed up subsequent builds.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"outDir\": \"./lib\"\n  },\n  \"include\": [\"./src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Let Declaration Scoping Example\nDESCRIPTION: Shows the block-scoping behavior of let declarations compared to var hoisting.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (foo) {\n  console.log(x); // Error, cannot refer to x before its declaration\n  let x = \"hello\";\n} else {\n  console.log(x); // Error, x is not declared in this block\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Import Behavior\nDESCRIPTION: Shows the three possible values for the importsNotUsedAsValues compiler option: 'remove' for dropping type-only imports, 'preserve' for keeping all imports regardless of usage, and 'error' for failing compilation when values are only used as types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/importsNotUsedAsValues.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"importsNotUsedAsValues\": \"remove\" | \"preserve\" | \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Case Clause Fall-through Detection in TypeScript\nDESCRIPTION: These snippets show how TypeScript 1.8 can detect and report fall-through cases in switch statements. It demonstrates both an error case and a valid case with an empty fall-through.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nswitch (x % 2) {\n  case 0: // Error: Fallthrough case in switch.\n    console.log(\"even\");\n\n  case 1:\n    console.log(\"odd\");\n    break;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nswitch (x % 3) {\n  case 0:\n  case 1:\n    console.log(\"Acceptable\");\n    break;\n\n  case 2:\n    console.log(\"This is *two much*!\");\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Parameter Inference from Contextual Types\nDESCRIPTION: Illustrates how TypeScript 2.4 improves type inference for functions with generic parameters, leading to better type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet f: <T>(x: T) => T = y => y;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating No Implicit Returns in TypeScript Function\nDESCRIPTION: This code snippet illustrates how the 'noImplicitReturns' option catches potential errors in function return paths. It shows a function where one code path fails to explicitly return a value, which would trigger an error when this option is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitReturns.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string {\n  if (color === \"blue\") {\n    return \"beats\";\n  } else {\n    \"bose\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript with 'removeComments' Set to False\nDESCRIPTION: This example shows the output when 'removeComments' is set to false or not set. The JSDoc comment is preserved in the resulting JavaScript code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/removeComments.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @removeComments: false\n/** The translation of 'Hello world' into Portuguese */\nexport const helloWorldPTBR = \"Olá Mundo\";\n```\n\n----------------------------------------\n\nTITLE: Importing CSS with TypeScript Declarations\nDESCRIPTION: This TypeScript snippet demonstrates how to import from a CSS file when declaration files are generated for non-code assets. The import uses the CSS module pattern where styles are imported as JavaScript objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDirs.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// @filename: main.css.d.ts\nexport const appClass = \"mainClassF3EC2\";\n// ---cut---\n// @filename: index.ts\nimport { appClass } from \"./main.css\";\n```\n\n----------------------------------------\n\nTITLE: Setting up rootDirs in tsconfig.json for Virtual Directories\nDESCRIPTION: This example configures rootDirs to treat two separate directories as a single virtual directory for module resolution. This allows files in 'src/views' and 'generated/templates/views' to import from each other using relative paths as if they were in the same directory.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDirs.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src/views\", \"generated/templates/views\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit this Type Declaration in Callbacks\nDESCRIPTION: Shows how to declare 'this' type explicitly in callback functions when working with database filtering.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DB {\n  filterUsers(filter: (this: User) => boolean): User[];\n}\n\nconst db = getDB();\nconst admins = db.filterUsers(function (this: User) {\n  return this.admin;\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties on Functions in TypeScript\nDESCRIPTION: Shows how to define properties on function declarations using direct property assignment, enabling canonical JavaScript patterns without namespace hacks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.1.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readImage(path: string, callback: (err: any, image: Image) => void) {\n  // ...\n}\n\nreadImage.sync = (path: string) => {\n  const contents = fs.readFileSync(path);\n  return decodeImageSync(contents);\n};\n```\n\n----------------------------------------\n\nTITLE: Const Enum Declaration\nDESCRIPTION: Shows how to declare const enums which are inlined during compilation for better performance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Enums.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nlet directions = [\n  Direction.Up,\n  Direction.Down,\n  Direction.Left,\n  Direction.Right,\n];\n```\n\n----------------------------------------\n\nTITLE: Enum and Symbol Property Access\nDESCRIPTION: Shows how to use keyof with enum and symbol properties to create type-safe property access.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum Enum {\n  A,\n  B,\n  C,\n}\n\nconst enumToStringMap = {\n  [Enum.A]: \"Name A\",\n  [Enum.B]: \"Name B\",\n  [Enum.C]: \"Name C\",\n};\n\nconst sym1 = Symbol();\nconst sym2 = Symbol();\nconst sym3 = Symbol();\n\nconst symbolToNumberMap = {\n  [sym1]: 1,\n  [sym2]: 2,\n  [sym3]: 3,\n};\n\ntype KE = keyof typeof enumToStringMap;\ntype KS = keyof typeof symbolToNumberMap;\n\nfunction getValue<T, K extends keyof T>(obj: T, key: K): T[K] {\n  return obj[key];\n}\n\nlet x1 = getValue(enumToStringMap, Enum.C);\nlet x2 = getValue(symbolToNumberMap, sym3);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Variadic Tuple Tail Function\nDESCRIPTION: Implementation of tail function using TypeScript 4.0's variadic tuple types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tail<T extends any[]>(arr: readonly [any, ...T]) {\n  const [_ignored, ...rest] = arr;\n  return rest;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Arguments with the toFixed Method\nDESCRIPTION: Demonstrates how JavaScript functions like toFixed can take a variable number of arguments, which can be modeled in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(n: number) {\n  console.log(n.toFixed()); // 0 arguments\n  console.log(n.toFixed(3)); // 1 argument\n}\n```\n\n----------------------------------------\n\nTITLE: React 17 Development JSX Configuration\nDESCRIPTION: TSConfig setup for React 17 JSX transformation in development builds, extending the production config.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsxdev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NoInfer with Generic Functions in TypeScript\nDESCRIPTION: Demonstrates the use of NoInfer in a generic function to prevent type inference for a specific parameter. The example shows a createStreetLight function where the default color must be one of the provided colors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createStreetLight<C extends string>(\n  colors: C[],\n  defaultColor?: NoInfer<C>,\n) {\n  // ...\n}\n\ncreateStreetLight([\"red\", \"yellow\", \"green\"], \"red\");  // OK\ncreateStreetLight([\"red\", \"yellow\", \"green\"], \"blue\");  // Error\n```\n\n----------------------------------------\n\nTITLE: Callback Invocation with Optional Parameters\nDESCRIPTION: Shows how callbacks with optional parameters might be called, highlighting the mismatch between intent and actual TypeScript behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nmyForEach([1, 2, 3], (a) => console.log(a));\nmyForEach([1, 2, 3], (a, i) => console.log(a, i));\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Import Transformation\nDESCRIPTION: Shows how TypeScript transforms imports in CommonJS modules with esModuleInterop enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport fs from \"fs\"; // transformed\nconst dynamic = import(\"mod\"); // not transformed\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs_1 = __importDefault(require(\"fs\")); // transformed\nconst dynamic = import(\"mod\"); // not transformed\n```\n\n----------------------------------------\n\nTITLE: Basic Function with Object Parameter in TypeScript\nDESCRIPTION: A simple function that accepts an object with a label property of type string and prints it to the console. This demonstrates TypeScript's structural typing without using interfaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printLabel(labeledObj: { label: string }) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = { size: 10, label: \"Size 10 Object\" };\nprintLabel(myObj);\n```\n\n----------------------------------------\n\nTITLE: Error Example: Accessors Overriding Properties in TypeScript\nDESCRIPTION: This snippet shows the error that occurs when attempting to override a property from a base class with a getter in a derived class. This is now always treated as an error in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2611\nclass Base {\n  prop = 10;\n}\n\nclass Derived extends Base {\n  get prop() {\n    return 100;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Guards with typeof\nDESCRIPTION: Demonstrates type guard usage with typeof operator for runtime type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvar x: any = /* ... */;\nif(typeof x === 'string') {\n    console.log(x.subtr(1)); // Error, 'subtr' does not exist on 'string'\n}\n// x is still any here\nx.unknown(); // OK\n```\n\n----------------------------------------\n\nTITLE: Type Checking with BuiltinIteratorReturn and strictBuiltinIteratorReturn\nDESCRIPTION: Demonstrates how the --strictBuiltinIteratorReturn flag helps catch potential errors when using iterators by making the return value undefined instead of any under strict mode.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* uppercase(iter: Iterator<string, BuiltinIteratorReturn>) {\n    while (true) {\n        const { value, done } = iter.next();\n        yield value.toUppercase();\n        //    ~~~~~ ~~~~~~~~~~~\n        // error! ┃      ┃\n        //        ┃      ┗━ Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?\n        //        ┃\n        //        ┗━ 'value' is possibly 'undefined'.\n\n        if (done) {\n            return;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using resolution-mode in Import Types\nDESCRIPTION: Shows how to use resolution-mode attribute in type imports to control module resolution behavior between 'require' and 'import' semantics.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"pkg\" resolution-mode=\"require\" />\n\n// or\n\n/// <reference types=\"pkg\" resolution-mode=\"import\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Resolve `pkg` as if we were importing with a `require()`\nimport type { TypeFromRequire } from \"pkg\" with {\n    \"resolution-mode\": \"require\"\n};\n\n// Resolve `pkg` as if we were importing with an `import`\nimport type { TypeFromImport } from \"pkg\" with {\n    \"resolution-mode\": \"import\"\n};\n\nexport interface MergedType extends TypeFromRequire, TypeFromImport {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TypeFromRequire =\n    import(\"pkg\", { with: { \"resolution-mode\": \"require\" } }).TypeFromRequire;\n\nexport type TypeFromImport =\n    import(\"pkg\", { with: { \"resolution-mode\": \"import\" } }).TypeFromImport;\n\nexport interface MergedType extends TypeFromRequire, TypeFromImport {}\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc property modifiers in JavaScript\nDESCRIPTION: Demonstrates the use of JSDoc tags for property modifiers in JavaScript, including @private for access control and @readonly for immutability.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nclass Foo {\n  constructor() {\n    /** @private */\n    this.stuff = 100;\n  }\n\n  printStuff() {\n    console.log(this.stuff);\n  }\n}\n\nnew Foo().stuff;\n//        ~~~~~\n// error! Property 'stuff' is private and only accessible within class 'Foo'.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Detection Example\nDESCRIPTION: This code snippet demonstrates how TypeScript catches type errors. It shows an incorrect function call where a string is passed instead of a Date object, which TypeScript will flag as an error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n\ngreet(\"Maddison\", Date());\n```\n\n----------------------------------------\n\nTITLE: Implementing Mapped Types on Tuples in TypeScript\nDESCRIPTION: Demonstrates how mapped object types work with tuples and arrays in TypeScript 3.1, converting numeric properties to Promise types while preserving the tuple structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.1.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapToPromise<T> = { [K in keyof T]: Promise<T[K]> };\n\ntype Coordinate = [number, number];\n\ntype PromiseCoordinate = MapToPromise<Coordinate>; // [Promise<number>, Promise<number>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Trailing Commas in TypeScript Functions\nDESCRIPTION: Demonstrates the usage of trailing commas in both function parameter declarations and function argument lists, which is part of a Stage-3 ECMAScript proposal that compiles to valid ES3/ES5/ES6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(\n  bar: Bar,\n  baz: Baz // trailing commas are OK in parameter lists\n) {\n  // Implementation...\n}\n\nfoo(\n  bar,\n  baz // and in argument lists\n);\n```\n\n----------------------------------------\n\nTITLE: Method Renaming Impact in Class Inheritance\nDESCRIPTION: Shows how renaming methods in the base class can lead to synchronization issues in derived classes when override modifier is not used.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitOverride.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Album {\n  setup() {\n    // Default behavior\n  }\n}\n\nclass MLAlbum extends Album {\n  setup() {\n    // Override to get info from algorithm\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IteratorResult Type Structure in TypeScript\nDESCRIPTION: Shows the TypeScript interface definitions for IteratorResult, IteratorYieldResult, and IteratorReturnResult types that model the structure of iterator results with value and done properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\n\ninterface IteratorYieldResult<TYield> {\n    done?: false;\n    value: TYield;\n}\n\ninterface IteratorReturnResult<TReturn> {\n    done: true;\n    value: TReturn;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Implementation of FirstIfString in TypeScript\nDESCRIPTION: Shows an alternative, more manual implementation of the FirstIfString conditional type without using infer.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype FirstIfString<T> =\n    T extends [string, ...unknown[]]\n        // Grab the first type out of `T`\n        ? T[0]\n        : never;\n```\n\n----------------------------------------\n\nTITLE: UMD Module Format in JavaScript\nDESCRIPTION: Demonstrates the UMD (Universal Module Definition) module format, which supports both AMD and CommonJS loaders. It includes conditional logic for different module systems.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"mod\", \"mod\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var __syncRequire = typeof module === \"object\" && typeof module.exports === \"object\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.e1 = void 0;\n    const mod_1 = require(\"mod\");\n    const mod = require(\"mod\");\n    const dynamic = __syncRequire ? Promise.resolve().then(() => require(\"mod\")) : new Promise((resolve_1, reject_1) => { require([\"mod\"], resolve_1, reject_1); });\n\n    console.log(mod_1.default, mod_1.y, mod_1.z, mod, dynamic);\n    exports.e1 = 0;\n    exports.default = \"default export\";\n});\n```\n\n----------------------------------------\n\nTITLE: Const Assertion in JSDoc\nDESCRIPTION: This example shows how to use const assertions in JavaScript files using JSDoc syntax to achieve more precise and immutable types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// type is { prop: string }\nlet a = { prop: \"hello\" };\n\n// type is { readonly prop: \"hello\" }\nlet b = /** @type {const} */ ({ prop: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Stricter Generator Functions in TypeScript\nDESCRIPTION: Demonstrates improved type-checking for generator functions, showing how TypeScript 3.6 correctly handles yielded vs returned values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* foo() {\n  if (Math.random() < 0.5) yield 100;\n  return \"Finished!\";\n}\n\nlet iter = foo();\nlet curr = iter.next();\nif (curr.done) {\n  // TypeScript 3.5 and prior thought this was a 'string | number'.\n  // It should know it's 'string' since 'done' was 'true'!\n  curr.value;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Shorthand Ambient Modules\nDESCRIPTION: Demonstrates how to quickly declare an external module without writing out its full type definition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"hot-new-module\";\n```\n\n----------------------------------------\n\nTITLE: Constructor Parameter Decorator Type-Checking in TypeScript 5.0\nDESCRIPTION: This snippet demonstrates the more accurate type-checking for decorators on constructor parameters under --experimentalDecorators in TypeScript 5.0.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const inject:\n  (entity: any) =>\n    (target: object, key: string | symbol, index?: number) => void;\n\nexport class Foo {}\n\nexport class C {\n    constructor(@inject(Foo) private x: any) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Spread and Generic Spread Results\nDESCRIPTION: Illustrates the difference between non-generic spread expressions and spreads created through instantiation of generic types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction spread<T, U>(t: T, u: U) {\n  return { ...t, ...u }; // T & U\n}\n\ndeclare let x: { a: string; b: number };\ndeclare let y: { b: string; c: boolean };\n\nlet s1 = { ...x, ...y }; // { a: string, b: string, c: boolean }\nlet s2 = spread(x, y); // { a: string, b: number } & { b: string, c: boolean }\nlet b1 = s1.b; // string\nlet b2 = s2.b; // number & string\n```\n\n----------------------------------------\n\nTITLE: Defining Constrained Constructor Types for Mixins in TypeScript\nDESCRIPTION: Creates specific constructor types with different constraints for use with mixins. This includes Positionable, Spritable, and Loggable types that require base classes to have certain properties or methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Positionable = GConstructor<{ setPos: (x: number, y: number) => void }>;\ntype Spritable = GConstructor<Sprite>;\ntype Loggable = GConstructor<{ print: () => void }>;\n```\n\n----------------------------------------\n\nTITLE: Comparing this and super Method Access\nDESCRIPTION: Demonstrates how this and super can be interchangeable when methods aren't overridden.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Base {\n    someMethod() {\n        console.log(\"someMethod called!\");\n    }\n}\n\nclass Derived extends Base {\n    someOtherMethod() {\n        // These act identically.\n        this.someMethod();\n        super.someMethod();\n    }\n}\n\nnew Derived().someOtherMethod();\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Declaration Files in TypeScript\nDESCRIPTION: Example of how to configure package.json to include TypeScript declaration files with your npm package by specifying the types property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"awesome\",\n  \"author\": \"Vandelay Industries\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./lib/main.js\",\n  \"types\": \"./lib/main.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using declare Modifier to Mitigate Property Re-declaration Issues\nDESCRIPTION: This snippet shows how to use the declare modifier to indicate that a property should have no emit, helping to mitigate issues with property re-declaration when using useDefineForClassFields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  animalStuff: any;\n}\ninterface Dog extends Animal {\n  dogStuff: any;\n}\n\nclass AnimalHouse {\n  resident: Animal;\n  constructor(animal: Animal) {\n    this.resident = animal;\n  }\n}\n\nclass DogHouse extends AnimalHouse {\n  declare resident: Dog;\n  //  ^^^^^^^\n  // 'resident' now has a 'declare' modifier,\n  // and won't produce any output code.\n\n  constructor(dog: Dog) {\n    super(dog);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Abstract Property Declaration\nDESCRIPTION: Shows the correct way to declare abstract properties in TypeScript 4.4 by only specifying the type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class C {\n  abstract prop: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Import Syntax in TypeScript\nDESCRIPTION: Shows the standard import syntax used when 'allowSyntheticDefaultImports' is not enabled, requiring the use of 'import * as' for modules without default exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowSyntheticDefaultImports.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\";\n```\n\n----------------------------------------\n\nTITLE: Expression Operators with Null and Undefined in TypeScript\nDESCRIPTION: This snippet illustrates how expression operators in TypeScript 2.0 handle operands that may include null or undefined. It shows type inference for addition and logical operators.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Compiled with --strictNullChecks\nfunction sum(a: number | null, b: number | null) {\n  return a + b; // Produces value of type number\n}\n\ninterface Entity {\n  name: string;\n}\nlet x: Entity | null;\nlet s = x && x.name; // s is of type string | null\nlet y = x || { name: \"test\" }; // y is of type Entity\n```\n\n----------------------------------------\n\nTITLE: Using @readonly JSDoc modifier in JavaScript\nDESCRIPTION: Shows how to use the @readonly JSDoc modifier in JavaScript to create read-only properties that can only be written during initialization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nclass Foo {\n  constructor() {\n    /** @readonly */\n    this.stuff = 100;\n  }\n\n  writeToStuff() {\n    this.stuff = 200;\n    //   ~~~~~\n    // Cannot assign to 'stuff' because it is a read-only property.\n  }\n}\n\nnew Foo().stuff++;\n//        ~~~~~\n// Cannot assign to 'stuff' because it is a read-only property.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Detection with strictFunctionTypes Enabled\nDESCRIPTION: Example showing how TypeScript correctly prevents unsafe function assignments when strictFunctionTypes is enabled. The compiler identifies the type mismatch between a function that only accepts strings and a type that requires handling both strings and numbers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictFunctionTypes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment is prevented\nlet func: StringOrNumberFunc = fn;\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Output for Module Imports\nDESCRIPTION: Shows the JavaScript code generated by TypeScript when using esModuleInterop, including the __importStar and __importDefault helper functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.7.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar __importStar = (this && this.__importStar) || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function(mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n};\nexports.__esModule = true;\nvar foo = __importStar(require(\"foo\"));\nvar bar_1 = __importDefault(require(\"bar\"));\n```\n\n----------------------------------------\n\nTITLE: Type Guards with Union Types\nDESCRIPTION: Shows type guard usage with union types and else blocks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvar x: string | HTMLElement = /* ... */;\nif(typeof x === 'string') {\n    // x is string here, as shown above\n}\nelse {\n    // x is HTMLElement here\n    console.log(x.innerHTML);\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Any Type in Catch Variables\nDESCRIPTION: Shows how to opt out of strict unknown typing in catch clauses by explicitly annotating the catch variable with any type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  executeSomeThirdPartyCode();\n} catch (err: any) {\n  console.error(err.message); // Works again!\n}\n```\n\n----------------------------------------\n\nTITLE: Implements Clause Not Affecting Type Checking Within Class\nDESCRIPTION: Demonstrates that an implements clause only checks that a class can be treated as the interface type, but doesn't affect type checking within the class itself.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7006\ninterface Checkable {\n  check(name: string): boolean;\n}\n\nclass NameChecker implements Checkable {\n  check(s) {\n    // Notice no error here\n    return s.toLowerCase() === \"ok\";\n    //         ^?\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Null and Undefined Types in TypeScript\nDESCRIPTION: Shows the declaration and usage of null and undefined types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet u: undefined = undefined;\nlet n: null = null;\n```\n\n----------------------------------------\n\nTITLE: Using Reference Directives with Resolution Mode in TypeScript\nDESCRIPTION: Examples of the reference directive syntax with the new resolution-mode option that allows specifying how module types should be resolved (require or import mode).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"pkg\" resolution-mode=\"require\" />\n\n// or\n\n/// <reference types=\"pkg\" resolution-mode=\"import\" />\n```\n\n----------------------------------------\n\nTITLE: Union Array Methods Error Example - TypeScript\nDESCRIPTION: Shows an example of using forEach on union array types resulting in an implicit any error under noImplicitAny.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.3.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Dog {\n  kind: \"dog\";\n  dogProp: any;\n}\ninterface Cat {\n  kind: \"cat\";\n  catProp: any;\n}\n\nconst catOrDogArray: Dog[] | Cat[] = [];\n\ncatOrDogArray.forEach(animal => {\n  //                ~~~~~~ error!\n  // Parameter 'animal' implicitly has an 'any' type.\n});\n```\n\n----------------------------------------\n\nTITLE: Generic Rest Parameters Example in TypeScript\nDESCRIPTION: Shows how generic rest parameters can be used for higher-order function binding with type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function bind<T, U extends any[], V>(\n  f: (x: T, ...args: U) => V,\n  x: T\n): (...args: U) => V;\n\ndeclare function f3(x: number, y: string, z: boolean): void;\n\nconst f2 = bind(f3, 42); // (y: string, z: boolean) => void\nconst f1 = bind(f2, \"hello\"); // (z: boolean) => void\nconst f0 = bind(f1, true); // () => void\n\nf3(42, \"hello\", true);\nf2(\"hello\", true);\nf1(true);\nf0();\n```\n\n----------------------------------------\n\nTITLE: Using Module Class Example in TypeScript\nDESCRIPTION: Example showing how to use a class-based module in TypeScript using CommonJS require syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Greeter = require(\"super-greeter\");\n\nconst greeter = new Greeter();\ngreeter.greet();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Flag - allowImportingTsExtensions\nDESCRIPTION: Compiler flag that enables importing TypeScript files with their native extensions (.ts, .mts, .tsx). This option can only be used with --noEmit or --emitDeclarationOnly flags since these import paths would not work in JavaScript output files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowImportingTsExtensions.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n--allowImportingTsExtensions\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in TypeScript\nDESCRIPTION: Demonstrates various import statements in TypeScript, including default imports, named imports, namespace imports, and dynamic imports. Also shows basic exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport x, { y, z } from \"mod\";\nimport * as mod from \"mod\";\nconst dynamic = import(\"mod\");\nconsole.log(x, y, z, mod, dynamic);\n\nexport const e1 = 0;\nexport default \"default export\";\n```\n\n----------------------------------------\n\nTITLE: Explicit 'types' Condition in package.json Exports\nDESCRIPTION: This example shows how TypeScript handles an explicit 'types' condition in package.json exports, demonstrating the resolution process with separate type definition paths for import and require conditions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"exports\": {\n    \"./subpath\": {\n      \"import\": {\n        \"types\": \"./types/subpath/index.d.mts\",\n        \"default\": \"./es/subpath/index.mjs\"\n      },\n      \"require\": {\n        \"types\": \"./types/subpath/index.d.cts\",\n        \"default\": \"./cjs/subpath/index.cjs\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UMD Module Output Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript transforms ES module syntax to Universal Module Definition (UMD) format when using the 'umd' module option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: umd\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Implementing FirstIfString Conditional Type in TypeScript\nDESCRIPTION: Defines a conditional type that returns the first element of a tuple if it's a string-like type, demonstrating the use of infer and extends.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype FirstIfString<T> =\n    T extends [infer S, ...unknown[]]\n        ? S extends string ? S : never\n        : never;\n\n // string\ntype A = FirstIfString<[string, number, number]>;\n\n// \"hello\"\ntype B = FirstIfString<[\"hello\", number, number]>;\n\n// \"hello\" | \"world\"\ntype C = FirstIfString<[\"hello\" | \"world\", boolean]>;\n\n// never\ntype D = FirstIfString<[boolean, number, string]>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports for CommonJS and ESM in package.json\nDESCRIPTION: A package.json configuration that supports separate entry-points for CommonJS and ESM modules in Node.js, allowing different resolution paths based on module type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n    \"name\": \"my-package\",\n    \"type\": \"module\",\n    \"exports\": {\n        \".\": {\n            // Entry-point for `import \"my-package\"` in ESM\n            \"import\": \"./esm/index.js\",\n\n            // Entry-point for `require(\"my-package\") in CJS\n            \"require\": \"./commonjs/index.cjs\",\n        },\n    },\n\n    // CJS fall-back for older versions of Node.js\n    \"main\": \"./commonjs/index.cjs\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using new.target in Constructable Functions in TypeScript\nDESCRIPTION: Demonstrates how to use new.target to determine if a function was called with 'new' in TypeScript 2.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.2.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  if (new.target) {\n    /* called via 'new' */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Constant Tuples with Readonly Types\nDESCRIPTION: Demonstrates how 'const' assertions create readonly tuple types, which can cause type incompatibilities with functions expecting mutable tuples. This example shows a type error when passing a readonly tuple to a function expecting a mutable one.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\nlet point = [3, 4] as const;\n\nfunction distanceFromOrigin([x, y]: [number, number]) {\n  return Math.sqrt(x ** 2 + y ** 2);\n}\n\ndistanceFromOrigin(point);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import Type with Resolution Mode in TypeScript\nDESCRIPTION: Example showing how to use dynamic import() types with resolution-mode assertions to control module resolution behavior when importing types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nexport type TypeFromRequire =\n    import(\"pkg\", { assert: { \"resolution-mode\": \"require\" } }).TypeFromRequire;\n\nexport type TypeFromImport =\n    import(\"pkg\", { assert: { \"resolution-mode\": \"import\" } }).TypeFromImport;\n\nexport interface MergedType extends TypeFromRequire, TypeFromImport {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Field Behavior in TypeScript\nDESCRIPTION: This snippet shows how TypeScript previously handled public class fields and how it might be standardized differently in the future using Object.defineProperty.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  foo = 100;\n  bar: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  constructor() {\n    this.foo = 100;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  constructor() {\n    Object.defineProperty(this, \"foo\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 100,\n    });\n    Object.defineProperty(this, \"bar\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Immutability of Types in TypeScript\nDESCRIPTION: Demonstrates that types in TypeScript cannot be changed after creation, resulting in an error when attempting to redefine.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype Window = {\n  title: string;\n}\n\ntype Window = {\n  ts: TypeScriptAPI;\n}\n\n// Error: Duplicate identifier 'Window'.\n```\n\n----------------------------------------\n\nTITLE: GlobalThis Type Checking Examples\nDESCRIPTION: Shows usage and behavior of globalThis in TypeScript, including differences between var and let/const declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// in a global file:\n\nvar abc = 100;\n\n// Refers to 'abc' from above.\nglobalThis.abc = 200;\n```\n\n----------------------------------------\n\nTITLE: Ambient Namespace Declaration\nDESCRIPTION: Example of declaring ambient namespaces for external JavaScript libraries using D3 as an example\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace D3 {\n  export interface Selectors {\n    select: {\n      (selector: string): Selection;\n      (element: EventTarget): Selection;\n    };\n  }\n\n  export interface Event {\n    x: number;\n    y: number;\n  }\n\n  export interface Base extends Selectors {\n    event: Event;\n  }\n}\n\ndeclare var d3: D3.Base;\n```\n\n----------------------------------------\n\nTITLE: Excluding Modules from Automatic Type Acquisition\nDESCRIPTION: Code example showing how to exclude specific modules (like jquery) from TypeScript's automatic type acquisition, even when they are available in node_modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/typeAcquisition.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"exclude\": [\"jquery\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapIterator Interface with BuiltinIteratorReturn\nDESCRIPTION: Showcases the use of the new BuiltinIteratorReturn intrinsic type in TypeScript's standard library definitions for iterators, specifically for Map collections.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MapIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): MapIterator<T>;\n}\n\n// ...\n\ninterface Map<K, V> {\n    // ...\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): MapIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): MapIterator<V>;\n}\n```\n\n----------------------------------------\n\nTITLE: Constraints on Values Imported with import type\nDESCRIPTION: Example showing how values imported with import type can only be used in non-emitting positions such as type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { f } from \"./module.js\";\nf(); // 'f' cannot be used as a value because it was imported using 'import type'\nlet otherFunction: typeof f = () => {}; // Ok\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unconstrained Generics Assignment Error in TypeScript 4.8\nDESCRIPTION: This code demonstrates a new type-checking error in TypeScript 4.8 where unconstrained generic type parameters are no longer assignable to '{}'. This prevents potential runtime errors when null/undefined values are passed to functions expecting non-null values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Accepts any non-null non-undefined value\nfunction bar(value: {}) {\n  Object.keys(value); // This call throws on null/undefined at runtime.\n}\n\n// Unconstrained type parameter T...\nfunction foo<T>(x: T) {\n    bar(x); // Used to be allowed, now is an error in 4.8.\n    //  ~\n    // error: Argument of type 'T' is not assignable to parameter of type '{}'.\n}\n\nfoo(undefined);\n```\n\n----------------------------------------\n\nTITLE: Exporting Constants with Union Types in TypeScript\nDESCRIPTION: Demonstrates how TypeScript handles the emission of declaration files for constants with union types. This example shows how TypeScript 5.5 improves the preservation of type order in declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const strBool: string | boolean = \"hello\";\nexport const boolStr: boolean | string = \"world\";\n```\n\n----------------------------------------\n\nTITLE: Improved Destructuring with Object and Array Literals in TypeScript\nDESCRIPTION: Illustrates the improved checking for destructuring patterns with object and array literal initializers in TypeScript 1.7, showing how default values and optional properties are handled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.7.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Type of f1 is (arg?: { x?: number, y?: number }) => void\nfunction f1({ x = 0, y = 0 } = {}) {}\n\n// And can be called as:\nf1();\nf1({});\nf1({ x: 1 });\nf1({ y: 1 });\nf1({ x: 1, y: 1 });\n\n// Type of f2 is (arg?: (x: number, y?: number) => void\nfunction f2({ x, y = 0 } = { x: 0 }) {}\n\nf2();\nf2({}); // Error, x not optional\nf2({ x: 1 });\nf2({ y: 1 }); // Error, x not optional\nf2({ x: 1, y: 1 });\n```\n\n----------------------------------------\n\nTITLE: Using Generic Local Types in TypeScript 1.6\nDESCRIPTION: Demonstrates how local types can reference enclosing type parameters and be generic themselves in TypeScript 1.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f3() {\n  function f<X, Y>(x: X, y: Y) {\n    class C {\n      public x = x;\n      public y = y;\n    }\n    return C;\n  }\n  let C = f(10, \"hello\");\n  let v = new C();\n  let x = v.x; // number\n  let y = v.y; // string\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Coercion Error in TypeScript 5.0\nDESCRIPTION: This snippet shows how TypeScript 5.0 now raises an error for implicit string-to-number coercions in relational operators, which was previously allowed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nfunction func(ns: number | string) {\n  return ns > 4; // Now also an error\n}\n```\n\n----------------------------------------\n\nTITLE: Non-unit Types as Union Discriminants\nDESCRIPTION: Shows how TypeScript 3.2 relaxes rules for discriminant properties, allowing for easier narrowing in union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Result<T> = { error: Error; data: null } | { error: null; data: T };\n\nfunction unwrap<T>(result: Result<T>) {\n  if (result.error) {\n    // Here 'error' is non-null\n    throw result.error;\n  }\n\n  // Now 'data' is non-null\n  return result.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Instantiation Expressions in TypeScript 4.7\nDESCRIPTION: Shows how to use instantiation expressions to create specialized versions of the makeBox function without wrapping or explicit type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst makeHammerBox = makeBox<Hammer>;\nconst makeWrenchBox = makeBox<Wrench>;\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with BigInt\nDESCRIPTION: Demonstrates how TypeScript correctly narrows types using typeof with BigInt values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction whatKindOfNumberIsIt(x: number | bigint) {\n  if (typeof x === \"bigint\") {\n    console.log(\"'x' is a bigint!\");\n  } else {\n    console.log(\"'x' is a floating-point number\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending from NPM Package TSConfig\nDESCRIPTION: Demonstrates how to extend a base configuration from a package published on npm, like @tsconfig/strictest.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.base.json\n{\n    \"extends\": \"@tsconfig/strictest/tsconfig.json\",\n    \"compilerOptions\": {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Compiler via npm\nDESCRIPTION: This command installs the TypeScript Compiler (tsc) globally using npm. It allows you to run the tsc command from anywhere in your terminal.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g typescript\n```\n\n----------------------------------------\n\nTITLE: Using Instantiation Expressions with Constructor Functions in TypeScript\nDESCRIPTION: Demonstrates how instantiation expressions can be used with built-in constructor functions like Map to create specialized types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Has type `new () => Map<string, Error>`\nconst ErrorMap = Map<string, Error>;\n\n// Has type `// Map<string, Error>`\nconst errorMap = new ErrorMap();\n```\n\n----------------------------------------\n\nTITLE: Using Ambient Module Declarations\nDESCRIPTION: Example showing how to reference and use an ambient module declaration via reference directive and import.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// 👇 Ensure the ambient module is loaded -\n//    may be unnecessary if path.d.ts is included\n//    by the project tsconfig.json somehow.\n/// <reference path=\"path.d.ts\" />\n\nimport { normalize, join } from \"path\";\n```\n\n----------------------------------------\n\nTITLE: Using jQuery in a Global Context\nDESCRIPTION: Shows how to use jQuery as a global library without any import statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n$(() => {\n  console.log(\"hello!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Union Enum Types\nDESCRIPTION: Illustrates how enum literal types allow each enum member to have its own type, combining into a union type and enabling type narrowing and subset type references.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Color is like a union of Red | Orange | Yellow | Green | Blue | Violet\nenum Color {\n    Red, Orange, Yellow, Green, Blue, /* Indigo, */ Violet\n}\n\n// Each enum member has its own type that we can refer to!\ntype PrimaryColor = Color.Red | Color.Green | Color.Blue;\n\nfunction isPrimaryColor(c: Color): c is PrimaryColor {\n    // Narrowing literal types can catch bugs.\n    // TypeScript will error here because\n    // we'll end up comparing 'Color.Red' to 'Color.Green'.\n    // We meant to use ||, but accidentally wrote &&.\n    return c === Color.Red && c === Color.Green && c === Color.Blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Control Flow Analysis for Dependent Parameters\nDESCRIPTION: Shows how TypeScript handles control flow analysis for functions with dependent parameter types using discriminated union of tuples.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Func = (...args: [\"a\", number] | [\"b\", string]) => void;\n\nconst f1: Func = (kind, payload) => {\n  if (kind === \"a\") {\n    payload.toFixed(); // 'payload' narrowed to 'number'\n  }\n  if (kind === \"b\") {\n    payload.toUpperCase(); // 'payload' narrowed to 'string'\n  }\n};\n\nf1(\"a\", 42);\nf1(\"b\", \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Node.js Double Default Export Problem\nDESCRIPTION: Illustrates the 'double default' problem in Node.js when dealing with transpiled modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: node_modules/dependency/index.js\nexports.__esModule = true;\nexports.default = function doSomething() { /*...*/ }\n\n// @Filename: transpile-vs-run-directly.{js/mjs}\nimport doSomething from \"dependency\";\n// Works after transpilation, but not a function in Node.js ESM:\ndoSomething();\n// Doesn't exist after transpilation, but works in Node.js ESM:\ndoSomething.default();\n```\n\n----------------------------------------\n\nTITLE: Using Twoslash Query to Show Types in TypeScript\nDESCRIPTION: Demonstrates how to use the `^?` annotation to show the type of a variable in real-time. This creates an inline annotation revealing the inferred type of the variable 'abc'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Twoslash Annotations.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst abc = \"Hello\"\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Limitations of Object Spread with Class Instances in TypeScript\nDESCRIPTION: This example demonstrates a limitation of object spreading when used with class instances. It shows that methods are not included when spreading an instance of a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n  p = 12;\n  m() {}\n}\nlet c = new C();\nlet clone = { ...c };\nclone.p; // ok\nclone.m(); // error!\n```\n\n----------------------------------------\n\nTITLE: CommonJS Output Transform Example\nDESCRIPTION: Shows how TypeScript can transform ESM syntax into CommonJS format when the appropriate module compiler option is set.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst greetings_1 = require(\"greetings\");\n(0, greetings_1.sayHello)(\"world\");\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Exporting a Function\nDESCRIPTION: A CommonJS module that directly assigns a function to module.exports, a pattern that creates interoperability challenges with ES modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: exports-function.js\nmodule.exports = function hello() {\n  console.log(\"Hello, world!\");\n};\n```\n\n----------------------------------------\n\nTITLE: Using Export Type * in TypeScript 5.0\nDESCRIPTION: Demonstrates the new TypeScript 5.0 feature that allows exporting all types from a module using 'export type *' syntax, making type-only re-exports more concise.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// models/vehicles.ts\nexport class Spaceship {\n  // ...\n}\n\n// models/index.ts\nexport type * as vehicles from \"./vehicles\";\n\n// main.ts\nimport { vehicles } from \"./models\";\n\nfunction takeASpaceship(s: vehicles.Spaceship) {\n  // ✅ ok - `vehicles` only used in a type position\n}\n\nfunction makeASpaceship() {\n  return new vehicles.Spaceship();\n  //         ^^^^^^^^\n  // 'vehicles' cannot be used as a value because it was exported using 'export type'.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Generic Array Interface in TypeScript\nDESCRIPTION: This snippet shows a simplified version of the Array interface definition, demonstrating how it's implemented as a generic type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Array<Type> {\n  /**\n   * Gets or sets the length of the array.\n   */\n  length: number;\n\n  /**\n   * Removes the last element from an array and returns it.\n   */\n  pop(): Type | undefined;\n\n  /**\n   * Appends new elements to an array, and returns the new length of the array.\n   */\n  push(...items: Type[]): number;\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring watchOptions in tsconfig.json\nDESCRIPTION: Demonstrates how to configure the new watchOptions in tsconfig.json to customize file and directory watching strategies in TypeScript 3.8.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Some typical compiler options\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"moduleResolution\": \"node\"\n    // ...\n  },\n\n  // NEW: Options for file/directory watching\n  \"watchOptions\": {\n    // Use native file system events for files and directories\n    \"watchFile\": \"useFsEvents\",\n    \"watchDirectory\": \"useFsEvents\",\n\n    // Poll files for updates more frequently\n    // when they're updated a lot.\n    \"fallbackPolling\": \"dynamicPriority\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spread Expressions with Tuple Types in TypeScript\nDESCRIPTION: Demonstrates equivalent ways to call functions using tuple types and spread expressions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst args: [number, string, boolean] = [42, \"hello\", true];\nfoo(42, \"hello\", true);\nfoo(args[0], args[1], args[2]);\nfoo(...args);\n```\n\n----------------------------------------\n\nTITLE: Adding Catch-all String Indexer for JSX Intrinsic Elements\nDESCRIPTION: Shows how to define a catch-all string indexer in JSX.IntrinsicElements to allow any intrinsic element without explicit definition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ndeclare namespace JSX {\n  interface IntrinsicElements {\n    [elemName: string]: any;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Vendor-Specific Types in TypeScript DOM Definitions\nDESCRIPTION: Provides TypeScript type definitions to restore vendor-specific types related to media access that were removed from the built-in .d.ts library. This includes interfaces for AudioTrackList, HTMLVideoElement, and MediaError.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AudioTrackList {\n     [Symbol.iterator](): IterableIterator<AudioTrack>;\n }\n\ninterface HTMLVideoElement {\n  readonly audioTracks: AudioTrackList\n\n  msFrameStep(forward: boolean): void;\n  msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\n  msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\n  webkitEnterFullScreen(): void;\n  webkitEnterFullscreen(): void;\n  webkitExitFullScreen(): void;\n  webkitExitFullscreen(): void;\n\n  msHorizontalMirror: boolean;\n  readonly msIsLayoutOptimalForPlayback: boolean;\n  readonly msIsStereo3D: boolean;\n  msStereo3DPackingMode: string;\n  msStereo3DRenderMode: string;\n  msZoom: boolean;\n  onMSVideoFormatChanged: ((this: HTMLVideoElement, ev: Event) => any) | null;\n  onMSVideoFrameStepCompleted: ((this: HTMLVideoElement, ev: Event) => any) | null;\n  onMSVideoOptimalLayoutChanged: ((this: HTMLVideoElement, ev: Event) => any) | null;\n  webkitDisplayingFullscreen: boolean;\n  webkitSupportsFullscreen: boolean;\n}\n\ninterface MediaError {\n  readonly msExtendedCode: number;\n  readonly MS_MEDIA_ERR_ENCRYPTED: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TSConfig with Glob Pattern Support\nDESCRIPTION: Shows how to configure TypeScript projects using tsconfig.json with glob patterns for including and excluding files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outFile\": \"../../built/local/tsc.js\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Namespaced JSX Attributes Usage\nDESCRIPTION: Shows how to use and define namespaced attributes in JSX components.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\n// Both of these are equivalent:\nconst x = <Foo a:b=\"hello\" />;\nconst y = <Foo a : b=\"hello\" />;\ninterface FooProps {\n    \"a:b\": string;\n}\nfunction Foo(props: FooProps) {\n    return <div>{props[\"a:b\"]}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration with Generic Type\nDESCRIPTION: An improved TypeScript declaration using generics to provide better type information, allowing the array element type to flow through to the return type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ArrayMetadata<ArrType> = {\n  length: number;\n  firstObject: ArrType | undefined;\n};\n\nexport function getArrayMetadata<ArrType>(\n  arr: ArrType[]\n): ArrayMetadata<ArrType>;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Nullable Types in TypeScript with strictNullChecks\nDESCRIPTION: This code demonstrates the use of nullable types in JSDoc and how they are interpreted differently based on the strictNullChecks compiler option in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {?number}\n * With strictNullChecks: true  -- number | null\n * With strictNullChecks: false -- number\n */\nvar nullable;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved Union/Intersection Type Inference in TypeScript\nDESCRIPTION: This snippet illustrates improved type inference for union and intersection types in TypeScript 1.8. It shows examples of inferring types in various scenarios involving Maybe types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Maybe<T> = T | void;\n\nfunction isDefined<T>(x: Maybe<T>): x is T {\n  return x !== undefined && x !== null;\n}\n\nfunction isUndefined<T>(x: Maybe<T>): x is void {\n  return x === undefined || x === null;\n}\n\nfunction getOrElse<T>(x: Maybe<T>, defaultValue: T): T {\n  return isDefined(x) ? x : defaultValue;\n}\n\nfunction test1(x: Maybe<string>) {\n  let x1 = getOrElse(x, \"Undefined\"); // string\n  let x2 = isDefined(x) ? x : \"Undefined\"; // string\n  let x3 = isUndefined(x) ? \"Undefined\" : x; // string\n}\n\nfunction test2(x: Maybe<number>) {\n  let x1 = getOrElse(x, -1); // number\n  let x2 = isDefined(x) ? x : -1; // number\n  let x3 = isUndefined(x) ? -1 : x; // number\n}\n```\n\n----------------------------------------\n\nTITLE: Mapped Types with String Literals in TypeScript\nDESCRIPTION: Shows how string literals can be used as property names in mapped types to create configurable option objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  [K in \"noImplicitAny\" | \"strictNullChecks\" | \"strictFunctionTypes\"]?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Parameter Unification in TypeScript Generic Functions\nDESCRIPTION: This example shows how TypeScript normally compares two generic function types. Type A accepts two parameters of potentially different types, while type B requires both parameters to be the same type. TypeScript allows assigning A to B but not vice versa without the noStrictGenericChecks flag.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noStrictGenericChecks.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\n\ntype A = <T, U>(x: T, y: U) => [T, U];\ntype B = <S>(x: S, y: S) => [S, S];\n\nfunction f(a: A, b: B) {\n  b = a; // Ok\n  a = b; // Error\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with JSDoc Link\nDESCRIPTION: Illustrates the use of @link tags in JSDoc comments for TypeScript functions, demonstrating how TypeScript can now resolve and provide editor support for linked declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * To be called 70 to 80 days after {@link plantCarrot}.\n */\nfunction harvestCarrot(carrot: Carrot) {}\n\n/**\n * Call early in spring for best results. Added in v2.1.0.\n * @param seed Make sure it's a carrot seed!\n */\nfunction plantCarrot(seed: Seed) {\n  // TODO: some gardening\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Declaration Files from JavaScript in TypeScript 3.7\nDESCRIPTION: Shows how TypeScript 3.7 can generate .d.ts files from JSDoc-annotated JavaScript code when using the --declaration and --allowJs flags together.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require(\"assert\");\n\nmodule.exports.blurImage = blurImage;\n\n/**\n * Produces a blurred image from an input buffer.\n *\n * @param input {Uint8Array}\n * @param width {number}\n * @param height {number}\n */\nfunction blurImage(input, width, height) {\n  const numPixels = width * height * 4;\n  assert(input.length === numPixels);\n  const result = new Uint8Array(numPixels);\n\n  // TODO\n\n  return result;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Produces a blurred image from an input buffer.\n *\n * @param input {Uint8Array}\n * @param width {number}\n * @param height {number}\n */\nexport function blurImage(\n  input: Uint8Array,\n  width: number,\n  height: number\n): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Object Spread in TypeScript\nDESCRIPTION: This example demonstrates object spreading in TypeScript. It shows how to create a new object 'search' by spreading properties from 'defaults' and overwriting a specific property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nlet defaults = { food: \"spicy\", price: \"$$\", ambiance: \"noisy\" };\nlet search = { ...defaults, food: \"rich\" };\n```\n\n----------------------------------------\n\nTITLE: Array Handling with Truthiness\nDESCRIPTION: Demonstrates handling undefined arrays using boolean negation for type narrowing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction multiplyAll(\n  values: number[] | undefined,\n  factor: number\n): number[] | undefined {\n  if (!values) {\n    return values;\n  } else {\n    return values.map((x) => x * factor);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Per-file JSX Fragment Configuration\nDESCRIPTION: Example showing how to configure JSX Fragment Factory using file-level directives, similar to Babel's approach. Includes pragma comments for both JSX factory and fragment settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxFragmentFactory.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsx h */\n/** @jsxFrag Fragment */\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  <>\n    <div>Hello</div>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Complex Namespace Merging\nDESCRIPTION: Complex example showing multiple namespace merging techniques with interfaces, classes, and nested namespaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace X {\n  export interface Y {}\n  export class Z {}\n}\n\n// ... elsewhere ...\nnamespace X {\n  export var Y: number;\n  export namespace Z {\n    export class C {}\n  }\n}\ntype X = string;\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Plugin Development Mode\nDESCRIPTION: Setting that needs to be enabled in the TypeScript Playground options to connect to your locally running plugin development server.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/create-typescript-playground-plugin/README.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nConnect to localhost:5000\n```\n\n----------------------------------------\n\nTITLE: Interface with Method Implementation\nDESCRIPTION: Demonstrates implementing an interface with both properties and methods in a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClockInterface {\n  currentTime: Date;\n  setTime(d: Date): void;\n}\n\nclass Clock implements ClockInterface {\n  currentTime: Date = new Date();\n  setTime(d: Date) {\n    this.currentTime = d;\n  }\n  constructor(h: number, m: number) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fix for Unconstrained Generics Error with Runtime Checks\nDESCRIPTION: This diff shows an alternative approach to handle the unconstrained generics error by adding runtime checks for null and undefined before passing the value to functions expecting non-null values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n  function foo<T>(x: T) {\n+     if (x !== null && x !== undefined) {\n          bar(x);\n+     }\n  }\n```\n\n----------------------------------------\n\nTITLE: Detecting ES Version Compatibility for Regular Expression Features\nDESCRIPTION: TypeScript 5.5 validates regular expression features against the target ECMAScript version, showing an error when named capturing groups are used with ES5 target.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet myRegex = /@typedef \\{import\\((?<importPath>.+)\\)\\.(?<importedEntity>[a-zA-Z_]+)\\} \\k<importedEntity>/;\n//                                  ~~~~~~~~~~~~         ~~~~~~~~~~~~~~~~\n// error!\n// Named capturing groups are only available when targeting 'ES2018' or later.\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Functions in TypeScript Declaration Files\nDESCRIPTION: Syntax for declaring global functions with parameter types and return types in declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function greet(greeting: string): void;\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Union Types\nDESCRIPTION: Demonstrates improved type inference for arrays with multiple value types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvar x = [1, \"hello\"]; // x: Array<string|number>\nx[0] = \"world\"; // OK\nx[0] = false; // Error, boolean is not string or number\n```\n\n----------------------------------------\n\nTITLE: Declaring Namespace with Properties in TypeScript Declaration Files\nDESCRIPTION: Declaration file syntax for describing a global object with functions and properties using the namespace keyword.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace myLib {\n  function makeGreeting(s: string): string;\n  let numberOfGreetings: number;\n}\n```\n\n----------------------------------------\n\nTITLE: UMD Module Pattern Implementation\nDESCRIPTION: Illustrates the standard UMD module pattern that checks for different module loader environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"libName\"], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory(require(\"libName\"));\n    } else {\n        root.returnExports = factory(root.libName);\n    }\n}(this, function (b) {\n```\n\n----------------------------------------\n\nTITLE: Smarter Union Type Checking Example\nDESCRIPTION: Illustrates the improved union type checking in TypeScript 3.5, which allows for more flexible type assignments in certain scenarios.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.5.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype S = { done: boolean; value: number };\ntype T = { done: false; value: number } | { done: true; value: number };\n\ndeclare let source: S;\ndeclare let target: T;\n\ntarget = source;\n```\n\n----------------------------------------\n\nTITLE: Using Symbols with Computed Property Declarations in Class Members\nDESCRIPTION: Shows how symbols can be combined with computed property declarations to define methods on classes. The symbol is used as a method name that can then be accessed using bracket notation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Symbols.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getClassNameSymbol = Symbol();\n\nclass C {\n  [getClassNameSymbol]() {\n    return \"C\";\n  }\n}\n\nlet c = new C();\nlet className = c[getClassNameSymbol](); // \"C\"\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Extends in TSConfig\nDESCRIPTION: Shows how to use the new multiple extends feature in TypeScript 5.0, allowing a configuration to inherit from multiple base configurations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": [\"a\", \"b\", \"c\"],\n    \"compilerOptions\": {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Import with esModuleInterop Disabled\nDESCRIPTION: Shows the TypeScript compiler output when esModuleInterop is set to false, using the default CommonJS module compilation approach.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/esModuleInterop.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\n// @showEmit\n// @esModuleInterop: false\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n```\n\n----------------------------------------\n\nTITLE: Valid Usage of Isolated Declarations in TypeScript\nDESCRIPTION: This snippet demonstrates valid usage of isolated declarations, where local variables don't require type annotations, but exported functions do.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { add } from \"./add\";\n\nconst x = add(\"1\", \"2\"); // no error on 'x', it's not exported.\n\nexport function foo(): string {\n    return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TSConfig Extension Example\nDESCRIPTION: Shows how to extend from a base configuration file in a TypeScript project, allowing shared settings across multiple projects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n// packages/front-end/src/tsconfig.json\n{\n    \"extends\": \"../../../tsconfig.base.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"../lib\",\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Variance Annotations in TypeScript\nDESCRIPTION: Demonstrates improper use of variance annotations where structural behavior doesn't match the annotation\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// DON'T DO THIS - variance annotation\n// does not match structural behavior\ninterface Producer<in out T> {\n  make(): T;\n}\n\n// Not a type error -- this is a structural\n// comparison, so variance annotations are\n// not in effect\nconst p: Producer<string | number> = {\n    make(): number {\n        return 42;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements with Known Indices in TypeScript 1.3\nDESCRIPTION: This snippet illustrates how TypeScript 1.3 handles accessing tuple elements with known indices. It shows type-safe operations on tuple elements and type checking errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.3.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(x[0].substr(1)); // OK\nconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr'\n```\n\n----------------------------------------\n\nTITLE: Type Guards with instanceof\nDESCRIPTION: Demonstrates instanceof type guards with classes and union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dog { woof() { } }\nclass Cat { meow() { } }\nvar pet: Dog|Cat = /* ... */;\nif (pet instanceof Dog) {\n    pet.woof(); // OK\n}\nelse {\n    pet.woof(); // Error\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript definitions for querySelector and querySelectorAll methods\nDESCRIPTION: The type definitions for querySelector and querySelectorAll methods as defined in lib.dom.d.ts. These methods return elements that match specified CSS selectors, with querySelector returning the first match and querySelectorAll returning all matches.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns the first element that is a descendant of node that matches selectors.\n */\nquerySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;\nquerySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;\nquerySelector<E extends Element = Element>(selectors: string): E | null;\n\n/**\n * Returns all element descendants of node that match selectors.\n */\nquerySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;\nquerySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;\nquerySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript 5.8's Emitted Declaration File for Computed Property Names\nDESCRIPTION: This snippet shows how TypeScript 5.8 emits a declaration file for a class with a computed property name, preserving the original property name.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare let propName: string;\nexport declare class MyClass {\n    [propName]: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Spread vs Concat with Array Holes\nDESCRIPTION: Demonstrates a key difference between array spread and concat when working with arrays that contain holes (missing elements).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Make an array where the element at index 1 is missing\nlet arrayWithHole = ['a', , 'c'];\nlet spread = [...arrayWithHole];\nlet concatenated = [].concat(arrayWithHole);\n\nconsole.log(arrayWithHole)\n// [ 'a', <1 empty item>, 'c' ]\nconsole.log(spread)\n// [ 'a', undefined, 'c' ]\nconsole.log(concatenated)\n// [ 'a', <1 empty item>, 'c' ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Awaited Type in TypeScript\nDESCRIPTION: Shows how the Awaited type recursively unwraps Promise types, modeling async/await operations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = Awaited<Promise<string>>;\ntype B = Awaited<Promise<Promise<number>>>;\ntype C = Awaited<boolean | Promise<number>>;\n```\n\n----------------------------------------\n\nTITLE: Type Casting Examples\nDESCRIPTION: Demonstrates type casting syntax borrowed from Google Closure, including casting to specific types and const\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {number | string}\n */\nvar numberOrString = Math.random() < 0.5 ? \"hello\" : 100;\nvar typeAssertedNumber = /** @type {number} */ (numberOrString);\n\nlet one = /** @type {const} */(1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Properties in TypeScript Classes\nDESCRIPTION: Demonstrates the usage of readonly modifier in TypeScript classes. Shows how readonly properties must be initialized at declaration or in constructor and cannot be modified afterwards.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Octopus {\n  readonly name: string;\n  readonly numberOfLegs: number = 8;\n\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nlet dad = new Octopus(\"Man with the 8 strong legs\");\ndad.name = \"Man with the 3-piece suit\";\n```\n\n----------------------------------------\n\nTITLE: Correcting Type References in JavaScript (TypeScript)\nDESCRIPTION: This snippet demonstrates the correct way to reference types from other modules in JavaScript files after the TypeScript 4.8 changes. It uses import() in JSDoc comments for type references and @typedef for exporting types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n- import { someValue, SomeType } from \"some-module\";\n+ import { someValue } from \"some-module\";\n  \n  /**\n-  * @type {SomeType}\n+  * @type {import(\"some-module\").SomeType}\n   */\n  export const myValue = someValue;\n\n  /**\n   * @typedef {string | number} MyType\n   */\n\n+ /**\n+  * @typedef {MyType} MyExportedType\n+  */\n- export { MyType as MyExportedType };\n```\n\n----------------------------------------\n\nTITLE: Strict Contravariance for Callback Parameters\nDESCRIPTION: Shows how TypeScript 2.4 introduces stricter checks when relating two callback types, particularly useful for working with Promises and Observables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Mappable<T> {\n  map<U>(f: (x: T) => U): Mappable<U>;\n}\n\ndeclare let a: Mappable<number>;\ndeclare let b: Mappable<string | number>;\n\na = b;\nb = a;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Non-Union Enum Declaration\nDESCRIPTION: Shows how to declare an enum that isn't inferred as a union enum, allowing comparisons with any number without type errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  // the leading + on 0 opts TypeScript out of inferring a union enum.\n  A = +0,\n  B = 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Using --resolvePackageJsonImports in TypeScript Compilation\nDESCRIPTION: The --resolvePackageJsonImports option forces TypeScript to use the 'imports' field in package.json for resolving imports starting with '#'. It's enabled by default for node16, nodenext, and bundler module resolution strategies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/resolvePackageJsonImports.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n--resolvePackageJsonImports\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Fragment Factory in TSConfig\nDESCRIPTION: Example TSConfig configuration showing how to set up JSX Factory and Fragment Factory for React/Preact projects. Demonstrates setting target, module, jsx mode, and fragment factory options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxFragmentFactory.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc with Import Types Including File Extensions\nDESCRIPTION: Shows how import() types in JSDoc comments can now use TypeScript file extensions, enabling better type references in JavaScript files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {import(\"./justTypes.ts\").JustAType} param\n */\nexport function f(param) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Module Declarations\nDESCRIPTION: Shows how to use wildcards in module declarations to cover a family of module names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"*!text\" {\n  const content: string;\n  export default content;\n}\n// Some do it the other way around.\ndeclare module \"json!*\" {\n  const value: any;\n  export default value;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index Signatures from Non-Literal Method Names in Classes in TypeScript\nDESCRIPTION: Demonstrates how TypeScript 5.7 now properly handles symbol-based method names in classes by generating appropriate index signatures, similar to behavior in object literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const symbolMethodName: symbol;\n\nexport class A {\n    [symbolMethodName]() { return 1 };\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Function Type Matching\nDESCRIPTION: Shows different approaches to generic function type matching with union types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction choose1<T>(a: T, b: T): T {\n  return Math.random() > 0.5 ? a : b;\n}\nvar a = choose1(\"hello\", 42); // Error\nvar b = choose1<string | number>(\"hello\", 42); // OK\n\nfunction choose2<T, U>(a: T, b: U): T | U {\n  return Math.random() > 0.5 ? a : b;\n}\nvar c = choose2(\"bar\", \"foo\"); // OK, c: string\nvar d = choose2(\"hello\", 42); // OK, d: string|number\n```\n\n----------------------------------------\n\nTITLE: Redirecting Requests for a Specific File with typesVersions\nDESCRIPTION: This example shows how to use the 'typesVersions' field to provide different type definition files for specific TypeScript compiler versions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"version\": \"1.0.0\",\n  \"types\": \"./index.d.ts\",\n  \"typesVersions\": {\n    \"<4.0\": { \"index.d.ts\": [\"index.v3.d.ts\"] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Path Rewriting with --rewriteRelativeImportExtensions in TypeScript\nDESCRIPTION: This snippet shows how the new --rewriteRelativeImportExtensions compiler option in TypeScript 5.7 rewrites relative import paths with TypeScript extensions to their JavaScript counterparts.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Under --rewriteRelativeImportExtensions...\n\n// these will be rewritten.\nimport * as foo from \"./foo.ts\";\nimport * as bar from \"../someFolder/bar.mts\";\n\n// these will NOT be rewritten in any way.\nimport * as a from \"./foo\";\nimport * as b from \"some-package/file.ts\";\nimport * as c from \"@some-scope/some-package/file.ts\";\nimport * as d from \"#/file.ts\";\nimport * as e from \"./file.js\";\n```\n\n----------------------------------------\n\nTITLE: Iterator Interface Definition\nDESCRIPTION: TypeScript interface definition for the new IteratorObject type that extends the Iterator interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IteratorObject<T, TReturn = unknown, TNext = unknown> extends Iterator<T, TReturn, TNext> {\n    [Symbol.iterator](): IteratorObject<T, TReturn, TNext>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Function Types in TypeScript\nDESCRIPTION: Shows how strict function types affect assignability of functions with different parameter types. Introduces contravariant checking for function parameter positions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let f1: (x: Animal) => void;\ndeclare let f2: (x: Dog) => void;\ndeclare let f3: (x: Cat) => void;\nf1 = f2; // Error with --strictFunctionTypes\nf2 = f1; // Ok\nf2 = f3; // Error\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertion for Sequential Property Assignment in TypeScript\nDESCRIPTION: A TypeScript approach for sequential property assignment using interface definition and type assertion. This allows the JavaScript pattern to work with proper type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\ninterface Options {\n  color: string;\n  volume: number;\n}\n\nlet options = {} as Options;\noptions.color = \"red\";\noptions.volume = 11;\n```\n\n----------------------------------------\n\nTITLE: Tracing Module Resolution with tsc\nDESCRIPTION: Shows how to use the TypeScript compiler to trace module resolution for debugging purposes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntsc --traceResolution\n```\n\n----------------------------------------\n\nTITLE: Limitations of Const Type Parameters with Variables\nDESCRIPTION: Demonstrates that const type parameters only affect inference for expressions written directly in the call, not for variables passed as arguments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function fnGood<const T extends readonly string[]>(args: T): void;\nconst arr = [\"a\", \"b\" ,\"c\"];\n\n// 'T' is still 'string[]'-- the 'const' modifier has no effect here\nfnGood(arr);\n```\n\n----------------------------------------\n\nTITLE: Disabling Type Acquisition in JavaScript Projects using jsconfig.json\nDESCRIPTION: This snippet shows how to turn off automatic type acquisition for a JavaScript project by setting 'enable' to false in the typeAcquisition section of jsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/sections/buildOptions.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"enable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core Startup\nDESCRIPTION: C# code for configuring static files middleware in ASP.NET Core Startup class\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/ASP.NET Core.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseDefaultFiles();\n    app.UseStaticFiles();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Class Interface Implementation\nDESCRIPTION: Shows how to implement a simple interface in a class with a single property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClockInterface {\n  currentTime: Date;\n}\n\nclass Clock implements ClockInterface {\n  currentTime: Date = new Date();\n  constructor(h: number, m: number) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Contextual Typing of Event Handler in TypeScript\nDESCRIPTION: Illustrates how TypeScript infers the 'any' type for a function parameter when not in a contextually typed position, allowing access to non-existent properties without errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Inference.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = function (uiEvent) {\n  console.log(uiEvent.button); // <- OK\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional exports in package.json for TypeScript module resolution\nDESCRIPTION: Demonstrates how conditional exports in package.json are resolved differently based on the import syntax used in TypeScript with --module preserve.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_9\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"name\": \"some-package\",\n  \"version\": \"0.0.1\",\n  \"exports\": {\n    \"./foo\": {\n        \"import\": \"./esm/foo-from-import.mjs\",\n        \"require\": \"./cjs/foo-from-require.cjs\"\n    },\n    \"./bar\": {\n        \"import\": \"./esm/bar-from-import.mjs\",\n        \"require\": \"./cjs/bar-from-require.cjs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Module Output Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript transforms ES module syntax to System.js format when using the 'system' module option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: system\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Versioned 'types' Condition in package.json Exports\nDESCRIPTION: This example illustrates how TypeScript resolves different type definition files based on the TypeScript version being used, allowing packages to provide version-specific type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"exports\": {\n    \"./subpath\": {\n      \"types@>=5.2\": \"./ts5.2/subpath/index.d.ts\",\n      \"types@>=4.6\": \"./ts4.6/subpath/index.d.ts\",\n      \"types\": \"./tsold/subpath/index.d.ts\",\n      \"default\": \"./dist/subpath/index.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array Tail Function\nDESCRIPTION: Function that returns all elements except the first one from an array using destructuring.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tail(arg) {\n  const [_, ...result] = arg;\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Fix for Unconstrained Generics Error with Non-null Assertion\nDESCRIPTION: This diff demonstrates using the non-null assertion operator to bypass the unconstrained generics error when you're confident the value cannot be null or undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n  function foo<T>(x: T) {\n-     bar(x);\n+     bar(x!);\n  }\n```\n\n----------------------------------------\n\nTITLE: Unspecified Type Parameters Defaulting to 'any' in JavaScript\nDESCRIPTION: Shows how unspecified type parameters default to 'any' in various contexts, including extends clauses, JSDoc references, and function calls. Examples demonstrate using JSDoc to specify types explicitly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"react\";\n\nclass MyComponent extends Component {\n  render() {\n    this.props.b; // Allowed, since this.props is of type any\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"react\";\n\n/**\n * @augments {Component<{a: number}, State>}\n */\nclass MyComponent extends Component {\n  render() {\n    this.props.b; // Error: b does not exist on {a:number}\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type{Array} */\nvar x = [];\n\nx.push(1); // OK\nx.push(\"string\"); // OK, x is of type Array<any>\n\n/** @type{Array.<number>} */\nvar y = [];\n\ny.push(1); // OK\ny.push(\"string\"); // Error, string is not assignable to number\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar p = new Promise((resolve, reject) => {\n  reject();\n});\n\np; // Promise<any>;\n```\n\n----------------------------------------\n\nTITLE: Type Assertion with ReadonlyArray in TypeScript\nDESCRIPTION: Using type assertion to override TypeScript's readonly protection and assign a ReadonlyArray back to a regular array. This shows how to bypass immutability constraints when necessary.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\n\na = ro as number[];\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Properties of Union Types\nDESCRIPTION: Demonstrates how to access properties that are common to all types in a union type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (opts.commandline.length === 0) {\n  // OK, string and string[] both have 'length' property\n  console.log(\"it's empty\");\n}\n```\n\n----------------------------------------\n\nTITLE: Module Resolution Algorithm Differences\nDESCRIPTION: Illustrates the differences in module resolution between CommonJS and ES modules in Node.js, specifically regarding file extension requirements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: add.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// @Filename: math.js\nexport * from \"./add\";\n//            ^^^^^^^\n// Works when transpiled to CJS,\n// but would have to be \"./add.js\"\n// in Node.js ESM.\n```\n\n----------------------------------------\n\nTITLE: Trivial Type Calculations with Isolated Declarations\nDESCRIPTION: This snippet shows cases where TypeScript can trivially calculate types without explicit annotations, even with isolated declarations enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// No error on 'x'.\n// It's trivial to calculate the type is 'number'\nexport let x = 10;\n\n// No error on 'y'.\n// We can get the type from the return expression.\nexport function y() {\n    return 20;\n}\n\n// No error on 'z'.\n// The type assertion makes it clear what the type is.\nexport function z() {\n    return Math.max(x, y()) as number;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Components in React with TypeScript\nDESCRIPTION: This snippet shows how to use Function components in React with TypeScript 1.8. It demonstrates parameter destructuring, default props, and property validation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Use parameter destructuring and defaults for easy definition of 'props' type\nconst Greeter = ({ name = \"world\" }) => <div>Hello, {name}!</div>;\n\n// Properties get validated\nlet example = <Greeter name=\"TypeScript 1.8\" />;\n```\n\n----------------------------------------\n\nTITLE: Package.json Type Configuration for ESM\nDESCRIPTION: Demonstrates how to configure a package.json file to use ECMAScript modules by setting the type field to 'module'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"name\": \"my-package\",\n    \"type\": \"module\",\n\n    \"//\": \"...\",\n    \"dependencies\": {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Properties and Accessors\nDESCRIPTION: Shows how to declare abstract properties and accessors in an abstract class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Base {\n  abstract name: string;\n  abstract get value();\n  abstract set value(v: number);\n}\n\nclass Derived extends Base {\n  name = \"derived\";\n\n  value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Order of Disposal with `using` Declarations in TypeScript\nDESCRIPTION: Demonstrates how multiple `using` declarations are disposed in first-in-last-out order (like a stack), and how disposal occurs at block scope boundaries and before returns.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggy(id: string): Disposable {\n    console.log(`Creating ${id}`);\n\n    return {\n        [Symbol.dispose]() {\n            console.log(`Disposing ${id}`);\n        }\n    }\n}\n\nfunction func() {\n    using a = loggy(\"a\");\n    using b = loggy(\"b\");\n    {\n        using c = loggy(\"c\");\n        using d = loggy(\"d\");\n    }\n    using e = loggy(\"e\");\n    return;\n\n    // Unreachable.\n    // Never created, never disposed.\n    using f = loggy(\"f\");\n}\n\nfunc();\n// Creating a\n// Creating b\n// Creating c\n// Creating d\n// Disposing d\n// Disposing c\n// Creating e\n// Disposing e\n// Disposing b\n// Disposing a\n```\n\n----------------------------------------\n\nTITLE: Custom Module Resolution Example in TypeScript\nDESCRIPTION: Demonstrates a hypothetical custom module resolution scheme using emoji-based imports to show how module resolution is host-defined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport monkey from \"🐒\"; // Looks for './eats/bananas.js'\nimport cow from \"🐄\";    // Looks for './eats/grass.js'\nimport lion from \"🦁\";   // Looks for './eats/you.js'\n```\n\n----------------------------------------\n\nTITLE: Configuring Types in tsconfig.json\nDESCRIPTION: This snippet shows how to specify the 'types' option in a tsconfig.json file. It limits the global scope to include only the listed @types packages.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/types.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"jest\", \"express\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Default Export to Export Assignment\nDESCRIPTION: Shows how to replace a default export with export = syntax for better CommonJS compatibility.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n- export default function doSomething() { /* ... */ }\n+ export = function doSomething() { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Detection Values\nDESCRIPTION: Configuration values for the moduleDetection compiler option that determines how TypeScript identifies modules versus scripts. The setting can be 'auto' (default), 'legacy', or 'force', with auto providing the most comprehensive detection logic.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/moduleDetection.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"auto\"     // Default - Checks imports/exports, package.json type field, and JSX files\\n\"legacy\"   // Pre-4.6 behavior - Only checks imports/exports\\n\"force\"    // Treats all non-declaration files as modules\n```\n\n----------------------------------------\n\nTITLE: Specifying Version for Type Acquisition in TypeScript\nDESCRIPTION: Example showing how to control the version of type definitions that are imported by appending a comment with the desired npm tag or version.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Type Acquisition.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { xy } from \"xyz\" // types: beta\n```\n\n----------------------------------------\n\nTITLE: Improved Union Types Behavior - TypeScript\nDESCRIPTION: Shows the new behavior in TypeScript 3.3 where union types with overlapping parameter types can be called successfully.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.3.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fruit = \"apple\" | \"orange\";\ntype Color = \"red\" | \"orange\";\n\ntype FruitEater = (fruit: Fruit) => number; // eats and ranks the fruit\ntype ColorConsumer = (color: Color) => string; // consumes and describes the colors\n\ndeclare let f: FruitEater | ColorConsumer;\n\nf(\"orange\"); // It works! Returns a 'number | string'.\n\nf(\"apple\"); // error - Argument of type '\"apple\"' is not assignable to parameter of type '\"orange\"'.\n\nf(\"red\"); // error - Argument of type '\"red\"' is not assignable to parameter of type '\"orange\"'.\n```\n\n----------------------------------------\n\nTITLE: Interface Example of Unconstrained Generics Type Error\nDESCRIPTION: This example shows how the unconstrained generics error manifests in interface type definitions, where a generic parameter without constraints is used in a position requiring a non-null value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo<T> {\n  x: Bar<T>;\n}\n\ninterface Bar<T extends {}> { }\n```\n\n----------------------------------------\n\nTITLE: Dotted Names in Type Guards for TypeScript\nDESCRIPTION: This code shows how TypeScript 2.0 supports checking 'dotted names' in type guards. It demonstrates type narrowing for nested optional properties in an interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  location?: {\n    x?: number;\n    y?: number;\n  };\n}\n\nfunction foo(options?: Options) {\n  if (options && options.location && options.location.x) {\n    const x = options.location.x; // Type of x is number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of New Modifier Access Functions\nDESCRIPTION: This code demonstrates how to safely access modifiers on a node using the new utility functions canHaveModifiers and getModifiers, replacing direct property access.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst modifiers = canHaveModifiers(myNode) ? getModifiers(myNode) : undefined;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exhaustiveness Check Error in TypeScript\nDESCRIPTION: This snippet shows how adding a new shape type (Triangle) to the Shape union without updating the switch statement causes a TypeScript error, demonstrating the effectiveness of exhaustiveness checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Triangle {\n  kind: \"triangle\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square | Triangle;\n\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Watch Mode Options\nDESCRIPTION: Configuration options for TypeScript's watch mode functionality that determine how files and directories are monitored for changes during development.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n--excludeDirectories        # list - Remove a list of directories from the watch process.\n--excludeFiles               # list - Remove a list of files from the watch mode's processing.\n--fallbackPolling            # fixedinterval, priorityinterval, dynamicpriority, or fixedchunksize\n--synchronousWatchDirectory  # boolean - Call callbacks synchronously on platforms without native recursive watching\n--watch                      # boolean - Watch input files.\n--watchDirectory             # usefsevents, fixedpollinginterval, dynamicprioritypolling, or fixedchunksizepolling\n--watchFile                  # fixedpollinginterval, prioritypollinginterval, dynamicprioritypolling, fixedchunksizepolling, usefsevents, or usefseventsonparentdirectory\n```\n\n----------------------------------------\n\nTITLE: JavaScript Equivalent of TypeScript Constructor\nDESCRIPTION: Shows the JavaScript code generated from TypeScript class declaration. Demonstrates how constructor functions work under the hood.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlet Greeter = (function () {\n  function Greeter(message) {\n    this.greeting = message;\n  }\n\n  Greeter.prototype.greet = function () {\n    return \"Hello, \" + this.greeting;\n  };\n\n  return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Decorators on a Single Line in TypeScript\nDESCRIPTION: Example of applying multiple decorators to a single declaration in TypeScript on a single line, showing decorator composition syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@f @g x\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bivariance in TypeScript Method Declarations\nDESCRIPTION: Shows how method declarations are treated differently under strictFunctionTypes, exhibiting bivariant behavior instead of contravariant.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Comparer<T> {\n  compare(a: T, b: T): number;\n}\n\ndeclare let animalComparer: Comparer<Animal>;\ndeclare let dogComparer: Comparer<Dog>;\n\nanimalComparer = dogComparer; // Ok because of bivariance\ndogComparer = animalComparer; // Ok\n```\n\n----------------------------------------\n\nTITLE: Accessing Types via Namespace Imports\nDESCRIPTION: Example showing how types are available on namespace imports when referenced in type positions but not in value positions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mod from \"./module.js\";\nmod.f();\nmod.SomeType; // Property 'SomeType' does not exist on type 'typeof import(\"./module.js\")'\nlet x: mod.SomeType; // Ok\n```\n\n----------------------------------------\n\nTITLE: Short-Circuit Assignment Behavior Example\nDESCRIPTION: Demonstrates the behavior of short-circuit assignment operators with getters and setters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n    get prop() {\n        console.log(\"getter has run\");\n        return Math.random() < 0.5;\n    },\n    set prop(_val: boolean) {\n        console.log(\"setter has run\");\n    }\n};\n\nfunction foo() {\n    console.log(\"right side evaluated\");\n    return true;\n}\n\nconsole.log(\"This one always runs the setter\");\nobj.prop = obj.prop || foo();\n\nconsole.log(\"This one *sometimes* runs the setter\");\nobj.prop ||= foo();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Configuration for Disposable Features\nDESCRIPTION: JSON configuration for TypeScript compiler to enable disposable features, setting appropriate target and lib options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"es2022\",\n        \"lib\": [\"es2022\", \"esnext.disposable\", \"dom\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Functions Flagged as Unused in TypeScript\nDESCRIPTION: Example demonstrating how TypeScript 2.6 considers functions that are only called within their own bodies as unused. The function 'f' is marked with an error because it's declared but its value is never read outside of its own definition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  f(); // Error: 'f' is declared but its value is never read\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncIterator Interface Definition\nDESCRIPTION: Interface definition for async iterators that return Promises for iteration results\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AsyncIterator<T> {\n  next(value?: any): Promise<IteratorResult<T>>;\n  return?(value?: any): Promise<IteratorResult<T>>;\n  throw?(e?: any): Promise<IteratorResult<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Optional Properties with Undefined Still Not Compatible with String Index Signatures\nDESCRIPTION: Illustrates that TypeScript 4.2 still prevents assignment of non-optional properties with undefined in their types to string index signatures, maintaining type safety for explicit undefined values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\ntype BatmanWatchCount = {\n  \"Batman Begins\": number | undefined;\n  \"The Dark Knight\": number | undefined;\n  \"The Dark Knight Rises\": number | undefined;\n};\n\ndeclare const batmanWatchCount: BatmanWatchCount;\n\n// Still an error in TypeScript 4.2.\nconst movieWatchCount: { [key: string]: number } = batmanWatchCount;\n\n// Still an error in TypeScript 4.2.\n// Index signatures don't implicitly allow explicit `undefined`.\nmovieWatchCount[\"It's the Great Pumpkin, Charlie Brown\"] = undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Class Properties and Methods\nDESCRIPTION: Shows how to declare optional properties and methods in a TypeScript class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass Bar {\n  a: number;\n  b?: number;\n  f() {\n    return 1;\n  }\n  g?(): number; // Body of optional method can be omitted\n  h?() {\n    return 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Union Enum Comparison Workaround\nDESCRIPTION: Shows a workaround for the union enum comparison error by explicitly including the additional numeric literal in the type annotation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  A = 0,\n  B = 1,\n}\n\n// Include -1 in the type, if we're really certain that -1 can come through.\nfunction doSomething(x: E | -1) {\n  if (x === -1) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Constructor Interface Pattern\nDESCRIPTION: Shows pattern for handling class constructors with interfaces using factory function approach.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClockConstructor {\n  new (hour: number, minute: number): ClockInterface;\n}\n\ninterface ClockInterface {\n  tick(): void;\n}\n\nfunction createClock(\n  ctor: ClockConstructor,\n  hour: number,\n  minute: number\n): ClockInterface {\n  return new ctor(hour, minute);\n}\n\nclass DigitalClock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n    console.log(\"beep beep\");\n  }\n}\n\nclass AnalogClock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n    console.log(\"tick tock\");\n  }\n}\n\nlet digital = createClock(DigitalClock, 12, 17);\nlet analog = createClock(AnalogClock, 7, 32);\n```\n\n----------------------------------------\n\nTITLE: Decorator Approach for Mixins with TypeScript (Constrained Example)\nDESCRIPTION: Illustrates the limitations of using decorators to implement mixins in TypeScript. This example shows how decorator-based mixins don't automatically merge their types with the decorated class, requiring manual type composition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @experimentalDecorators\n// @errors: 2339\n// A decorator function which replicates the mixin pattern:\nconst Pausable = (target: typeof Player) => {\n  return class Pausable extends target {\n    shouldFreeze = false;\n  };\n};\n\n@Pausable\nclass Player {\n  x = 0;\n  y = 0;\n}\n\n// The Player class does not have the decorator's type merged:\nconst player = new Player();\nplayer.shouldFreeze;\n\n// The runtime aspect could be manually replicated via\n// type composition or interface merging.\ntype FreezablePlayer = Player & { shouldFreeze: boolean };\n\nconst playerTwo = (new Player() as unknown) as FreezablePlayer;\nplayerTwo.shouldFreeze;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Completions in TypeScript\nDESCRIPTION: Shows how TypeScript provides method completions for the console object. The example demonstrates intellisense suggestions with a cursor positioned after 'console.log'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log\n//       ^|\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"See above\",\n  \"extension\": \"ts\",\n  \"highlights\": [],\n  \"queries\": [\n    {\n      \"completions\": [\n        {\n          \"name\": \"assert\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"clear\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"count\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"countReset\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"debug\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"dir\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"dirxml\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"error\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"group\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"groupCollapsed\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"groupEnd\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"info\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"log\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"table\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"time\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"timeEnd\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"timeLog\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"timeStamp\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"trace\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        },\n        {\n          \"name\": \"warn\",\n          \"kind\": \"method\",\n          \"kindModifiers\": \"declare\",\n          \"sortText\": \"11\"\n        }\n      ],\n      \"kind\": \"completions\",\n      \"start\": 9,\n      \"completionsPrefix\": \"l\",\n      \"length\": 1,\n      \"offset\": 9,\n      \"line\": 1\n    }\n  ],\n  \"staticQuickInfos\": \"[ 2 items ]\",\n  \"errors\": [],\n  \"playgroundURL\": \"https://www.typescriptlang.org/play/#code/MYewdgziA2CmB00QHMBQB6dACHusD0AfVIA\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Import Example - TypeScript\nDESCRIPTION: Demonstrates the syntax for importing modules using namespace and default imports in TypeScript with esModuleInterop enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.7.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as foo from \"foo\";\nimport b from \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Pattern Ambient Modules\nDESCRIPTION: Example of a pattern ambient module declaration using a wildcard character to match multiple module paths, useful for declaring modules provided by custom loaders.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"*.html\" {\n  const content: string;\n  export default content;\n}\n```\n\n----------------------------------------\n\nTITLE: TSConfig Base with ${configDir} Template Variable\nDESCRIPTION: This JSON5 snippet demonstrates the use of the new ${configDir} template variable in TypeScript 5.5, which resolves paths relative to the derived configuration file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_17\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"typeRoots\": [\n            \"${configDir}/node_modules/@types\"\n            \"${configDir}/custom-types\"\n        ],\n        \"outDir\": \"${configDir}/dist\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mitigating Class Field Issues in TypeScript\nDESCRIPTION: This snippet demonstrates how to mitigate issues caused by the class fields change by converting field initializers to assignments in constructor bodies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.7.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Base {\n  set data(value: string) {\n    console.log(\"data changed to \" + value);\n  }\n}\n\nclass Derived extends Base {\n  constructor() {\n    this.data = 10;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Local Types from Functions in TypeScript 1.6\nDESCRIPTION: Shows how functions can return locally declared types in TypeScript 1.6, which can be matched structurally by callers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction getPointFactory(x: number, y: number) {\n  class P {\n    x = x;\n    y = y;\n  }\n  return P;\n}\n\nvar PointZero = getPointFactory(0, 0);\nvar PointOne = getPointFactory(1, 1);\nvar p1 = new PointZero();\nvar p2 = new PointZero();\nvar p3 = new PointOne();\n```\n\n----------------------------------------\n\nTITLE: Optimizing JSX Output in TypeScript 4.6\nDESCRIPTION: Diff showing how TypeScript 4.6 removes the unnecessary void 0 argument when compiling JSX in react-jsx mode, which can lead to smaller bundle sizes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- export const el = _jsx(\"div\", { children: \"foo\" }, void 0);\n+ export const el = _jsx(\"div\", { children: \"foo\" });\n```\n\n----------------------------------------\n\nTITLE: Overriding Inherited Properties in TypeScript Configuration\nDESCRIPTION: Example of a TypeScript configuration that extends another configuration file and selectively overrides certain compiler options. This demonstrates how inheritance can be customized.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/extends.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig\",\n  \"compilerOptions\": {\n    \"strictNullChecks\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using jQuery as a Global Library in TypeScript\nDESCRIPTION: Demonstrates how to use jQuery as a global library without imports in TypeScript. The '$' symbol is directly accessible in the global scope.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n$(() => {\n  console.log(\"hello!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Restrictions on Type-only Import Declarations\nDESCRIPTION: Example showing that type-only import declarations cannot declare both a default import and named bindings, with alternative ways to write such imports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type fs, { BigIntOptions } from \"fs\";\n//          ^^^^^^^^^^^^^^^^^^^^^\n// Error: A type-only import can specify a default import or named bindings, but not both.\n\nimport type { default as fs, BigIntOptions } from \"fs\"; // Ok\n```\n\n----------------------------------------\n\nTITLE: Invalid Modifier Error Detection in JavaScript\nDESCRIPTION: Example showing how TypeScript now identifies incorrectly used modifiers in JavaScript code, which helps catch syntax errors earlier.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nfunction container() {\n    export function foo() {\n//  ~~~~~~\n// error: Modifiers cannot appear here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Test-specific TypeScript Configuration File\nDESCRIPTION: Contents of the tsconfig.test.json file for running tests, including only test files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"outDir\": \"../dist/test\"\n    },\n    \"include\": [\"**/*.test.ts\"],\n    \"references\": [\n        { \"path\": \"./tsconfig.json\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Angle Bracket Const Assertions in TypeScript\nDESCRIPTION: Shows alternative syntax for const assertions using angle brackets, available in non-TSX files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Type '\"hello\"'\nlet x = <const>\"hello\";\n\n// Type 'readonly [10, 20]'\nlet y = <const>[10, 20];\n\n// Type '{ readonly text: \"hello\" }'\nlet z = <const>{ text: \"hello\" };\n```\n\n----------------------------------------\n\nTITLE: Object Spread Order Significance in TypeScript\nDESCRIPTION: This snippet illustrates the importance of spread order in object spreading. It shows how spreading after a property definition can overwrite the previously set value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nlet defaults = { food: \"spicy\", price: \"$$\", ambiance: \"noisy\" };\nlet search = { food: \"rich\", ...defaults };\n```\n\n----------------------------------------\n\nTITLE: Old Organize Imports Result in TypeScript\nDESCRIPTION: Example showing how Organize Imports would previously sort imports without respecting grouping, resulting in comments and groups being mixed incorrectly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\n// local code\nimport * as child_process from \"child_process\";\nimport * as fs from \"fs\";\n// built-ins\nimport * as path from \"path\";\nimport * as aaa from \"./aaa\";\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\n\n\n// some code...\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty Class in TypeScript\nDESCRIPTION: Creates a basic empty class named Point. This represents the simplest possible class declaration in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Classes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {}\n```\n\n----------------------------------------\n\nTITLE: Importing a Module Using baseUrl\nDESCRIPTION: Demonstrates how to import a module when baseUrl is configured.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport A from \"moduleA\";\n```\n\n----------------------------------------\n\nTITLE: Example of Common Pattern Affected by any/unknown Propagation\nDESCRIPTION: Demonstrates a common pattern seen in predicate functions that might be affected by the any/unknown propagation change in TypeScript 4.1.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isThing(x: any): boolean {\n  return x && typeof x === \"object\" && x.blah === \"foo\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Box Functions in TypeScript\nDESCRIPTION: Demonstrates two approaches to create specialized versions of the makeBox function for specific types: wrapping the function call and using type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeHammerBox(hammer: Hammer) {\n    return makeBox(hammer);\n}\n\n// or...\n\nconst makeWrenchBox: (wrench: Wrench) => Box<Wrench> = makeBox;\n```\n\n----------------------------------------\n\nTITLE: Type Widening with Mutable Variables\nDESCRIPTION: Shows how TypeScript widens unit types to primitive types when using mutable variables, causing type compatibility issues.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function pad(s: string, n: number, direction: \"left\" | \"right\"): string;\nlet s = \"right\";\npad(\"hi\", 10, s); // error: 'string' is not assignable to '\"left\" | \"right\"'\n```\n\n----------------------------------------\n\nTITLE: Bare Import in TypeScript\nDESCRIPTION: Shows how to import a module only for its side effects without importing any values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./polyfills\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler CLI Command for Declaration Generation\nDESCRIPTION: Command line interface command for generating TypeScript declaration files from JavaScript files, equivalent to the TSConfig configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Creating DTS files From JS.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx -p typescript tsc src/**/*.js --declaration --allowJs --emitDeclarationOnly --outDir types\n```\n\n----------------------------------------\n\nTITLE: Creating Linked List Type with Intersection Types in TypeScript 1.6\nDESCRIPTION: Demonstrates how to create a recursive linked list type using intersection types in TypeScript 1.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkedList<T> = T & { next: LinkedList<T> };\n\ninterface Person {\n  name: string;\n}\n\nvar people: LinkedList<Person>;\nvar s = people.name;\nvar s = people.next.name;\nvar s = people.next.next.name;\nvar s = people.next.next.next.name;\n```\n\n----------------------------------------\n\nTITLE: Using JSX with React in TypeScript 1.6\nDESCRIPTION: Demonstrates how to use JSX syntax with React in TypeScript 1.6, including type checking for component props.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"react.d.ts\" />\n\ninterface Props {\n  name: string;\n}\n\nclass MyComponent extends React.Component<Props, {}> {\n  render() {\n    return <span>{this.props.name}</span>;\n  }\n}\n\n<MyComponent name=\"bar\" />; // OK\n<MyComponent name={0} />; // error, `name` is not a number\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Acquisition Include in TypeScript\nDESCRIPTION: Demonstrates how to configure the typeAcquisition.include setting in TypeScript to explicitly specify which type definitions should be included from DefinitelyTyped. In this example, it's configured to acquire jQuery type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/typeAcquisition/include.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"include\": [\"jquery\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Property Narrowing with 'in' Operator in TypeScript\nDESCRIPTION: This snippet shows how TypeScript previously allowed narrowing of types using the 'in' operator when checking for explicitly listed properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RGB {\n    red: number;\n    green: number;\n    blue: number;\n}\n\ninterface HSV {\n    hue: number;\n    saturation: number;\n    value: number;\n}\n\nfunction setColor(color: RGB | HSV) {\n    if (\"hue\" in color) {\n        // 'color' now has the type HSV\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Babel-like Module Export in JavaScript\nDESCRIPTION: Demonstrates how transpilers like Babel automatically create a default export, making modules more compatible with default import syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowSyntheticDefaultImports.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename: utilFunctions.js\nconst getStringLength = (str) => str.length;\nconst allFunctions = {\n  getStringLength,\n};\n\nmodule.exports = allFunctions;\nmodule.exports.default = allFunctions;\n```\n\n----------------------------------------\n\nTITLE: Void Type in TypeScript\nDESCRIPTION: Demonstrates void type usage for functions that don't return a value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction warnUser(): void {\n  console.log(\"This is my warning message\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing runtime type checking with decorators in TypeScript\nDESCRIPTION: Example demonstrating how to use decorators and reflect-metadata for runtime type checking in TypeScript. It includes a Point class, a Line class with validated setters, and a validate decorator function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// @emitDecoratorMetadata\n// @experimentalDecorators\n// @strictPropertyInitialization: false\nimport \"reflect-metadata\";\n\nclass Point {\n  constructor(public x: number, public y: number) {}\n}\n\nclass Line {\n  private _start: Point;\n  private _end: Point;\n\n  @validate\n  set start(value: Point) {\n    this._start = value;\n  }\n\n  get start() {\n    return this._start;\n  }\n\n  @validate\n  set end(value: Point) {\n    this._end = value;\n  }\n\n  get end() {\n    return this._end;\n  }\n}\n\nfunction validate<T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>) {\n  let set = descriptor.set!;\n  \n  descriptor.set = function (value: T) {\n    let type = Reflect.getMetadata(\"design:type\", target, propertyKey);\n\n    if (!(value instanceof type)) {\n      throw new TypeError(`Invalid type, got ${typeof value} not ${type.name}.`);\n    }\n\n    set.call(this, value);\n  };\n}\n\nconst line = new Line()\nline.start = new Point(0, 0)\n\n// @ts-ignore\n// line.end = {}\n\n// Fails at runtime with:\n// > Invalid type, got object not Point\n```\n\n----------------------------------------\n\nTITLE: Visualizing ESM to CJS Module Import Relationships with Mermaid\nDESCRIPTION: A Mermaid diagram comparing the import relationships between native ESM modules and ESM modules transpiled to CommonJS. It shows how both systems have different design principles for module relationships.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/diagrams/esm-cjs-interop.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n  subgraph Transpiled[ESM transpiled to CJS]\n    direction TB\n    C[Importing module] -- designed based on spec --> D[Imported module]\n  end\n  subgraph ESM\n    direction TB\n    A[Importing module] -- specified behavior --> B[Imported module]\n  end\n```\n\n----------------------------------------\n\nTITLE: Module Import and Usage Example\nDESCRIPTION: Shows how to import and use exported types and values from a module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as foo from \"./foo\";\nlet x: foo.SomeType = foo.SomeVar.a;\nconsole.log(x.count);\n```\n\n----------------------------------------\n\nTITLE: Defining Rest Elements in Tuple Types\nDESCRIPTION: Shows how rest elements in tuple types were affected by the labeled element restrictions, requiring rest elements to be labeled if other elements were labeled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ previously an error\ntype TwoOrMore_A<T> = [first: T, second: T, ...T[]];\n//                                          ~~~~~~\n// Tuple members must all have names\n// or all not have names.\n\n// ✅\ntype TwoOrMore_B<T> = [first: T, second: T, rest: ...T[]];\n```\n\n----------------------------------------\n\nTITLE: Using @enum in JavaScript\nDESCRIPTION: This example shows how to use the @enum tag to create an object literal with members of a specified type in JavaScript. It demonstrates both numeric and function-typed enums.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/** @enum {number} */\nconst JSDocState = {\n  BeginningOfLine: 0,\n  SawAsterisk: 1,\n  SavingComments: 2,\n};\n\nJSDocState.SawAsterisk;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @enum {function(number): number} */\nconst MathFuncs = {\n  add1: (n) => n + 1,\n  id: (n) => -n,\n  sub1: (n) => n - 1,\n};\n\nMathFuncs.add1;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AMD Module Concatenation in TypeScript\nDESCRIPTION: These snippets show how TypeScript 1.8 concatenates AMD modules when using --outFile. It demonstrates the input TypeScript files and the resulting JavaScript output with module closures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// file src/a.ts\nimport * as B from \"./lib/b\";\nexport function createA() {\n  return B.createB();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// file src/lib/b.ts\nexport function createB() {\n  return {};\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(\"lib/b\", [\"require\", \"exports\"], function (require, exports) {\n  \"use strict\";\n  function createB() {\n    return {};\n  }\n  exports.createB = createB;\n});\ndefine(\"a\", [\"require\", \"exports\", \"lib/b\"], function (require, exports, B) {\n  \"use strict\";\n  function createA() {\n    return B.createB();\n  }\n  exports.createA = createA;\n});\n```\n\n----------------------------------------\n\nTITLE: Using @this in JavaScript Functions\nDESCRIPTION: This example shows how to use the @this tag to explicitly specify the type of 'this' in JavaScript functions when the compiler cannot infer it from context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @this {HTMLElement}\n * @param {*} e\n */\nfunction callbackForLater(e) {\n  this.clientHeight = parseInt(e); // should be fine!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Content in a CSS File\nDESCRIPTION: Example CSS file (app.css) containing a style definition for a cookie banner that will be imported in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowArbitraryExtensions.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* app.css */\n.cookie-banner {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter/Setter with Type Conversion in JavaScript\nDESCRIPTION: Demonstrates a class with a getter and setter that converts input values to numbers before storing them.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Thing {\n  #size = 0;\n\n  get size() {\n    return this.#size;\n  }\n  set size(value) {\n    let num = Number(value);\n\n    // Don't allow NaN and stuff.\n    if (!Number.isFinite(num)) {\n      this.#size = 0;\n      return;\n    }\n\n    this.#size = num;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Producer Interface with Covariance in TypeScript\nDESCRIPTION: Defines a generic Producer interface that demonstrates covariant relationship through the make() method returning type T\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Producer<T> {\n  make(): T;\n}\n```\n\n----------------------------------------\n\nTITLE: Module Resolution Example\nDESCRIPTION: Shows a basic module import example used to explain TypeScript's module resolution process.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport sayHello from \"greetings\";\nsayHello(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Overloads in TypeScript Declarations\nDESCRIPTION: Demonstrates the proper way to define function overloads for callbacks in TypeScript, using a single overload with maximum arity instead of separate overloads.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\ndeclare function beforeAll(action: () => void, timeout?: number): void;\ndeclare function beforeAll(\n  action: (done: DoneFn) => void,\n  timeout?: number\n): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\ndeclare function beforeAll(\n  action: (done: DoneFn) => void,\n  timeout?: number\n): void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Options Overview\nDESCRIPTION: A collection of TypeScript compiler configuration options including importHelpers, importsNotUsedAsValues, incremental compilation settings, source map options, JSX configurations, module resolution settings, and various other compilation behaviors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n--importHelpers: boolean (default: false)\n--importsNotUsedAsValues: \"remove\" | \"preserve\" | \"error\" (default: \"remove\")\n--incremental: boolean (default: true if composite)\n--inlineSourceMap: boolean (default: false)\n--inlineSources: boolean (default: false)\n--isolatedDeclarations: boolean (default: false)\n--isolatedModules: boolean (default: true if verbatimModuleSyntax)\n--jsx: \"preserve\" | \"react\" | \"react-native\" | \"react-jsx\" | \"react-jsxdev\"\n--jsxFactory: string (default: \"React.createElement\")\n--jsxFragmentFactory: string (default: \"React.Fragment\")\n--jsxImportSource: string (default: \"react\")\n--moduleResolution: \"classic\" | \"node10\" | \"node\" | \"node16\" | \"nodenext\" | \"bundler\"\n```\n\n----------------------------------------\n\nTITLE: Using verbatimModuleSyntax Flag in TypeScript\nDESCRIPTION: Shows how the new --verbatimModuleSyntax flag works by keeping imports without the type modifier and dropping those with it, simplifying module emission rules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// Erased away entirely.\nimport type { A } from \"a\";\n\n// Rewritten to 'import { b } from \"bcd\";'\nimport { b, type c, type d } from \"bcd\";\n\n// Rewritten to 'import {} from \"xyz\";'\nimport { type xyz } from \"xyz\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation Output: JavaScript and Declaration Files\nDESCRIPTION: This diagram illustrates the TypeScript compilation process, showing how a .ts file produces both a .js file (compiled JavaScript) and a .d.ts file (type declarations), with different styling to distinguish between them.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/diagrams/theory.md#2025-04-20_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n  main.ts --> main.js\n  main.ts --> main.d.ts\n  style main.js stroke-dasharray: 5 5\n  style main.d.ts stroke-dasharray: 15 4\n```\n\n----------------------------------------\n\nTITLE: Default Export Class in TypeScript\nDESCRIPTION: Shows how to use the default export syntax with a class declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Greeter {\n  sayHello() {\n    console.log(\"Greetings!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting imports with --module preserve in TypeScript\nDESCRIPTION: Illustrates how different import syntaxes are emitted when using --module preserve, showing the preservation of ECMAScript imports and transformation of require() calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as foo from \"some-package/foo\";\nimport bar = require(\"some-package/bar\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as foo from \"some-package/foo\";\nvar bar = require(\"some-package/bar\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TypeScript Integration\nDESCRIPTION: Webpack configuration that handles TypeScript files using ts-loader and enables source maps for debugging. It specifies entry point, output location, and file resolution settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: \"./src/index.ts\",\n  output: {\n    filename: \"./dist/bundle.js\",\n  },\n\n  // Enable sourcemaps for debugging webpack's output.\n  devtool: \"source-map\",\n\n  resolve: {\n    // Add '.ts' and '.tsx' as resolvable extensions.\n    extensions: [\"\", \".webpack.js\", \".web.js\", \".ts\", \".tsx\", \".js\"],\n  },\n\n  module: {\n    rules: [\n      // All files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'.\n      { test: /\\.tsx?$/, loader: \"ts-loader\" },\n\n      // All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.\n      { test: /\\.js$/, loader: \"source-map-loader\" },\n    ],\n  },\n\n  // Other options...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Resolution with moduleSuffixes in tsconfig.json\nDESCRIPTION: Configuration example showing how to set up moduleSuffixes in tsconfig.json to customize the file extension lookup sequence. This feature is useful for projects like React Native where different platforms may use different file extensions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"moduleSuffixes\": [\".ios\", \".native\", \"\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Interoperability Example with Different Dependencies\nDESCRIPTION: Comprehensive example showing different module types and their interoperability, including transpiled dependencies, true CommonJS modules, and local modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: node_modules/transpiled-dependency/index.js\nexports.__esModule = true;\nexports.default = function doSomething() { /* ... */ };\nexports.something = \"something\";\n\n// @Filename: node_modules/true-cjs-dependency/index.js\nmodule.exports = function doSomethingElse() { /* ... */ };\n\n// @Filename: src/sayHello.ts\nexport default function sayHello() { /* ... */ }\nexport const hello = \"hello\";\n\n// @Filename: src/main.ts\nimport doSomething from \"transpiled-dependency\";\nimport doSomethingElse from \"true-cjs-dependency\";\nimport sayHello from \"./sayHello.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp with Babel for TypeScript transpilation\nDESCRIPTION: Gulp configuration file that sets up a build pipeline using browserify, tsify, and babelify to transform TypeScript into ES5 JavaScript with sourcemaps.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar browserify = require(\"browserify\");\nvar source = require(\"vinyl-source-stream\");\nvar tsify = require(\"tsify\");\nvar sourcemaps = require(\"gulp-sourcemaps\");\nvar buffer = require(\"vinyl-buffer\");\nvar paths = {\n  pages: [\"src/*.html\"],\n};\n\ngulp.task(\"copy-html\", function () {\n  return gulp.src(paths.pages).pipe(gulp.dest(\"dist\"));\n});\n\ngulp.task(\n  \"default\",\n  gulp.series(gulp.parallel(\"copy-html\"), function () {\n    return browserify({\n      basedir: \".\",\n      debug: true,\n      entries: [\"src/main.ts\"],\n      cache: {},\n      packageCache: {},\n    })\n      .plugin(tsify)\n      .transform(\"babelify\", {\n        presets: [\"es2015\"],\n        extensions: [\".ts\"],\n      })\n      .bundle()\n      .pipe(source(\"bundle.js\"))\n      .pipe(buffer())\n      .pipe(sourcemaps.init({ loadMaps: true }))\n      .pipe(sourcemaps.write(\"./\"))\n      .pipe(gulp.dest(\"dist\"));\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Export Declaration Example in TypeScript\nDESCRIPTION: Demonstrates how to export module members using the new ES6 export syntax with optional name aliases.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Stream { ... }\nfunction writeToStream(stream: Stream, data: string) { ... }\nexport { Stream, writeToStream as write };\n```\n\n----------------------------------------\n\nTITLE: Generating Declaration Files with TypeScript\nDESCRIPTION: Shows how TypeScript generates declaration files (.d.ts) from TypeScript source code. This example uses JSDoc comments that are preserved in the declaration output and demonstrates automatic type inference for the return type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @declaration: true\n// @showEmit\n// @showEmittedFile: index.d.ts\n\n/**\n * Gets the length of a string\n * @param value a string\n */\nexport function getStringLength(value: string) {\n  return value.length\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"See above\",\n  \"extension\": \"ts\",\n  \"highlights\": [],\n  \"queries\": [],\n  \"staticQuickInfos\": \"[ 0 items ]\",\n  \"errors\": [],\n  \"playgroundURL\": \"https://www.typescriptlang.org/play/#code/PTAEAEBMFMGMBsCGAnRAXAlgewHYC5Q1kBXaAKBAgGcALLAdwFEBbDNCscWhlttaSADEM8aAQw4YADwB0kGWipkKAKhVlQK0AHFoiwjWihROAOZoaoLADNQiUFSITTGreAAOKRM1AA3RPCkdg5OZq7AZNBS7ljIaKDWxDiwmLigpnoAyqGmADLQZhYAFP6BYiHIzgCUoADeGqDIesTIOH4BpDIm5jRkAL5kQA\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Stricter Checking for Generic Functions\nDESCRIPTION: Demonstrates stricter checks when comparing two generic signatures, potentially catching more bugs in TypeScript 2.4.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = <T, U>(x: T, y: U) => [T, U];\ntype B = <S>(x: S, y: S) => [S, S];\n\nfunction f(a: A, b: B) {\n  a = b; // Error\n  b = a; // Ok\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Ambiguity with isolatedModules\nDESCRIPTION: This snippet shows how the combination of preserveValueImports and isolatedModules can lead to ambiguity in determining which imports should be preserved.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Which of these is a value that should be preserved? tsc knows, but `ts.transpileModule`,\n// ts-loader, esbuild, etc. don't, so `isolatedModules` gives an error.\nimport { someFunc, BaseType } from \"./some-module.js\";\n//                 ^^^^^^^^\n// Error: 'BaseType' is a type and must be imported using a type-only import\n// when 'preserveValueImports' and 'isolatedModules' are both enabled.\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Insensitive Import Sorting in VS Code\nDESCRIPTION: Shows how to configure experimental options for case-insensitive import sorting in VS Code using the typescript.unstable settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typescript.unstable\": {\n        \"organizeImportsIgnoreCase\": \"auto\",\n        \"organizeImportsCollation\": \"ordinal\",\n        \"organizeImportsLocale\": \"en\",\n        \"organizeImportsCaseFirst\": false,\n        \"organizeImportsNumericCollation\": true,\n        \"organizeImportsAccentCollation\": true\n    },\n    \"javascript.unstable\": {\n        // same options valid here...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript with Source Map Reference\nDESCRIPTION: The JavaScript output generated when compiling TypeScript with sourceMap enabled, including the sourceMappingURL comment.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/sourceMap.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// helloWorld.js\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.helloWorld = \"hi\";\n//# sourceMappingURL=// helloWorld.js.map\n```\n\n----------------------------------------\n\nTITLE: Configuring Declaration Directory in tsconfig.json\nDESCRIPTION: Demonstrates how to configure the TypeScript compiler to generate declaration files and specify a custom output directory for them using the 'declarationDir' option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/declarationDir.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \"./types\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Discouraged Non-Namespaced Type Declarations in TypeScript Global Declaration Files\nDESCRIPTION: Shows the discouraged approach of declaring types at the top level without namespacing them to the library's global variable. This can lead to name conflicts when multiple declaration files are used.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// at top-level\ninterface CatsKittySettings {}\n```\n\n----------------------------------------\n\nTITLE: Merging Property Assignments with Generic Spread Expressions\nDESCRIPTION: Shows how property assignments and non-generic spread expressions are merged around generic spread expressions in object literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo1<T>(t: T, obj1: { a: string }, obj2: { b: string }) {\n  return { ...obj1, x: 1, ...t, ...obj2, y: 2 }; // { a: string, x: number } & T & { b: string, y: number }\n}\n```\n\n----------------------------------------\n\nTITLE: GlobalThis Limitations with let/const\nDESCRIPTION: Demonstrates that variables declared with let and const are not accessible via globalThis.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet answer = 42;\n\n// error! Property 'answer' does not exist on 'typeof globalThis'.\nglobalThis.answer = 333333;\n```\n\n----------------------------------------\n\nTITLE: Template Strings Implementation\nDESCRIPTION: Shows the usage of ES6 template strings and their compilation output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvar name = \"TypeScript\";\nvar greeting = `Hello, ${name}! Your name has ${name.length} characters`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Acquisition in TypeScript\nDESCRIPTION: Configuration snippet showing how to disable automatic type acquisition in JavaScript projects using the typeAcquisition.enable setting in tsconfig.json. When set to false, TypeScript will not automatically download and include type definitions for JavaScript dependencies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/enable.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"enable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bound Decorator Implementation\nDESCRIPTION: Implementation of a bound decorator that automatically binds methods to their class instance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bound(originalMethod: any, context: ClassMethodDecoratorContext) {\n    const methodName = context.name;\n    if (context.private) {\n        throw new Error(`'bound' cannot decorate private properties like ${methodName as string}.`);\n    }\n    context.addInitializer(function () {\n        this[methodName] = this[methodName].bind(this);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with react Option (Legacy)\nDESCRIPTION: Shows the legacy react option which transforms JSX into equivalent React.createElement calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration File Skip Example\nDESCRIPTION: Example showing skipLibCheck property usage in TypeScript configuration to skip type checking of .d.ts files. This can improve compilation time but may miss type inconsistencies between libraries.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/skipLibCheck.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Function in TypeScript\nDESCRIPTION: A simple TypeScript example of an async function that returns an empty object. This will require helper functions when compiled to ES5.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noEmitHelpers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating noFallthroughCasesInSwitch Error Reporting in TypeScript\nDESCRIPTION: This example shows how the noFallthroughCasesInSwitch compiler option flags an error when a case in a switch statement doesn't include break, return, or throw statements, preventing accidental fallthrough bugs.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noFallthroughCasesInSwitch.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noFallthroughCasesInSwitch\n// @errors: 7029\nconst a: number = 6;\n\nswitch (a) {\n  case 0:\n    console.log(\"even\");\n  case 1:\n    console.log(\"odd\");\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Interface Types in TypeScript\nDESCRIPTION: Demonstrates recursive interface definitions that previously caused performance issues during type compatibility checks, now optimized in TypeScript 5.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface A {\n    value: A;\n    other: string;\n}\n\ninterface B {\n    value: B;\n    other: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation to ES5 JavaScript\nDESCRIPTION: This example shows how TypeScript compiles to JavaScript, targeting ES5. Note how type annotations are removed and the template string is converted to concatenation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(person, date) {\n    console.log(\"Hello \".concat(person, \", today is \").concat(date.toDateString(), \"!\"));\n}\ngreet(\"Maddison\", new Date());\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cross-Module System Import Behaviors with Mermaid\nDESCRIPTION: An expanded Mermaid diagram showing the relationships between ESM, transpiled ESM to CJS, and true CJS modules. It highlights the unspecified and questionable behaviors that occur when crossing module system boundaries.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/diagrams/esm-cjs-interop.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  subgraph Transpiled[ESM transpiled to CJS]\n    C[Importing module] -- designed based on spec --> D[Imported module]\n  end\n  subgraph CJS[True CJS]\n    E[Imported module]\n  end\n  subgraph ESM\n    A[Importing module] -- specified behavior --> B[Imported module]\n  end\n  A -. unspecified behavior .-> E\n  C .->|\"<span style='font-size: 3em'>❓🤷🏻‍♂️❓</span>\"| E\n```\n\n----------------------------------------\n\nTITLE: Importing a Module in JavaScript and TypeScript\nDESCRIPTION: Demonstrates how to import a module in both JavaScript (CommonJS) and TypeScript/ES6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require(\"fs\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\n```\n\n----------------------------------------\n\nTITLE: Side Effect Import Error with noUncheckedSideEffectImports\nDESCRIPTION: Shows how the new --noUncheckedSideEffectImports flag catches errors when TypeScript can't find the module referenced in a side effect import.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"oops-this-module-does-not-exist\";\n//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// error: Cannot find module 'oops-this-module-does-not-exist' or its corresponding type declarations.\n```\n\n----------------------------------------\n\nTITLE: Setting up and Using Automatic Type Acquisition in TypeScript\nDESCRIPTION: Example showing how to set up the ATA module with callback functions for handling downloaded type definitions. The setup includes callbacks for file reception, progress tracking, and completion notification.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ata/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Create the function for running ATA with a series of callbacks\nconst ata = setupTypeAcquisition({\n  projectName: \"My ATA Project\",\n  typescript: ts,\n  logger: console,\n  delegate: {\n    receivedFile: (code: string, path: string) => {\n      // Add code to your runtime at the path...\n    },\n    started: () => {\n      console.log(\"ATA start\")\n    },\n    progress: (downloaded: number, total: number) => {\n      console.log(`Got ${downloaded} out of ${total}`)\n    },\n    finished: vfs => {\n      console.log(\"ATA done\", vfs)\n    },\n  },\n})\n\n// Run that function with the new sourcefile\nata(`import danger from \"danger\"`)\n```\n\n----------------------------------------\n\nTITLE: Const Enum Implementation\nDESCRIPTION: Demonstrates const enum usage and compilation output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum Suit {\n  Clubs,\n  Diamonds,\n  Hearts,\n  Spades\n}\nvar d = Suit.Diamonds;\n```\n\n----------------------------------------\n\nTITLE: Adding an Element to the DOM with TypeScript\nDESCRIPTION: A TypeScript code snippet that selects an element by ID, creates a new paragraph element, adds text content to it, and appends it to the selected element. This demonstrates the basic flow of DOM manipulation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Select the div element using the id property\nconst app = document.getElementById(\"app\");\n\n// 2. Create a new <p></p> element programmatically\nconst p = document.createElement(\"p\");\n\n// 3. Add the text content\np.textContent = \"Hello, World!\";\n\n// 4. Append the p element to the div element\napp?.appendChild(p);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration Output with stripInternal Enabled\nDESCRIPTION: Demonstrates how setting stripInternal to true removes the internal constant from the declaration file output, showing how the compiler redacts declarations with @internal annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/stripInternal.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @stripinternal\n// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating any/unknown Propagation in Falsy Positions\nDESCRIPTION: Shows how TypeScript 4.1 changes type inference when using any/unknown types in a falsy position of a logical AND expression. Previously the right side type would be used, now any/unknown is propagated.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let foo: unknown;\ndeclare let somethingElse: { someProp: string };\n\nlet x = foo && somethingElse;\n```\n\n----------------------------------------\n\nTITLE: Code Action Newline Preservation Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript 3.9 preserves newlines during function extraction refactoring, showing both the original code and the refactored result.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst maxValue = 100;\n\n/*start*/\nfor (let i = 0; i <= maxValue; i++) {\n  // First get the squared value.\n  let square = i ** 2;\n\n  // Now print the squared value.\n  console.log(square);\n}\n/*end*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst maxValue = 100;\n\nprintSquares();\n\nfunction printSquares() {\n  for (let i = 0; i <= maxValue; i++) {\n    // First get the squared value.\n    let square = i ** 2;\n\n    // Now print the squared value.\n    console.log(square);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Declaration File Preserving Original Type Order\nDESCRIPTION: Demonstrates the preferred output for the declaration file in TypeScript 5.5, where the original order of union types is preserved, maintaining developer intent and potentially improving performance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const strBool: string | boolean;\nexport const boolStr: boolean | string;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Analysis Example\nDESCRIPTION: Illustrates a simple TypeScript import statement that the compiler must analyze to determine types and ensure runtime compatibility.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport sayHello from \"greetings\";\nsayHello(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Triple-Slash Reference Directives Without Preserve\nDESCRIPTION: Shows examples of standard triple-slash directives that will be removed in the output by the compiler.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"...\" />\n/// <reference types=\"...\" />\n/// <reference lib=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Limitation of Using Variables for Indexing Types in TypeScript\nDESCRIPTION: Illustrates that TypeScript doesn't allow using variables as type indexes. Variables cannot be used in type positions because type checking happens at compile time, before variables have values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = \"age\";\ntype Age = Person[key];\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript File for Import Management Commands\nDESCRIPTION: Sample code demonstrating import statements that can be managed by TypeScript's import commands like 'Organize Imports', 'Sort Imports', and 'Remove Unused Imports'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Zebra, Moose, HoneyBadger } from \"./zoo\";\nimport { foo, bar } from \"./helper\";\n\nlet x: Moose | HoneyBadger = foo();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Callable Modules in TypeScript with Express Example\nDESCRIPTION: Demonstrates how to import and use a library like Express that exposes itself as a callable function. This pattern requires special handling in ES6-compliant module loaders.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport exp = require(\"express\");\nvar app = exp();\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple JavaScript Files in HTML\nDESCRIPTION: Demonstrates the early approach of loading multiple JavaScript files using separate script tags in HTML, showing how scripts share the same global scope.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"a.js\"></script>\n    <script src=\"b.js\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: CommonJS Default Export with RegExp\nDESCRIPTION: A CommonJS module that exports a regular expression as the default export using module.exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = /hello( world)?/;\n```\n\n----------------------------------------\n\nTITLE: Type Inference in Generator Functions\nDESCRIPTION: Example of improved type inference for yield expressions within generator functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* foo() {\n  let x: string = yield;\n  console.log(x.toUpperCase());\n}\n\nlet x = foo();\nx.next(); // first call to 'next' is always ignored\nx.next(42); // error! 'number' is not assignable to 'string'\n```\n\n----------------------------------------\n\nTITLE: Managing Declaration Dependencies in package.json\nDESCRIPTION: Example showing how to properly manage dependencies for TypeScript declaration files in package.json, including both regular npm packages and their corresponding @types packages.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"browserify-typescript-extension\",\n  \"author\": \"Vandelay Industries\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./lib/main.js\",\n  \"types\": \"./lib/main.d.ts\",\n  \"dependencies\": {\n    \"browserify\": \"latest\",\n    \"@types/browserify\": \"latest\",\n    \"typescript\": \"next\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Named Exports Reliability Issues in Node.js\nDESCRIPTION: Shows how Node.js's syntactic analysis of CommonJS exports can lead to different behavior compared to transpiled modules, particularly with dynamically constructed export names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: named-exports.cjs\nexports.hello = \"world\";\nexports[\"worl\" + \"d\"] = \"hello\";\n\n// @Filename: transpile-vs-run-directly.{js/mjs}\nimport { hello, world } from \"./named-exports.cjs\";\n// `hello` works, but `world` is missing in Node.js 💥\n\nimport mod from \"./named-exports.cjs\";\nmod.world;\n// Accessing properties from the default always works ✅\n```\n\n----------------------------------------\n\nTITLE: Custom JSX Factory Implementation - TypeScript\nDESCRIPTION: Shows how to use custom JSX factory names instead of the default React namespace.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jsxFactory } from \"jsxFactory\";\n\nvar div = <div>Hello JSX!</div>;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar jsxFactory_1 = require(\"jsxFactory\");\nvar div = jsxFactory_1.jsxFactory.createElement(\"div\", null, \"Hello JSX!\");\n```\n\n----------------------------------------\n\nTITLE: Using async/await in JavaScript\nDESCRIPTION: Demonstrates the traditional approach of using async/await in JavaScript by wrapping code in an async function and immediately calling it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const response = await fetch(\"...\");\n  const greeting = await response.text();\n  console.log(greeting);\n}\n\nmain().catch((e) => console.error(e));\n```\n\n----------------------------------------\n\nTITLE: Using disableReferencedProjectLoad in TypeScript configuration\nDESCRIPTION: The 'disableReferencedProjectLoad' flag can be set in the TypeScript configuration to prevent automatic loading of all projects in a multi-project setup. This improves performance in large projects by loading projects dynamically as files are opened in the editor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/disableReferencedProjectLoad.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisableReferencedProjectLoad\n```\n\n----------------------------------------\n\nTITLE: Using noUnusedParameters and noUnusedLocals\nDESCRIPTION: Demonstrates the usage of compiler flags to identify unused parameters and local variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport B, { readFile } from \"./b\";\n//     ^ Error: `B` declared but never used\nreadFile();\n\nexport function write(message: string, args: string[]) {\n  //                                 ^^^^  Error: 'arg' declared but never used.\n  console.log(message);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output With Inline Source Map\nDESCRIPTION: The JavaScript output generated from the TypeScript code with inlineSourceMap enabled, which includes the source map data as a comment at the bottom of the file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/inlineSourceMap.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring Assignment in TypeScript\nDESCRIPTION: Shows how to use array destructuring in assignment expressions for swapping variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvar x = 1;\nvar y = 2;\n[x, y] = [y, x];\n```\n\n----------------------------------------\n\nTITLE: Aggressive Reduction of Intersections in TypeScript\nDESCRIPTION: Shows how TypeScript 5.4 more aggressively reduces intersections between type variables and primitive types, potentially changing the inferred types in some cases.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function intersect<T, U>(x: T, y: U): T & U;\n\nfunction foo<T extends \"abc\" | \"def\">(x: T, str: string, num: number) {\n\n    // Was 'T & string', now is just 'T'\n    let a = intersect(x, str);\n\n    // Was 'T & number', now is just 'never'\n    let b = intersect(x, num)\n\n    // Was '(T & \"abc\") | (T & \"def\")', now is just 'T'\n    let c = Math.random() < 0.5 ?\n        intersect(x, \"abc\") :\n        intersect(x, \"def\");\n}\n```\n\n----------------------------------------\n\nTITLE: Document.getElementById Type Definition\nDESCRIPTION: The TypeScript type definition for the getElementById method, which returns either an HTMLElement or null. This demonstrates how TypeScript provides type safety for DOM methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetElementById(elementId: string): HTMLElement | null;\n```\n\n----------------------------------------\n\nTITLE: Generic Function Overloads Without Defaults\nDESCRIPTION: Example of function overloads before generic parameter defaults feature\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function create(): Container<HTMLDivElement, HTMLDivElement[]>;\ndeclare function create<T extends HTMLElement>(element: T): Container<T, T[]>;\ndeclare function create<T extends HTMLElement, U extends HTMLElement>(\n  element: T,\n  children: U[]\n): Container<T, U[]>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Handling with Improved Generic Narrowing\nDESCRIPTION: This code shows how TypeScript 4.3 correctly handles generic narrowing, allowing operations on a collection based on its type constraint. Previous versions would throw errors because TypeScript couldn't properly narrow the generic type parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeUnique<T, C extends Set<T> | T[]>(\n  collection: C,\n  comparer: (x: T, y: T) => number\n): C {\n  // Early bail-out if we have a Set.\n  // We assume the elements are already unique.\n  if (collection instanceof Set) {\n    return collection;\n  }\n\n  // Sort the array, then remove consecutive duplicates.\n  collection.sort(comparer);\n  //         ~~~~\n  // error: Property 'sort' does not exist on type 'C'.\n  for (let i = 0; i < collection.length; i++) {\n    //                             ~~~~~~\n    // error: Property 'length' does not exist on type 'C'.\n    let j = i;\n    while (\n      j < collection.length &&\n      comparer(collection[i], collection[j + 1]) === 0\n    ) {\n      //                    ~~~~~~\n      // error: Property 'length' does not exist on type 'C'.\n      //                                       ~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~\n      // error: Element implicitly has an 'any' type because expression of type 'number'\n      //        can't be used to index type 'Set<T> | T[]'.\n      j++;\n    }\n    collection.splice(i + 1, j - i);\n    //         ~~~~~~\n    // error: Property 'splice' does not exist on type 'C'.\n  }\n  return collection;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure After Compilation with Custom Declaration Directory\nDESCRIPTION: Shows the resulting file structure after TypeScript compilation when using a custom declaration directory, with the .d.ts file placed in the specified 'types' folder.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/declarationDir.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nexample\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts\n```\n\n----------------------------------------\n\nTITLE: Stricter Spread Checks in JSX Example\nDESCRIPTION: Example demonstrating the stricter spread checks in JSX where TypeScript now enforces that the spread value must be an object type, rejecting unknown and never types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\n\ninterface Props {\n    stuff?: string;\n}\n\nfunction MyComponent(props: unknown) {\n    return <div {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Preact JSX Transformation\nDESCRIPTION: TypeScript configuration file (tsconfig.json) set up for Preact JSX transformation, demonstrating the use of 'jsxImportSource' to specify Preact as the JSX runtime source.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxImportSource.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    \"types\": [\"preact\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating noUnusedLocals Error Reporting in TypeScript\nDESCRIPTION: This example shows how TypeScript generates error 6133 when the noUnusedLocals compiler option is enabled. The variable 'defaultModelID' is declared but never used in the function, causing TypeScript to report an error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUnusedLocals.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noUnusedLocals\n// @errors: 6133\nconst createKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID };\n};\n```\n\n----------------------------------------\n\nTITLE: Package.json Module Type Configuration\nDESCRIPTION: Example of the package.json type field configuration that affects module detection when using the 'auto' setting with node16 or nodenext module settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/moduleDetection.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in TypeScript\nDESCRIPTION: Example of accessing a global variable in TypeScript code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"Half the number of widgets is \" + foo / 2);\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Files in TypeScript Examples\nDESCRIPTION: Demonstrates how to reference multiple files in TypeScript examples. The example shows exporting a constant from one file and importing it in another, with both files included in the same code block using filename comments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: file-with-export.ts\nexport const helloWorld = \"Example string\"\n\n// @filename: index.ts\nimport { helloWorld } from \"./file-with-export\"\nconsole.log(helloWorld)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"See above\",\n  \"extension\": \"ts\",\n  \"highlights\": [],\n  \"queries\": [],\n  \"staticQuickInfos\": \"[ 5 items ]\",\n  \"errors\": [],\n  \"playgroundURL\": \"https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKGCC0B3aAFwAtd4APABwHsAnIgOiIGcAoS2h0AYxsRZFQJeLFg0A6vVgATUAF5QAIgCiFNFQShBdaIgDmSgNxs2ICDiRpMoPTMrN20VFyEBvEWMnSZAX2x0NKjKjMCWBMRknPRESmx8AjQIjOL6ABSe4lJ0sgCUbEA\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example Showing Include Pattern Matching\nDESCRIPTION: An ASCII representation of a project directory structure showing which files are included (✓) or excluded (⨯) based on the include patterns src/**/* and tests/**/*.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/include.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Classes as Namespaces in JavaScript\nDESCRIPTION: Shows how classes can be used as namespaces in JavaScript files, allowing nesting of classes and simulation of static methods in pre-ES2015 code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass C {}\nC.D = class {};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Outer() {\n  this.y = 2;\n}\n\nOuter.Inner = function () {\n  this.yy = 2;\n};\n\nOuter.Inner();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ns = {};\nns.C = class {};\nns.func = function () {};\n\nns;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// IIFE\nvar ns = (function (n) {\n  return n || {};\n})();\nns.CONST = 1;\n\n// defaulting to global\nvar assign =\n  assign ||\n  function () {\n    // code goes here\n  };\nassign.extra = 1;\n```\n\n----------------------------------------\n\nTITLE: CommonJS Export Example\nDESCRIPTION: Shows how to export a value from a module using CommonJS (CJS) syntax with the exports object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// a.js\nexports.message = \"Hello from a.js\";\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Supporting Multiple Import Patterns\nDESCRIPTION: A JavaScript module implementation that supports multiple import patterns, including CommonJS and ES Modules imports with named and default exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass FastifyInstance {}\n\nfunction fastify() {\n  return new FastifyInstance();\n}\n\nfastify.FastifyInstance = FastifyInstance;\n\n// Allows for { fastify }\nfastify.fastify = fastify;\n// Allows for strict ES Module support\nfastify.default = fastify;\n// Sets the default export\nmodule.exports = fastify;\n```\n\n----------------------------------------\n\nTITLE: Stricter Generics Example\nDESCRIPTION: Demonstrates improved type checking for generic function calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction equal<T>(lhs: T, rhs: T): boolean {\n  return lhs === rhs;\n}\n\n// Previously: No error\n// New behavior: Error, no best common type between 'string' and 'number'\nvar e = equal(42, \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Operator Confusion Example\nDESCRIPTION: Example demonstrating a common mistake where an arrow function (=>) is used instead of a greater-than-or-equal operator (>=).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (x => 0) {\n    // Oops! This block always runs.\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing with Arbitrary Module Identifiers in TypeScript\nDESCRIPTION: Demonstrates importing a binding with an arbitrary string literal identifier and assigning it to a valid identifier name for use in code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \"🍌\" as banana } from \"./foo\"\n\n/**\n * om nom nom\n */\nfunction eat(food: string) {\n    console.log(\"Eating\", food);\n};\n\neat(banana);\n```\n\n----------------------------------------\n\nTITLE: Verbatim Module Syntax Examples\nDESCRIPTION: Demonstrates how the new --verbatimModuleSyntax flag works with a predictable pattern: imports/exports with the 'type' modifier are removed completely, while everything else remains in the output exactly as written.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/verbatimModuleSyntax.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Erased away entirely.\nimport type { A } from \"a\";\n\n// Rewritten to 'import { b } from \"bcd\";'\nimport { b, type c, type d } from \"bcd\";\n\n// Rewritten to 'import {} from \"xyz\";'\nimport { type xyz } from \"xyz\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Concat Overloads\nDESCRIPTION: Multiple function overloads for typing array concatenation in older TypeScript versions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction concat(arr1: [], arr2: []): [];\nfunction concat<A>(arr1: [A], arr2: []): [A];\nfunction concat<A, B>(arr1: [A, B], arr2: []): [A, B];\nfunction concat<A, B, C>(arr1: [A, B, C], arr2: []): [A, B, C];\nfunction concat<A, B, C, D>(arr1: [A, B, C, D], arr2: []): [A, B, C, D];\nfunction concat<A, B, C, D, E>(arr1: [A, B, C, D, E], arr2: []): [A, B, C, D, E];\nfunction concat<A, B, C, D, E, F>(arr1: [A, B, C, D, E, F], arr2: []): [A, B, C, D, E, F];\n```\n\n----------------------------------------\n\nTITLE: Terminal Output with listEmittedFiles Enabled\nDESCRIPTION: Example of the terminal output when compiling a TypeScript project with listEmittedFiles enabled, showing the paths of generated files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/listEmittedFiles.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n```\n\n----------------------------------------\n\nTITLE: ECMAScript Modules Export Example\nDESCRIPTION: Shows how to export a default value from a module using ECMAScript Modules (ESM) syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// a.js\nexport default \"Hello from a.js\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating children vs childNodes with Text Nodes\nDESCRIPTION: A code example illustrating how children only includes HTML elements, while childNodes includes both HTML elements and text nodes. This highlights the fundamental difference between these two properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<div>\n  <p>Hello, World</p>\n  TypeScript!\n</div>;\n\nconst div = document.getElementsByTagName(\"div\")[0];\n\ndiv.children;\n// HTMLCollection(1) [p]\n\ndiv.childNodes;\n// NodeList(2) [p, text]\n```\n\n----------------------------------------\n\nTITLE: Generator Type Checking with Runtime Error Detection\nDESCRIPTION: Shows how TypeScript 3.6 improves type checking for generator yield values to catch potential runtime errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* bar() {\n  let x: { hello(): void } = yield;\n  x.hello();\n}\n\nlet iter = bar();\niter.next();\niter.next(123); // oops! runtime error!\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Function with Properties\nDESCRIPTION: The TypeScript declaration for a function export with properties, using namespace to describe the attached properties on the function object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getArrayLength(arr: any[]): number;\ndeclare namespace getArrayLength {\n  declare const maxInterval: 12;\n}\n\nexport = getArrayLength;\n```\n\n----------------------------------------\n\nTITLE: CommonJS Function Export with Properties\nDESCRIPTION: A CommonJS module that exports a function with additional properties attached to it, demonstrating how functions can be objects with their own properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getArrayLength(arr) {\n  return arr.length;\n}\ngetArrayLength.maxInterval = 12;\n\nmodule.exports = getArrayLength;\n```\n\n----------------------------------------\n\nTITLE: CommonJS Auto-Import Examples\nDESCRIPTION: Shows the different import styles TypeScript supports in JavaScript files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from \"fs\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Literal Types in TypeScript\nDESCRIPTION: This snippet shows how to use string literal types in TypeScript 1.8. It demonstrates defining a type with specific string values and using it to catch errors at compile-time.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AnimationOptions {\n  deltaX: number;\n  deltaY: number;\n  easing: \"ease-in\" | \"ease-out\" | \"ease-in-out\";\n}\n\n// Error: Type '\"ease-inout\"' is not assignable to type '\"ease-in\" | \"ease-out\" | \"ease-in-out\"'\nnew UIElement().animate({ deltaX: 100, deltaY: 100, easing: \"ease-inout\" });\n```\n\n----------------------------------------\n\nTITLE: Promise Check with Direct Call\nDESCRIPTION: Shows how TypeScript 4.4 now flags always-truthy Promise checks even with direct function calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync function foo(): Promise<boolean> {\n  return false;\n}\n\nasync function bar(): Promise<string> {\n  if (foo()) {\n    return \"true\";\n  }\n  return \"false\";\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Dependencies for Declaration Files\nDESCRIPTION: Example showing how dependencies between TypeScript files work, where one module imports from another and requires type information to be propagated for declaration generation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// util.ts\nexport let one = \"1\";\nexport let two = \"2\";\n\n// add.ts\nimport { one, two } from \"./util\";\nexport function add() { return one + two; }\n```\n\n----------------------------------------\n\nTITLE: Using Triple-Slash-Reference Directive for Built-in Lib Files\nDESCRIPTION: Demonstrates the new triple-slash-reference directive introduced in TypeScript 3.0. This directive allows a file to explicitly include an existing built-in lib file, such as ES2017 string methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference lib=\"es2017.string\" />\n\n\"foo\".padStart(4);\n```\n\n----------------------------------------\n\nTITLE: Defining Animal and Dog Interfaces in TypeScript\nDESCRIPTION: Sets up example interfaces for Animal and Dog, where Dog extends Animal, to be used in variance examples.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n    animalStuff: any;\n}\n\ninterface Dog extends Animal {\n    dogStuff: any;\n}\n\n// ...\n\ntype Getter<T> = () => T;\n\ntype Setter<T> = (value: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Visualizing TypeScript Module Import Resolution\nDESCRIPTION: This diagram shows the import relationship between main.ts and math.ts files, illustrating how TypeScript resolves module imports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/diagrams/theory.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  main.ts -- \"#quot;./math#quot;\" --> math.ts\n```\n\n----------------------------------------\n\nTITLE: For-In Type Checking Example - TypeScript\nDESCRIPTION: Demonstrates improved type checking for for..in statements where the index variable is implicitly typed as string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvar a: MyObject[];\nfor (var x in a) {\n  // Type of x is implicitly string\n  var obj = a[x]; // Type of obj is MyObject\n}\n```\n\n----------------------------------------\n\nTITLE: IteratorResult Type Definition\nDESCRIPTION: Defines discriminated union types for Iterator results to distinguish between yield and return values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype IteratorResult<T, TReturn = any> =\n  | IteratorYieldResult<T>\n  | IteratorReturnResult<TReturn>;\n\ninterface IteratorYieldResult<TYield> {\n  done?: false;\n  value: TYield;\n}\n\ninterface IteratorReturnResult<TReturn> {\n  done: true;\n  value: TReturn;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Constructs Not Allowed with Erasable Syntax\nDESCRIPTION: Examples of TypeScript constructs that are not supported when using --erasableSyntaxOnly because they have runtime semantics that cannot be easily erased to produce valid JavaScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/erasableSyntaxOnly.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ error: An `import ... = require(...)` alias\nimport foo = require(\"foo\");\n\n// ❌ error: A namespace with runtime code.\nnamespace container {\n    foo.method();\n\n    export type Bar = string;\n}\n\n// ❌ error: An `import =` alias\nimport Bar = container.Bar;\n\nclass Point {\n    // ❌ error: Parameter properties\n    constructor(public x: number, public y: number) { }\n}\n\n// ❌ error: An `export =` assignment.\nexport = Point;\n\n// ❌ error: An enum declaration.\nenum Direction {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug and Release Builds for TypeScript in MSBuild\nDESCRIPTION: Shows how to set up different TypeScript compilation options for debug and release builds using PropertyGroup conditions. This example configures comment removal and source map generation differently for each build type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n  <TypeScriptRemoveComments>false</TypeScriptRemoveComments>\n  <TypeScriptSourceMap>true</TypeScriptSourceMap>\n</PropertyGroup>\n\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n  <TypeScriptRemoveComments>true</TypeScriptRemoveComments>\n  <TypeScriptSourceMap>false</TypeScriptSourceMap>\n</PropertyGroup>\n\n<Import\n    Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\"\n    Condition=\"Exists('$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets')\" />\n```\n\n----------------------------------------\n\nTITLE: Default Import Usage in TypeScript\nDESCRIPTION: Demonstrates how to import and use a default export.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Greeter from \"./greeter\";\nvar g = new Greeter();\ng.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Using Function Composition with Person Interface in TypeScript\nDESCRIPTION: Demonstrates the usage of the 'compose' function with concrete types, showing how type inference works for non-generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction getDisplayName(p: Person) {\n  return p.name.toLowerCase();\n}\n\nfunction getLength(s: string) {\n  return s.length;\n}\n\n// has type '(p: Person) => number'\nconst getDisplayNameLength = compose(getDisplayName, getLength);\n\n// works and returns the type 'number'\ngetDisplayNameLength({ name: \"Person McPersonface\", age: 42 });\n```\n\n----------------------------------------\n\nTITLE: Using Protected Members in TypeScript Classes\nDESCRIPTION: Demonstrates the protected access modifier which allows access within the class and its derived classes. Shows a Person class with a protected name property that can be accessed by the derived Employee class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Classes.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2445\nclass Person {\n  protected name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Employee extends Person {\n  private department: string;\n\n  constructor(name: string, department: string) {\n    super(name);\n    this.department = department;\n  }\n\n  public getElevatorPitch() {\n    return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n  }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name);\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty Module in TypeScript\nDESCRIPTION: This snippet shows how to declare a file as a module in TypeScript by adding an empty export statement. This changes the file to be treated as a module exporting nothing, regardless of the module target.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport {};\n```\n\n----------------------------------------\n\nTITLE: ES2015/ES6/ES2020/ES2022 Module Output Example in TypeScript\nDESCRIPTION: Shows TypeScript output when using ES2015/ES6/ES2020/ES2022 module formats, which support various levels of modern ECMAScript module features.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: es2015\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Grouped Imports Before Organize Imports in TypeScript\nDESCRIPTION: Example showing grouped imports before applying the improved group-aware Organize Imports feature. The imports are organized by type with comments separating them.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\n// local code\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\nimport * as aaa from \"./aaa\";\n\n// built-ins\nimport * as path from \"path\";\nimport * as child_process from \"child_process\"\nimport * as fs from \"fs\";\n\n// some code...\n```\n\n----------------------------------------\n\nTITLE: Type Preservation with Void Return Type in TypeScript\nDESCRIPTION: Shows how the void type is preserved when assigning the return value of a function with void return type to a variable, even if the function actually returns a value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst v1 = f1();\n\nconst v2 = f2();\n\nconst v3 = f3();\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Output with Preserved Import\nDESCRIPTION: This snippet shows the compiled JavaScript output when using preserveValueImports, where the value import is kept and the type import is removed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { someFunc } from \"./some-module.js\";\n\nexport class Thing {\n  someMethod() {\n    someFunc();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Truncation - Default Behavior\nDESCRIPTION: Demonstrates the default behavior where error messages are truncated. Shows an example of type mismatch error with a complex object type being assigned to a string variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noErrorTruncation.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322 2454\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n```\n\n----------------------------------------\n\nTITLE: Setting TypeScript Locale via CLI\nDESCRIPTION: Demonstrates how to set the TypeScript compiler's locale using the command line interface flag. This affects the language of TypeScript's messaging output but does not impact the emitted code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/locale.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsc --locale ru\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Label Error in TypeScript\nDESCRIPTION: Example showing how unused labels can indicate potential mistakes in code, such as forgetting a return statement when attempting to write an object literal. The code demonstrates the compiler behavior when allowUnusedLabels is set to false.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowUnusedLabels.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7028\n// @allowUnusedLabels: false\nfunction verifyAge(age: number) {\n  // Forgot 'return' statement\n  if (age > 18) {\n    verified: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New ECMAScript Set Methods in TypeScript 5.5\nDESCRIPTION: Comprehensive example demonstrating the usage of the new Set methods including union, intersection, difference, symmetricDifference, isDisjointFrom, isSubsetOf, and isSupersetOf.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet fruits = new Set([\"apples\", \"bananas\", \"pears\", \"oranges\"]);\nlet applesAndBananas = new Set([\"apples\", \"bananas\"]);\nlet applesAndOranges = new Set([\"apples\", \"oranges\"]);\nlet oranges = new Set([\"oranges\"]);\nlet emptySet = new Set();\n\n////\n// union\n////\n\n// Set(4) {'apples', 'bananas', 'pears', 'oranges'}\nconsole.log(fruits.union(oranges));\n\n// Set(3) {'apples', 'bananas', 'oranges'}\nconsole.log(applesAndBananas.union(oranges));\n\n////\n// intersection\n////\n\n// Set(2) {'apples', 'bananas'}\nconsole.log(fruits.intersection(applesAndBananas));\n\n// Set(0) {}\nconsole.log(applesAndBananas.intersection(oranges));\n\n// Set(1) {'apples'}\nconsole.log(applesAndBananas.intersection(applesAndOranges));\n\n////\n// difference\n////\n\n// Set(3) {'apples', 'bananas', 'pears'}\nconsole.log(fruits.difference(oranges));\n\n// Set(2) {'pears', 'oranges'}\nconsole.log(fruits.difference(applesAndBananas));\n\n// Set(1) {'bananas'}\nconsole.log(applesAndBananas.difference(applesAndOranges));\n\n////\n// symmetricDifference\n////\n\n// Set(2) {'bananas', 'oranges'}\nconsole.log(applesAndBananas.symmetricDifference(applesAndOranges)); // no apples\n\n////\n// isDisjointFrom\n////\n\n// true\nconsole.log(applesAndBananas.isDisjointFrom(oranges));\n\n// false\nconsole.log(applesAndBananas.isDisjointFrom(applesAndOranges));\n\n// true\nconsole.log(fruits.isDisjointFrom(emptySet));\n\n// true\nconsole.log(emptySet.isDisjointFrom(emptySet));\n\n////\n// isSubsetOf\n////\n\n// true\nconsole.log(applesAndBananas.isSubsetOf(fruits));\n\n// false\nconsole.log(fruits.isSubsetOf(applesAndBananas));\n\n// false\nconsole.log(applesAndBananas.isSubsetOf(oranges));\n\n// true\nconsole.log(fruits.isSubsetOf(fruits));\n\n// true\nconsole.log(emptySet.isSubsetOf(fruits));\n\n////\n// isSupersetOf\n////\n\n// true\nconsole.log(fruits.isSupersetOf(applesAndBananas));\n\n// false\nconsole.log(applesAndBananas.isSupersetOf(fruits));\n\n// false\nconsole.log(applesAndBananas.isSupersetOf(oranges));\n\n// true\nconsole.log(fruits.isSupersetOf(fruits));\n\n// false\nconsole.log(emptySet.isSupersetOf(fruits));\n```\n\n----------------------------------------\n\nTITLE: Downleveled Array Spread With importHelpers\nDESCRIPTION: The emitted ES5 JavaScript when both downlevelIteration and importHelpers are enabled. Helper functions are imported from tslib instead of being included in the file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/importHelpers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @target: ES5\n// @downleveliteration\n// @importhelpers\n// @noErrors\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n```\n\n----------------------------------------\n\nTITLE: Using @override in JavaScript Classes\nDESCRIPTION: This example shows how to use the @override tag in JavaScript classes to indicate that a method overrides a method from a base class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport class C {\n  m() { }\n}\nclass D extends C {\n  /** @override */\n  m() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Const Assertion Mutability Example\nDESCRIPTION: Demonstrates that const assertions don't make nested objects fully immutable, allowing mutations of array contents.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet arr = [1, 2, 3, 4];\n\nlet foo = {\n  name: \"foo\",\n  contents: arr,\n} as const;\n\nfoo.name = \"bar\"; // error!\nfoo.contents = []; // error!\n\nfoo.contents.push(5); // ...works!\n```\n\n----------------------------------------\n\nTITLE: Using Classes in TypeScript\nDESCRIPTION: Example of instantiating a class, modifying properties, calling methods, and extending the class with a subclass.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst myGreeter = new Greeter(\"hello, world\");\nmyGreeter.greeting = \"howdy\";\nmyGreeter.showGreeting();\n\nclass SpecialGreeter extends Greeter {\n  constructor() {\n    super(\"Very special greetings\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Property Plucking\nDESCRIPTION: Simple JavaScript function that picks specified properties from an object using dynamic property names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction pluck(o, propertyNames) {\n  return propertyNames.map((n) => o[n]);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Without checkJS\nDESCRIPTION: Shows how TypeScript behaves when importing potentially incorrect JavaScript code without checkJS enabled. No type errors are reported in this case.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/checkJs.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @allowJs\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.142);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Acquisition Exclusions in TypeScript\nDESCRIPTION: Demonstrates how to configure TypeScript to exclude specific modules from automatic type acquisition. This is particularly useful for excluding testing libraries like Jest or Mocha that aren't needed in the main application's type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/typeAcquisition/exclude.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"exclude\": [\"jest\", \"mocha\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File System Backed Environment in TypeScript\nDESCRIPTION: This snippet shows how to create a file system backed virtual TypeScript environment using createFSBackedSystem. It demonstrates setting up the environment and getting auto-completions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst compilerOpts: ts.CompilerOptions = { target: ts.ScriptTarget.ES2016, esModuleInterop: true }\nconst fsMap = new Map<string, string>()\n\n// If using imports where the types don't directly match up to their FS representation (like the\n// imports for node) then use triple-slash directives to make sure globals are set up first.\nconst content = `/// <reference types=\"node\" />\\nimport * as path from 'path';\\npath.`\nfsMap.set(\"index.ts\", content)\n\n// By providing a project root, then the system knows how to resolve node_modules correctly\nconst projectRoot = path.join(__dirname, \"..\")\nconst system = createFSBackedSystem(fsMap, projectRoot)\nconst env = createVirtualTypeScriptEnvironment(system, [\"index.ts\"], ts, compilerOpts)\n\n// Requests auto-completions at `path.|`\nconst completions = env.languageService.getCompletionsAtPosition(\"index.ts\", content.length, {})\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript's typeof operator in expression context\nDESCRIPTION: Example showing JavaScript's built-in typeof operator used in an expression context to determine the type of a string value at runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Prints \"string\"\nconsole.log(typeof \"Hello world\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Type Parameters with @template in JavaScript\nDESCRIPTION: This snippet shows how to declare multiple type parameters using the @template tag in JavaScript. It demonstrates using comma-separated parameters or multiple tags.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @template T,U,V\n * @template W,X\n */\n```\n\n----------------------------------------\n\nTITLE: Duplicate Interface Declarations with Identical Types\nDESCRIPTION: Shows how TypeScript 2.0 allows duplicate identifiers across blocks when they have identical types, demonstrating interface merging with the Error interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Error {\n  stack?: string;\n}\n\ninterface Error {\n  code?: string;\n  path?: string;\n  stack?: string; // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Namespaces in TypeScript\nDESCRIPTION: Syntax for declaring nested namespaces to create hierarchical organization of related types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace GreetingLib.Options {\n  // Refer to via GreetingLib.Options.Log\n  interface Log {\n    verbose?: boolean;\n  }\n  interface Alert {\n    modal: boolean;\n    title?: string;\n    color?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Language Service Plugins in tsconfig.json\nDESCRIPTION: The plugins property in tsconfig.json allows developers to specify language service plugins that run inside the editor. These plugins enhance TypeScript's interaction with editors by providing additional features like specialized linting and autocompletion.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      { \"name\": \"typescript-styled-plugin\" },\n      { \"name\": \"ts-sql-plugin\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed String/Number Enum Error in TypeScript 5.0\nDESCRIPTION: This example shows how TypeScript 5.0 now correctly raises an error for certain kinds of indirected mixed string/number enum forms that previously created an all-number enum.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nenum Letters {\n    A = \"a\"\n}\nenum Numbers {\n    one = 1,\n    two = Letters.A\n}\n\n// Now correctly an error\nconst t: number = Numbers.two;\n```\n\n----------------------------------------\n\nTITLE: Namespace Type Addition to Class\nDESCRIPTION: Demonstrates adding a namespaced type to a class.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {}\n// ... elsewhere ...\nnamespace C {\n  export interface D {}\n}\nlet y: C.D; // OK\n```\n\n----------------------------------------\n\nTITLE: Generic Function with Parameter Defaults\nDESCRIPTION: Simplified function declaration using generic parameter defaults feature\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function create<T extends HTMLElement = HTMLDivElement, U = T[]>(\n  element?: T,\n  children?: U\n): Container<T, U>;\n```\n\n----------------------------------------\n\nTITLE: Base Configuration Example in TypeScript\nDESCRIPTION: Example of a base TypeScript configuration file that sets compiler options for strict type checking. This file establishes common settings that can be extended by other configuration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/extends.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Types in TypeScript\nDESCRIPTION: Examples of string declarations using single quotes, double quotes, and template literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet color: string = \"blue\";\ncolor = 'red';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet fullName: string = `Bob Bobbington`;\nlet age: number = 37;\nlet sentence: string = `Hello, my name is ${fullName}.\n\nI'll be ${age + 1} years old next month.`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet sentence: string =\n  \"Hello, my name is \" +\n  fullName +\n  \".\\n\\n\" +\n  \"I'll be \" +\n  (age + 1) +\n  \" years old next month.\";\n```\n\n----------------------------------------\n\nTITLE: Using @satisfies Inline in JavaScript\nDESCRIPTION: Demonstrates how to use the @satisfies JSDoc tag inline on a parenthesized expression, useful for validating object literals in function calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nlet myConfigSettings = /** @satisfies {ConfigSettings} */ ({\n    compilerOptions: {\n        strict: true,\n        outDir: \"../lib\",\n    },\n    extends: [\n        \"@tsconfig/strictest/tsconfig.json\",\n        \"../../../tsconfig.base.json\"\n    ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncompileCode(/** @satisfies {CompilerOptions} */ ({\n    // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Enum Out-of-Domain Assignment Error in TypeScript 5.0\nDESCRIPTION: This snippet illustrates how TypeScript 5.0 now correctly raises an error when assigning an out-of-domain literal to an enum type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nenum SomeEvenDigit {\n    Zero = 0,\n    Two = 2,\n    Four = 4\n}\n\n// Now correctly an error\nlet m: SomeEvenDigit = 1;\n```\n\n----------------------------------------\n\nTITLE: Abstract Constructor Signatures in TypeScript\nDESCRIPTION: Demonstrates the abstract constructor signature syntax in TypeScript 4.2, which enables features like ConstructorParameters working on abstract classes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyConstructorOf<T> = {\n    abstract new(...args: any[]): T;\n}\n\n// or using the shorthand syntax:\n\ntype MyConstructorOf<T> = abstract new (...args: any[]) => T;\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig with Exclude Property\nDESCRIPTION: Example of using the exclude property in tsconfig.json to specify files and directories to exclude from compilation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"out\": \"test.js\"\n  },\n  \"exclude\": [\"node_modules\", \"test.ts\", \"utils/t2.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating var Scoping Issues in Nested Loops\nDESCRIPTION: This snippet shows a common issue with var declarations in nested loops, where the inner loop accidentally overwrites the outer loop's counter variable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sumMatrix(matrix: number[][]) {\n  var sum = 0;\n  for (var i = 0; i < matrix.length; i++) {\n    var currentRow = matrix[i];\n    for (var i = 0; i < currentRow.length; i++) {\n      sum += currentRow[i];\n    }\n  }\n\n  return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Label Detection in TypeScript\nDESCRIPTION: This snippet shows how TypeScript 1.8 detects and reports unused labels in code. It demonstrates a simple while loop with an unused label.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nloop: while (x > 0) {\n  // Error: Unused label.\n  x++;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface with Optional Property in TypeScript\nDESCRIPTION: This snippet defines an interface 'UserDefaults' with an optional property 'colorThemeOverride' that can be either 'dark' or 'light'. Without exactOptionalPropertyTypes, this property could also be undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/exactOptionalPropertyTypes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserDefaults {\n  // The absence of a value represents 'system'\n  colorThemeOverride?: \"dark\" | \"light\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Display Title for Module Resolution in Markdown\nDESCRIPTION: This snippet sets the display title for the 'Module Resolution' configuration option in TypeScript. It uses YAML front matter in a Markdown file to define metadata.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Module_Resolution_Options_6174.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Module Resolution\"\n---\n```\n\n----------------------------------------\n\nTITLE: NonNullable Type Assignment Demonstration\nDESCRIPTION: Demonstrates improved type assignment compatibility with NonNullable types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo<T>(x: NonNullable<T>, y: NonNullable<NonNullable<T>>) {\n    x = y; // always worked\n    y = x; // used to error, now works\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Primitive Type Alias in TypeScript\nDESCRIPTION: Demonstrates how to create a type alias for common primitive types in TypeScript. This alias can be used to simplify type annotations for functions and variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BasicPrimitive = number | string | boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Declaration Files with Global Variables in TypeScript\nDESCRIPTION: Demonstrates using lodash as a global variable in TypeScript when not using modules. After installing the declaration files, TypeScript recognizes the global _ variable and provides type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Consumption.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n_.padStart(\"Hello TypeScript!\", 20, \" \");\n```\n\n----------------------------------------\n\nTITLE: Preserve Module Format Example in TypeScript\nDESCRIPTION: Demonstrates TypeScript's 'preserve' module option which maintains the original import/export syntax in the output while transforming CommonJS-style imports to require calls.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: preserve\n// @noErrors\nimport { valueOfPi } from \"./constants\";\nimport constants = require(\"./constants\");\n\nexport const piSquared = valueOfPi * constants.valueOfPi;\n```\n\n----------------------------------------\n\nTITLE: Conditional Spreading with Logical AND\nDESCRIPTION: Shows how conditional object spreading works using the logical AND operator, which is affected by TypeScript 4.1's changes to how optional properties are created.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  name: string;\n  age: number;\n  location: string;\n}\n\ninterface Animal {\n  name: string;\n  owner: Person;\n}\n\nfunction copyOwner(pet?: Animal) {\n  return {\n    ...(pet && pet.owner),\n    otherStuff: 123,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: noImplicitAny Errors with Loose yield Expressions\nDESCRIPTION: Demonstrates how TypeScript 4.2 will now issue an implicit 'any' error when the value of a 'yield' expression is captured but not contextually typed. This example shows various cases where errors may or may not occur.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.2.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7057\nfunction* g1() {\n  const value = yield 1;\n}\n\nfunction* g2() {\n  // No error.\n  // The result of `yield 1` is unused.\n  yield 1;\n}\n\nfunction* g3() {\n  // No error.\n  // `yield 1` is contextually typed by 'string'.\n  const value: string = yield 1;\n}\n\nfunction* g4(): Generator<number, void, string> {\n  // No error.\n  // TypeScript can figure out the type of `yield 1`\n  // from the explicit return type of `g4`.\n  const value = yield 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenation Alternative to Array Spread\nDESCRIPTION: Shows the seemingly equivalent but subtly different concat method as an alternative to array spread.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// The same, right?\nconst arr = [1].concat(arr2);\n```\n\n----------------------------------------\n\nTITLE: Referencing Composite Option in TypeScript Configuration\nDESCRIPTION: Demonstrates the usage of 'composite' option in tsconfig.json. When enabled, it enforces constraints for project references and build tools, setting rootDir to tsconfig location by default, requiring explicit file inclusion, and defaulting declaration to true.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/composite.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"composite\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from Module in TypeScript\nDESCRIPTION: Demonstrates the standard import syntax in TypeScript, where the module path is specified at the end of the statement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { func } from \"./module.js\";\n```\n\n----------------------------------------\n\nTITLE: Attribute Type Checking for Value-Based Elements in TypeScript\nDESCRIPTION: This snippet shows how to perform attribute type checking for value-based elements in TypeScript using the JSX.ElementAttributesProperty interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare namespace JSX {\n  interface ElementAttributesProperty {\n    props; // specify the property name to use\n  }\n}\n\nclass MyComponent {\n  // specify the property on the element instance type\n  props: {\n    foo?: string;\n  };\n}\n\n// element attributes type for 'MyComponent' is '{foo?: string}'\n<MyComponent foo=\"bar\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options\nDESCRIPTION: This snippet showcases various TypeScript compiler options that can be set in a tsconfig.json file. It includes options for controlling module resolution, type checking, code generation, and more.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"removeComments\": false,\n    \"resolveJsonModule\": false,\n    \"resolvePackageJsonExports\": true,\n    \"resolvePackageJsonImports\": true,\n    \"rewriteRelativeImportExtensions\": false,\n    \"rootDir\": \"string\",\n    \"rootDirs\": [],\n    \"skipDefaultLibCheck\": false,\n    \"skipLibCheck\": false,\n    \"sourceMap\": false,\n    \"sourceRoot\": \"string\",\n    \"stopBuildOnErrors\": false,\n    \"strict\": false,\n    \"strictBindCallApply\": true,\n    \"strictBuiltinIteratorReturn\": true,\n    \"strictFunctionTypes\": true,\n    \"strictNullChecks\": true,\n    \"strictPropertyInitialization\": true,\n    \"stripInternal\": false,\n    \"suppressExcessPropertyErrors\": false,\n    \"suppressImplicitAnyIndexErrors\": false,\n    \"target\": \"es5\",\n    \"traceResolution\": false,\n    \"tsBuildInfoFile\": \".tsbuildinfo\",\n    \"typeRoots\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Import Exclusion for Package Entry Points\nDESCRIPTION: JSON configuration for Visual Studio Code that prevents auto-imports from the main entry point of the lodash package, while still allowing deep imports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\n        \"^lodash$\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Assertion in TypeScript\nDESCRIPTION: This snippet demonstrates how to use import assertions with dynamic imports using the new ImportCallOptions type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = await import(\"./something.json\", {\n  assert: { type: \"json\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports Resolution in TypeScript\nDESCRIPTION: The resolvePackageJsonExports compiler option enables TypeScript to use the exports field in package.json files when resolving imports from node_modules. This option is enabled by default when using node16, nodenext, or bundler module resolution strategies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/resolvePackageJsonExports.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n--resolvePackageJsonExports\n```\n\n----------------------------------------\n\nTITLE: Importing React with Type Acquisition in TypeScript Playground\nDESCRIPTION: A simple example demonstrating how to import React in the TypeScript Playground, which triggers Automatic Type Acquisition to download type definitions for React and its dependencies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Type Acquisition.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\n\nconst myComponent = () => <h1>Hello, world</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Incremental Program in TypeScript\nDESCRIPTION: This snippet demonstrates the new APIs introduced in TypeScript 3.6 for creating incremental builds. It mentions the functions createIncrementalProgram, createIncrementalCompilerHost, and readBuilderProgram for handling incremental compilation and project references.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateIncrementalProgram\ncreateIncrementalCompilerHost\nreadBuilderProgram\n```\n\n----------------------------------------\n\nTITLE: JavaScript Import Elision Behavior Change\nDESCRIPTION: Demonstrates the change in TypeScript's JavaScript emit behavior where imports are no longer elided, even when types are not used as values. Shows both previous and current output behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Input:\nimport { someValue, SomeClass } from \"some-module\";\n\n/** @type {SomeClass} */\nlet val = someValue;\n\n// Previous Output:\nimport { someValue } from \"some-module\";\n\n/** @type {SomeClass} */\nlet val = someValue;\n\n// Current Output:\nimport { someValue, SomeClass } from \"some-module\";\n\n/** @type {SomeClass} */\nlet val = someValue;\n```\n\n----------------------------------------\n\nTITLE: ModifierLike Type for Decorator Handling in AST\nDESCRIPTION: This type definition shows how TypeScript now handles decorators in the syntax tree by introducing a ModifierLike type that can represent either a Modifier or a Decorator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ModifierLike = Modifier | Decorator;\n```\n\n----------------------------------------\n\nTITLE: Detecting Invalid Backreferences in Regular Expressions\nDESCRIPTION: TypeScript 5.5 detects backreferences that refer to capturing groups that don't exist, showing an error when a backreference refers to a non-existent group.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet myRegex = /@typedef \\{import\\((.+)\\)\\.([a-zA-Z_]+)\\} \\3/u;\n//                                                        ~\n// error!\n// This backreference refers to a group that does not exist.\n// There are only 2 capturing groups in this regular expression.\n```\n\n----------------------------------------\n\nTITLE: Configuring fallback paths in TypeScript\nDESCRIPTION: Example of configuring multiple file paths for a module pattern, allowing TypeScript to try alternative locations if resolution fails for the first path.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"*\": [\"./vendor/*\", \"./types/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Type Parameters with @template in JavaScript\nDESCRIPTION: This snippet demonstrates how to specify a default type for a generic type parameter using the @template tag in JavaScript. It shows a generic class with a default type parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @template [T=object] */\nclass Cache {\n    /** @param {T} initial */\n    constructor(initial) {\n    }\n}\nlet c = new Cache()\n```\n\n----------------------------------------\n\nTITLE: Boolean Coercion Examples\nDESCRIPTION: Shows different ways to coerce values to booleans in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nBoolean(\"hello\"); // type: boolean, value: true\n!!\"world\"; // type: true,    value: true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Truncation - Full Error Display\nDESCRIPTION: Shows how error messages appear when noErrorTruncation is set to true. The complete type information is displayed in the error message without truncation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noErrorTruncation.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322 2454\n// @noErrorTruncation: true\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Optional Property Behavior in TypeScript\nDESCRIPTION: This example shows how exactOptionalPropertyTypes enforces the exact types for optional properties. It allows 'dark' and 'light' as valid values for colorThemeOverride, but throws an error when trying to assign undefined.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/exactOptionalPropertyTypes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @exactOptionalPropertyTypes\n// @errors: 2322 2412\ninterface UserDefaults {\n  colorThemeOverride?: \"dark\" | \"light\";\n}\ndeclare function getUserSettings(): UserDefaults;\n// ---cut---\nconst settings = getUserSettings();\nsettings.colorThemeOverride = \"dark\";\nsettings.colorThemeOverride = \"light\";\n\n// But not:\nsettings.colorThemeOverride = undefined;\n```\n\n----------------------------------------\n\nTITLE: Fixing Template String Issues with String() in TypeScript\nDESCRIPTION: Example showing how to fix the template string error with symbol values by explicitly converting to string using String() as suggested by the error message.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nfunction logKey<S extends string | symbol>(key: S): S {\n    // No longer an error.\n    console.log(`${String(key)} is the key`);\n    return key;\n}\n```\n\n----------------------------------------\n\nTITLE: String Implementation of Generic Number Class\nDESCRIPTION: Shows how the GenericNumber class can be used with strings instead of numbers, demonstrating the flexibility of generic types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet stringNumeric = new GenericNumber<string>();\nstringNumeric.zeroValue = \"\";\nstringNumeric.add = function (x, y) {\n  return x + y;\n};\n\nconsole.log(stringNumeric.add(stringNumeric.zeroValue, \"test\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Dog Interface in TypeScript\nDESCRIPTION: Demonstrates how to create a TypeScript interface that defines the shape of a Dog object with required properties for name, date of birth, and markings. The interface ensures type safety by requiring specific property types including string, Date, and string array.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/interface.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Dog {\n  name: string;\n  dateOfBirth: Date;\n  markings: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating strictNullChecks: true behavior in TypeScript\nDESCRIPTION: This snippet illustrates how TypeScript behaves when strictNullChecks is set to true. It raises an error when attempting to access a property on a potentially null or undefined value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictNullChecks.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339 2532 18048\n// @target: ES2020\n// @strictNullChecks\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n```\n\n----------------------------------------\n\nTITLE: Emitted JavaScript from TypeScript with Preact JSX Transform\nDESCRIPTION: The JavaScript code generated by TypeScript when compiling a component using Preact's JSX runtime. It demonstrates how the 'jsxImportSource' setting affects the import statement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxImportSource.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { jsx as _jsx } from \"preact/jsx-runtime\";\nexport function App() {\n    return _jsx(\"h1\", { children: \"Hello World\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Conditions for Package Resolution\nDESCRIPTION: JSON configuration example showing how to set up custom conditions for package resolution in TypeScript, allowing specific package exports to be selected.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"es2022\",\n        \"moduleResolution\": \"bundler\",\n        \"customConditions\": [\"my-condition\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom lib Package in package.json\nDESCRIPTION: Demonstrates how to override a built-in lib by specifying a custom package in the dependencies section of package.json. This example shows using @types/web for DOM types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@typescript/lib-dom\": \"npm:@types/web\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative to Tuple Rest Parameters Using Regular Parameters\nDESCRIPTION: Shows an equivalent function definition without using tuple rest parameters. This demonstrates that tuple rest parameters are a more concise way to express the same function signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readButtonInput(name: string, version: number, ...input: boolean[]) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example in Shell\nDESCRIPTION: Shows the basic structure of a TypeScript project with a single index.ts file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/explainFiles.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexample\n├── index.ts\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Recursive Conditional Types Error in TypeScript\nDESCRIPTION: Demonstrates that conditional types cannot reference themselves recursively, resulting in a compilation error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2456 2315\ntype ElementType<T> = T extends any[] ? ElementType<T[number]> : T; // Error\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Module Members in TypeScript\nDESCRIPTION: Shows how to re-export members from another module with optional renaming.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport { read, write, standardOutput as stdout } from \"./inout\";\n```\n\n----------------------------------------\n\nTITLE: Configuring listEmittedFiles in tsconfig.json\nDESCRIPTION: Example tsconfig.json configuration that enables the listEmittedFiles option along with declaration file generation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/listEmittedFiles.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"listEmittedFiles\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @see in TypeScript\nDESCRIPTION: This example shows how to use the @see tag to link to other names in your TypeScript program. It can be used to provide references to related types or functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Box<T> = { t: T }\n/** @see Box for implementation details */\ntype Boxify<T> = { [K in keyof T]: Box<T> };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating suppressImplicitAnyIndexErrors in TypeScript\nDESCRIPTION: This snippet shows how the suppressImplicitAnyIndexErrors option affects TypeScript's behavior when indexing objects without index signatures. With the option set to false, an error is raised when accessing a non-existent property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/suppressImplicitAnyIndexErrors.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noImplicitAny: true\n// @suppressImplicitAnyIndexErrors: false\n// @strict: true\n// @errors: 7053\nconst obj = { x: 10 };\nconsole.log(obj[\"foo\"]);\n```\n\n----------------------------------------\n\nTITLE: Using inlineSourceMap in TypeScript Playground\nDESCRIPTION: An example demonstrating how to enable inlineSourceMap compiler option in the TypeScript Playground by adding the parameter to the URL. This allows the source map to be included directly in the JavaScript emit rather than as a separate file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/JS + DTS sidebars.md#2025-04-20_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://www.typescriptlang.org/play?inlineSourceMap=true#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUFitAM4Auo+oAvKAEQDyA0k0A\n```\n\n----------------------------------------\n\nTITLE: Configuring outDir in TypeScript's tsconfig.json\nDESCRIPTION: A TypeScript configuration example showing how to specify the 'outDir' option to direct compiled output to a separate directory.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/outDir.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration File Template for Class Modules\nDESCRIPTION: Comprehensive template for creating TypeScript declaration files (.d.ts) for class-based modules, supporting both UMD and module environments. Includes class definition, method signatures, and associated types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file for class modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n// Note that ES6 modules cannot directly export class objects.\n// This file should be imported using the CommonJS-style:\n//   import x = require('[~THE MODULE~]');\n//\n// Alternatively, if --allowSyntheticDefaultImports or\n// --esModuleInterop is turned on, this file can also be\n// imported as a default import:\n//   import x from '[~THE MODULE~]';\n//\n// Refer to the TypeScript documentation at\n// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require\n// to understand common workarounds for this limitation of ES6 modules.\n\n/*~ If this module is a UMD module that exposes a global variable 'myClassLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myClassLib;\n\n/*~ This declaration specifies that the class constructor function\n *~ is the exported object from the file\n */\nexport = Greeter;\n\n/*~ Write your module's methods and properties in this class */\ndeclare class Greeter {\n  constructor(customGreeting?: string);\n\n  greet: void;\n\n  myMethod(opts: MyClass.MyClassMethodOptions): number;\n}\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block.\n *~\n *~ Note that if you decide to include this namespace, the module can be\n *~ incorrectly imported as a namespace object, unless\n *~ --esModuleInterop is turned on:\n *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!\n */\ndeclare namespace MyClass {\n  export interface MyClassMethodOptions {\n    width?: number;\n    height?: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with react-native Option\nDESCRIPTION: Demonstrates the react-native option which keeps JSX syntax unchanged in the output but produces .js files, suitable for React Native projects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-native\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect and Correct Optional Property Syntax in TypeScript JSDoc\nDESCRIPTION: This snippet shows the incorrect use of postfix equals for optional properties in JSDoc object literal types, and demonstrates the correct syntax using a postfix question mark on the property name.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {{ a: string, b: number= }}\n */\nvar wrong;\n/**\n * Use postfix question on the property name instead:\n * @type {{ a: string, b?: number }}\n */\nvar right;\n```\n\n----------------------------------------\n\nTITLE: Modified Module Import Call Emission\nDESCRIPTION: Shows how TypeScript 4.4 modifies the emission of imported function calls to discard the this value using the (0, func) pattern.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet fooModule = {\n  foo() {\n    console.log(this);\n  },\n};\n\n(0, fooModule.foo)();\n```\n\n----------------------------------------\n\nTITLE: Promise resolve Parameter No Longer Optional - Problematic Code\nDESCRIPTION: Shows code that will now produce an error in TypeScript 4.1 because the resolve parameter in Promise constructors is no longer optional and must be passed a value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nnew Promise((resolve) => {\n  doSomethingAsync(() => {\n    doSomething();\n    resolve();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json to Include Multiple Files\nDESCRIPTION: Updated TypeScript configuration that includes both main.ts and greet.ts files for compilation, maintaining the same compiler options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"src/main.ts\", \"src/greet.ts\"],\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"target\": \"es5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclude Files in TypeScript Watch Mode\nDESCRIPTION: This code snippet demonstrates how to use the 'excludeFiles' option within the 'watchOptions' section of a tsconfig.json file. It shows how to specify files that should be excluded from TypeScript's watch mode processing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/excludeFiles.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"watchOptions\": {\n    \"excludeFiles\": [\"temp/file.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React JSX Component in TypeScript\nDESCRIPTION: Example of JSX syntax in TypeScript that will be optimized by the react-jsx compiler mode. This demonstrates the starting point before TypeScript 4.6's optimization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const el = <div>foo</div>;\n```\n\n----------------------------------------\n\nTITLE: Exporting Functions and Constants in CommonJS\nDESCRIPTION: A JavaScript module using CommonJS patterns that exports a function and a numerical constant, showing the basic pattern of using module.exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxInterval = 12;\n\nfunction getArrayLength(arr) {\n  return arr.length;\n}\n\nmodule.exports = {\n  getArrayLength,\n  maxInterval,\n};\n```\n\n----------------------------------------\n\nTITLE: Unsafe Iterator Usage Example\nDESCRIPTION: Shows a buggy implementation of an uppercase generator function that doesn't check if the iterator is done before accessing the value property, which can lead to runtime errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* uppercase(iter: Iterator<string, any>) {\n    while (true) {\n        const { value, done } = iter.next();\n        yield value.toUppercase(); // oops! forgot to check for `done` first and misspelled `toUpperCase`\n\n        if (done) {\n            return;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining and Non-Null Assertion Examples\nDESCRIPTION: Illustrates the behavior change in TypeScript 3.9 regarding optional chaining with non-null assertions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfoo?.bar!.baz;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(foo?.bar).baz;\n```\n\n----------------------------------------\n\nTITLE: For-Await-Of Loop Example\nDESCRIPTION: Example of using for-await-of loop to iterate over async generator results\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function f() {\n  for await (const x of g()) {\n    console.log(x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript output with emitDecoratorMetadata enabled\nDESCRIPTION: The emitted JavaScript code when the emitDecoratorMetadata option is enabled. This version includes additional metadata for the decorator, allowing runtime type information to be available through the reflect-metadata module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/emitDecoratorMetadata.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @experimentalDecorators\n// @showEmit\n// @emitDecoratorMetadata\nfunction LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n```\n\n----------------------------------------\n\nTITLE: Basic Import/Export Example in TypeScript\nDESCRIPTION: Demonstrates the difference between spec-invalid namespace imports and their CommonJS transpilation result.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Invalid according to the spec:\nimport * as hello from \"./exports-function\";\nhello();\n\n// but the transpilation works:\nconst hello = require(\"./exports-function\");\nhello();\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertion to Bypass Excess Property Checks\nDESCRIPTION: Shows how to use type assertion to bypass TypeScript's excess property checking when passing object literals with additional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig);\n```\n\n----------------------------------------\n\nTITLE: Example Input Code for Type Acquisition\nDESCRIPTION: Simple import statement that demonstrates what the ATA module processes to find and download type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ata/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport danger from \"danger\"\n```\n\n----------------------------------------\n\nTITLE: Importing a Default Export in TypeScript\nDESCRIPTION: This snippet shows how to import a default export from another module in TypeScript. It imports the 'helloWorld' function from the 'hello.js' file and calls it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport helloWorld from \"./hello.js\";\nhelloWorld();\n```\n\n----------------------------------------\n\nTITLE: Referencing and Importing Ambient Modules in TypeScript\nDESCRIPTION: Demonstrates how to reference a declaration file containing ambient module declarations, then import from that module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces and Modules.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"myModules.d.ts\" />\nimport * as m from \"SomeModule\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import With checkJS Enabled\nDESCRIPTION: Demonstrates how enabling checkJS causes TypeScript to report type errors in imported JavaScript files. Shows the same code but with stricter type checking enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/checkJs.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\n// @allowjs: true\n// @checkjs: true\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.142);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n```\n\n----------------------------------------\n\nTITLE: TSConfig Base with Relative Paths\nDESCRIPTION: This JSON5 snippet shows a base tsconfig file with relative paths that may not work correctly when extended by other configuration files in different directories.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_16\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"typeRoots\": [\n            \"./node_modules/@types\"\n            \"./custom-types\"\n        ],\n        \"outDir\": \"dist\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Conditions in tsconfig.json\nDESCRIPTION: Example of setting up custom conditions in TypeScript configuration file to specify additional conditions for package resolution. Shows how to configure target, moduleResolution, and customConditions options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/customConditions.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"es2022\",\n        \"moduleResolution\": \"bundler\",\n        \"customConditions\": [\"my-condition\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Functions with Variable Arguments in JavaScript\nDESCRIPTION: A JavaScript function that uses the arguments object instead of explicit parameters, allowing it to handle different calling patterns. This approach is common in JavaScript but problematic in TypeScript without proper type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfunction myCoolFunction() {\n  if (arguments.length == 2 && !Array.isArray(arguments[1])) {\n    var f = arguments[0];\n    var arr = arguments[1];\n    // ...\n  }\n  // ...\n}\n\nmyCoolFunction(\n  function (x) {\n    console.log(x);\n  },\n  [1, 2, 3, 4]\n);\nmyCoolFunction(\n  function (x) {\n    console.log(x);\n  },\n  1,\n  2,\n  3,\n  4\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Import Contents in TypeScript\nDESCRIPTION: Shows correct and incorrect ways to access contents of imported JSON files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ This is okay:\nimport myConfigA from \"./myConfig.json\" with { type: \"json\" };\nlet version = myConfigA.version;\n\n///////////\n\nimport * as myConfigB from \"./myConfig.json\" with { type: \"json\" };\n\n// ❌ This is not:\nlet version = myConfig.version;\n\n// ✅ This is okay:\nlet version = myConfig.default.version;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Let/Const Capture in Loops - TypeScript\nDESCRIPTION: Shows how let/const declarations within loops are captured in functions to maintain proper scoping semantics.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet list = [];\nfor (let i = 0; i < 5; i++) {\n  list.push(() => i);\n}\n\nlist.forEach((f) => console.log(f()));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = [];\nvar _loop_1 = function (i) {\n  list.push(function () {\n    return i;\n  });\n};\nfor (var i = 0; i < 5; i++) {\n  _loop_1(i);\n}\nlist.forEach(function (f) {\n  return console.log(f());\n});\n```\n\n----------------------------------------\n\nTITLE: Truthiness Check Example\nDESCRIPTION: Demonstrates using truthiness checking in conditional statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getUsersOnlineMessage(numUsersOnline: number) {\n  if (numUsersOnline) {\n    return `There are ${numUsersOnline} online now!`;\n  }\n  return \"Nobody's here. :(\"; \n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Import in TypeScript\nDESCRIPTION: Demonstrates how to import an entire module as a namespace using the import * as syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as io from \"./inout\";\nvar s = io.read(io.standardOutput);\nio.write(io.standardOutput, s);\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Watch Command\nDESCRIPTION: Shows the basic TypeScript watch command syntax. The --watch flag enables continuous compilation mode where TypeScript watches for file changes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/sections/watchOptions.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n--watch\n```\n\n----------------------------------------\n\nTITLE: Default Type Arguments in JSDoc\nDESCRIPTION: These examples demonstrate how to use default type arguments in JSDoc typedef declarations, equivalent to TypeScript's type declarations with default type parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @template {string | number} [T=number]\n * @typedef Foo\n * @property prop {T}\n */\n\n// or\n\n/**\n * @template {string | number} [T=number]\n * @typedef {{ prop: T }} Foo\n */\n```\n\n----------------------------------------\n\nTITLE: Missing Parenthesis in Complex Condition\nDESCRIPTION: Example showing a complex conditional expression with a missing closing parenthesis that leads to incorrect evaluation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (\n    isValid(primaryValue, \"strict\") || isValid(secondaryValue, \"strict\") ||\n    isValid(primaryValue, \"loose\" || isValid(secondaryValue, \"loose\"))\n) {\n    //                           ^^^^ 👀 Did we forget a closing ')'?\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Object Property Inspection Example\nDESCRIPTION: Demonstrates TypeScript's static type checking capabilities when accessing object properties, showing IDE tooling support through property suggestions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/type-system.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shop = {\n  name: \"Table Store\",\n  address: \"Maplewood\",\n};\n\nshop.a;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Module Import in ECMAScript without Extension\nDESCRIPTION: Demonstrates the incorrect way to import modules in Node.js ECMAScript modules without file extensions, which is not allowed in Node.js ESM.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// entry.mjs\nimport * as utils from \"./utils\";     // ❌ wrong - we need to include the file extension.\n\nimport * as utils from \"./utils.mjs\"; // ✅ works\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with react-jsxdev Option\nDESCRIPTION: Shows how JSX is transformed using the react-jsxdev option, which converts JSX to _jsx calls optimized for development builds with additional debugging information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-jsxdev\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: Setting up Grunt with TypeScript\nDESCRIPTION: Configuration examples for using TypeScript with Grunt using both grunt-ts and grunt-browserify with tsify.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install grunt-ts --save-dev\n```\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (grunt) {\n  grunt.initConfig({\n    ts: {\n      default: {\n        src: [\"**/*.ts\", \"!node_modules/**/*.ts\"],\n      },\n    },\n  });\n  grunt.loadNpmTasks(\"grunt-ts\");\n  grunt.registerTask(\"default\", [\"ts\"]);\n};\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install grunt-browserify tsify --save-dev\n```\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (grunt) {\n  grunt.initConfig({\n    browserify: {\n      all: {\n        src: \"src/main.ts\",\n        dest: \"dist/main.js\",\n        options: {\n          plugin: [\"tsify\"],\n        },\n      },\n    },\n  });\n  grunt.loadNpmTasks(\"grunt-browserify\");\n  grunt.registerTask(\"default\", [\"browserify\"]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with --module preserve\nDESCRIPTION: Shows the compiler options for using --module preserve, which implicitly sets moduleResolution to bundler and enables other related options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_7\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"preserve\",\n        // ^ also implies:\n        // \"moduleResolution\": \"bundler\",\n        // \"esModuleInterop\": true,\n        // \"resolveJsonModule\": true,\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Type Error Example - parseFloat Usage\nDESCRIPTION: Demonstrates incorrect usage of parseFloat that TypeScript can catch when checkJS is enabled. Shows how parseFloat expects a string parameter but receives a number.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/checkJs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// parseFloat only takes a string\nmodule.exports.pi = parseFloat(3.142);\n```\n\n----------------------------------------\n\nTITLE: Destructured Import Usage\nDESCRIPTION: Demonstrates importing and using a combined type/value export.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bar } from \"./foo\";\nlet x: Bar = Bar.a;\nconsole.log(x.count);\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Babel with TypeScript\nDESCRIPTION: Setup instructions for using Babel with TypeScript, including installation of required dependencies and basic configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @babel/cli @babel/core @babel/preset-typescript --save-dev\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-typescript\"]\n}\n```\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/babel --out-file bundle.js src/index.ts\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"babel --out-file bundle.js main.ts\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fix for Unconstrained Generics Error by Adding Constraints\nDESCRIPTION: This diff demonstrates how to fix the unconstrained generics error by adding an extends clause to the generic parameter, ensuring it can only accept non-null values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n- function foo<T>(x: T) {\n+ function foo<T extends {}>(x: T) {\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Code with JSDoc Comment\nDESCRIPTION: This snippet shows a TypeScript file with a JSDoc comment for a constant declaration. It serves as the base example for comparing the effects of the 'removeComments' option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/removeComments.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** The translation of 'Hello world' into Portuguese */\nexport const helloWorldPTBR = \"Olá Mundo\";\n```\n\n----------------------------------------\n\nTITLE: Using @deprecated in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @deprecated tag to mark functions, methods, or properties as deprecated in JavaScript. This information is surfaced in completion lists and as a suggestion diagnostic.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// @noErrors\n/** @deprecated */\nconst apiV1 = {};\nconst apiV2 = {};\n\napiV;\n// ^|\n\n```\n\n----------------------------------------\n\nTITLE: Declaring AMD define Function for TypeScript\nDESCRIPTION: Type declaration for RequireJS/AMD define function to make TypeScript recognize it when migrating from JavaScript modules that use AMD-style module definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// For RequireJS/AMD\ndeclare function define(...args: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Default JavaScript Output Without inlineSources\nDESCRIPTION: Shows the JavaScript output when compiling the example TypeScript code with default settings (no inlineSources).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/inlineSources.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: Module Function Usage Example\nDESCRIPTION: Shows how to use a module that can be called as a function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = require(\"foo\");\n// Note: calling 'x' as a function\nvar y = x(42);\n```\n\n----------------------------------------\n\nTITLE: Twoslash Example with Error Handling\nDESCRIPTION: Demonstrates proper error handling in Twoslash by explicitly declaring expected compiler error codes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Converting Twoslash Code Samples.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\n// Declare a tuple type\nlet x: [string, number];\n\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n```\n\n----------------------------------------\n\nTITLE: Using typesVersions with Folder Redirects in package.json\nDESCRIPTION: Configuration for package.json that uses typesVersions to redirect imports to different folders based on the TypeScript version, using wildcards for folder redirects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"package-name\",\n  \"version\": \"1.0.0\",\n  \"types\": \"./index.d.ts\",\n  \"typesVersions\": {\n    \">=3.1\": { \"*\": [\"ts3.1/*\"] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TSX with Custom JSX Factory in TypeScript\nDESCRIPTION: Illustrates how TypeScript compiles TSX code when the jsxFactory option is set to 'h'. This example shows the emitted JavaScript output for a Preact component.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxFactory.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => <div>Hello</div>;\n```\n\n----------------------------------------\n\nTITLE: Promise Check with Named Declaration\nDESCRIPTION: Demonstrates TypeScript's always-truthy Promise checks with a named declaration, which was already flagged as an error in previous versions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function foo(): Promise<boolean> {\n  return false;\n}\n\nasync function bar(): Promise<string> {\n  const fooResult = foo();\n  if (fooResult) {\n    return \"true\";\n  }\n  return \"false\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript's any Type for Flexible Arrays\nDESCRIPTION: Illustrates how the 'any' type in TypeScript turns off type checking, allowing arrays of mixed types. The example shows pushing values of different types into the same array without type errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// with \"noImplicitAny\": false in tsconfig.json, anys: any[]\nconst anys = [];\nanys.push(1);\nanys.push(\"oh no\");\nanys.push({ anything: \"goes\" });\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Function Call\nDESCRIPTION: This snippet shows the correct way to call the 'greet' function, using a string for the 'person' parameter and a new Date object for the 'date' parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n\ngreet(\"Maddison\", new Date());\n```\n\n----------------------------------------\n\nTITLE: Using Pre-ES2015 Module Syntax with Verbatim Module Syntax\nDESCRIPTION: Shows how to use TypeScript's legacy module syntax that predates ES2015 to generate CommonJS-style require and module.exports code when using the verbatimModuleSyntax flag.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/verbatimModuleSyntax.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport foo = require(\"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = require(\"foo\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {}\nfunction bar() {}\nfunction baz() {}\n\nexport = {\n    foo,\n    bar,\n    baz\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {}\nfunction bar() {}\nfunction baz() {}\n\nmodule.exports = {\n    foo,\n    bar,\n    baz\n};\n```\n\n----------------------------------------\n\nTITLE: Module Import with importHelpers\nDESCRIPTION: Shows how to combine esModuleInterop with importHelpers for more concise JavaScript output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/esModuleInterop.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\n// @showEmit\n// @esModuleInterop\n// @importHelpers\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n```\n\n----------------------------------------\n\nTITLE: System.register Module Format in JavaScript\nDESCRIPTION: Shows the System.register module format, which is used for SystemJS module loading. It includes dynamic imports and exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\nSystem.register([\"mod\"], function (exports_1, context_1) {\n    \"use strict\";\n    var mod_1, mod, dynamic, e1;\n    var __moduleName = context_1 && context_1.id;\n    return {\n        setters: [\n            function (mod_1_1) {\n                mod_1 = mod_1_1;\n                mod = mod_1_1;\n            }\n        ],\n        execute: function () {\n            dynamic = context_1.import(\"mod\");\n            console.log(mod_1.default, mod_1.y, mod_1.z, mod, dynamic);\n            exports_1(\"e1\", e1 = 0);\n            exports_1(\"default\", \"default export\");\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Importing a Module with Custom Suffixes in TypeScript\nDESCRIPTION: Demonstrates how TypeScript resolves imports based on the configured module suffixes. With the given configuration, TypeScript will search for files with '.ios.ts', '.native.ts', and '.ts' extensions when resolving the import.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/moduleSuffixes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as foo from \"./foo\";\n```\n\n----------------------------------------\n\nTITLE: Result of 'Organize Imports' Command in TypeScript\nDESCRIPTION: Shows how the 'Organize Imports' command transforms imports by both removing unused imports and sorting the remaining ones alphabetically.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { foo } from \"./helper\";\nimport { HoneyBadger, Moose } from \"./zoo\";\n\nlet x: Moose | HoneyBadger = foo();\n```\n\n----------------------------------------\n\nTITLE: Compiler Error for Unreachable Code in TypeScript\nDESCRIPTION: This example demonstrates how setting 'allowUnreachableCode' to false in TypeScript results in a compiler error for unreachable code. The error is raised on the last return statement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowUnreachableCode.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7027\n// @allowUnreachableCode: false\nfunction fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Module Export Structure in TypeScript\nDESCRIPTION: Demonstrates the recommended approach of exporting classes directly from a module without unnecessary namespace wrapping.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces and Modules.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Triangle {\n  /* ... */\n}\nexport class Square {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Preserved Const Enum Compilation Output\nDESCRIPTION: Demonstrates the output when preserveConstEnums is set to true, showing how the enum is preserved in the emitted JavaScript while still using literal values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/preserveConstEnums.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Component with Imported Function\nDESCRIPTION: This Vue.js component, using the <script setup> feature, shows another case where TypeScript might incorrectly remove an import used in the template.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- A .vue File -->\n<script setup>\n  import { someFunc } from \"./some-module.js\";\n</script>\n\n<button @click=\"someFunc\">Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Generator Interface Implementation\nDESCRIPTION: Shows the new Generator interface that extends Iterator with required methods and symbol iterator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Generator<T = unknown, TReturn = any, TNext = unknown>\n  extends Iterator<T, TReturn, TNext> {\n  next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\n  return(value: TReturn): IteratorResult<T, TReturn>;\n  throw(e: any): IteratorResult<T, TReturn>;\n  [Symbol.iterator](): Generator<T, TReturn, TNext>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Excess Property Error in TypeScript\nDESCRIPTION: Example showing how TypeScript normally produces an error when an object literal contains properties not defined in the type it's being assigned to. The code attempts to assign an object with an extra property 'm' to a Point type that only defines 'x' and 'y'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/suppressExcessPropertyErrors.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Point = { x: number; y: number };\nconst p: Point = { x: 1, y: 3, m: 10 };\n```\n\n----------------------------------------\n\nTITLE: Creating Solution Builder in TypeScript\nDESCRIPTION: This code snippet introduces the new createSolutionBuilder function in TypeScript 3.6, which returns an instance of the SolutionBuilder type. This API is used for leveraging project references in TypeScript projects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSolutionBuilder\n```\n\n----------------------------------------\n\nTITLE: New Index Signature Generation for Non-Literal Method Names in TypeScript 5.7\nDESCRIPTION: Illustrates how TypeScript 5.7 now interprets symbol-based methods by generating an appropriate index signature, providing more consistent behavior with object literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class A {\n    [x: symbol]: () => number;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Declaration File - Basic Example\nDESCRIPTION: Demonstrates how a simple TypeScript export gets converted into corresponding .d.ts and .js files when the declaration flag is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/declaration.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport let helloWorld = \"hi\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport let helloWorld = \"hi\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare let helloWorld: string;\n```\n\n----------------------------------------\n\nTITLE: Global Library Function Assignment\nDESCRIPTION: Shows how to assign a global function to different environments (Web, Node, and any runtime).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Web\nwindow.createGreeting = function (s) {\n  return \"Hello, \" + s;\n};\n\n// Node\nglobal.createGreeting = function (s) {\n  return \"Hello, \" + s;\n};\n\n// Potentially any runtime\nglobalThis.createGreeting = function (s) {\n  return \"Hello, \" + s;\n};\n```\n\n----------------------------------------\n\nTITLE: Block-Scoped Variables in TypeScript\nDESCRIPTION: Demonstrates block-scoping behavior of let declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nif (true) {\n  let a = 4;\n  // use a\n} else {\n  let a = \"string\";\n  // use a\n}\n\nalert(a); // Error: a is not defined in this scope.\n```\n\n----------------------------------------\n\nTITLE: Illustrating Optimistic Variable Initialization Analysis in TypeScript\nDESCRIPTION: This code demonstrates a limitation in TypeScript's variable initialization analysis where it takes an optimistic view when the variable is accessed in a separate function, assuming it will be initialized.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n    let result: number\n    if (someCondition()) {\n        result = doSomeWork();\n    }\n    else {\n        let temporaryWork = doSomeWork();\n        temporaryWork *= 2;\n        // forgot to assign to 'result'\n    }\n\n    printResult();\n\n    function printResult() {\n        console.log(result); // no error here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Error with Optional Callback Parameters\nDESCRIPTION: Shows the type error that occurs when using an optional parameter in a callback, where TypeScript correctly warns about potential undefined values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nmyForEach([1, 2, 3], (a, i) => {\n  console.log(i.toFixed());\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the noImplicitThis Error in TypeScript Classes\nDESCRIPTION: This example shows how the 'noImplicitThis' compiler option catches potential runtime errors. The Rectangle class has a getAreaFunction method that returns a function trying to access width and height properties from 'this', but the function will have a different context when called.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitThis.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2683\nclass Rectangle {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  getAreaFunction() {\n    return function () {\n      return this.width * this.height;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Element Type Examples\nDESCRIPTION: Shows JSX element usage and type checking in React components.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nasync function Foo() {\n    return <div></div>;\n}\nlet element = <Foo />;\n//             ~~~\n// 'Foo' cannot be used as a JSX component.\n//   Its return type 'Promise<Element>' is not a valid JSX element.\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Export with verbatimModuleSyntax\nDESCRIPTION: Shows how to export multiple functions using TypeScript's export = syntax, which compiles to module.exports in CommonJS.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {}\nfunction bar() {}\nfunction baz() {}\n\nexport = {\n    foo,\n    bar,\n    baz\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {}\nfunction bar() {}\nfunction baz() {}\n\nmodule.exports = {\n    foo,\n    bar,\n    baz\n};\n```\n\n----------------------------------------\n\nTITLE: Minimizing Type Parameters in TypeScript Functions\nDESCRIPTION: Shows how adding unnecessary type parameters (like Func in filter2) can make functions harder to read and use without adding any value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction filter1<Type>(arr: Type[], func: (arg: Type) => boolean): Type[] {\n  return arr.filter(func);\n}\n\nfunction filter2<Type, Func extends (arg: Type) => boolean>(\n  arr: Type[],\n  func: Func\n): Type[] {\n  return arr.filter(func);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Version 3.3.3 in Markdown\nDESCRIPTION: Shows the specific version number for TypeScript 3.3.3, which was uniquely versioned as 3.3.3333.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/TypeScript Versions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`3.3.3` (which was versioned as [`3.3.3333`](https://github.com/Microsoft/TypeScript/issues/30032))\n```\n\n----------------------------------------\n\nTITLE: ESM to CommonJS Require Compatibility Example\nDESCRIPTION: Demonstrates compatibility issues when using require() with ES modules in Node.js versions before v22.12.0, showing various module import scenarios.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: node_modules/dependency/index.js\nexport function doSomething() { /* ... */ }\n\n// @Filename: dependent.js\nimport { doSomething } from \"dependency\";\n// ✅ Works if dependent and dependency are both transpiled\n// ✅ Works if dependent and dependency are both true ESM\n// ✅ Works if dependent is true ESM and dependency is transpiled\n// 💥 Crashes if dependent is transpiled and dependency is true ESM\n```\n\n----------------------------------------\n\nTITLE: TypeScript Twoslash Multi-file Query Example\nDESCRIPTION: Demonstrates how to use Twoslash queries across multiple files using @filename directives to separate file contexts while maintaining query functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: index.ts\nconst a = \"123\"\n//    ^?\n// @filename: main-file-queries.ts\nconst b = \"345\"\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Missing Return Expression Examples in TypeScript\nDESCRIPTION: Shows scenarios where return expressions might be missing in arrow functions and how TypeScript 3.9 provides quick fixes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nlet f1 = () => 42;\n\n// oops - not the same!\nlet f2 = () => {\n  42;\n};\n```\n\n----------------------------------------\n\nTITLE: Downleveled Array Spread Without importHelpers\nDESCRIPTION: The emitted ES5 JavaScript when downlevelIteration is enabled but importHelpers is false. Helper functions are included directly in the file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/importHelpers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @target: ES5\n// @downleveliteration\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structural Typing in TypeScript\nDESCRIPTION: This snippet shows how structural typing allows a Dog class instance to be assigned to a Pet interface variable, even though Dog doesn't explicitly implement Pet.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Type Compatibility.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Pet {\n  name: string;\n}\n\nclass Dog {\n  name: string;\n}\n\nlet pet: Pet;\n// OK, because of structural typing\npet = new Dog();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with include and exclude patterns in tsconfig.json\nDESCRIPTION: A tsconfig.json configuration using include and exclude properties to specify file patterns for compilation. This approach allows for more flexible file selection compared to listing individual files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/tsconfig.json.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"system\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outFile\": \"../../built/local/tsc.js\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"**/*.spec.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Import Example\nDESCRIPTION: Demonstrates how to import an exported value using CommonJS (CJS) syntax with the require function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// b.js\nconst a = require(\"./a\");\nconsole.log(a.message); // 'Hello from a.js'\n```\n\n----------------------------------------\n\nTITLE: Downleveled for/of Loop Without downlevelIteration\nDESCRIPTION: Shows how TypeScript transpiles a for/of loop to ES5 without the downlevelIteration flag enabled, using a traditional for loop.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @target: ES5\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example of Virtual TypeScript Environment Setup\nDESCRIPTION: This snippet provides a complete example of setting up a virtual TypeScript environment, including creating a file system map, setting up a compiler host, and creating a TypeScript program.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport ts from \"typescript\"\nimport tsvfs from \"@typescript/vfs\"\nimport lzstring from \"lz-string\"\n\nconst fsMap = await tsvfs.createDefaultMapFromCDN(compilerOptions, ts.version, true, ts, lzstring)\nfsMap.set(\"index.ts\", \"// main TypeScript file content\")\n\nconst system = tsvfs.createSystem(fsMap)\nconst host = tsvfs.createVirtualCompilerHost(system, compilerOptions, ts)\n\nconst program = ts.createProgram({\n  rootNames: [...fsMap.keys()],\n  options: compilerOptions,\n  host: host.compilerHost,\n})\n\n// This will update the fsMap with new files\n// for the .d.ts and .js files\nprogram.emit()\n\n// Now I can look at the AST for the .ts file too\nconst index = program.getSourceFile(\"index.ts\")\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Control Comments in JavaScript\nDESCRIPTION: Special TypeScript comment directives that can be used in JavaScript files to control type checking behavior. These comments allow for file-level and line-level control of TypeScript error checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-nocheck\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-ignore\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Declaration with Binding Pattern (TypeScript)\nDESCRIPTION: This snippet shows an incorrect way of declaring a function using binding patterns that could be misinterpreted as type annotations. In TypeScript 4.8, this will now result in an error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function makePerson({ name: string, age: number }): Person;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Assertions in TypeScript\nDESCRIPTION: This snippet shows the deprecated import assertion syntax and the new import attribute syntax for importing JSON files in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// An import assertion ❌ - not future-compatible with most runtimes.\nimport data from \"./data.json\" assert { type: \"json\" };\n\n// An import attribute ✅ - the preferred way to import a JSON file.\nimport data from \"./data.json\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Syntax with verbatimModuleSyntax\nDESCRIPTION: Demonstrates how to use TypeScript's pre-ES2015 module syntax to generate CommonJS output when using the verbatimModuleSyntax flag.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport foo = require(\"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = require(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structural Type Relationships in TypeScript\nDESCRIPTION: Shows how covariant relationships emerge naturally in TypeScript's structural type system using Animal and Cat producers\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AnimalProducer {\n  make(): Animal;\n}\n\n// A CatProducer can be used anywhere an\n// Animal producer is expected\ninterface CatProducer {\n  make(): Cat;\n}\n```\n\n----------------------------------------\n\nTITLE: Package JSON with ES Module Configuration\nDESCRIPTION: Example package.json file that sets type to 'module', indicating ES module format for .js files\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": \"module\" }\n```\n\n----------------------------------------\n\nTITLE: Setting JSX Runtime to Classic Mode Per-File\nDESCRIPTION: Demonstrates using a JSX pragma comment to force classic runtime (equivalent to the 'react' option) for a specific file regardless of project configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/* @jsxRuntime classic */\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: Listing required TypeScript primitives that need type definitions when using noLib\nDESCRIPTION: This snippet lists the key primitive interfaces that TypeScript requires for compilation. When using the 'noLib' option, developers must provide their own type definitions for these primitives.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noLib.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nArray, Boolean, Function, IArguments, Number, Object, RegExp, and String\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Import Case Sensitivity\nDESCRIPTION: Example showing potential case sensitivity issues when importing files in TypeScript. The example demonstrates how importing 'fileManager.ts' as './FileManager.ts' can cause cross-platform compatibility issues.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/forceConsistentCasingInFileNames.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileManager } from \"./FileManager.ts\"  // May fail on case-sensitive filesystems if actual file is fileManager.ts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Excess Property Checking in TypeScript\nDESCRIPTION: Shows how TypeScript handles excess properties in object literals when they're assigned to interfaces. The example demonstrates type checking with optional properties and an error case with misspelled property names.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  return {\n    color: config.color || \"red\",\n    area: config.width ? config.width * config.width : 20,\n  };\n}\n\nlet mySquare = createSquare({ colour: \"red\", width: 100 });\n```\n\n----------------------------------------\n\nTITLE: Per-file JSX Import Source Configuration\nDESCRIPTION: An example of using a per-file pragma to set the JSX import source to Preact, allowing for file-specific configuration of the JSX runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxImportSource.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource preact */\n\nexport function App() {\n  return <h1>Hello World</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Decorator Parsing in Classes (TypeScript)\nDESCRIPTION: Shows the stricter parsing rules for decorators in TypeScript 5.5, requiring parentheses in certain cases to avoid errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass DecoratorProvider {\n    decorate(...args: any[]) { }\n}\n\nclass D extends DecoratorProvider {\n    m() {\n        class C {\n            @super.decorate // ❌ error\n            method1() { }\n\n            @(super.decorate) // ✅ okay\n            method2() { }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Union Types for Nullable Values in TypeScript\nDESCRIPTION: This snippet shows the TypeScript-native syntax for nullable types using union types, which is more explicit and consistent regardless of the strictNullChecks setting.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {number | null}\n * With strictNullChecks: true  -- number | null\n * With strictNullChecks: false -- number\n */\nvar unionNullable;\n```\n\n----------------------------------------\n\nTITLE: Importing Typed Module in TypeScript\nDESCRIPTION: This TypeScript code demonstrates that the 'types' option does not affect how @types packages are included in application code. The 'moment' import is fully typed despite not being listed in the 'types' option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/types.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as moment from \"moment\";\n\nmoment().format(\"MMMM Do YYYY, h:mm:ss a\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Node.js 18 Module Support\nDESCRIPTION: This JSON snippet demonstrates how to configure the package.json file to use custom DOM library definitions, which is relevant to the discussion of the new --libReplacement flag in TypeScript 5.8.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"devDependencies\": {\n       \"@typescript/lib-dom\": \"npm:@types/web@0.0.199\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Use of 'infer' in Constraint Clauses\nDESCRIPTION: Demonstrates that 'infer' declarations cannot be used in constraint clauses for regular type parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 1338 2304\ntype ReturnedType<T extends (...args: any[]) => infer R> = R;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Strict Bind Call Apply Disabled Example\nDESCRIPTION: Shows behavior when strictBindCallApply is disabled. Demonstrates how function.call accepts any arguments and returns any type without type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictBindCallApply.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictBindCallApply: false\n\n// With strictBindCallApply off\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\n// Note: No error; return type is 'any'\nconst n = fn.call(undefined, false);\n```\n\n----------------------------------------\n\nTITLE: Compiled AMD Dependency in JavaScript\nDESCRIPTION: Shows the compiled JavaScript output for an AMD dependency declaration, including how the dependency is included in the define call.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefine([\"require\", \"exports\", \"legacy/moduleA\"], function (\n  require,\n  exports,\n  moduleA\n) {\n  moduleA.callStuff();\n});\n```\n\n----------------------------------------\n\nTITLE: UseUnknownInCatchVariables Compiler Option in TypeScript\nDESCRIPTION: The 'useUnknownInCatchVariables' option defaults catch clause variables to 'unknown' instead of 'any'. It's true when strict mode is enabled and false otherwise, providing better type safety in error handling.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<code><a href='/tsconfig/#useUnknownInCatchVariables'>--useUnknownInCatchVariables</a></code>\n```\n\n----------------------------------------\n\nTITLE: Union Array Methods Solution - TypeScript\nDESCRIPTION: Demonstrates the solution to the forEach type error by adding explicit type annotations for the callback parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.3.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Dog {\n  kind: \"dog\";\n  dogProp: any;\n}\ninterface Cat {\n  kind: \"cat\";\n  catProp: any;\n}\n\nconst catOrDogArray: Dog[] | Cat[] = [];\ncatOrDogArray.forEach((animal: Dog | Cat) => {\n  if (animal.kind === \"dog\") {\n    animal.dogProp;\n    // ...\n  } else if (animal.kind === \"cat\") {\n    animal.catProp;\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NaN Equality Behavior in JavaScript\nDESCRIPTION: Examples showing how equality operators (== and ===) behave with NaN values in JavaScript, illustrating that NaN is never equal to anything, including itself.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(NaN == 0)  // false\nconsole.log(NaN === 0) // false\n\nconsole.log(NaN == NaN)  // false\nconsole.log(NaN === NaN) // false\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp with Watchify for Continuous Compilation\nDESCRIPTION: Enhanced Gulpfile that uses Watchify to watch for file changes and automatically rebuild the bundle. It adds error handling and console logging for a better development experience.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar browserify = require(\"browserify\");\nvar source = require(\"vinyl-source-stream\");\nvar watchify = require(\"watchify\");\nvar tsify = require(\"tsify\");\nvar fancy_log = require(\"fancy-log\");\nvar paths = {\n  pages: [\"src/*.html\"],\n};\n\nvar watchedBrowserify = watchify(\n  browserify({\n    basedir: \".\",\n    debug: true,\n    entries: [\"src/main.ts\"],\n    cache: {},\n    packageCache: {},\n  }).plugin(tsify)\n);\n\ngulp.task(\"copy-html\", function () {\n  return gulp.src(paths.pages).pipe(gulp.dest(\"dist\"));\n});\n\nfunction bundle() {\n  return watchedBrowserify\n    .bundle()\n    .on(\"error\", fancy_log)\n    .pipe(source(\"bundle.js\"))\n    .pipe(gulp.dest(\"dist\"));\n}\n\ngulp.task(\"default\", gulp.series(gulp.parallel(\"copy-html\"), bundle));\nwatchedBrowserify.on(\"update\", bundle);\nwatchedBrowserify.on(\"log\", fancy_log);\n```\n\n----------------------------------------\n\nTITLE: Previous TypeScript Version's Emitted Declaration File\nDESCRIPTION: This snippet demonstrates how previous versions of TypeScript would emit a declaration file for a class with a computed property name, using an index signature.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare let propName: string;\nexport declare class MyClass {\n    [x: string]: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS with Type Support in TypeScript\nDESCRIPTION: TypeScript component (App.tsx) that imports a CSS module with type support. This demonstrates how the declaration file enables TypeScript to provide type checking for the imported styles.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowArbitraryExtensions.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// App.tsx\nimport styles from \"./app.css\";\n\nstyles.cookieBanner; // string\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Auto-Completion Scenario in TypeScript\nDESCRIPTION: Example TypeScript code that illustrates a scenario where granular commit characters would help with auto-completion. It shows a case where the cursor position could benefit from context-aware completion based on what character is typed next.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let food: {\n    eat(): any;\n}\n\nlet f = (foo/**/\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration in TypeScript\nDESCRIPTION: Demonstrates the new namespace keyword replacing the module keyword for internal modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace Math {\n    export function add(x, y) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Array Spread Example in TypeScript\nDESCRIPTION: A simple TypeScript function that uses array spread syntax, which will require helper functions when downleveled to ES5.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/importHelpers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Configuration\nDESCRIPTION: Shows how to configure package.json to handle different TypeScript version compatibility using exports and typesVersions fields. Demonstrates the new prioritization of exports over typesVersions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"module\",\n    \"main\": \"./dist/main.js\"\n    \"typesVersions\": {\n        \"<4.8\": { \".\": [\"4.8-types/main.d.ts\"] },\n        \"*\": { \".\": [\"modern-types/main.d.ts\"] }\n    },\n    \"exports\": {\n        \".\": {\n           \"types@<4.8\": \"./4.8-types/main.d.ts\",\n           \"types\": \"./modern-types/main.d.ts\",\n           \"import\": \"./dist/main.js\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Nightly Build via npm\nDESCRIPTION: This command installs the latest nightly build of TypeScript as a development dependency in your project.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/Nightly Builds.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D typescript@next\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Auto-Import Exclusions with Regex Flags\nDESCRIPTION: JSON configuration example showing how to use regular expression flags with auto-import exclusions, including proper escaping of slashes for patterns that need regex flags.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\n        \"^./lib/internal\",        // no escaping needed\n        \"/^.\\\\/lib\\\\/internal/\",  // escaping needed - note the leading and trailing slashes\n        \"/^.\\\\/lib\\\\/internal/i\"  // escaping needed - we needed slashes to provide the 'i' regex flag\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Global Library Declaration File Template for TypeScript\nDESCRIPTION: Provides a comprehensive template for creating a TypeScript declaration file (.d.ts) for a global library. It includes various declaration types such as functions, interfaces, classes, and namespaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global.d.ts.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ If this library is callable (e.g. can be invoked as myLib(3)),\n *~ include those call signatures here.\n *~ Otherwise, delete this section.\n */\ndeclare function myLib(a: string): string;\ndeclare function myLib(a: number): number;\n\n/*~ If you want the name of this library to be a valid type name,\n *~ you can do so here.\n *~\n *~ For example, this allows us to write 'var x: myLib';\n *~ Be sure this actually makes sense! If it doesn't, just\n *~ delete this declaration and add types inside the namespace below.\n */\ninterface myLib {\n  name: string;\n  length: number;\n  extras?: string[];\n}\n\n/*~ If your library has properties exposed on a global variable,\n *~ place them here.\n *~ You should also place types (interfaces and type alias) here.\n */\ndeclare namespace myLib {\n  //~ We can write 'myLib.timeout = 50;'\n  let timeout: number;\n\n  //~ We can access 'myLib.version', but not change it\n  const version: string;\n\n  //~ There's some class we can create via 'let c = new myLib.Cat(42)'\n  //~ Or reference e.g. 'function f(c: myLib.Cat) { ... }\n  class Cat {\n    constructor(n: number);\n\n    //~ We can read 'c.age' from a 'Cat' instance\n    readonly age: number;\n\n    //~ We can invoke 'c.purr()' from a 'Cat' instance\n    purr(): void;\n  }\n\n  //~ We can declare a variable as\n  //~   'var s: myLib.CatSettings = { weight: 5, name: \"Maru\" };'\n  interface CatSettings {\n    weight: number;\n    name: string;\n    tailLength?: number;\n  }\n\n  //~ We can write 'const v: myLib.VetID = 42;'\n  //~  or 'const v: myLib.VetID = \"bob\";'\n  type VetID = string | number;\n\n  //~ We can invoke 'myLib.checkCat(c)' or 'myLib.checkCat(c, v);'\n  function checkCat(c: Cat, s?: VetID);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Module for Greeting Functionality\nDESCRIPTION: A TypeScript module (greet.ts) that exports a function for creating greeting messages. This demonstrates TypeScript's module system.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sayHello(name: string) {\n  return `Hello from ${name}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ES6 Generators in TypeScript 1.6\nDESCRIPTION: Shows how to use ES6 generators in TypeScript 1.6, including type annotations and type inference for generator functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* g(): Iterable<string> {\n  for (var i = 0; i < 100; i++) {\n    yield \"\"; // string is assignable to string\n  }\n  yield* otherStringGenerator(); // otherStringGenerator must be iterable and element type assignable to string\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'import type' in TypeScript\nDESCRIPTION: This snippet shows how to use the 'import type' syntax in TypeScript, which can only import types and not values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Cat, Dog } from \"./animal.js\";\nexport type Animals = Cat | Dog;\n```\n\n----------------------------------------\n\nTITLE: MSBuild Configuration for TypeScript\nDESCRIPTION: XML configuration to enable TypeScript build mode in MSBuild projects\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Project References.md#2025-04-20_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <TypeScriptBuildMode>true</TypeScriptBuildMode>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Object and List Options\nDESCRIPTION: Configuration options that accept objects or lists as values, including paths and plugins settings for customizing TypeScript compilation behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<tr class='odd' name='paths'>\n  <td><code><a href='/tsconfig/#paths'>--paths</a></code></td>\n  <td><p><code>object</code></p></td>\n  <td></td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for decorator metadata\nDESCRIPTION: JSON configuration in tsconfig.json to enable experimental decorators and emit decorator metadata in TypeScript projects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Large Codebase Project Structure Example\nDESCRIPTION: Illustrates a large project structure with multiple packages and a main app.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\npackages\n├── graphics/\n│   ├── tsconfig.json\n│   └── src/\n│       └── ...\n├── sound/\n│   ├── tsconfig.json\n│   └── src/\n│       └── ...\n├── networking/\n│   ├── tsconfig.json\n│   └── src/\n│       └── ...\n├── input/\n│   ├── tsconfig.json\n│   └── src/\n│       └── ...\n└── app/\n    ├── tsconfig.json\n    ├── some-script.js\n    └── src/\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents with Node.js\nDESCRIPTION: A reference to the script that generates the table of contents JSON file which contains metadata about the hierarchy and sort order for the documentation examples.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/community-meta/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nscripts/generateTOC.js\n```\n\n----------------------------------------\n\nTITLE: Setting JSX Runtime to Automatic Mode Per-File\nDESCRIPTION: Shows how to use a JSX pragma comment to force automatic runtime (equivalent to the 'react-jsx' option) for a specific file regardless of project configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n/* @jsxRuntime automatic */\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unknown Type Assignment Compatibility\nDESCRIPTION: Shows how TypeScript 4.8 allows assignments between unknown and {} | null | undefined types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x: unknown, y: {} | null | undefined) {\n    x = y; // always worked\n    y = x; // used to error, now works\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - TypeScript outFile Usage\nDESCRIPTION: Documentation excerpt explaining the flexible layout options when using TypeScript's outFile compilation feature, referencing the TypeScript repository's own structure of library and endpoint projects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Project References.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Structuring for outFiles\n\nLayout for compilations using [`outFile`](/tsconfig#outFile) is more flexible because relative paths don't matter as much.\nThe TypeScript repo itself is a good reference here - we have some \"library\" projects and some \"endpoint\" projects; \"endpoint\" projects are kept as small as possible and pull in only the libraries they need.\n```\n\n----------------------------------------\n\nTITLE: Using a Module Plugin in TypeScript\nDESCRIPTION: Example showing how to import and use a module alongside its plugin extension. This demonstrates first using the standard API, then importing a plugin extension that adds new functionality at runtime.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { greeter } from \"super-greeter\";\n\n// Normal Greeter API\ngreeter(2);\ngreeter(\"Hello world\");\n\n// Now we extend the object with a new function at runtime\nimport \"hyper-super-greeter\";\ngreeter.hyperGreet();\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript decorator method with experimental decorator syntax\nDESCRIPTION: A TypeScript example showing the definition of a LogMethod decorator and its application to a class method. The decorator logs information about the decorated method, including the target, property key, and descriptor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/emitDecoratorMetadata.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @experimentalDecorators\nfunction LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Function Assignment with strictFunctionTypes Disabled\nDESCRIPTION: Example showing how TypeScript allows potentially unsafe function assignments when strictFunctionTypes is disabled. The code demonstrates assigning a function that expects only strings to a variable typed to accept strings or numbers, which leads to a runtime crash.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strictFunctionTypes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictFunctionTypes: false\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment\nlet func: StringOrNumberFunc = fn;\n// Unsafe call - will crash\nfunc(10);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Watch Mode Options\nDESCRIPTION: Enumerates the available strategies for watching files in TypeScript, including fixed polling, priority polling, dynamic priority polling, and filesystem events options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/watchFile.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"watchFile\": \"fixedPollingInterval\" | \"priorityPollingInterval\" | \"dynamicPriorityPolling\" | \"useFsEvents\" | \"useFsEventsOnParentDirectory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple TSConfig Extends with Merged Options\nDESCRIPTION: Demonstrates how compiler options from multiple extended configuration files get merged, with later entries taking precedence for conflicting options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig1.json\n{\n    \"compilerOptions\": {\n        \"strictNullChecks\": true\n    }\n}\n\n// tsconfig2.json\n{\n    \"compilerOptions\": {\n        \"noImplicitAny\": true\n    }\n}\n\n// tsconfig.json\n{\n    \"extends\": [\"./tsconfig1.json\", \"./tsconfig2.json\"],\n    \"files\": [\"./index.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Discriminant Property Intersection Example\nDESCRIPTION: Shows how TypeScript 3.9 handles intersections with incompatible discriminant properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function smushObjects<T, U>(x: T, y: U): T & U;\n\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n\ndeclare let x: Circle;\ndeclare let y: Square;\n\nlet z = smushObjects(x, y);\nconsole.log(z.kind);\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Box Interface and Function in TypeScript\nDESCRIPTION: Defines a generic Box interface and a makeBox function that creates a Box object with a given value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Box<T> {\n    value: T;\n}\n\nfunction makeBox<T>(value: T) {\n    return { value };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Const Enum Usage in TypeScript\nDESCRIPTION: Demonstrates the basic usage of const enums in TypeScript with a music album example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/preserveConstEnums.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Type Annotations in JSDoc\nDESCRIPTION: Examples of basic JSDoc type annotations including primitive types, Window objects, and Promise-like types\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {string}\n */\nvar s;\n\n/** @type {Window} */\nvar win;\n\n/** @type {PromiseLike<string>} */\nvar promisedString;\n\n// You can specify an HTML Element with DOM properties\n/** @type {HTMLElement} */\nvar myElement = document.querySelector(selector);\nelement.dataset.myData = \"\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Auto-Import Examples\nDESCRIPTION: Shows different auto-import styles for type imports in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport let p: Person\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Person } from \"./types\";\n\nexport let p: Person\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Person } from \"./types\";\n\nexport let p: Person\n```\n\n----------------------------------------\n\nTITLE: Invalid Regex Check Example in TypeScript\nDESCRIPTION: Example showing a regex pattern being used directly in a condition without .test(), which always evaluates to truthy.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (/0x[0-9a-f]/) {\n    // Oops! This block always runs.\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining traceResolution Option in TypeScript Configuration\nDESCRIPTION: This markdown snippet defines the 'traceResolution' compiler option for TypeScript. It provides a display name, a one-line description, and explains when to use this option for debugging module resolution problems.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/traceResolution.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Trace Resolution\"\noneline: \"Log paths used during the [`moduleResolution`](#moduleResolution) process.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting from Relative Path without Extension\nDESCRIPTION: This snippet shows an export statement using a relative path without an extension. While this works with bundlers, it can cause issues when used in Node.js environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./utils\";\n```\n\n----------------------------------------\n\nTITLE: Node.appendChild Type Definition\nDESCRIPTION: The TypeScript type definition for the appendChild method on the Node interface, showing how it uses generics to preserve the specific node type that is being appended.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nappendChild<T extends Node>(newChild: T): T;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Boolean Flags\nDESCRIPTION: Common boolean configuration options for the TypeScript compiler including noEmitHelpers, noEmitOnError, noErrorTruncation, and others that control compilation behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<tr class='odd' name='noEmitHelpers'>\n  <td><code><a href='/tsconfig/#noEmitHelpers'>--noEmitHelpers</a></code></td>\n  <td><p><code>boolean</code></p></td>\n  <td><p><code>false</code></p></td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Project Structure Before Compilation in TypeScript\nDESCRIPTION: Shows the initial file structure of a TypeScript project before compilation, including the main TypeScript file, package.json, and tsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/declarationDir.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample\n├── index.ts\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: TypeScript Union Enum Comparison Error\nDESCRIPTION: Demonstrates a new error in TypeScript 4.3 when comparing a union enum with a numeric literal that it can never equal, improving type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  A = 0,\n  B = 1,\n}\n\nfunction doSomething(x: E) {\n  // Error! This condition will always return 'false' since the types 'E' and '-1' have no overlap.\n  if (x === -1) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced TypeScript Path Mapping with Patterns\nDESCRIPTION: Demonstrates pattern-based path mapping configuration for multiple project directories including source, config, environments, shared components, helpers, and tests. Uses wildcard patterns to map import paths to specific project structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/paths.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n        \"app/*\": [\"./src/app/*\"],\n        \"config/*\": [\"./src/app/_config/*\"],\n        \"environment/*\": [\"./src/environments/*\"],\n        \"shared/*\": [\"./src/app/_shared/*\"],\n        \"helpers/*\": [\"./src/helpers/*\"],\n        \"tests/*\": [\"./src/tests/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Declaration File with Inferred Type\nDESCRIPTION: Example of a generated declaration file showing the result of TypeScript's type inference, where the return type of a function is determined from imported variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// add.d.ts\nexport declare function add(): string;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with tsconfig.json\nDESCRIPTION: TypeScript configuration file that specifies compiler options and files to include. It sets noImplicitAny to true and targets ES5 JavaScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"src/main.ts\"],\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"target\": \"es5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserify with TypeScript\nDESCRIPTION: Instructions for setting up Browserify with TypeScript using tsify plugin, showing both CLI and API usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install tsify\n```\n\nLANGUAGE: sh\nCODE:\n```\nbrowserify main.ts -p [ tsify --noImplicitAny ] > bundle.js\n```\n\nLANGUAGE: js\nCODE:\n```\nvar browserify = require(\"browserify\");\nvar tsify = require(\"tsify\");\n\nbrowserify()\n  .add(\"main.ts\")\n  .plugin(\"tsify\", { noImplicitAny: true })\n  .bundle()\n  .pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output After Removing Type-Only Exports\nDESCRIPTION: The JavaScript output after TypeScript transpilation when exporting both a type and a function. The type-only export is removed since it has no runtime value, demonstrating why isolated modules need special handling.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/isolatedModules.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport { someFunction };\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example for listEmittedFiles\nDESCRIPTION: A simple example showing the file structure of a TypeScript project that would use the listEmittedFiles option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/listEmittedFiles.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample\n├── index.ts\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure With rootDir\nDESCRIPTION: Example directory structure showing compiled output when rootDir is explicitly set to '.'\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDir.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nMyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js\n```\n\n----------------------------------------\n\nTITLE: Setting Additional TypeScript Flags in MSBuild\nDESCRIPTION: Demonstrates how to set additional TypeScript compiler flags using the TypeScriptAdditionalFlags property in MSBuild. This example shows how to enable the noPropertyAccessFromIndexSignature option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<TypeScriptAdditionalFlags> $(TypeScriptAdditionalFlags) --noPropertyAccessFromIndexSignature</TypeScriptAdditionalFlags>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for RegExp Default Export\nDESCRIPTION: The TypeScript declaration for a CommonJS module that exports a regular expression, using export = syntax for default exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const helloWorld: RegExp;\nexport = helloWorld;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Capitalized String Type in TypeScript\nDESCRIPTION: This snippet demonstrates the incorrect usage of the capitalized 'String' type in TypeScript. It shows that using 'String' instead of 'string' can lead to type errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Basic Types.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reverse(s: String): String {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nreverse(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Sublime Text for TypeScript Nightly Build\nDESCRIPTION: This JSON snippet demonstrates how to update the Sublime Text user settings to use the installed nightly build of TypeScript. It specifies the path to the TypeScript SDK in the node_modules folder.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/Nightly Builds.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"typescript_tsdk\": \"<path to your folder>/node_modules/typescript/lib\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Flags\nDESCRIPTION: Core compiler flags that control TypeScript's behavior when processing and generating code, including module handling, import behavior, and strict mode settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n--allowArbitraryExtensions     # boolean - Enable importing files with any extension with declaration file present.\n--allowImportingTsExtensions   # boolean - Allow imports to include TypeScript file extensions.\n--allowJs                      # boolean - Allow JavaScript files to be a part of your program.\n--allowSyntheticDefaultImports # boolean - Allow 'import x from y' when a module doesn't have a default export.\n--allowUmdGlobalAccess         # boolean - Allow accessing UMD globals from modules.\n--allowUnreachableCode         # boolean - Disable error reporting for unreachable code.\n--allowUnusedLabels            # boolean - Disable error reporting for unused labels.\n--alwaysStrict                 # boolean - Ensure 'use strict' is always emitted.\n```\n\n----------------------------------------\n\nTITLE: Write-only References Flagged as Unused in TypeScript\nDESCRIPTION: Example showing how TypeScript 2.6 flags variables that are only written to but never read from as unused when using the noUnusedLocals and noUnusedParameters compiler options. Both 'n' and 'm' are marked as unused because their values are never read.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(n: number) {\n  n = 0;\n}\n\nclass C {\n  private m: number;\n  constructor() {\n    this.m = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Project with tsconfig.json\nDESCRIPTION: Example of a basic tsconfig.json file that sets compiler options for a TypeScript project. It specifies the module system, enables strict null checks, and generates source maps.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"sourceMap\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Nightly Builds\nDESCRIPTION: Shows the npm command to install nightly builds of TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g typescript@next\n```\n\n----------------------------------------\n\nTITLE: Exporting JSX Namespace for Automatic Runtime\nDESCRIPTION: TypeScript definition showing how to export the JSX namespace for automatic runtime modes 'react-jsx' and 'react-jsxdev'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport namespace JSX {\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Union Types Error Example - TypeScript\nDESCRIPTION: Demonstrates the previous behavior in TypeScript where unions of callable types could only be invoked with identical parameter lists, resulting in an error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.3.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fruit = \"apple\" | \"orange\";\ntype Color = \"red\" | \"orange\";\n\ntype FruitEater = (fruit: Fruit) => number; // eats and ranks the fruit\ntype ColorConsumer = (color: Color) => string; // consumes and describes the colors\n\ndeclare let f: FruitEater | ColorConsumer;\n\n// Cannot invoke an expression whose type lacks a call signature.\n//   Type 'FruitEater | ColorConsumer' has no compatible call signatures.ts(2349)\nf(\"orange\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Strict Type Checking Configuration\nDESCRIPTION: XML element and CLI flag to enable strict type checking options across the project.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<TypeScriptStrict>\n```\n\n----------------------------------------\n\nTITLE: Generic Function with Length Constraint Error Example\nDESCRIPTION: Demonstrates an error case when trying to access a length property on a generic type without proper constraints.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loggingIdentity<T>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration with Class and Namespaced Types\nDESCRIPTION: A complex TypeScript declaration using a class with a merged namespace to organize related types, demonstrating how to structure complex type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// This represents the JavaScript class which would be available at runtime\nexport class API {\n  constructor(baseURL: string);\n  getInfo(opts: API.InfoRequest): API.InfoResponse;\n}\n\n// This namespace is merged with the API class and allows for consumers, and this file\n// to have types which are nested away in their own sections.\ndeclare namespace API {\n  export interface InfoRequest {\n    id: string;\n  }\n\n  export interface InfoResponse {\n    width: number;\n    height: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TypeScript Strict Mode Flag\nDESCRIPTION: Demonstrates the strict configuration flag usage in TypeScript. This flag enables comprehensive type checking behavior and all strict mode family options for stronger program correctness guarantees. Individual strict checks can be disabled as needed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/strict.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"strict\": true\n```\n\n----------------------------------------\n\nTITLE: Basic React Component in TypeScript\nDESCRIPTION: A simple React component written in TypeScript JSX (TSX) that renders a 'Hello World' heading.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxImportSource.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\n\nfunction App() {\n  return <h1>Hello World</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Interface in TypeScript\nDESCRIPTION: Interface definition for the ES2015 Iterator protocol, specifying the required next method and optional return/throw methods\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.3.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Iterator<T> {\n  next(value?: any): IteratorResult<T>;\n  return?(value?: any): IteratorResult<T>;\n  throw?(e?: any): IteratorResult<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Weak Type Detection in TypeScript\nDESCRIPTION: Demonstrates TypeScript 2.4's new concept of 'weak types' and how it helps catch potential errors when assigning to types with all-optional properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.4.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  data?: string;\n  timeout?: number;\n  maxRetries?: number;\n}\n\nfunction sendMessage(options: Options) {\n  // ...\n}\n\nconst opts = {\n  payload: \"hello world!\",\n  retryOnFail: true\n};\n\n// Error!\nsendMessage(opts);\n// No overlap between the type of 'opts' and 'Options' itself.\n// Maybe we meant to use 'data'/'maxRetries' instead of 'payload'/'retryOnFail'.\n```\n\n----------------------------------------\n\nTITLE: Adding Deprecation Attributes in Markdown Front Matter\nDESCRIPTION: Demonstrates how to add deprecation-related attributes to the YAML front matter of a markdown file. This includes setting the 'deprecated_by' attribute and creating a 'deprecation_redirects' array for more granular redirects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Deprecating a page.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Advanced Types\nlayout: docs\npermalink: /docs/handbook/advanced-types.html\noneline: Advanced concepts around types in TypeScript\ndeprecated_by: /docs/handbook/2/types-from-types.html\n\n# prettier-ignore\ndeprecation_redirects: [\n  type-guards-and-differentiating-types, /docs/handbook/2/narrowing.html,\n  user-defined-type-guards, /docs/handbook/2/narrowing.html#using-type-predicates,\n  typeof-type-guards, \"/docs/handbook/2/narrowing.html#typeof-type-guards\",\n  instanceof-type-guards, /docs/handbook/2/narrowing.html#instanceof-narrowing,\n  nullable-types, /docs/handbook/2/everyday-types.html#null-and-undefined,\n  type-aliases, /docs/handbook/2/everyday-types.html#type-aliases,\n  interfaces-vs-type-aliases, /docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces,\n  enum-member-types, /docs/handbook/enums.html,\n  polymorphic-this-types, /docs/handbook/2/classes.html,\n  index-types, /docs/handbook/2/indexed-access-types.html,\n  index-types-and-index-signatures, /docs/handbook/2/indexed-access-types.html,\n  mapped-types, /docs/handbook/2/mapped-types.html,\n  inference-from-mapped-types, /docs/handbook/2/mapped-types.html,\n  conditional-types, /docs/handbook/2/conditional-types.html,\n  distributive-conditional-types, /docs/handbook/2/conditional-types.html#distributive-conditional-types,\n  type-inference-in-conditional-types, /docs/handbook/2/conditional-types.html#inferring-within-conditional-types,\n  predefined-conditional-types, /docs/handbook/utility-types.html,\n]\n---\n```\n\n----------------------------------------\n\nTITLE: Illustrating Contravariance in TypeScript Interfaces\nDESCRIPTION: Demonstrates how strictFunctionTypes affects type checking for interfaces with function members. Shows contravariant behavior for type parameters used in function positions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Comparer<T> {\n  compare: (a: T, b: T) => number;\n}\n\ndeclare let animalComparer: Comparer<Animal>;\ndeclare let dogComparer: Comparer<Dog>;\n\nanimalComparer = dogComparer; // Error\ndogComparer = animalComparer; // Ok\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Limitations of Type Annotations in TypeScript\nDESCRIPTION: This snippet shows how using type annotations can lead to loss of specific type information, causing undesirable errors in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Each property can be a string or an RGB tuple.\nconst palette = {\n    red: [255, 0, 0],\n    green: \"#00ff00\",\n    bleu: [0, 0, 255]\n//  ^^^^ sacrebleu - we've made a typo!\n};\n\n// We want to be able to use string methods on 'green'...\nconst greenNormalized = palette.green.toUpperCase();\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Colors = \"red\" | \"green\" | \"blue\";\n\ntype RGB = [red: number, green: number, blue: number];\n\nconst palette: Record<Colors, string | RGB> = {\n    red: [255, 0, 0],\n    green: \"#00ff00\",\n    bleu: [0, 0, 255]\n//  ~~~~ The typo is now correctly detected\n};\n\n// But we now have an undesirable error here - 'palette.green' \"could\" be of type RGB and\n// property 'toUpperCase' does not exist on type 'string | RGB'.\nconst greenNormalized = palette.green.toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Changes to modifiers Property in AST Node Interface\nDESCRIPTION: This diff shows how the modifiers property in TypeScript's AST nodes has changed to support both legacy decorators and the new decorator proposal, using ModifierLike to represent either modifiers or decorators.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n- readonly modifiers?: NodeArray<Modifier> | undefined;\n+ /**\n+  * @deprecated ...\n+  * Use `ts.canHaveModifiers()` to test whether a `Node` can have modifiers.\n+  * Use `ts.getModifiers()` to get the modifiers of a `Node`.\n+  * ...\n+  */\n+ readonly modifiers?: NodeArray<ModifierLike> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Compilation Without outDir\nDESCRIPTION: This shell command example shows how compiled files are placed in the same directory as source files when no outDir is specified in tsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/outDir.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ tsc\n\nexample\n├── index.js\n└── index.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Import Configuration\nDESCRIPTION: XML element and CLI flag to enable support for importing CommonJS modules with additional JavaScript emission.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<TypeScriptESModuleInterop>\n```\n\n----------------------------------------\n\nTITLE: Invalid Abstract Property Initialization\nDESCRIPTION: Example showing that abstract properties can no longer have initializers in TypeScript 4.4.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.4.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class C {\n  abstract prop = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Gulp Task for TypeScript Compilation\nDESCRIPTION: A Gulpfile that defines a default task to compile TypeScript files using gulp-typescript. It reads the tsconfig.json for compiler options and outputs to the dist directory.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar ts = require(\"gulp-typescript\");\nvar tsProject = ts.createProject(\"tsconfig.json\");\n\ngulp.task(\"default\", function () {\n  return tsProject.src().pipe(tsProject()).js.pipe(gulp.dest(\"dist\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Localized Diagnostics in TypeScript CLI\nDESCRIPTION: Shows how to use the --locale flag to get localized error messages and help text in the TypeScript command-line interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nc:\\ts>tsc --v\nVersion 2.6.0-dev.20171003\n\nc:\\ts>tsc --locale ru --pretty c:\\test\\a.ts\n\n../test/a.ts(1,5): error TS2322: Тип \"\"string\"\" не может быть назначен для типа \"number\".\n\n1 var x: number = \"string\";\n      ~\n```\n\nLANGUAGE: shell\nCODE:\n```\nPS C:\\ts> tsc --v\nVersion 2.6.0-dev.20171003\n\nPS C:\\ts> tsc --locale ja-jp\nバージョン 2.6.0-dev.20171003\n構文: tsc [オプション] [ファイル ...]\n\n例:  tsc hello.ts\n    tsc --outFile file.js file.ts\n    tsc @args.txt\n\nオプション:\n -h, --help                                 このメッセージを表示します。\n --all                                      コンパイラ オプションをすべて表示します。\n -v, --version                              コンパイラのバージョンを表示します。\n --init                                     TypeScript プロジェクトを初期化して、tsconfig.json ファイルを作成します。\n -p ファイルまたはディレクトリ, --project ファイルまたはディレクトリ  構成ファイルか、'tsconfig.json' を含むフォルダーにパスが指定されたプロジェクトをコ\nンパイルします。\n --pretty                                   色とコンテキストを使用してエラーとメッセージにスタイルを適用します (試験的)。\n -w, --watch                                入力ファイルを監視します。\n -t バージョン, --target バージョン                   ECMAScript のターゲット バージョンを指定します: 'ES3' (既定)、'ES5'、'ES2015'、'ES2016'、'ES2017'、'ES\nNEXT'。\n -m 種類, --module 種類                         モジュール コード生成を指定します: 'none'、'commonjs'、'amd'、'system'、'umd'、'es2015'、'ESNext'。\n --lib                                      コンパイルに含めるライブラリ ファイルを指定します:\n                                              'es5' 'es6' 'es2015' 'es7' 'es2016' 'es2017' 'esnext' 'dom' 'dom.iterable' 'webworker' 'scripthost' 'es201\n5.core' 'es2015.collection' 'es2015.generator' 'es2015.iterable' 'es2015.promise' 'es2015.proxy' 'es2015.reflect' 'es2015.symbol' 'es2015.symbol.wellkno\nwn' 'es2016.array.include' 'es2017.object' 'es2017.sharedmemory' 'es2017.string' 'es2017.intl' 'esnext.asynciterable'\n --allowJs                                  javascript ファイルのコンパイルを許可します。\n --jsx 種類                                   JSX コード生成を指定します: 'preserve'、'react-native'、'react'。\n -d, --declaration                          対応する '.d.ts' ファイルを生成します。\n --sourceMap                                対応する '.map' ファイルを生成します。\n --outFile ファイル                             出力を連結して 1 つのファイルを生成します。\n --outDir ディレクトリ                            ディレクトリへ出力構造をリダイレクトします。\n --removeComments                           コメントを出力しないでください。\n --noEmit                                   出力しないでください。\n --strict                                   strict 型チェックのオプションをすべて有効にします。\n --noImplicitAny                            暗黙的な 'any' 型を含む式と宣言に関するエラーを発生させます。\n --strictNullChecks                         厳格な null チェックを有効にします。\n --noImplicitThis                           暗黙的な 'any' 型を持つ 'this' 式でエラーが発生します。\n --alwaysStrict                             厳格モードで解析してソース ファイルごとに \"use strict\" を生成します。\n --noUnusedLocals                           使用されていないローカルに関するエラーを報告します。\n --noUnusedParameters                       使用されていないパラメーターに関するエラーを報告します。\n --noImplicitReturns                        関数の一部のコード パスが値を返さない場合にエラーを報告します。\n --noFallthroughCasesInSwitch               switch ステートメントに case のフォールスルーがある場合にエラーを報告します。\n --types                                    コンパイルに含む型宣言ファイル。\n @<ファイル>\n```\n\n----------------------------------------\n\nTITLE: JSX ElementType Definition\nDESCRIPTION: Demonstrates the structure of JSX namespace and ElementType definition.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nnamespace JSX {\n    export type ElementType =\n        // All the valid lowercase tags\n        keyof IntrinsicAttributes\n        // Function components\n        (props: any) => Element\n        // Class components\n        new (props: any) => ElementClass;\n    export interface IntrinsicAttributes extends /*...*/ {}\n    export type Element = /*...*/;\n    export type ElementClass = /*...*/;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Promise Check with Strictness Error\nDESCRIPTION: Shows an example of a new error in TypeScript 4.3 when checking a Promise in a condition under strictNullChecks, as Promises are always considered truthy.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var p: Promise<number>;\n\nif (p) {\n  //  ~\n  // Error!\n  // This condition will always return true since\n  // this 'Promise<number>' appears to always be defined.\n  //\n  // Did you forget to use 'await'?\n}\n```\n\n----------------------------------------\n\nTITLE: ESNext Module Output Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript preserves modern ES module syntax when using the 'esnext' module option, supporting the latest ECMAScript features.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: esnext\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Short-Circuiting Assignment Operators\nDESCRIPTION: Examples of compound assignment operators in TypeScript including the new logical assignment operators.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet values: string[];\n(values ?? (values = [])).push(\"hello\");\n\n// After\n(values ??= []).push(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Basic JSDoc Type Annotation in JavaScript\nDESCRIPTION: Demonstrates basic type annotation in JavaScript using JSDoc syntax to specify a number type for a variable. Shows both valid and invalid assignments to illustrate type checking behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Intro to JS with TS.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {number} */\nvar x;\n\nx = 0; // OK\nx = false; // OK?!\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Loaders for Webpack\nDESCRIPTION: NPM command to install ts-loader and source-map-loader for integrating TypeScript with Webpack, enabling compilation and source map support.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ts-loader source-map-loader\n```\n\n----------------------------------------\n\nTITLE: CSSStyleRule Interface Example\nDESCRIPTION: Demonstrates how to define interfaces with unrelated getter and setter types using the CSSStyleRule example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CSSStyleRule {\n    // ...\n    /** Always reads as a `CSSStyleDeclaration` */\n    get style(): CSSStyleDeclaration;\n    /** Can only write a `string` here. */\n    set style(newValue: string);\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unreachable Code Detection in TypeScript\nDESCRIPTION: This snippet illustrates how TypeScript 1.8 detects and reports unreachable code. It shows two examples: one with a simple if-else structure and another demonstrating the automatic semicolon insertion issue.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(x) {\n  if (x) {\n    return true;\n  } else {\n    return false;\n  }\n\n  x = 0; // Error: Unreachable code detected.\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f() {\n  return; // Automatic Semicolon Insertion triggered at newline\n  {\n    x: \"string\"; // Error: Unreachable code detected.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Cleanup with Manual Approach in TypeScript\nDESCRIPTION: An example showing a basic function that creates a temporary file, does work with it, and then cleans up by closing and deleting the file manually. This represents the traditional approach without using the new resource management features.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\n\nexport function doSomeWork() {\n    const path = \".some_temp_file\";\n    const file = fs.openSync(path, \"w+\");\n\n    // use file...\n\n    // Close the file and delete it.\n    fs.closeSync(file);\n    fs.unlinkSync(path);\n}\n```\n\n----------------------------------------\n\nTITLE: Map Entries Iterator Example\nDESCRIPTION: Example showing how to use iterator methods with Map entries to invert keys and values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invertKeysAndValues<K, V>(map: Map<K, V>): Map<V, K> {\n    return new Map(\n        map.entries().map(([k, v]) => [v, k])\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gulp to minify TypeScript\nDESCRIPTION: Commands to run Gulp for minification and view the output of the minified bundle.js file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ngulp\ncat dist/bundle.js\n```\n\n----------------------------------------\n\nTITLE: TypeScript Twoslasher API Usage\nDESCRIPTION: Provides documentation for the main exported function 'twoslasher' and its options, used for processing TypeScript code with special markup.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Runs the checker against a TypeScript/JavaScript code sample returning potentially\n * difference code, and a set of annotations around how it works.\n *\n * @param code The twoslash markup'd code\n * @param extension For example: \"ts\", \"tsx\", \"typescript\", \"javascript\" or \"js\".\n * @param options Additional options for twoslash\n */\nexport function twoslasher(code: string, extension: string, options: TwoSlashOptions = {}): TwoSlashReturn\n```\n\n----------------------------------------\n\nTITLE: Hybrid Types Implementation\nDESCRIPTION: Shows how to create hybrid types that combine function and object characteristics.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n\nfunction getCounter(): Counter {\n  let counter = function (start: number) {} as Counter;\n  counter.interval = 123;\n  counter.reset = function () {};\n  return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n```\n\n----------------------------------------\n\nTITLE: Extracting 'this' Parameter Type in TypeScript\nDESCRIPTION: Shows the usage of ThisParameterType to extract the type of the 'this' parameter from a function type. The example defines a toHex function with a 'this' parameter and uses ThisParameterType to ensure type safety in another function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Utility Types.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toHex(this: Number) {\n  return this.toString(16);\n}\n\nfunction numberToString(n: ThisParameterType<typeof toHex>) {\n  return toHex.apply(n);\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Package Configuration\nDESCRIPTION: Package.json configuration specifying dev dependencies for Gulp and Del\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/ASP.NET Core.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n    \"gulp\": \"4.0.2\",\n    \"del\": \"5.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for TypeScript Documentation\nDESCRIPTION: This code snippet defines the frontmatter for a Markdown document. It specifies the display property for the 'Type Checking' section of the TypeScript configuration documentation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Type_Checking_6248.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Type Checking\"\n---\n```\n\n----------------------------------------\n\nTITLE: Validating TSConfig Reference Codeblocks\nDESCRIPTION: Commands for validating codeblocks using twoslash, running linters, and debugging. These can be executed from the root of the repository.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter=tsconfig-reference test\n\n# or to just run the linter without a build\npnpm run --filter=tsconfig-reference lint\n\n# or to just one one linter\npnpm run --filter=tsconfig-reference lint resolveJson\n```\n\n----------------------------------------\n\nTITLE: Invalid JSX Text Characters Example\nDESCRIPTION: Shows how TypeScript 3.9 enforces JSX specification rules regarding invalid characters in text positions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nlet directions = <span>Navigate to: Menu Bar > Tools > Options</span>;\n```\n\n----------------------------------------\n\nTITLE: Constructor Functions as Class Equivalents in JavaScript\nDESCRIPTION: Illustrates how TypeScript treats constructor functions in JavaScript as equivalent to ES2015 classes, applying the same property inference rules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @checkJs\n// @errors: 2683 2322\nfunction C() {\n  this.constructorOnly = 0;\n  this.constructorUnknown = undefined;\n}\nC.prototype.method = function () {\n  this.constructorOnly = false;\n  this.constructorUnknown = \"plunkbat\"; // OK, the type is string | undefined\n};\n```\n\n----------------------------------------\n\nTITLE: Compatible CommonJS Import in Declaration Files\nDESCRIPTION: Shows the preferred way to import in declaration files using require() syntax for better compatibility.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport express = require(\"express\");\n// ...\n```\n\n----------------------------------------\n\nTITLE: JSON Import Examples in TypeScript\nDESCRIPTION: Demonstrates correct and incorrect ways to import JSON files in TypeScript with --module nodenext.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport myConfig from \"./myConfig.json\";\n//                   ~~~~~~~~~~~~~~~~~\n// ❌ error: Importing a JSON file into an ECMAScript module requires a 'type: \"json\"' import attribute when 'module' is set to 'NodeNext'.\n\nimport myConfig from \"./myConfig.json\" with { type: \"json\" };\n//                                          ^^^^^^^^^^^^^^^^\n// ✅ This is fine because we provided `type: \"json\"`\n```\n\n----------------------------------------\n\nTITLE: Improved Group-Aware Organize Imports Result in TypeScript 4.7\nDESCRIPTION: Example showing the improved result of group-aware Organize Imports in TypeScript 4.7, which preserves import grouping while sorting imports within each group.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\n// local code\nimport * as aaa from \"./aaa\";\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\n\n// built-ins\nimport * as child_process from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// some code...\n```\n\n----------------------------------------\n\nTITLE: Using the TypeScript Compiler CLI (tsc) with Different Options in Shell\nDESCRIPTION: Examples of different ways to use the TypeScript compiler from the command line, including project-based compilation, single file compilation, glob patterns, specifying configuration files, and passing various compiler options directly on the command line.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Run a compile based on a backwards look through the fs for a tsconfig.json\ntsc\n\n# Emit JS for just the index.ts with the compiler defaults\ntsc index.ts\n\n# Emit JS for any .ts files in the folder src, with the default settings\ntsc src/*.ts\n\n# Emit files referenced in with the compiler settings from tsconfig.production.json\ntsc --project tsconfig.production.json\n\n# Emit d.ts files for a js file with showing compiler options which are booleans\ntsc index.js --declaration --emitDeclarationOnly\n\n# Emit a single .js file from two files via compiler options which take string arguments\ntsc app.ts util.ts --target esnext --outfile index.js\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in React Component with TypeScript\nDESCRIPTION: Illustrates how CSS files can be imported as side effects in a React component, which is a common pattern in bundled projects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./button-component.css\";\n\nexport function Button() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Source Declaration Example\nDESCRIPTION: A simple TypeScript declaration example showing how a constant is exported.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/sourceMap.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// helloWorld.ts\nexport declare const helloWorld = \"hi\";\n```\n\n----------------------------------------\n\nTITLE: JSDoc Comments with Mismatched Parameter Names\nDESCRIPTION: Example showing outdated JSDoc parameter names that don't match the actual function parameters, which will now trigger suggestion diagnostics in TypeScript 4.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param x {number} The first operand\n * @param y {number} The second operand\n */\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Controller Module Visibility Example in TypeScript\nDESCRIPTION: Demonstrates the relaxed module visibility rules in TypeScript 1.1, showing how interfaces can be used within modules without strict visibility enforcement when not generating declaration files. This example uses an Angular controller pattern.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.1.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule MyControllers {\n  interface ZooScope extends ng.IScope {\n    animals: Animal[];\n  }\n  export class ZooController {\n    // Used to be an error (cannot expose ZooScope), but now is only\n    // an error when trying to generate .d.ts files\n    constructor(public $scope: ZooScope) {}\n    /* more code */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Browserify and Related Dependencies\nDESCRIPTION: Shell command to install Browserify, tsify, and vinyl-source-stream as development dependencies. These enable bundling TypeScript modules for browser use.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev browserify tsify vinyl-source-stream\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contagious Nature of any Type in TypeScript\nDESCRIPTION: Shows how the 'any' type can lead to unsafe operations and how it propagates to other variables. Includes examples of calling non-functions and performing unsafe operations with any-typed values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanys.map(anys[1]); // oh no, \"oh no\" is not a function\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet sepsis = anys[0] + anys[1]; // this could mean anything\n```\n\n----------------------------------------\n\nTITLE: Exporting Non-Value Identifiers in TypeScript\nDESCRIPTION: This example demonstrates how TypeScript handles exports of type-only identifiers, which can cause issues with isolated modules. When a type is imported and exported, TypeScript omits it from the emitted JavaScript since it has no runtime value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/isolatedModules.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { someType, someFunction } from \"someModule\";\n\nsomeFunction();\n\nexport { someType, someFunction };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test File Example\nDESCRIPTION: Example of a test file importing and testing a module using assertions\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Project References.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// converter-tests.ts\nimport * as converter from \"../src/converter\";\n\nassert.areEqual(converter.celsiusToFahrenheit(0), 32);\n```\n\n----------------------------------------\n\nTITLE: Using keyof Operator with Keyof Strings Only Option in TypeScript\nDESCRIPTION: This snippet demonstrates the effect of the 'Keyof Strings Only' compiler option on the keyof operator. When enabled, keyof returns string instead of string | number for types with string index signatures. This option maintains behavior from before TypeScript 2.9.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/keyofStringsOnly.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = { [key: string]: any };\ntype K = keyof T; // With the flag: K is string\n                    // Without the flag: K is string | number\n```\n\n----------------------------------------\n\nTITLE: Example Output of TypeScript List Files Option\nDESCRIPTION: This snippet demonstrates the typical output when running the TypeScript compiler with the 'listFiles' option enabled. It shows the paths of various TypeScript declaration files and the project's source file that are part of the compilation process.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/listFiles.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n```\n\n----------------------------------------\n\nTITLE: Array Spread Example in JavaScript\nDESCRIPTION: Demonstrates array spread syntax in JavaScript to create a new array with additional elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Make a new array whose elements are 1 followed by the elements of arr2\nconst arr = [1, ...arr2];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Message for Inconsistent Exports\nDESCRIPTION: The error message shown by TypeScript when it detects merged declarations with inconsistent export modifiers. This error helps developers identify and fix export consistency issues.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nIndividual declarations in merged declaration 'replaceInFile' must be all exported or all local.\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for JSX Runtime\nDESCRIPTION: JSON configuration in package.json for mapping JSX runtime modules for ESM support, required for 'react-jsx' and 'react-jsxdev' options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./jsx-runtime\": \"./jsx-runtime.js\",\n    \"./jsx-dev-runtime\": \"./jsx-dev-runtime.js\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Output with Default Settings\nDESCRIPTION: The JavaScript output when the async function is compiled to ES5 with default settings. Shows the helper functions that TypeScript automatically generates to support async/await functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noEmitHelpers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @target: ES5\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Ambient Module for CSS Files in TypeScript\nDESCRIPTION: Shows how to declare an ambient module for CSS files to allow side effect imports without triggering errors when noUncheckedSideEffectImports is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/globals.d.ts\n\n// Recognize all CSS files as module imports.\ndeclare module \"*.css\" {}\n```\n\n----------------------------------------\n\nTITLE: Explicit Coercion to Allow Relational Operation in TypeScript 5.0\nDESCRIPTION: This example demonstrates how to explicitly coerce a value to a number using the unary plus operator to allow relational operations in TypeScript 5.0.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nfunction func(ns: number | string) {\n  return +ns > 4; // OK\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript LanguageService Interface Definition\nDESCRIPTION: Provides a comprehensive interface definition for the LanguageService, which is available through env.languageService. This interface includes methods for diagnostics, code completion, refactoring, and various code analysis tasks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LanguageService {\n    cleanupSemanticCache(): void;\n    getSyntacticDiagnostics(fileName: string): DiagnosticWithLocation[];\n    getSemanticDiagnostics(fileName: string): Diagnostic[];\n    getSuggestionDiagnostics(fileName: string): DiagnosticWithLocation[];\n    getCompilerOptionsDiagnostics(): Diagnostic[];\n    getEncodedSyntacticClassifications(fileName: string, span: TextSpan): Classifications;\n    getEncodedSemanticClassifications(fileName: string, span: TextSpan): Classifications;\n    getCompletionsAtPosition(fileName: string, position: number, options: GetCompletionsAtPositionOptions | undefined): WithMetadata<CompletionInfo> | undefined;\n    getCompletionEntryDetails(fileName: string, position: number, name: string, formatOptions: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, preferences: UserPreferences | undefined): CompletionEntryDetails | undefined;\n    getCompletionEntrySymbol(fileName: string, position: number, name: string, source: string | undefined): Symbol | undefined;\n    getQuickInfoAtPosition(fileName: string, position: number): QuickInfo | undefined;\n    getNameOrDottedNameSpan(fileName: string, startPos: number, endPos: number): TextSpan | undefined;\n    getBreakpointStatementAtPosition(fileName: string, position: number): TextSpan | undefined;\n    getSignatureHelpItems(fileName: string, position: number, options: SignatureHelpItemsOptions | undefined): SignatureHelpItems | undefined;\n    getRenameInfo(fileName: string, position: number, options?: RenameInfoOptions): RenameInfo;\n    findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename?: boolean): readonly RenameLocation[] | undefined;\n    getSmartSelectionRange(fileName: string, position: number): SelectionRange;\n    getDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;\n    getDefinitionAndBoundSpan(fileName: string, position: number): DefinitionInfoAndBoundSpan | undefined;\n    getTypeDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;\n    getImplementationAtPosition(fileName: string, position: number): readonly ImplementationLocation[] | undefined;\n    getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[] | undefined;\n    findReferences(fileName: string, position: number): ReferencedSymbol[] | undefined;\n    getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): DocumentHighlights[] | undefined;\n    getNavigateToItems(searchValue: string, maxResultCount?: number, fileName?: string, excludeDtsFiles?: boolean): NavigateToItem[];\n    getNavigationBarItems(fileName: string): NavigationBarItem[];\n    getNavigationTree(fileName: string): NavigationTree;\n    getOutliningSpans(fileName: string): OutliningSpan[];\n    getTodoComments(fileName: string, descriptors: TodoCommentDescriptor[]): TodoComment[];\n    getBraceMatchingAtPosition(fileName: string, position: number): TextSpan[];\n    getIndentationAtPosition(fileName: string, position: number, options: EditorOptions | EditorSettings): number;\n    getFormattingEditsForRange(fileName: string, start: number, end: number, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n    getFormattingEditsForDocument(fileName: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n    getFormattingEditsAfterKeystroke(fileName: string, position: number, key: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n    getDocCommentTemplateAtPosition(fileName: string, position: number): TextInsertion | undefined;\n    isValidBraceCompletionAtPosition(fileName: string, position: number, openingBrace: number): boolean;\n    getJsxClosingTagAtPosition(fileName: string, position: number): JsxClosingTagInfo | undefined;\n    getSpanOfEnclosingComment(fileName: string, position: number, onlyMultiLine: boolean): TextSpan | undefined;\n    toLineColumnOffset(fileName: string, position: number): LineAndCharacter;\n    getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: readonly number[], formatOptions: FormatCodeSettings, preferences: UserPreferences): readonly CodeFixAction[];\n    getCombinedCodeFix(scope: CombinedCodeFixScope, fixId: {}, formatOptions: FormatCodeSettings, preferences: UserPreferences): CombinedCodeActions;\n    applyCodeActionCommand(action: CodeActionCommand, formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult>;\n    applyCodeActionCommand(action: CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult[]>;\n    applyCodeActionCommand(action: CodeActionCommand | CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult | ApplyCodeActionCommandResult[]>;\n    getApplicableRefactors(fileName: string, positionOrRange: number | TextRange, preferences: UserPreferences | undefined): ApplicableRefactorInfo[];\n    getEditsForRefactor(fileName: string, formatOptions: FormatCodeSettings, positionOrRange: number | TextRange, refactorName: string, actionName: string, preferences: UserPreferences | undefined): RefactorEditInfo | undefined;\n    organizeImports(scope: OrganizeImportsScope, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];\n    getEditsForFileRename(oldFilePath: string, newFilePath: string, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];\n    getEmitOutput(fileName: string, emitOnlyDtsFiles?: boolean, forceDtsEmit?: boolean): EmitOutput;\n    getProgram(): Program | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-null Assertion Operator in TypeScript\nDESCRIPTION: An example demonstrating the use of the non-null assertion operator (!) to override TypeScript's null checks. This is useful when the developer knows a value cannot be null, but TypeScript's type system cannot determine that.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ndeclare var foo: string[] | null;\n\nfoo.length; // error - 'foo' is possibly 'null'\n\nfoo!.length; // okay - 'foo!' just has type 'string[]'\n```\n\n----------------------------------------\n\nTITLE: Declaring Untyped Module in TypeScript\nDESCRIPTION: Example showing how to declare an untyped module to silence TypeScript warnings without writing full type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Declarations.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"some-untyped-module\";\n```\n\n----------------------------------------\n\nTITLE: Converting AMD define to TypeScript import\nDESCRIPTION: Example showing how to convert a RequireJS/AMD define statement to TypeScript's import syntax while maintaining the same functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndefine([\"foo\"], function (foo) {\n  foo.doStuff();\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport foo = require(\"foo\");\n\nfoo.doStuff();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Block-Scoped Variable Capturing in TypeScript\nDESCRIPTION: This function demonstrates how a variable can be captured within a block scope and accessed even after the block has finished executing.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction theCityThatAlwaysSleeps() {\n  let getCity;\n\n  if (true) {\n    let city = \"Seattle\";\n    getCity = function () {\n      return city;\n    };\n  }\n\n  return getCity();\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing tsconfig.json File Path in TypeScript Projects\nDESCRIPTION: Shows the file path reference to the tsconfig.json configuration file that defines TypeScript compilation context. This file determines which TypeScript files are included in compilation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\ntsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Setting List-Value Compiler Flag in TypeScript\nDESCRIPTION: Demonstrates setting a compiler flag (lib) that accepts a list of values using a comma-separated string in a Twoslash annotation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Twoslash Annotations.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @lib: es2015,dom\n```\n\n----------------------------------------\n\nTITLE: Svelte Component with Imported Function\nDESCRIPTION: This Svelte component demonstrates a scenario where TypeScript might incorrectly remove an import that is used in the component's markup.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- A .svelte File -->\n<script>\n  import { someFunc } from \"./some-module.js\";\n</script>\n\n<button on:click=\"{someFunc}\">Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Projects Documentation\nDESCRIPTION: YAML frontmatter block that sets the display property to 'Projects' for documentation purposes. This is commonly used in static site generators and documentation systems to define metadata for the page.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Projects_6255.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndisplay: \"Projects\"\n---\n```\n\n----------------------------------------\n\nTITLE: Monitoring node_modules Directory References\nDESCRIPTION: Example showing directory paths that TypeScript monitors for changes, specifically focused on the node_modules directory structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Watch_and_Build_Modes_6250.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: ESM Import Require Transformation\nDESCRIPTION: Demonstrates how TypeScript transforms require imports in ES modules using createRequire.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport x = require(\"mod\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\nimport { createRequire as _createRequire } from \"module\";\nconst __require = _createRequire(import.meta.url);\nconst x = __require(\"mod\");\n```\n\n----------------------------------------\n\nTITLE: Using Unknown Type in Catch Clause in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'unknown' type for catch clause variables in TypeScript 4.0+. It shows proper error handling by type-checking the caught error before using it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/useUnknownInCatchVariables.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @useUnknownInCatchVariables\ntry {\n  // ...\n} catch (err: unknown) {\n  // We have to verify err is an\n  // error before using it as one.\n  if (err instanceof Error) {\n    console.log(err.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Default Export with Number\nDESCRIPTION: A simple CommonJS module that exports a number as its default export using module.exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = 3.142;\n```\n\n----------------------------------------\n\nTITLE: HTML Frontend Implementation\nDESCRIPTION: HTML page with input fields that uses the TypeScript-compiled JavaScript code\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/ASP.NET Core.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <script src=\"scripts/app.js\"></script>\n    <title></title>\n</head>\n<body>\n    <div id=\"message\"></div>\n    <div>\n        Compiler: <input id=\"compiler\" value=\"TypeScript\" onkeyup=\"document.getElementById('message').innerText = sayHello()\" /><br />\n        Framework: <input id=\"framework\" value=\"ASP.NET\" onkeyup=\"document.getElementById('message').innerText = sayHello()\" />\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Package JSON Example with Default Configuration\nDESCRIPTION: Example package.json file with empty configuration, resulting in CommonJS module format for .js files\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom npm Version for Type Definitions\nDESCRIPTION: Example showing how to specify a particular npm version or tag when importing a module, instructing ATA to use that version for type definitions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ata/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { xy } from \"xyz\" // types: beta\n```\n\n----------------------------------------\n\nTITLE: Extending Built-in Types and Computed Base Classes in TypeScript 1.6\nDESCRIPTION: Demonstrates how to extend built-in types and use computed base classes in class declarations in TypeScript 1.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Extend built-in types\n\nclass MyArray extends Array<number> {}\nclass MyError extends Error {}\n\n// Extend computed base class\n\nclass ThingA {\n  getGreeting() {\n    return \"Hello from A\";\n  }\n}\n\nclass ThingB {\n  getGreeting() {\n    return \"Hello from B\";\n  }\n}\n\ninterface Greeter {\n  getGreeting(): string;\n}\n\ninterface GreeterConstructor {\n  new (): Greeter;\n}\n\nfunction getGreeterBase(): GreeterConstructor {\n  return Math.random() >= 0.5 ? ThingA : ThingB;\n}\n\nclass Test extends getGreeterBase() {\n  sayHello() {\n    console.log(this.getGreeting());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Disabled noImplicitAny in TypeScript\nDESCRIPTION: Shows how TypeScript behaves when noImplicitAny is set to false, allowing variables without type annotations to implicitly become 'any' type without errors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noImplicitAny.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noImplicitAny: false\nfunction fn(s) {\n  // No error?\n  console.log(s.subtr(3));\n}\nfn(42);\n```\n\n----------------------------------------\n\nTITLE: New Utility Functions for Accessing Modifiers and Decorators\nDESCRIPTION: These function declarations show the new TypeScript APIs for safely accessing modifiers and decorators on AST nodes, replacing direct property access which is now deprecated.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction canHaveModifiers(node: Node): node is HasModifiers;\nfunction getModifiers(node: HasModifiers): readonly Modifier[] | undefined;\n\nfunction canHaveDecorators(node: Node): node is HasDecorators;\nfunction getDecorators(node: HasDecorators): readonly Decorator[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeRoots Configuration Example\nDESCRIPTION: Example of configuring typeRoots in tsconfig.json to properly resolve type definitions when using explicit typeRoots option, including both local and monorepo scenarios.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"types\": [\n            \"node\",\n            \"mocha\"\n        ],\n        \"typeRoots\": [\n            // Keep whatever you had around before.\n            \"./some-custom-types/\",\n            // You might need your local 'node_modules/@types'.\n            \"./node_modules/@types\",\n            // You might also need to specify a shared 'node_modules/@types'\n            // if you're using a \"monorepo\" layout.\n            \"../../node_modules/@types\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig for Declaration File Generation\nDESCRIPTION: TypeScript configuration file setup that enables .d.ts file generation from JavaScript files. Includes settings for allowing JS files, generating declarations, and controlling output location.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Creating DTS files From JS.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Change this to match your project\n  \"include\": [\"src/**/*\"],\n\n  \"compilerOptions\": {\n    // Tells TypeScript to read JS files, as\n    // normally they are ignored as source files\n    \"allowJs\": true,\n    // Generate d.ts files\n    \"declaration\": true,\n    // This compiler run should\n    // only output d.ts files\n    \"emitDeclarationOnly\": true,\n    // Types should go into this directory.\n    // Removing this would place the .d.ts files\n    // next to the .js files\n    \"outDir\": \"dist\",\n    // go to js file when using IDE functions like\n    // \"Go to Definition\" in VSCode\n    \"declarationMap\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML After DOM Manipulation\nDESCRIPTION: The HTML structure that results after the TypeScript code executes, showing the newly created paragraph element inside the app div.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <p>Hello, World!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Mapping in tsconfig.json\nDESCRIPTION: Sets up path mapping for module resolution, allowing custom module name to file path mappings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./node_modules\",\n    \"paths\": {\n      \"jquery\": [\"jquery/dist/jquery.slim.min\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Error Detection with Interfaces\nDESCRIPTION: Shows how TypeScript warns about property mismatches when an object doesn't conform to the defined interface.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for JS Programmers.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  name: string;\n  id: number;\n}\n\nconst user: User = {\n  username: \"Hayes\",\n  id: 0,\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unique Symbol Identity Separation in TypeScript\nDESCRIPTION: Shows that each unique symbol has a completely separate identity, making them non-comparable to each other. This example illustrates the type checking error when attempting to compare two unique symbols.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Symbols.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2367\nconst sym2 = Symbol();\nconst sym3 = Symbol();\n\nif (sym2 === sym3) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of TypeScript's Type Export Handling\nDESCRIPTION: Demonstrates the potential ambiguity in how TypeScript handles exports, where the behavior depends on whether the exported item is a value (like a class) or just a type (like an interface).\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/verbatimModuleSyntax.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { Car } from \"./car\";\n```\n\n----------------------------------------\n\nTITLE: Union Type Assignment Examples\nDESCRIPTION: Shows valid and invalid assignments to union types, demonstrating type checking behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar opts: RunOptions = /* ... */;\nopts.commandline = '-hello world'; // OK\nopts.commandline = ['-hello', 'world']; // OK\nopts.commandline = [42]; // Error, number is not string or string[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Options in tsconfig.json for TypeScript\nDESCRIPTION: This snippet demonstrates how to configure watch options in a tsconfig.json file. It includes settings for file and directory watching, polling, and exclusions to optimize the watch mode performance.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Configuring Watch.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Some typical compiler options\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"moduleResolution\": \"node\"\n    // ...\n  },\n\n  // NEW: Options for file/directory watching\n  \"watchOptions\": {\n    // Use native file system events for files and directories\n    \"watchFile\": \"useFsEvents\",\n    \"watchDirectory\": \"useFsEvents\",\n\n    // Poll files for updates more frequently\n    // when they're updated a lot.\n    \"fallbackPolling\": \"dynamicPriority\",\n\n    // Don't coalesce watch notification\n    \"synchronousWatchDirectory\": true,\n\n    // Finally, two additional settings for reducing the amount of possible\n    // files to track  work from these directories\n    \"excludeDirectories\": [\"**/node_modules\", \"_build\"],\n    \"excludeFiles\": [\"build/fileWhichChangesOften.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changes to decorators Property in AST Node Interface\nDESCRIPTION: This diff shows how the decorators property has been deprecated in TypeScript's AST nodes, now always returning undefined, as decorators are now included in the modifiers array.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n- readonly decorators?: NodeArray<Decorator> | undefined;\n+ /**\n+  * @deprecated ...\n+  * Use `ts.canHaveDecorators()` to test whether a `Node` can have decorators.\n+  * Use `ts.getDecorators()` to get the decorators of a `Node`.\n+  * ...\n+  */\n+ readonly decorators?: undefined;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Use of Delete Operator in TypeScript with strictNullChecks\nDESCRIPTION: This example shows the error that occurs when using the 'delete' operator on a non-optional property in strictNullChecks mode. The property 'prop' in interface 'Thing' is required, so deleting it produces error 2790.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2790\ninterface Thing {\n  prop: string;\n}\n\nfunction f(x: Thing) {\n  delete x.prop;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Array Concatenation\nDESCRIPTION: Simple JavaScript function that concatenates two arrays using spread operator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.0.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction concat(arr1, arr2) {\n  return [...arr1, ...arr2];\n}\n```\n\n----------------------------------------\n\nTITLE: Downleveled for/of Loop With importHelpers\nDESCRIPTION: Shows how to reduce inline JavaScript by using tslib via importHelpers when downlevelIteration is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @target: ES5\n// @downlevelIteration\n// @importHelpers\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output With inlineSources and inlineSourceMap Enabled\nDESCRIPTION: Demonstrates the JavaScript output when both inlineSources and inlineSourceMap options are enabled, which includes the source code within the sourcemap in a comment at the bottom of the file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/inlineSources.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: Creating Default Map for ES2015 in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a default map of TypeScript library files for ES2015. It includes functions to read library files from the local node_modules and add them to a Map object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getLib = (name: string) => {\n  const lib = dirname(require.resolve(\"typescript\"))\n  return readFileSync(join(lib, name), \"utf8\")\n}\n\nconst addLib = (name: string, map: Map<string, string>) => {\n  map.set(\"/\" + name, getLib(name))\n}\n\nconst createDefaultMap2015 = () => {\n  const fsMap = new Map<string, string>()\n  addLib(\"lib.es2015.d.ts\", fsMap)\n  addLib(\"lib.es2015.collection.d.ts\", fsMap)\n  addLib(\"lib.es2015.core.d.ts\", fsMap)\n  addLib(\"lib.es2015.generator.d.ts\", fsMap)\n  addLib(\"lib.es2015.iterable.d.ts\", fsMap)\n  addLib(\"lib.es2015.promise.d.ts\", fsMap)\n  addLib(\"lib.es2015.proxy.d.ts\", fsMap)\n  addLib(\"lib.es2015.reflect.d.ts\", fsMap)\n  addLib(\"lib.es2015.symbol.d.ts\", fsMap)\n  addLib(\"lib.es2015.symbol.wellknown.d.ts\", fsMap)\n  addLib(\"lib.es5.d.ts\", fsMap)\n  return fsMap\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for TypeScript Website\nDESCRIPTION: Command to start the development server for the TypeScript website using pnpm. This initiates a Gatsby development environment for local testing and development.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescriptlang-org/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Object Rest with Generic Type Breaking Change\nDESCRIPTION: Example demonstrating a breaking change in TypeScript 4.6 where object rest expressions now drop unspreadable members from generic objects, resulting in a more accurate type representation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nclass Thing {\n  someProperty = 42;\n\n  someMethod() {\n    // ...\n  }\n}\n\nfunction foo<T extends Thing>(x: T) {\n  let { someProperty, ...rest } = x;\n\n  // Used to work, is now an error!\n  // Property 'someMethod' does not exist on type 'Omit<T, \"someProperty\" | \"someMethod\">'.\n  rest.someMethod();\n}\n```\n\n----------------------------------------\n\nTITLE: Clean Module Import and Usage in TypeScript\nDESCRIPTION: Shows the cleaner import and usage pattern when consuming a properly structured module without unnecessary namespaces.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces and Modules.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as shapes from \"./shapes\";\nlet t = new shapes.Triangle();\n```\n\n----------------------------------------\n\nTITLE: Displaying Emitted JavaScript from TypeScript\nDESCRIPTION: Shows how TypeScript code is emitted to JavaScript with specific compiler options and helper functions for downlevel iteration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @target: ES5\n// @downleveliteration\n\n// --importHelpers on: Spread helper will be imported from 'tslib'\n\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Playground Plugin with Yarn\nDESCRIPTION: Command to bootstrap a new TypeScript playground plugin project using the template. This creates a new directory with the plugin scaffold code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/create-typescript-playground-plugin/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create typescript-playground-plugin playground-my-plugin\n```\n\n----------------------------------------\n\nTITLE: Release Notes Frontmatter Template\nDESCRIPTION: YAML frontmatter template for TypeScript release notes documentation, including version-specific metadata.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/New TypeScript Version.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: TypeScript 3.9\nlayout: docs\npermalink: /docs/handbook/release-notes/typescript-3-9.html\noneline: TypeScript 3.9 Release Notes\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for isolatedDeclarations Flag\nDESCRIPTION: YAML frontmatter defining the display name and one-line description of the isolatedDeclarations compiler option for TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/isolatedDeclarations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndisplay: \"isolatedDeclarations\"\noneline: \"Require sufficient annotation on exports so other tools can trivially generate declaration files.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Generated Declaration File with Consistent Type Representation\nDESCRIPTION: Shows one possible output for the declaration file where TypeScript uses a consistent canonical representation for each type, regardless of the original order.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const strBool: string | boolean;\nexport const boolStr: string | boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing Preact's JSX Factory\nDESCRIPTION: Example of importing Preact's JSX factory 'h' for use in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { h } from 'preact';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Import/Export Issues in JavaScript (TypeScript)\nDESCRIPTION: This snippet illustrates the issues with importing and exporting types in JavaScript files that will now cause errors in TypeScript 4.8. It shows how these operations can fail at runtime because types are not values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\n\n// Will fail at runtime because 'SomeType' is not a value.\nimport { someValue, SomeType } from \"some-module\";\n\n/**\n * @type {SomeType}\n */\nexport const myValue = someValue;\n\n/**\n * @typedef {string | number} MyType\n */\n\n// Will fail at runtime because 'MyType' is not a value.\nexport { MyType as MyExportedType };\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Base URL Configuration in TypeScript\nDESCRIPTION: An example directory structure showing the relationship between files when using baseUrl configuration option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/baseUrl.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproject\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure with Shell Commands\nDESCRIPTION: Shell commands to create the initial project directory structure with src and dist folders. The src folder will contain TypeScript source files, and the dist folder will contain the compiled JavaScript output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir proj\ncd proj\n```\n\n----------------------------------------\n\nTITLE: Exporting from a Module in TypeScript\nDESCRIPTION: This snippet demonstrates the difference between exporting from a module with and without a file extension. The example shows why using 'moduleResolution': 'bundler' can lead to compatibility issues in Node.js environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./utils\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./utils.js\";\n```\n\n----------------------------------------\n\nTITLE: NonNullable Type Implementation Change\nDESCRIPTION: Shows the simplified implementation of NonNullable type using intersection with {}.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- type NonNullable<T> = T extends null | undefined ? never : T;\n+ type NonNullable<T> = T & {};\n```\n\n----------------------------------------\n\nTITLE: Input Directory Structure Example\nDESCRIPTION: Example directory structure showing TypeScript project files before compilation\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDir.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reference Path in TypeScript Declaration Files\nDESCRIPTION: Example of an incorrect way to reference external declaration files using path references in TypeScript declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference path=\"../typescript/lib/typescriptServices.d.ts\" />\n....\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Output from react-jsx Before Optimization\nDESCRIPTION: The JavaScript code produced by TypeScript's react-jsx compilation mode before version 4.6. It includes an unnecessary void 0 argument that adds to bundle size.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const el = _jsx(\"div\", { children: \"foo\" }, void 0);\n```\n\n----------------------------------------\n\nTITLE: Successful TypeScript Import With allowJs\nDESCRIPTION: Demonstration of successful JavaScript file import after enabling the allowJs compiler option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowJs.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @allowJs\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n```\n\n----------------------------------------\n\nTITLE: Using Build Flags with TypeScript's --build Mode\nDESCRIPTION: Demonstrates how to use new emit-specific flags with TypeScript's --build mode for customizing build output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ntsc --build -p ./my-project-dir\n```\n\nLANGUAGE: shell\nCODE:\n```\ntsc --build -p ./my-project-dir --declaration\n```\n\n----------------------------------------\n\nTITLE: Incorrect Order for Multiple typesVersions Fields\nDESCRIPTION: Example showing incorrect ordering of typesVersions fields in package.json that could lead to unexpected behavior due to overlapping version ranges.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"package-name\",\n  \"version\": \"1.0\",\n  \"types\": \"./index.d.ts\",\n  \"typesVersions\": {\n    // NOTE: this doesn't work!\n    \">=3.1\": { \"*\": [\"ts3.1/*\"] },\n    \">=3.2\": { \"*\": [\"ts3.2/*\"] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating and Linting TSConfig Reference Codeblocks\nDESCRIPTION: Commands to validate codeblocks using twoslash, run the linter, or run a specific linter. The DEBUG environment variable can be set for additional debugging information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter=tsconfig-reference test\n\n# or to just run the linter without a build\npnpm run --filter=tsconfig-reference lint\n\n# or to just one one linter\npnpm run --filter=tsconfig-reference lint resolveJson\n```\n\n----------------------------------------\n\nTITLE: Type Inference for null, undefined, and Empty Array Initializers\nDESCRIPTION: Shows how variables, parameters, or properties initialized with null, undefined, or empty arrays are typed as any or any[] in JavaScript files, even with strict null checks enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo(i = null) {\n  if (!i) i = 1;\n  var j = undefined;\n  j = 2;\n  this.l = [];\n}\n\nvar foo = new Foo();\nfoo.l.push(foo.i);\nfoo.l.push(\"end\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeRoots in tsconfig.json\nDESCRIPTION: An example of how to specify custom type root directories in a TypeScript configuration file. This configuration includes packages from './typings' and './vendor/types' directories instead of the default './node_modules/@types'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/typeRoots.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./typings\", \"./vendor/types\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting from Relative Path with .js Extension\nDESCRIPTION: This snippet demonstrates the recommended way to export from a relative path using the .js extension. This approach ensures compatibility with both Node.js and bundler environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./utils.js\";\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases for Type Indexing in TypeScript\nDESCRIPTION: Demonstrates the workaround for the variable limitation by using type aliases. Type aliases can be used in place of direct string literals when indexing types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype key = \"age\";\ntype Age = Person[key];\n```\n\n----------------------------------------\n\nTITLE: None Module Output Example in TypeScript\nDESCRIPTION: Shows how TypeScript handles module syntax when the 'none' module option is specified, which doesn't use any module system.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @module: none\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Configuration in .csproj PropertyGroups\nDESCRIPTION: Example of setting TypeScript compiler options in a Visual Studio project file using PropertyGroup XML elements. This snippet shows how to configure TypeScript not to emit on error and to enforce strict return types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <TypeScriptNoEmitOnError>true</TypeScriptNoEmitOnError>\n  <TypeScriptNoImplicitReturns>true</TypeScriptNoImplicitReturns>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration Output with stripInternal Disabled\nDESCRIPTION: Shows the default behavior (stripInternal: false) where both the internal constant and public function appear in the generated declaration file, preserving all exports including those marked @internal.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/stripInternal.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Map from CDN in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a default map of TypeScript library files using the createDefaultMapFromCDN function. It fetches the files from a CDN and optionally caches them in localStorage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDefaultMapFromCDN } from \"@typescript/vfs\"\nimport ts from \"typescript\"\nimport lzstring from \"lz-string\"\n\nconst start = async () => {\n  const shouldCache = true\n  // This caches the lib files in the site's localStorage\n  const fsMap = await createDefaultMapFromCDN({ target: ts.ScriptTarget.ES2015 }, \"3.7.3\", shouldCache, ts)\n\n  // This stores the lib files as a zipped string to save space in the cache\n  const otherMap = await createDefaultMapFromCDN({ target: ts.ScriptTarget.ES2015 }, \"3.7.3\", shouldCache, ts, lzstring)\n\n  fsMap.set(\"index.ts\", \"const hello = 'hi'\")\n  // ...\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Extending TSConfig with Relative Paths\nDESCRIPTION: This JSON snippet demonstrates how a tsconfig.json file can extend a base configuration file using relative paths, which can lead to issues with path resolution.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"../../tsconfig.base.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"./dist\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ES Modules Export Example\nDESCRIPTION: A JavaScript module using ES Modules syntax to export a function, demonstrating the more modern export approach compared to CommonJS.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getArrayLength(arr) {\n  return arr.length;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function with Unchecked Property Access\nDESCRIPTION: Example of a function that assumes the presence of a property without type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn(x) {\n  return x.flip();\n}\n```\n\n----------------------------------------\n\nTITLE: Main TypeScript Configuration File\nDESCRIPTION: Contents of the main tsconfig.json file for the project, excluding test files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"outDir\": \"../dist\"\n    },\n    \"exclude\": [\"**/*.test.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example for Configuration File Handling\nDESCRIPTION: Illustrates a project structure with multiple tsconfig.json files for different purposes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nproject/\n├── src/\n│   ├── foo.ts\n│   ├── foo-test.ts\n│   ├── tsconfig.json\n│   └── tsconfig.test.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Basic Type Union Function Example\nDESCRIPTION: Demonstrates a function declaration with a union type parameter that hasn't been implemented yet.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(padding: number | string, input: string): string {\n  throw new Error(\"Not implemented yet!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Compiler Option in TSConfig\nDESCRIPTION: This snippet shows how to reference the 'skipDefaultLibCheck' option in a TypeScript configuration file. It's recommended to use 'skipLibCheck' instead for skipping type checking of default library declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/skipDefaultLibCheck.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"skipDefaultLibCheck\": true\n```\n\n----------------------------------------\n\nTITLE: Module Import Variations in TypeScript\nDESCRIPTION: Various ways to import a module in TypeScript and JavaScript, showing the flexibility of import syntaxes that a module might need to support.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst fastify = require(\"fastify\");\nconst { fastify } = require(\"fastify\");\nimport fastify = require(\"fastify\");\nimport * as Fastify from \"fastify\";\nimport { fastify, FastifyInstance } from \"fastify\";\nimport fastify from \"fastify\";\nimport fastify, { FastifyInstance } from \"fastify\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Files List in tsconfig.json\nDESCRIPTION: Demonstrates how to specify an explicit list of TypeScript files to be included in compilation using the 'files' property in tsconfig.json. This approach is useful for projects with a limited number of files that need to be compiled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/files.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {},\n  \"files\": [\n    \"core.ts\",\n    \"sys.ts\",\n    \"types.ts\",\n    \"scanner.ts\",\n    \"parser.ts\",\n    \"utilities.ts\",\n    \"binder.ts\",\n    \"checker.ts\",\n    \"tsc.ts\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping TypeScript MTS Files to JavaScript MJS Output\nDESCRIPTION: This diagram shows the compilation process for ECMAScript modules, mapping .mts input files to .mjs output files in a specific directory structure, illustrating module resolution in ESM context.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/diagrams/theory.md#2025-04-20_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Output files\n    dist/main.mjs\n    style dist/main.mjs stroke-dasharray: 5 5\n    dist/math.mjs\n    style dist/math.mjs stroke-dasharray: 5 5\n  end\n  subgraph Input files\n    src/main.mts\n    src/math.mts\n  end\n  src/main.mts -. Map to output .-> dist/main.mjs\n  dist/main.mjs -- \"#quot;./math.mjs#quot;\" --> dist/math.mjs\n  dist/math.mjs -. Map to input .-> src/math.mts\n```\n\n----------------------------------------\n\nTITLE: AMD Module Names Example\nDESCRIPTION: Demonstrates how to use the amd-module name tag for named AMD modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n///<amd-module name='NamedModule'/>\nexport class C {}\n```\n\n----------------------------------------\n\nTITLE: Handling Null with Type Guards\nDESCRIPTION: Shows a problematic implementation when dealing with null values in typeof checks.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Narrowing.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printAll(strs: string | string[] | null) {\n  if (typeof strs === \"object\") {\n    for (const s of strs) {\n      console.log(s);\n    }\n  } else if (typeof strs === \"string\") {\n    console.log(strs);\n  } else {\n    // do nothing\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Mixin Pattern Using Runtime Merging in TypeScript\nDESCRIPTION: Demonstrates an alternative mixin approach that separates runtime and type hierarchies, then merges them using a utility function. This pattern relies less on compiler support and more on manual synchronization between runtime and type system.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @strict: false\n// Each mixin is a traditional ES class\nclass Jumpable {\n  jump() {}\n}\n\nclass Duckable {\n  duck() {}\n}\n\n// Including the base\nclass Sprite {\n  x = 0;\n  y = 0;\n}\n\n// Then you create an interface which merges\n// the expected mixins with the same name as your base\ninterface Sprite extends Jumpable, Duckable {}\n// Apply the mixins into the base class via\n// the JS at runtime\napplyMixins(Sprite, [Jumpable, Duckable]);\n\nlet player = new Sprite();\nplayer.jump();\nconsole.log(player.x, player.y);\n\n// This can live anywhere in your codebase:\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: File Handling with Using Declaration in TypeScript\nDESCRIPTION: This example shows how to use the 'using' declaration for file handling. It ensures that the file is properly disposed of, even if an error is thrown.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  using file = await openFile();\n  file.write(text);\n  doSomethingThatMayThrow();\n} // `file` is disposed, even if an error is thrown\n```\n\n----------------------------------------\n\nTITLE: Configuring rootDirs in tsconfig.json\nDESCRIPTION: Specifies multiple root directories that are combined to form a virtual directory structure for module resolution.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src/views\", \"generated/templates/views\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion in TypeScript\nDESCRIPTION: Example showing how to write a type assertion in TypeScript using angle brackets, which isn't allowed in TSX files due to syntax conflicts with JSX.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst foo = <Foo>bar;\n```\n\n----------------------------------------\n\nTITLE: Installing Terser with Gulp dependencies\nDESCRIPTION: Command to install Terser along with vinyl-buffer and gulp-sourcemaps to preserve sourcemaps during minification.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev gulp-terser vinyl-buffer gulp-sourcemaps\n```\n\n----------------------------------------\n\nTITLE: Setting Up Internationalization in a React Component using TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up internationalization within a React component. It uses 'useIntl()' hook and creates a typed international function for accessing localized strings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/How i18n Works For Site Copy.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = {\n  data: CommunityPageQuery\n  pageContext: any\n}\n\nexport const Comm: React.FC<Props> = props => {\n  const intl = useIntl()\n  const i = createInternational<typeof comCopy>(intl)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Result of 'Remove Unused Imports' Command in TypeScript\nDESCRIPTION: Shows how the new 'Remove Unused Imports' command in TypeScript 4.9 removes unused import names and statements while preserving their relative ordering.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Moose, HoneyBadger } from \"./zoo\";\nimport { foo } from \"./helper\";\n\nlet x: Moose | HoneyBadger = foo();\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure Without rootDir\nDESCRIPTION: Example directory structure showing compiled output when rootDir is inferred to be 'core/'\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDir.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyProj\n├── dist\n│   ├── a.js\n│   ├── b.js\n│   ├── sub\n│   │   ├── c.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous Watch Directory in tsconfig.json\nDESCRIPTION: Sets up synchronous directory watching in TypeScript by enabling the synchronousWatchDirectory option in the watchOptions configuration. This setting ensures that callbacks are called synchronously without waiting for potential multiple file edits.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/synchronousWatchDirectory.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"watchOptions\": {\n    \"synchronousWatchDirectory\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring with Default Value in TypeScript\nDESCRIPTION: Shows array destructuring syntax with a default value for array elements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvar [x, y, z = 10] = getSomeArray();\n```\n\n----------------------------------------\n\nTITLE: Configuring paths in tsconfig.json that may fail at runtime\nDESCRIPTION: This example demonstrates how paths configuration in TypeScript does not affect emit, which can lead to code that compiles in TypeScript but fails at runtime in Node.js.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"nodenext\",\n    \"paths\": {\n      \"node-has-no-idea-what-this-is\": [\"./oops.ts\"]\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript: ✅\n// Node.js: 💥\nimport {} from \"node-has-no-idea-what-this-is\";\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing TypeScript Sandbox with Monaco Editor\nDESCRIPTION: This HTML snippet demonstrates how to set up the TypeScript Sandbox using the Monaco editor. It includes loading the necessary scripts, configuring paths for Monaco and the sandbox, and initializing the sandbox with custom TypeScript code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  <div id=\"loader\">Loading...</div>\n  <div id=\"monaco-editor-embed\" style=\"height: 800px;\" />\n  <script>\n    // First set up the VSCode loader in a script tag\n    const getLoaderScript = document.createElement(\"script\")\n    getLoaderScript.src = \"https://www.typescriptlang.org/js/vs.loader.js\"\n    getLoaderScript.async = true\n    getLoaderScript.onload = () => {\n      // Now the loader is ready, tell require where it can get the version of monaco, and the sandbox\n      // This version uses the latest version of the sandbox, which is used on the TypeScript website\n\n      // For the monaco version you can use unpkg or the TypeScript web infra CDN\n      // You can see the available releases for TypeScript here:\n      // https://playgroundcdn.typescriptlang.org/indexes/releases.json\n      //\n      require.config({\n        paths: {\n          vs: \"https://playgroundcdn.typescriptlang.org/cdn/4.0.5/monaco/min/vs\",\n          // vs: 'https://unpkg.com/@typescript-deploys/monaco-editor@4.0.5/min/vs',\n          sandbox: \"https://www.typescriptlang.org/js/sandbox\",\n        },\n        // This is something you need for monaco to work\n        ignoreDuplicateModules: [\"vs/editor/editor.main\"],\n      })\n\n      // Grab a copy of monaco, TypeScript and the sandbox\n      require([\"vs/editor/editor.main\", \"vs/language/typescript/tsWorker\", \"sandbox/index\"], (\n        main,\n        _tsWorker,\n        sandboxFactory\n      ) => {\n        const initialCode = `import {markdown, danger} from \"danger\"\n\nexport default async function () {\n    // Check for new @types in devDependencies\n    const packageJSONDiff = await danger.git.JSONDiffForFile(\"package.json\")\n    const newDeps = packageJSONDiff.devDependencies.added\n    const newTypesDeps = newDeps?.filter(d => d.includes(\"@types\")) ?? []\n    if (newTypesDeps.length){\n        markdown(\"Added new types packages \" + newTypesDeps.join(\", \"))\n    }\n}`\n\n        const isOK = main && window.ts && sandboxFactory\n        if (isOK) {\n          document.getElementById(\"loader\").parentNode.removeChild(document.getElementById(\"loader\"))\n        } else {\n          console.error(\"Could not get all the dependencies of sandbox set up!\")\n          console.error(\"main\", !!main, \"ts\", !!window.ts, \"sandbox\", !!sandbox)\n          return\n        }\n\n        // Create a sandbox and embed it into the div #monaco-editor-embed\n        const sandboxConfig = {\n          text: initialCode,\n          compilerOptions: {},\n          domID: \"monaco-editor-embed\",\n        }\n\n        const sandbox = sandboxFactory.createTypeScriptSandbox(sandboxConfig, main, window.ts)\n        sandbox.editor.focus()\n      })\n    }\n\n    document.body.appendChild(getLoaderScript)\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Twoslash Query Examples\nDESCRIPTION: Shows how to use the query engine in Twoslash to get type information at multiple points within the same file using the ^? marker.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = \"123\"\n//    ^?\nconst b = \"345\"\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Shadowing with let in TypeScript\nDESCRIPTION: This snippet illustrates how let allows variable shadowing in nested scopes, which can be useful in certain scenarios but should be used carefully.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(condition, x) {\n  if (condition) {\n    let x = 100;\n    return x;\n  }\n\n  return x;\n}\n\nf(false, 0); // returns '0'\nf(true, 0); // returns '100'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sumMatrix(matrix: number[][]) {\n  let sum = 0;\n  for (let i = 0; i < matrix.length; i++) {\n    var currentRow = matrix[i];\n    for (let i = 0; i < currentRow.length; i++) {\n      sum += currentRow[i];\n    }\n  }\n\n  return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterator Interface Definition with Type Parameters\nDESCRIPTION: Defines the updated Iterator interface with support for yield, return, and next type parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.6.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Iterator<T, TReturn = any, TNext = undefined> {\n  // Takes either 0 or 1 arguments - doesn't accept 'undefined'\n  next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\n  return?(value?: TReturn): IteratorResult<T, TReturn>;\n  throw?(e?: any): IteratorResult<T, TReturn>;\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Redeclaration Error in JavaScript\nDESCRIPTION: Example of a JavaScript error that TypeScript now detects even without checkJs or @ts-check, showing const variable redeclaration in the same scope.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst foo = 1234;\n//    ~~~\n// error: Cannot redeclare block-scoped variable 'foo'.\n\n// ...\n\nconst foo = 5678;\n//    ~~~\n// error: Cannot redeclare block-scoped variable 'foo'.\n```\n\n----------------------------------------\n\nTITLE: Accessing CommonJS Exports in Bundlers\nDESCRIPTION: Shows how default exports are accessed in bundlers or transpiled ESM environments without requiring the .default property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from \"pkg\";\npkg();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Initialization Command\nDESCRIPTION: Command for bootstrapping a new TSConfig file from scratch using the TypeScript compiler.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/intro.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsc --init\n```\n\n----------------------------------------\n\nTITLE: Setting up rootDirs for Non-Code Source Files\nDESCRIPTION: This example shows how to configure rootDirs to provide type information for non-code files like CSS. By including both 'src' and 'generated' directories, TypeScript can resolve imports between source files and their generated declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDirs.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src\", \"generated\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing reflect-metadata library using npm\nDESCRIPTION: Command to install the reflect-metadata library via npm, which adds a polyfill for an experimental metadata API.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm i reflect-metadata --save\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions via NPM\nDESCRIPTION: Command for installing TypeScript type definitions for React from the @types repository using npm.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Declarations.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @types/react\n```\n\n----------------------------------------\n\nTITLE: Open-Ended Object Literals in JavaScript\nDESCRIPTION: Demonstrates how object literals in JavaScript files have an open-ended type, allowing addition of new properties not originally specified. This behavior can be changed using JSDoc type annotations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = { a: 1 };\nobj.b = 2; // Allowed\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @checkJs\n// @errors: 2339\n/** @type {{a: number}} */\nvar obj = { a: 1 };\nobj.b = 2;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output After Inlining const enum Values\nDESCRIPTION: The JavaScript output after TypeScript replaces const enum references with their literal values. This inlining behavior requires knowledge of the full type system, which is not available to single-file transpilers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/isolatedModules.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(0 + 1);\n```\n\n----------------------------------------\n\nTITLE: Creating Default Map from Node Modules in TypeScript\nDESCRIPTION: This snippet shows how to create a default map of TypeScript library files using the createDefaultMapFromNodeModules function from @typescript/vfs. It uses the local TypeScript installation to populate the map.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescript-vfs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDefaultMapFromNodeModules } from \"@typescript/vfs\"\nimport ts from \"typescript\"\n\nconst fsMap = createDefaultMapFromNodeModules({ target: ts.ScriptTarget.ES2015 })\nfsMap.set(\"index.ts\", \"const hello = 'hi'\")\n// ...\n```\n\n----------------------------------------\n\nTITLE: Readonly Mapped Type Modifiers in TypeScript 3.4\nDESCRIPTION: Illustrates how the 'readonly' modifier in mapped types automatically converts array-like types to their readonly counterparts in TypeScript 3.4.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.4.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Readonly<T> = {\n  readonly [K in keyof T]: T[K];\n};\n\n// readonly number[]\ntype B = Readonly<number[]>;\n\n// readonly [string, boolean]\ntype C = Readonly<[string, boolean]>;\n```\n\n----------------------------------------\n\nTITLE: Sequential Property Assignment in JavaScript\nDESCRIPTION: A JavaScript pattern where an empty object is created first and properties are added sequentially. This is a common pattern in JavaScript but causes type errors in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nvar options = {};\noptions.color = \"red\";\noptions.volume = 11;\n```\n\n----------------------------------------\n\nTITLE: Generic Class Factory Function\nDESCRIPTION: Creates a simple factory function that can instantiate any class type using generics.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create<T>(c: { new (): T }): T {\n  return new c();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Namespace in TypeScript Compiler Options\nDESCRIPTION: This snippet demonstrates how to configure the 'React Namespace' compiler option in TypeScript. It's used to specify the object invoked for createElement when targeting React for TSX files. However, the documentation recommends using jsxFactory instead.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/reactNamespace.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"reactNamespace\": \"React\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with BigInt Primitive in TypeScript\nDESCRIPTION: This snippet demonstrates two ways to create BigInt values in TypeScript: using the BigInt() function and using the literal syntax with the 'n' suffix. Requires ES2020 target or newer.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// @target: es2020\n\n// Creating a bigint via the BigInt function\nconst oneHundred: bigint = BigInt(100);\n\n// Creating a BigInt via the literal syntax\nconst anotherHundred: bigint = 100n;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Example without allowSyntheticDefaultImports\nDESCRIPTION: Illustrates a TypeScript error that occurs when trying to use default import syntax on a module without a default export, when 'allowSyntheticDefaultImports' is not enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowSyntheticDefaultImports.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 1259 1192\n// @checkJs\n// @allowJs\n// @esModuleInterop: false\n// @filename: utilFunctions.js\n// @noImplicitAny: false\nconst getStringLength = (str) => str.length;\n\nmodule.exports = {\n  getStringLength,\n};\n\n// @filename: index.ts\nimport utils from \"./utilFunctions\";\n\nconst count = utils.getStringLength(\"Check JS\");\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Output with noEmitHelpers Flag\nDESCRIPTION: The JavaScript output when the async function is compiled to ES5 with the noEmitHelpers flag enabled. This option prevents the generation of helper functions, assuming they are provided globally.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noEmitHelpers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @target: ES5\n// @noEmitHelpers\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Generated Source Map JSON Structure\nDESCRIPTION: The JSON structure of the generated source map file that maps the JavaScript code back to the original TypeScript source.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/sourceMap.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// helloWorld.js.map\n{\n  \"version\": 3,\n  \"file\": \"ex.js\",\n  \"sourceRoot\": \"\",\n  \"sources\": [\"../ex.ts\"],\n  \"names\": [],\n  \"mappings\": \";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Result of 'Sort Imports' Command in TypeScript\nDESCRIPTION: Shows how the 'Sort Imports' command transforms imports by sorting them alphabetically without removing unused imports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.9.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bar, foo } from \"./helper\";\nimport { HoneyBadger, Moose, Zebra } from \"./zoo\";\n\nlet x: Moose | HoneyBadger = foo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Compilation With outDir\nDESCRIPTION: This shell command example shows how compiled files are placed in a 'dist' directory when outDir is specified in tsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/outDir.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ tsc\n\nexample\n├── dist\n│   └── index.js\n├── index.ts\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Global Plugin TypeScript Declaration Template\nDESCRIPTION: Template for declaring types for a global plugin that extends built-in types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This template shows how to write a global plugin. */\n\n/*~ Write a declaration for the original type and add new members.\n *~ For example, this adds a 'toBinaryString' method with overloads to\n *~ the built-in number type.\n */\ninterface Number {\n  toBinaryString(opts?: MyLibrary.BinaryFormatOptions): string;\n\n  toBinaryString(\n    callback: MyLibrary.BinaryFormatCallback,\n    opts?: MyLibrary.BinaryFormatOptions\n  ): string;\n}\n\n/*~ If you need to declare several types, place them inside a namespace\n *~ to avoid adding too many things to the global namespace.\n */\ndeclare namespace MyLibrary {\n  type BinaryFormatCallback = (n: number) => string;\n  interface BinaryFormatOptions {\n    prefix?: string;\n    padding: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AMD Dependency Declaration in TypeScript\nDESCRIPTION: Demonstrates the deprecated AMD dependency directive usage with a named dependency, showing how to declare external module dependencies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <amd-dependency path=\"legacy/moduleA\" name=\"moduleA\"/>\ndeclare var moduleA: MyType;\nmoduleA.callStuff();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Return Type Error with Generic Functions\nDESCRIPTION: This snippet shows why TypeScript can't simply narrow from the constraint type - it would cause return type errors. This example illustrates the challenge that TypeScript 4.3's improved generic narrowing solves.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeUnique<T>(\n  collection: Set<T> | T[],\n  comparer: (x: T, y: T) => number\n): Set<T> | T[] {\n  // Early bail-out if we have a Set.\n  // We assume the elements are already unique.\n  if (collection instanceof Set) {\n    return collection;\n    //     ~~~~~~~~~~\n    // error: Type 'Set<T>' is not assignable to type 'C'.\n    //          'Set<T>' is assignable to the constraint of type 'C', but\n    //          'C' could be instantiated with a different subtype of constraint 'Set<T> | T[]'.\n  }\n\n  // ...\n\n  return collection;\n  //     ~~~~~~~~~~\n  // error: Type 'T[]' is not assignable to type 'C'.\n  //          'T[]' is assignable to the constraint of type 'C', but\n  //          'C' could be instantiated with a different subtype of constraint 'Set<T> | T[]'.\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Decorator Placement Options in JavaScript\nDESCRIPTION: Shows the valid and invalid ways to place decorators in relation to export statements. Decorators can be placed before or after export keywords, but not both simultaneously.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ allowed\n@register export default class Foo {\n    // ...\n}\n\n// ✅ also allowed\nexport default @register class Bar {\n    // ...\n}\n\n// ❌ error - before *and* after is not allowed\n@before export @after class Bar {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Twoslash with cut-after in Code Samples\nDESCRIPTION: Example of using the // ---cut-after--- feature in TypeScript Twoslash to specify content that should not be displayed after a certain point in the rendered code sample.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts twoslash\nconst Page = () => (\n// ---cut---\n<Container>\n  <ImportantComponent />\n</Container>\n// ---cut-after---\n)\n```\n```\n\n----------------------------------------\n\nTITLE: JSDoc @see Tag Usage Example\nDESCRIPTION: Demonstrates the enhanced editor support for JSDoc @see tags with go-to-definition functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: first.ts\nexport class C {}\n\n// @filename: main.ts\nimport * as first from \"./first\";\n\n/**\n * @see first.C\n */\nfunction related() {}\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup with try/finally in TypeScript\nDESCRIPTION: An improved approach using try/finally blocks to ensure resources are cleaned up even when exceptions occur, but this adds complexity and visual noise to the code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function doSomeWork() {\n    const path = \".some_temp_file\";\n    const file = fs.openSync(path, \"w+\");\n\n    try {\n        // use file...\n\n        if (someCondition()) {\n            // do some more work...\n            return;\n        }\n    }\n    finally {\n        // Close the file and delete it.\n        fs.closeSync(file);\n        fs.unlinkSync(path);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Library Function Attached to Window Object\nDESCRIPTION: Shows how a global library function can be attached to the window object in JavaScript, making it globally accessible in browser environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global.d.ts.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.createGreeting = function (s) {\n  return \"Hello, \" + s;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Environment-Specific URLs in TypeScript Playground Plugin\nDESCRIPTION: Code sample showing how to handle staging vs production environments by detecting localhost and using different URLs accordingly. This example loads a CSS file from the local server during development or from unpkg in production.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/create-typescript-playground-plugin/template/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst isDev = document.location.host.includes(\"localhost\")\nconst unpkgURL = \"https://unpkg.com/typescript-playground-presentation-mode@latest/dist/slideshow.css\"\nconst cssHref = isDev ? \"http://localhost:5000/slideshow.css\" : unpkgURL\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Syntax in JavaScript with @ts-check\nDESCRIPTION: Shows the new type assertion syntax for plain JavaScript files using JSDoc comments. Allows type assertions through @type annotations followed by parenthesized expressions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.5.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar x = /** @type {SomeType} */ AnyParenthesizedExpression;\n```\n\n----------------------------------------\n\nTITLE: Including a Global Library via HTML Script Tag\nDESCRIPTION: Shows how to include a global library in an HTML file using a script tag, which is a common method for using global libraries in web pages.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://a.great.cdn.for/someLib.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Example URL with TypeScript Version Parameter in Markdown\nDESCRIPTION: Shows a specific example of how the URL would look when setting the TypeScript version to 4.3.5 in the Playground.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/TypeScript Versions.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`?ts=4.3.5`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Query Parameters for TypeScript Playground Configuration\nDESCRIPTION: Examples of URL query parameters used to configure the TypeScript Playground, including setting the TypeScript version, compiler flags, and file type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `?ts=3.9.2` - Sets the TypeScript version, the list of supported versions is in these [two](https://playgroundcdn.typescriptlang.org/indexes/pre-releases.json) [json](https://playgroundcdn.typescriptlang.org/indexes/releases.json) files.\n\n  There are two special cases for the `ts` option:\n\n  - `ts=next`: Use the most recent [nightly build](https://www.typescriptlang.org/docs/handbook/nightly-builds.html).\n  - `ts=dev`: Use your [local developer's build of TypeScript](https://github.com/microsoft/TypeScript/blob/main/scripts/createPlaygroundBuild.js)\n\n- `?flag=value` - Any compiler flag referenced in can be set from a query\n- `?filetype=js|ts|dts` - Tells the Playground to set the editor's type\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Import Exclusion for Lodash Deep Imports\nDESCRIPTION: JSON configuration for Visual Studio Code that excludes deep imports from the lodash package using regular expressions. This prevents TypeScript from suggesting auto-imports from paths within the lodash package.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\n        \"^lodash/.*$\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Any-Type Identity Function in TypeScript\nDESCRIPTION: An identity function using the 'any' type that accepts and returns any type of argument. This approach is flexible but loses type information during function execution.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity(arg: any): any {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Aliases Definition\nDESCRIPTION: Demonstrates how to create and use type aliases in TypeScript for complex types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for Functional Programmers.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype Size = [number, number];\nlet x: Size = [101.1, 999.9];\n```\n\n----------------------------------------\n\nTITLE: Defining Configurable Decorator Function in TypeScript\nDESCRIPTION: This snippet shows the function declaration for the '@configurable' decorator. It returns a function that modifies the configurable property of the PropertyDescriptor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction configurable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.configurable = value;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic ESM Import in Declaration Files\nDESCRIPTION: Example of a problematic declaration file that only works with esModuleInterop enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: /node_modules/dependency/index.d.ts\nimport express from \"express\";\ndeclare function doSomething(req: express.Request): any;\nexport = doSomething;\n```\n\n----------------------------------------\n\nTITLE: Configuring mapRoot in tsconfig.json\nDESCRIPTION: Example showing how to set up mapRoot in TypeScript configuration to specify a custom URL location for source map files. This allows debuggers to locate source maps at a different location than the generated JavaScript files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/mapRoot.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"mapRoot\": \"https://my-website.com/debug/sourcemaps/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing with Preserve Symlinks in TypeScript\nDESCRIPTION: Demonstrates how the 'preserveSymlinks' option affects module imports and reference directives in TypeScript. When enabled, paths are resolved relative to the symlink file location rather than the resolved path.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/preserveSymlinks.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someModule } from 'package';\n/// <reference type=\"some-types\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Parameter for TypeScript Version in Markdown\nDESCRIPTION: Illustrates how to specify a TypeScript version in the Playground URL using a query parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/TypeScript Versions.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`?ts=[version]`\n```\n\n----------------------------------------\n\nTITLE: Installing Watchify and Fancy-log Dependencies\nDESCRIPTION: Shell command to install Watchify for continuous compilation and fancy-log for better console output during development.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev watchify fancy-log\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Suppression in JavaScript\nDESCRIPTION: Demonstrates how to suppress specific TypeScript errors in JavaScript using @ts-expect-error comment directive while maintaining type checking for the rest of the file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/Intro to JS with TS.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n/** @type {number} */\nvar x;\n\nx = 0; // OK\n// @ts-expect-error\nx = false; // Not OK\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Without Generic Type Parameter\nDESCRIPTION: Shows the simpler version of the greet function that doesn't use an unnecessary generic type parameter.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/More on Functions.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(s: string) {\n  console.log(\"Hello, \" + s);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Plugin Development Server\nDESCRIPTION: Command to start the local development server for the plugin, which allows connecting to it from the TypeScript Playground.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/create-typescript-playground-plugin/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Function Export Examples with Namespace Merging\nDESCRIPTION: Shows how TypeScript handles function exports with and without namespace declarations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function $(selector: string): any;\nexport = $; // Cannot `import *` this 👍\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace $ {}\ndeclare function $(selector: string): any;\nexport = $; // Allowed to `import *` this and call it 😱\n```\n\n----------------------------------------\n\nTITLE: Transforming Multi-File TypeScript Code\nDESCRIPTION: Demonstrates how a multi-file TypeScript code snippet is transformed and displayed with additional metadata. It includes a React component and its usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: Component.tsx\nimport React from \"react\"\n\nexport function Hello() {\n  return (\n    <div>\n      <h1>Hello World</h1>\n    </div>\n  )\n}\n\n// @filename: index.ts\nimport { Hello } from \"./Component\"\nconsole.log(Hello)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Twoslash Completions Example\nDESCRIPTION: Demonstrates how to request code completions at a specific point in a TypeScript file using the ^? marker, which returns TypeScript's completion suggestions at that position.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myString = \"\"\nmyString.s\n//       ^?\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @typescript/sandbox v0.1.4\nDESCRIPTION: Shows the patch changes for version 0.1.4, which includes an update to the @typescript/vfs dependency.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.4\n\n### Patch Changes\n\n- Updated dependencies [642ea11]\n  - @typescript/vfs@1.5.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio 2013 for TypeScript Nightly Build\nDESCRIPTION: This PowerShell command configures Visual Studio 2013 to use the installed nightly build of TypeScript. It uses the VSDevMode.ps1 script to set up the custom language service.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/Nightly Builds.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nVSDevMode.ps1 12 -tsScript <path to your folder>/node_modules/typescript/lib\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Layer Example\nDESCRIPTION: Demonstrates TypeScript-specific type syntax that must be removed before runtime execution, showing the type annotation that exists only in the type layer\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/types-vs-runtime.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst hello: string = \"Hello world\";\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Sharing Playground URL in Markdown\nDESCRIPTION: Demonstrates the keyboard shortcut for sharing the TypeScript Playground URL. This snippet shows how to use the cmd/ctrl + s key combination to copy the sharable URL.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Settings Panel.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>cmd/ctrl</kbd> + <kbd>s</kbd>\n```\n\n----------------------------------------\n\nTITLE: Running Gulp with Multiple Files\nDESCRIPTION: Shell commands to run Gulp to compile the TypeScript files with modules and test the output with Node.js.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngulp\nnode dist/main.js\n```\n\n----------------------------------------\n\nTITLE: Invalid Namespaces in Non-Module Files with isolatedModules\nDESCRIPTION: When isolatedModules is enabled, namespaces are only allowed in module files (files with imports or exports). This example shows the error that occurs when defining a namespace in a non-module file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/isolatedModules.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 1277\n// @isolatedModules\nnamespace Instantiated {\n export const x = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Import in TypeScript\nDESCRIPTION: This snippet shows how TypeScript previously allowed potentially unsafe imports when assuming everything behaved like CommonJS. It demonstrates the problem that arises when importing from a module that could be either CommonJS or ECMAScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// node_modules/dep/index.d.ts\nexport declare function doSomething(): void;\n\n// index.ts\n// Okay if \"dep\" is a CommonJS module, but fails if\n// it's an ECMAScript module - even in bundlers!\nimport dep from \"dep\";\ndep.doSomething();\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Page for Browser Display\nDESCRIPTION: An HTML file (index.html) that includes a paragraph element for displaying the greeting and a script tag to load the bundled JavaScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <p id=\"greeting\">Loading ...</p>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Base Module Type Definitions\nDESCRIPTION: Type definitions for the base module 'super-greeter'. It exports a function with multiple overloads using an interface to specify the function signatures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/*~ This example shows how to have multiple overloads for your function */\nexport interface GreeterFunction {\n  (name: string): void\n  (time: number): void\n}\n\n/*~ This example shows how to export a function specified by an interface */\nexport const greeter: GreeterFunction;\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Validators Implementation\nDESCRIPTION: Demonstrates basic string validators implementation using TypeScript interfaces and classes without namespaces\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringValidator {\n  isAcceptable(s: string): boolean;\n}\n\nlet lettersRegexp = /^[A-Za-z]+$/;\nlet numberRegexp = /^[0-9]+$/;\n\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return lettersRegexp.test(s);\n  }\n}\n\nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return s.length === 5 && numberRegexp.test(s);\n  }\n}\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: StringValidator } = {};\nvalidators[\"ZIP code\"] = new ZipCodeValidator();\nvalidators[\"Letters only\"] = new LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    let isMatch = validators[name].isAcceptable(s);\n    console.log(`'${s}' ${isMatch ? \"matches\" : \"does not match\"} '${name}'.`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Hash Syntax for TypeScript Playground\nDESCRIPTION: Examples of different URL hash parameters used to customize the TypeScript Playground, including setting the code content and triggering specific actions on load.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `#code/PRA` - A base64 and zipped version of the code which should live in the editor\n- `#src=The%20code` - URLEncoded way to have the code for the editor\n- `#example/generic-functions` - Grab the code from an example with the id generic-functions\n\nOr to trigger some action by default:\n\n- `#show-examples` - When the app is loaded, show the examples popover\n- `#show-whatisnew` - When the app is loaded, show the examples popover\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Returning Metadata Object\nDESCRIPTION: A JavaScript function that returns a metadata object about an array, demonstrating a case where TypeScript types would be useful for describing the structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getArrayMetadata(arr) {\n  return {\n    length: getArrayLength(arr),\n    firstObject: arr[0],\n  };\n}\n\nmodule.exports = {\n  getArrayMetadata,\n};\n```\n\n----------------------------------------\n\nTITLE: Unit Test with Type Error Example\nDESCRIPTION: Demonstrates a test case that intentionally passes wrong types to trigger runtime assertions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(() => {\n  doStuff(123, 456);\n}).toThrow();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inconsistent Exports in Merged Declarations in TypeScript\nDESCRIPTION: This example shows a problematic case where a function named 'replaceInFile' is exported but its merged namespace declaration is not exported within an ambient module context. TypeScript now correctly identifies this inconsistency.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'replace-in-file' {\n    export function replaceInFile(config: unknown): Promise<unknown[]>;\n    export {};\n\n    namespace replaceInFile {\n        export function sync(config: unknown): unknown[];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express.js Server for Static Content Hosting in Azure App Service\nDESCRIPTION: This snippet sets up a basic Express.js server to host static files from a 'public' directory. It listens on the port specified by the environment or defaults to 8080, making it suitable for deployment to Azure App Service.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/serve/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'public')));\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Alias Definition (TypeScript)\nDESCRIPTION: Illustrates that 'undefined' can no longer be used as a type alias name in TypeScript 5.5, consistent with other built-in types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Now also illegal\ntype undefined = any;\n```\n\n----------------------------------------\n\nTITLE: Using Multiple typesVersions Fields in package.json\nDESCRIPTION: Example of using multiple typesVersions fields in package.json to support different TypeScript versions with specific type definitions, showing the importance of field order.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"package-name\",\n  \"version\": \"1.0\",\n  \"types\": \"./index.d.ts\",\n  \"typesVersions\": {\n    \">=3.2\": { \"*\": [\"ts3.2/*\"] },\n    \">=3.1\": { \"*\": [\"ts3.1/*\"] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser Local Storage Reference\nDESCRIPTION: Reference to browser localStorage usage for tracking read examples in the TypeScript Playground\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Examples.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlocalStorage\n```\n\n----------------------------------------\n\nTITLE: Running Tests for TypeScript Website Project\nDESCRIPTION: Runs Jest in interactive watch mode. By default, only tests related to files changed since the last commit will be executed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Babel in tsconfig.json\nDESCRIPTION: TypeScript configuration to target ES2015, allowing Babel to handle the transformation to ES5, with noImplicitAny enabled for type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"src/main.ts\"],\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"target\": \"es2015\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using and Await Using in For Loops in TypeScript\nDESCRIPTION: This example demonstrates how to use 'using' and 'await using' declarations in for loops and for..of statements. It shows how resources are managed throughout the loop iterations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nfor (using x = getReader(); !x.eof; x.next()) {\n  // ...\n}\n\nfunction * g() {\n  yield createResource1();\n  yield createResource2();\n}\n\nfor (using x of g()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Errors with @ts-ignore Comments in TypeScript\nDESCRIPTION: Demonstrates how to use // @ts-ignore comments to suppress specific errors in TypeScript files. This feature allows ignoring errors on the following line.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // @ts-ignore: Unreachable code error\n  console.log(\"hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using the NoInfer Utility Type in TypeScript 5.4\nDESCRIPTION: This example demonstrates the use of the new NoInfer utility type in TypeScript 5.4 to prevent undesired type inference in generic functions.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.4.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createStreetLight<C extends string>(colors: C[], defaultColor?: NoInfer<C>) {\n    // ...\n}\n\ncreateStreetLight([\"red\", \"yellow\", \"green\"], \"blue\");\n//                                            ~~~~~~\n// error!\n// Argument of type '\"blue\"' is not assignable to parameter of type '\"red\" | \"yellow\" | \"green\" | undefined'.\n```\n\n----------------------------------------\n\nTITLE: Using @author in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @author tag to specify the author of an item in TypeScript. It includes the author's name and email address.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Welcome to awesome.ts\n * @author Ian Awesome <i.am.awesome@example.com>\n */\n```\n\n----------------------------------------\n\nTITLE: Basic Example of @internal Usage in TypeScript\nDESCRIPTION: Demonstrates a module with an internal constant and a public function that uses it. The @internal JSDoc comment marks daysInAWeek as internal API that might be hidden in declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/stripInternal.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript to Disable Filename Based Type Acquisition\nDESCRIPTION: This JSON configuration disables TypeScript's automatic type acquisition based on filenames. When set to true, TypeScript will no longer infer and download type definitions (like those from DefinitelyTyped) based on filenames such as 'jquery.js' in your project.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/disableFilenameBasedTypeAcquisition.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"disableFilenameBasedTypeAcquisition\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Side-Effect Import in TypeScript\nDESCRIPTION: This snippet shows how to import a file for its side effects without including any variables in the current module. This can trigger side effects that affect other objects.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Modules.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./maths.js\";\n\nconsole.log(\"3.14\");\n```\n\n----------------------------------------\n\nTITLE: Transpiled CommonJS Equivalent of ES Module Exports\nDESCRIPTION: The CommonJS equivalent of ES module exports, showing how named exports and the default export are converted to properties on the exports object.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexports.A = {};\nexports.B = {};\nexports.default = \"Hello, world!\";\n```\n\n----------------------------------------\n\nTITLE: Type-Only Import Restrictions with React Components\nDESCRIPTION: Shows limitations of type-only imports when working with classes that have both runtime values and types, using React Component as an example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component } from \"react\";\n\ninterface ButtonProps {\n  // ...\n}\n\nclass Button extends Component<ButtonProps> {\n  //               ~~~~~~~~~\n  // error! 'Component' only refers to a type, but is being used as a value here.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript-specific Declarations\nDESCRIPTION: Example of importing functions and TypeScript-specific declarations using standard ECMAScript import syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { f, SomeType, SomeInterface } from \"./module.js\";\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Website Project for Production\nDESCRIPTION: Bundles the package to the 'dist' folder using Rollup. Creates optimized bundles in multiple formats including CommonJS, UMD, and ES Module.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Output with explainFiles\nDESCRIPTION: Example output from the TypeScript compiler when explainFiles is enabled, showing included files and their inclusion reasons.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/explainFiles.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from \n    file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' \n    from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'\n```\n\n----------------------------------------\n\nTITLE: Using top-level await in TypeScript\nDESCRIPTION: Shows how to use top-level await in TypeScript 3.8, allowing await to be used at the module level without wrapping in an async function.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.8.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"...\");\nconst greeting = await response.text();\nconsole.log(greeting);\n\n// Make sure we're a module\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Assertion in TypeScript\nDESCRIPTION: Shows an example of an invalid type assertion in TypeScript, which results in a compile-time error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Everyday Types.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = \"hello\" as number;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output Without Inline Source Map\nDESCRIPTION: The JavaScript output generated from the TypeScript code without inline source map enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/inlineSourceMap.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: Setting String-Value Compiler Flags in TypeScript\nDESCRIPTION: Shows how to set string-value compiler flags (target and module) using Twoslash annotations. These use the same descriptive strings available in tsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Twoslash Annotations.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @target: esnext\n// @module: nodenext\n```\n\n----------------------------------------\n\nTITLE: Copying Generated Files to TypeScript Website\nDESCRIPTION: A reference to the script that copies the build output into the typescriptlang-org module under the static/js/examples directory.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/community-meta/README.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nscripts/copyFiles.js\n```\n\n----------------------------------------\n\nTITLE: ReadonlyArrayish Type Implementation\nDESCRIPTION: Demonstrates how mapped types work with numeric index signatures in TypeScript 2.9.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Arrayish<T> = {\n  length: number;\n  [x: number]: T;\n};\n\ntype ReadonlyArrayish<T> = Readonly<Arrayish<T>>;\n\ndeclare const map: ReadonlyArrayish<string>;\nlet n = map.length;\nlet x = map[123];\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing resolve Parameter\nDESCRIPTION: Shows the error message that TypeScript 4.1 will produce when resolve() is called without an argument in a Promise constructor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n  resolve()\n  ~~~~~~~~~\nerror TS2554: Expected 1 arguments, but got 0.\n  An argument for 'value' was not provided.\n```\n\n----------------------------------------\n\nTITLE: Implementing String Padding Function with Any Type in TypeScript\nDESCRIPTION: This function adds padding to the left side of a string. It uses 'any' type for the padding parameter, allowing both string and number inputs but lacking type safety.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(value: string, padding: any) {\n  if (typeof padding === \"number\") {\n    return Array(padding + 1).join(\" \") + value;\n  }\n  if (typeof padding === \"string\") {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got '${typeof padding}'.`);\n}\n\npadLeft(\"Hello world\", 4); // returns \"    Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Generating TSConfig Reference Documentation\nDESCRIPTION: Commands for generating comprehensive TSConfig JSON reference documentation. It includes steps to generate JSON from the TypeScript CLI and combine them into a single markdown file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Generate JSON from the typescript cli\npnpm run --filter=tsconfig-reference generate-json\n# Jams them all into a single file\npnpm run --filter=tsconfig-reference generate-markdown\n```\n\n----------------------------------------\n\nTITLE: Class and Interface Combination\nDESCRIPTION: Demonstrates combining a class with an interface declaration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Deep Dive.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  x: number;\n}\n// ... elsewhere ...\ninterface Foo {\n  y: number;\n}\nlet a: Foo = ...;\nconsole.log(a.x + a.y); // OK\n```\n\n----------------------------------------\n\nTITLE: Creating Tuples with Rest Elements\nDESCRIPTION: Shows examples of valid tuples that match a tuple type with a rest element. The StringNumberBooleans type allows for a string, a number, and then any number of boolean values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringNumberBooleans = [string, number, ...boolean[]];\n// ---cut---\nconst a: StringNumberBooleans = [\"hello\", 1];\nconst b: StringNumberBooleans = [\"beautiful\", 2, true];\nconst c: StringNumberBooleans = [\"world\", 3, true, false, true, false, true];\n```\n\n----------------------------------------\n\nTITLE: Main App TypeScript Configuration File\nDESCRIPTION: Contents of the app/tsconfig.json file, referencing all other project configurations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        // ...\n    },\n    \"include\": [\"src\"],\n    \"references\": [\n        { \"path\": \"../graphics/tsconfig.json\" },\n        { \"path\": \"../sound/tsconfig.json\" },\n        { \"path\": \"../networking/tsconfig.json\" },\n        { \"path\": \"../input/tsconfig.json\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Declaration File for CSS\nDESCRIPTION: Declaration file (app.d.css.ts) that defines types for the CSS module, allowing TypeScript to understand the structure of the imported CSS file with proper type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowArbitraryExtensions.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app.d.css.ts\ndeclare const css: {\n  cookieBanner: string;\n};\nexport default css;\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for DOM Manipulation with TypeScript\nDESCRIPTION: A simplified HTML file structure that includes a div element with an 'app' id and references a compiled TypeScript script.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head><title>TypeScript Dom Manipulation</title></head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Assume index.js is the compiled output of index.ts -->\n    <script src=\"index.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic for/of Loop with String in TypeScript\nDESCRIPTION: A simple example of a for/of loop iterating over characters in a string in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/downlevelIteration.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements Outside Known Indices in TypeScript 1.4\nDESCRIPTION: This code shows how TypeScript 1.4 handles accessing tuple elements outside the set of known indices. It demonstrates the use of union types for such accesses and type checking.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.3.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nx[3] = \"world\"; // OK\nconsole.log(x[5].toString()); // OK, 'string' and 'number' both have toString\nx[6] = true; // Error, boolean isn't number or string\n```\n\n----------------------------------------\n\nTITLE: Wrapping Page Component with Intl for Internationalization in TypeScript React\nDESCRIPTION: This code snippet shows how to wrap a page component with the 'Intl' component to enable internationalization. It sets up the language copy based on the locale using a dynamic import.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/How i18n Works For Site Copy.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (props: Props) => (\n  <Intl locale={props.pageContext.lang}>\n    <Comm {...props} />\n  </Intl>\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Number Default Export\nDESCRIPTION: The TypeScript declaration for a CommonJS module that exports a number, showing how to handle primitive value exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const pi: number;\nexport = pi;\n```\n\n----------------------------------------\n\nTITLE: Simplified Twoslash Example\nDESCRIPTION: The final, cleaned-up version of the Twoslash example with minimal comments, letting the compiler provide the error information.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Converting Twoslash Code Samples.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\n// Declare a tuple type\nlet x: [string, number];\n\n// Initialize it\nx = [\"hello\", 10];\n\n// Initialize it incorrectly\nx = [10, \"hello\"];\n```\n\n----------------------------------------\n\nTITLE: Initial Twoslash Tuple Example\nDESCRIPTION: The same tuple example converted to use Twoslash syntax, which enables compiler validation during build.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Converting Twoslash Code Samples.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Declare a tuple type\nlet x: [string, number];\n\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n```\n\n----------------------------------------\n\nTITLE: Building TSConfig JSON Schema\nDESCRIPTION: Command for generating the JSON schema for TSConfig files, which is created by the tsconfig-reference package and stored in a specific location in the repository.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter=tsconfig-reference build\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic super Method Access in JavaScript\nDESCRIPTION: Shows how super keyword accesses base class methods differently from this keyword.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.3.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Base {\n    someMethod() {\n        console.log(\"Base method called!\");\n    }\n}\n\nclass Derived extends Base {\n    someMethod() {\n        console.log(\"Derived method called!\");\n        super.someMethod();\n    }\n}\n\nnew Derived().someMethod();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Constrained Mixin in TypeScript\nDESCRIPTION: Creates a Jumpable mixin that requires a base class satisfying the Positionable constraint. This ensures that the mixin can only be applied to classes that have the setPos method available.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Mixins.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Jumpable<TBase extends Positionable>(Base: TBase) {\n  return class Jumpable extends Base {\n    jump() {\n      // This mixin will only work if it is passed a base\n      // class which has setPos defined because of the\n      // Positionable constraint.\n      this.setPos(0, 20);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: NonNullable Value Validation\nDESCRIPTION: Demonstrates type narrowing with null checks and NonNullable type inference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction throwIfNullable<T>(value: T): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw Error(\"Nullable value!\");\n    }\n\n    return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript to JavaScript\nDESCRIPTION: This shell command runs the TypeScript compiler (tsc) on a TypeScript file named 'hello.ts'. It will generate a JavaScript file with the same name but a .js extension.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntsc hello.ts\n```\n\n----------------------------------------\n\nTITLE: Including Specific Modules in Type Acquisition\nDESCRIPTION: Code example demonstrating how to include specific modules (like jest) in TypeScript's type acquisition, even when they're not present in node_modules.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/typeAcquisition.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"include\": [\"jest\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Changes for Compiler Settings in TypeScript Playground\nDESCRIPTION: This diff snippet shows how the Playground URL changes when the esModuleInterop compiler option is turned off. It illustrates the URL-based configuration mechanism of the TypeScript Playground.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Compiler Settings.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# Before\n- https://www.typescriptlang.org/play\n\n# After turning esModuleInterop off\n+ https://www.typescriptlang.org/play?esModuleInterop=false\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Call Type Checking\nDESCRIPTION: Example of TypeScript catching incorrect function usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flipCoin() {\n  // Meant to be Math.random()\n  return Math.random < 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Greeting Module\nDESCRIPTION: Updated main.ts file that imports the sayHello function from the greet module and uses it to log a greeting message.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sayHello } from \"./greet\";\n\nconsole.log(sayHello(\"TypeScript\"));\n```\n\n----------------------------------------\n\nTITLE: Running Development Server in TypeScript Website Project\nDESCRIPTION: Starts the project in development/watch mode which rebuilds upon file changes. Changes to the library will trigger rebuilds automatically.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Const Declaration Example in TypeScript\nDESCRIPTION: Shows const declaration usage and its immutability constraint.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst MAX = 100;\n\n++MAX; // Error: The operand of an increment or decrement\n//        operator cannot be a constant.\n```\n\n----------------------------------------\n\nTITLE: Const Declaration Usage\nDESCRIPTION: Demonstrates const declarations for immutable variables.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.4.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst halfPi = Math.PI / 2;\nhalfPi = 2; // Error, can't assign to a `const`\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Compiler Flag with Explicit Value in TypeScript\nDESCRIPTION: Demonstrates setting a boolean compiler flag (strictPropertyInitialization) to false using a Twoslash annotation with an explicit value assignment.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Twoslash Annotations.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictPropertyInitialization: false\n```\n\n----------------------------------------\n\nTITLE: BigInt Support in TypeScript\nDESCRIPTION: Introduces BigInt support in TypeScript 3.2, including the new bigint primitive type and BigInt literals.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo: bigint = BigInt(100); // the BigInt function\nlet bar: bigint = 100n; // a BigInt literal\n\n// *Slaps roof of fibonacci function*\n// This bad boy returns ints that can get *so* big!\nfunction fibonacci(n: bigint) {\n  let result = 1n;\n  for (let last = 0n, i = 0n; i < n; i++) {\n    const current = result;\n    result += last;\n    last = current;\n  }\n  return result;\n}\n\nfibonacci(10000n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Classes with new.target in TypeScript\nDESCRIPTION: Shows how to use new.target to correctly set up the prototype chain when inheriting from Error in TypeScript 2.2.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.2.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomError extends Error {\n  constructor(message?: string) {\n    super(message); // 'Error' breaks prototype chain here\n    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript File Watcher Polling Options\nDESCRIPTION: Demonstrates the available string literal options for fallback polling configuration in TypeScript. These options control how files are monitored when native file system watchers are unavailable or exhausted.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/fallbackPolling.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"fixedPollingInterval\"\n\"priorityPollingInterval\"\n\"dynamicPriorityPolling\"\n\"synchronousWatchDirectory\"\n```\n\n----------------------------------------\n\nTITLE: Emitted JavaScript from TypeScript Declare Statement\nDESCRIPTION: This snippet shows the JavaScript code emitted by TypeScript when compiling the 'declare' statement. Note that the declaration is removed, potentially leading to runtime errors if the object is not defined elsewhere.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/declare.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nghost.boo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unreachable Code in TypeScript Function\nDESCRIPTION: This snippet shows a TypeScript function with unreachable code. The last 'return true' statement is unreachable due to the preceding if-else structure that covers all possible cases.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowUnreachableCode.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Type Checking with Math Methods\nDESCRIPTION: Example showing how TypeScript identifies valid and invalid Math object methods through type declarations. Shows error detection for non-existent method 'mix'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Declarations.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst k = Math.max(5, 6);\nconst j = Math.mix(7, 8);\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild with TypeScript\nDESCRIPTION: Instructions for setting up TypeScript with MSBuild, including project file configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <!-- Include default props at the top -->\n  <Import\n      Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.Default.props\"\n      Condition=\"Exists('$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.Default.props')\" />\n\n  <!-- TypeScript configurations go here -->\n  <PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n    <TypeScriptRemoveComments>false</TypeScriptRemoveComments>\n    <TypeScriptSourceMap>true</TypeScriptSourceMap>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <TypeScriptRemoveComments>true</TypeScriptRemoveComments>\n    <TypeScriptSourceMap>false</TypeScriptSourceMap>\n  </PropertyGroup>\n\n  <!-- Include default targets at the bottom -->\n  <Import\n      Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\"\n      Condition=\"Exists('$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets')\" />\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Export All with Transform Function in TypeScript\nDESCRIPTION: Demonstrates how to re-export all members from multiple modules while adding new exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.5.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function transform(s: string): string { ... }\nexport * from \"./mod1\";\nexport * from \"./mod2\";\n```\n\n----------------------------------------\n\nTITLE: Simple Global Library Function in JavaScript\nDESCRIPTION: Illustrates a basic global library function in JavaScript that creates a greeting string. This function is directly accessible in the global scope.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global.d.ts.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createGreeting(s) {\n  return \"Hello, \" + s;\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace-style TypeScript Configuration File\nDESCRIPTION: Contents of the root tsconfig.json file, referencing all project configurations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files\": [],\n    \"references\": [\n        { \"path\": \"./src/tsconfig.json\" },\n        { \"path\": \"./src/tsconfig.test.json\" },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Section in Markdown for TypeScript Documentation\nDESCRIPTION: This markdown snippet defines the display property for the 'Advanced' section of the TypeScript compiler options documentation. It uses YAML front matter to set the display title.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Advanced_Options_6178.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Advanced\"\n---\n```\n\n----------------------------------------\n\nTITLE: Building TSConfig Reference Documentation\nDESCRIPTION: Commands for generating JSON data and markdown documentation for the TSConfig reference. These commands should be run from the root of the repository.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter=tsconfig-reference generate-json\n\npnpm run --filter=tsconfig-reference generate-markdown\n```\n\n----------------------------------------\n\nTITLE: Previous Behavior of Non-Literal Method Names in TypeScript\nDESCRIPTION: Shows how TypeScript previously interpreted classes with symbol-based method names, essentially ignoring the method declaration entirely from a type perspective.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.7.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport class A {\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming an Unnecessarily Namespaced Module in TypeScript\nDESCRIPTION: Shows the awkward import and usage pattern created when consuming a module with unnecessary namespace wrapping.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces and Modules.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as shapes from \"./shapes\";\nlet t = new shapes.Shapes.Triangle(); // shapes.Shapes?\n```\n\n----------------------------------------\n\nTITLE: Using JSX Fragments with Preact\nDESCRIPTION: Example TypeScript/TSX code showing how to use JSX fragments with Preact, importing necessary components and using fragment syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxFragmentFactory.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  <>\n    <div>Hello</div>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Running Gulp and Testing Output\nDESCRIPTION: Shell commands to run the Gulp build process and execute the compiled JavaScript file with Node.js to verify the output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngulp\nnode dist/main.js\n```\n\n----------------------------------------\n\nTITLE: AMD Module Declaration in TypeScript\nDESCRIPTION: Shows how to name an AMD module using the amd-module directive, which affects how the module is defined in the compiled JavaScript output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <amd-module name=\"NamedModule\"/>\nexport class C {}\n```\n\n----------------------------------------\n\nTITLE: Configuring baseUrl in tsconfig.json\nDESCRIPTION: Sets the base directory for resolving non-relative module names in a TypeScript project.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.0.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./modules\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Import Exclusion for Node.js Built-in Modules\nDESCRIPTION: JSON configuration for Visual Studio Code that prevents auto-imports from Node.js built-in modules that use the 'node:' prefix.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\n        \"^node:\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing String Array Indexable Type in TypeScript\nDESCRIPTION: Demonstrates how to create an interface with a numeric index signature that returns string values. Shows basic array-like type implementation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Interfaces.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json Inheritance via Node.js Packages\nDESCRIPTION: Demonstrates how TypeScript 3.2 resolves tsconfig.json files from node_modules, allowing for configuration inheritance through packages.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.2.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@my-team/tsconfig-base\",\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    // Override certain options on a project-by-project basis.\n    \"strictBindCallApply\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript CLI Command Flags\nDESCRIPTION: Command line interface flags for basic TypeScript operations, including configuration and project management commands.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n--all           # boolean - Show all compiler options.\n--help          # boolean - Gives local information for help on the CLI.\n--init          # boolean - Initializes a TypeScript project and creates a tsconfig.json file.\n--listFilesOnly # boolean - Print names of files that are part of the compilation and then stop processing.\n--locale        # string - Set the language of the messaging from TypeScript.\n--project       # string - Compile the project given the path to its configuration file.\n--showConfig    # boolean - Print the final configuration instead of building.\n--version       # boolean - Print the compiler's version.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Runtime Code Example\nDESCRIPTION: Shows a valid JavaScript code example that can run in a JavaScript runtime environment without any TypeScript-specific syntax\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/types-vs-runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst hello = \"Hello world\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty Output in TypeScript (Markdown Documentation)\nDESCRIPTION: Documentation for the 'pretty' compiler option that enables colored and formatted output in TypeScript. When enabled, compiler messages and errors are displayed with enhanced formatting and color coding to improve readability.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/pretty.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Pretty\"\noneline: \"Enable color and formatting in TypeScript's output to make compiler errors easier to read.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Fixing Template String Issues by Constraining to String Keys\nDESCRIPTION: Example showing how to fix template string errors by constraining generic parameters to string keys only, avoiding the possibility of symbol keys entirely.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nfunction get<T, K extends string & keyof T>(obj: T, key: K) {\n    // No longer an error.\n    console.log(`Grabbing property '${key}'.`);\n    return obj[key];\n}\n```\n\n----------------------------------------\n\nTITLE: File Path Reference in Markdown\nDESCRIPTION: Markdown link syntax showing the relative path to the templates/pages directory where the main pages are located.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/typescriptlang-org/src/pages/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`src/templates/pages`](../templates/pages)\n```\n\n----------------------------------------\n\nTITLE: Compressing Code for URL in TypeScript Playground\nDESCRIPTION: This snippet demonstrates how to use the LZString library to compress code for inclusion in a Playground URL. It uses the compressToEncodedURIComponent function to create a URL-safe compressed string.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/URL Structure.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nLZString.compressToEncodedURIComponent\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Library Files in package.json for TypeScript\nDESCRIPTION: Example of how to lock DOM libraries to a specific version of the @types/web package by configuring the @typescript/lib-dom dependency in package.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/libReplacement.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"devDependencies\": {\n       \"@typescript/lib-dom\": \"npm:@types/web@0.0.199\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Version Override in package.json\nDESCRIPTION: Configuration to update the TypeScript version used across the website build process via pnpm overrides.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/New TypeScript Version.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"pnpm\": {\n    \"overrides\": {\n      \"typescript\": \"3.9.0\",\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Intersection Type Inference with 'infer' in Contra-variant Positions\nDESCRIPTION: Shows how using 'infer' in contra-variant positions with multiple candidates results in an intersection type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Advanced Types.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bar<T> = T extends { a: (x: infer U) => void; b: (x: infer U) => void }\n  ? U\n  : never;\n\ntype T1 = Bar<{ a: (x: string) => void; b: (x: string) => void }>;\n//   ^?\ntype T2 = Bar<{ a: (x: string) => void; b: (x: number) => void }>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Package\nDESCRIPTION: Shell command to initialize a new npm package in the project directory. This creates a package.json file with project metadata.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Modifying Example Sections in generateTOC.js\nDESCRIPTION: Instructions for adding a new example section to the TypeScript example code repository. This involves creating folders, editing the generateTOC.js file to include new folders, and potentially customizing the order of subsections.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-examples/copy/en/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nedit `generateTOC.js` with at the set of folders it should grab\nat around line 30, then edit the `const toc` further down to\nadd a new section. If you need custom ordering then use the\n`sortedSubSections` array to set your order.\n```\n\n----------------------------------------\n\nTITLE: Using Instance Index Signatures in TypeScript Classes\nDESCRIPTION: This example demonstrates instance-level index signatures in a class, allowing additional properties to be set dynamically. The index signature defines what types are allowed for dynamically added properties.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  hello = \"hello\";\n  world = 1234;\n\n  // This is an index signature:\n  [propName: string]: string | number | undefined;\n}\n\nlet instance = new Foo();\n\n// Valid assignment\ninstance[\"whatever\"] = 42;\n\n// Has type 'string | number | undefined'.\nlet x = instance[\"something\"];\n```\n\n----------------------------------------\n\nTITLE: Using @link in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @link tag inside other tags in TypeScript. It can be used to create links to other types, functions, or properties within documentation comments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype Box<T> = { t: T }\n/** @returns A {@link Box} containing the parameter. */\nfunction box<U>(u: U): Box<U> {\n  return { t: u };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring excludeDirectories in TypeScript tsconfig\nDESCRIPTION: This snippet demonstrates how to set up the 'excludeDirectories' option in the watchOptions section of a tsconfig.json file. It shows how to exclude node_modules, a _build directory, and a temp folder from being watched.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/excludeDirectories.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"watchOptions\": {\n    \"excludeDirectories\": [\"**/node_modules\", \"_build\", \"temp/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Display Metadata in Markdown Frontmatter\nDESCRIPTION: A simple markdown frontmatter block that defines the display title for a documentation page. This metadata is used by a static site generator to set the page title for the 'Language and Environment' configuration section.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Language_and_Environment_6254.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Language and Environment\"\n---\n```\n\n----------------------------------------\n\nTITLE: Special Case URL Parameter for Latest TypeScript Version in Markdown\nDESCRIPTION: Demonstrates the special URL parameter to use the latest version of TypeScript built for the Playground.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/TypeScript Versions.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`?ts=next`\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Browser ES Modules\nDESCRIPTION: TypeScript configuration for browser ES modules without bundlers, using paths mapping for URL support and import maps.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    // This is not a complete template; it only\n    // shows relevant module-related settings.\n    // Be sure to set other important options\n    // like `target`, `lib`, and `strict`.\n\n    // Combined with `\"type\": \"module\"` in a local package.json,\n    // this enforces including file extensions on relative path imports.\n    \"module\": \"nodenext\",\n    \"paths\": {\n      // Point TS to local types for remote URLs:\n      \"https://esm.sh/lodash@4.17.21\": [\"./node_modules/@types/lodash/index.d.ts\"],\n      // Optional: point bare specifier imports to an empty file\n      // to prohibit importing from node_modules specifiers not listed here:\n      \"*\": [\"./empty-file.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Solution Style tsconfig.json Configuration\nDESCRIPTION: Demonstrates the structure of a solution-style tsconfig.json that references multiple project-specific configuration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.9.md#2025-04-20_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.shared.json\" },\n    { \"path\": \"./tsconfig.frontend.json\" },\n    { \"path\": \"./tsconfig.backend.json\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Compiler Settings for TypeScript Playground\nDESCRIPTION: This JSON snippet shows a rough summary of the default compiler settings used in the TypeScript Playground. It includes key options like strict mode, module settings, and experimental features.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Compiler Settings.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2017\",\n    \"jsx\": \"react\",\n\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Changesets for Package Version Management\nDESCRIPTION: Example of using the changesets CLI to manage package version bumps and releases. It demonstrates the interactive process of selecting packages for version changes.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/README.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pnpm changeset\n🦋  Which packages would you like to include? … \n◯ changed packages\n  ◯ create-typescript-playground-plugin\n  ◯ @typescript/vfs\n  ◯ @typescript/twoslash\n  ◯ @typescript/sandbox\n  ◯ @typescript/ata\n```\n\n----------------------------------------\n\nTITLE: Using Index Signatures to Allow Excess Properties in TypeScript 1.6\nDESCRIPTION: Demonstrates how to use index signatures to explicitly allow excess properties in object literal assignments in TypeScript 1.6.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.6.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nvar x: { foo: number; [x: string]: any };\nx = { foo: 1, baz: 2 }; // Ok, `baz` matched by index signature\n```\n\n----------------------------------------\n\nTITLE: Properly Namespaced Type Declarations in TypeScript Global Declaration Files\nDESCRIPTION: Demonstrates the recommended approach to declare types in a global declaration file by using namespaces based on the library's global variable name. This prevents potential name conflicts between different declaration files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace cats {\n  interface KittySettings {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Tuple Example\nDESCRIPTION: Shows a basic TypeScript code sample without Twoslash integration, demonstrating tuple type declaration and initialization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Converting Twoslash Code Samples.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Declare a tuple type\nlet x: [string, number];\n\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n```\n\n----------------------------------------\n\nTITLE: Defining Display Metadata for Project Options in Markdown\nDESCRIPTION: This snippet sets the display metadata for the 'Project Options' section in a markdown file. It uses YAML front matter to define the display property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Basic_Options_6172.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Project Options\"\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Equality Operator Quirks\nDESCRIPTION: This snippet showcases unexpected behavior of JavaScript's equality operator, which coerces operands leading to surprising results.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/get-started/TS for the New Programmer.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (\"\" == 0) {\n  // It is! But why??\n}\nif (1 < x < 3) {\n  // True for *any* value of x!\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Declaration Map in TypeScript Configuration\nDESCRIPTION: Demonstrates how to enable the declarationMap option in the TypeScript compiler configuration. This option, when used with the declaration option, generates .d.ts.map files that allow Language Services to map declaration file definitions to their original source locations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.9.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationMap\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating --erasableSyntaxOnly Error in TypeScript Class Constructor\nDESCRIPTION: This snippet shows how the new --erasableSyntaxOnly flag in TypeScript 5.8 catches runtime-impacting TypeScript syntax in class constructors.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n    constructor(public x: number) { }\n    //          ~~~~~~~~~~~~~~~~\n    // error! This syntax is not allowed when 'erasableSyntaxOnly' is enabled.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript with 'removeComments' Set to True\nDESCRIPTION: This example demonstrates the output when 'removeComments' is set to true. The JSDoc comment is stripped from the resulting JavaScript code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/removeComments.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @showEmit\n// @removeComments: true\n/** The translation of 'Hello world' into Portuguese */\nexport const helloWorldPTBR = \"Olá Mundo\";\n```\n\n----------------------------------------\n\nTITLE: Using 'any' Type for a Generic-like Identity Function in TypeScript\nDESCRIPTION: This example uses the 'any' type to create a more flexible identity function, but it loses type information in the process.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Generics.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity(arg: any): any {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Script Loading for Multi-file Namespaces\nDESCRIPTION: Shows how to load multiple namespace files in HTML using script tags\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"Validation.js\" type=\"text/javascript\" />\n<script src=\"LettersOnlyValidator.js\" type=\"text/javascript\" />\n<script src=\"ZipCodeValidator.js\" type=\"text/javascript\" />\n<script src=\"Test.js\" type=\"text/javascript\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp with Browserify for Browser Bundling\nDESCRIPTION: Updated Gulpfile that uses Browserify with tsify to bundle TypeScript files and copy HTML files to the dist directory. It creates a source map for debugging.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar browserify = require(\"browserify\");\nvar source = require(\"vinyl-source-stream\");\nvar tsify = require(\"tsify\");\nvar paths = {\n  pages: [\"src/*.html\"],\n};\n\ngulp.task(\"copy-html\", function () {\n  return gulp.src(paths.pages).pipe(gulp.dest(\"dist\"));\n});\n\ngulp.task(\n  \"default\",\n  gulp.series(gulp.parallel(\"copy-html\"), function () {\n    return browserify({\n      basedir: \".\",\n      debug: true,\n      entries: [\"src/main.ts\"],\n      cache: {},\n      packageCache: {},\n    })\n      .plugin(tsify)\n      .bundle()\n      .pipe(source(\"bundle.js\"))\n      .pipe(gulp.dest(\"dist\"));\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Decorators with Command Line Options in TypeScript\nDESCRIPTION: Command line options to enable experimental decorator support in TypeScript using the tsc compiler.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntsc --target ES5 --experimentalDecorators\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript File with Extension (Error)\nDESCRIPTION: This snippet demonstrates an error that occurs when trying to import a TypeScript file with a '.ts' extension. It highlights the need for the 'allowImportingTsExtensions' compiler option when working with TypeScript files directly.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: src/math.ts\nexport function add(a: number, b: number) {\n  return a + b;\n}\n\n// @Filename: src/main.ts\nimport { add } from \"./math.ts\";\n//                  ^^^^^^^^^^^\n// An import path can only end with a '.ts' extension when 'allowImportingTsExtensions' is enabled.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Example with any\nDESCRIPTION: Example of TypeScript type 'any' which is checked when noImplicitAny is enabled. This type represents a variable that can hold any value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Basics.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nany\n```\n\n----------------------------------------\n\nTITLE: Using Code Highlighting in TypeScript Examples\nDESCRIPTION: Shows how to highlight specific portions of code in TypeScript examples. This example demonstrates a function that takes string and Date parameters, with highlighting on the Date constructor to draw attention to it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`)\n}\n\ngreet(\"Maddison\", new Date())\n//                ^^^^^^^^^^\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"See above\",\n  \"extension\": \"ts\",\n  \"highlights\": [\n    {\n      \"kind\": \"highlight\",\n      \"offset\": 134,\n      \"length\": 10,\n      \"text\": \"\",\n      \"line\": 4,\n      \"start\": 18\n    }\n  ],\n  \"queries\": [],\n  \"staticQuickInfos\": \"[ 11 items ]\",\n  \"errors\": [],\n  \"playgroundURL\": \"https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQAd2oDOCAXIoVKjGMgDSIAmAhlOmQCIvoCUiA3gChEiCAmIAbdADpxcZNgAGACXTjZiACR98RBAF96UOMwCeiGIU19mrKUc6sAypWrzuegIQLuAbgF6BATRMHAAiAFkmBgYLBFD6MHQAd0QHdGxuXwEAemzhfILC4QA9UrLygSA\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Compiler Flag with Twoslash in TypeScript\nDESCRIPTION: Shows how to enable a boolean compiler flag (isolatedModules) using a Twoslash annotation. Boolean flags don't require explicitly setting a value.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Twoslash Annotations.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @isolatedModules\n```\n\n----------------------------------------\n\nTITLE: Node.js Runtime Error Example\nDESCRIPTION: Example of the error message shown when running TypeScript 5.1 on an unsupported Node.js version below 14.17, demonstrating the ES2020 runtime requirement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnode_modules/typescript/lib/tsserver.js:2406\n  for (let i = startIndex ?? 0; i < array.length; i++) {\n                           ^\n \nSyntaxError: Unexpected token '?'\n    at wrapSafe (internal/modules/cjs/loader.js:915:16)\n    at Module._compile (internal/modules/cjs/loader.js:963:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)\n    at Module.load (internal/modules/cjs/loader.js:863:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:708:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:60:12)\n    at internal/main/run_main_module.js:17:47\n```\n\n----------------------------------------\n\nTITLE: Using Cut Markers to Filter Code in TypeScript Examples\nDESCRIPTION: Demonstrates how to use cut markers to include only relevant portions of code in examples. The code shows type inference with generics, where TypeScript determines the return types based on the input parameters.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IdLabel {\n  id: number /* some fields */\n}\ninterface NameLabel {\n  name: string /* other fields */\n}\ntype NameOrId<T extends number | string> = T extends number ? IdLabel : NameLabel\n// This comment should not be included\n\n// ---cut---\nfunction createLabel<T extends number | string>(idOrName: T): NameOrId<T> {\n  throw \"unimplemented\"\n}\n\nlet a = createLabel(\"typescript\")\n//  ^?\n\nlet b = createLabel(2.8)\n//  ^?\n\nlet c = createLabel(Math.random() ? \"hello\" : 42)\n//  ^?\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"See above\",\n  \"extension\": \"ts\",\n  \"highlights\": [],\n  \"queries\": [\n    {\n      \"docs\": \"\",\n      \"kind\": \"query\",\n      \"start\": 354,\n      \"length\": 16,\n      \"text\": \"let a: NameLabel\",\n      \"offset\": 4,\n      \"line\": 5\n    },\n    {\n      \"docs\": \"\",\n      \"kind\": \"query\",\n      \"start\": 390,\n      \"length\": 14,\n      \"text\": \"let b: IdLabel\",\n      \"offset\": 4,\n      \"line\": 7\n    },\n    {\n      \"docs\": \"\",\n      \"kind\": \"query\",\n      \"start\": 417,\n      \"length\": 26,\n      \"text\": \"let c: NameLabel | IdLabel\",\n      \"offset\": 4,\n      \"line\": 9\n    }\n  ],\n  \"staticQuickInfos\": \"[ 14 items ]\",\n  \"errors\": [],\n  \"playgroundURL\": \"https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3ssOgFzIgCuAtnlADTID0AVMgM4D2tKMwAuk7I2LZAF8AUKEixEKAHJw+2PIRIgVESpzBRQAc2btk3MAAtoyAUJFjJUsAE8ADku0B5KBgA8AFWQIAA9IEGEqOgZkAB8ufSMAPmQAXmRAkLCImnprAH40LFwCZEplVWL8AG4pFnF-C2ARBF4+cC4Lbmp8dCpzZDxSEAR8anQIdCla8QBaOYRqMDmZqRhqYbBgbhBkBCgIOEg1AgCg0IhwkRzouL0DEENEgAoyb3KddIBKMq8fdADkkQpMgQchLFBuAB3ZAAInWwFornwEDakHQMKk0ikyLAyDgqV2+0OEGO+CeMJc7k4e2ArjAMM+NTqIIAenkpjiBgS9gcjpUngAmAB0AA5GdNWezsRBcQhuUS+eongBZQ4WIVQODhXhPT7IAowqz4fDcGGlZAAFgF4uZyDZUiAA\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: TSConfig File Example\nDESCRIPTION: The basic filename format for TypeScript configuration files, which can be either tsconfig.json or jsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntsconfig.json\n```\n\nLANGUAGE: markdown\nCODE:\n```\njsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter block defining display title for documentation page\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Editor_Support_6249.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndisplay: \"Editor Support\"\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Module Export/Import Example in TypeScript\nDESCRIPTION: A basic example showing export of a constant from one file and its import and use in another file.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/module.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Internal Dependencies\nDESCRIPTION: Commands to rebuild all internal dependencies when module build issues occur. This helps when some dependencies aren't properly built despite the system reporting they are.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Setup Troubleshooting.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm bootstrap\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing Type Annotation with --isolatedDeclarations\nDESCRIPTION: This snippet shows the error message that TypeScript generates when a function is exported without an explicit return type annotation under the --isolatedDeclarations option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport function foo() {\n//              ~~~\n// error! Function must have an explicit\n// return type annotation with --isolatedDeclarations.\n    return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Handbook Documentation Frontmatter Template\nDESCRIPTION: YAML frontmatter template required for handbook documentation pages, including title, layout, permalink, and description.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/New TypeScript Version.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Basic Types\nlayout: docs\npermalink: /docs/handbook/basic-types.html\noneline: \"Step one in learning TypeScript: The basic types.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Type Modifier for Import/Export Statements\nDESCRIPTION: Demonstrates using the 'type' modifier to explicitly mark imports and exports that should be removed in JavaScript output, making module elision more predictable.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// This statement can be dropped entirely in JS output\nimport type * as car from \"./car\";\n\n// The named import/export 'Car' can be dropped in JS output\nimport { type Car } from \"./car\";\nexport { type Car } from \"./car\";\n```\n\n----------------------------------------\n\nTITLE: Including Additional Type Definitions in JavaScript Projects using jsconfig.json\nDESCRIPTION: This snippet demonstrates how to instruct TypeScript to download additional type definitions for specific libraries (in this case, jQuery) by adding them to the 'include' array in the typeAcquisition section of jsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/sections/buildOptions.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeAcquisition\": {\n    \"include\": [\"jquery\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of ReturnType with a function name\nDESCRIPTION: Demonstrates the error that occurs when trying to use ReturnType directly with a function name instead of a function type.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2749\nfunction f() {\n  return { x: 10, y: 3 };\n}\ntype P = ReturnType<f>;\n```\n\n----------------------------------------\n\nTITLE: Node.js File System Watch Methods\nDESCRIPTION: References to Node.js filesystem watching methods used by TypeScript's watch mode implementation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/sections/watchOptions.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfs.watch\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfs.watchFile\n```\n\n----------------------------------------\n\nTITLE: Configuring 'include' Patterns in tsconfig.json\nDESCRIPTION: A JSON example showing how to specify file patterns in the 'include' array of tsconfig.json. This example targets all files in the src and tests directories.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/include.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"src/**/*\", \"tests/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Index Signatures in TypeScript\nDESCRIPTION: Example showing how index signatures work in TypeScript interfaces, allowing arbitrary property access with specified return types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  path: string;\n  permissions: number;\n\n  // Extra properties are caught by this index signature.\n  [propName: string]: string | number;\n}\n\nfunction checkOptions(opts: Options) {\n  opts.path; // string\n  opts.permissions; // number\n\n  // These are all allowed too!\n  // They have the type 'string | number'.\n  opts.yadda.toString();\n  opts[\"foo bar baz\"].toString();\n  opts[Math.random()].toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @typescript/sandbox v0.1.3\nDESCRIPTION: Shows the patch changes for version 0.1.3, including initial bump for changesets and updates to dependencies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.3\n\n### Patch Changes\n\n- 46eba14: Initial bump for changesets\n- Updated dependencies [46eba14]\n  - @typescript/vfs@1.5.1\n  - @typescript/ata@0.9.5\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Configuration with Custom Conditions\nDESCRIPTION: An example of a package.json file that uses exports field with various conditions including a custom condition, demonstrating how TypeScript's customConditions feature works.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.0.md#2025-04-20_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    // ...\n    \"exports\": {\n        \".\": {\n            \"my-condition\": \"./foo.mjs\",\n            \"node\": \"./bar.mjs\",\n            \"import\": \"./baz.mjs\",\n            \"require\": \"./biz.mjs\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UMD Module Pattern\nDESCRIPTION: Illustrates the common pattern used in UMD modules to check for different module environments.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"libName\"], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory(require(\"libName\"));\n    } else {\n        root.returnExports = factory(root.libName);\n    }\n}(this, function (b) {\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @typescript/sandbox v0.1.7\nDESCRIPTION: Shows the patch changes for version 0.1.7, which includes an update to the @typescript/ata dependency.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.7\n\n### Patch Changes\n\n- Updated dependencies [[`1d0af97`](https://github.com/microsoft/TypeScript-Website/commit/1d0af97318b79943fe0bfa8871ee6e8c584c9af5)]:\n  - @typescript/ata@0.9.7\n```\n\n----------------------------------------\n\nTITLE: Generating and Copying Example Files (JavaScript Reference)\nDESCRIPTION: References to JavaScript scripts that handle generating the table of contents JSON file and copying files to the typescriptlang-org module. These scripts manage the build process for example code documentation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe script is in [`scripts/generateTOC.js`](scripts/generateTOC.js), with  \noutput of the build process is then copied into the `typescriptlang-org`\nmodule under `static/js/examples` in [`scripts/copyFiles.js`](scripts/copyFiles.js).\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler String Options\nDESCRIPTION: String-based configuration options for the TypeScript compiler including out, outDir, outFile, paths, and others that specify file paths and module resolution settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options.md#2025-04-20_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<tr class='odd' name='outDir'>\n  <td><code><a href='/tsconfig/#outDir'>--outDir</a></code></td>\n  <td><p><code>string</code></p></td>\n  <td></td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Using @ts-ignore for selective suppression in TypeScript\nDESCRIPTION: This snippet demonstrates the recommended approach of using @ts-ignore comment to selectively suppress the implicit 'any' index error, rather than using the global suppressImplicitAnyIndexErrors option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/suppressImplicitAnyIndexErrors.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noImplicitAny: true\n// @strict: true\nconst obj = { x: 10 };\n// @ts-ignore\nconsole.log(obj[\"foo\"]);\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Configuration with Custom Conditions\nDESCRIPTION: Demonstrates how to structure a package.json file with exports field using custom conditions alongside standard Node.js conditions like 'node', 'import', and 'require'.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/customConditions.md#2025-04-20_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // ...\n    \"exports\": {\n        \".\": {\n            \"my-condition\": \"./foo.mjs\",\n            \"node\": \"./bar.mjs\",\n            \"import\": \"./baz.mjs\",\n            \"require\": \"./biz.mjs\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid rootDir Configuration Example\nDESCRIPTION: Example directory structure demonstrating an invalid rootDir configuration that would cause compilation errors\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/rootDir.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts\n```\n\n----------------------------------------\n\nTITLE: Declaring CommonJS require Function for TypeScript\nDESCRIPTION: Type declaration for Node.js/CommonJS require function to make TypeScript recognize it when migrating from JavaScript modules that use require statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// For Node/CommonJS\ndeclare function require(path: string): any;\n```\n\n----------------------------------------\n\nTITLE: Compiled AMD Module in JavaScript\nDESCRIPTION: Shows the resulting JavaScript code after compiling a TypeScript file with an AMD module directive, demonstrating how the module name is used in the define call.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Triple-Slash Directives.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(\"NamedModule\", [\"require\", \"exports\"], function (require, exports) {\n  var C = (function () {\n    function C() {}\n    return C;\n  })();\n  exports.C = C;\n});\n```\n\n----------------------------------------\n\nTITLE: Module Import with esModuleInterop Enabled\nDESCRIPTION: Demonstrates the TypeScript compiler output when esModuleInterop is enabled, showing the modified import behavior.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/esModuleInterop.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\n// @showEmit\n// @esModuleInterop\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n```\n\n----------------------------------------\n\nTITLE: JavaScript output without emitDecoratorMetadata enabled\nDESCRIPTION: The emitted JavaScript code when the emitDecoratorMetadata option is not enabled (default). The code shows the basic decorator implementation without any type metadata being included.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/emitDecoratorMetadata.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @experimentalDecorators\n// @showEmit\nfunction LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n```\n\n----------------------------------------\n\nTITLE: Detailed Default Sandbox Compiler Options for TypeScript Playground\nDESCRIPTION: This TypeScript function defines the full specification of default compiler settings for the TypeScript Playground sandbox. It includes a comprehensive list of compiler options and their default values, considering factors like JavaScript vs TypeScript usage.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/playground-handbook/copy/en/Compiler Settings.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getDefaultSandboxCompilerOptions(config: SandboxConfig, monaco: Monaco) {\n  const useJavaScript = config.filetype === \"js\"\n  const settings: CompilerOptions = {\n    strict: true,\n\n    noImplicitAny: true,\n    strictNullChecks: !useJavaScript,\n    strictFunctionTypes: true,\n    strictPropertyInitialization: true,\n    strictBindCallApply: true,\n    noImplicitThis: true,\n    noImplicitReturns: true,\n    noUncheckedIndexedAccess: false,\n\n    useDefineForClassFields: false,\n\n    alwaysStrict: true,\n    allowUnreachableCode: false,\n    allowUnusedLabels: false,\n\n    downlevelIteration: false,\n    noEmitHelpers: false,\n    noLib: false,\n    noStrictGenericChecks: false,\n    noUnusedLocals: false,\n    noUnusedParameters: false,\n\n    esModuleInterop: true,\n    preserveConstEnums: false,\n    removeComments: false,\n    skipLibCheck: false,\n\n    checkJs: useJavaScript,\n    allowJs: useJavaScript,\n    declaration: true,\n\n    importHelpers: false,\n\n    experimentalDecorators: true,\n    emitDecoratorMetadata: true,\n    moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n\n    target: monaco.languages.typescript.ScriptTarget.ES2017,\n    jsx: monaco.languages.typescript.JsxEmit.React,\n    module: monaco.languages.typescript.ModuleKind.ESNext,\n  }\n\n  return { ...settings, ...config.compilerOptions }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TSConfig Reference Flow\nDESCRIPTION: Illustrates the flow of data from the TypeScript compiler through various scripts to generate JSON and Markdown output for the TSConfig reference.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nTypeScript Compiler + `tsconfigRules.ts` -> `generateJSON.ts` -> JSON (in output) -> `generateMarkdown.ts` -> Markdown (in output)\n```\n\n----------------------------------------\n\nTITLE: Creating Source and Distribution Directories\nDESCRIPTION: Shell commands to create the src directory for TypeScript source files and the dist directory for compiled JavaScript output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir src\nmkdir dist\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration for Experimental Features\nDESCRIPTION: YAML front matter block defining the display property for the experimental features documentation page.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Experimental_Options_6177.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndisplay: \"Experimental\"\n---\n```\n\n----------------------------------------\n\nTITLE: Error Message for Deprecated Import Assertions in TypeScript 5.8\nDESCRIPTION: This snippet demonstrates the error message TypeScript 5.8 will produce when encountering a deprecated import assertion with the '--module nodenext' flag enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport data from \"./data.json\" assert { type: \"json\" };\n//                             ~~~~~~\n// error! Import assertions have been replaced by import attributes. Use 'with' instead of 'assert'\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Website without Watchman\nDESCRIPTION: Command to start the TypeScript website without using Watchman for file watching. This is useful on Windows where Watchman support is limited.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Setup Troubleshooting.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter=typescriptlang-org start\n```\n\n----------------------------------------\n\nTITLE: Extracting Header IDs from Deprecated Page in JavaScript\nDESCRIPTION: JavaScript snippet to be run in the browser console to extract all header IDs from a deprecated page. These IDs can be used to create more specific redirects in the deprecation_redirects array.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/Deprecating a page.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelectorAll(\".markdown h2, .markdown h3\").forEach(h => console.log(h.id))\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for TypeScript 5.2 Release Notes Page\nDESCRIPTION: This YAML front matter defines metadata for the TypeScript 5.2 release notes page. It specifies the title, layout, permalink, and a one-line description for the page.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.2.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: TypeScript 5.2\nlayout: docs\npermalink: /docs/handbook/release-notes/typescript-5-2.html\noneline: TypeScript 5.2 Release Notes\n---\n```\n\n----------------------------------------\n\nTITLE: References to const enum Members in TypeScript\nDESCRIPTION: This example shows how const enum members are referenced in TypeScript code. During normal TypeScript compilation, these references are replaced with their literal values.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/isolatedModules.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Build Commands\nDESCRIPTION: Examples of various tsc build commands using the -b flag\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Project References.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n > tsc -b                            # Use the tsconfig.json in the current directory\n > tsc -b src                        # Use src/tsconfig.json\n > tsc -b foo/prd.tsconfig.json bar  # Use foo/prd.tsconfig.json and bar/tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Conditional Resource Acquisition with Using Declaration in TypeScript\nDESCRIPTION: This example shows how to conditionally acquire resources with a 'using' declaration. It demonstrates that null or undefined values are safely handled without disposal.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  using x = b ? new C() : null;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the need for preserveValueImports in TypeScript\nDESCRIPTION: This example shows a case where TypeScript cannot detect that an import is being used because it's referenced inside an eval() statement. Without preserveValueImports, TypeScript would remove the Animal import as it appears unused.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/preserveValueImports.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Animal } from \"./animal.js\";\n\neval(\"console.log(new Animal().isDangerous())\");\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the TypeScript Website Repository\nDESCRIPTION: Command sequence for cloning the TypeScript website repository, installing dependencies, and starting the development environment. It shows the complete setup process including optional steps for syncing translations.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/microsoft/TypeScript-website\ncd TypeScript-website\npnpm install\ncode .\n\n# Then:\npnpm bootstrap\n# Optional, grab the translations:\npnpm docs-sync pull microsoft/TypeScript-Website-localizations#main 1\n\n# Now you can start up the website\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Gulp CLI Globally\nDESCRIPTION: Shell command to install the Gulp command-line interface globally, enabling the use of the gulp command in the terminal.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g gulp-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @typescript/sandbox v0.1.5\nDESCRIPTION: Shows the patch changes for version 0.1.5, including handling of .d.cts and .d.mts files, and updates to dependencies.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.5\n\n### Patch Changes\n\n- [#3000](https://github.com/microsoft/TypeScript-Website/pull/3000) [`71776ae`](https://github.com/microsoft/TypeScript-Website/commit/71776aecc1b56289ab56d240a9272ce83686ef1a) Thanks [@antfu](https://github.com/antfu)! - Handle `.d.cts` and `.d.mts` files\n\n- Updated dependencies [[`0ea84b5`](https://github.com/microsoft/TypeScript-Website/commit/0ea84b59ae291aba677fe77ca059c4112e45fb9b), [`7691811`](https://github.com/microsoft/TypeScript-Website/commit/7691811c180e3b352cf4e888387d1edfc10f5252), [`0ea84b5`](https://github.com/microsoft/TypeScript-Website/commit/0ea84b59ae291aba677fe77ca059c4112e45fb9b), [`6168ef4`](https://github.com/microsoft/TypeScript-Website/commit/6168ef49a4d08c0b5658732d23625bbcc6049109), [`9f8dea2`](https://github.com/microsoft/TypeScript-Website/commit/9f8dea2c19a3b6028148090f5e8cba8eea086ec3), [`26f3e56`](https://github.com/microsoft/TypeScript-Website/commit/26f3e566aa8fff235a8f6927ef2c33b28be4fe89), [`71776ae`](https://github.com/microsoft/TypeScript-Website/commit/71776aecc1b56289ab56d240a9272ce83686ef1a), [`fd776c0`](https://github.com/microsoft/TypeScript-Website/commit/fd776c05bb8fa9c897d18fa237af39ae8da03a7c)]:\n  - @typescript/vfs@1.5.3\n  - @typescript/ata@0.9.6\n```\n\n----------------------------------------\n\nTITLE: Importing UMD Module Example in TypeScript\nDESCRIPTION: Demonstrates how to import and use a UMD module like Moment.js in TypeScript using the import statement.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport moment = require(\"moment\");\nconsole.log(moment.format());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript import and reference directives\nDESCRIPTION: This snippet shows examples of import and reference directives that TypeScript typically resolves. When 'noResolve' is set, these directives won't automatically add files to the project.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noResolve.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Something } from './other-file';\n<reference path=\"./declaration-file.d.ts\" />\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Namespace Usage with Modules in TypeScript\nDESCRIPTION: An example of needlessly wrapping exported module classes in a namespace, which creates an extra layer of nesting for module consumers.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Namespaces and Modules.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace Shapes {\n  export class Triangle {\n    /* ... */\n  }\n  export class Square {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for TypeScript Completeness Documentation\nDESCRIPTION: YAML front matter block defining display text for the Completeness configuration option in TypeScript documentation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Completeness_6257.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndisplay: \"Completeness\"\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Internationalized Navigation Bar in TypeScript React\nDESCRIPTION: This code snippet demonstrates the usage of i18n primitives 'IntlLink' and 'i()' function in a React component for the top navigation bar. It shows how to create localized navigation links.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/How i18n Works For Site Copy.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// prettier-ignore\n<nav role=\"navigation\">\n  <ul>\n    <li className=\"nav-item hide-small\"><IntlLink to=\"/download\">{i(\"nav_download\")}</IntlLink></li>\n    <li className=\"nav-item\"><IntlLink to=\"/docs/home\"><span>{i(\"nav_documentation_short\")}</span></IntlLink></li>\n    <li className=\"nav-item show-only-large\"><IntlLink to=\"/docs/handbook/intro.html\">{i(\"nav_handbook\")}</IntlLink></li>\n    <li className=\"nav-item\"><IntlLink to=\"/community\">{i(\"nav_community\")}</IntlLink></li>\n    <li className=\"nav-item show-only-largest\"><IntlLink to=\"/play\">{i(\"nav_playground\")}</IntlLink></li>\n    <li className=\"nav-item\"><IntlLink to=\"/tools\">{i(\"nav_tools\")}</IntlLink></li>\n  </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Caching Tagged Template Objects in TypeScript Modules\nDESCRIPTION: Demonstrates the new behavior in TypeScript 2.6 for caching tagged template objects in modules, aligning with the ECMAScript spec.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 2.6.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function id(x: TemplateStringsArray) {\n  return x;\n}\n\nexport function templateObjectFactory() {\n  return id`hello world`;\n}\n\nlet result = templateObjectFactory() === templateObjectFactory(); // true in TS 2.6\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar __makeTemplateObject =\n  (this && this.__makeTemplateObject) ||\n  function(cooked, raw) {\n    if (Object.defineProperty) {\n      Object.defineProperty(cooked, \"raw\", { value: raw });\n    } else {\n      cooked.raw = raw;\n    }\n    return cooked;\n  };\n\nfunction id(x) {\n  return x;\n}\n\nvar _a;\nfunction templateObjectFactory() {\n  return id(\n    _a || (_a = __makeTemplateObject([\"hello world\"], [\"hello world\"]))\n  );\n}\n\nvar result = templateObjectFactory() === templateObjectFactory();\n```\n\n----------------------------------------\n\nTITLE: Error Example with noUncheckedSideEffectImports in TypeScript\nDESCRIPTION: Demonstrates the error message produced when trying to import a non-existent module with noUncheckedSideEffectImports enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"oops-this-module-does-not-exist\";\n//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// error: Cannot find module 'oops-this-module-does-not-exist' or its corresponding\n//        type declarations.\n```\n\n----------------------------------------\n\nTITLE: Running Twoslash Tests with pnpm\nDESCRIPTION: Command to execute Twoslash tests using pnpm, which creates Jest snapshots for integration testing. Tests are run specifically for the @typescript/twoslash package.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/ts-twoslasher/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter=@typescript/twoslash test\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @typescript/sandbox v0.1.6\nDESCRIPTION: Shows the patch changes for version 0.1.6, which includes updates to the @typescript/vfs dependency.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.6\n\n### Patch Changes\n\n- Updated dependencies [[`441338c`](https://github.com/microsoft/TypeScript-Website/commit/441338c04fbbef834ffa1ac6dc0dc8816e9137fc), [`725841a`](https://github.com/microsoft/TypeScript-Website/commit/725841adc9e5b734ccb0663fccb2ba05d0dcca62)]:\n  - @typescript/vfs@1.6.0\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Example for inlineSources Demonstration\nDESCRIPTION: A simple TypeScript code example used to demonstrate the inlineSources compiler option effect.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/inlineSources.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: React 17 Production JSX Configuration\nDESCRIPTION: TSConfig setup for React 17 JSX transformation in production builds using the new react-jsx option.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.1.md#2025-04-20_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"target\": \"es2015\",\n    \"jsx\": \"react-jsx\",\n    \"strict\": true\n  },\n  \"include\": [\"./**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Properties Error with Erasable Syntax Mode\nDESCRIPTION: Example showing how the TypeScript compiler flags parameter properties in class constructors as errors when using the --erasableSyntaxOnly flag since they have runtime implications.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/erasableSyntaxOnly.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n    constructor(public x: number) { }\n    //          ~~~~~~~~~~~~~~~~\n    // error! This syntax is not allowed when 'erasableSyntaxOnly' is enabled.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Const Declarations and Mutability in TypeScript\nDESCRIPTION: This snippet illustrates the use of const declarations and shows that while the binding is immutable, the internal state of an object can still be modified.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst numLivesForCat = 9;\nconst kitty = {\n  name: \"Aurora\",\n  numLives: numLivesForCat,\n};\n\n// Error\nkitty = {\n  name: \"Danielle\",\n  numLives: numLivesForCat,\n};\n\n// all \"okay\"\nkitty.name = \"Rory\";\nkitty.name = \"Kitty\";\nkitty.name = \"Cat\";\nkitty.numLives--;\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Root in TypeScript tsconfig.json\nDESCRIPTION: This snippet demonstrates how to set the 'sourceRoot' option in a TypeScript configuration file. It specifies a URL where debuggers should look for TypeScript source files, instead of using relative paths.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/sourceRoot.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"sourceRoot\": \"https://my-website.com/debug/source/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio 2015 for TypeScript Nightly Build\nDESCRIPTION: This PowerShell command configures Visual Studio 2015 to use the installed nightly build of TypeScript. It uses the VSDevMode.ps1 script to set up the custom language service.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/Nightly Builds.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nVSDevMode.ps1 14 -tsScript <path to your folder>/node_modules/typescript/lib\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for JavaScript Runtime Documentation\nDESCRIPTION: YAML frontmatter defining the display name and tags for a documentation page about JavaScript runtime in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndisplay: \"JavaScript Runtime\"\ntags: javascript\n---\n```\n\n----------------------------------------\n\nTITLE: Validating TSConfig Reference Documentation\nDESCRIPTION: Commands for testing and linting the TSConfig reference documentation. It includes options for running all tests, only the linter, or linting a specific document.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter=tsconfig-reference test\n\n# or to just run the linter without a build\npnpm run --filter=tsconfig-reference lint\n\n# or to just one one linter for a single doc\npnpm run --filter=tsconfig-reference lint resolveJson\n```\n\n----------------------------------------\n\nTITLE: Schema Store Update Commands\nDESCRIPTION: Shell commands for updating the TypeScript configuration schema in the SchemaStore repository.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/docs/New TypeScript Version.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Clone a copy and move in new file\ngh repo clone https://github.com/SchemaStore/schemastore.git /tmp/schemastore\ncp packages/tsconfig-reference/scripts/schema/result/schema.json /tmp/schemastore/src/schemas/json/tsconfig.json\n\n# Go in and set up the changes\ncd /tmp/schemastore\ngh repo fork\ngit add .\ngit commit -m \"Update tsconfig.json schema\"\n\n# Validate it didn't break\ncd src\nnpm ci\nnpm run build\n\n# Shippit\ngh pr create --web\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Source Code Example\nDESCRIPTION: A simple TypeScript code example showing basic string declaration and console logging.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/inlineSourceMap.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n```\n\n----------------------------------------\n\nTITLE: Configuring Linked Editing in VS Code Settings\nDESCRIPTION: JSON configuration to enable linked editing feature for JSX tags in Visual Studio Code. This setting allows for simultaneous editing of matching JSX tags.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.1.md#2025-04-20_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // ...\n    \"editor.linkedEditing\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for TypeScript Compiler Docs\nDESCRIPTION: YAML frontmatter defining the display title for a documentation page about TypeScript compiler diagnostics\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/categories/Compiler_Diagnostics_6251.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Compiler Diagnostics\"\n---\n```\n\n----------------------------------------\n\nTITLE: TSConfig with explainFiles Configuration\nDESCRIPTION: Configuration example showing how to enable the explainFiles option in tsconfig.json.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/explainFiles.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"explainFiles\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Syntax (Not Supported)\nDESCRIPTION: Shows an alternative import syntax that is not supported in TypeScript, where the module path is specified before the imported items.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nfrom \"./module.js\" import { func };\n```\n\n----------------------------------------\n\nTITLE: Generating TSConfig Reference Workflow\nDESCRIPTION: Illustrates the process flow for generating TSConfig reference documentation, starting from the TypeScript compiler and resulting in markdown output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nTypeScript Compiler + `tsconfigRules.ts` -> `generateJSON.ts` -> JSON (in output) -> `generateMarkdown.ts` -> Markdown (in output)\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Environment for TypeScript Playground Plugin\nDESCRIPTION: Command to start a development environment that sets up both Rollup for JavaScript generation and Serve for hosting the plugin locally.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/create-typescript-playground-plugin/template/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp with Terser for TypeScript minification\nDESCRIPTION: Gulp configuration file that sets up a build pipeline for TypeScript using browserify, tsify, and terser for minification while preserving sourcemaps.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar browserify = require(\"browserify\");\nvar source = require(\"vinyl-source-stream\");\nvar terser = require(\"gulp-terser\");\nvar tsify = require(\"tsify\");\nvar sourcemaps = require(\"gulp-sourcemaps\");\nvar buffer = require(\"vinyl-buffer\");\nvar paths = {\n  pages: [\"src/*.html\"],\n};\n\ngulp.task(\"copy-html\", function () {\n  return gulp.src(paths.pages).pipe(gulp.dest(\"dist\"));\n});\n\ngulp.task(\n  \"default\",\n  gulp.series(gulp.parallel(\"copy-html\"), function () {\n    return browserify({\n      basedir: \".\",\n      debug: true,\n      entries: [\"src/main.ts\"],\n      cache: {},\n      packageCache: {},\n    })\n      .plugin(tsify)\n      .bundle()\n      .pipe(source(\"bundle.js\"))\n      .pipe(buffer())\n      .pipe(sourcemaps.init({ loadMaps: true }))\n      .pipe(terser())\n      .pipe(sourcemaps.write(\"./\"))\n      .pipe(gulp.dest(\"dist\"));\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Compiler Option: Verbose\nDESCRIPTION: This markdown snippet defines the 'verbose' compiler option for TypeScript. It specifies the display name, a one-line description, and provides a brief explanation of the option's functionality.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/verbose.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Verbose\"\noneline: \"Enable verbose logging.\"\n---\n\nEnable verbose logging\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Documentation\nDESCRIPTION: YAML frontmatter configuration block defining the display name and one-line description for the 'out' compiler option documentation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/out.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndisplay: \"Out\"\noneline: \"Deprecated setting. Use [`outFile`](#outFile) instead.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrectly using 'this' in callbacks in TypeScript\nDESCRIPTION: This example demonstrates an error that occurs when passing a method that uses 'this' to a callback expecting 'this: void'. The onClickBad method requires a Handler instance context, but addClickListener expects a function that doesn't use 'this', causing a type error.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v1/Functions.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Handler {\n  info: string;\n  onClickBad(this: Handler, e: Event) {\n    // oops, used `this` here. using this callback would crash at runtime\n    this.info = e.message;\n  }\n}\n\nlet h = new Handler();\nuiElement.addClickListener(h.onClickBad); // error!\n```\n\n----------------------------------------\n\nTITLE: Implementing a Module Plugin Declaration File\nDESCRIPTION: Template for creating a declaration file for a module plugin. This example extends the 'super-greeter' module by adding a new method using declaration merging.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module plugin template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ On this line, import the module which this module adds to */\nimport { greeter } from \"super-greeter\";\n\n/*~ Here, declare the same module as the one you imported above\n *~ then we expand the existing declaration of the greeter function\n */\nexport module \"super-greeter\" {\n  export interface GreeterFunction {\n    /** Greets even better! */\n    hyperGreet(): void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stricter Checks with Template String Expressions in Generic Functions\nDESCRIPTION: Examples showing how TypeScript 4.7 adds stricter checks when using template strings with potential symbol values, including in generic contexts where the type might be a symbol.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.7.md#2025-04-20_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nfunction logKey<S extends string | symbol>(key: S): S {\n    // Now an error.\n    console.log(`${key} is the key`);\n    return key;\n}\n\nfunction get<T, K extends keyof T>(obj: T, key: K) {\n    // Now an error.\n    console.log(`Grabbing property '${key}'.`);\n    return obj[key];\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unsupported Constructs with --erasableSyntaxOnly in TypeScript\nDESCRIPTION: This TypeScript snippet showcases various language constructs that are not supported when using the new --erasableSyntaxOnly flag introduced in TypeScript 5.8.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.8.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ error: An `import ... = require(...)` alias\nimport foo = require(\"foo\");\n\n// ❌ error: A namespace with runtime code.\nnamespace container {\n}\n\n// ❌ error: An `import =` alias\nimport Bar = container.Bar;\n\nclass Point {\n    // ❌ error: Parameter properties\n    constructor(public x: number, public y: number) { }\n}\n\n// ❌ error: An `export =` assignment.\nexport = Point;\n\n// ❌ error: An enum declaration.\nenum Direction {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping TypeScript Input Files to JavaScript Output Files\nDESCRIPTION: This diagram illustrates the compilation process from TypeScript to JavaScript, showing how input .ts files are mapped to output .js files and their import relationships.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/diagrams/theory.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Output files\n    main.js\n    style main.js stroke-dasharray: 5 5\n    math.js\n    style math.js stroke-dasharray: 5 5\n  end\n  subgraph Input files\n    main.ts\n    math.ts\n  end\n  main.ts -. Map to output .-> main.js\n  main.js -- \"#quot;./math#quot;\" --> math.js\n  math.js -. Map to input .-> math.ts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Global-Modifying Module Usage in JavaScript\nDESCRIPTION: Example of how a global-modifying module is used in JavaScript. Shows the require call pattern and how it modifies built-in types like String and Array by adding new methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 'require' call that doesn't use its return value\nvar unused = require(\"magic-string-time\");\n/* or */\nrequire(\"magic-string-time\");\n\nvar x = \"hello, world\";\n// Creates new methods on built-in types\nconsole.log(x.startsWithHello());\n\nvar y = [1, 2, 3];\n// Creates new methods on built-in types\nconsole.log(y.reverseAndSort());\n```\n\n----------------------------------------\n\nTITLE: AMD Module Format in JavaScript\nDESCRIPTION: Illustrates the AMD (Asynchronous Module Definition) module format, designed for loaders like RequireJS. It includes dynamic imports and exports.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\ndefine([\"require\", \"exports\", \"mod\", \"mod\"], function (require, exports, mod_1, mod) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.e1 = void 0;\n    const dynamic = new Promise((resolve_1, reject_1) => { require([\"mod\"], resolve_1, reject_1); });\n\n    console.log(mod_1.default, mod_1.y, mod_1.z, mod, dynamic);\n    exports.e1 = 0;\n    exports.default = \"default export\";\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces with Strict Null Checks in TypeScript\nDESCRIPTION: This code snippet illustrates how the 'strict' compiler option affects interface definitions. It shows an example that would only produce an error when 'strictNullChecks' is enabled.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Super {\n  foo: string;\n}\nexport interface Sub extends Super {\n  foo: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Producing CommonJS Output from .mts File in TypeScript 5.5\nDESCRIPTION: This snippet demonstrates how it was possible to produce CommonJS output from a .mts file in TypeScript 5.5. This behavior is no longer allowed in TypeScript 5.6, where .mts files never emit CommonJS output.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.6.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// main.mts\nexport default \"oops\";\n\n// $ tsc --module commonjs main.mts\n// main.mjs\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = \"oops\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Patterns in package.json\nDESCRIPTION: This package.json snippet shows how to use subpath patterns in the 'imports' field to map multiple internal paths. It uses wildcards to match and map internal paths to their corresponding output files.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"imports\": {\n    \"#internal/*\": {\n      \"import\": \"./dist/internal/*.mjs\",\n      \"require\": \"./dist/internal/*.cjs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent TypeScript code with explicit metadata decorators\nDESCRIPTION: An example showing how the TypeScript compiler injects design-time type information using the @Reflect.metadata decorator, equivalent to the previous example.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Decorators.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass Line {\n  private _start: Point;\n  private _end: Point;\n\n  @validate\n  @Reflect.metadata(\"design:type\", Point)\n  set start(value: Point) {\n    this._start = value;\n  }\n  get start() {\n    return this._start;\n  }\n\n  @validate\n  @Reflect.metadata(\"design:type\", Point)\n  set end(value: Point) {\n    this._end = value;\n  }\n  get end() {\n    return this._end;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decorator Placement Before and After TypeScript 4.8\nDESCRIPTION: These examples show the difference in decorator placement according to the current TC39 proposal. Previously, decorators were placed before all keywords/modifiers, but the new syntax requires decorators to come after the export keyword.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.8.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@decorator\nexport class Foo {\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport @decorator class Foo {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index Signatures in Types and Interfaces\nDESCRIPTION: Demonstrates how to define index signatures in both type aliases and interfaces. Shows how index signatures allow for additional number-typed properties beyond explicitly defined fields.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/index-signatures.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MathConstants = {\n  pi: 3.14159;\n  phi: 1.61803;\n\n  [key: string]: number;\n};\n\ninterface ModernConstants {\n  taniguchi: 0.6782344919;\n  raabe: 0.9189385332;\n\n  [key: string]: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Gulp Build Configuration\nDESCRIPTION: Gulp tasks for cleaning and copying TypeScript/JavaScript files to wwwroot\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/ASP.NET Core.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/// <binding AfterBuild='default' Clean='clean' />\n/*\nThis file is the main entry point for defining Gulp tasks and using Gulp plugins.\nClick here to learn more. http://go.microsoft.com/fwlink/?LinkId=518007\n*/\n\nvar gulp = require(\"gulp\");\nvar del = require(\"del\");\n\nvar paths = {\n  scripts: [\"scripts/**/*.js\", \"scripts/**/*.ts\", \"scripts/**/*.map\"],\n};\n\ngulp.task(\"clean\", function () {\n  return del([\"wwwroot/scripts/**/*\"]);\n});\n\ngulp.task(\"default\", function (done) {\n    gulp.src(paths.scripts).pipe(gulp.dest(\"wwwroot/scripts\"));\n    done();\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect use of paths for node_modules packages\nDESCRIPTION: This example shows the problematic configuration of using paths to point to node_modules packages, which bypasses package.json exports and can cause runtime failures.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"pkg\": [\"./node_modules/pkg/dist/index.d.ts\"],\n      \"pkg/*\": [\"./node_modules/pkg/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting All Requests to a Subdirectory with typesVersions\nDESCRIPTION: This example demonstrates how to use the 'typesVersions' field in package.json to redirect TypeScript's resolution process to a version-specific subdirectory.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg\",\n  \"version\": \"1.0.0\",\n  \"types\": \"./index.d.ts\",\n  \"typesVersions\": {\n    \">=3.1\": {\n      \"*\": [\"ts3.1/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Type Inference with Template Strings in TypeScript\nDESCRIPTION: Demonstrates TypeScript's improved type inference with template strings when using generic constraints. This allows for better type preservation in functions that work with string types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.3.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let s: string;\ndeclare function f<T extends string>(x: T): T;\n\n// Previously: string\n// Now       : `hello ${string}`\nlet x2 = f(`hello ${s}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript to List Files in tsconfig.json\nDESCRIPTION: This snippet shows how to enable the 'listFiles' option in a TypeScript configuration file. When set to true, it instructs the TypeScript compiler to print the names of all files included in the compilation process.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/listFiles.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"listFiles\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for TypeScript Nightly Build\nDESCRIPTION: This JSON snippet shows how to update the VS Code settings to use the installed nightly build of TypeScript. It specifies the path to the TypeScript library in the node_modules folder.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/Nightly Builds.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.tsdk\": \"<path to your folder>/node_modules/typescript/lib\"\n```\n\n----------------------------------------\n\nTITLE: Using @readonly Modifier in JavaScript Classes\nDESCRIPTION: This snippet demonstrates how to use the @readonly modifier in JavaScript classes to ensure that a property is only written to during initialization.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/javascript/JSDoc Reference.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2540\n// @ts-check\n\nclass Car {\n  constructor() {\n    /** @readonly */\n    this.identifier = 100;\n  }\n\n  printIdentifier() {\n    console.log(this.identifier);\n  }\n}\n\nconst c = new Car();\nconsole.log(c.identifier);\n```\n\n----------------------------------------\n\nTITLE: Using IIFE to Capture Loop Variables in TypeScript\nDESCRIPTION: This snippet demonstrates how to use an Immediately Invoked Function Expression (IIFE) to capture the current state of a loop variable in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/Variable Declarations.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfor (var i = 0; i < 10; i++) {\n  // capture the current state of 'i'\n  // by invoking a function with its current value\n  (function (i) {\n    setTimeout(function () {\n      console.log(i);\n    }, 100 * i);\n  })(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Structural Type System with Generics Example\nDESCRIPTION: Illustrates TypeScript's structural type system compatibility checks with both simple interfaces and generic types.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.6.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Source {\n  prop: string;\n}\n\ninterface Target {\n  prop: number;\n}\n\nfunction check(source: Source, target: Target) {\n  target = source;\n  // error!\n  // Type 'Source' is not assignable to type 'Target'.\n  //   Types of property 'prop' are incompatible.\n  //     Type 'string' is not assignable to type 'number'.\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Ghost Object with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'declare' keyword to inform TypeScript about the existence of a 'ghost' object with a 'boo' method, without actually implementing it.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/declare.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Declare that a ghost exists, and that it has a function called \"boo\"\ndeclare const ghost: { boo: () => void };\n\nghost.boo();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Module Resolution\nDESCRIPTION: This tsconfig.json snippet shows the compiler options necessary for enabling advanced module resolution features in TypeScript, including 'imports' resolution and output remapping.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node16\",\n    \"resolvePackageJsonImports\": true,\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Excess Property Checks in Union Types\nDESCRIPTION: Shows how TypeScript 3.5 improves excess property checks in union types, catching incorrectly typed properties that were previously allowed.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.5.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype Label = {\n  name: string;\n};\n\nconst thing: Point | Label = {\n  x: 0,\n  y: 0,\n  name: true // uh-oh!\n};\n```\n\n----------------------------------------\n\nTITLE: HTMLElementTagNameMap Interface Excerpt\nDESCRIPTION: An excerpt from the HTMLElementTagNameMap interface that maps HTML tag names to their corresponding TypeScript interfaces. This enables type-specific element creation in TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/DOM Manipulation.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HTMLElementTagNameMap {\n    \"a\": HTMLAnchorElement;\n    \"abbr\": HTMLElement;\n    \"address\": HTMLElement;\n    \"applet\": HTMLAppletElement;\n    \"area\": HTMLAreaElement;\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @typescript/sandbox v0.1.8\nDESCRIPTION: Shows the patch changes for version 0.1.8, which includes an update to the @typescript/vfs dependency.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/sandbox/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.8\n\n### Patch Changes\n\n- Updated dependencies [[`4a30b02`](https://github.com/microsoft/TypeScript-Website/commit/4a30b022bc0c1df6b6abb71c99c104f3b19f2c91)]:\n  - @typescript/vfs@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Elision in TypeScript\nDESCRIPTION: This snippet shows how TypeScript's default behavior of removing unused imports can be problematic in certain scenarios, such as when using eval.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 4.5.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Animal } from \"./animal.js\";\n\neval(\"console.log(new Animal().isDangerous())\");\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Usage with Preact in TypeScript\nDESCRIPTION: Demonstrates a simple TypeScript React component using Preact's JSX syntax. This snippet shows the basic structure of a functional component returning JSX.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsxFactory.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h } from \"preact\";\n\nconst HelloWorld = () => <div>Hello</div>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: TSConfig file specifying TypeScript compiler options including error handling and source map generation\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/ASP.NET Core.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noEmitOnError\": true,\n    \"noImplicitAny\": true,\n    \"sourceMap\": true,\n    \"target\": \"es6\"\n  },\n  \"files\": [\"./app.ts\"],\n  \"compileOnSave\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from 'typescript' in ECMAScript Modules (TypeScript)\nDESCRIPTION: Demonstrates the improved support for named imports from the 'typescript' package when using ECMAScript modules in Node.js.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 5.5.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSourceFile } from \"typescript\"; // ✅ works now!\n\nimport * as ts from \"typescript\";\nts.createSourceFile // ✅ works now!\n```\n\n----------------------------------------\n\nTITLE: Installing Type Declarations for NPM Packages\nDESCRIPTION: NPM command to install TypeScript type declarations for a third-party package (using lodash as an example), which provides type information for improved development experience.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Migrating from JavaScript.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -S @types/lodash\n```\n\n----------------------------------------\n\nTITLE: Global Plugin Usage Example\nDESCRIPTION: Shows how global plugins extend built-in types with new methods.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = \"hello, world\";\n// Creates new methods on built-in types\nconsole.log(x.startsWithHello());\n\nvar y = [1, 2, 3];\n// Creates new methods on built-in types\nconsole.log(y.reverseAndSort());\n```\n\n----------------------------------------\n\nTITLE: Installing Babel with Gulp dependencies\nDESCRIPTION: Command to install Babelify and related dependencies for transpiling TypeScript to ES5 while preserving sourcemaps.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babelify@8 babel-core babel-preset-es2015 vinyl-buffer gulp-sourcemaps\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Import Error Example\nDESCRIPTION: Shows TypeScript's error message when attempting to import a non-module entity using namespace import syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as hello from \"./exports-function\";\n// TS2497              ^^^^^^^^^^^^^^^^^^^^\n// External module '\"./exports-function\"' resolves to a non-module entity\n// and cannot be imported using this construct.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Sample Function Implementation\nDESCRIPTION: Example TypeScript function that retrieves and formats values from HTML input elements\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/ASP.NET Core.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sayHello() {\n  const compiler = (document.getElementById(\"compiler\") as HTMLInputElement)\n    .value;\n  const framework = (document.getElementById(\"framework\") as HTMLInputElement)\n    .value;\n  return `Hello from ${compiler} and ${framework}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Construct ReadonlyArray in TypeScript\nDESCRIPTION: Shows that unlike Array, there is no ReadonlyArray constructor available. This example demonstrates the error encountered when attempting to use ReadonlyArray as a constructor.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/handbook-v2/Object Types.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2693\nnew ReadonlyArray(\"red\", \"green\", \"blue\");\n```\n\n----------------------------------------\n\nTITLE: Module Class Usage Example\nDESCRIPTION: Demonstrates using a module that can be instantiated with the new operator.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = require(\"bar\");\n// Note: using 'new' operator on the imported variable\nvar y = new x(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Running TSConfig Reference Generation Scripts\nDESCRIPTION: Commands to generate JSON data and markdown documentation for the TSConfig reference. These scripts should be run from the root of the repository.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter=tsconfig-reference generate-json\n\npnpm run --filter=tsconfig-reference generate-markdown\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript and Gulp Dependencies\nDESCRIPTION: Shell command to install TypeScript, Gulp, and gulp-typescript as development dependencies. gulp-typescript is a Gulp plugin for TypeScript compilation.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/tutorials/Gulp.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev typescript gulp@4.0.0 gulp-typescript\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Component Example in TypeScript\nDESCRIPTION: A simple TypeScript/JSX component that renders a heading element. This is the base example used to demonstrate different JSX transformation options.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/jsx.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const HelloWorld = () => <h1>Hello world</h1>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error for Unmapped Imports\nDESCRIPTION: Example of a TypeScript error when importing from a module that isn't explicitly mapped in the paths configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {} from \"lodash\";\n//             ^^^^^^^^\n// File '/project/empty-file.ts' is not a module. ts(2306)\n```\n\n----------------------------------------\n\nTITLE: Using import() Types in JSDoc Comments\nDESCRIPTION: Example showing how to use import() type syntax in JSDoc comments in JavaScript files where import declarations aren't possible.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/** @type {import(\"webpack\").Configuration} */\nmodule.exports = {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Module Specifier Example with .mjs Extension\nDESCRIPTION: Demonstrates how module specifiers remain unchanged during transformation, regardless of the output module format.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Theory.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { add } from \"./math.mjs\";\nadd(1, 2);\n```\n\n----------------------------------------\n\nTITLE: TypeScript createElement JSX Configuration\nDESCRIPTION: XML element and CLI flag for specifying the object invoked for createElement when targeting React JSX emit.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<TypeScriptJSXFactory>\n```\n\n----------------------------------------\n\nTITLE: TSConfig with Comments - JSON\nDESCRIPTION: Example of tsconfig.json file showing support for comments in configuration.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 1.8.md#2025-04-20_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2015\", // running on node v5, yaay!\n    \"sourceMap\": true // makes debugging easier\n  },\n  /*\n   * Excluded files\n   */\n  \"exclude\": [\"file.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CommonJS Exports with require()\nDESCRIPTION: Illustrates how to access default exports in vanilla CommonJS using require() with the .default property.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst pkg = require(\"pkg\");\npkg.default();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Example\nDESCRIPTION: Examples of TypeScript configuration values referenced in the context of dual-emit solutions, including verbatimModuleSyntax and module settings.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"verbatimModuleSyntax\": true,\n  \"module\": \"esnext\"\n}\n```\n\n----------------------------------------\n\nTITLE: Preserve Module Format Example\nDESCRIPTION: Example of preserve module format which maintains both ECMAScript imports and CommonJS require statements.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/Reference.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @Filename: main.ts\nimport x, { y, z } from \"mod\";\nimport mod = require(\"mod\");\nconst dynamic = import(\"mod\");\n\nexport const e1 = 0;\nexport default \"default export\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// @Filename: main.js\nimport x, { y, z } from \"mod\";\nconst mod = require(\"mod\");\nconst dynamic = import(\"mod\");\n\nexport const e1 = 0;\nexport default \"default export\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypeScript Playground Plugin Development Environment\nDESCRIPTION: Shell commands for cloning the repository, installing dependencies, and starting the development server for a TypeScript playground plugin.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/create-typescript-playground-plugin/template/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone ...\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Basic Project Structure Example\nDESCRIPTION: Example directory structure showing a TypeScript project with implementation and test files\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Project References.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n├── src/\n│   ├── converter.ts\n│   └── units.ts\n├── test/\n│   ├── converter-tests.ts\n│   └── units-tests.ts\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Using Value-based Components in JSX\nDESCRIPTION: Example showing how to use imported components in JSX, where components must be in scope to be recognized by TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/reference/JSX.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport MyComponent from \"./myComponent\";\n\n<MyComponent />; // ok\n<SomeOtherComponent />; // error\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for ES Module\nDESCRIPTION: The TypeScript declaration equivalent for an ES Module export, showing how declaration syntax closely mirrors ES Module syntax.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/templates/module.d.ts.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getArrayLength(arr: any[]): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Object Structure in TypeScript\nDESCRIPTION: Example of a JavaScript object with string properties representing a house address.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/glossary/copy/en/shape.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst house = {\n  name: \"Shibden hall\",\n  road: \"Lister's Road\",\n  town: \"Halifax\",\n  county: \"West Yorkshire\",\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration File Example Path\nDESCRIPTION: Example path reference showing where to add a tsconfig.json configuration file in the project structure.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"tsconfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Exporting JavaScript Module\nDESCRIPTION: Example of a JavaScript file exporting a constant value that will be imported into TypeScript.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/tsconfig-reference/copy/en/options/allowJs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename: card.js\nexport const defaultCardDeck = \"Heart\";\n```\n\n----------------------------------------\n\nTITLE: Optional Elements in Tuple Types\nDESCRIPTION: Demonstrates the usage of optional elements in tuple types using the ? modifier.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/release-notes/TypeScript 3.0.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet t: [number, string?, boolean?];\nt = [42, \"hello\", true];\nt = [42, \"hello\"];\nt = [42];\n```\n\n----------------------------------------\n\nTITLE: Global Library Function Declaration\nDESCRIPTION: Demonstrates a simple global library function that creates a greeting.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/Library Structures.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createGreeting(s) {\n  return \"Hello, \" + s;\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Import Syntax in TypeScript\nDESCRIPTION: Demonstrates the older TypeScript import syntax for CommonJS modules using require.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello = require(\"./exports-function\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp with TypeScript\nDESCRIPTION: Setup instructions for using Gulp with TypeScript using gulp-typescript plugin.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/project-config/Integrating with Build Tools.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install gulp-typescript\n```\n\nLANGUAGE: js\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar ts = require(\"gulp-typescript\");\n\ngulf.task(\"default\", function () {\n  var tsResult = gulp.src(\"src/*.ts\").pipe(\n    ts({\n      noImplicitAny: true,\n      out: \"output.js\",\n    })\n  );\n  return tsResult.js.pipe(gulp.dest(\"built/local\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in TypeScript\nDESCRIPTION: Example of calling a global function in TypeScript code.\nSOURCE: https://github.com/microsoft/typescript-website/blob/v2/packages/documentation/copy/en/declaration-files/By Example.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngreet(\"hello, world\");\n```"
  }
]