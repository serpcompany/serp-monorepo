[
  {
    "owner": "dylibso",
    "repo": "mcp.run-servlets",
    "content": "TITLE: Advanced Configuration for Perplexity Sonar API Chat in JavaScript\nDESCRIPTION: Shows an advanced configuration for the Perplexity Sonar API chat request. It includes various parameters such as model selection, system message, temperature control, token limits, and search filters.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/perplexity-sonar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"params\": {\n    \"name\": \"perplexity-chat\",\n    \"arguments\": {\n      \"model\": \"sonar\",  // Default model\n      \"messages\": [\n        {\n          \"role\": \"system\",\n          \"content\": \"Be precise and concise.\"\n        },\n        {\n          \"role\": \"user\",\n          \"content\": \"How many stars are there in our galaxy?\"\n        }\n      ],\n      \"temperature\": 0.2,\n      \"max_tokens\": 100,\n      \"top_p\": 0.9,\n      \"search_domain_filter\": [\"space.com\", \"nasa.gov\"],\n      \"return_images\": false,\n      \"return_related_questions\": true,\n      \"search_recency_filter\": \"month\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Perplexity Sonar API Response Format in JavaScript\nDESCRIPTION: Illustrates the expected response format from the Perplexity Sonar API. It includes the response ID, model used, creation timestamp, citations, AI's message, and token usage statistics.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/perplexity-sonar/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n  \"model\": \"sonar\",\n  \"object\": \"chat.completion\",\n  \"created\": 1724369245,\n  \"citations\": [\n    \"https://example.com/source1\",\n    \"https://example.com/source2\"\n  ],\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"finish_reason\": \"stop\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"The AI's response text here\"\n      }\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 14,\n    \"completion_tokens\": 70,\n    \"total_tokens\": 84\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Request with Perplexity Sonar API in JavaScript\nDESCRIPTION: Demonstrates a simple chat completion request to the Perplexity Sonar API. It includes a single user message asking about the capital of France.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/perplexity-sonar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"params\": {\n    \"name\": \"perplexity-chat\",\n    \"arguments\": {\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"What is the capital of France?\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Item with the Notion MCP Tool in JSON\nDESCRIPTION: This example demonstrates how to create a new database item using the notion_create_database_item function. It includes the required database_id parameter and a properties object that defines the item's attributes including a title field 'Name' and a select field 'Status'.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/notion/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"notion_create_database_item\",\n  \"arguments\": {\n    \"database_id\": \"your-database-id\",\n    \"properties\": {\n      \"Name\": {\n        \"title\": [\n          {\n            \"text\": {\n              \"content\": \"New Item\"\n            }\n          }\n        ]\n      },\n      \"Status\": {\n        \"select\": {\n          \"name\": \"In Progress\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Format for Wolfram Alpha LLM API\nDESCRIPTION: Example JSON structure showing how to format a query to be sent to the Wolfram Alpha LLM API. The query parameter accepts a string containing the question or prompt to be processed.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/wolfram-alpha/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"What is the speed of light?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Brave Search API Tools in Markdown\nDESCRIPTION: This snippet outlines the available search tools provided by the Brave Search API, including web search and image search capabilities. It describes the primary use case for each tool.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/brave-search/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Tools\n\n- `brave-web-search` searches the Web for content (text, image, video, etc...). \n   Generally suitable for text-based searches.\n- `brave-image-search` to search specifically for pictures.\n```\n\n----------------------------------------\n\nTITLE: QR Code Generation Request Format in TypeScript\nDESCRIPTION: Defines the expected request format for the QR code generation servlet. Takes a required 'data' parameter for the text to encode and an optional 'ecc' parameter for error correction level (1-4, defaulting to 4).\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/qr-code/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  arguments: {\n    data: \"https://example.com\",  // Required: text to encode\n    ecc: 4,                       // Optional: error correction (1-4, default 4)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents with Filesystem Servlet\nDESCRIPTION: This JSON structure is used to read the contents of a file at a specified path. It requires a 'path' parameter indicating the location of the file to be read.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/filesystem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"path/to/file.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Offset with Time Servlet in TypeScript\nDESCRIPTION: Example of using the time_offset operation to calculate a new timestamp by adding an offset to a given timestamp. This example subtracts 432000 seconds (5 days) from the given timestamp to find the date for last Sunday.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/time/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `name`: `time_offset`,\n  `time`: 1734085548,\n  `offset`: -432000\n}\n// returns:\n{\n    \"utc_time\" : \"1733653548\",\n    \"utc_time_rfc2822\" : \"Sun, 8 Dec 2024 10:25:48 +0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: File Exclusion Patterns for Gitingest Context Generation\nDESCRIPTION: A list of glob patterns to exclude from tokenization when generating context from the repository using gitingest.com. These patterns target package management files, license files, and git configuration that consume unnecessary tokens.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**/package*.json, **/go.mod, **/go.sum, **/go.work*, **/LICENSE, LICENSE, .gitignore, **/.gitignore\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Filesystem Servlet\nDESCRIPTION: This JSON structure is used to list the contents of a directory. It requires a 'path' parameter specifying the directory to be listed. The response will mark items as either [DIR] or [FILE].\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/filesystem/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"path/to/directory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Converter Request Format in TypeScript\nDESCRIPTION: Defines the expected JSON request format for the currency conversion servlet. Takes three required parameters: amount (numeric value to convert), from (source currency code), and to (target currency code).\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/currency-converter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  arguments: {\n    amount: 100,           // Required: amount to convert\n    from: \"USD\",          // Required: source currency code\n    to: \"EUR\"            // Required: target currency code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Fetch Request Parameters in TypeScript\nDESCRIPTION: Example request structure for the image fetch servlet showing required URL parameter and optional MIME type filtering.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/fetch-image/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `arguments`: {\n    `url`: `https://example.com`,  // Required: URL to fetch\n    `mime-type`: \"image/png\"       // The mime type to filter by\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BlueSky Servlet in Markdown\nDESCRIPTION: This snippet outlines the configuration parameters for the BlueSky Servlet, including the base URL, user handle, and password. It specifies default values and instructions for setting up the servlet.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/bluesky/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Config\n\n- `BASE_URL` defaults to `https://bsky.social`\n- `HANDLE` your handle\n- `PASSWORD` use an [app password](https://bsky.app/settings/app-passwords)\n```\n\n----------------------------------------\n\nTITLE: Departure Request Format for OpenSky API in JSON\nDESCRIPTION: Sample JSON payload for requesting flight departure data. The request requires specifying a request type, ICAO airport code, and time range using UNIX timestamps in UTC.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/historical-flight-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestType\": \"departure\",\n  \"airport\": \"LIMC\",\n  \"begin\": \"1701428400\",\n  \"end\": \"1701435600\"\n}\n```\n\n----------------------------------------\n\nTITLE: Supported Domains Configuration\nDESCRIPTION: Specification of supported domains for the Pantry service implementation.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/pantry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- getpantry.cloud\n```\n\n----------------------------------------\n\nTITLE: Calling Python Eval Servlet with JSON Input\nDESCRIPTION: Demonstrates how to call the Python Eval Servlet with a JSON payload containing the Python code to be executed. The code is provided as a string in the 'code' field of the 'arguments' object.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/eval-py/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"arguments\": {\n    \"code\": \"print(2 + 2)\"  // Required: Python code to evaluate\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current UTC Time with Time Servlet in TypeScript\nDESCRIPTION: Example of using the get_time_utc operation to retrieve the current UTC time. The operation takes no parameters and returns both the Unix timestamp and RFC2822 formatted time string.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/time/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `name`: `get_time_utc`\n}\n// returns:\n{\n    \"utc_time\" : \"1734085548\",\n    \"utc_time_rfc2822\" : \"Fri, 13 Dec 2024 10:25:48 +0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Eval Servlet Response in TypeScript\nDESCRIPTION: Shows the expected response format from the JavaScript Eval Servlet. The result of the evaluation is returned as a string.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/eval_js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"4\"\n```\n\n----------------------------------------\n\nTITLE: Calling JavaScript Eval Servlet in TypeScript\nDESCRIPTION: Demonstrates how to call the JavaScript Eval Servlet with input arguments. The code property contains the JavaScript expression to be evaluated.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/eval_js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  arguments: {\n    code: \"2 + 2\"  // Required: JavaScript code to evaluate\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pantry Storage\nDESCRIPTION: Configuration requirements for setting up the Pantry storage service, including the necessary PANTRY_ID parameter obtained from getpantry.cloud registration.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/pantry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `PANTRY_ID`: the ID of the pantry you want to use\n```\n\n----------------------------------------\n\nTITLE: Calling Fetch Servlet in TypeScript\nDESCRIPTION: This code snippet demonstrates how to call the Fetch Servlet with the required URL parameter. The servlet expects an object with an 'arguments' property containing a 'url' field specifying the web page to fetch and convert.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/fetch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  arguments: {\n    url: \"https://example.com\"  // Required: URL to fetch\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation of Electromagnetic Physics Calculator Functions\nDESCRIPTION: Detailed documentation of 10 electromagnetic physics calculation functions including input parameters, output formats, and error handling specifications. Functions handle various calculations from basic electrostatic forces to complex electromagnetic phenomena.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/electricity-magnetism/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Electromagnetic Physics Calculator\n\nThis module provides a collection of tools for calculating various\nelectromagnetic phenomena. Each function handles specific electromagnetic\ncalculations and returns results in standard SI units.\n\n## Available Functions\n\n### 1. Coulomb Force (`coulomb_force`)\n\nCalculates the electrostatic force between two point charges using Coulomb's\nlaw.\n\n- **Input Parameters:**\n  - `charge1`: First charge in Coulombs\n  - `position1`: Position vector of first charge (x, y, z)\n  - `charge2`: Second charge in Coulombs\n  - `position2`: Position vector of second charge (x, y, z)\n- **Output:** Force vector in Newtons\n```\n\n----------------------------------------\n\nTITLE: Specifying Domain Access for BlueSky Servlet in Markdown\nDESCRIPTION: This snippet indicates the domain that should be granted access for the BlueSky Servlet to function properly.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/bluesky/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Domains\n\nYou should grant access to `bsky.social`.\n```\n\n----------------------------------------\n\nTITLE: Extracting Window Title from JSON using JQ\nDESCRIPTION: This JSON snippet represents a complex nested structure containing widget information. The JQ expression to extract the window title would be '.widget.window.title'.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/jq/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"widget\": {\n        \"debug\": \"on\",\n        \"window\": {\n            \"title\": \"Sample Konfabulator Widget\",\n            \"name\": \"main_window\",\n            \"width\": 500,\n            \"height\": 500\n        },\n        \"image\": {\n            \"src\": \"Images/Sun.png\",\n            \"name\": \"sun1\",\n            \"hOffset\": 250,\n            \"vOffset\": 250,\n            \"alignment\": \"center\"\n        },\n        \"text\": {\n            \"data\": \"Click Here\",\n            \"size\": 36,\n            \"style\": \"bold\",\n            \"name\": \"text1\",\n            \"hOffset\": 250,\n            \"vOffset\": 100,\n            \"alignment\": \"center\",\n            \"onMouseUp\": \"sun1.opacity = (sun1.opacity / 100) * 90;\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Eval Servlet Output Example\nDESCRIPTION: Shows the expected output format of the Python Eval Servlet. In this case, it's the result of executing the Python code 'print(2 + 2)', which outputs '4'.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/eval-py/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Configuring Brave Search API Key in Markdown\nDESCRIPTION: This snippet shows how to specify the API key configuration for Brave Search. The API key is essential for authentication when making requests to the Brave Search API.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/brave-search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Config\n\n- `api-key`: see [Brave Search API Key](https://api.search.brave.com/app/keys)\n```\n\n----------------------------------------\n\nTITLE: Writing to File with Filesystem Servlet\nDESCRIPTION: This JSON structure is used to write content to a file at a specified path. It requires a 'path' parameter for the file location and a 'content' parameter for the data to be written.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/filesystem/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"path/to/file.txt\",\n  \"content\": \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Brave Search API Domain in Markdown\nDESCRIPTION: This snippet defines the domain used for making requests to the Brave Search API. It's crucial for ensuring that API calls are directed to the correct endpoint.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/brave-search/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Domains\n\n- `api.search.brave.com`\n```\n\n----------------------------------------\n\nTITLE: Searching Files with Filesystem Servlet\nDESCRIPTION: This JSON structure is used to recursively search for files matching a pattern in a given directory. It requires a 'path' parameter for the search directory and a 'pattern' parameter for the file name pattern to match.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/filesystem/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"path/to/search\",\n  \"pattern\": \"*.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Aircraft Information Request Format in JSON\nDESCRIPTION: Sample JSON payload for querying aircraft details from the ADSB DB API. The request requires the ICAO24 identifier and callsign of the aircraft, which can be obtained from OpenSky arrival/departure responses.\nSOURCE: https://github.com/dylibso/mcp.run-servlets/blob/main/servlets/historical-flight-api/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icao24\": \"440170\",\n  \"callsign\": \"EJU73BJ\"\n}\n```"
  }
]