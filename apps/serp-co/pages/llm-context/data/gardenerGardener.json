[
  {
    "owner": "gardener",
    "repo": "gardener",
    "content": "TITLE: Initiating ETCD Encryption Key Rotation in Gardener Shoot\nDESCRIPTION: This command starts the rotation process for the ETCD encryption key by annotating the Shoot resource. It triggers stages one and two of the rotation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-etcd-encryption-key-start\n```\n\n----------------------------------------\n\nTITLE: Defining ShootSpec Struct in Go\nDESCRIPTION: The ShootSpec struct defines the specification for a Shoot cluster in Gardener. It includes fields for various aspects of cluster configuration such as addons, networking, provider settings, and maintenance windows.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_44\n\nLANGUAGE: go\nCODE:\n```\ntype ShootSpec struct {\n  Addons              *Addons\n  CloudProfileName    string\n  DNS                 *DNS\n  Extensions          []Extension\n  Hibernation         *Hibernation\n  Kubernetes          Kubernetes\n  Networking          *Networking\n  Maintenance         *Maintenance\n  Monitoring          *Monitoring\n  Provider            Provider\n  Purpose             ShootPurpose\n  Region              string\n  SecretBindingName   string\n  SeedName            string\n  SeedSelector        *SeedSelector\n  Resources           []NamedResourceReference\n  Tolerations         []Toleration\n  ExposureClassName   string\n  SystemComponents    *SystemComponents\n  ControlPlane        *ControlPlane\n  SchedulerName       string\n  CloudProfile        CloudProfileReference\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WorkerKubernetes in Go\nDESCRIPTION: This snippet shows the WorkerKubernetes struct, which contains configuration for Kubernetes components related to a specific worker pool, including kubelet settings and Kubernetes version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_48\n\nLANGUAGE: go\nCODE:\n```\ntype WorkerKubernetes struct {\n  Kubelet *KubeletConfig\n  Version string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shoot Resource in Kubernetes\nDESCRIPTION: This code snippet defines the structure of a Shoot resource in the Gardener API. It represents a Kubernetes cluster created and managed by Gardener with extensive configuration options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_6\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  addons: # Optional addon configuration\n  cloudProfileName: # Optional name of CloudProfile (deprecated)\n  dns: # Optional DNS settings\n  extensions: # Optional extension configuration\n  hibernation: # Optional hibernation settings\n  kubernetes: # Kubernetes version and control plane configuration\n  networking: # Optional networking configuration (CNI, CIDRs)\n  maintenance: # Optional maintenance window configuration\n  monitoring: # Optional custom monitoring configuration\n  provider: # Provider-specific information\n  purpose: # Optional purpose class\n  region: # Name of region (immutable)\n  secretBindingName: # Optional name of SecretBinding (immutable)\n  seedName: # Optional name of seed cluster\n```\n\n----------------------------------------\n\nTITLE: Defining Shoot Cluster Resources in Gardener (YAML)\nDESCRIPTION: Defines the complete specification of a shoot cluster to be provisioned by Gardener, specifying the underlying cloud provider (AWS in this example), networking, worker pools, Kubernetes version, DNS settings, maintenance schedules, and enabled addons. The configuration also references secret bindings, volume types, and various machine/image parameters. Prerequisites include existing Gardener CRDs, a supported CloudProfile, and suitable secret bindings. Inputs are YAML-formatted resource definitions; outputs are a cluster managed by Gardener. Worker-specific taints/labels/annotations are noted as not yet implemented at the time of documentation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gardener.cloud/v1alpha1\\nkind: Shoot\\nmetadata:\\n  name: johndoe-aws\\n  namespace: garden-dev\\nspec:\\n  cloudProfileName: aws\\n  secretBindingName: core-aws\\n  cloud:\\n    type: aws\\n    region: eu-west-1\\n    providerConfig:\\n      apiVersion: aws.cloud.gardener.cloud/v1alpha1\\n      kind: InfrastructureConfig\\n      networks:\\n        vpc: # specify either 'id' or 'cidr'\\n        # id: vpc-123456\\n          cidr: 10.250.0.0/16\\n        internal:\\n        - 10.250.112.0/22\\n        public:\\n        - 10.250.96.0/22\\n        workers:\\n        - 10.250.0.0/19\\n      zones:\\n      - eu-west-1a\\n    workerPools:\\n    - name: pool-01\\n    # Taints, labels, and annotations are not yet implemented. This requires interaction with the machine-controller-manager, see\\n    # https://github.com/gardener/machine-controller-manager/issues/174. It is only mentioned here as future proposal.\\n    # taints:\\n    # - key: foo\\n    #   value: bar\\n    #   effect: PreferNoSchedule\\n    # labels:\\n    # - key: bar\\n    #   value: baz\\n    # annotations:\\n    # - key: foo\\n    #   value: hugo\\n      machineType: m4.large\\n      volume: # optional, not needed in every environment, may only be specified if the referenced CloudProfile contains the volumeTypes field\\n        type: gp2\\n        size: 20Gi\\n      providerConfig:\\n        apiVersion: aws.cloud.gardener.cloud/v1alpha1\\n        kind: WorkerPoolConfig\\n        machineImage:\\n          name: coreos\\n          ami: ami-d0dcef3\\n        zones:\\n        - eu-west-1a\\n      minimum: 2\\n      maximum: 2\\n      maxSurge: 1\\n      maxUnavailable: 0\\n  kubernetes:\\n    version: 1.11.0\\n    ...\\n  dns:\\n    provider: aws-route53\\n    domain: johndoe-aws.garden-dev.example.com\\n  maintenance:\\n    timeWindow:\\n      begin: 220000+0100\\n      end: 230000+0100\\n    autoUpdate:\\n      kubernetesVersion: true\\n  backup:\\n    schedule: \\\"*/5 * * * *\\\"\\n    maximum: 7\\n  addons:\\n    kube2iam:\\n      enabled: false\\n    kubernetes-dashboard:\\n      enabled: true\\n    cluster-autoscaler:\\n      enabled: true\\n    nginx-ingress:\\n      enabled: true\\n      loadBalancerSourceRanges: []\\n    kube-lego:\\n      enabled: true\\n      email: john.doe@example.com\n```\n\n----------------------------------------\n\nTITLE: Completing ServiceAccount Token Signing Key Rotation in Gardener Shoot\nDESCRIPTION: This command completes the rotation process for the ServiceAccount token signing key by annotating the Shoot resource. It triggers stage three of the rotation process after stages one and two are completed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-serviceaccount-key-complete\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfile struct in Go\nDESCRIPTION: Defines the CloudProfile struct containing fields for cloud provider capabilities and constraints in Gardener. Includes fields for machine types, regions, volume types, and other configuration options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype CloudProfile struct {\n  MachineTypes    []MachineType\n  ProviderConfig  *runtime.RawExtension\n  Regions         []Region\n  SeedSelector    *SeedSelector\n  Type            string\n  VolumeTypes     []VolumeType\n  Bastion         *Bastion\n  Limits          *Limits\n  Capabilities    []CapabilityDefinition\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WorkerSystemComponents in Go\nDESCRIPTION: This snippet defines the WorkerSystemComponents struct, which contains configuration for system components related to a worker pool, specifically whether the pool is allowed to host system components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_49\n\nLANGUAGE: go\nCODE:\n```\ntype WorkerSystemComponents struct {\n  Allow bool\n}\n```\n\n----------------------------------------\n\nTITLE: CloudProfile Definition with AWS Configuration in YAML\nDESCRIPTION: An example of a CloudProfile resource definition using the new gardener.cloud/v1alpha1 API group. This definition includes configurations for AWS cloud provider, with details on DNS providers, Kubernetes versions, machine types, volume types, and provider-specific constraints.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gardener.cloud/v1alpha1\nkind: CloudProfile\nmetadata:\n  name: aws\nspec:\n  type: aws\n# caBundle: |\n#   -----BEGIN CERTIFICATE-----\n#   ...\n#   -----END CERTIFICATE-----\n  dnsProviders:\n  - type: aws-route53\n  - type: unmanaged\n  kubernetes:\n    versions:\n    - 1.12.1\n    - 1.11.0\n    - 1.10.5\n  machineTypes:\n  - name: m4.large\n    cpu: \"2\"\n    gpu: \"0\"\n    memory: 8Gi\n  # storage: 20Gi   # optional (not needed in every environment, may only be specified if no volumeTypes have been specified)\n  ...\n  volumeTypes:      # optional (not needed in every environment, may only be specified if no machineType has a `storage` field)\n  - name: gp2\n    class: standard\n  - name: io1\n    class: premium\n  providerConfig:\n    apiVersion: aws.cloud.gardener.cloud/v1alpha1\n    kind: CloudProfileConfig\n    constraints:\n      minimumVolumeSize: 20Gi\n      machineImages:\n      - name: coreos\n        regions:\n        - name: eu-west-1\n          ami: ami-32d1474b\n        - name: us-east-1\n          ami: ami-e582d29f\n      zones:\n      - region: eu-west-1\n        zones:\n        - name: eu-west-1a\n          unavailableMachineTypes: # list of machine types defined above that are not available in this zone\n          - name: m4.large\n          unavailableVolumeTypes:  # list of volume types defined above that are not available in this zone\n          - name: gp2\n        - name: eu-west-1b\n        - name: eu-west-1c\n```\n\n----------------------------------------\n\nTITLE: Configuring Leadership Specification in Gardener CRDs\nDESCRIPTION: YAML configuration for the leadership section in Gardener CRD specifications. This defines how controllers determine ownership of resources through DNS record checking.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nleadership:\n  record: aws-01.core.garden.example.com\n  value: seed-01\n  leaseSeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Version Updates in YAML\nDESCRIPTION: Specifies automatic update settings for Kubernetes and machine image versions. Controls whether Gardener should automatically update patch versions and machine images during maintenance windows.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_maintenance.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  maintenance:\n    autoUpdate:\n      kubernetesVersion: true\n      machineImageVersion: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Shoot Cluster\nDESCRIPTION: This command applies the local provider Shoot cluster configuration from an example YAML file to create a new Shoot cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f example/provider-local/shoot.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining DNS Provider and Entry Resources in Gardener (YAML)\nDESCRIPTION: Provides configuration for DNS providers and DNS entries in Gardener. The first object registers a DNS provider using access credentials and includes filtering by domains, while the second object specifies a DNS entry mapping a DNS name to one or more targets. Status fields track controller reconciliation, errors, operational status, and provider-specific details. Dependencies include the appropriate Gardener DNS CRDs and referenced secrets. Inputs are YAML objects specifying metadata, provider types, and targets; outputs are provisioned DNS records for use by clusters and users. This structure enables integration with multiple external DNS providers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: dns.gardener.cloud/v1alpha1\\nkind: DNSProvider\\nmetadata:\\n  name: alicloud\\n  namespace: default\\nspec:\\n  type: alicloud-dns\\n  secretRef:\\n    name: alicloud-credentials\\n  domains:\\n    include:\\n    - my.own.domain.com\\n---\\napiVersion: dns.gardener.cloud/v1alpha1\\nkind: DNSEntry\\nmetadata:\\n  name: dns\\n  namespace: default\\nspec:\\n  dnsName: dns.my.own.domain.com\\n  ttl: 600\\n  targets:\\n  - 8.8.8.8\\nstatus:\\n  observedGeneration: 4\\n  state: some-state\\n  lastError:\\n    lastUpdateTime: 2018-04-04T07:08:51Z\\n    description: some-error message\\n    codes:\\n    - ERR_UNAUTHORIZED\\n  lastOperation:\\n    lastUpdateTime: 2018-04-04T07:24:51Z\\n    progress: 70\\n    type: Reconcile\\n    state: Processing\\n    description: Currently provisioning ...\\n  conditions:\\n  - lastTransitionTime: 2018-07-11T10:18:25Z\\n    message: DNS record has been created and is available.\\n    reason: RecordResolvable\\n    status: \\\"True\\\"\\n    type: Available\\n    propagate: false\\n  providerStatus:\\n    apiVersion: aws.extensions.gardener.cloud/v1alpha1\\n    kind: DNSStatus\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Infrastructure CRD in Kubernetes\nDESCRIPTION: This snippet defines the Custom Resource Definition for the Infrastructure resource in Gardener. It includes fields for metadata, spec (containing region, secret reference, and SSH public key), and status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_4\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: infrastructures.extensions.gardener.cloud\nspec:\n  group: extensions.gardener.cloud\n  versions:\n    - name: v1alpha1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                region:\n                  type: string\n                secretRef:\n                  type: object\n                sshPublicKey:\n                  type: string\n                  format: byte\n            status:\n              type: object\n```\n\n----------------------------------------\n\nTITLE: Spreading Worker Pools Across Zones in Gardener Shoot Resource (YAML)\nDESCRIPTION: This YAML snippet illustrates how to define Gardener Shoot worker pools that are distributed across multiple zones for workload high availability. By populating the `zones` array in each worker pool, the nodes are provisioned evenly, enabling the workload to survive individual zone failures. Prerequisites include a region with sufficient zones and Gardener cluster API support. Key parameters are worker pool `name`, `minimum`, `maximum`, and `zones`. Inputs are the Shoot CR YAML; outputs are multi-zonal worker pools.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nspec:\\n  provider:\\n    workers:\\n    - name: ...\\n      minimum: 6\\n      maximum: 60\\n      zones:\\n      - ...\\n\n```\n\n----------------------------------------\n\nTITLE: Using Client-Go Kubernetes Interface for API Operations\nDESCRIPTION: Demonstrates how to use client-go to update a Kubernetes Deployment resource. Shows the typical pattern of client-go usage with GroupVersionKind-specific operations that return new in-memory objects rather than modifying passed objects.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  ctx        context.Context\n  c          kubernetes.Interface // \"k8s.io/client-go/kubernetes\"\n  deployment *appsv1.Deployment   // \"k8s.io/api/apps/v1\"\n)\n\nupdatedDeployment, err := c.AppsV1().Deployments(\"default\").Update(ctx, deployment, metav1.UpdateOptions{})\n```\n\n----------------------------------------\n\nTITLE: Configuring a CloudProfile in Gardener for OpenStack\nDESCRIPTION: Example YAML manifest for creating a CloudProfile resource that defines supported Kubernetes versions, regions, machine images, and machine types for OpenStack infrastructure. This resource is required before hosting any Shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: openstack-example\nspec:\n  caBundle: | # CA Bundle installed on all nodes of the shoot clusters using this CloudProfile\n    <redacted>\n  kubernetes:\n    versions:\n    - classification: preview\n      version: 1.31.3\n    - classification: supported\n      expirationDate: \"2025-07-30T23:59:59Z\"\n      version: 1.31.2\n  machineImages:\n  - name: gardenlinux\n    updateStrategy: minor\n    versions:\n    - architectures:\n      - amd64\n      - arm64\n      classification: supported\n      cri:\n      - containerRuntimes:\n        - type: gvisor\n        name: containerd\n      version: 1592.3.0\n  machineTypes:\n  - architecture: amd64\n    cpu: \"2\"\n    gpu: \"0\"\n    memory: 4Gi\n    name: small_machine\n    storage:\n      class: standard\n      size: 64Gi\n      type: default\n    usable: true\n  regions:\n  - name: my-region-1\n    zones:\n    - name: my-region-1a\n    - name: my-region-1b\n  providerConfig:\n    apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1\n    kind: CloudProfileConfig\n    machineImages:\n    - name: gardenlinux\n      versions:\n      - version: 1592.3.0\n        regions:\n        - id: abcd-1234 # The ID of the image in the given OpenStack installation for the specified region.\n          name: my-region-1\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Alerting Configuration Fields\nDESCRIPTION: Configuration for alerting functionality, including email recipients.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nemailReceivers: []string # List of alert recipients\n```\n\n----------------------------------------\n\nTITLE: Registering External Controllers with ControllerRegistration in Gardener\nDESCRIPTION: YAML definition for a ControllerRegistration resource that registers external controllers with Gardener. This enables dynamic registration of controllers without requiring Gardener restarts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gardener.cloud/v1alpha1\nkind: ControllerRegistration\nmetadata:\n  name: dns-aws-route53\nspec:\n  resources:\n  - kind: DNS\n    type: aws-route53\n# deployment:\n#   type: helm\n#   providerConfig:\n#     chart.tgz: base64(helm-chart)\n#     values.yaml: |\n```\n\n----------------------------------------\n\nTITLE: Rotating SSH Key Pair for Worker Nodes in Gardener Shoot\nDESCRIPTION: This command annotates a Shoot resource to trigger rotation of the SSH key pair used for accessing worker nodes. It requires specifying the shoot namespace and name.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-ssh-keypair\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Resource Fields in Go\nDESCRIPTION: This snippet shows the structure and fields of the Worker resource in Go. It includes configurations for machine types, scaling, volumes, zones, and various other worker-specific settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_46\n\nLANGUAGE: go\nCODE:\n```\ntype Worker struct {\n  Machine         Machine\n  Maximum         int32\n  Minimum         int32\n  MaxSurge        intstr.IntOrString\n  MaxUnavailable  intstr.IntOrString\n  ProviderConfig  runtime.RawExtension\n  Taints          []v1.Taint\n  Volume          Volume\n  DataVolumes     []DataVolume\n  Zones           []string\n  SystemComponents WorkerSystemComponents\n  // ... other fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WorkersSettings in Go\nDESCRIPTION: This snippet shows the WorkersSettings struct, which contains settings applicable to all workers, such as SSH access configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntype WorkersSettings struct {\n  SSHAccess *SSHAccess\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener CRD Field Types and Relationships - HTML\nDESCRIPTION: This snippet provides structured HTML table segments and inline markup to describe the schema and documentation for Gardener CRDs such as Shoot, ShootState, Addons, and related configuration APIs (e.g., APIServerLogging, AdmissionPlugin). Dependencies include an HTML-rendering environment capable of interpreting <table>, <tr>, <td>, and related markup. Key fields and their descriptions are shown, with links to further documentation. Inputs/outputs are documentation data, not application logic. The output is intended for UI rendering or static documentation, not for execution.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.SeedSelector\">\nSeedSelector\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>SeedSelector is an optional selector which must match a seed&rsquo;s labels for the shoot to be scheduled on that seed.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>resources</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.NamedResourceReference\">\n[]NamedResourceReference\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Resources holds a list of named resource references that can be referred to in extension configs by their names.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>tolerations</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.Toleration\">\n[]Toleration\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Tolerations contains the tolerations for taints on seed clusters.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>exposureClassName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>ExposureClassName is the optional name of an exposure class to apply a control plane endpoint exposure strategy.\nThis field is immutable.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>systemComponents</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.SystemComponents\">\nSystemComponents\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>SystemComponents contains the settings of system components in the control or data plane of the Shoot cluster.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>controlPlane</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.ControlPlane\">\nControlPlane\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>ControlPlane contains general settings for the control plane of the shoot.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>schedulerName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>SchedulerName is the name of the responsible scheduler which schedules the shoot.\nIf not specified, the default scheduler takes over.\nThis field is immutable.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>cloudProfile</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.CloudProfileReference\">\nCloudProfileReference\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>CloudProfile contains a reference to a CloudProfile or a NamespacedCloudProfile.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>credentialsBindingName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>CredentialsBindingName is the name of a CredentialsBinding that has a reference to the provider credentials.\nThe credentials will be used to create the shoot in the respective account. The field is mutually exclusive with SecretBindingName.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>accessRestrictions</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.AccessRestrictionWithOptions\">\n[]AccessRestrictionWithOptions\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>AccessRestrictions describe a list of access restrictions for this shoot cluster.</p>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.ShootStatus\">\nShootStatus\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Most recently observed status of the Shoot cluster.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.ShootState\">ShootState\n</h3>\n<p>\n<p>ShootState contains a snapshot of the Shoot&rsquo;s state required to migrate the Shoot&rsquo;s control plane to a new Seed.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\ncore.gardener.cloud/v1beta1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>ShootState</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object metadata.</p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.ShootStateSpec\">\nShootStateSpec\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Specification of the ShootState.</p>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>gardener</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.GardenerResourceData\">\n[]GardenerResourceData\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Gardener holds the data required to generate resources deployed by the gardenlet</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>extensions</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.ExtensionResourceState\">\n[]ExtensionResourceState\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Extensions holds the state of custom resources reconciled by extension controllers in the seed</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>resources</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.ResourceData\">\n[]ResourceData\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Resources holds the data of resources referred to by extension controller states</p>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.APIServerLogging\">APIServerLogging\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.KubeAPIServerConfig\">KubeAPIServerConfig</a>)\n</p>\n<p>\n<p>APIServerLogging contains configuration for the logs level and http access logs</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>verbosity</code></br>\n<em>\nint32\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Verbosity is the kube-apiserver log verbosity level\nDefaults to 2.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>httpAccessVerbosity</code></br>\n<em>\nint32\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>HTTPAccessVerbosity is the kube-apiserver access logs level</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.APIServerRequests\">APIServerRequests\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.KubeAPIServerConfig\">KubeAPIServerConfig</a>)\n</p>\n<p>\n<p>APIServerRequests contains configuration for request-specific settings for the kube-apiserver.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>maxNonMutatingInflight</code></br>\n<em>\nint32\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>MaxNonMutatingInflight is the maximum number of non-mutating requests in flight at a given time. When the server\nexceeds this, it rejects requests.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>maxMutatingInflight</code></br>\n<em>\nint32\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>MaxMutatingInflight is the maximum number of mutating requests in flight at a given time. When the server\nexceeds this, it rejects requests.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.AccessRestriction\">AccessRestriction\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.AccessRestrictionWithOptions\">AccessRestrictionWithOptions</a>, \n<a href=\"#core.gardener.cloud/v1beta1.Region\">Region</a>, \n<a href=\"#core.gardener.cloud/v1beta1.SeedSpec\">SeedSpec</a>)\n</p>\n<p>\n<p>AccessRestriction describes an access restriction for a Kubernetes cluster (e.g., EU access-only).</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name is the name of the restriction.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.AccessRestrictionWithOptions\">AccessRestrictionWithOptions\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.ShootSpec\">ShootSpec</a>)\n</p>\n<p>\n<p>AccessRestrictionWithOptions describes an access restriction for a Kubernetes cluster (e.g., EU access-only) and\nallows to specify additional options.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>AccessRestriction</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.AccessRestriction\">\nAccessRestriction\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>AccessRestriction</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>options</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Options is a map of additional options for the access restriction.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.Addon\">Addon\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.KubernetesDashboard\">KubernetesDashboard</a>, \n<a href=\"#core.gardener.cloud/v1beta1.NginxIngress\">NginxIngress</a>)\n</p>\n<p>\n<p>Addon allows enabling or disabling a specific addon and is used to derive from.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Enabled indicates whether the addon is enabled or not.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.Addons\">Addons\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.ShootSpec\">ShootSpec</a>)\n</p>\n<p>\n<p>Addons is a collection of configuration for specific addons which are managed by the Gardener.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kubernetesDashboard</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.KubernetesDashboard\">\nKubernetesDashboard\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>KubernetesDashboard holds configuration settings for the kubernetes dashboard addon.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>nginxIngress</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.NginxIngress\">\nNginxIngress\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>NginxIngress holds configuration settings for the nginx-ingress addon.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"core.gardener.cloud/v1beta1.AdmissionPlugin\">AdmissionPlugin\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.KubeAPIServerConfig\">KubeAPIServerConfig</a>)\n</p>\n<p>\n<p>AdmissionPlugin contains information about a specific admission plugin and its corresponding configuration.</p>\n</p>\n<table>\n<thead>\n<tr>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Gardenlet Deployment in Kubernetes Using YAML\nDESCRIPTION: This YAML defines a Gardenlet resource that instructs gardener-operator to deploy gardenlet into the current cluster. It includes configurations for replica count, chart reference, controllers, logging, and comprehensive seed cluster settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_via_operator.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: Gardenlet\nmetadata:\n  name: local\n  namespace: garden\nspec:\n  deployment:\n    replicaCount: 1\n    revisionHistoryLimit: 2\n    helm:\n      ociRepository:\n        ref: <url-to-gardenlet-chart-repository>:v1.97.0\n  config:\n    apiVersion: gardenlet.config.gardener.cloud/v1alpha1\n    kind: GardenletConfiguration\n    controllers:\n      shoot:\n        reconcileInMaintenanceOnly: true\n        respectSyncPeriodOverwrite: true\n      shootState:\n        concurrentSyncs: 0\n    logging:\n      enabled: true\n      vali:\n        enabled: true\n      shootNodeLogging:\n        shootPurposes:\n        - infrastructure\n        - production\n        - development\n        - evaluation\n    seedConfig:\n      apiVersion: core.gardener.cloud/v1beta1\n      kind: Seed\n      metadata:\n        labels:\n          base: kind\n      spec:\n        backup:\n          provider: local\n          region: local\n          credentialsRef:\n            apiVersion: v1\n            kind: Secret\n            name: backup-local\n            namespace: garden\n        dns:\n          provider:\n            secretRef:\n              name: internal-domain-internal-local-gardener-cloud\n              namespace: garden\n            type: local\n        ingress:\n          controller:\n            kind: nginx\n          domain: ingress.local.seed.local.gardener.cloud\n        networks:\n          nodes: 172.18.0.0/16\n          pods: 10.1.0.0/16\n          services: 10.2.0.0/16\n          shootDefaults:\n            pods: 10.3.0.0/16\n            services: 10.4.0.0/16\n        provider:\n          region: local\n          type: local\n          zones:\n          - \"0\"\n        settings:\n          excessCapacityReservation:\n            enabled: false\n          scheduling:\n            visible: true\n          verticalPodAutoscaler:\n            enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener Seed Resource and Associated Secrets in YAML\nDESCRIPTION: This snippet defines a Gardener `Seed` resource along with the necessary Kubernetes `Secret` resources it references. The first Secret (`seed-secret`) holds the kubeconfig for the seed cluster. The second Secret (`backup-secret`) contains provider-specific credentials for backups. The `Seed` resource itself specifies provider details, DNS configuration, volume defaults, network CIDRs, taints, backup settings, and references the previously defined secrets.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: seed-secret\n  namespace: garden\ntype: Opaque\ndata:\n  kubeconfig: base64(kubeconfig-for-seed-cluster)\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: backup-secret\n  namespace: garden\ntype: Opaque\ndata:\n  # <some-provider-specific data keys>\n  # https://github.com/gardener/gardener-extension-provider-alicloud/blob/master/example/30-backupbucket.yaml#L9-L11\n  # https://github.com/gardener/gardener-extension-provider-aws/blob/master/example/30-infrastructure.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-azure/blob/master/example/30-backupbucket.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-gcp/blob/master/example/30-backupbucket.yaml#L9\n  # https://github.com/gardener/gardener-extension-provider-openstack/blob/master/example/30-backupbucket.yaml#L9-L13\n\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: Seed\nmetadata:\n  name: seed1\nspec:\n  provider:\n    type: <some-provider-name> # {aws,azure,gcp,...}\n    region: europe-central-1\n  secretRef:\n    name: seed-secret\n    namespace: garden\n  # Motivation for DNS section: https://github.com/gardener/gardener/issues/201.\n  dns:\n    provider: <some-provider-name> # {aws-route53, google-clouddns, ...}\n    secretName: my-dns-secret # must be in `garden` namespace\n    ingressDomain: seed1.dev.example.com\n  volume: # optional (introduced to get rid of `persistentvolume.garden.sapcloud.io/minimumSize` and `persistentvolume.garden.sapcloud.io/provider` annotations)\n    minimumSize: 20Gi\n    providers:\n    - name: foo\n      purpose: etcd-main\n  networks: # Seed and Shoot networks must be disjunct\n    nodes: 10.240.0.0/16\n    pods: 10.241.128.0/17\n    services: 10.241.0.0/17\n  # Shoot default networks, see also https://github.com/gardener/gardener/issues/895.\n  # shootDefaults:\n  #   pods: 100.96.0.0/11\n  #   services: 100.64.0.0/13\n  taints:\n  - key: seed.gardener.cloud/protected\n  - key: seed.gardener.cloud/invisible\n  blockCIDRs:\n  - 169.254.169.254/32\n  backup: # See https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md\n    type: <some-provider-name> # {aws,azure,gcp,...}\n  # region: eu-west-1\n    secretRef:\n      name: backup-secret\n      namespace: garden\nstatus:\n  conditions:\n  - lastTransitionTime: \"2020-07-14T19:16:42Z\"\n    lastUpdateTime: \"2020-07-14T19:18:17Z\"\n    message: all checks passed\n    reason: Passed\n    status: \"True\"\n    type: Available\n  gardener:\n    id: 4c9832b3823ee6784064877d3eb10c189fc26e98a1286c0d8a5bc82169ed702c\n    name: gardener-controller-manager-7fhn9ikan73n-7jhka\n    version: 1.0.0\n  observedGeneration: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring a Shoot Toleration for Protected Seeds\nDESCRIPTION: YAML configuration to add a toleration to a Shoot cluster, allowing it to be scheduled on a protected Seed. This is necessary for Shoots that will be converted to Managed Seeds in a Gardener landscape.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tolerations:\n  - key: seed.gardener.cloud/protected\n```\n\n----------------------------------------\n\nTITLE: Defining WorkerPool Struct in Go\nDESCRIPTION: Defines the WorkerPool struct which contains configuration for a specific worker pool in Gardener extensions. It includes fields for machine type, scaling settings, annotations, labels, volumes, and more.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\ntype WorkerPool struct {\n\tMachineType string\n\tMaximum int32\n\tMaxSurge intstr.IntOrString\n\tMaxUnavailable intstr.IntOrString\n\tAnnotations map[string]string\n\tLabels map[string]string\n\tTaints []corev1.Taint\n\tMachineImage MachineImage\n\tMinimum int32\n\tName string\n\tNodeAgentSecretName string\n\tProviderConfig *runtime.RawExtension\n\tUserDataSecretRef corev1.SecretKeySelector\n\tVolume *Volume\n\tDataVolumes []DataVolume\n\tKubeletDataVolumeName string\n\tZones []string\n\tMachineControllerManager *gardencorev1beta1.MachineControllerManagerSettings\n\tKubernetesVersion string\n\tKubeletConfig *gardencorev1beta1.KubeletConfig\n\tNodeTemplate *NodeTemplate\n\tArchitecture string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability for Gardener Shoot Control Plane in YAML\nDESCRIPTION: This YAML snippet shows how to request a highly available control plane in a Gardener shoot cluster by specifying the desired failure tolerance type (\"node\" or \"zone\") under the shoot specification. Prerequisites include a running Gardener installation and knowledge of available seed infrastructures. The key parameters are the type of failure tolerance and placement within the controlPlane.highAvailability section. Inputs are cluster specifications; output is an applied shoot resource with HA settings. Only <node | zone> are permitted values for type, and compatibility depends on the seed's topology.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  controlPlane:\n    highAvailability:\n      failureTolerance:\n        type: <node | zone>\n```\n\n----------------------------------------\n\nTITLE: Defining Backup Infrastructure Resource in Gardener (YAML)\nDESCRIPTION: Defines a BackupInfrastructure CRD instance for instructing Gardener to provision a cloud storage bucket/container in the target provider for etcd or stateful backup. The configuration links credentials, region, and storage container name for backup operations. Prerequisites include Gardener CRD support for backup infrastructure and valid secret references. Inputs consist of YAML objects referencing target cloud credentials and storage locations; outputs are initialized or referenced storage containers for cluster backups. Limited to credentials and provider regions supported by the Gardener seed extension.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: extensions.gardener.cloud/v1alpha1\\nkind: BackupInfrastructure\\nmetadata:\\n  name: etcd-backup\\n  namespace: shoot--core--aws-01\\nspec:\\n  type: aws\\n  region: eu-west-1\\n  storageContainerName: asdasjndasd-1293912378a-2213\\n  secretRef:\\n    name: my-aws-credentials\\nstatus:\\n  observedGeneration: ...\\n  state: ...\\n  lastError: ..\\n  lastOperation: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Networking Type\nDESCRIPTION: Kubernetes API type definition for Networking which configures network parameters for the shoot cluster including CIDR ranges and networking plugin type.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_34\n\nLANGUAGE: kubernetes-api\nCODE:\n```\ntype Networking struct {\n  type string\n  providerConfig *runtime.RawExtension\n  pods string\n  nodes string\n  services string\n  ipFamilies []IPFamily\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Gardener Project Resource - YAML\nDESCRIPTION: This snippet defines a Gardener Project resource, describing its association with a Kubernetes namespace and project member roles. It includes configurations for the project's metadata, purpose, owner, and members, detailing their corresponding roles and permissions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/projects.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Project\nmetadata:\n  name: dev\nspec:\n  namespace: garden-dev\n  description: \"This is my first project\"\n  purpose: \"Experimenting with Gardener\"\n  owner:\n    apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: john.doe@example.com\n  members:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: alice.doe@example.com\n    role: admin\n  # roles:\n  # - viewer \n  # - uam\n  # - serviceaccountmanager\n  # - extension:foo\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: bob.doe@example.com\n    role: viewer\n# tolerations:\n#   defaults:\n#   - key: <some-key>\n#   whitelist:\n#   - key: <some-key>\n```\n\n----------------------------------------\n\nTITLE: Deploying Gardener Operator with Helm\nDESCRIPTION: Command to template the Gardener Operator Helm chart with specific namespace, replica count, and version tag settings. This is typically the first step when setting up a new Gardener landscape.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm template ./charts/gardener/operator --namespace garden --set replicaCount=2 --set image.tag=v1.111.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Size Validator in Gardener Admission Controller\nDESCRIPTION: This YAML configuration sets up the Resource Size Validator for the Gardener Admission Controller. It defines size limits for specific resources and excludes certain subjects from these restrictions. The configuration also specifies the operation mode for handling requests that exceed the size limits.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/admission-controller.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  resourceAdmissionConfiguration:\n    limits:\n    - apiGroups: [\"core.gardener.cloud\"]\n      apiVersions: [\"*\"]\n      resources: [\"shoots\"]\n      size: 100k\n    - apiGroups: [\"\"]\n      apiVersions: [\"v1\"]\n      resources: [\"secrets\"]\n      size: 100k\n    unrestrictedSubjects:\n    - kind: Group\n      name: gardener.cloud:system:seeds\n      apiGroup: rbac.authorization.k8s.io\n #  - kind: User\n #    name: admin\n #    apiGroup: rbac.authorization.k8s.io\n #  - kind: ServiceAccount\n #    name: \"*\"\n #    namespace: garden\n #    apiGroup: \"\"\n    operationMode: block #log\n```\n\n----------------------------------------\n\nTITLE: Updating and Patching Kubernetes Resources Using controller-runtime (Go)\nDESCRIPTION: This Go code snippet demonstrates three primary methods to modify Kubernetes objects within a controller-runtime client: standard update, JSON merge patch, and strategic merge patch. The snippet assumes a context, client, and target Shoot resource are available and highlights how to update the Kubernetes version in the Shoot's spec. Dependencies include the controller-runtime client, relevant Gardener API types, and context management. The key inputs are the Shoot resource and desired modifications; outputs are errors, if any, from the update or patch operations. Note that update replaces the entire object, whereas patches send only the difference; optimistic locking is enabled for update by default and can be explicitly set for patches.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  ctx   context.Context\n  c     client.Client\n  shoot *gardencorev1beta1.Shoot\n)\n\n// update\nshoot.Spec.Kubernetes.Version = \"1.26\"\nerr := c.Update(ctx, shoot)\n\n// json merge patch\npatch := client.MergeFrom(shoot.DeepCopy())\nshoot.Spec.Kubernetes.Version = \"1.26\"\nerr = c.Patch(ctx, shoot, patch)\n\n// strategic merge patch\npatch = client.StrategicMergeFrom(shoot.DeepCopy())\nshoot.Spec.Kubernetes.Version = \"1.26\"\nerr = c.Patch(ctx, shoot, patch)\n\n```\n\n----------------------------------------\n\nTITLE: Rotating Observability Credentials in Gardener Shoot\nDESCRIPTION: This command annotates a Shoot resource to trigger rotation of observability credentials used for Plutono and Prometheus access. It requires specifying the shoot namespace and name.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-observability-credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Gardener Seed Resource in YAML\nDESCRIPTION: This YAML snippet defines a Gardener seed resource, which specifies the configuration for a Kubernetes cluster. It includes provider settings, worker nodes, networking, maintenance windows, and addon configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# seedName: seed1\n  provider:\n    type: <some-provider-name> # {aws,azure,gcp,...}\n    infrastructureConfig:\n      <some-provider-specific-infrastructure-config>\n    controlPlaneConfig:\n      <some-provider-specific-controlplane-config>\n    workers:\n    - name: cpu-worker\n      minimum: 3\n      maximum: 5\n      machine:\n        type: m5.large\n        image:\n          name: <some-os-name>\n          version: <some-os-version>\n      volume:\n        type: gp2\n        size: 20Gi\n  kubernetes:\n    version: 1.15.1\n  dns:\n    domain: crazy-botany.core.my-custom-domain.com\n    providers:\n    - type: aws-route53\n      secretName: my-custom-domain-secret\n      domains:\n        include:\n        - my-custom-domain.com\n        - my-other-custom-domain.com\n        exclude:\n        - yet-another-custom-domain.com\n      zones:\n        include:\n        - zone-id-1\n        exclude:\n        - zone-id-2\n  extensions:\n  - type: foobar\n  networking:\n    type: calico\n    pods: 100.96.0.0/11\n    services: 100.64.0.0/13\n    nodes: 10.250.0.0/16\n  maintenance:\n    timeWindow:\n      begin: 220000+0100\n      end: 230000+0100\n    autoUpdate:\n      kubernetesVersion: true\n      machineImageVersion: true\n  addons:\n    nginx-ingress:\n      enabled: false\n    kubernetes-dashboard:\n      enabled: true\nstatus:\n  conditions:\n  - type: APIServerAvailable\n    status: 'True'\n    lastTransitionTime: '2020-01-30T10:38:15Z'\n    lastUpdateTime: '2020-04-13T14:35:21Z'\n    reason: HealthzRequestFailed\n    message: API server /healthz endpoint responded with success status code. [response_time:3ms]\n  gardener:\n    id: 4c9832b3823ee6784064877d3eb10c189fc26e98a1286c0d8a5bc82169ed702c\n    name: gardener-controller-manager-7fhn9ikan73n-7jhka\n    version: 1.0.0\n  lastOperation:\n    description: Shoot cluster state has been successfully reconciled.\n    lastUpdateTime: '2020-04-13T14:34:27Z'\n    progress: 100\n    state: Succeeded\n    type: Reconcile\n  observedGeneration: 1\n  seed: seed1\n  hibernated: false\n  technicalID: shoot--core--crazy-botany\n  uid: d8608cfa-2856-11e8-8fdc-0a580af181af\n```\n\n----------------------------------------\n\nTITLE: Defining ControlPlane Resource in Kubernetes\nDESCRIPTION: Specification for a control plane resource that manages cloud provider control plane components. Includes region, purpose and infrastructure provider status fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ControlPlane\nmetadata:\n  # Kubernetes standard metadata \nspec:\n  purpose: string\n  region: string\n  secretRef:\n    # Secret reference configuration\n  infrastructureProviderStatus: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudProfile Capabilities and Machine Images in YAML\nDESCRIPTION: This YAML snippet demonstrates a CloudProfile configuration using the new capabilities structure. It shows how capabilities are declared globally and overridden locally for machine images and types, with capability sets (`capabilitySets`) mapped to specific image versions, and deprecation of architecture fields. Required dependencies are Gardener version supporting the schema and the tooling to interpret these fields. Inputs are YAML configuration files, and outputs are the proper configuration for controllers and provider extensions; accuracy of key names and field usage is a key constraint.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# CloudProfile Example\nspec:\n  capabilities:\n    - name: architecture\n      values: [amd64, arm64]\n    - name: hypervisorType\n      values: [gen2, gen1]\n    - name: network\n      values: [accelerated, standard]\n    - name: storageAccess\n      values: [NVMe, SCSI]\n    - name: secureBoot\n      values: [secure, none]\n    ...\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\n# CloudProfile\nspec:\n  capabilities: # <-- Full list of possible capabilities used as default\n    - name: architecture\n      values: [amd64, arm64]\n    - name: hypervisorType\n      values: [gen2, gen1]\n    - name: network\n      values: [accelerated, standard]\n\n  machineImages:\n    - name: gardenlinux\n      updateStrategy: minor\n      versions:\n        # - architectures: [arm64, amd64] # not required anymore\n        #   version: 1592.2.0-gen2\n\n        - architectures: [amd64, arm64] # <-- marked as deprecated\n          capabilitySets:\n            - architecture: [arm64] # <-- architecture must be added to the capabilities to ensure compatibility\n              hypervisorType: [\"gen2\"]\n              network: [\"accelerated\", \"standard\"] # <-- not required as its the default\n            - architecture: [amd64]\n              hypervisorType: [\"gen2\"]\n            - architecture: [amd64]\n              hypervisorType: [\"gen1\"]\n          classification: supported\n          version: 1592.2.0\n\n        - classification: supported\n          version: 1592.1.0 # <-- if no capabilitySets are defined the default capabilities are assigned as only combination\n\n  machineTypes:\n    - architecture: amd64 # <-- marked as deprecated\n      cpu: \"896\"\n      gpu: \"0\"\n      memory: 12Ti\n      name: Standard_S896om\n      usable: true\n      capabilities:\n        hypervisorType: [\"gen2\"] # <-- hypervisorType is overwritten\n        architecture: [\"amd64\"] # <-- architecture is overwritten\n\n    - cpu: \"896\" # <-- as no capabilities are defined the default capabilities are assigned\n      gpu: \"0\"\n      memory: 12Ti\n      name: Standard_S896\n      usable: true\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\nproviderConfig:\n  machineImages:\n    - name: gardenlinux\n      versions:\n        - architecture: arm64 # <-- deprecated\n          capabilities:\n            architecture: [\"arm64\"] # <-- architecture is overwritten as only amd64 is supported\n            hypervisorType: [\"gen2\"]\n            network: [\"accelerated\", \"standard\"] # <-- not required as its the default\n          communityGalleryImageID: /CommunityGalleries/xzy/Images/gardenlinux-nvme-arm64-gen2/Versions/1592.2.0\n          version: 1592.2.0 # <-- no pre-release tag required anymore\n          #acceleratedNetworking: true # <-- not required anymore\n\n        - capabilities:\n            architecture: [amd64]\n            hypervisorType: [\"gen2\"]\n          communityGalleryImageID: /CommunityGalleries/xzy/Images/gardenlinux-nvme-gen2/Versions/1592.2.0\n          version: 1592.2.0\n        - capabilities:\n            architecture: [amd64]\n            hypervisorType: [\"gen1\"]\n          communityGalleryImageID: /CommunityGalleries/xzy/Images/gardenlinux-nvme/Versions/1592.2.0\n          version: 1592.2.0\n\n```\n\n----------------------------------------\n\nTITLE: Creating Webhook Kubeconfig Secret for Gardener Shoot Authorization\nDESCRIPTION: This snippet demonstrates how to create a Secret containing the kubeconfig for the authorization webhook server in a Gardener shoot cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: webhook-kubeconfig\n  namespace: garden-my-project\ndata:\n  kubeconfig: <base64-encoded-kubeconfig-for-authz-webhook>\n```\n\n----------------------------------------\n\nTITLE: Configuring the Seed in GardenletConfiguration YAML\nDESCRIPTION: Example YAML configuration for setting up a seed in the GardenletConfiguration. This configuration is used by the gardenlet to register a Seed resource in the garden cluster if it doesn't already exist.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/gardenlet.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gardenlet.config.gardener.cloud/v1alpha1\nkind: GardenletConfiguration\nseedConfig:\n  metadata:\n    name: my-seed\n  spec:\n    provider:\n      type: aws\n    # ...\n    settings:\n      scheduling:\n        visible: true\n```\n\n----------------------------------------\n\nTITLE: Defining Maintenance struct in Go\nDESCRIPTION: Defines the Maintenance struct which contains information about maintenance windows and auto-update settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\ntype Maintenance struct {\n\tAutoUpdate *MaintenanceAutoUpdate\n\tTimeWindow *MaintenanceTimeWindow\n\tConfineSpecUpdateRollout *bool\n}\n```\n\n----------------------------------------\n\nTITLE: Tuning Cluster Autoscaler Behavior in Gardener Shoot Resource (YAML)\nDESCRIPTION: This snippet presents how to customize the cluster autoscaler (CA) settings in a Gardener-managed cluster via the Shoot resource. It adjusts CA parameters such as `expander`, scan intervals, scale-down delays, and utilization thresholds to better match expected load-shifting and auto-scaling behavior. This YAML requires Gardener and autoscaler integration in the cluster. Parameters control when and how the CA adds/removes nodes in response to load, optimizing responsiveness and resource utilization.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nspec:\\n  kubernetes:\\n    clusterAutoscaler:\\n      expander: \\\"least-waste\\\"\\n      scanInterval: 10s\\n      scaleDownDelayAfterAdd: 60m\\n      scaleDownDelayAfterDelete: 0s\\n      scaleDownDelayAfterFailure: 3m\\n      scaleDownUnneededTime: 30m\\n      scaleDownUtilizationThreshold: 0.5\\n\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfile Resource with YAML in core.gardener.cloud/v1beta1 API\nDESCRIPTION: Detailed specification of the CloudProfile resource in the new core.gardener.cloud/v1beta1 API group. This resource defines provider-specific configurations including Kubernetes versions, machine images, machine types, volume types, regions, and provider-specific configuration options for different cloud providers (Alicloud, AWS, Azure, GCP, OpenStack, Packet).\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: cloudprofile1\nspec:\n  type: <some-provider-name> # {aws,azure,gcp,...}\n# Optional list of labels on `Seed` resources that marks those seeds whose shoots may use this provider profile.\n# An empty list means that all seeds of the same provider type are supported.\n# This is useful for environments that are of the same type (like openstack) but may have different \"instances\"/landscapes.\n# seedSelector:\n#   matchLabels:\n#     foo: bar\n  kubernetes:\n    versions:\n    - version: 1.12.1\n    - version: 1.11.0\n    - version: 1.10.6\n    - version: 1.10.5\n      expirationDate: 2020-04-05T01:02:03Z # optional\n  machineImages:\n  - name: coreos\n    versions:\n    - version: 2023.5.0\n    - version: 1967.5.0\n      expirationDate: 2020-04-05T08:00:00Z\n  - name: ubuntu\n    versions:\n    - version: 18.04.201906170\n  machineTypes:\n  - name: m5.large\n    cpu: \"2\"\n    gpu: \"0\"\n    memory: 8Gi\n  # storage: 20Gi # optional (not needed in every environment, may only be specified if no volumeTypes have been specified)\n    usable: true\n  volumeTypes: # optional (not needed in every environment, may only be specified if no machineType has a `storage` field)\n  - name: gp2\n    class: standard\n  - name: io1\n    class: premium\n  regions:\n  - name: europe-central-1\n    zones: # optional (not needed in every environment)\n    - name: europe-central-1a\n    - name: europe-central-1b\n    - name: europe-central-1c\n    # unavailableMachineTypes: # optional, list of machine types defined above that are not available in this zone\n    # - m5.large\n    # unavailableVolumeTypes: # optional, list of volume types defined above that are not available in this zone\n    # - io1\n# CA bundle that will be installed onto every shoot machine that is using this provider profile.\n# caBundle: |\n#   -----BEGIN CERTIFICATE-----\n#   ...\n#   -----END CERTIFICATE-----\n  providerConfig:\n    <some-provider-specific-cloudprofile-config>\n    # We don't have concrete examples for every existing provider yet, but these are the proposals:\n    #\n    # Example for Alicloud:\n    #\n    # apiVersion: alicloud.provider.extensions.gardener.cloud/v1alpha1\n    # kind: CloudProfileConfig\n    # machineImages:\n    # - name: coreos\n    #   version: 2023.5.0\n    #   id: coreos_2023_4_0_64_30G_alibase_20190319.vhd\n    #\n    #\n    # Example for AWS:\n    #\n    # apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n    # kind: CloudProfileConfig\n    # machineImages:\n    # - name: coreos\n    #   version: 1967.5.0\n    #   regions:\n    #   - name: europe-central-1\n    #     ami: ami-0f46c2ed46d8157aa\n    #\n    #\n    # Example for Azure:\n    #\n    # apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n    # kind: CloudProfileConfig\n    # machineImages:\n    # - name: coreos\n    #   version: 1967.5.0\n    #   publisher: CoreOS\n    #   offer: CoreOS\n    #   sku: Stable\n    # countFaultDomains:\n    # - region: westeurope\n    #   count: 2\n    # countUpdateDomains:\n    # - region: westeurope\n    #   count: 5\n    #\n    #\n    # Example for GCP:\n    #\n    # apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1\n    # kind: CloudProfileConfig\n    # machineImages:\n    # - name: coreos\n    #   version: 2023.5.0\n    #   image: projects/coreos-cloud/global/images/coreos-stable-2023-5-0-v20190312\n    #\n    #\n    # Example for OpenStack:\n    #\n    # apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1\n    # kind: CloudProfileConfig\n    # machineImages:\n    # - name: coreos\n    #   version: 2023.5.0\n    #   image: coreos-2023.5.0\n    # keyStoneURL: https://url-to-keystone/v3/\n    # dnsServers:\n    # - 10.10.10.10\n    # - 10.10.10.11\n    # dhcpDomain: foo.bar\n    # requestTimeout: 30s\n    # constraints:\n    #   loadBalancerProviders:\n    #   - name: haproxy\n    #   floatingPools:\n    #   - name: fip1\n    #     loadBalancerClasses:\n    #     - name: class1\n    #       floatingSubnetID: 04eed401-f85f-4610-8041-c4835c4beea6\n    #       floatingNetworkID: 23949a30-1cdd-4732-ba47-d03ced950acc\n    #       subnetID: ac46c204-9d0d-4a4c-a90d-afefe40cfc35\n    #\n    #\n    # Example for Packet:\n    #\n    # apiVersion: packet.provider.extensions.gardener.cloud/v1alpha1\n    # kind: CloudProfileConfig\n    # machineImages:\n    # - name: coreos\n    #   version: 2079.3.0\n    #   id: d61c3912-8422-4daf-835e-854efa0062e4\n```\n\n----------------------------------------\n\nTITLE: Rolling Out Worker Nodes for Specific Pools\nDESCRIPTION: Command to trigger the rollout of specific worker pools during the CA rotation process. Multiple pool names can be specified in a comma-separated list.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-rollout-workers=<pool1-name>[,<pool2-name>,...]\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ClusterSpec Structure (v1alpha1)\nDESCRIPTION: Defines the specification for a Gardener Cluster resource. It includes raw extensions containing the referenced CloudProfile, Seed, and Shoot resources required for reconciliation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nField        Description\n------------ --------------------------------------------------------------------------------------------------------\ncloudProfile CloudProfile is a raw extension field that contains the cloudprofile resource referenced by the shoot \n(runtime.RawExtension) that has to be reconciled.\n\nseed         Seed is a raw extension field that contains the seed resource referenced by the shoot that has to be \n(runtime.RawExtension) reconciled.\n\nshoot        Shoot is a raw extension field that contains the shoot resource that has to be reconciled.\n(runtime.RawExtension)\n```\n\n----------------------------------------\n\nTITLE: Defining ShootSpec struct in Go\nDESCRIPTION: ShootSpec defines the desired state of a Shoot cluster. It includes fields for configuring the Kubernetes version, networking, provider settings, maintenance windows, and other cluster-wide options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\ntype ShootSpec struct {\n  Addons                *Addons\n  CloudProfileName      string\n  DNS                   *DNS\n  Extensions            []Extension\n  Hibernation           *Hibernation\n  Kubernetes            Kubernetes\n  Networking            *Networking\n  Maintenance           *Maintenance\n  Monitoring            *Monitoring\n  Provider              Provider\n  Purpose               *ShootPurpose\n  Region                string\n  SecretBindingName     *string\n  SeedName              *string\n  SeedSelector          *SeedSelector\n  Resources             []NamedResourceReference\n  Tolerations           []Toleration\n  ExposureClassName     *string\n  SystemComponents      *SystemComponents\n  ControlPlane          *ControlPlane\n  SchedulerName         *string\n  CloudProfile          *CloudProfileReference\n  CredentialsBindingName *string\n  AccessRestrictions    []AccessRestrictionWithOptions\n}\n```\n\n----------------------------------------\n\nTITLE: Reconciler Logger Implementation in Go\nDESCRIPTION: Example showing how to properly implement logging in a controller's Reconcile function using context-based logger.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *reconciler) Reconcile(ctx context.Context, request reconcile.Request) (reconcile.Result, error) {\n  log := logf.FromContext(ctx)\n  log.Info(\"Reconciling Shoot\")\n  // ...\n  return reconcile.Result{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Seed Readiness with wait-for.sh Script\nDESCRIPTION: This command uses the wait-for.sh script to wait until the local Seed cluster is ready with all required components including GardenletReady, SeedSystemComponentsHealthy, and ExtensionsReady.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./hack/usage/wait-for.sh seed local GardenletReady SeedSystemComponentsHealthy ExtensionsReady\n```\n\n----------------------------------------\n\nTITLE: Defining a HorizontalPodAutoscaler Resource in Kubernetes (YAML)\nDESCRIPTION: This snippet demonstrates a fully-specified Kubernetes HorizontalPodAutoscaler (HPA) YAML manifest that targets the scaling of a Deployment named 'foo-deployment' based on average CPU and memory usage across all pod replicas. It utilizes the 'autoscaling/v2' API and configures minimum and maximum replica limits, as well as custom scaling behaviors including stabilization windows and scaling policies for both scaling up and down. Required dependencies include a running Kubernetes cluster with the autoscaling/v2 API enabled, and the referenced Deployment must be present. Key fields include 'scaleTargetRef' (identifying the resource to scale), 'metrics' (specifying metric types, target values, and resources), and 'behavior' (setting control parameters for scaling speed and stability). The expected input is a valid YAML manifest; upon creation, the Kubernetes controller manages replica count dynamically based on live resource metrics. Limitations include having to properly tune thresholds and policies to avoid oscillations or delayed scaling.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/shoot_pod_autoscaling_best_practices.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling/v2\\nkind: HorizontalPodAutoscaler\\nmetadata:\\n  name: foo-hpa\\nspec:\\n  scaleTargetRef:\\n    apiVersion: apps/v1\\n    kind: Deployment\\n    name: foo-deployment\\n  minReplicas: 1\\n  maxReplicas: 10\\n  metrics:\\n  - type: Resource\\n    resource:\\n      name: cpu\\n      target:\\n        type: AverageValue\\n        averageValue: 2\\n  - type: Resource\\n    resource:\\n      name: memory\\n      target:\\n        type: AverageValue\\n        averageValue: 8G\\n  behavior:\\n    scaleUp:\\n      stabilizationWindowSeconds: 30\\n      policies:\\n      - type: Percent\\n        value: 100\\n        periodSeconds: 60\\n    scaleDown:\\n      stabilizationWindowSeconds: 1800\\n      policies:\\n      - type: Pods\\n        value: 1\\n        periodSeconds: 300\n```\n\n----------------------------------------\n\nTITLE: Matching Machine Type and Image Capabilities in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the algorithm used to validate if a machine image's capabilities are compatible with a machine type's requirements. It iterates over each capability in `machineType.capabilities`, checking that there is at least one supported value in common with the image version. If any capability's supported value set has an empty intersection, the function returns false; otherwise, it returns true. This implementation expects both capability sets as input objects and returns a boolean, with the constraint that both must be structured as name-to-values maps.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor capabilityName, machineCapabilities in machineType.capabilities:\n  if union(imageVersion.capabilities[capabilityName], machineCapabilities) is empty:\n    return false\n      \nreturn true\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Managed Issuer from Shoot Status\nDESCRIPTION: Bash command to query and retrieve the managed service account issuer value from a shoot's status using kubectl.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/shoot_serviceaccounts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n my-project get shoot my-shoot -o jsonpath='{.status.advertisedAddresses[?(@.name==\"service-account-issuer\")].url}'\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes API Reference for Project\nDESCRIPTION: API reference showing the structure of the Project resource in Gardener, which represents a Gardener project with its properties including owner information, description, members, and namespace details.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Project\nmetadata:\n  # Standard object metadata\nspec:\n  createdBy: # Subject representing user who created the project\n  description: # Human-readable description\n  owner: # Subject representing project owner\n  purpose: # Human-readable explanation of project purpose\n  members: # List of subjects with project roles\n  namespace: # Name of the namespace for the Project object\n  tolerations: # Tolerations for taints on seed clusters\n  dualApprovalForDeletion: # Configuration for dual approval concept\nstatus:\n  # Most recently observed status\n```\n\n----------------------------------------\n\nTITLE: Generic Extension CRD\nDESCRIPTION: Defines a Generic CRD used to trigger deployment of cloud-specific components in the shoot cluster. Used for components like cloud-controller-manager or CSI plugins.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Generic\nmetadata:\n  name: cloud-components\n  namespace: shoot--core--aws-01\nspec:\n  type: cloud-components\n  secretRef:\n    name: my-aws-credentials\n  shootSpec:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Metric Relabeling for Prometheus Scrape Jobs in Gardener\nDESCRIPTION: Demonstrates how to add a scrape job for a new component and implement metric whitelisting using metric_relabel_configs. This prevents ingesting unnecessary metrics by only collecting those needed for alerts and dashboards.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/monitoring-stack.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    - job_name: example-component\n      ...\n      metric_relabel_configs:\n{{ include \"prometheus.keep-metrics.metric-relabel-config\" .Values.allowedMetrics.exampleComponent | indent 6 }}\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeCluster Configuration Structure - Gardener Go\nDESCRIPTION: Struct describing configuration for a runtime cluster in Gardener, including ingress, networking, provider-specific info, and optional settings/volumes. Designed for use within a GardenSpec. Fields are themselves composed types referring to other configuration objects; this struct acts as a high-level aggregate.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype RuntimeCluster struct {\n    Ingress    Ingress    `json:\"ingress\"`\n    Networking RuntimeNetworking `json:\"networking\"`\n    Provider   Provider   `json:\"provider\"`\n    Settings   *Settings  `json:\"settings,omitempty\"`\n    Volume     *Volume    `json:\"volume,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Plane Failure Tolerance in Gardener Shoot Resource (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the control plane of a Gardener-managed cluster for high availability using zone or node-level failure tolerance. It sets the `failureTolerance.type` property under `controlPlane.highAvailability` in the Shoot resource specification. Dependencies: Gardener core cluster CRDs, sufficient cloud region zoning support (at least 3 zones for `zone` type). Inputs are the Shoot YAML; valid values for `type` are `node` and `zone`. Selecting `zone` enables the control plane to withstand single zone outages, enhancing overall cluster resilience.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nspec:\\n  controlPlane:\\n    highAvailability:\\n      failureTolerance:\\n        type: zone # valid values are `node` and `zone` (only available if your control plane resides in a region with 3+ zones)\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Project ResourceQuota in Gardener Controller Manager\nDESCRIPTION: Example configuration for setting up project quotas in the controller manager. This configuration specifies resource limits for shoots, secretbindings, credentialsbindings, and secrets that will be applied to project namespaces.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/controller-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontrollers:\n  project:\n    quotas:\n    - config:\n        apiVersion: v1\n        kind: ResourceQuota\n        spec:\n          hard:\n            count/shoots.core.gardener.cloud: \"100\"\n            count/secretbindings.core.gardener.cloud: \"10\"\n            count/credentialsbindings.security.gardener.cloud: \"10\"\n            count/secrets: \"800\"\n      projectSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Seed Resource in Kubernetes\nDESCRIPTION: This code snippet defines the structure of a Seed resource in the Gardener API. It represents an installation request for an external controller with various configuration options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_5\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Seed\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  backup: # Optional backup configuration\n  dns: # DNS-relevant information\n  networks: # Pod, service and worker network configuration\n  provider: # Provider type and region\n  taints: # Optional taints on the seed\n  volume: # Optional settings for persistentvolumes\n  settings: # Optional settings for this seed cluster\n  ingress: # Optional ingress specific settings\n  accessRestrictions: # Optional access restrictions\n  extensions: # Optional type and provider information for extensions\n  resources: # Optional named resource references\nstatus:\n  # Status of the installation\n```\n\n----------------------------------------\n\nTITLE: Enabling NodeLocalDNS in Gardener Shoot (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to enable the NodeLocalDNS feature for a Gardener Shoot cluster by setting the `spec.systemComponents.nodeLocalDNS.enabled` field to `true` within the Shoot resource definition. Enabling this feature deploys a local DNS cache agent on each worker node, improving DNS performance and reliability by caching DNS queries locally. Note that enabling or disabling this feature triggers a rolling update of all worker nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/node-local-dns.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  ...\n  systemComponents:\n    nodeLocalDNS:\n      enabled: true\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring OperatingSystemConfig Status with CloudConfig and Units\nDESCRIPTION: Example showing how to provide the secret reference, lastOperation status, and units that should be restarted when the configuration is updated in the OperatingSystemConfig status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n...\nstatus:\n  cloudConfig:\n    secretRef:\n      name: osc-result-pool-01-original\n      namespace: default\n  lastOperation:\n    description: Successfully generated cloud config\n    lastUpdateTime: \"2019-01-23T07:45:23Z\"\n    progress: 100\n    state: Succeeded\n    type: Reconcile\n  observedGeneration: 5\n  units:\n  - docker-monitor.service\n```\n\n----------------------------------------\n\nTITLE: Implementing SecretsManager for CA Rotation in Gardener Extension Controllers\nDESCRIPTION: Example implementation of SecretsManager in a Gardener extension controller to manage certificate authorities and server certificates. The code demonstrates how to properly initialize the SecretsManager, define secret configurations with appropriate options, generate secrets, and perform cleanup after rotation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/ca-rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  // identity for SecretsManager instance in ControlPlane controller\n  identity = \"provider-foo-controlplane\"\n  // secret config name of the dedicated CA\n  caControlPlaneName = \"ca-provider-foo-controlplane\"\n)\n\nfunc Reconcile() {\n  var (\n    cluster *extensionscontroller.Cluster\n    client  client.Client\n\n    // define wanted secrets with options\n    secretConfigs = []extensionssecretsmanager.SecretConfigWithOptions{\n      {\n        // dedicated CA for ControlPlane controller\n        Config: &secretutils.CertificateSecretConfig{\n          Name:       caControlPlaneName,\n          CommonName: \"ca-provider-foo-controlplane\",\n          CertType:   secretutils.CACert,\n        },\n        // persist CA so that it gets restored on control plane migration\n        Options: []secretsmanager.GenerateOption{secretsmanager.Persist()},\n      },\n      {\n        // server cert for control plane component\n        Config: &secretutils.CertificateSecretConfig{\n          Name:       \"cloud-controller-manager\",\n          CommonName: \"cloud-controller-manager\",\n          DNSNames:   kutil.DNSNamesForService(\"cloud-controller-manager\", namespace),\n          CertType:   secretutils.ServerCert,\n        },\n        // sign with our dedicated CA\n        Options: []secretsmanager.GenerateOption{secretsmanager.SignedByCA(caControlPlaneName)},\n      },\n    }\n  )\n\n  // initialize SecretsManager based on Cluster object\n  sm, err := extensionssecretsmanager.SecretsManagerForCluster(ctx, logger.WithName(\"secretsmanager\"), clock.RealClock{}, client, cluster, identity, secretConfigs)\n\n  // generate all wanted secrets (first CAs, then the rest)\n  secrets, err := extensionssecretsmanager.GenerateAllSecrets(ctx, sm, secretConfigs)\n\n  // cleanup any secrets that are not needed any more (e.g. after rotation)\n  err = sm.Cleanup(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Network Resource with Calico in Gardener\nDESCRIPTION: Example YAML configuration for a Network resource using Calico as the network plugin. The resource defines IPv4 family, pod and service CIDRs, and Calico-specific configuration in the providerConfig section.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/network.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Network\nmetadata:\n  name: my-network\nspec:\n  ipFamilies:\n  - IPv4\n  podCIDR: 100.244.0.0/16\n  serviceCIDR: 100.32.0.0/13\n  type: calico\n  providerConfig:\n    apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1\n    kind: NetworkConfig\n    backend: bird\n    ipam:\n      cidr: usePodCIDR\n      type: host-local\nstatus:\n  ipFamilies:\n  - IPv4\n```\n\n----------------------------------------\n\nTITLE: Creating Local Garden and Installing Gardenlet\nDESCRIPTION: Command to create a local Garden and install gardenlet into the KinD cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nmake operator-seed-up\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener Project Resource in YAML\nDESCRIPTION: This YAML snippet defines a Gardener `Project` resource using the `core.gardener.cloud/v1beta1` API. It specifies metadata like the project name (`example`), and a spec containing a description, members with roles (`admin`, `viewer`), the target Kubernetes namespace (`garden-example`), an owner, and the project's purpose. The status section indicates the observed generation and the phase (`Ready`).\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Project\nmetadata:\n  name: example\nspec:\n  description: Example project\n  members:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: john.doe@example.com\n    role: admin\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: joe.doe@example.com\n    role: viewer\n  namespace: garden-example\n  owner:\n    apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: john.doe@example.com\n  purpose: Example project\nstatus:\n  observedGeneration: 1\n  phase: Ready\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hosts Directory Pattern\nDESCRIPTION: Illustrates the required directory structure under `/etc/containerd/certs.d` when using the 'hosts directory pattern'. A subdirectory named after the upstream registry (`docker.io` in this example) must contain a `hosts.toml` file.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/containerd-registry-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n$ tree /etc/containerd/certs.d\n/etc/containerd/certs.d\n└── docker.io\n    └── hosts.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Host File for DNS Resolution\nDESCRIPTION: This script adds DNS entries to the local /etc/hosts file to make Shoot cluster API servers and Ingress endpoints resolvable. This is necessary because provider-local extension runs inside the KinD cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | sudo tee -a /etc/hosts\n\n# Begin of Gardener local setup section\n# Shoot API server domains\n172.18.255.1 api.local.local.external.local.gardener.cloud\n172.18.255.1 api.local.local.internal.local.gardener.cloud\n\n# Ingress\n172.18.255.1 p-seed.ingress.local.seed.local.gardener.cloud\n172.18.255.1 g-seed.ingress.local.seed.local.gardener.cloud\n172.18.255.1 gu-local--local.ingress.local.seed.local.gardener.cloud\n172.18.255.1 p-local--local.ingress.local.seed.local.gardener.cloud\n172.18.255.1 v-local--local.ingress.local.seed.local.gardener.cloud\n\n# E2E tests\n172.18.255.1 api.e2e-managedseed.garden.external.local.gardener.cloud\n172.18.255.1 api.e2e-managedseed.garden.internal.local.gardener.cloud\n172.18.255.1 api.e2e-hib.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-hib.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-hib-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-hib-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-unpriv.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-unpriv.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-wake-up.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-wake-up.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-wake-up-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-wake-up-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-wake-up-ncp.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-wake-up-ncp.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-migrate.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-migrate.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-migrate-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-migrate-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-mgr-hib.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-mgr-hib.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-rotate.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-rotate.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-rotate-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-rotate-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-rot-noroll.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-rot-noroll.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-default.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-default.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-default-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-default-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-force-delete.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-force-delete.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-fd-hib.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-fd-hib.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-upd-node.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-upd-node.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-upd-node-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-upd-node-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-upgrade.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-upgrade.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-upgrade-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-upgrade-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-upg-hib.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-upg-hib.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-upg-hib-wl.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-upg-hib-wl.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-auth-one.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-auth-one.local.internal.local.gardener.cloud\n172.18.255.1 api.e2e-auth-two.local.external.local.gardener.cloud\n172.18.255.1 api.e2e-auth-two.local.internal.local.gardener.cloud\n172.18.255.1 gu-local--e2e-rotate.ingress.local.seed.local.gardener.cloud\n172.18.255.1 gu-local--e2e-rotate-wl.ingress.local.seed.local.gardener.cloud\n172.18.255.1 gu-local--e2e-rot-noroll.ingress.local.seed.local.gardener.cloud\n# End of Gardener local setup section\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a NamespacedCloudProfile YAML Manifest\nDESCRIPTION: Example manifest for the proposed NamespacedCloudProfile resource that inherits from a parent CloudProfile while overriding specific fields including Kubernetes versions, machine images, machine types, and volume types.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: NamespacedCloudProfile\nmetadata:\n  name: aws-profile-xyz\n  namespace: project-xyz\nspec:\n  parent:\n    kind: CloudProfile\n    name: aws-central-cloud-profile\n  kubernetes:\n    versions:\n      - version: 1.28.6\n        expirationDate: 2024-06-06T01:02:03Z\n  machineImages:\n    - name: suse-chost\n      versions:\n        - version: 16.4\n          expirationDate: 2023-08-8T23:59:59Z\n  machineTypes: \n    - name: m5.xlarge\n      cpu: \"8\"\n      gpu: \"0\"\n      memory: 16Gi\n  volumeTypes:\n    - name: ab6\n      class: premium\n      usable: true\n```\n\n----------------------------------------\n\nTITLE: CredentialsBinding Resource Structure\nDESCRIPTION: Kubernetes custom resource definition for CredentialsBinding that represents a binding to credentials in the same or another namespace. It includes provider configuration, credentials reference and optional quota references.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/security.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.gardener.cloud/v1alpha1\nkind: CredentialsBinding\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  provider:\n    type: string\n  credentialsRef:\n    # Reference to Secret or WorkloadIdentity\n  quotas:\n    # Optional references to Quota objects\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Kubeconfig for Shoot Access\nDESCRIPTION: This script generates an admin kubeconfig for the local Shoot cluster in the garden-local namespace. The kubeconfig is valid for one hour by default and is redirected to a file named admin-kubeconf.yaml.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./hack/usage/generate-admin-kubeconf.sh > admin-kubeconf.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes API Reference for Quota\nDESCRIPTION: API reference showing the structure of the Quota resource in Gardener, which represents resource consumption constraints applied either per project or per provider secret.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Quota\nmetadata:\n  # Standard object metadata\nspec:\n  clusterLifetimeDays: # Lifetime of a Shoot cluster in days\n  metrics: # List of resources under constraints\n  scope: # Scope of the Quota object (project, secret, or workloadidentity)\n```\n\n----------------------------------------\n\nTITLE: Defining BastionStatus in Go\nDESCRIPTION: Defines the BastionStatus struct representing the current state of a Bastion. It includes fields for ingress details, conditions, heartbeat timestamp, expiration timestamp, and observed generation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operations.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype BastionStatus struct {\n\tIngress                 corev1.LoadBalancerIngress\n\tConditions              []gardencorev1beta1.Condition\n\tLastHeartbeatTimestamp  metav1.Time\n\tExpirationTimestamp     metav1.Time\n\tObservedGeneration      int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pod Disruption Budget in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a Pod Disruption Budget (PDB) in Kubernetes. It specifies a maximum of 1 unavailable pod for the selected workload, helping to maintain high availability during voluntary disruptions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nspec:\n  maxUnavailable: 1\n  selector:\n    matchLabels:\n      ...\n```\n\n----------------------------------------\n\nTITLE: CloudProfile Version Classification Example in YAML\nDESCRIPTION: Example CloudProfile configuration showing how to classify different Kubernetes versions with their states (preview, supported, deprecated) and expiration dates. This demonstrates the version management structure used in Gardener.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_versions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: alicloud\nspec:\n  kubernetes:\n    versions:\n      - classification: preview\n        version: 1.27.0\n      - classification: preview\n        version: 1.26.3\n      - classification: supported\n        version: 1.26.2\n      - classification: preview\n        version: 1.25.5\n      - classification: supported\n        version: 1.25.4\n      - classification: supported\n        version: 1.24.6\n      - classification: deprecated\n        expirationDate: \"2022-11-30T23:59:59Z\"\n        version: 1.24.5\n```\n\n----------------------------------------\n\nTITLE: Resulting Extension Resource with Provider Configuration\nDESCRIPTION: YAML showing the resulting Extension resource after the Shoot configuration is processed. The provider configuration from the Shoot is copied to the Extension resource.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/extension.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  name: example\n  namespace: shoot--foo--bar\nspec:\n  type: example\n  providerConfig:\n    foo: bar\n```\n\n----------------------------------------\n\nTITLE: Defining Long-Term Network Extension Resource in Gardener\nDESCRIPTION: Example YAML configuration for the long-term implementation of the Network resource, showing how Calico can be configured with custom provider-specific settings. The spec includes type, CIDR ranges, and detailed provider configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/03-networking-extensibility.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Network\nmetadata:\n  name: calico-network\n  namespace: shoot--core--test-01\nspec:\n  type: calico\n  clusterCIDR: 192.168.0.0/24\n  serviceCIDR:  10.96.0.0/24\n  providerConfig:\n    apiVersion: calico.extensions.gardener.cloud/v1alpha1\n    kind: NetworkConfig\n    ipam:\n      type: host-local\n      cidr: usePodCIDR\n    backend: bird\n    typha:\n      enabled: true\nstatus:\n  observedGeneration: ...\n  state: ...\n  lastError: ..\n  lastOperation: ...\n  providerStatus:\n    apiVersion: calico.extensions.gardener.cloud/v1alpha1\n    kind: NetworkStatus\n    components:\n      kubeControllers: true\n      calicoNodes: true\n    connectivityTests:\n      pods: true\n      services: true\n    networkModules:\n      arp_proxy: true\n    config:\n      clusterCIDR: 192.168.0.0/24\n      serviceCIDR:  10.96.0.0/24\n      ipam:\n        type: host-local\n        cidr: usePodCIDR\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Topology Spread Constraints in Kubernetes\nDESCRIPTION: YAML configuration for Pod Topology Spread Constraints to distribute pods across zones and nodes. Includes maxSkew settings for both zone and hostname topology, with rolloutVersion label to handle updates.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 2\n    topologyKey: topology.kubernetes.io/zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        <labels>\n        gardener.cloud/rolloutVersion: <version>\n  - maxSkew: 1\n    topologyKey: kubernetes.io/hostname\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        <labels>\n        gardener.cloud/rolloutVersion: <version>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Analyzing Heap Profile from Controller Manager with curl\nDESCRIPTION: Demonstrates how to download a heap profile from the gardener-controller-manager using curl and analyze it with Go's pprof tool. The profile is first saved to a temporary file and then loaded into the pprof interactive mode.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/profiling.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:2718/debug/pprof/heap > /tmp/heap-controller-manager\n$ go tool pprof /tmp/heap-controller-manager\nType: inuse_space\nTime: Sep 3, 2021 at 10:05am (CEST)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof)\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Resource with Dynamic Node CIDR in YAML\nDESCRIPTION: Example YAML showing an Infrastructure resource status with dynamically provisioned node CIDR, used when static CIDR definition is not allowed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/infrastructure.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--foo--bar\nspec:\n  ...\nstatus:\n  lastOperation: ...\n  providerStatus: ...\n  nodesCIDR: 10.250.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Based Topology Spread Constraints in Kubernetes\nDESCRIPTION: Configuration for zone-based topology spread constraints to ensure replicas are distributed across different availability zones. This constraint is mandatory when possible, using DoNotSchedule policy to enforce zone distribution with a minimum of 2 domains.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    minDomains: 2 # lower value of max replicas or number of zones\n    topologyKey: topology.kubernetes.io/zone\n    whenUnsatisfiable: DoNotSchedule\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Triggering Shoot Control Plane Migration with kubectl\nDESCRIPTION: Command sequence for operators to migrate a Shoot's control plane to a different Seed using the shoots/binding subresource. The commands retrieve the current Shoot configuration, update the seedName field, and apply the change.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/control_plane_migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE=my-namespace\nSHOOT_NAME=my-shoot\nDEST_SEED_NAME=destination-seed\n\nkubectl get --raw /apis/core.gardener.cloud/v1beta1/namespaces/${NAMESPACE}/shoots/${SHOOT_NAME} | jq -c '.spec.seedName = \"'${DEST_SEED_NAME}'\"' | kubectl replace --raw /apis/core.gardener.cloud/v1beta1/namespaces/${NAMESPACE}/shoots/${SHOOT_NAME}/binding -f - | jq -r '.spec.seedName'\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfile Capabilities Structure in Go\nDESCRIPTION: This Go code defines the `Spec` and `Capability` types that formalize how capabilities are represented in a CloudProfile. The `Spec` struct includes a slice of `Capability` instances, each with a `Name` and `Values`, enabling providers to express supported machine and image options flexibly. No external libraries are required. Inputs are struct instances, and outputs are native Go data structures; it is foundational for enforcing capability-based selection, with the primary constraint being accurate declaration per provider-specific needs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype Spec struct {\n    Capabilities []Capability\n}\n\ntype Capability struct {\n  Name string\n  Values []string\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting KUBECONFIG for KinD Cluster\nDESCRIPTION: Exports the KUBECONFIG environment variable to point to the KinD cluster's kubeconfig file. This allows kubectl commands to target the local KinD cluster for subsequent operations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport KUBECONFIG=$PWD/example/gardener-local/kind/local/kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Defining DataVolume Structure in Go\nDESCRIPTION: This code defines the DataVolume structure, which contains information about a data volume in a Gardener worker pool. It includes fields for volume name, type, size, and encryption status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntype DataVolume struct {\n\tName      string\n\tType      string\n\tSize      string\n\tEncrypted bool\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Worker Status with MachineDeployment Info in YAML\nDESCRIPTION: This YAML snippet illustrates the required structure within the `.status` field of a Gardener `Worker` resource. The `machineDeployments` list must contain entries for each created MachineDeployment, specifying its name, minimum, and maximum replicas. The `machineDeploymentsLastUpdateTime` timestamp indicates when this information was last updated. This status information is consumed by Gardener to configure the cluster-autoscaler.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/worker.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Worker\nmetadata:\n  name: worker\n  namespace: shoot--foo--bar\nspec:\n  ...\nstatus:\n  lastOperation: ...\n  machineDeployments:\n  - name: shoot--foo--bar-cpu-worker-z1\n    minimum: 2\n    maximum: 3\n  - name: shoot--foo--bar-cpu-worker-z2\n    minimum: 1\n    maximum: 2\n  machineDeploymentsLastUpdateTime: \"2023-05-01T12:44:27Z\"\n```\n\n----------------------------------------\n\nTITLE: Using Metadata-Only Client for Efficient Resource Listing in Go\nDESCRIPTION: This snippet shows how to use a metadata-only client to efficiently check if objects of a particular kind exist. It uses PartialObjectMetadataList to retrieve only metadata, reducing network traffic and resource usage when full object details aren't needed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  ctx       context.Context\n  c         client.Client                         // \"sigs.k8s.io/controller-runtime/pkg/client\"\n  shootList = &metav1.PartialObjectMetadataList{} // \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\nshootList.SetGroupVersionKind(gardencorev1beta1.SchemeGroupVersion.WithKind(\"ShootList\"))\n\nif err := c.List(ctx, shootList, client.InNamespace(\"garden-my-project\"), client.Limit(1)); err != nil {\n  return err\n}\n\nif len(shootList.Items) > 0 {\n  // project has at least one shoot\n} else {\n  // project doesn't have any shoots\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a CA Certificate Bundle with SecretsManager in Go\nDESCRIPTION: This code snippet shows how to retrieve a CA certificate bundle using the SecretsManager's Get method. It returns the bundle secret for the specified CA name.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/secrets_management.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncaSecret, found := k.secretsManager.Get(\"my-ca\")\nif !found {\n    return fmt.Errorf(\"secret my-ca not found\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Infrastructure CRD in YAML\nDESCRIPTION: This YAML snippet demonstrates how Gardener creates a Custom Resource Definition (CRD) for AWS infrastructure in the seed cluster. It includes network configuration, DNS settings, and other AWS-specific details.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--core--aws-01\nspec:\n  type: aws\n  providerConfig:\n    apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureConfig\n    networks:\n      vpc:\n        cidr: 10.250.0.0/16\n      internal:\n      - 10.250.112.0/22\n      public:\n      - 10.250.96.0/22\n      workers:\n      - 10.250.0.0/19\n    zones:\n    - eu-west-1a\n  dns:\n    apiserver: api.aws-01.core.example.com\n  region: eu-west-1\n  secretRef:\n    name: my-aws-credentials\n  sshPublicKey: |\n    base64(key)\n```\n\n----------------------------------------\n\nTITLE: BackupBucket Configuration\nDESCRIPTION: Specification for backup bucket resources including provider details, configuration and credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: string    # Provider type\n  region: string  # Bucket region\nproviderConfig: RawExtension\nsecretRef: SecretReference\nseedName: string  # Name of allocated seed\n```\n\n----------------------------------------\n\nTITLE: Defining a WorkloadIdentity Resource in Gardener (YAML)\nDESCRIPTION: This YAML snippet defines an example `WorkloadIdentity` custom resource within the `security.gardener.cloud/v1alpha1` API group. It specifies the intended audiences (`audiences`), the target system (`targetSystem.type` like 'aws'), and provider-specific configuration (`providerConfig`) such as an IAM Role ARN for AWS. The `status.sub` field shows the subject claim format computed by Gardener.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.gardener.cloud/v1alpha1\nkind: WorkloadIdentity\nmetadata:\n  name: banana-testing\n  namespace: garden-local\n  uid: 12b580fe-1f74-4195-852b-e1a74b03496a # generated by the API server.\nspec:\n  audiences: # Required field.\n  - team-foo\n  targetSystem: # Required field.\n    type: aws # Required field.\n    providerConfig: # Optional field of type *runtime.RawExtension, extensions can make it mandatory via admission webhooks.\n      apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n      kind: WorkloadIdentityConfig\n      iamRoleARN: arn:aws:iam::112233445566:role/gardener-dev\nstatus:\n  sub: gardener.cloud:workloadidentity:garden-local:banana-testing:12b580fe-1f74-4195-852b-e1a74b03496a\n```\n\n----------------------------------------\n\nTITLE: Editing CoreDNS ConfigMap for Custom DNS Handling\nDESCRIPTION: This YAML snippet demonstrates how to customize the CoreDNS configuration by editing the `coredns-custom` ConfigMap. Dependencies include having a Kubernetes cluster with CoreDNS and access to the `kube-system` namespace. The configuration points `.global` DNS queries to another DNS by modifying the `forward` entry to `1.2.3.4`. Inputs are the DNS names and IPs, and the outputs redirect DNS traffic accordingly. Limitations include that changes can impact DNS resolution across the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/custom-dns-config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns-custom\n  namespace: kube-system\ndata:\n  istio.server: |\n    global:8053 {\n            errors\n            cache 30\n            forward . 1.2.3.4\n        }\n  corefile.override: |\n         # <some-plugin> <some-plugin-config>\n         debug\n         whoami\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Autoscaler in Gardener Shoot Cluster Spec\nDESCRIPTION: Example of configuring Cluster Autoscaler options in a Gardener shoot cluster specification. It shows global settings and worker pool-specific settings for autoscaling parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/shoot_pod_autoscaling_best_practices.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Global CA configuration\nclusterAutoscaler:\n  expander: least-waste\n  scaleDownDelayAfterAdd: 1h\n  scaleDownDelayAfterFailure: 3m\n  scaleDownDelayAfterDelete: 0s\n\n# Worker pool-specific CA configuration\nworkers:\n  - name: cpu-worker\n    minimum: 1\n    maximum: 5\n    maxSurge: 1\n    maxUnavailable: 0\n    machine:\n      type: n1-standard-4\n    volume:\n      size: 50Gi\n      type: pd-standard\n    zones:\n      - europe-west1-b\n      - europe-west1-c\n      - europe-west1-d\n    clusterconfiguration:\n      scaleDownUtilizationThreshold: 0.5\n      scaleDownUnneededTime: 30m\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectQuotaConfiguration Structure - Gardener Go\nDESCRIPTION: Models quota configuration at the project level, consisting of a Config field referencing a core Kubernetes ResourceQuota object, and an optional ProjectSelector for targeting specific project resources via a label selector. This is used within the GardenerControllerManagerConfig context for enforcing resource usage constraints across projects.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype ProjectQuotaConfiguration struct {\n    Config          corev1.ResourceQuota      `json:\"config\"`\n    ProjectSelector *metav1.LabelSelector     `json:\"projectSelector,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PodSecurity Admission Plugin in YAML\nDESCRIPTION: This YAML configuration snippet sets up the PodSecurity admission plugin for Kubernetes. Users can define default security levels as 'privileged', 'baseline', or 'restricted' and set versioning preferences. It includes optional exemptions for namespaces, usernames, and runtime classes. The Gardeners' setup automatically exempts the 'kube-system' namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/pod-security.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmissionPlugins:\n- name: PodSecurity\n  config:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n    kind: PodSecurityConfiguration\n    # Defaults applied when a mode label is not set.\n    #\n    # Level label values must be one of:\n    # - \"privileged\" (default)\n    # - \"baseline\"\n    # - \"restricted\"\n    #\n    # Version label values must be one of:\n    # - \"latest\" (default) \n    # - specific version like \"v1.25\"\n    defaults:\n      enforce: \"privileged\"\n      enforce-version: \"latest\"\n      audit: \"privileged\"\n      audit-version: \"latest\"\n      warn: \"privileged\"\n      warn-version: \"latest\"\n    exemptions:\n      # Array of authenticated usernames to exempt.\n      usernames: []\n      # Array of runtime class names to exempt.\n      runtimeClasses: []\n      # Array of namespaces to exempt.\n      namespaces: []\n```\n\n----------------------------------------\n\nTITLE: Configuring RuntimeDefault Seccomp Profile in Pod Spec - YAML\nDESCRIPTION: This snippet demonstrates how to explicitly set the seccompProfile type to RuntimeDefault in a Kubernetes Pod specification using YAML. It should be applied to the 'securityContext' section of a Pod manifest to enforce the use of the container runtime's default seccomp profile. No additional dependencies are required beyond Kubernetes itself. The key parameters include 'seccompProfile.type' which must be set to 'RuntimeDefault'. The configuration is effective for workloads managed by Gardener in seed clusters, unless overridden by pod labels or explicit configuration, as described in the surrounding documentation. The output is the Pod configured to run with the default seccomp profile; limitations include the inability to affect privileged containers which always run unconfined.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/default_seccomp_profile.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n```\n\n----------------------------------------\n\nTITLE: WorkerPool CRD Definition\nDESCRIPTION: Defines a WorkerPool CRD that specifies the configuration for a group of worker nodes including cloud provider settings, machine specifications, and scaling parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: WorkerPool\nmetadata:\n  name: pool-01\n  namespace: shoot--core--aws-01\nspec:\n  cloudConfig: base64(downloader-cloud-config)\n  infrastructureProviderStatus:\n    apiVersion: aws.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureStatus\n    vpc:\n      id: vpc-1234\n      subnets:\n      - id: subnet-acbd1234\n        name: workers\n        zone: eu-west-1\n      securityGroups:\n      - id: sg-xyz12345\n        name: workers\n    iam:\n      nodesRoleARN: <some-arn>\n      instanceProfileName: foo\n    ec2:\n      keyName: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Secret for Workload Identity Token\nDESCRIPTION: Example YAML configuration for a Kubernetes Secret resource that stores workload identity tokens, provider configuration, and metadata. The secret includes annotations for workload identity references and labels for identification by controllers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ndata:\n  config: YXBpVmV...bmZpZw==\n  token: eyJhbGciOiJ....OkBBrVWA\nstringData:\n  credentialsFile: | # Field injected by extension admission webhook, key name is controller by the extension\n    [default]\n    role_arn=arn:aws:iam::112233445566:role/gardener-dev\n    web_identity_token_file=/var/run/workload-identity/aws/token\nmetadata:\n  name: cloudprovider\n  namespace: shoot--local--foo\n  annotations:\n    workloadidentity.security.gardener.cloud/namespace: garden-local\n    workloadidentity.security.gardener.cloud/name: banana-testing\n    workloadidentity.security.gardener.cloud/context-object: '{\"apiVersion\":\"core.gardener.cloud/v1beta1\",\"kind\":\"Shoot\",\"name\":\"foo\",\"namespace\":\"garden-local\",\"uid\":\"54d09554-6a68-4f46-a23a-e3592385d820\"}'\n  labels:\n    security.gardener.cloud/purpose: workload-identity-token-requestor\n    workloadidentity.security.gardener.cloud/provider: aws # {aws,azure,gcp,...}\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Authentication in Gardener Shoot YAML\nDESCRIPTION: This snippet shows how to enable structured authentication in a Gardener Shoot resource by specifying a ConfigMap containing the authentication configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\n...\nspec:\n  kubernetes:\n    kubeAPIServer:\n      structuredAuthentication:\n        configMapName: name-of-configmap-containing-authentication-config\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterOpenIDConnectPreset with Kubernetes YAML - YAML\nDESCRIPTION: Defines a ClusterOpenIDConnectPreset resource for cluster-wide OIDC injection into Shoot clusters. The manifest includes label selectors for both project and Shoot, OIDC server config fields, and a priority weight. Requires the ClusterOpenIDConnectPreset CRD and an enabled admission plugin. Input is the configuration YAML; output is a reusable OIDC config applied to matching Shoots in any project.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: settings.gardener.cloud/v1alpha1\\nkind: ClusterOpenIDConnectPreset\\nmetadata:\\n  name:  test\\nspec:\\n  shootSelector:\\n    matchLabels:\\n      oidc: enabled\\n  projectSelector: {} # selects all projects.\\n  server:\\n    clientID: cluster-preset\\n    issuerURL: https://foo.bar\\n    # caBundle: |\\n    #   -----BEGIN CERTIFICATE-----\\n    #   Li4u\\n    #   -----END CERTIFICATE-----\\n    groupsClaim: groups-claim\\n    groupsPrefix: groups-prefix\\n    usernameClaim: username-claim\\n    usernamePrefix: username-prefix\\n    signingAlgs:\\n    - RS256\\n    requiredClaims:\\n      key: value\\n  weight: 90\\n\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeClass for gVisor Container Runtime\nDESCRIPTION: YAML definition for a RuntimeClass resource that defines the gVisor runtime configuration. This resource is created by the container runtime extension controller and allows pods to use gVisor by specifying the runtime class in their spec.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/10-shoot-additional-container-runtimes.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.k8s.io/v1beta1\nkind: RuntimeClass\nmetadata:\n  name: gvisor\nhandler: runsc\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener Quota Resource in YAML\nDESCRIPTION: This YAML snippet defines a Gardener `Quota` resource using the `core.gardener.cloud/v1beta1` API. It sets resource limits within a specific scope, typically a `Project`. This example (`trial-quota` in the `garden-trial` namespace) defines limits for metrics like CPU, GPU, memory, standard/premium storage, and load balancers. An optional `clusterLifetimeDays` parameter can enforce a maximum lifespan for clusters associated with this quota.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Quota\nmetadata:\n  name: trial-quota\n  namespace: garden-trial\nspec:\n  scope:\n    apiGroup: core.gardener.cloud\n    kind: Project\n# clusterLifetimeDays: 14\n  metrics:\n    cpu: \"200\"\n    gpu: \"20\"\n    memory: 4000Gi\n    storage.standard: 8000Gi\n    storage.premium: 2000Gi\n    loadbalancer: \"100\"\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Secret with SecretsManager in Go\nDESCRIPTION: Example of generating a certificate secret named 'foo' using the SecretsManager. This demonstrates the basic pattern for secret generation that would need to be considered when migrating existing secrets to SecretsManager management.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/secrets_management.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := k.secretsManager.Generate(\n    ctx,\n    &secrets.CertificateSecretConfig{\n        Name:                        \"foo\",\n        // ...\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Pod Network CIDR in YAML\nDESCRIPTION: Defines the Pod network CIDR range for a Gardener Shoot cluster using the `spec.networking.pods` field within the Shoot resource definition. This setting is crucial for IP address allocation to pods and is immutable after creation. It works in conjunction with the network plugin specified in `spec.networking.type` (e.g., calico, cilium).\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_networking.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  networking:\n    type: <some-network-extension-name> # {calico,cilium}\n    pods: 100.96.0.0/16\n    nodes: ...\n    services: ...\n```\n\n----------------------------------------\n\nTITLE: Manually Hibernating a Cluster in Gardener\nDESCRIPTION: This kubectl command patches the Shoot resource to enable hibernation. It sets the .spec.hibernation.enabled field to true, indicating the cluster's desired state is to be hibernated.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_hibernate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl patch shoot -n $NAMESPACE $SHOOT_NAME -p '{\"spec\":{\"hibernation\":{\"enabled\": true}}}'\n```\n\n----------------------------------------\n\nTITLE: Example OperatingSystemConfig Resource in YAML\nDESCRIPTION: An example of an OperatingSystemConfig custom resource that defines systemd units and files to be reconciled on worker nodes. It includes configuration for containerd service, monitoring, and various system files.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: OperatingSystemConfig\nmetadata:\n  name: pool-01-original\n  namespace: default\nspec:\n  type: <my-operating-system>\n  purpose: reconcile\n  units:\n  - name: containerd.service\n    dropIns:\n    - name: 10-containerd-opts.conf\n      content: |\n        [Service]\n        Environment=\"SOME_OPTS=--foo=bar\"\n  - name: containerd-monitor.service\n    command: start\n    enable: true\n    content: |\n      [Unit]\n      Description=Containerd-monitor daemon\n      After=kubelet.service\n      [Install]\n      WantedBy=multi-user.target\n      [Service]\n      Restart=always\n      EnvironmentFile=/etc/environment\n      ExecStart=/opt/bin/health-monitor containerd\n  files:\n  - path: /var/lib/kubelet/ca.crt\n    permissions: 0644\n    encoding: b64\n    content:\n      secretRef:\n        name: default-token-5dtjz\n        dataKey: token\n  - path: /etc/sysctl.d/99-k8s-general.conf\n    permissions: 0644\n    content:\n      inline:\n        data: |\n          # A higher vm.max_map_count is great for elasticsearch, mongo, or other mmap users\n          # See https://github.com/kubernetes/kops/issues/1340\n          vm.max_map_count = 135217728\n```\n\n----------------------------------------\n\nTITLE: Checking Seed Status in Bash\nDESCRIPTION: This Bash command retrieves the status conditions of a Seed resource in Kubernetes and formats the output using jq. It's used to verify that the seed cluster is registered and ready in the garden cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get seed sweet-seed -o json | jq .status.conditions\n```\n\n----------------------------------------\n\nTITLE: Defining Extension-Specific Provider Configuration in a Shoot Resource\nDESCRIPTION: A YAML example of a Shoot resource containing AWS-specific provider configuration that would be validated by the AWS provider extension. This shows how infrastructure configuration for a specific cloud provider is structured within a Shoot resource.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/admission.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: johndoe-aws\n  namespace: garden-dev\nspec:\n  ...\n  region: eu-west-1\n  provider:\n    type: aws\n    providerConfig:\n      apiVersion: aws.cloud.gardener.cloud/v1alpha1\n      kind: InfrastructureConfig\n      networks:\n        vpc: # specify either 'id' or 'cidr'\n        # id: vpc-123456\n          cidr: 10.250.0.0/16\n        internal:\n        - 10.250.112.0/22\n        public:\n        - 10.250.96.0/22\n        workers:\n        - 10.250.0.0/19\n      zones:\n      - eu-west-1a\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring CRI and Container Runtimes in Gardener Worker Groups\nDESCRIPTION: YAML configuration example showing how to specify CRI and additional container runtimes for a worker group in a Gardener shoot cluster. This configuration uses containerd as the CRI implementation and adds both gvisor and kata-containers as additional runtime options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/10-shoot-additional-container-runtimes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkers:\n- name: worker-b8jg5\n  machineType: m5.large\n  volumeType: gp2\n  volumeSize: 50Gi\n  autoScalerMin: 1\n  autoScalerMax: 2\n  maxSurge: 1\n  cri:\n    name: containerd\n    containerRuntimes:\n    - type: gvisor\n    - type: kata-containers\n  machineImage:\n    name: coreos\n    version: 2135.6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceAccount with Projected Token\nDESCRIPTION: Example showing how to configure a dedicated ServiceAccount with automountServiceAccountToken disabled for use with gardener-resource-manager's ProjectedTokenMount webhook.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/component-checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nServiceAccount: &v1.ServiceAccount{\n    ObjectMeta: metav1.ObjectMeta{\n        Name:      o.serviceAccountName,\n        Namespace: o.namespace,\n    },\n    AutomountServiceAccountToken: pointer.Bool(false),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Network Provider in Gardener\nDESCRIPTION: Example YAML configuration for a Network resource using a custom 'gardenet' network plugin. This demonstrates how to define a network extension with custom configuration fields in the providerConfig section.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/network.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Network\nmetadata:\n  name: my-network\nspec:\n  ipFamilies:\n  - IPv4\n  podCIDR: 100.244.0.0/16\n  serviceCIDR: 100.32.0.0/13\n  type: gardenet\n  providerConfig:\n    apiVersion: gardenet.networking.extensions.gardener.cloud/v1alpha1\n    kind: NetworkConfig\n    gardenetCustomConfigField: <value>\n    ipam:\n      cidr: usePodCIDR\n      type: host-local\n```\n\n----------------------------------------\n\nTITLE: Configuring Gardener Plant Resource in YAML\nDESCRIPTION: This YAML snippet defines a Gardener plant resource, which represents an external Kubernetes cluster. It includes a secret for the kubeconfig, endpoints for management, and status information about the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: crazy-plant-secret\n  namespace: garden-core\ntype: Opaque\ndata:\n  kubeconfig: base64(kubeconfig-for-plant-cluster)\n\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: Plant\nmetadata:\n  name: crazy-plant\n  namespace: garden-core\nspec:\n  secretRef:\n    name: crazy-plant-secret\n  endpoints:\n  - name: Cluster GitHub repository\n    purpose: management\n    url: https://github.com/my-org/my-cluster-repo\n  - name: GKE cluster page\n    purpose: management\n    url: https://console.cloud.google.com/kubernetes/clusters/details/europe-west1-b/plant?project=my-project&authuser=1&tab=details\nstatus:\n  clusterInfo:\n    provider:\n      type: gce\n      region: europe-west4-c\n    kubernetes:\n      version: v1.11.10-gke.5\n  conditions:\n  - lastTransitionTime: \"2020-03-01T11:31:37Z\"\n    lastUpdateTime: \"2020-04-14T18:00:29Z\"\n    message: API server /healthz endpoint responded with success status code. [response_time:8ms]\n    reason: HealthzRequestFailed\n    status: \"True\"\n    type: APIServerAvailable\n  - lastTransitionTime: \"2020-04-01T06:26:56Z\"\n    lastUpdateTime: \"2020-04-14T18:00:29Z\"\n    message: Every node registered to the cluster is ready.\n    reason: EveryNodeReady\n    status: \"True\"\n    type: EveryNodeReady\n```\n\n----------------------------------------\n\nTITLE: Example DNSRecord Resource Configuration in YAML\nDESCRIPTION: This snippet demonstrates the structure of a DNSRecord resource with its associated Secret containing provider-specific credentials. It shows a sample configuration for an AWS Route53 DNS record of type A.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/dnsrecord.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: dnsrecord-bar-external\n  namespace: shoot--foo--bar\ntype: Opaque\ndata:\n  # aws-route53 specific credentials here\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: DNSRecord\nmetadata:\n  name: dnsrecord-external\n  namespace: default\nspec:\n  type: aws-route53\n  secretRef:\n    name: dnsrecord-bar-external\n    namespace: shoot--foo--bar\n# region: eu-west-1\n# zone: ZFOO\n  name: api.bar.foo.my-fancy-domain.com\n  recordType: A\n  values:\n  - 1.2.3.4\n# ttl: 600\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Authorization in Gardener Shoot YAML\nDESCRIPTION: This snippet illustrates how to enable structured authorization in a Gardener Shoot resource by specifying a ConfigMap for authorization configuration and referencing a Secret for the webhook kubeconfig.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\n...\nspec:\n  kubernetes:\n    kubeAPIServer:\n      structuredAuthorization:\n        configMapName: name-of-configmap-containing-authorization-config\n        kubeconfigs:\n        - authorizerName: my-webhook\n          secretName: webhook-kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Defining CPU Architecture Support in CloudProfile\nDESCRIPTION: Example demonstrating how to configure supported CPU architectures in a CloudProfile resource, including machine image versions and machine type specifications.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_supported_architectures.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  machineImages:\n  - name: test-image\n    versions:\n    - architectures: # optional\n      - <architecture-1>\n      - <architecture-2>\n      version: 1.2.3\n  machineTypes:\n  - architecture: <some-cpu-architecture>\n    cpu: \"2\"\n    gpu: \"0\"\n    memory: 8Gi\n    name: test-machine\n```\n\n----------------------------------------\n\nTITLE: Defining Maintenance Configuration Structure - Gardener Go\nDESCRIPTION: Defines a struct for specifying the time window in which maintenance can be performed on a Gardener-managed virtual garden cluster. The primary field, TimeWindow, embeds a reference to a MaintenanceTimeWindow struct from the Gardener core v1beta1 package. This type is used within VirtualCluster specifications to schedule operational downtime.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype Maintenance struct {\n    TimeWindow gardencorev1beta1.MaintenanceTimeWindow `json:\"timeWindow\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Egress Selector for API Server\nDESCRIPTION: This YAML configuration details the egress selector settings for a Kubernetes API server. It utilizes different protocols for cluster, master, and etcd traffic, specifying the proxy server for cluster-related traffic while using direct routing for others. These configurations rely on Kubernetes 1.18 or later to integrate with the proxy-server.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/11-apiserver-network-proxy.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\negress-selector-configuration.yaml: |-\n  apiVersion: apiserver.k8s.io/v1alpha1\n  kind: EgressSelectorConfiguration\n  egressSelections:\n  - name: cluster\n    connection:\n      proxyProtocol: httpConnect\n      transport:\n        tcp:\n          url: https://proxy-server:8131\n  - name: master\n    connection:\n      proxyProtocol: direct\n  - name: etcd\n    connection:\n      proxyProtocol: direct\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Capacity in GardenletConfiguration (YAML)\nDESCRIPTION: Example YAML snippet demonstrating how to configure resource limits within the GardenletConfiguration resource. The 'resources.capacity' field sets the total capacity for built-in resources like 'shoots' and 'persistent-volumes', while 'resources.reserved' specifies the amount reserved for Gardener's internal use. The gardenlet uses this configuration to populate the 'capacity' and 'allocatable' fields in the corresponding Seed's status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/13-automated-seed-management.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  capacity:\n    shoots: 100\n    persistent-volumes: 200\n  reserved:\n    persistent-volumes: 3\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources in Shoot Configuration with YAML\nDESCRIPTION: This example demonstrates how to reference resources (like secrets) in a Shoot configuration using the resources section. The referenced secret can be used in extension providerConfig and will be copied to the appropriate namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/referenced-resources.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: core.gardener.cloud/v1beta1\nmetadata:\n  name: crazy-botany\n  namespace: garden-dev\n  ...\nspec:\n  ...\n  extensions:\n  - type: foobar\n    providerConfig:\n      apiVersion: foobar.extensions.gardener.cloud/v1alpha1\n      kind: FooBarConfig\n      foo: bar\n      secretRef: foobar-secret\n  resources:\n  - name: foobar-secret\n    resourceRef:\n      apiVersion: v1\n      kind: Secret\n      name: my-foobar-secret\n```\n\n----------------------------------------\n\nTITLE: Defining LabelSelector for Seed Selection\nDESCRIPTION: Label selector used to filter seeds that can be used for shoots based on their label settings. Part of the SeedSelector configuration that enables constraint-based seed selection.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nLabelSelector</br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#labelselector-v1-meta\">\nKubernetes meta/v1.LabelSelector\n</a>\n</em>\n```\n\n----------------------------------------\n\nTITLE: Defining DNS Provider Type for Kubernetes Seeds\nDESCRIPTION: Configuration for the type of DNS provider used with a seed cluster. The type field specifies the provider (e.g., 'aws-route53') and includes a reference to a Secret containing credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\ntype</br>\n<em>\nstring\n</em>\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Prometheus ServiceMonitor in YAML\nDESCRIPTION: Example of creating a ServiceMonitor custom resource for the seed Prometheus instance. This configuration allows scraping metrics from a custom component in the seed cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    prometheus: seed\n  name: seed-my-component\n  namespace: garden\nspec:\n  selector:\n    matchLabels:\n      app: my-component\n  endpoints:\n  - metricRelabelings:\n    - action: keep\n      regex: ^(metric1|metric2|...)$\n      sourceLabels:\n      - __name__\n    port: metrics\n```\n\n----------------------------------------\n\nTITLE: Configuring Kube Controller Manager nodeCIDRMaskSize in YAML\nDESCRIPTION: Specifies the size of the subnet assigned to each node (`nodeCIDRMaskSize`) within the Kube Controller Manager configuration of a Gardener Shoot cluster. This value, combined with the overall Pod network CIDR, determines the maximum number of nodes the cluster can support and the number of IPs available for pods on each node. This configuration is immutable after creation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_networking.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    kubeControllerManager:\n      nodeCIDRMaskSize: 24 # (default)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dual Approval for Shoot Deletion - YAML\nDESCRIPTION: Defines a configuration for applying dual approval for the deletion of Shoot resources in a Gardener Project. It configures a selector for the resources requiring dual approval and whether the concept applies to ServiceAccounts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/projects.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  dualApprovalForDeletion:\n  - resource: shoots\n    selector:\n      matchLabels: {}\n    includeServiceAccounts: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ControllerRegistration and ControllerDeployment in Gardener\nDESCRIPTION: Example YAML configuration showing a ControllerDeployment that defines how to deploy an extension controller, and a ControllerRegistration that lists the resource kinds and types handled by the extension, which together enable Gardener to deploy the extension to seed clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1\nkind: ControllerDeployment\nmetadata:\n  name: provider-local\nhelm:\n  ociRepository:\n    ref: registry.example.com/gardener/extensions/local/extension:v1.0.0\n  values:\n    controllers:\n      dnsrecord:\n        concurrentSyncs: 20\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: ControllerRegistration\nmetadata:\n  name: provider-local\nspec:\n  deployment:\n    deploymentRefs:\n    - name: provider-local\n  resources:\n  - kind: BackupBucket\n    type: local\n  - kind: BackupEntry\n    type: local\n  - kind: DNSRecord\n    type: local\n  - kind: Infrastructure\n    type: local\n  - kind: ControlPlane\n    type: local\n  - kind: Worker\n    type: local\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Resource with Prometheus Operator - YAML\nDESCRIPTION: This YAML snippet defines a Prometheus resource in a shoot cluster using Prometheus Operator. Key features include setting the log format, specifying image details, defining storage requirements, and selecting namespaces and labels for discovering monitors. The dependencies include having the Prometheus Operator installed in the cluster. Critical parameters include the 'namespace', 'retention', 'replicas', 'storage' settings, and selectors for service and pod monitors.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  labels:\n    app: prometheus\n  name: prometheus\n  namespace: shoot--project--name\nspec:\n  enableAdminAPI: false\n  logFormat: logfmt\n  logLevel: info\n  image: image:tag\n  paused: false\n  portName: web\n  replicas: 1\n  retention: 30d\n  routePrefix: /\n  serviceAccountName: prometheus\n  serviceMonitorNamespaceSelector:\n    matchExpressions:\n    - key: kubernetes.io/metadata.name\n      operator: In\n      values:\n      - shoot--project--name\n  podMonitorNamespaceSelector:\n    matchExpressions:\n    - key: kubernetes.io/metadata.name\n      operator: In\n      values:\n      - shoot--project--name\n  ruleNamespaceSelector:\n    matchExpressions:\n    - key: kubernetes.io/metadata.name\n      operator: In\n      values:\n      - shoot--project--name\n  serviceMonitorSelector:\n    matchLabels:\n      monitoring.gardener.cloud/monitoring-target: shoot-control-plane\n  podMonitorSelector:\n    matchLabels:\n      monitoring.gardener.cloud/monitoring-target: shoot-control-plane\n  storage:\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n        - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n  version: v2.35.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine Image Update Strategies in CloudProfile YAML\nDESCRIPTION: Example YAML configuration for defining update strategies and versions for machine images in the CloudProfile. It shows how to set different update strategies (minor, patch) for different machine images.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_versions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmachineImages:\n  - name: gardenlinux\n    updateStrategy: minor\n    versions:\n     - version: 1096.1.0\n     - version: 934.8.0\n     - version: 934.7.0\n  - name: suse-chost\n    updateStrategy: patch\n    versions:\n    - version: 15.3.20220818 \n    - version: 15.3.20221118\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ContainerdConfig Structure (v1alpha1)\nDESCRIPTION: Specifies configuration options specifically for the containerd container runtime, used within CRIConfig. Includes settings for registry hosts (RegistryConfig), the sandbox image, and plugin configurations (PluginConfig).\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nField         Description\n------------- --------------------------------------------------------------------------------------\nregistries    (Optional) Registries configures the registry hosts for containerd.\n([]RegistryConfig)\n\nsandboxImage  SandboxImage configures the sandbox image for containerd.\n(string)\n\nplugins       (Optional) Plugins configures the plugins section in containerd’s config.toml.\n([]PluginConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating a ManagedSeed Resource with Default Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a basic ManagedSeed resource to register a shoot as a seed using default configuration. It specifies the API version, kind, metadata, and the name of the shoot to be registered.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/managed_seed.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: ManagedSeed\nmetadata:\n  name: my-managed-seed\n  namespace: garden\nspec:\n  shoot:\n    name: crazy-botany\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Runtime Interface in OperatingSystemConfig\nDESCRIPTION: Example of how to specify CRI configuration in the OperatingSystemConfig resource. This shows containerd configuration including sandbox image and optional registry settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: OperatingSystemConfig\nmetadata:\n  name: pool-01-original\n  namespace: default\nspec:\n  type: <my-operating-system>\n  purpose: reconcile\n  cri:\n    name: containerd\n#   cgroupDriver: cgroupfs # or systemd\n    containerd:\n      sandboxImage: registry.k8s.io/pause\n#     registries:\n#     - upstream: docker.io\n#       server: https://registry-1.docker.io\n#       hosts:\n#       - url: http://<service-ip>:<port>]\n#     plugins:\n#     - op: add # add (default) or remove\n#       path: [io.containerd.grpc.v1.cri, containerd]\n#       values: '{\"default_runtime_name\": \"runc\"}'\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a ControlPlane Resource with Purpose 'exposure' in YAML\nDESCRIPTION: Example YAML configuration for a ControlPlane custom resource with purpose 'exposure'. This resource is created by Gardener in the seed cluster and needs to be reconciled by a provider-specific extension controller to deploy components required for API server exposure.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/controlplane-exposure.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ControlPlane\nmetadata:\n  name: control-plane-exposure\n  namespace: shoot--foo--bar\nspec:\n  type: aws\n  purpose: exposure\n  region: europe-west1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foo--bar\n```\n\n----------------------------------------\n\nTITLE: Registering Extension Health Checks in AWS Provider\nDESCRIPTION: Example code from the provider-aws showing how to register various health checks for a Worker extension. This demonstrates registering managed resources, seed deployments, and node availability checks, each mapped to specific health condition types.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/healthcheck-library.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhealth.DefaultRegisterExtensionForHealthCheck(\n               aws.Type,\n               extensionsv1alpha1.SchemeGroupVersion.WithKind(extensionsv1alpha1.WorkerResource),\n               func() runtime.Object { return &extensionsv1alpha1.Worker{} },\n               mgr, // controller runtime manager\n               opts, // options for the health check controller\n               nil, // custom predicates\n               map[extensionshealthcheckcontroller.HealthCheck]string{\n                       general.CheckManagedResource(genericactuator.McmShootResourceName): string(gardencorev1beta1.ShootSystemComponentsHealthy),\n                       general.CheckSeedDeployment(aws.MachineControllerManagerName):      string(gardencorev1beta1.ShootEveryNodeReady),\n                       worker.SufficientNodesAvailable():                                  string(gardencorev1beta1.ShootEveryNodeReady),\n               })\n```\n\n----------------------------------------\n\nTITLE: Defining a ContainerRuntime Resource in YAML for Gardener\nDESCRIPTION: Example of a ContainerRuntime resource that configures gvisor as a container runtime for a specific worker pool. The resource specifies the binary path, runtime type, and worker pool selector to target specific nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/containerruntime.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ContainerRuntime\nmetadata:\n  name: my-container-runtime\nspec:\n  binaryPath: /var/bin/containerruntimes\n  type: gvisor\n  workerPool:\n    name: worker-ubuntu\n    selector:\n      matchLabels:\n        worker.gardener.cloud/pool: worker-ubuntu\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Resource Management in Gardener\nDESCRIPTION: Detailed YAML configuration for kubelet settings in a Gardener shoot cluster, including resource reservation, eviction policies, and grace periods for both soft and hard evictions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    kubelet:\n      kubeReserved:\n        cpu: 100m\n        memory: 1Gi\n        ephemeralStorage: 1Gi\n        pid: 1000\n      evictionSoft:\n        memoryAvailable: 200Mi\n        imageFSAvailable: 10%\n        imageFSInodesFree: 10%\n        nodeFSAvailable: 10%\n        nodeFSInodesFree: 10%\n      evictionSoftGracePeriod:\n        memoryAvailable: 1m30s\n        imageFSAvailable: 1m30s\n        imageFSInodesFree: 1m30s\n        nodeFSAvailable: 1m30s\n        nodeFSInodesFree: 1m30s\n      evictionHard:\n        memoryAvailable: 100Mi\n        imageFSAvailable: 5%\n        imageFSInodesFree: 5%\n        nodeFSAvailable: 5%\n        nodeFSInodesFree: 5%\n      evictionMinimumReclaim:\n        memoryAvailable: 0Mi\n        imageFSAvailable: 0Mi\n        imageFSInodesFree: 0Mi\n        nodeFSAvailable: 0Mi\n        nodeFSInodesFree: 0Mi\n      evictionMaxPodGracePeriod: 90\n      evictionPressureTransitionPeriod: 5m0s\n```\n\n----------------------------------------\n\nTITLE: Illustrating Seed Status with Capacity and Allocatable Fields (YAML)\nDESCRIPTION: Example YAML snippet showing the proposed 'status' section of a Gardener Seed resource. It includes 'capacity' (total resources) and 'allocatable' (resources available for shoots) fields for built-in resources like 'shoots' and 'persistent-volumes', as well as a potential custom resource ('azure.provider.extensions.gardener.cloud/load-balancers') managed by an extension. These fields are used by the gardener-scheduler to make placement decisions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/13-automated-seed-management.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  capacity:\n    shoots: \"100\"\n    persistent-volumes: \"200\" # Built-in resource\n    azure.provider.extensions.gardener.cloud/load-balancers: \"30\" # Custom resource advertised by an Azure-specific plugin\n  allocatable:\n    shoots: \"100\"\n    persistent-volumes: \"197\" # 3 persistent volumes are reserved for Gardener\n    azure.provider.extensions.gardener.cloud/load-balancers: \"300\"\n```\n\n----------------------------------------\n\nTITLE: HealthCheck Interface Definition in Gardener\nDESCRIPTION: Interface definition for implementing health checks in Gardener extensions. It defines required methods including Check (performs the health check), client injections for seed and shoot, and utilities for logging and copying.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/healthcheck-library.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype HealthCheck interface {\n    // Check is the function that executes the actual health check\n    Check(context.Context, types.NamespacedName) (*SingleCheckResult, error)\n    // InjectSeedClient injects the seed client\n    InjectSeedClient(client.Client)\n    // InjectShootClient injects the shoot client\n    InjectShootClient(client.Client)\n    // SetLoggerSuffix injects the logger\n    SetLoggerSuffix(string, string)\n    // DeepCopy clones the healthCheck\n    DeepCopy() HealthCheck\n}\n```\n\n----------------------------------------\n\nTITLE: External Alertmanager Authentication Configuration\nDESCRIPTION: YAML examples for configuring different authentication methods for an external Alertmanager. Includes configurations for no authentication, basic authentication, mutual TLS, and email alerts using a secret with the label 'gardener.cloud/role: alerting'.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/alerting.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# No Authentication\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    gardener.cloud/role: alerting\n  name: alerting-auth\n  namespace: garden\ndata:\n  # No Authentication\n  auth_type: base64(none)\n  url: base64(external.alertmanager.foo)\n\n  # Basic Auth\n  auth_type: base64(basic)\n  url: base64(external.alertmanager.foo)\n  username: base64(admin)\n  password: base64(password)\n\n  # Mutual TLS\n  auth_type: base64(certificate)\n  url: base64(external.alertmanager.foo)\n  ca.crt: base64(ca)\n  tls.crt: base64(certificate)\n  tls.key: base64(key)\n  insecure_skip_verify: base64(false)\n\n  # Email Alerts (internal alertmanager)\n  auth_type: base64(smtp)\n  auth_identity: base64(internal.alertmanager.auth_identity)\n  auth_password: base64(internal.alertmanager.auth_password)\n  auth_username: base64(internal.alertmanager.auth_username)\n  from: base64(internal.alertmanager.from)\n  smarthost: base64(internal.alertmanager.smarthost)\n  to: base64(internal.alertmanager.to)\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Shoot Resource with Cluster OIDC Configuration Injected - YAML\nDESCRIPTION: Shows a Shoot YAML resource after successful mutation by the ClusterOpenIDConnectPreset admission controller. OIDC config fields reflect the injected values, confirming end-to-end functionality. Inputs are the original Shoot and preset config; output is this enriched Shoot object.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nmetadata:\\n  name: preset\\n  namespace: default\\n  labels:\\n    oidc: enabled\\nspec:\\n  kubernetes:\\n    kubeAPIServer:\\n      oidcConfig:\\n        clientID: cluster-preset\\n        groupsClaim: groups-claim\\n        groupsPrefix: groups-prefix\\n        issuerURL: https://foo.bar\\n        requiredClaims:\\n          key: value\\n        signingAlgs:\\n        - RS256\\n        usernameClaim: username-claim\\n        usernamePrefix: username-prefix\\n    version: 1.20.2\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker CRD for AWS Provider in Gardener\nDESCRIPTION: Sample Worker CRD that needs to be reconciled by an extension controller. It contains information about worker pools, machine types, and infrastructure provider status for AWS.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/worker.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Worker\nmetadata:\n  name: bar\n  namespace: shoot--foo--bar\nspec:\n  type: azure\n  region: eu-west-1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foo--bar\n  infrastructureProviderStatus:\n    apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureStatus\n    ec2:\n      keyName: shoot--foo--bar-ssh-publickey\n    iam:\n      instanceProfiles:\n      - name: shoot--foo--bar-nodes\n        purpose: nodes\n      roles:\n      - arn: arn:aws:iam::0123456789:role/shoot--foo--bar-nodes\n        purpose: nodes\n    vpc:\n      id: vpc-0123456789\n      securityGroups:\n      - id: sg-1234567890\n        purpose: nodes\n      subnets:\n      - id: subnet-01234\n        purpose: nodes\n        zone: eu-west-1b\n      - id: subnet-56789\n        purpose: public\n        zone: eu-west-1b\n      - id: subnet-0123a\n        purpose: nodes\n        zone: eu-west-1c\n      - id: subnet-5678a\n        purpose: public\n        zone: eu-west-1c\n  pools:\n  - name: cpu-worker\n    minimum: 3\n    maximum: 5\n    maxSurge: 1\n    maxUnavailable: 0\n    machineType: m4.large\n    machineImage:\n      name: coreos\n      version: 1967.5.0\n    nodeAgentSecretName: gardener-node-agent-local-ee46034b8269353b\n    nodeTemplate:\n      capacity:\n        cpu: 2\n        gpu: 0\n        memory: 8Gi\n      virtualCapacity: \n        subdomain.domain.com/resource-name: 1234567\n    labels:\n      node.kubernetes.io/role: node\n      worker.gardener.cloud/cri-name: containerd\n      worker.gardener.cloud/pool: cpu-worker\n      worker.gardener.cloud/system-components: \"true\"\n    userDataSecretRef:\n      name: user-data-secret\n      key: cloud_config\n    volume:\n      size: 20Gi\n      type: gp2\n    zones:\n    - eu-west-1b\n    - eu-west-1c\n    machineControllerManager:\n      drainTimeout: 10m\n      healthTimeout: 10m\n      creationTimeout: 10m\n      maxEvictRetries: 30\n      nodeConditions:\n      - ReadonlyFilesystem\n      - DiskPressure\n      - KernelDeadlock\n    clusterAutoscaler:\n      scaleDownUtilizationThreshold: 0.5\n      scaleDownGpuUtilizationThreshold: 0.5\n      scaleDownUnneededTime: 30m\n      scaleDownUnreadyTime: 1h\n      maxNodeProvisionTime: 15m\n```\n\n----------------------------------------\n\nTITLE: Stress-Testing Gardener GardenerEnvtest Suite using Bash\nDESCRIPTION: This sequence of Bash commands shows how to stress-test a Gardener integration test suite that uses a 'gardenerenvtest' environment, which includes the gardener-apiserver. It requires modifying the test setup, building the test binary, starting the specific test environment, setting relevant environment variables (KUBECONFIG, USE_EXISTING_GARDENER, CI timeouts), changing to the test directory, and running the test binary in parallel using the 'stress' tool.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# modify test/start-envtest to disable admission plugins and enable feature gates like in test suite...\n\n# build a test binary\nginkgo build ./test/integration/controllermanager/bastion\n\n# prepare a test environment including gardener-apiserver to run the test against\nmake start-envtest ENVTEST_TYPE=gardener\n\n# in another terminal session:\nexport KUBECONFIG=$PWD/dev/envtest-kubeconfig.yaml\nexport USE_EXISTING_GARDENER=true\n\n# use same timeout settings like in CI\nsource ./hack/test-integration.env\n\n# switch to test package directory like `go test`\ncd ./test/integration/controllermanager/bastion\n\n# run the test in parallel and report any failures\nstress -ignore \"unable to grab random port\" -p 16 ./bastion.test\n...\n```\n\n----------------------------------------\n\nTITLE: Shoot Resource with OIDC Configuration Injected - YAML\nDESCRIPTION: Demonstrates the expected manifest of a Shoot after OIDC injection. This YAML reflects the applied preset values inside the 'kubeAPIServer.oidcConfig' field. Inputs were labels and original Shoot spec; output is a Shoot object with populated OIDC config. This serves as a confirmation and debugging aid.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nmetadata:\\n  name: preset\\n  namespace: default\\n  labels:\\n    oidc: enabled\\nspec:\\n  kubernetes:\\n    kubeAPIServer:\\n      oidcConfig:\\n        clientID: test-1\\n        groupsClaim: groups-claim\\n        groupsPrefix: groups-prefix\\n        issuerURL: https://foo.bar\\n        requiredClaims:\\n          key: value\\n        signingAlgs:\\n        - RS256\\n        usernameClaim: username-claim\\n        usernamePrefix: username-prefix\\n    version: 1.20.2\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Projected ServiceAccount Token Volume in Kubernetes YAML\nDESCRIPTION: This snippet shows the configuration for a projected ServiceAccount token volume. It includes the token, root CA certificate, and namespace information, which is automatically injected into pods by the webhook under certain conditions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  volumes:\n  - name: kube-api-access-gardener\n    projected:\n      defaultMode: 420\n      sources:\n      - serviceAccountToken:\n          expirationSeconds: 43200\n          path: token\n      - configMap:\n          items:\n          - key: ca.crt\n            path: ca.crt\n          name: kube-root-ca.crt\n      - downwardAPI:\n          items:\n          - fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n            path: namespace\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Extension Resource with State Field in Kubernetes YAML\nDESCRIPTION: Example YAML of an Infrastructure extension resource with the status.state field containing terraform state. This shows how extension controllers store their state to enable migration between seeds.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--foo--bar\nspec:\n  type: azure\n  region: eu-west-1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foo--bar\n  providerConfig:\n    apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureConfig\n    resourceGroup:\n      name: mygroup\n    networks:\n      vnet: # specify either 'name' or 'cidr'\n      # name: my-vnet\n        cidr: 10.250.0.0/16\n      workers: 10.250.0.0/19\nstatus:\n  state: |\n      {\n          \"version\": 3,\n          \"terraform_version\": \"0.11.14\",\n          \"serial\": 2,\n          \"lineage\": \"3a1e2faa-e7b6-f5f0-5043-368dd8ea6c10\",\n          \"modules\": [\n              {\n              }\n          ]\n          ...\n      }\n```\n\n----------------------------------------\n\nTITLE: Provider Specific Capabilities in YAML\nDESCRIPTION: Example of using separate CapabilityClass CRDs referenced in the CloudProfile for defining machine type and image capabilities.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  machineTypes:\n    - architecture: arm64\n      capabilities: class1\n      name: Standard_S896om\n  machineImages:\n    - name: gardenlinux\n      versions:\n        - architectures: [arm64, amd64]\n          capabilities: [class2, class3, ....]\n          version: 1592.2.0\n  providerConfig:\n    machineImages:\n      - architecture: amd64\n        communityGalleryImageID: ...\n        version: 1592.2.0\n        capabilities: class2\n      ...\n\n# CapabilityClass\napiVersion: gardener.cloud/v1alpha1\nkind: CapabilityClass\nmetadata:\n  name: class1\nspec:\n  hypervisorType: [\"gen2\"]\n  network: [\"accelerated\", \"standard\"]\n---\napiVersion: gardener.cloud/v1alpha1\nkind: CapabilityClass\nmetadata:\n  name: class2\nspec:\n  hypervisorType: [\"gen2\", \"gen1\"]\n  network: [\"standard\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiling in Admission Controller\nDESCRIPTION: A YAML configuration example for enabling profiling in the gardener-admission-controller component. The configuration sets the metrics port and enables both regular and contention profiling through the debugging section.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/profiling.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: admissioncontroller.config.gardener.cloud/v1alpha1\nkind: AdmissionControllerConfiguration\n# ...\nserver:\n  metrics:\n    port: 2723\ndebugging:\n  enableProfiling: true\n  enableContentionProfiling: true\n```\n\n----------------------------------------\n\nTITLE: Import Configuration into CoreDNS Corefile\nDESCRIPTION: This YAML snippet shows the integration of custom server and override ConfigMaps into the CoreDNS Corefile configuration. No direct dependencies other than CoreDNS and customizable parameters such as servers and plugins are handled via import statements. The configuration inputs are series of sub-configurations that assist CoreDNS in processing DNS requests. Outputs are modified DNS behaviors based on these additional configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/custom-dns-config.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.:8053 {\n  health {\n      lameduck 15s\n  }\n  ready\n  [search-rewrites]\n  kubernetes[clusterDomain]in-addr.arpa ip6.arpa {\n      pods insecure\n      fallthrough in-addr.arpa ip6.arpa\n      ttl 30\n  }\n  prometheus :9153\n  loop\n  import custom/*.override\n  errors\n  log . {\n      class error\n  }\n  forward . /etc/resolv.conf\n  cache 30\n  reload\n  loadbalance round_robin\n}\nimport custom/*.server\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Bin-Packing Scheduler Profile in Kubernetes\nDESCRIPTION: YAML configuration for the bin-packing scheduler profile that prioritizes nodes with most allocated resources. It uses MostAllocated scoring strategy and disables NodeResourcesBalancedAllocation plugin.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_scheduling_profiles.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kubescheduler.config.k8s.io/v1beta3\nkind: KubeSchedulerConfiguration\nprofiles:\n- schedulerName: bin-packing-scheduler\n  pluginConfig:\n  - name: NodeResourcesFit\n    args:\n      scoringStrategy:\n        type: MostAllocated\n  plugins:\n    score:\n      disabled:\n      - name: NodeResourcesBalancedAllocation\n```\n\n----------------------------------------\n\nTITLE: Deleting a Shoot Cluster in Gardener (Bash)\nDESCRIPTION: Command to delete a specific shoot cluster in the Gardener environment, which is recommended before tearing down the environment to avoid orphaned infrastructure items.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./hack/usage/delete shoot <your-shoot> garden-local\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Authentication Secret for Gardener Dashboard\nDESCRIPTION: Secret configuration for the Gardener Dashboard OIDC authentication. Contains client_id and an optional client_secret for the dashboard's OIDC integration. This secret should be created in the garden namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gardener-dashboard-oidc\n  namespace: garden\ntype: Opaque\nstringData:\n  client_id: <client_id>\n  client_secret: <optional>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bastion Resource in Seed Cluster using YAML\nDESCRIPTION: Example YAML configuration for a Bastion custom resource in the seed cluster. This resource is created by the gardenlet and contains user data for configuring the bastion host, including the SSH public key configuration. The status fields reflect the bastion's readiness and network information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/15-manage-bastions-and-ssh-key-pair-rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Bastion\nmetadata:\n  name: cli-abcdef\n  namespace: shoot--myproject--mycluster\nspec:\n  userData: |- # this is normally base64-encoded, but decoded for the example. Contains spec.sshPublicKey from Bastion resource in garden cluster\n    #!/bin/bash\n    # create user\n    # add ssh public key to authorized_keys\n    # ...\n\n  ingress:\n  - ipBlock:\n      cidr: 1.2.3.4/32\n\n  type: aws # from extensionsv1alpha1.DefaultSpec\n\nstatus:\n  observedGeneration: 1\n  ingress:\n    ip: 1.2.3.5\n    # hostname: foo.bar\n  conditions:\n  - type: BastionReady\n    status: 'True'\n    lastTransitionTime: \"2021-03-19T11:59:00Z\"\n    lastUpdateTime: \"2021-03-19T11:59:00Z\"\n    reason: BastionReady\n    message: Bastion for the cluster is ready.\n```\n\n----------------------------------------\n\nTITLE: Defining Infrastructure Provisioning Resource in Gardener (YAML)\nDESCRIPTION: Defines an Infrastructure CRD representing cloud infrastructure (VPC, networks, IAM, security groups, EC2 keypairs, etc.) required for cluster resource provisioning in Gardener. This snippet configures the infrastructure for AWS, specifying network topology, zone, DNS entry, credentials, and SSH key. Status fields reflect reconciliation and resources provisioned. Prerequisites include supported Gardener extensions, valid AWS credentials, and referenced secrets. Inputs are structured YAML configurations; outputs include created VPCs, subnets, associated IAM roles, and keypairs in the target cloud.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: extensions.gardener.cloud/v1alpha1\\nkind: Infrastructure\\nmetadata:\\n  name: infrastructure\\n  namespace: shoot--core--aws-01\\nspec:\\n  type: aws\\n  providerConfig:\\n    apiVersion: aws.extensions.gardener.cloud/v1alpha1\\n    kind: InfrastructureConfig\\n    networks:\\n      vpc:\\n        cidr: 10.250.0.0/16\\n      internal:\\n      - 10.250.112.0/22\\n      public:\\n      - 10.250.96.0/22\\n      workers:\\n      - 10.250.0.0/19\\n    zones:\\n    - eu-west-1a\\n  dns:\\n    apiserver: api.aws-01.core.example.com\\n  region: eu-west-1\\n  secretRef:\\n    name: my-aws-credentials\\n  sshPublicKey: |\\n    base64(key)\\nstatus:\\n  observedGeneration: ...\\n  state: ...\\n  lastError: ..\\n  lastOperation: ...\\n  providerStatus:\\n    apiVersion: aws.extensions.gardener.cloud/v1alpha1\\n    kind: InfrastructureStatus\\n    vpc:\\n      id: vpc-1234\\n      subnets:\\n      - id: subnet-acbd1234\\n        name: workers\\n        zone: eu-west-1\\n      securityGroups:\\n      - id: sg-xyz12345\\n        name: workers\\n    iam:\\n      nodesRoleARN: <some-arn>\\n      instanceProfileName: foo\\n    ec2:\\n      keyName: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring HPA Settings in Gardener Shoot\nDESCRIPTION: Configuration for customizing Horizontal Pod Autoscaler settings in a Gardener-managed cluster, including sync period, tolerance, downscale stabilization, and initialization parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    kubeControllerManager:\n      horizontalPodAutoscaler:\n        syncPeriod: 15s\n        tolerance: 0.1\n        downscaleStabilization: 5m0s\n        initialReadinessDelay: 30s\n        cpuInitializationPeriod: 5m0s\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Garden Access Secret in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a custom garden access secret in the extension namespace of the seed cluster. It includes necessary metadata labels and annotations for token requesting and service account creation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/garden-api-access.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-custom-component\n  namespace: <extension-namespace>\n  labels:\n    resources.gardener.cloud/purpose: token-requestor\n    resources.gardener.cloud/class: garden\n  annotations:\n    serviceaccount.resources.gardener.cloud/name: my-custom-component-extension-foo\n    serviceaccount.resources.gardener.cloud/labels: '{\"foo\":\"bar}'\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Defining MachineDeployment with InPlaceUpdate Strategy - YAML\nDESCRIPTION: The configuration snippet demonstrates the specification for a `MachineDeployment` in Gardener, utilizing the `InPlaceUpdate` strategy. The fields `maxUnavailable`, `maxSurge`, and `orchestrationType` dictate the update behavior. It requires specifying the `apiVersion`, `kind`, `metadata`, `spec`, and `status` properties. The `inPlaceUpdate` field within `.spec.strategy` defines update parameters like maximum unavailable machines and orchestration type.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/31-inplace-node-update.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: machine.sapcloud.io/v1alpha1\nkind: MachineDeployment\nmetadata:\n  name: <name>\n  namespace: <shoot-namespace>\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: <label>\n  strategy:\n    inPlaceUpdate:\n      maxUnavailable: 1\n      maxSurge: 0\n      orchestrationType: auto # auto/manual\n    type: InPlaceUpdate # RollingUpdate/InPlaceUpdate/Recreate, defaulted to RollingUpdate\n  template: {}\n    spec: {}\nstatus: {}\n```\n\n----------------------------------------\n\nTITLE: Defining KubeControllerManagerConfig Structure - Gardener Go\nDESCRIPTION: Defines the KubeControllerManagerConfig struct used to configure parameters for the Kubernetes kube-controller-manager component in Gardener-managed clusters. This struct aggregates settings such as certificate signing duration and includes all non-virtual garden specific values. It depends on types from the Gardener core v1beta1 API and is typically embedded in higher-level configurations.\nKey parameters: CertificateSigningDuration (Kubernetes meta/v1.Duration), plus all members of the embedded KubeControllerManagerConfig from v1beta1.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype KubeControllerManagerConfig struct {\n    gardencorev1beta1.KubeControllerManagerConfig // Embedded fields\n\n    // CertificateSigningDuration sets the max duration for signed certificates\n    CertificateSigningDuration *metav1.Duration `json:\"certificateSigningDuration,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Resource Status Output for Azure Provider\nDESCRIPTION: Example YAML showing the status output of an Infrastructure resource after creation, including network, security group, and other Azure-specific details.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/infrastructure.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--foo--bar\nspec:\n  ...\nstatus:\n  lastOperation: ...\n  providerStatus:\n    apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureStatus\n    resourceGroup:\n      name: mygroup\n    networks:\n      vnet:\n        name: my-vnet\n      subnets:\n      - purpose: nodes\n        name: my-subnet\n    availabilitySets:\n    - purpose: nodes\n      id: av-set-id\n      name: av-set-name\n    routeTables:\n    - purpose: nodes\n      name: route-table-name\n    securityGroups:\n    - purpose: nodes\n      name: sec-group-name\n```\n\n----------------------------------------\n\nTITLE: Configuring VPA for RequestsOnly Scaling in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to configure Vertical Pod Autoscaler (VPA) to scale only the resource requests, not the limits. This is useful when absolute limits have been defined to prevent proportional scaling of limits beyond healthy thresholds.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/shoot_pod_autoscaling_best_practices.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  resourcePolicy:\n    containerPolicies:\n    - controlledValues: RequestsOnly\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Encryption in Gardener's API Server - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify which Kubernetes resources should be encrypted at rest by configuring the encryptionConfig.resources field within the spec.kubernetes.kubeAPIServer section in a Gardener Shoot. Required dependencies include a Gardener-managed Kubernetes cluster (Shoot) with support for custom API server configuration. The main parameters are the list of resource types (e.g., configmaps, statefulsets.apps), which determine what is encrypted beyond the default secrets. The expected input is a YAML fragment inserted into a custom Shoot specification, and the output is enhanced encryption for the specified resource types. Wildcards are not permitted, and resources must be listed in plural form. Removing a resource from the list will trigger decryption for all objects of that type.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/etcd_encryption_config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    kubeAPIServer:\n      encryptionConfig:\n        resources:\n          - configmaps\n          - statefulsets.apps\n          - customresource.fancyoperator.io\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ManagedSeedSet Resource in YAML\nDESCRIPTION: Example configuration of a ManagedSeedSet resource that defines how to manage multiple ManagedSeeds and their corresponding Shoots. Includes replica count, selector, update strategy, and templates for both ManagedSeed and Shoot resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/13-automated-seed-management.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: ManagedSeedSet\nmetadata:\n  name: crazy-botany\n  namespace: garden\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      foo: bar\n  updateStrategy:\n    type: RollingUpdate # Update strategy, must be `RollingUpdate`\n    rollingUpdate:\n      partition: 2 # Only update the last replica (#2), assuming there are no gaps (\"rolling out a canary\")\n  template: # ManagedSeed template, including spec and parts of the metadata\n    metadata:\n      labels:\n        foo: bar\n    spec: \n      # shoot.name is not specified since it's filled automatically by the controller\n      seedTemplate: # Either a seed or a gardenlet section must be specified, see above\n        metadata:\n          labels:\n            foo: bar\n        provider:\n          type: gcp\n          region: europe-west1\n        taints:\n        - key: seed.gardener.cloud/protected\n        ...\n  shootTemplate: # Shoot template, including spec and parts of the metadata\n    metadata:\n      labels:\n        foo: bar\n    spec:\n      cloudProfileName: gcp\n      secretBindingName: shoot-operator-gcp\n      region: europe-west1\n      provider:\n        type: gcp\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining CredentialsRotationPhase Type in Gardener\nDESCRIPTION: Definition of CredentialsRotationPhase type alias used in various rotation configurations like CARotation, ETCDEncryptionKeyRotation, and ServiceAccountKeyRotation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n<h3 id=\"core.gardener.cloud/v1beta1.CredentialsRotationPhase\">CredentialsRotationPhase\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.CARotation\">CARotation</a>, \n<a href=\"#core.gardener.cloud/v1beta1.ETCDEncryptionKeyRotation\">ETCDEncryptionKeyRotation</a>, \n<a href=\"#core.gardener.cloud/v1beta1.ServiceAccountKeyRotation\">ServiceAccountKeyRotation</a>)\n</p>\n<p>\n<p>CredentialsRotationPhase is a string alias.</p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Complete Gardenlet Configuration in YAML\nDESCRIPTION: This YAML snippet provides a comprehensive example of gardenlet configuration, including bootstrap kubeconfig, seed configuration, DNS settings, network configurations, and backup settings. It demonstrates how to structure the gardenlet-values.yaml file.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# <default config>\n# ...\nconfig:\n  gardenClientConnection:\n    # ...\n    bootstrapKubeconfig:\n      name: gardenlet-bootstrap-kubeconfig\n      namespace: garden\n      kubeconfig: |\n        apiVersion: v1\n        clusters:\n        - cluster:\n            certificate-authority-data: <dummy>\n            server: <my-garden-cluster-endpoint>\n          name: my-kubernetes-cluster\n        # ...\n\n    kubeconfigSecret:\n      name: gardenlet-kubeconfig\n      namespace: garden\n  # ...\n  # <default config>\n  # ...\n  seedConfig:\n    metadata:\n      name: sweet-seed\n    spec:\n      dns:\n        provider:\n          type: <provider>\n          secretRef:\n            name: ingress-secret\n            namespace: garden\n      ingress: # see prerequisites\n        domain: ingress.dev.my-seed.example.com\n        controller:\n          kind: nginx\n      networks:\n        nodes: 10.240.0.0/16\n        pods: 100.244.0.0/16\n        services: 100.32.0.0/13\n        shootDefaults:\n          pods: 100.96.0.0/11\n          services: 100.64.0.0/13\n      provider:\n        region: eu-west-1\n        type: <provider>\n      backup:\n        provider: <provider>\n        secretRef:\n          name: sweet-seed-backup\n          namespace: garden\n```\n\n----------------------------------------\n\nTITLE: Defining MachineType struct in Go\nDESCRIPTION: Defines the MachineType struct which contains properties of a machine type like CPU, memory, storage, etc.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\ntype MachineType struct {\n\tCPU resource.Quantity\n\tGPU resource.Quantity\n\tMemory resource.Quantity\n\tName string\n\tStorage *MachineTypeStorage\n\tUsable *bool\n\tArchitecture *string\n\tCapabilities *Capabilities\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Operation Annotation in YAML\nDESCRIPTION: Shows how to annotate a Shoot to schedule specific maintenance operations to be performed during the next maintenance window.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_maintenance.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmaintenance.gardener.cloud/operation=<operation>\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication ConfigMap for Gardener Shoot\nDESCRIPTION: This example demonstrates how to create a ConfigMap containing the AuthenticationConfiguration for JWT-based authentication in a Gardener shoot cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: name-of-configmap-containing-authentication-config\n  namespace: garden-my-project\ndata:\n  config.yaml: |\n    apiVersion: apiserver.config.k8s.io/v1beta1\n    kind: AuthenticationConfiguration\n    jwt:\n    - issuer:\n        url: https://issuer1.example.com\n        audiences:\n        - audience1\n        - audience2\n      claimMappings:\n        username:\n          expression: 'claims.username'\n        groups:\n          expression: 'claims.groups'\n        uid:\n          expression: 'claims.uid'\n      claimValidationRules:\n        expression: 'claims.hd == \"example.com\"'\n        message: \"the hosted domain name must be example.com\"\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Envoy Proxy with HTTP CONNECT Tunneling (YAML/Diff)\nDESCRIPTION: This snippet demonstrates a diff for updating the Envoy proxy configuration in Gardener's API server proxy. It removes the proxy protocol transport socket, introduces an HTTP CONNECT tunnel via the tunneling_config, sets the target hostname, and adds custom HTTP headers (e.g., X-Gardener-Destination) for upstream cluster routing. Dependencies include Envoy with TCP proxy filter support, a compatible ingress gateway, and proper upstream endpoint configuration. The input Envoy config expects static_resources, listeners, filter_chains, and clusters sections; outputs are traffic routed using HTTP CONNECT instead of the proxy protocol, simplifying network paths and facilitating ACL enforcement with opaque LoadBalancers. The configuration is intended for YAML-formatted Envoy configs, displayed as a unified diff to clarify changes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/30-apiserver-proxy.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n static_resources:\n   listeners:\n   - name: kube_apiserver\n     filter_chains:\n     - filters:\n       - name: envoy.filters.network.tcp_proxy\n         typed_config:\n           \"@type\": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n           cluster: kube_apiserver\n+          tunneling_config:\n+            hostname: \"api.bar.foo.internal.local.gardener.cloud:443\"\n+            headers_to_add:\n+            - header:\n+                key: X-Gardener-Destination\n+                value: \"outbound|443||kube-apiserver.shoot--foo--bar.svc.cluster.local\"\n\n# ...\n\n clusters:\n - name: kube_apiserver\n   load_assignment:\n     cluster_name: kube_apiserver\n     endpoints:\n     - lb_endpoints:\n       - endpoint:\n           address:\n             socket_address:\n               address: api.bar.foo.internal.local.gardener.cloud\n-               port_value: 8443\n+               port_value: 8132\n-  transport_socket:\n-    name: envoy.transport_sockets.upstream_proxy_protocol\n-    typed_config:\n-      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.proxy_protocol.v3.ProxyProtocolUpstreamTransport\n-      config:\n-        version: V2\n-      transport_socket:\n-        name: envoy.transport_sockets.raw_buffer\n-        typed_config:\n-          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HA Mode for Gardenlet in YAML\nDESCRIPTION: This YAML snippet shows how to configure high availability mode for gardenlet deployment. It specifies the number of replicas and the failure tolerance type for spreading replicas across zones or nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreplicaCount: 2 # or more if a higher failure tolerance is required.\nfailureToleranceType: zone # One of `zone` or `node` - defines how replicas are spread.\n```\n\n----------------------------------------\n\nTITLE: Submitting a TokenReview Request to Kubernetes API (JSON)\nDESCRIPTION: This JSON snippet represents the standard request format for sending a token to the Kubernetes API (via webhook token authentication) for verification. It imports no dependencies, but must comply with Kubernetes authentication.k8s.io APIs. The primary parameter is the bearer token placed in 'spec.token'; on success, the TokenReview status will be populated. Input: a bearer token string. Output: an extended TokenReview response. Only supported for POST HTTP calls where the payload is this object.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"apiVersion\\\": \\\"authentication.k8s.io/v1beta1\\\",\\n  \\\"kind\\\": \\\"TokenReview\\\",\\n  \\\"spec\\\": {\\n    \\\"token\\\": \\\"(BEARERTOKEN)\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace Network Access for Webhook Servers\nDESCRIPTION: Additional annotations required for webhook server Services in different namespaces than the kube-apiserver to allow cross-namespace network traffic. These annotations specify namespace selectors for both virtual garden and shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/from-all-webhook-targets-allowed-ports: '[{\"port\":<server-port-on-pod>,\"protocol\":\"<protocol, typically TCP>\"}]'\n  networking.resources.gardener.cloud/pod-label-selector-namespace-alias: extensions\n  # for the virtual garden cluster:\n  networking.resources.gardener.cloud/namespace-selectors: '[{\"matchLabels\":{\"kubernetes.io/metadata.name\":\"garden\"}}]'\n  # for shoot clusters:\n  networking.resources.gardener.cloud/namespace-selectors: '[{\"matchLabels\":{\"gardener.cloud/role\":\"shoot\"}}]'\n```\n\n----------------------------------------\n\nTITLE: Pod Affinity for Control Plane Scheduling\nDESCRIPTION: This YAML snippet shows how to configure pod affinity rules for control plane components to ensure they are scheduled in the same availability zone. The 'podAffinity' section requires pods with specific labels to be scheduled in the same zone, using the zone topology key.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            gardener.cloud/shoot: <technical-id>\n            <labels>\n        topologyKey: \"topology.kubernetes.io/zone\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Pod Injection via kubectl on Namespace Level - Console\nDESCRIPTION: Provides the command to opt-out of the 'KUBERNETES_SERVICE_HOST' environment variable injection on a namespace level using 'kubectl'. This method allows applying the label to an existing namespace to prevent injection into all pods within it.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_kubernetes_service_host_injection.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl label namespace my-namespace apiserver-proxy.networking.gardener.cloud/inject=disable\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Group Priorities for Cluster Autoscaler Expander (YAML)\nDESCRIPTION: This YAML configuration enables the use of cluster-autoscaler's priority expander by assigning `priority` fields to individual worker groups in the Gardener Shoot resource. When priorities are set, Gardener generates the appropriate ConfigMap for the autoscaler to honor these when scaling nodes. At least one worker pool must have a defined priority for this to take effect, while pools without explicit priorities default to `0`. Dependencies include Gardener and cluster-autoscaler with priority expander enabled.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nspec:\\n  provider:\\n    workers:\\n    - name: worker1\\n      priority: 40 # priority of this worker group\\n      machine:\\n        type: local\\n    - name: worker2\\n      machine:\\n        type: local\\n\n```\n\n----------------------------------------\n\nTITLE: OperatingSystemConfig API Definition\nDESCRIPTION: This YAML snippet represents the `OperatingSystemConfig` API, which includes settings for OS and kubelet versions, credentials rotation, and in-place update commands. These configurations are essential for managing updates and ensuring the smooth operation of machine pools.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/31-inplace-node-update.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: OperatingSystemConfig\nmetadata:\n  name: pool-01-original\n  namespace: default\nspec:\n  type: gardenlinux\n  osVersion: 1631.0\n  kubeletVersion: 1.30.4\n  credentialsRotation:\n    certificateAuthorities:\n      lastInitiationTime: \"2024-01-01T12:30:00Z\"\n    serviceAccountKey:\n      lastInitiationTime: \"2024-01-01T12:30:00Z\"\n  units:\n    - ...\n  files:\n    - ...\nstatus:\n  inPlaceUpdates:\n    osUpdate:\n      - command: /opt/gardener/bin/inplace-update.sh\n      - args:\n        - --version\n        - 1631.0\n        - --repo\n        - <someOCIregistry>\n```\n\n----------------------------------------\n\nTITLE: Rendered NamespacedCloudProfile with Status\nDESCRIPTION: Example of a NamespacedCloudProfile after processing, including the status field which contains the merged CloudProfile that combines parent and child configurations for use by the system.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: NamespacedCloudProfile\nmetadata:\n  name:  aws-profile-xyz\n  namespace: project-xyz\nspec:\n  parent:\n    kind: CloudProfile\n    name: aws-central-cloud-profile\n  kubernetes:\n    versions:\n      - version: 1.28.6\n        expirationDate: 2024-06-06T01:02:03Z\n  machineImages:\n    - name: suse-chost\n      versions:\n        - version: 16.4\n          expirationDate: 2023-08-8T23:59:59Z\n  machineTypes: \n    - name: m5.xlarge\n      cpu: \"8\"\n      gpu: \"0\"\n      memory: 16Gi\n  volumeTypes:\n    - name: ab6\n      class: premium\n      usable: true\nstatus:\n  cloudProfile:\n    apiVersion: core.gardener.cloud/v1beta1\n    kind: CloudProfile\n    spec:\n      type: aws\n      kubernetes:\n        versions:\n          - version: 1.27.1\n          - version: 1.26.3\n          - version: 1.25.8\n          - version: 1.24.6\n          - version: 1.28.6\n            expirationDate: 2024-06-06T01:02:03Z\n      machineImages:\n        - name: suse-chost\n          versions:\n            - version: 16.4\n              expirationDate: 2023-08-8T23:59:59Z\n            - version: 15.4\n            - version: 14.4\n            - version: 13.6\n      machineTypes: \n        - name: m5.large\n          cpu: \"4\"\n          gpu: \"0\"\n          memory: 8Gi\n        - name: m5.xlarge\n          cpu: \"8\"\n          gpu: \"0\"\n          memory: 16Gi\n      volumeTypes:\n        - name: ab6\n          class: premium\n          usable: true\n        - name: gp3\n          class: standard\n          usable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes kubeconfig for Virtual Garden with Projected Service Account Token\nDESCRIPTION: This YAML snippet shows how to configure a kubeconfig file for use with Virtual Garden and Projected Service Account Tokens. It defines the cluster, context, and user settings, with the token file path set for authentication against the virtual garden API.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/authentication_gardener_control_plane.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: <CA-DATA>\n    server: https://virtual-garden.api\n  name: virtual-garden\ncontexts:\n- context:\n    cluster: virtual-garden\n    user: virtual-garden\n  name: virtual-garden\ncurrent-context: virtual-garden\nusers:\n- name: virtual-garden\n  user:\n    tokenFile: /var/run/secrets/projected/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: AdmissionPlugin Configuration Fields\nDESCRIPTION: Field definitions for admission plugin configuration including name, config, disabled status, and kubeconfig reference.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: string           # Name of the plugin\nconfig: RawExtension  # Plugin configuration\ndisabled: bool        # Whether plugin should be disabled\nkubeconfigSecretName: string # Name of secret containing kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Defining OpenIDConnectPreset with Kubernetes YAML - YAML\nDESCRIPTION: Defines an OpenIDConnectPreset custom resource for injecting an OIDC configuration into Gardener Shoots. This YAML manifest includes selector labels, OIDC server parameters (such as clientID, issuerURL, claim fields, and cryptographic algorithm), and assignment of a weighting value for priority resolution. Dependencies: Gardener with OIDC admission controller enabled and CRD for OpenIDConnectPreset installed. Input is resource metadata and OIDC configuration; the output is OIDC settings applied to Shoots matching the label selector.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: settings.gardener.cloud/v1alpha1\\nkind: OpenIDConnectPreset\\nmetadata:\\n  name:  test-1\\n  namespace: default\\nspec:\\n  shootSelector:\\n    matchLabels:\\n      oidc: enabled\\n  server:\\n    clientID: test-1\\n    issuerURL: https://foo.bar\\n    # caBundle: |\\n    #   -----BEGIN CERTIFICATE-----\\n    #   Li4u\\n    #   -----END CERTIFICATE-----\\n    groupsClaim: groups-claim\\n    groupsPrefix: groups-prefix\\n    usernameClaim: username-claim\\n    usernamePrefix: username-prefix\\n    signingAlgs:\\n    - RS256\\n    requiredClaims:\\n      key: value\\n  weight: 90\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Central Vali Storage Capacity\nDESCRIPTION: Configuration to modify the default storage capacity (100Gi) of the central Vali component. Increasing capacity preserves existing logs, while decreasing it will delete the current PersistentVolume and logs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/configuring_logging.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  enabled: true\n  vali:\n    garden:\n      storage: \"200Gi\"\n```\n\n----------------------------------------\n\nTITLE: Defining Infrastructure Extension Resource in YAML\nDESCRIPTION: This YAML snippet defines an extension resource of Kind 'Infrastructure' and Type 'local', which indicates a need for a Gardener extension 'local' to reconcile Infrastructure resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--core--aws-01\nspec:\n  type: local\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot API\nDESCRIPTION: This YAML example sets up a `Shoot` resource in Kubernetes, specifying update strategy and various configuration options for a worker pool within the Gardener environment. The `updateStrategy` decides whether AutoInPlaceUpdate or another strategy will be used, directly affecting how updates are managed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/31-inplace-node-update.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: crazy-botany\n  namespace: garden-dev\nspec:\n  secretBindingName: my-provider-account\n  cloudProfile:\n    name: cloudprofile1\n  region: europe-central-1\n  provider:\n    type: <some-provider-name> # {aws,azure,gcp,...}\n    workers:\n      - name: cpu-worker\n        minimum: 5\n        maximum: 5\n        maxSurge: 0\n        maxUnavailable: 2\n        updateStrategy: AutoInPlaceUpdate # AutoRollingUpdate/AutoInPlaceUpdate/ManualInPlaceUpdate, defaulted for now to AutoRollingUpdate\n        machine:\n          type: m5.large\n          image:\n            name: <some-image-name>\n            version: <some-image-version>\n          architecture: <some-cpu-architecture>\n        providerConfig: <some-machine-image-specific-configuration>\n  kubernetes:\n    version: 1.27.3\n  networking:\n    type: <some-network-extension-name> # {calico,cilium}\n```\n\n----------------------------------------\n\nTITLE: Referencing Example NamespacedCloudProfile Manifest in Gardener\nDESCRIPTION: Refers to an example NamespacedCloudProfile manifest that enables project-level customizations of CloudProfiles, allowing project administrators to create cloud profiles with specific overrides for their project.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/35-namespacedcloudprofile.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes NetworkPolicy for Ingress From Any Source (YAML)\nDESCRIPTION: Defines a Kubernetes `NetworkPolicy` named `ingress-to-gardener-resource-manager-from-world` in namespace `a`. It allows ingress traffic from all sources (including external IPs `0.0.0.0/0` and `::/0` via `ipBlock`) to pods labeled `app: gardener-resource-manager` on TCP port 10250. This policy type is typically generated by the Gardener controller based on the `networking.resources.gardener.cloud/from-world-to-ports` annotation on a Service.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: ingress-to-gardener-resource-manager-from-world\n  namespace: a\nspec:\n  ingress:\n  - from:\n    - namespaceSelector: {}\n      podSelector: {}\n    - ipBlock:\n        cidr: 0.0.0.0/0\n    - ipBlock:\n        cidr: ::/0\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app: gardener-resource-manager\n  policyTypes:\n  - Ingress\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis Password in Bash\nDESCRIPTION: This snippet shows how to retrieve the Redis password from a Kubernetes secret using kubectl and base64 decoding.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport REDIS_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template \"redis.secretName\" . }} -o jsonpath=\"{.data.redis-password}\" | base64 --decode)\n```\n\n----------------------------------------\n\nTITLE: Defining a CredentialsBinding Resource in Gardener (YAML)\nDESCRIPTION: This YAML snippet defines an example `CredentialsBinding` custom resource within the `security.gardener.cloud/v1alpha1` API group. This resource replaces the older `SecretBinding` and can reference either a `Secret` or a `WorkloadIdentity` resource via the mutable `credentialsRef` field to provide credentials (e.g., for a Shoot). It also specifies the provider type and optional quotas.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.gardener.cloud/v1alpha1\nkind: CredentialsBinding\nmetadata:\n  name: my-credentials\n  namespace: garden-local\nprovider:\n  type: aws # {aws,azure,gcp,...}\ncredentialsRef:\n  apiVersion: security.gardener.cloud/v1alpha1 # or \"v1\", when secret is being used\n  kind: WorkloadIdentity # or \"Secret\", when secret is being used\n  name: my-provider-account\n  # namespace: \"...\", allow reference across namespaces\nquotas: []\n# - name: quota-1\n# # namespace: garden-quotas\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerRuntime Resource in Kubernetes\nDESCRIPTION: Specification for a container runtime resource in Gardener Cloud extensions. Includes binary path configuration and worker pool settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ContainerRuntime\nmetadata:\n  # Kubernetes standard metadata\nspec:\n  binaryPath: string\n  workerPool:\n    # Worker pool configuration\n  # DefaultSpec fields embedded\n```\n\n----------------------------------------\n\nTITLE: Parent CloudProfile Example Structure\nDESCRIPTION: Example of a simplified parent CloudProfile that contains base configuration for Kubernetes versions, machine images, machine types, and volume types which can be extended by NamespacedCloudProfiles.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: aws-central-cloud-profile\nspec:\n  type: aws\n  kubernetes:\n    versions:\n      - version: 1.27.1\n      - version: 1.26.3\n      - version: 1.25.8\n      - version: 1.24.6\n      - version: 1.28.6\n        expirationDate: 2023-02-02T01:02:03Z\n  machineImages:\n    - name: suse-chost\n      versions:\n        - version: 15.4\n        - version: 14.4\n        - version: 13.6\n  machineTypes: \n    - name: m5.large\n      cpu: \"4\"\n      gpu: \"0\"\n      memory: 8Gi\n  volumeTypes:\n    - name: gp3\n      class: standard\n      usable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Provider Information\nDESCRIPTION: Defines provider-specific information for a Seed cluster, including the provider type, region, availability zones, and custom provider configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\ntype</br>\n<em>\nstring\n</em>\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener Shoot Resource (Partial) in YAML\nDESCRIPTION: This YAML snippet shows the beginning of a Gardener `Shoot` resource definition using the `core.gardener.cloud/v1beta1` API. A `Shoot` represents a managed Kubernetes cluster. This partial definition specifies the `Shoot`'s name (`crazy-botany`) and namespace (`garden-core`), references the `SecretBinding` (`secretbinding1`) containing cloud provider credentials, refers to a `CloudProfile` (`cloudprofile1`), and sets the target region (`europe-central-1`). The complete resource would include details about Kubernetes version, networking, worker pools, and provider-specific configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: crazy-botany\n  namespace: garden-core\nspec:\n  secretBindingName: secretbinding1\n  cloudProfileName: cloudprofile1\n  region: europe-central-1\n```\n\n----------------------------------------\n\nTITLE: Implementing ControlPlane Health Conditions in Extension Resources\nDESCRIPTION: Example of an extension ControlPlane resource with health status conditions. Shows how controllers can report component health issues through the 'ControlPlaneHealthy' condition type, which will be merged into the Shoot's status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/shoot-health-status-conditions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ControlPlane\nmetadata:\n  name: control-plane\n  namespace: shoot--foo--bar\nspec:\n  ...\nstatus:\n  conditions:\n  - type: ControlPlaneHealthy\n    status: \"False\"\n    reason: DeploymentUnhealthy\n    message: 'Deployment cloud-controller-manager is unhealthy: condition \"Available\" has\n      invalid status False (expected True) due to MinimumReplicasUnavailable: Deployment\n      does not have minimum availability.'\n    lastUpdateTime: \"2014-05-25T12:44:27Z\"\n  - type: ConfigComputedSuccessfully\n    status: \"True\"\n    reason: ConfigCreated\n    message: The cloud-provider-config has been successfully computed.\n    lastUpdateTime: \"2014-05-25T12:43:27Z\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Cross-Namespace Network Policies in Kubernetes - YAML\nDESCRIPTION: This YAML snippet customizes network policies to facilitate cross-namespace communication. It extends the ingress and egress rules of the 'gardener-resource-manager' service to support connections from pods in a separate namespace, identified by specific labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    gardener.cloud/description: Allows ingress TCP traffic to port 10250 for pods selected\n      by the a/gardener-resource-manager service selector from pods running in namespace b\n      labeled with map[networking.resources.gardener.cloud/to-a-gardener-resource-manager-tcp-10250:allowed].\n  name: ingress-to-gardener-resource-manager-tcp-10250-from-b\n  namespace: a\nspec:\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: b\n      podSelector:\n        matchLabels:\n          networking.resources.gardener.cloud/to-a-gardener-resource-manager-tcp-10250: allowed\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app: gardener-resource-manager\n  policyTypes:\n  - Ingress\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    gardener.cloud/description: Allows egress TCP traffic to port 10250 from pods running in\n      namespace b labeled with map[networking.resources.gardener.cloud/to-a-gardener-resource-manager-tcp-10250:allowed]\n      to pods selected by the a/gardener-resource-manager service selector.\n  name: egress-to-a-gardener-resource-manager-tcp-10250\n  namespace: b\nspec:\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: a\n      podSelector:\n        matchLabels:\n          app: gardener-resource-manager\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      networking.resources.gardener.cloud/to-a-gardener-resource-manager-tcp-10250: allowed\n  policyTypes:\n  - Egress\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Settings in CloudProfile YAML\nDESCRIPTION: Example of how a Gardener administrator configures the cloudProfile with backup infrastructure credentials and provider settings to control backup behavior.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# CloudProfile.yaml:\nSpec:\n    backup:\n        provider: aws\n        region: eu-west-1\n        secretRef:\n            name: backup-operator-aws\n            namespace: garden\n```\n\n----------------------------------------\n\nTITLE: Creating a ControlPlane resource in Gardener for provider-specific components\nDESCRIPTION: Example of a ControlPlane custom resource that Gardener creates in the seed cluster. This resource contains provider-specific configuration and is meant to be reconciled by an extension controller to deploy components like the cloud-controller-manager.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/controlplane.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ControlPlane\nmetadata:\n  name: control-plane\n  namespace: shoot--foo--bar\nspec:\n  type: openstack\n  region: europe-west1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foo--bar\n  providerConfig:\n    apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1\n    kind: ControlPlaneConfig\n    loadBalancerProvider: provider\n    zone: eu-1a\n    cloudControllerManager:\n      featureGates:\n        CustomResourceValidation: true\n  infrastructureProviderStatus:\n    apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureStatus\n    networks:\n      floatingPool:\n        id: vpc-1234\n      subnets:\n      - purpose: nodes\n        id: subnetid\n```\n\n----------------------------------------\n\nTITLE: Last Maintenance Status Success Example in YAML\nDESCRIPTION: Shows the status output after a successful maintenance operation, including description of performed updates and timing information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_maintenance.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLast Maintenance:\n    Description:     \"All maintenance operations successful. Control Plane: Updated Kubernetes version from 1.26.4 to 1.27.1. Reason: Kubernetes version expired - force update required\"\n    State:           Succeeded\n    Triggered Time:  2023-07-28T09:07:27Z\n```\n\n----------------------------------------\n\nTITLE: Defining Shoot Status for CA Rotation in YAML\nDESCRIPTION: YAML structure showing the proposed addition to the Shoot status that tracks CA rotation state, including the current phase and when the last rotation was completed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/18-shoot-CA-rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  credentials:\n    rotation:\n      certificateAuthorities:\n        phase: Prepare # Prepare|Finalize|Completed\n        lastCompletion: 2022-02-07T14:23:44Z\n    # kubeconfig:\n    #   phase:\n    #   lastCompletion:\n```\n\n----------------------------------------\n\nTITLE: Configuring ExposureClass Handlers in GardenletConfiguration YAML\nDESCRIPTION: This GardenletConfiguration example defines how ExposureClass handlers should be implemented across Seed clusters. It specifies configurations for load balancer services and ingress gateways needed to expose the control plane. Names of handlers in this configuration must align with those in the ExposureClass definitions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/exposureclasses.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexposureClassHandlers:\n- name: internet-config\n  loadBalancerService:\n    annotations:\n      loadbalancer/network: internet\n- name: internal-config\n  loadBalancerService:\n    annotations:\n      loadbalancer/network: internal\n  sni:\n    ingress:\n      namespace: ingress-internal\n      labels:\n        network: internal\n```\n\n----------------------------------------\n\nTITLE: Disabling Pod Injection for Namespace - YAML\nDESCRIPTION: Shows how to prevent the injection for all pods in a namespace by labeling the namespace with 'apiserver-proxy.networking.gardener.cloud/inject: disable'. This is applicable when you want to opt-out of injection on a namespace level, ensuring that all contained pods are excluded.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_kubernetes_service_host_injection.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    apiserver-proxy.networking.gardener.cloud/inject: disable\n  name: my-namespace\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedResource and Secret for Resource Management in YAML\nDESCRIPTION: This snippet demonstrates how to define a ManagedResource custom object and a corresponding Secret containing the resources to be managed. The Secret contains base64 encoded YAML for two ConfigMaps, which will be created and managed in the target cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: managedresource-example1\n  namespace: default\ntype: Opaque\ndata:\n  objects.yaml: YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHRlc3QtMTIzNAogIG5hbWVzcGFjZTogZGVmYXVsdAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHRlc3QtNTY3OAogIG5hbWVzcGFjZTogZGVmYXVsdAo=\n    # apiVersion: v1\n    # kind: ConfigMap\n    # metadata:\n    #   name: test-1234\n    #   namespace: default\n    # ---\n    # apiVersion: v1\n    # kind: ConfigMap\n    # metadata:\n    #   name: test-5678\n    #   namespace: default\n---\napiVersion: resources.gardener.cloud/v1alpha1\nkind: ManagedResource\nmetadata:\n  name: example\n  namespace: default\nspec:\n  secretRefs:\n  - name: managedresource-example1\n```\n\n----------------------------------------\n\nTITLE: Istio Gateway Configuration for Shoot API Server\nDESCRIPTION: YAML configuration for an Istio Gateway resource that handles TLS passthrough for the Shoot API server domain names. This resource enables SNI-based routing to the appropriate backend service.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: kube-apiserver-gateway\n  namespace: <shoot-namespace>\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 443\n      name: tls\n      protocol: TLS\n    tls:\n      mode: PASSTHROUGH\n    hosts:\n    - api.<external-domain>\n    - api.<shoot>.<project>.<internal-domain>\n```\n\n----------------------------------------\n\nTITLE: Generating a Server Certificate with SecretsManager in Go\nDESCRIPTION: This snippet demonstrates how to generate a server certificate using the SecretsManager's Generate method. It includes options for signing by a CA, persistence, and rotation strategy.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/secrets_management.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := k.secretsManager.Generate(\n    ctx,\n    &secrets.CertificateSecretConfig{\n        Name:                        \"my-server-secret\",\n        CommonName:                  \"server-abc\",\n        DNSNames:                    []string{\"first-name\", \"second-name\"},\n        CertType:                    secrets.ServerCert,\n        SkipPublishingCACertificate: true,\n    },\n    secretsmanager.SignedByCA(\"my-ca\"),\n    secretsmanager.Persist(),\n    secretsmanager.Rotate(secretsmanager.InPlace),\n)\nif err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Prometheus ServiceMonitor in YAML\nDESCRIPTION: Example of creating a ServiceMonitor custom resource for the shoot Prometheus instance. This configuration allows scraping metrics from a custom control plane component in the shoot namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    prometheus: shoot\n  name: shoot-my-controlplane-component\n  namespace: shoot--foo--bar\nspec:\n  selector:\n    matchLabels:\n      app: my-component\n  endpoints:\n  - metricRelabelings:\n    - action: keep\n      regex: ^(metric1|metric2|...)$\n      sourceLabels:\n      - __name__\n    port: metrics\n```\n\n----------------------------------------\n\nTITLE: Registering an Extension Type with ControllerRegistration in Gardener\nDESCRIPTION: YAML configuration for registering an Extension type through a ControllerRegistration resource. This defines an 'example' extension type that is globally enabled for all shoots and supports workerless deployments.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/extension.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: ControllerRegistration\nmetadata:\n  name: extension-example\nspec:\n  resources:\n  - kind: Extension\n    type: example\n    globallyEnabled: true\n    workerlessSupported: true\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability Settings for Gardener-managed Kubernetes Cluster\nDESCRIPTION: This YAML snippet demonstrates how to configure various high availability settings for a Gardener-managed Kubernetes cluster, including control plane HA, API server tolerations, scheduler features, and autoscaling options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  controlPlane:\n    highAvailability:\n      failureTolerance:\n        type: zone # valid values are `node` and `zone` (only available if your control plane resides in a region with 3+ zones)\n  kubernetes:\n    kubeAPIServer:\n      defaultNotReadyTolerationSeconds: 300\n      defaultUnreachableTolerationSeconds: 300\n    kubelet:\n      ...\n    kubeScheduler:\n      featureGates:\n        MinDomainsInPodTopologySpread: true\n    kubeControllerManager:\n      nodeMonitorGracePeriod: 40s\n      horizontalPodAutoscaler:\n        syncPeriod: 15s\n        tolerance: 0.1\n        downscaleStabilization: 5m0s\n        initialReadinessDelay: 30s\n        cpuInitializationPeriod: 5m0s\n    verticalPodAutoscaler:\n      enabled: true\n      evictAfterOOMThreshold: 10m0s\n      evictionRateBurst: 1\n      evictionRateLimit: -1\n      evictionTolerance: 0.5\n      recommendationMarginFraction: 0.15\n      updaterInterval: 1m0s\n      recommenderInterval: 1m0s\n    clusterAutoscaler:\n      expander: \"least-waste\"\n      scanInterval: 10s\n      scaleDownDelayAfterAdd: 60m\n      scaleDownDelayAfterDelete: 0s\n      scaleDownDelayAfterFailure: 3m\n      scaleDownUnneededTime: 30m\n      scaleDownUtilizationThreshold: 0.5\n  provider:\n    workers:\n    - name: ...\n      minimum: 6\n      maximum: 60\n      maxSurge: 3\n      maxUnavailable: 0\n      zones:\n      - ... # list of zones you want your worker pool nodes to be spread across, see above\n      kubernetes:\n        kubelet:\n          ... # similar to `kubelet` above (cluster-wide settings), but here per worker pool (pool-specific settings), see above\n      machineControllerManager: # optional, it allows to configure the machine-controller settings.\n        machineCreationTimeout: 20m\n        machineHealthTimeout: 10m\n        machineDrainTimeout: 60h\n  systemComponents:\n    coreDNS:\n      autoscaling:\n        mode: horizontal # valid values are `horizontal` (driven by CPU load) and `cluster-proportional` (driven by number of nodes/cores)\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Resource with Persisted Terraform State\nDESCRIPTION: Example YAML configuration of an Infrastructure resource with Terraform state saved in the status.state field for migration purposes. This demonstrates how extension controllers should store their state to enable proper migration between seed clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/migration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--foo--bar\nspec:\n  type: azure\n  region: eu-west-1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foo--bar\n  providerConfig:\n    apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureConfig\n    resourceGroup:\n      name: mygroup\n    ...\nstatus:\n  state: |\n    {\n      \"version\": 3,\n      \"terraform_version\": \"0.11.14\",\n      \"serial\": 2,\n      \"lineage\": \"3a1e2faa-e7b6-f5f0-5043-368dd8ea6c10\",\n      ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Bastion Extension Resource in Kubernetes\nDESCRIPTION: Example of a Bastion CRD that Gardener creates in the seed cluster to be reconciled by an extension controller. It includes the type (cloud provider), base64-encoded user data containing SSH keys, and ingress IP block settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/bastion.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Bastion\nmetadata:\n  name: mybastion\n  namespace: shoot--foo--bar\nspec:\n  type: aws\n  # userData is base64-encoded cloud provider user data; this contains the\n  # user's SSH key\n  userData: IyEvYmluL2Jhc2ggL....Nlcgo=\n  ingress:\n    - ipBlock:\n        cidr: 192.88.99.0/32 # this is most likely the user's IP address\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Backup in Gardenlet YAML\nDESCRIPTION: This YAML snippet shows how to configure the Seed resource in the seedConfig section of the gardenlet configuration to enable backup and restore functionality. It specifies the backup provider and references the secret containing client credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\nseedConfig:\n  metadata:\n    name: sweet-seed\n  spec:\n    backup:\n      provider: <provider>\n      secretRef:\n        name: sweet-seed-backup\n        namespace: garden\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization ConfigMap for Gardener Shoot\nDESCRIPTION: This example shows how to create a ConfigMap containing the AuthorizationConfiguration for webhook-based authorization in a Gardener shoot cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: name-of-configmap-containing-authorization-config\n  namespace: garden-my-project\ndata:\n  config.yaml: |\n    apiVersion: apiserver.config.k8s.io/v1beta1\n    kind: AuthorizationConfiguration\n    authorizers:\n    - type: Webhook\n      name: my-webhook\n      webhook:\n        timeout: 3s\n        subjectAccessReviewVersion: v1\n        matchConditionSubjectAccessReviewVersion: v1\n        failurePolicy: Deny\n        matchConditions:\n        - expression: request.resourceAttributes.namespace == 'kube-system'\n```\n\n----------------------------------------\n\nTITLE: Defining Network CRD in Kubernetes\nDESCRIPTION: This snippet defines the Custom Resource Definition for the Network resource in Gardener. It includes fields for metadata, spec (containing pod CIDR, service CIDR, and IP families), and status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_5\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: networks.extensions.gardener.cloud\nspec:\n  group: extensions.gardener.cloud\n  versions:\n    - name: v1alpha1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                podCIDR:\n                  type: string\n                serviceCIDR:\n                  type: string\n                ipFamilies:\n                  type: array\n                  items:\n                    type: string\n            status:\n              type: object\n```\n\n----------------------------------------\n\nTITLE: Worker API Specification\nDESCRIPTION: This snippet provides a YAML specification for the `Worker` API in Gardener. It details the worker node's configuration, including update strategy and kubelet settings that must align with the defined machine image and region.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/31-inplace-node-update.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Worker\nmetadata:\n  name: worker\n  namespace: shoot--foobar--aws\nspec:\n  type: aws\n  region: eu-west-1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foobar--aws\n  infrastructureProviderStatus: <infra-status>\n  pools:\n    - name: cpu-worker-1\n      machineImage:\n        name: gardenlinux\n        version: 1.2.2\n      minimum: 5\n      maximum: 5\n      maxSurge: 0\n      maxUnavailable: 2\n      updateStrategy: AutoInPlaceUpdate # AutoRollingUpdate/AutoInPlaceUpdate/ManualInPlaceUpdate\n      kubelet:\n        evictionHard:\n          memoryAvailable: 100Mi\n          imageFSAvailable: 5%\n```\n\n----------------------------------------\n\nTITLE: MachineCloudConfig CRD for Original Cloud Config\nDESCRIPTION: Defines the main cloud configuration for CoreOS machines including Docker, kubelet, and system configurations. Contains service definitions and file placements for core container runtime and Kubernetes components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: MachineCloudConfig\nmetadata:\n  name: pool-01-original\n  namespace: shoot--core--aws-01\nspec:\n  type: CoreOS\n  units:\n  - name: docker.service\n    drop-ins:\n    - name: 10-docker-opts.conf\n      content: |\n        [Service]\n        Environment=\"DOCKER_OPTS=--log-opt max-size=60m --log-opt max-file=3\"\n  - name: docker-monitor.service\n    command: start\n    enable: true\n    content: |\n      [Unit]\n      Description=Docker-monitor daemon\n      After=kubelet.service\n      [Service]\n      Restart=always\n      EnvironmentFile=/etc/environment\n      ExecStart=/opt/bin/health-monitor docker\n```\n\n----------------------------------------\n\nTITLE: Reporting Infrastructure Status in YAML\nDESCRIPTION: This YAML snippet shows how an AWS extension controller reports the status of infrastructure provisioning, including VPC details, IAM roles, and EC2 information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  observedGeneration: ...\n  state: ...\n  lastError: ..\n  lastOperation: ...\n  providerStatus:\n    apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureStatus\n    vpc:\n      id: vpc-1234\n      subnets:\n      - id: subnet-acbd1234\n        name: workers\n        zone: eu-west-1\n      securityGroups:\n      - id: sg-xyz12345\n        name: workers\n    iam:\n      nodesRoleARN: <some-arn>\n      instanceProfileName: foo\n    ec2:\n      keyName: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Allow Privilege Escalation\nDESCRIPTION: Example showing how to explicitly disable privilege escalation in container security context.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/component-checklist.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nSecurityContext: &v1.SecurityContext{\n    AllowPrivilegeEscalation: pointer.Bool(false),\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Shoot Status with Credential Resources in YAML\nDESCRIPTION: Example YAML showing a potential future extension to the Shoot status that includes credential resource references, such as the location of kubeconfig secrets.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/18-shoot-CA-rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  credentials:\n    resources:\n    - type: kubeconfig\n      kind: Secret\n      name: shoot-foo.kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource in Kubernetes\nDESCRIPTION: Basic specification for a generic extension resource that embeds DefaultSpec fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  # Kubernetes standard metadata\nspec:\n  # DefaultSpec fields embedded\n```\n\n----------------------------------------\n\nTITLE: Creating Bootstrap Token Secret in YAML\nDESCRIPTION: YAML configuration for creating a bootstrap token secret in the kube-system namespace of the garden cluster. This token enables the gardenlet to request a signed certificate through Kubernetes Certificate Signing Requests.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  # Name MUST be of form \"bootstrap-token-<token id>\"\n  name: bootstrap-token-07401b\n  namespace: kube-system\n\n# Type MUST be 'bootstrap.kubernetes.io/token'\ntype: bootstrap.kubernetes.io/token\nstringData:\n  # Human readable description. Optional.\n  description: \"Token to be used by the gardenlet for Seed `sweet-seed`.\"\n\n  # Token ID and secret. Required.\n  token-id: 07401b # 6 characters\n  token-secret: f395accd246ae52d # 16 characters\n\n  # Expiration. Optional.\n  # expiration: 2017-03-10T03:22:11Z\n\n  # Allowed usages.\n  usage-bootstrap-authentication: \"true\"\n  usage-bootstrap-signing: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Assigning RBAC Permissions for NamespacedCloudProfiles\nDESCRIPTION: This YAML configuration defines a ClusterRole and a RoleBinding for assigning custom RBAC verbs needed to modify specific fields in NamespacedCloudProfiles. It enables users to perform operations such as modifying Kubernetes specifications with the specified custom verb permissions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/namespaced-cloud-profiles.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRole\\nmetadata:\\n  name: namespacedcloudprofile-kubernetes\\nrules:\\n- apiGroups: [\\\"core.gardener.cloud\\\"] \\n  resources: [\\\"namespacedcloudprofiles\\\"]\\n  verbs: [\\\"modify-spec-kubernetes\\\"]\\n\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: RoleBinding\\nmetadata:\\n  name: edit-kubernetes\\n  namespace: dev\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: ClusterRole\\n  name: namespacedcloudprofile-kubernetes\\nsubjects:\\n- apiGroup: rbac.authorization.k8s.io\\n  kind: User\\n  name: alice.doe@example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Ingress to Expose a Service (YAML)\nDESCRIPTION: Displays a sample Kubernetes `Ingress` resource named `gardener-resource-manager` in namespace `a`. It routes HTTP traffic for the host `grm.foo.example.com` to the `gardener-resource-manager` service on port 443 (referencing the service port). This resource definition can trigger automatic NetworkPolicy generation if the Gardener NetworkPolicy controller is configured to watch Ingresses.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: gardener-resource-manager\n  namespace: a\nspec:\n  rules:\n  - host: grm.foo.example.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: gardener-resource-manager\n            port:\n              number: 443\n        path: /\n        pathType: Prefix\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring API Server Options for ManagedSeed Shoot in YAML\nDESCRIPTION: This YAML snippet shows how to specify API server configuration options for a Shoot referred by a ManagedSeed using annotations. It sets the number of replicas and autoscaler settings for kube-apiserver.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/managed_seed.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  annotations:\n    shoot.gardener.cloud/managed-seed-api-server: \"apiServer.replicas=3,apiServer.autoscaler.minReplicas=3,apiServer.autoscaler.maxReplicas=6\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Alertmanager Inhibition Rules\nDESCRIPTION: YAML configuration showing recommended inhibition rules for external Alertmanager setup. These rules prevent excessive alerts by suppressing less severe alerts when a more critical alert is active for the same components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/alerting.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninhibit_rules:\n# Apply inhibition if the alert name is the same.\n- source_match:\n    severity: critical\n  target_match:\n    severity: warning\n  equal: ['alertname', 'service', 'cluster']\n\n# Stop all alerts for type=shoot if there are VPN problems.\n- source_match:\n    service: vpn\n  target_match_re:\n    type: shoot\n  equal: ['type', 'cluster']\n\n# Stop warning and critical alerts if there is a blocker\n- source_match:\n    severity: blocker\n  target_match_re:\n    severity: ^(critical|warning)$\n  equal: ['cluster']\n\n# If the API server is down inhibit no worker nodes alert. No worker nodes depends on kube-state-metrics which depends on the API server.\n- source_match:\n    service: kube-apiserver\n  target_match_re:\n    service: nodes\n  equal: ['cluster']\n\n# If API server is down inhibit kube-state-metrics alerts.\n- source_match:\n    service: kube-apiserver\n  target_match_re:\n    severity: info\n  equal: ['cluster']\n\n# No Worker nodes depends on kube-state-metrics. Inhibit no worker nodes if kube-state-metrics is down.\n- source_match:\n    service: kube-state-metrics-shoot\n  target_match_re:\n    service: nodes\n  equal: ['cluster']\n```\n\n----------------------------------------\n\nTITLE: Viewing Extension Status Conditions in Gardener\nDESCRIPTION: Example of status conditions in an Extension resource that show whether the extension is required, has required ControllerInstallations, and has been successfully installed, providing operators with information about the extension's current state.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  conditions:\n  - lastTransitionTime: \"2025-03-12T13:46:51Z\"\n    lastUpdateTime: \"2025-03-12T13:46:51Z\"\n    message: Extension required for kinds [DNSRecord]\n    reason: ExtensionRequired\n    status: \"True\"\n    type: RequiredRuntime\n  - lastTransitionTime: \"2025-01-20T10:39:47Z\"\n    lastUpdateTime: \"2025-01-20T10:39:47Z\"\n    message: Extension has required ControllerInstallations for seed clusters\n    reason: RequiredControllerInstallation\n    status: \"True\"\n    type: RequiredVirtual\n  - lastTransitionTime: \"2025-04-03T06:42:37Z\"\n    lastUpdateTime: \"2025-04-03T06:42:37Z\"\n    message: Extension has been reconciled successfully\n    reason: ReconcileSuccessful\n    status: \"True\"\n    type: Installed\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Topology Spread for Shoot Clusters\nDESCRIPTION: YAML configuration for zone-level topology spread constraints in shoot clusters with zone failure tolerance.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    minDomains: 2 # lower value of max replicas or number of zones\n    topologyKey: topology.kubernetes.io/zone\n    whenUnsatisfiable: DoNotSchedule\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Infrastructure Quotas - Gardener (YAML)\nDESCRIPTION: This YAML snippet defines controller manager configuration for Gardener, specifically setting per-cloud-provider backup bucket quotas under the backupInfrastructure controller. Dependencies include the Gardener controllermanager component running with this config. Key parameters are the provider (cloud provider name) and limit (maximum allowed shoots per bucket for that provider). The input is a YAML manifest, specifying quotas for aws, azure, openstack, etc. Output is the enforcement of these quotas by Gardener's controller manager; other configuration sections may be present in practice. Values here are for example purposes and should be adjusted per real-world limits.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: controllermanager.config.gardener.cloud/v1alpha1\\nkind: ControllerManagerConfiguration\\ncontrollers:\\n  backupInfrastructure:\\n    quota:\\n      - provider: aws\\n        limit: 100 # The numbers mentioned here are random, just for example purpose.\\n      - provider: azure\\n        limit: 80\\n      - provider: openstack\\n        limit: 100\\n      ...\\n\n```\n\n----------------------------------------\n\nTITLE: Configurable Worker Node Fields for Rolling Updates\nDESCRIPTION: List of worker node configuration fields that can trigger rolling updates when changed, including Kubernetes version, machine image settings, and various kubelet configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_updates.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.spec.kubernetes.version (except for patch version changes)\n.spec.provider.workers[].machine.image.name\n.spec.provider.workers[].machine.image.version\n.spec.provider.workers[].machine.type\n.spec.provider.workers[].volume.type\n.spec.provider.workers[].volume.size\n.spec.provider.workers[].providerConfig (except if feature gate NewWorkerPoolHash)\n.spec.provider.workers[].cri.name\n.spec.provider.workers[].kubernetes.version (except for patch version changes)\n.spec.systemComponents.nodeLocalDNS.enabled\n.status.credentials.rotation.certificateAuthorities.lastInitiationTime\n.status.credentials.rotation.serviceAccountKey.lastInitiationTime\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Audit Policy ConfigMap\nDESCRIPTION: Command to apply a ConfigMap containing custom audit policy configuration to the Kubernetes cluster. The ConfigMap should be deployed in the same namespace as the Shoot resource.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/shoot_auditpolicy.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f example/95-configmap-custom-audit-policy.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Pool Kubernetes Versions in Shoot Manifest\nDESCRIPTION: Example YAML configuration showing how to specify different Kubernetes versions for worker pools in a Shoot resource. Demonstrates version inheritance and explicit version setting for worker pools.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/worker_pool_k8s_versions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    version: 1.27.4\n  provider:\n    workers:\n    - name: data1\n      kubernetes:\n        version: 1.26.8\n    - name: data2\n```\n\n----------------------------------------\n\nTITLE: Defining HA Configuration in Shoot API\nDESCRIPTION: This YAML snippet demonstrates how to configure the high availability (HA) settings for a shoot cluster in Gardener. The 'highAvailability' section specifies the failure tolerance type. 'Node' tolerance means the control plane can tolerate the failure of a single node, while 'zone' tolerance means it can withstand the failure of an entire zone.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: core.gardener.cloud/v1beta1\nspec:\n  controlPlane:\n    highAvailability:\n      failureTolerance:\n        type: <node | zone>\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity in Seed Spec (YAML)\nDESCRIPTION: This YAML snippet demonstrates modifications to the `Seed` API (`core.gardener.cloud/v1beta1`). It introduces the `workloadIdentityRef` field (containing `name` and `namespace`) within `spec.backup` and `spec.dns.provider` sections as an alternative to `secretRef`, enabling the use of workload identities for seed backup and DNS provider credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Seed\nmetadata:\n  name: seed\nspec:\n  backup:\n    workloadIdentityRef:\n      name: backup-workloadidentity\n      namespace: garden\n  dns:\n    provider:\n      workloadIdentityRef:\n        name: ingress-workloadidentity\n        namespace: garden\n```\n\n----------------------------------------\n\nTITLE: Extended Shoot API Configuration for IPv6 Single-Stack\nDESCRIPTION: Example YAML configuration showing the extended Shoot API with IPv6 CIDRs for pods, nodes, and services networks, along with the new ipFamilies field to specify IPv6 single-stack networking.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/21-ipv6-singlestack-local.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  networking:\n    pods: 2001:db8:1::/48\n    nodes: 2001:db8:2::/48\n    services: 2001:db8:3::/48\n    # ...\n    ipFamilies:\n    - IPv6\n```\n\n----------------------------------------\n\nTITLE: Deploying Gardenlet to Remote Kubernetes Clusters with Kubeconfig Secret\nDESCRIPTION: This YAML defines a Secret containing a kubeconfig for a remote cluster, followed by a Gardenlet resource that references this Secret. This configuration enables gardener-operator to deploy gardenlet to the specified remote cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_via_operator.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: remote-cluster-kubeconfig\n  namespace: garden\ntype: Opaque\ndata:\n  kubeconfig: base64(kubeconfig-to-remote-cluster)\n---\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: Gardenlet\nmetadata:\n  name: local\n  namespace: garden\nspec:\n  kubeconfigSecretRef:\n    name: remote-cluster-kubeconfig\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Authentication Flag for kube-apiserver (Text)\nDESCRIPTION: This text block specifies the necessary command-line argument to configure Kubernetes kube-apiserver to use a webhook for token authentication. No dependencies other than a configured webhook kubeconfig file on disk. The parameter points to the local file containing webhook client connection details. Must be added to the kube-apiserver deployment or manifest. Only effective if the webhook server is deployed and reachable.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n--authentication-token-webhook-config-file=/etc/webhook/kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Defining a ManagedSeed with a gardenlet Section in Gardener (YAML)\nDESCRIPTION: This YAML manifest defines a `ManagedSeed` resource named 'crazy-botany' in the 'garden' namespace. It uses the `gardenlet` section to configure the deployment of a `gardenlet` instance onto the referenced Shoot ('crazy-botany'). It includes deployment parameters (replicas, image, etc.) and a nested `GardenletConfiguration` which contains the `seedConfig` used by the deployed `gardenlet` to register the Seed. Bootstrap method and merging behavior are also specified.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/13-automated-seed-management.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: ManagedSeed\nmetadata:\n  name: crazy-botany\n  namespace: garden\nspec:\n  shoot:\n    name: crazy-botany # Shoot that should be registered as a Seed\n  gardenlet: \n    deployment: # Gardenlet deployment configuration\n      replicaCount: 1\n      revisionHistoryLimit: 10\n      serviceAccountName: gardenlet\n      image:\n        repository: europe-docker.pkg.dev/gardener-project/releases/gardener/gardenlet\n        tag: latest\n        pullPolicy: IfNotPresent\n      resources:\n        ...\n      podLabels:\n        ...\n      podAnnotations: \n        ...\n      additionalVolumes:\n        ...\n      additionalVolumeMounts:\n        ...\n      env:\n        ...\n      vpa: false\n    config: # GardenletConfiguration resource\n      apiVersion: gardenlet.config.gardener.cloud/v1alpha1\n      kind: GardenletConfiguration\n      seedConfig: # Seed template, including spec and parts of the metadata\n        metadata:\n          labels:\n            foo: bar\n        spec:\n          provider:\n            type: gcp\n            region: europe-west1\n          taints:\n          - key: seed.gardener.cloud/protected\n          ...\n      controllers:\n        shoot:\n          concurrentSyncs: 20\n      featureGates:\n        ...\n      ...\n    bootstrap: BootstrapToken\n    mergeWithParent: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Time Window in YAML\nDESCRIPTION: Defines the maintenance time window specification for when Gardener performs maintenance operations. The time window must be between 30 minutes and 6 hours, with an offset relative to UTC.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_maintenance.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  maintenance:\n    timeWindow:\n      begin: 220000+0100\n      end: 230000+0100\n```\n\n----------------------------------------\n\nTITLE: Configuring a Pull Secret Reference for OCI Helm Charts in Gardener\nDESCRIPTION: Example showing how to reference a pull secret in a ControllerDeployment for accessing private OCI registries, specifying the secret name that contains Docker registry credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhelm:\n  ociRepository:\n    repository: registry.example.com\n    tag: 1.0.0\n    pullSecretRef:\n      name: my-pull-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Namespace Selectors for Gardener NetworkPolicy Controllers in YAML\nDESCRIPTION: This YAML snippet demonstrates how to extend the coverage of Gardener's NetworkPolicy controllers by specifying label selectors for additional namespaces. It is intended for use in the configuration of 'gardener-operator' or 'gardenlet', enabling network policy controllers to manage custom namespaces that are not handled by default. Operators must ensure that the 'controllers.networkPolicy.additionalNamespaceSelectors' field is populated with correct label selectors matching the target namespaces. The expected input is a list of matchLabels; the output is the application of network policies to these extra namespaces.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncontrollers:\n  networkPolicy:\n    additionalNamespaceSelectors:\n    - matchLabels:\n        foo: bar\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Topology Spread Constraints\nDESCRIPTION: YAML configuration for spreading replicas across different hosts with topology constraints for high availability.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - topologyKey: kubernetes.io/hostname\n    minDomains: 3 # lower value of max replicas or 3\n    maxSkew: 1\n    whenUnsatisfiable: ScheduleAnyway\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Node Labels and Annotations Guide\nDESCRIPTION: A collection of important node labels used by gardener-node-agent and machine-controller-manager for node updates and failure handling\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/31-inplace-node-update.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nnode.machine.sapcloud.io/update-failed\nnode.machine.sapcloud.io/ready-to-update\nnode.machine.sapcloud.io/ready-for-update\n```\n\n----------------------------------------\n\nTITLE: SNI Configuration Example\nDESCRIPTION: Configuration for TLS SNI settings including secret name and domain patterns.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nsecretName: \"tls-secret\"\ndomainPatterns:\n  - \"*.example.com\"\n  - \"api.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedSeedSpec Object in Kubernetes\nDESCRIPTION: Specification for a ManagedSeed resource defining shoot reference and gardenlet configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/seedmanagement.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshoot:\n  name: string\n  namespace: string\ngardenlet:\n  config: GardenletConfig\n```\n\n----------------------------------------\n\nTITLE: Defining SeedAutoscaler Resource in YAML\nDESCRIPTION: Example YAML configuration for a SeedAutoscaler resource. It specifies the target ManagedSeedSet to scale, minimum and maximum replicas, and metrics for scaling based on shoot utilization.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/13-automated-seed-management.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: SeedAutoscaler\nmetadata:\n  name: crazy-botany\n  namespace: garden\nspec:\n  scaleTargetRef:\n    apiVersion: seedmanagement.gardener.cloud/v1alpha1\n    kind: ManagedSeedSet\n    name: crazy-botany\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n  - type: Resource # Only Resource is supported\n    resource:\n      name: shoots\n      target:\n        type: Utilization # Utilization or AverageValue\n        averageUtilization: 50\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Secrets for Helm Charts in Gardener Extensions\nDESCRIPTION: Example showing how to reference a pull secret for Helm charts when deploying extensions. The configuration includes both the Extension resource referencing the secret and the Secret resource definition with appropriate Gardener-specific labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  name: ...\nspec:\n    deployment:\n      ...\n        helm:\n          ociRepository:\n            repository: ...\n            tag: ...\n            pullSecretRef:\n              name: my-pull-secret\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-pull-secret\n  namespace: garden\n  labels:\n    gardener.cloud/role: helm-pull-secret\ntype: kubernetes.io/dockerconfigjson\ndata:\n  .dockerconfigjson: <base64-encoded-docker-config-json>\n```\n\n----------------------------------------\n\nTITLE: Requesting Garden Access Token (YAML)\nDESCRIPTION: Example of a Secret resource used to request a token for garden cluster access, demonstrating required labels and annotations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/garden-api-access.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: garden-access-example\n  namespace: example\n  labels:\n    resources.gardener.cloud/purpose: token-requestor\n    resources.gardener.cloud/class: garden\n  annotations:\n    serviceaccount.resources.gardener.cloud/name: example\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Setting Revision History Limit for Deployments in Go\nDESCRIPTION: Example of setting the revisionHistoryLimit to 2 for Deployments and DaemonSets to allow inspection of changes that triggered rolling updates while preventing API server flooding.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/component-checklist.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrevisionHistoryLimit := int32(2)\n```\n\n----------------------------------------\n\nTITLE: Defining SecretBinding Resource in Kubernetes\nDESCRIPTION: This code snippet defines the structure of a SecretBinding resource in the Gardener API. It includes references to secrets and quotas, and defines the provider type.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_4\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: SecretBinding\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  secretRef:\n    # Reference to a secret object\n  quotas:\n    # Optional list of references to Quota objects\n  provider:\n    # Optional provider type definition\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Place OS Updates in OperatingSystemConfig\nDESCRIPTION: Example of how to define in-place OS update configuration in the status field of OperatingSystemConfig. This specifies the command and arguments to execute for updating the OS without replacing the node.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  inPlaceUpdates:\n    osUpdate:\n      command: /update-me\n      args:\n        - foo\n        - bar\n```\n\n----------------------------------------\n\nTITLE: Completing ETCD Encryption Key Rotation in Gardener Shoot\nDESCRIPTION: This command completes the rotation process for the ETCD encryption key by annotating the Shoot resource. It triggers stage three of the rotation process after stages one and two are completed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-etcd-encryption-key-complete\n```\n\n----------------------------------------\n\nTITLE: Creating BackupDownload Custom Resource - Kubernetes YAML\nDESCRIPTION: This manifest defines a BackupDownload resource in the extensions.gardener.cloud/v1alpha1 API for retrieving data from an existing BackupEntry. Required parameters include the entry name, path, and type in the spec, while the status section may contain the fetched data. This resource expects controller-side support for performing the download operation and updating the status with the downloaded content. Deployment demands that the BackupDownload CRD and a compatible controller are active in the cluster. Limitations include reliance on proper controller logic and that the resource is only informational until processed by such a controller.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/22-improved-usage-of-shootstate-api.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: BackupDownload\nmetadata:\n  name: example\n  namespace: default\nspec:\n  entryName: example-entry\n  filePath: shootstate.yaml.enc\n  type: local\nstatus:\n  data: <downloaded-data>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Prometheus ServiceMonitor in YAML\nDESCRIPTION: Example of creating a ServiceMonitor custom resource for the cache Prometheus instance in the seed cluster. This configuration allows scraping metrics from a custom component.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    prometheus: cache\n  name: cache-my-component\n  namespace: garden\nspec:\n  selector:\n    matchLabels:\n      app: my-component\n  endpoints:\n  - metricRelabelings:\n    - action: keep\n      regex: ^(metric1|metric2|...)$\n      sourceLabels:\n      - __name__\n    port: metrics\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Domain Secret in YAML\nDESCRIPTION: Example YAML configuration for the internal domain secret, which contains DNS provider credentials used for creating/deleting internal DNS records for Shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/10-secret-internal-domain.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Shoot Resource for OIDC Injection - YAML\nDESCRIPTION: Defines a minimal Gardener Shoot resource with a label matching an OpenIDConnectPreset selector. This resource triggers automatic injection of OIDC configuration during Shoot creation. Dependencies: Gardener cluster with the CRD deployed. Input is the Shoot metadata, including the relevant label; output is a new Shoot resource eligible for OIDC preset mutation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nmetadata:\\n  name: preset\\n  namespace: default\\n  labels:\\n    oidc: enabled\\nspec:\\n  kubernetes:\\n    version: 1.20.2\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Specification in Gardenlet Values\nDESCRIPTION: YAML configuration for the seedConfig section in the gardenlet configuration. This provides the detailed specification for the Seed resource that will be registered in the garden cluster when the gardenlet starts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\nseedConfig:\n  metadata:\n    name: sweet-seed\n    labels:\n      environment: evaluation\n    annotations:\n      custom.gardener.cloud/option: special\n  spec:\n    dns:\n      provider:\n        type: <provider>\n        secretRef:\n          name: ingress-secret\n          namespace: garden\n    ingress: # see prerequisites\n      domain: ingress.dev.my-seed.example.com\n      controller:\n        kind: nginx\n    networks: # see prerequisites\n      nodes: 10.240.0.0/16\n      pods: 100.244.0.0/16\n      services: 100.32.0.0/13\n      shootDefaults: # optional: non-overlapping default CIDRs for shoot clusters of that Seed\n        pods: 100.96.0.0/11\n        services: 100.64.0.0/13\n    provider:\n      region: eu-west-1\n      type: <provider>\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener BackupEntry Resource and Associated Secret in YAML\nDESCRIPTION: This snippet defines a cluster-scoped Gardener `BackupEntry` resource, representing the backup metadata for a specific `Shoot` cluster, along with the `Secret` required for accessing the backup storage. The `Secret` (`backup-operator-provider`) is the same one used by `BackupBucket` and contains provider credentials. The `BackupEntry` resource specifies the target `bucketName` (which corresponds to a `BackupBucket`) and the associated `seed`. It typically includes an `ownerReference` linking it to the specific `Shoot` resource it backs up.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# See also: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md.\n\napiVersion: v1\nkind: Secret\nmetadata:\n  name: backup-operator-provider\n  namespace: backup-garden\ntype: Opaque\ndata:\n  # <some-provider-specific data keys>\n  # https://github.com/gardener/gardener-extension-provider-alicloud/blob/master/example/30-backupbucket.yaml#L9-L11\n  # https://github.com/gardener/gardener-extension-provider-aws/blob/master/example/30-backupbucket.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-azure/blob/master/example/30-backupbucket.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-gcp/blob/master/example/30-backupbucket.yaml#L9\n  # https://github.com/gardener/gardener-extension-provider-openstack/blob/master/example/30-backupbucket.yaml#L9-L13\n\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: BackupEntry\nmetadata:\n  name: shoot--core--crazy-botany--3ef42\n  namespace: garden-core\n  ownerReferences:\n  - apiVersion: core.gardener.cloud/v1beta1\n    blockOwnerDeletion: false\n    controller: true\n    kind: Shoot\n    name: crazy-botany\n    uid: 19a9538b-5058-11e9-b5a6-5e696cab3bc8\nspec:\n  bucketName: cloudprofile1-random[:5]\n  seed: seed1\nstatus:\n  lastOperation:\n    description: Backup entry has been successfully reconciled.\n    lastUpdateTime: '2020-04-13T14:34:27Z'\n    progress: 100\n    state: Succeeded\n    type: Reconcile\n  observedGeneration: 1\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultStatus Structure in Go\nDESCRIPTION: This code defines the DefaultStatus structure, which contains common status fields used by all Gardener extension resources. It includes fields for provider status, conditions, and last error information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ntype DefaultStatus struct {\n\tProviderStatus runtime.RawExtension\n\tConditions     []gardencorev1beta1.Condition\n\tLastError      *gardencorev1beta1.LastError\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Prometheus URL from Secret\nDESCRIPTION: Command to extract the Prometheus URL from the monitoring secret's annotations, which is needed for federation configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmetadata.annotations.prometheus-url\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidecar for Grafana in YAML\nDESCRIPTION: This configuration adds a sidecar configuration for Grafana to automatically discover and provision designated dashboards. Environment variables specify the watch method, labels to filter dashboards, and file paths. Requires Grafana environment setup.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n- name: METHOD\n  value: WATCH\n- name: LABEL\n  value: monitoring.gardener.cloud/dashboard-shoot # monitoring.gardener.cloud/dashboard-shoot-user for user Grafana\n- name: FOLDER\n  value: /tmp/dashboards\n- name: NAMESPACE\n  value: monitoring,<shoot namespace>\n```\n\n----------------------------------------\n\nTITLE: Creating a ServiceAccount using kubectl (Bash)\nDESCRIPTION: This command uses `kubectl` to create a new ServiceAccount named 'robot-user' within the specified Kubernetes namespace 'project-abc'. Requires `kubectl` access to the cluster and permissions to create ServiceAccounts in the target namespace, typically granted by the `serviceaccountmanager` role.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/service-account-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: code\nCODE:\n```\nkubectl -n project-abc create sa robot-user\n```\n\n----------------------------------------\n\nTITLE: Extension Health Condition Status Example in YAML\nDESCRIPTION: Example YAML showing the condition structure in an extension's status after health checks are performed. It displays two different condition types (SystemComponentsHealthy and EveryNodeReady) with their respective statuses and timestamps.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/healthcheck-library.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  conditions:\n    - lastTransitionTime: \"20XX-10-28T08:17:21Z\"\n      lastUpdateTime: \"20XX-11-28T08:17:21Z\"\n      message: (1/1) Health checks successful\n      reason: HealthCheckSuccessful\n      status: \"True\"\n      type: SystemComponentsHealthy\n    - lastTransitionTime: \"20XX-10-28T08:17:21Z\"\n      lastUpdateTime: \"20XX-11-28T08:17:21Z\"\n      message: (2/2) Health checks successful\n      reason: HealthCheckSuccessful\n      status: \"True\"\n      type: EveryNodeReady\n```\n\n----------------------------------------\n\nTITLE: Configuring Alerting Secret in YAML\nDESCRIPTION: Example YAML configuration for the alerting secret, which contains alerting configuration and credentials for the AlertManager to send email alerts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/10-secret-alerting.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace Network Access for Seed Monitoring\nDESCRIPTION: Additional annotations required for Services not in the garden namespace to allow Prometheus instances in seed clusters to scrape metrics from pods in other namespaces.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/namespace-selectors: '[{\"matchLabels\":{\"kubernetes.io/metadata.name\":\"garden\"}}]'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Gardenadm Join Command in Bash\nDESCRIPTION: This example demonstrates how to use the 'gardenadm join' command to bootstrap a worker node and join it to the cluster. It doesn't require any additional flags or arguments.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_join.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm join\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Configuration for Gardener Dashboard\nDESCRIPTION: ConfigMap containing frontend configuration for the Gardener Dashboard. This example shows how to configure help menu items, and can be extended to include branding, themes, and colors as documented in the Gardener Dashboard repository.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: gardener-dashboard-frontend\n  namespace: garden\ndata:\n  frontend-config.yaml: |\n    helpMenuItems:\n    - title: Homepage\n      icon: mdi-file-document\n      url: https://gardener.cloud\n```\n\n----------------------------------------\n\nTITLE: Defining OperatingSystemConfig CRD in Kubernetes\nDESCRIPTION: This snippet defines the Custom Resource Definition for the OperatingSystemConfig resource in Gardener. It includes fields for metadata, spec (containing CRI config, purpose, units, files, and in-place updates), and status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_6\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: operatingsystemconfigs.extensions.gardener.cloud\nspec:\n  group: extensions.gardener.cloud\n  versions:\n    - name: v1alpha1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                criConfig:\n                  type: object\n                purpose:\n                  type: string\n                units:\n                  type: array\n                  items:\n                    type: object\n                files:\n                  type: array\n                  items:\n                    type: object\n                inPlaceUpdates:\n                  type: object\n            status:\n              type: object\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Garden Deployment Flag in YAML Configuration\nDESCRIPTION: YAML configuration example showing the values that get merged into extension deployment configurations, indicating that the extension is enabled for the Garden cluster and setting its priority class.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngardener:\n  runtimeCluster:\n    enabled: true # indicates the extension is enabled for the Garden cluster, e.g. for handling `BackupBucket`, `DNSRecord` and `Extension` objects.\n    priorityClassName: gardener-garden-system-200\n```\n\n----------------------------------------\n\nTITLE: Using WithValues for Contextual Logging in Go\nDESCRIPTION: Example of using WithValues to create a contextual logger that carries key-value pairs for multiple log statements when acting on one object in multiple steps.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlog := parentLog.WithValues(\"infrastructure\", client.ObjectKeyFromObject(infrastructure))\n// ...\nlog.Info(\"Creating Infrastructure\")\n// ...\nlog.Info(\"Waiting for Infrastructure to be reconciled\")\n// ...\n```\n\n----------------------------------------\n\nTITLE: Starting Gardener Development Mode\nDESCRIPTION: Command to initiate Gardener development mode with Skaffold, enabling hot-reload capabilities for code changes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake gardener-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Spec with Audit Policy Reference\nDESCRIPTION: YAML configuration showing how to reference a custom audit policy ConfigMap in the Shoot specification. The configuration points the kube-apiserver to use the custom audit policy defined in the referenced ConfigMap.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/shoot_auditpolicy.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    kubeAPIServer:\n      auditConfig:\n        auditPolicy:\n          configMapRef:\n            name: auditpolicy\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes ConfigMap for Gardener Metadata - YAML\nDESCRIPTION: This snippet provides a YAML manifest to create a ConfigMap called 'gardener-info' in the 'gardener-system-public' namespace. The ConfigMap is used to publish metadata about the deployed Gardener API server, such as its version and the workload identity issuer URL. Dependencies include a Kubernetes cluster and sufficient privileges to create ConfigMaps; the required fields include 'apiVersion', 'kind', 'metadata', and the nested data structure. Inputs are static values provided in the YAML file, and outputs are the created ConfigMap resource within Kubernetes. All fields must adhere to ConfigMap limitations (e.g., size restrictions and string values).\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/gardener/gardener_info_configmap.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: gardener-info\\n  namespace: gardener-system-public\\ndata:\\n  gardenerAPIServer: |                                                      # key name of the gardener-apiserver section\\n    version: v1.111.0                                                       # version of the gardener-apiserver\\n    workloadIdentityIssuerURL: https://issuer.gardener.cloud.local          # the URL of the authority that issues workload identity tokens\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernation Schedule in Gardener\nDESCRIPTION: This YAML snippet demonstrates how to configure a hibernation schedule for a cluster. It specifies daily hibernation from 8PM to 6AM in the America/Los_Angeles timezone. The 'start' and 'end' fields use cron expressions to define the schedule.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_hibernate.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  hibernation:\n    enabled: false\n    schedules:\n    - start: \"0 20 * * *\" # Start hibernation every day at 8PM\n      end: \"0 6 * * *\"    # Stop hibernation every day at 6AM\n      location: \"America/Los_Angeles\" # Specify a location for the cron to run in\n```\n\n----------------------------------------\n\nTITLE: Setting up a PrometheusRule Resource in YAML\nDESCRIPTION: The YAML snippet defines a PrometheusRule, which adds custom alerting rules for the monitoring system. It ensures that infrastructure-related issues trigger alerts when services are down. It requires Prometheus operator support.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  labels:\n    cluster: shoot--project--name\n  name: cloud-controller-manager-rules\n  namespace: shoot--project--name\nspec:\n  groups:\n  - name: cloud-controller-manager.rules\n    rules:\n    - alert: CloudControllerManagerDown\n      expr: absent(up{job=\"cloud-controller-manager\"} == 1)\n      for: 15m\n      labels:\n        service: cloud-controller-manager\n        severity: critical\n        type: seed\n        visibility: all\n      annotations:\n        description: All infrastructure specific operations cannot be completed (e.g. creating loadbalancers or persistent volumes).\n        summary: Cloud controller manager is down.\n```\n\n----------------------------------------\n\nTITLE: Connecting an Autonomous Cluster to Gardener with gardenadm (CLI)\nDESCRIPTION: The `gardenadm connect` command facilitates the connection of a newly created autonomous shoot cluster to an existing Gardener installation. This involves deploying a specialized `gardenlet` instance into the cluster, enabling management via the standard Gardener `Shoot` API. Day-2 operations require this connection.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm connect\n```\n\n----------------------------------------\n\nTITLE: Configuring Region Distances for Minimal Distance Strategy in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure region distances for the Minimal Distance strategy using a ConfigMap. It includes annotations to specify the relevant CloudProfiles and labels to indicate the purpose of the ConfigMap. The data field contains the actual distance configurations between regions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/scheduler.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: <name>\n  namespace: garden\n  annotations:\n    scheduling.gardener.cloud/cloudprofiles: cloudprofile-name-1{,optional-cloudprofile-name-2,...}\n  labels:\n    scheduling.gardener.cloud/purpose: region-config\ndata:\n  region-1: |\n    region-2: 10\n    region-3: 20\n    ...\n  region-2: |\n    region-1: 10\n    region-3: 10\n    ...\n```\n\n----------------------------------------\n\nTITLE: Decompressing ManagedResource Secret Data using Brotli\nDESCRIPTION: Command to decompress the content of a ManagedResource Secret that has been compressed using Brotli compression algorithm. The command extracts, decodes, and decompresses the data.yaml.br field from the specified secret.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <namespace> get secret <managed-resource-secret> -o jsonpath='{.data.data\\.yaml\\.br}' | base64 -d | brotli -d\n```\n\n----------------------------------------\n\nTITLE: Starting CA Certificate Rotation in Shoot Cluster\nDESCRIPTION: Command to initiate the rotation of Certificate Authorities (CAs) by adding the rotate-ca-start annotation. This begins stage one of the CA rotation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-ca-start\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceAccount Settings in Shoot YAML\nDESCRIPTION: YAML configuration showing how to set up ServiceAccount settings in a Shoot specification, including issuer, accepted issuers, token expiration settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/shoot_serviceaccounts.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    kubeAPIServer:\n      serviceAccountConfig:\n        issuer: foo\n        acceptedIssuers:\n        - foo1\n        - foo2\n        extendTokenExpiration: true\n        maxTokenExpiration: 45d\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager with AlertmanagerConfig\nDESCRIPTION: AlertmanagerConfig custom resource for configuring the Alertmanager deployed by gardener-operator. This example sets up routing rules based on severity and topology, and configures Slack notifications for alerts labeled with severity 'warning' and topology 'garden'.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1alpha1\nkind: AlertmanagerConfig\nmetadata:\n  name: config\n  namespace: garden\n  labels:\n    alertmanager: garden\nspec:\n  route:\n    receiver: dev-null\n    groupBy:\n    - alertname\n    - landscape\n    routes:\n    - continue: true\n      groupWait: 3m\n      groupInterval: 5m\n      repeatInterval: 12h\n      routes:\n      - receiver: ops\n        matchers:\n        - name: severity\n          value: warning\n          matchType: =\n        - name: topology\n          value: garden\n          matchType: =\n  receivers:\n  - name: dev-null\n  - name: ops\n    slackConfigs:\n    - apiURL: https://<slack-api-url>\n      channel: <channel-name>\n      username: Gardener-Alertmanager\n      iconEmoji: \":alert:\"\n      title: \"[{{ .Status | toUpper }}] Gardener Alert(s)\"\n      text: \"{{ range .Alerts }}*{{ .Annotations.summary }} ({{ .Status }})*\\n{{ .Annotations.description }}\\n\\n{{ end }}\"\n      sendResolved: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations for Node Conditions in Kubernetes\nDESCRIPTION: This YAML snippet shows how to configure pod tolerations for node conditions such as 'unreachable' and 'not-ready'. It demonstrates setting immediate eviction for pods on nodes with these conditions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tolerations:\n  - key: \"node.kubernetes.io/unreachable\"\n    operator: \"Exists\"\n    effect: \"NoExecute\"\n    tolerationSeconds: 0\n  - key: \"node.kubernetes.io/not-ready\"\n    operator: \"Exists\"\n    effect: \"NoExecute\"\n    tolerationSeconds: 0\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Kubernetes NetworkPolicies for Ingress Backends (YAML)\nDESCRIPTION: Presents two Kubernetes `NetworkPolicy` resources automatically generated by the Gardener controller when Ingress watching is enabled. The first policy (`ingress-to-gardener-resource-manager...`) allows ingress traffic from the specified Ingress controller pods (`foo: bar` in `default` namespace) to the backend pods (`app: gardener-resource-manager` in namespace `a`) on the target port TCP/10250. The second policy (`egress-to-a-gardener-resource-manager...`) allows egress traffic from the Ingress controller pods to the backend pods on the same port. These ensure required connectivity based on the Ingress definition.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    gardener.cloud/description: Allows ingress TCP traffic to port 10250 for pods\n      selected by the a/gardener-resource-manager service selector from ingress controller\n      pods running in the default namespace labeled with map[foo:bar].\n  name: ingress-to-gardener-resource-manager-tcp-10250-from-ingress-controller\n  namespace: a\nspec:\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          foo: bar\n      namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: default\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app: gardener-resource-manager\n  policyTypes:\n  - Ingress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    gardener.cloud/description: Allows egress TCP traffic to port 10250 from pods\n      running in the default namespace labeled with map[foo:bar] to pods selected by\n      the a/gardener-resource-manager service selector.\n  name: egress-to-a-gardener-resource-manager-tcp-10250-from-ingress-controller\n  namespace: default\nspec:\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: gardener-resource-manager\n      namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: a\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      foo: bar\n  policyTypes:\n  - Egress\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ForceDelete for Shoot Cluster Resources (Go)\nDESCRIPTION: Example of implementing ForceDelete for extensions that deploy resources only in the shoot cluster, not backed by third-party infrastructure.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/force-deletion.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ForceDelete implements Actuator.\nfunc (a *actuator) ForceDelete(ctx context.Context, shootState *gardencorev1alpha1.ShootState) error {\n    // Perform regular deletion as force deletion is not needed\n    return a.Delete(ctx, shootState)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Seed in Gardener (Bash)\nDESCRIPTION: Command to remove a specific seed from the Gardener setup. It allows for removing individual seeds without affecting others or the local Gardener cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gardener-extensions-down SEED_NAME=<seed-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Secret for Operating System Configuration Result\nDESCRIPTION: Example of how the generated OS config is stored in a Secret. The extension controller stores the configuration in a Secret after generation, as it may contain confidential data.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: osc-result-pool-01-original\n  namespace: default\n  ownerReferences:\n  - apiVersion: extensions.gardener.cloud/v1alpha1\n    blockOwnerDeletion: true\n    controller: true\n    kind: OperatingSystemConfig\n    name: pool-01-original\n    uid: 99c0c5ca-19b9-11e9-9ebd-d67077b40f82\ndata:\n  cloud_config: base64(generated-user-data)\n```\n\n----------------------------------------\n\nTITLE: Named Logger Configuration in Go\nDESCRIPTION: Example demonstrating how to create and use named loggers in controllers for better log correlation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncontrollerLogger := rootLogger.WithName(\"controller\").WithName(\"shoot\")\ncontrollerLogger.Info(\"Deploying kube-apiserver\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Current OpenVPN Server in Gardener Shoot Cluster\nDESCRIPTION: This OpenVPN configuration snippet details the setup for the OpenVPN server running within the shoot cluster in the *current* Gardener VPN architecture. It establishes a TCP TLS server, defines the VPN tunnel network range (`192.168.123.0/24`), specifies necessary cryptographic materials (keys, certs, CA, DH parameters, TLS auth key), allows multiple clients with the same certificate common name (`duplicate-cn`), and pushes routes for the shoot cluster's network ranges (nodes, pods, services) to connecting clients in the seed cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md#2025-04-22_snippet_1\n\nLANGUAGE: openvpn\nCODE:\n```\nmode server\ntls-server\nproto tcp4-server\ndev tun0\n\n[...]\n\nserver 192.168.123.0 255.255.255.0\n\npush \"route 10.243.0.0 255.255.128.0\"\npush \"route 10.243.128.0 255.255.128.0\"\n\nduplicate-cn\n\nkey \"/srv/secrets/vpn-shoot/tls.key\"\ncert \"/srv/secrets/vpn-shoot/tls.crt\"\nca \"/srv/secrets/vpn-shoot/ca.crt\"\ndh \"/srv/secrets/dh/dh2048.pem\"\n\ntls-auth \"/srv/secrets/tlsauth/vpn.tlsauth\" 0\npush \"route 10.242.0.0 255.255.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Kubelet Configuration Type\nDESCRIPTION: Contains kubelet-specific settings including CPU management and throttling options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntype KubeletConfig struct {\n  KubernetesConfig\n  CPUCFSQuota *bool\n  CPUManagerPolicy string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterFilter Custom Resource for Log Parsing\nDESCRIPTION: YAML template for creating a ClusterFilter resource that applies the custom parser to logs from a specific container. The filter matches logs based on pod and container name patterns.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterFilter\nmetadata:\n  labels:\n    fluentbit.gardener/type: seed\n  name: << pod-name >>--(<< container-name >>)\nspec:\n  filters:\n  - parser:\n      keyName: log\n      parser: << container-name >>-parser\n      reserveData: true\n  match: kubernetes.<< pod-name >>*<< container-name >>*\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Access for Cross-Namespace Prometheus Scraping\nDESCRIPTION: Additional annotations required for Services in namespaces other than garden to allow Prometheus instances to scrape metrics from pods. These annotations define namespace selectors and aliases to enable cross-namespace network access.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/namespace-selectors: '[{\"matchLabels\":{\"kubernetes.io/metadata.name\":\"garden\"}}]'\n  networking.resources.gardener.cloud/pod-label-selector-namespace-alias: extensions\n```\n\n----------------------------------------\n\nTITLE: Enabling WireGuard for Seed Cluster - Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to enable the WireGuard feature in a Gardener Seed cluster via Kubernetes manifest. You must add a new section under the Seed resource spec.settings, with flags for enabled and cidr. The enabled flag activates the feature gate and cidr defines the WireGuard tunnel CIDR block. The snippet is meant to be part of the Gardener core.gardener.cloud/v1beta1 Seed resource; adjust the name, settings, and other spec fields as required. Both fields are mandatory, and subnet overlaps must be avoided per documented constraints.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Seed\\nmetadata:\\n  name: my-seed\\n  ...\\nspec:\\n  ...\\n  settings:\\n  ...\\n    wireguard:\\n      enabled: true\\n      cidr: 192.168.128.0/22\n```\n\n----------------------------------------\n\nTITLE: Extension Resource with Status Information\nDESCRIPTION: YAML showing an Extension resource with status information. The status includes the last operation state and observed generation, which are crucial for Gardener to determine if the shoot reconciliation was successful.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/extension.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  generation: 1\n  name: example\n  namespace: shoot--foo--bar\nspec:\n  type: example\nstatus:\n  lastOperation:\n    state: Succeeded\n  observedGeneration: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Network Policies for Ingress and Egress - YAML\nDESCRIPTION: These YAML snippets define network policies allowing ingress and egress TCP traffic to and from specific pods that are part of the 'gardener-resource-manager' Service. The policies ensure that only pods with specific labels can communicate on port 10250.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    gardener.cloud/description: Allows ingress TCP traffic to port 10250 for pods\n      selected by the a/gardener-resource-manager service selector from pods running\n      in namespace a labeled with map[networking.resources.gardener.cloud/to-gardener-resource-manager-tcp-10250:allowed].\n  name: ingress-to-gardener-resource-manager-tcp-10250\n  namespace: a\nspec:\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          networking.resources.gardener.cloud/to-gardener-resource-manager-tcp-10250: allowed\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app: gardener-resource-manager\n  policyTypes:\n  - Ingress\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    gardener.cloud/description: Allows egress TCP traffic to port 10250 from pods\n      running in namespace a labeled with map[networking.resources.gardener.cloud/to-gardener-resource-manager-tcp-10250:allowed]\n      to pods selected by the a/gardener-resource-manager service selector.\n  name: egress-to-gardener-resource-manager-tcp-10250\n  namespace: a\nspec:\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: gardener-resource-manager\n    ports:\n    - port: 10250\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      networking.resources.gardener.cloud/to-gardener-resource-manager-tcp-10250: allowed\n  policyTypes:\n  - Egress\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Replicas in Kubernetes Deployment/StatefulSet\nDESCRIPTION: Basic configuration for setting replicas in Kubernetes Deployment or StatefulSet resources. This defines the number of pod replicas to maintain for the workload.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment | StatefulSet\nspec:\n  replicas: ...\n```\n\n----------------------------------------\n\nTITLE: Defining FluentBit Resource with Custom Configurations in YAML\nDESCRIPTION: This FluentBit YAML configuration defines properties for a deamonset managing log collection on Kubernetes nodes. Key parameters include image specifications and fluent-bit related settings. The operator supports custom plugin integrations required by Gardener.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: FluentBit\nmetadata:\n  name: fluent-bit\n  namespace: garden\n  labels:\n    app.kubernetes.io/name: fluent-bit\nspec:\n  image: kubesphere/fluent-bit:v1.9.9\n  fluentBitConfigName: fluent-bit-config\n  # workload properties\n  annotations: {}\n  resources: {}\n  nodeSelector: {}\n  tolerations: {}\n  priorityClassName: \"\"\n  ...\n  # fluent-bit configurations\n  # container runtime output path\n  containerLogRealPath: \"\"\n  # Recommended in case of input tail plugin\n  # holds persisted events in fluent-bit supporting re-emitting\n  positionDB: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints for Multiple Zones in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to add topology spread constraints to a pod template spec when there are multiple zones. It ensures pods are scheduled across different nodes and zones for high availability.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - topologyKey: kubernetes.io/hostname\n    maxSkew: 1\n    whenUnsatisfiable: ScheduleAnyway # or DoNotSchedule\n    matchLabelKeys: \n    - pod-template-hash\n    labelSelector: ...\n  - topologyKey: topology.kubernetes.io/zone\n    minDomains: 2 # lower value of max replicas or number of zones\n    maxSkew: 1\n    whenUnsatisfiable: DoNotSchedule\n    matchLabelKeys: \n    - pod-template-hash\n    labelSelector: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Suffixes in CoreDNS for Gardener\nDESCRIPTION: This YAML configuration is used in Gardener to customize DNS settings, specifically for rewriting DNS queries with common suffixes. It helps mitigate the undesired effects of the DNS search path application. Dependencies include Gardener and CoreDNS, with relevant components set under 'coreDNS' configuration. Key parameters include 'rewriting' and 'commonSuffixes', where commonSuffixes list domain suffixes to trigger specific rewriting behaviors.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/dns-search-path-optimization.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  ...\n  systemComponents:\n    coreDNS:\n      rewriting:\n        commonSuffixes:\n        - gardener.cloud\n        - example.com\n...\n```\n\n----------------------------------------\n\nTITLE: Activating WireGuard Tunnel Feature Gate in Shoot Cluster - Kubernetes YAML\nDESCRIPTION: This snippet shows how to enable the WireGuard tunnel feature for a Gardener Shoot cluster by adding a specific annotation to the metadata section. Set the annotation key alpha.featuregates.shoot.gardener.cloud/wireguard-tunnel to \\\"true\\\" to activate the feature, allowing a gradual and per-cluster rollout. This annotation should be included within the core.gardener.cloud/v1beta1 Shoot resource. Users must ensure their landscapes and underlying networking meet prior defined CIDR and route constraints for proper operation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nmetadata:\\n  name: my-shoot\\n  annotations:\\n    alpha.featuregates.shoot.gardener.cloud/wireguard-tunnel: \\\"true\\\"\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerRuntime Resource for Runtime Extensions in Kubernetes\nDESCRIPTION: YAML definition for a ContainerRuntime custom resource that Gardener creates during shoot reconciliation when a container runtime is specified in at least one worker spec. This resource is used by extension controllers to install and configure specific container runtimes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/10-shoot-additional-container-runtimes.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: ContainerRuntime\nmetadata:\n  name: kata-containers-runtime-extension\n  namespace: shoot--foo--bar\nspec:\n  type: kata-containers\n```\n\n----------------------------------------\n\nTITLE: Configuring VPA Resource in Kubernetes\nDESCRIPTION: Example configuration for a Vertical Pod Autoscaler resource that automatically scales a deployment's CPU and memory requests. Defines minimum and maximum resource boundaries and specifies update policies for container resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/shoot_pod_autoscaling_best_practices.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: foo-vpa\nspec:\n  targetRef:\n    apiVersion: \"apps/v1\"\n    kind:       Deployment\n    name:       foo-deployment\n  updatePolicy:\n    updateMode: \"Auto\"\n  resourcePolicy:\n    containerPolicies:\n    - containerName: foo-container\n      controlledValues: RequestsOnly\n      minAllowed:\n        cpu: 50m\n        memory: 200M\n      maxAllowed:\n        cpu: 4\n        memory: 16G\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor for Garden Prometheus\nDESCRIPTION: ServiceMonitor custom resource for extending the Garden Prometheus configuration. This example shows how to monitor a custom component by using the 'prometheus: garden' label and configuring metric relabeling to keep only specific metrics.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    prometheus: garden\n  name: garden-my-component\n  namespace: garden\nspec:\n  selector:\n    matchLabels:\n      app: my-component\n  endpoints:\n  - metricRelabelings:\n    - action: keep\n      regex: ^(metric1|metric2|...)$\n      sourceLabels:\n      - __name__\n    port: metrics\n```\n\n----------------------------------------\n\nTITLE: Shoot Resource with Merged Health Conditions\nDESCRIPTION: Example of a Shoot resource with health conditions. Shows how Gardener merges the extension-reported conditions into the Shoot's status conditions, which affects the overall health status of the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/shoot-health-status-conditions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  labels:\n    shoot.gardener.cloud/status: unhealthy\n  name: some-shoot\n  namespace: garden-core\nspec:\nstatus:\n  conditions:\n  - type: APIServerAvailable\n    status: \"True\"\n    reason: HealthzRequestSucceeded\n    message: API server /healthz endpoint responded with success status code. [response_time:31ms]\n    lastUpdateTime: \"2014-05-23T08:26:52Z\"\n    lastTransitionTime: \"2014-05-25T12:45:13Z\"\n  - type: ControlPlaneHealthy\n    status: \"False\"\n    reason: ControlPlaneUnhealthyReport\n    message: 'Deployment cloud-controller-manager is unhealthy: condition \"Available\" has\n      invalid status False (expected True) due to MinimumReplicasUnavailable: Deployment\n      does not have minimum availability.'\n    lastUpdateTime: \"2014-05-25T12:45:13Z\"\n    lastTransitionTime: \"2014-05-25T12:45:13Z\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Targeting Shoot's Project with Gardenctl\nDESCRIPTION: Command to use gardenctl to target a specific shoot's project in the garden, which is a prerequisite for retrieving monitoring credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngardenctl target --garden <garden-name> --project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Resource Access Control Table - Markdown\nDESCRIPTION: Markdown table defining resource access permissions and relationships between Gardener components. Shows allowed operations and resource dependencies for gardenlet operations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/gardenlet_api_access.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `ManagedSeed`               | `get`, `list`, `watch`, `update`, `patch`                       | `ManagedSeed` -> `Shoot` -> `Seed`                                                                                                                                                   | Allow `get`, `list`, `watch` requests for all `ManagedSeed`s. Allow only `update`, `patch` requests for `ManagedSeed`s referencing a `Shoot` assigned to the `gardenlet`'s `Seed`.                                                                                               |\n| `Namespace`                 | `get`                                                           | `Namespace` -> `Shoot` -> `Seed`                                                                                                                                                     | Allow `get` requests for `Namespace`s of `Shoot`s that are assigned to the `gardenlet`'s `Seed`. Always allow `get` requests for the `garden` `Namespace`.                                                                                                                       |\n| `NamespacedCloudProfile`    | `get`                                                           | `NamespacedCloudProfile` -> `Shoot` -> `Seed`                                                                                                                                        | Allow only `get` requests for `NamespacedCloudProfile`s referenced by `Shoot`s that are assigned to the `gardenlet`'s `Seed`.                                                                                                                                                    |\n| `Project`                   | `get`                                                           | `Project` -> `Namespace` -> `Shoot` -> `Seed`                                                                                                                                        | Allow `get` requests for `Project`s referenced by the `Namespace` of `Shoot`s that are assigned to the `gardenlet`'s `Seed`.                                                                                                                                                     |\n| `SecretBinding`             | `get`                                                           | `SecretBinding` -> `Shoot` -> `Seed`                                                                                                                                                 | Allow only `get` requests for `SecretBinding`s referenced by `Shoot`s that are assigned to the `gardenlet`'s `Seed`.                                                                                                                                                             |\n| `Secret`                    | `create`, `get`, `update`, `patch`, `delete`(, `list`, `watch`) | `Secret` -> `Seed`, `Secret` -> `Shoot` -> `Seed`, `Secret` -> `SecretBinding` -> `Shoot` -> `Seed`, `Secret` -> `CredentialsBinding` -> `Shoot` -> `Seed`, `BackupBucket` -> `Seed` | Allow `get`, `list`, `watch` requests for all `Secret`s in the `seed-<name>` namespace. Allow only `create`, `get`, `update`, `patch`, `delete` requests for the `Secret`s related to resources assigned to the `gardenlet`'s `Seed`s.                                           |\n| `Seed`                      | `get`, `list`, `watch`, `create`, `update`, `patch`, `delete`   | `Seed`                                                                                                                                                                               | Allow `get`, `list`, `watch` requests for all `Seed`s. Allow only `create`, `update`, `patch`, `delete` requests for the `gardenlet`'s `Seed`s. [1]                                                                                                                              |\n| `ServiceAccount`            | `create`, `get`, `update`, `patch`, `delete`                    | `ServiceAccount` -> `ManagedSeed` -> `Shoot` -> `Seed`, `ServiceAccount` -> `Namespace` -> `Seed`                                                                                    | Allow `create`, `get`, `update`, `patch` requests for `ManagedSeed`s in the bootstrapping phase assigned to the `gardenlet`'s `Seed`s. Allow `delete` requests from gardenlets bootstrapped via `ManagedSeed`s. Allow all verbs on `ServiceAccount`s in seed-specific namespace. |\n| `Shoot`                     | `get`, `list`, `watch`, `update`, `patch`                       | `Shoot` -> `Seed`                                                                                                                                                                    | Allow `get`, `list`, `watch` requests for all `Shoot`s. Allow only `update`, `patch` requests for `Shoot`s assigned to the `gardenlet`'s `Seed`.                                                                                                                                 |\n| `ShootState`                | `get`, `create`, `update`, `patch`                              | `ShootState` -> `Shoot` -> `Seed`                                                                                                                                                    | Allow only `get`, `create`, `update`, `patch` requests for `ShootState`s belonging by `Shoot`s that are assigned to the `gardenlet`'s `Seed`.                                                                                                                                    |\n| `WorkloadIdentity`          | `get`                                                           | `WorkloadIdentity` -> `CredentialsBinding` -> `Shoot` -> `Seed`                                                                                                                      | Allow only `get` requests for `WorkloadIdentities` referenced by `CredentialsBinding`s referenced by `Shoot`s that are assigned to the `gardenlet`'s `Seed`.                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Adding a New Test with Shoot Framework in Golang\nDESCRIPTION: Example code showing how to define a new test using the Shoot Framework. The framework automatically handles initialization, cleanup and dump functions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nvar _ = ginkgo.Describe(\"my suite\", func(){\n  f := framework.NewShootFramework(nil)\n\n  f.Beta().CIt(\"my first test\", func(ctx context.Context) {\n    f.ShootClient.Get(xx)\n    // testing ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Shoot Info ConfigMap Structure in YAML\nDESCRIPTION: This YAML snippet illustrates the structure of the Shoot Info ConfigMap. It includes fields for domain, extensions, Kubernetes version, maintenance windows, network configurations, project details, provider information, and cluster name.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_info_configmap.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: shoot-info\n  namespace: kube-system\ndata:\n  domain: crazy-botany.core.my-custom-domain.com     # .spec.dns.domain field from the Shoot resource\n  extensions: foobar,foobaz                          # List of extensions that are enabled\n  kubernetesVersion: 1.25.4                          # .spec.kubernetes.version field from the Shoot resource\n  maintenanceBegin: 220000+0100                      # .spec.maintenance.timeWindow.begin field from the Shoot resource\n  maintenanceEnd: 230000+0100                        # .spec.maintenance.timeWindow.end field from the Shoot resource\n  nodeNetwork: 10.250.0.0/16                         # .spec.networking.nodes field from the Shoot resource\n  podNetwork: 100.96.0.0/11                          # .spec.networking.pods field from the Shoot resource\n  projectName: dev                                   # .metadata.name of the Project\n  provider: <some-provider-name>                     # .spec.provider.type field from the Shoot resource\n  region: europe-central-1                           # .spec.region field from the Shoot resource\n  serviceNetwork: 100.64.0.0/13                      # .spec.networking.services field from the Shoot resource\n  shootName: crazy-botany                            # .metadata.name from the Shoot resource\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ManagedResource Status Conditions in YAML\nDESCRIPTION: Example YAML showing the conditions section of a healthy ManagedResource status, including ResourcesHealthy, ResourcesProgressing, and ResourcesApplied conditions with their respective statuses, reasons, and messages.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconditions:\n- lastTransitionTime: \"2022-05-03T10:55:39Z\"\n  lastUpdateTime: \"2022-05-03T10:55:39Z\"\n  message: All resources are healthy.\n  reason: ResourcesHealthy\n  status: \"True\"\n  type: ResourcesHealthy\n- lastTransitionTime: \"2022-05-03T10:55:36Z\"\n  lastUpdateTime: \"2022-05-03T10:55:36Z\"\n  message: All resources have been fully rolled out.\n  reason: ResourcesRolledOut\n  status: \"False\"\n  type: ResourcesProgressing\n- lastTransitionTime: \"2022-05-03T10:55:18Z\"\n  lastUpdateTime: \"2022-05-03T10:55:18Z\"\n  message: All resources are applied.\n  reason: ApplySucceeded\n  status: \"True\"\n  type: ResourcesApplied\n```\n\n----------------------------------------\n\nTITLE: SSH Service Activation Command for Bastion UserData\nDESCRIPTION: Bash command needed to enable SSH service on newer GardenLinux versions where SSH is disabled by default, to be added to the UserData content generated by the gardenlet bastion controller.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/27-cloudprofile-bastion-section.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start ssh\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration in Shoot Spec\nDESCRIPTION: YAML configuration example showing how to configure OpenID Connect authentication in a Shoot cluster specification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\n...\nspec:\n  kubernetes:\n    oidcConfig:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining KubeletConfigReserved struct in Go\nDESCRIPTION: This struct defines reserved resources for daemons in the kubelet configuration. It includes fields for CPU, memory, ephemeral storage, and process IDs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\ntype KubeletConfigReserved struct {\n\tCPU              *resource.Quantity\n\tMemory           *resource.Quantity\n\tEphemeralStorage *resource.Quantity\n\tPID              *resource.Quantity\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Zone Selection\nDESCRIPTION: YAML configuration for node affinity rules to ensure pods run in specific availability zones.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values:\n            - europe-1a\n          # - ...\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Image Configuration\nDESCRIPTION: Shows how to configure images for specific CPU architectures using the architectures field.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/image_vector.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  repository: registry.k8s.io/pause\n  tag: \"3.5\"\n  architectures:\n  - amd64\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  ref: registry.k8s.io/pause:3.5\n  architectures:\n  - arm64\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  ref: registry.k8s.io/pause:3.5\n  architectures:\n  - amd64\n  - arm64\n```\n\n----------------------------------------\n\nTITLE: Memory Swap Configuration Changes for Kubernetes v1.30\nDESCRIPTION: The UnlimitedSwap behavior configuration for kubelet is no longer supported in the specified Shoot configuration paths.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_kubernetes_versions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n.spec.{kubernetes,provider.workers[]}.kubelet.memorySwap.swapBehavior\n```\n\n----------------------------------------\n\nTITLE: Configuring Current OpenVPN Client (vpn-seed) in Gardener Seed Cluster\nDESCRIPTION: This OpenVPN configuration snippet defines the setup for the `vpn-seed` client container, which runs as a sidecar in the seed cluster for components like kube-apiserver and Prometheus in the *current* Gardener VPN solution. It configures the client to connect to the shoot's OpenVPN server via TCP, pull routing information, authenticate using TLS certificates and a TLS auth key, verify the server's certificate, and apply filters to accept only necessary routes (pod, service, node networks) pushed by the server.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md#2025-04-22_snippet_0\n\nLANGUAGE: openvpn\nCODE:\n```\n# use TCP instead of UDP (commonly not supported by load balancers)\nproto tcp-client\n\n[...]\n\n# get all routing information from server\npull\n\ntls-client\nkey \"/srv/secrets/vpn-seed/tls.key\"\ncert \"/srv/secrets/vpn-seed/tls.crt\"\nca \"/srv/secrets/vpn-seed/ca.crt\"\n\ntls-auth \"/srv/secrets/tlsauth/vpn.tlsauth\" 1\ncipher AES-256-CBC\n\n# https://openvpn.net/index.php/open-source/documentation/howto.html#mitm\nremote-cert-tls server\n\n# pull filter\npull-filter accept \"route 100.64.0.0 255.248.0.0\"\npull-filter accept \"route 100.96.0.0 255.224.0.0\"\npull-filter accept \"route 10.1.60.0 255.255.252.0\"\npull-filter accept \"route 192.168.123.\"\npull-filter ignore \"route\"\npull-filter ignore redirect-gateway\npull-filter ignore route-ipv6\npull-filter ignore redirect-gateway-ipv6\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity in Shoot Spec (YAML)\nDESCRIPTION: This YAML snippet illustrates how the `Shoot` specification is extended to reference `WorkloadIdentity` resources. It shows adding a `workloadIdentity.name` field within `spec.extensions` and `spec.dns.providers` sections, allowing specific extensions and DNS providers to use workload identity for authentication instead of secrets.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  extensions:\n    - type: some-extension\n      workloadIdentity:\n        name: foo\n  dns:\n    providers:\n    - type: some-dns-provider\n      workloadIdentity:\n        name: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Objects with NamespacedCloudProfile References - YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Shoot object in Gardener referencing a NamespacedCloudProfile via the new 'cloudProfile' field, specifying its 'kind' and 'name'. It requires the Shoot CRD with extended support for 'cloudProfile' and validates compatibility between Shoot and CloudProfile references. Key parameters include 'spec.cloudProfile.kind' (type of profile) and 'spec.cloudProfile.name' (profile identifier). The input is a Kubernetes YAML manifest; output is an updated Shoot resource in the cluster. Dependencies include support for extended CloudProfile API in Gardener; backward compatibility is maintained by keeping the 'cloudProfileName' field. Limitations: Both fields may need to coexist for migration until full adoption.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nmetadata:\\n  name: my-shoot\\n  namespace: project-xyz\\n  ...\\nspec:\\n  ...\\n  cloudProfile:\\n    kind: NamespacedCloudProfile\\n    name: aws-profile-xyz\\n  ...\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Pool Parameters in Gardener\nDESCRIPTION: Example configuration for a worker pool in Gardener showing how minimum, maximum, maxSurge, maxUnavailable, and zones settings are distributed across availability zones. The values are divided by the number of zones specified for the worker pool.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  provider:\n    workers:\n    - name: ...\n      minimum: 6\n      maximum: 60\n      maxSurge: 3\n      maxUnavailable: 0\n      zones: [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Allowed Resources for Shoot Control Plane Components\nDESCRIPTION: YAML configuration for setting minimum allowed CPU and memory resources for etcd instances and Kubernetes API server in a Shoot cluster. This helps prevent delays during scale-up activities, especially for clusters requiring immediate heavy usage.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/autoscaling-specifics-for-components.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    etcd:\n      main:\n        autoscaling:\n          minAllowed:\n            cpu: \"2\"\n            memory: 6Gi\n      events:\n        autoscaling:\n          minAllowed:\n            cpu: \"1\"\n            memory: 3Gi\n    kubeAPIServer:\n      autoscaling:\n        minAllowed:\n          cpu: \"1\"\n          memory: 3Gi\n```\n\n----------------------------------------\n\nTITLE: Disabling Pod Injection via kubectl for Cluster - Console\nDESCRIPTION: Shows how to disable the environment variable injection for an entire cluster using the 'kubectl' command by labeling the 'Shoot' resource. This method quickly disables injection for all components within the cluster, bypassing individual namespace or pod settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_kubernetes_service_host_injection.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nkubectl label shoot my-cluster alpha.featuregates.shoot.gardener.cloud/apiserver-sni-pod-injector=disable\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterFilter for Extension-specific Log Parsing in Gardener\nDESCRIPTION: Example of a ClusterFilter resource for custom log parsing configuration. This example configures fluent-bit to handle logs from a provider-specific cloud-controller-manager by reusing the existing kube-apiserver-parser.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterFilter\nmetadata:\n  labels:\n    fluentbit.gardener/type: \"seed\"\n  name: cloud-controller-manager-aws-cloud-controller-manager\nspec:\n  filters:\n  - parser:\n      keyName: log\n      parser: kube-apiserver-parser\n      reserveData: true\n  match: kubernetes.*cloud-controller-manager*aws-cloud-controller-manager*\n```\n\n----------------------------------------\n\nTITLE: Configuring an Extension Resource for Provider-Local in Gardener\nDESCRIPTION: An example YAML configuration for an Extension resource that defines the resource kinds and types that the extension handles, references to OCI Helm charts for admission and controller components, and provides configuration values for different deployment contexts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  name: provider-local\nspec:\n  resources:\n  - kind: BackupBucket\n    type: local\n  - kind: BackupEntry\n    type: local\n  - kind: DNSRecord\n    type: local\n  - kind: Infrastructure\n    type: local\n  - kind: ControlPlane\n    type: local\n  - kind: Worker\n    type: local\n  deployment:\n    admission:\n      runtimeCluster:\n        helm:\n          ociRepository:\n            ref: registry.example.com/gardener/extensions/local/admission-runtime:v1.0.0\n      virtualCluster:\n        helm:\n          ociRepository:\n            ref: registry.example.com/gardener/extensions/local/adission-application:v1.0.0\n      values: {}\n    extension:\n      helm:\n          ociRepository:\n            ref: registry.example.com/gardener/extensions/local/extension:v1.0.0\n      values:\n         controllers:\n           dnsrecord:\n             concurrentSyncs: 20\n      runtimeClusterValues:\n        controllers:\n          dnsrecord:\n            concurrentSyncs: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidecar for Seed Grafana in YAML\nDESCRIPTION: This YAML snippet configures a Grafana sidecar for seed environment where it watches and provisions specific labeled dashboards. Similar to shoot Grafana configuration but focused on seed with specified labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n- name: METHOD\n  value: WATCH\n- name: LABEL\n  value: monitoring.gardener.cloud/dashboard-seed\n- name: FOLDER\n  value: /tmp/dashboards\n- name: NAMESPACE\n  value: monitoring,garden\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Releases with Lifecycle in CloudProfile - YAML\nDESCRIPTION: This YAML snippet illustrates how to configure a CloudProfile to schedule future Kubernetes version releases using the lifecycle field. It sets start times for stages such as preview and unsupported, allowing precise version lifecycle control without immediate manual classification updates.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: local\nspec:\n  kubernetes:\n    versions:\n      # if an administrator deploys just the version without any lifecycle,\n      # the reconciler will evaluate the classification status to supported\n      - version: 1.27.0\n\n      # when introducing a new version it doesn't have to contain a deprecation or expiration date\n      - version: 1.28.0\n        lifecycle:\n          - classification: preview\n          - classification: supported\n            startTime: \"2024-12-01T00:00:00Z\"\n\n      # it is not strictly required that every lifecycle stage must occur,\n      # they can also be dropped as long as their general order is maintained\n      - version: 1.18.0\n        lifecycle:\n          - classification: supported\n          - classification: deprecated\n            startTime: \"2022-01-01T00:00:00Z\"\n          - classification: expired\n            startTime: \"2022-06-01T00:00:00Z\"\n\n      # to schedule a new version release, the administrator can define the start times\n      # of all lifecycle events in the future, such that the classification status will\n      # be evaluated to unavailable\n      - version: 2.0.0\n        lifecycle:\n          - classification: preview\n            startTime: \"2036-02-07T06:28:16Z\"\nstatus:\n  kubernetes:\n    versions:\n      - version: 1.27.0\n        classification: supported\n      - version: 1.28.0\n        classification: supported\n      - version: 1.18.0\n        classification: expired\n      - version: 2.0.0\n        classification: unavailable\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Integration Secret for Gardener Dashboard\nDESCRIPTION: Secret configuration for GitHub integration with the Gardener Dashboard. Contains authentication credentials for either token or app-based authentication, and optional webhook configuration for receiving issue updates.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gardener-dashboard-github\n  namespace: garden\ntype: Opaque\nstringData:\n  # This is for GitHub token authentication:\n  authentication.token: <secret>\n  # Alternatively, this is for GitHub app authentication:\n  authentication.appId: <secret>\n  authentication.clientId: <secret>\n  authentication.clientSecret: <secret>\n  authentication.installationId: <secret>\n  authentication.privateKey: <secret>\n  # This is the webhook secret, see explanation below\n  webhookSecret: <secret>\n```\n\n----------------------------------------\n\nTITLE: Vali Index Configuration in YAML\nDESCRIPTION: YAML configuration for Vali's index settings, defining the schema, storage type, and indexing periods for log data storage.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nschema_config:\n  configs:\n  - from: 2018-04-15\n    store: boltdb\n    object_store: filesystem\n    schema: v11\n    index:\n      prefix: index_\n      period: 24h\n```\n\n----------------------------------------\n\nTITLE: TokenReview Request for Authenticating API Server Delegation (JSON)\nDESCRIPTION: This JSON snippet is for TokenReview requests sent by OWA to authenticate a calling API server via its service account token. It does not require application-level dependencies but assumes network access and trust with the upstream API server. The 'spec.token' must carry an API server-issued JWT. Input: the API server's identity token. Output: a TokenReview response indicating authenticated user details. Follows Kubernetes webhook token authentication contract.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"TokenReview\\\": {\\n    \\\"kind\\\": \\\"TokenReview\\\",\\n    \\\"apiVersion\\\": \\\"authentication.k8s.io/v1beta1\\\",\\n    \\\"spec\\\": {\\n      \\\"token\\\": \\\"api-server-token...\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Architecture Diagram with Istio Components\nDESCRIPTION: A text-based diagram showing the integration of Envoy Proxy (Istio Ingress Gateway) and Pilot components in the Seed cluster architecture for SNI-based routing.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------------+\n|                               |\n|           Network LB          | (accessible from clients)\n|                               |\n|                               |\n+-------------+-------+---------+                       +------------------+\n              |       |                                 |                  |\n              |       |            proxy + lb           | Shoot API Server |\n              |       |    +-------------+------------->+                  |\n              |       |    |                            | Cluster A        |\n              |       |    |                            |                  |\n              |       |    |                            +------------------+\n              |       |    |\n     +----------------v----+--+\n     |        |               |\n   +-+--------v----------+    |                         +------------------+\n   |                     |    |                         |                  |\n   |                     |    |       proxy + lb        | Shoot API Server |\n   |    Envoy Proxy      |    +-------------+---------->+                  |\n   | (ingress Gateway)   |    |                         | Cluster B        |\n   |                     |    |                         |                  |\n   |                     +----+                         +------------------+\n   +-----+----------+----+\n         |          |\n         |          |\n         |          |                                   +------------------+\n         |          |                                   |                  |\n         |          |             proxy + lb            | Shoot API Server |\n         |          +-------------------+-------------->+                  |\n         |   get                                        | Cluster C        |\n         | configuration                                |                  |\n         |                                              +------------------+\n         |\n         v                                                  Configure\n      +--+--------------+         +---------------------+   via Istio\n      |                 |         |                     |   Custom Resources\n      |     Pilot       +-------->+   Seed API Server   +<------------------+\n      |                 |         |                     |\n      |                 |         |                     |\n      +-----------------+         +---------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Machine Class and Deployment for Second Availability Zone\nDESCRIPTION: Sample configuration for AWS-specific machine class and deployment resources for the second availability zone (eu-west-1c). This demonstrates how to configure machine resources across multiple zones.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/worker.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: shoot--foo--bar-cpu-worker-z2-5z6as\n  namespace: shoot--foo--bar\n  labels:\n    gardener.cloud/purpose: machineclass\ntype: Opaque\ndata:\n  providerAccessKeyId: eW91ci1hd3MtYWNjZXNzLWtleS1pZAo=\n  providerSecretAccessKey: eW91ci1hd3Mtc2VjcmV0LWFjY2Vzcy1rZXkK\n  userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K\n---\napiVersion: machine.sapcloud.io/v1alpha1\nkind: AWSMachineClass\nmetadata:\n  name: shoot--foo--bar-cpu-worker-z2-5z6as\n  namespace: shoot--foo--bar\nspec:\n  ami: ami-0123456789 # Your controller must map the stated version to the provider specific machine image information, in the AWS case the AMI.\n  blockDevices:\n  - ebs:\n      volumeSize: 20\n      volumeType: gp2\n  iam:\n    name: shoot--foo--bar-nodes\n  keyName: shoot--foo--bar-ssh-publickey\n  machineType: m4.large\n  networkInterfaces:\n  - securityGroupIDs:\n    - sg-1234567890\n    subnetID: subnet-0123a\n  region: eu-west-1\n  secretRef:\n    name: shoot--foo--bar-cpu-worker-z2-5z6as\n    namespace: shoot--foo--bar\n  tags:\n    kubernetes.io/cluster/shoot--foo--bar: \"1\"\n    kubernetes.io/role/node: \"1\"\n---\napiVersion: machine.sapcloud.io/v1alpha1\nkind: MachineDeployment\nmetadata:\n  name: shoot--foo--bar-cpu-worker-z1\n  namespace: shoot--foo--bar\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: shoot--foo--bar-cpu-worker-z1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        name: shoot--foo--bar-cpu-worker-z1\n    spec:\n      class:\n        kind: AWSMachineClass\n        name: shoot--foo--bar-cpu-worker-z2-5z6as\n```\n\n----------------------------------------\n\nTITLE: Recommended Replacement Helper Functions in Go\nDESCRIPTION: Recommended alternative helper functions that address the drawbacks of the deprecated functions. These functions provide safer implementations for patching and updating resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ncontrollerutils.GetAndCreateOrMergePatch\n```\n\nLANGUAGE: go\nCODE:\n```\ncontrollerutils.GetAndCreateOrStrategicMergePatch\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceAdmissionConfiguration Structure - Gardener Go\nDESCRIPTION: Contains settings for resource admission webhooks enforcing size limits and exemption rules on cluster resources. Fields include a list of ResourceLimit objects, a slice of Kubernetes RBAC/v1 Subject objects for exemptions, and an operation mode ('block' or 'log'). This struct is utilized within GardenerAdmissionControllerConfig and supports extensible admission control behaviors.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype ResourceAdmissionConfiguration struct {\n    Limits               []ResourceLimit         `json:\"limits\"`\n    UnrestrictedSubjects []rbacv1.Subject        `json:\"unrestrictedSubjects,omitempty\"`\n    OperationMode        *ResourceAdmissionWebhookMode `json:\"operationMode,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoreDNS Autoscaling Mode Type in Gardener\nDESCRIPTION: Definition of CoreDNSAutoscalingMode type alias that specifies the mode for CoreDNS autoscaling in Shoot clusters. Supported values include 'horizontal' and 'cluster-proportional'.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n<h3 id=\"core.gardener.cloud/v1beta1.CoreDNSAutoscalingMode\">CoreDNSAutoscalingMode\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.CoreDNSAutoscaling\">CoreDNSAutoscaling</a>)\n</p>\n<p>\n<p>CoreDNSAutoscalingMode is a type alias for the Core DNS autoscaling mode string.</p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining BackupEntry CRD for Seed Cluster in YAML\nDESCRIPTION: Specification for the BackupEntry CRD at seed cluster level. This extension resource contains provider-specific details and handles operations specific to each shoot's backup entry.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: BackupEntry\nmetadata:\n  name: shoot--dev--example--3ef42 # Naming convention explained later\n  # No namespace need. This will be a cluster scope resource\nspec:\n  type: aws\n  region: eu-west-1\n  secretRef: # Required for root\n    name: backup-operator-aws\n    namespace: backup-garden\nstatus:\n  observedGeneration: ...\n  state: ...\n  lastError: ..\n  lastOperation: ...\n```\n\n----------------------------------------\n\nTITLE: Extension Resource Configuration in YAML\nDESCRIPTION: Configuration example for an Extension resource showing how to define resources with lifecycle management options, reconciliation timeout, and global enablement settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  name: extension-foo\nspec:\n  resources:\n  - kind: Extension\n    type: foo\n    primary: true\n    globallyEnabled: true\n    reconcileTimeout: 30s\n    lifecycle:\n      reconcile: AfterKubeAPIServer\n      delete: BeforeKubeAPIServer\n      migrate: BeforeKubeAPIServer\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Units and Files in OperatingSystemConfig Status\nDESCRIPTION: Example of how to add extension units and files to the OperatingSystemConfig status. The gardener-node-agent will merge these with the spec units and files when applying the configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  extensionUnits:\n  - name: my-custom-service.service\n    command: start\n    enable: true\n    content: |\n      [Unit]\n      // some systemd unit content\n  extensionFiles:\n  - path: /etc/some/file\n    permissions: 0644\n    content:\n      inline:\n        data: some-file-content\n  lastOperation:\n    description: Successfully generated cloud config\n    lastUpdateTime: \"2019-01-23T07:45:23Z\"\n    progress: 100\n    state: Succeeded\n    type: Reconcile\n  observedGeneration: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Access for Shoot Prometheus Scraping\nDESCRIPTION: Annotation configuration for Services to allow network traffic from the shoot-specific Prometheus instance to scrape metrics from pods. This is deployed as part of the shoot reconciliation flow.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/from-all-scrape-targets-allowed-ports: '[{\"port\":<metrics-port-on-pod>,\"protocol\":\"<protocol, typically TCP>\"}]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster-Proportional DNS Autoscaling in Gardener\nDESCRIPTION: This YAML snippet demonstrates how to configure cluster-proportional autoscaling for CoreDNS in a Gardener shoot cluster. To enable this, set `spec.systemComponents.coreDNS.autoscaling.mode` to `cluster-proportional`. This change is made in the `Shoot` resource configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/dns-autoscaling.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\\nspec:\\n  ...\\n  systemComponents:\\n    coreDNS:\\n      autoscaling:\\n        mode: cluster-proportional\\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Whitelists in Prometheus Values Configuration\nDESCRIPTION: Shows how to maintain a whitelist of allowed metrics for a component in the Prometheus values.yaml file. This configuration specifies which metrics should be retained during scraping.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/monitoring-stack.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallowedMetrics:\n  ...\n  exampleComponent:\n  * metrics_name_1\n  * metrics_name_2\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed DNS and Ingress in YAML\nDESCRIPTION: YAML configuration for setting up DNS provider and Ingress controller in a Seed resource. This is a required configuration for every seed cluster to distribute external requests to internal components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  dns:\n    provider:\n      type: aws-route53\n      secretRef:\n        name: ingress-secret\n        namespace: garden\n  ingress:\n    domain: ingress.my-seed.example.com\n    controller:\n      kind: nginx\n      providerConfig:\n        <some-optional-provider-specific-config-for-the-ingressController>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Federation for Shoot Metrics\nDESCRIPTION: YAML configuration for setting up federation in an external Prometheus instance to collect metrics from a shoot's Prometheus. This includes authentication, target configuration, and metric selection.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: 'gardener-federation'\n    honor_labels: true\n    metrics_path: '/federate'\n    params:\n      'match[]':\n        - '{job=\"kube-apiserver\"}'\n    scheme: https\n    basic_auth:\n      username: '<prometheus-username>'\n      password: '<prometheus-password>'\n    static_configs:\n      - targets:\n        - '<prometheus-url>'\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Registry Pull Secret in Gardener\nDESCRIPTION: Example YAML configuration for creating a Kubernetes secret that contains Docker registry credentials, which can be referenced by ControllerDeployments to pull OCI Helm charts from private registries.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-pull-secret\n  namespace: garden\n  labels:\n    gardener.cloud/role: helm-pull-secret\ntype: kubernetes.io/dockerconfigjson\ndata:\n  .dockerconfigjson: <base64-encoded-docker-config-json>\n```\n\n----------------------------------------\n\nTITLE: ServiceMonitor Configuration for Prometheus - YAML\nDESCRIPTION: This YAML snippet specifies a ServiceMonitor resource in a shoot cluster. It enables Prometheus to scrape metrics from designated services based on labels. The dependencies include an existing Prometheus setup managed by Prometheus Operator. Important parameters include the 'namespace', 'endpoints', and 'selector' labels for target identification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    monitoring.gardener.cloud/monitoring-target: shoot-control-plane\n  name: prometheus-job\n  namespace: shoot--project--name\nspec:\n  endpoints:\n  - port: metrics\n  selector:\n    matchLabels:\n      app: prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining a CloudProfile with Expiration Dates - YAML\nDESCRIPTION: This snippet demonstrates a basic CloudProfile configuration where Kubernetes versions are classified with potential expiration dates. It shows how versions can be labeled as supported or deprecated, with expiration management to automate status transitions over time.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: local\nspec:\n  kubernetes:\n    versions:\n      - version: 1.26.0\n        classification: supported\n        expirationDate: \"2024-06-01T00:00:00Z\"\n      - version: 1.27.0\n        classification: deprecated\n      - version: 1.28.0\n        classification: supported\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Machine Class and Deployment for First Availability Zone\nDESCRIPTION: Sample configuration for AWS-specific machine class and deployment resources for the first availability zone (eu-west-1b). The machine class contains provider-specific configuration for AWS EC2 instances.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/worker.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: shoot--foo--bar-cpu-worker-z1-3db65\n  namespace: shoot--foo--bar\n  labels:\n    gardener.cloud/purpose: machineclass\ntype: Opaque\ndata:\n  providerAccessKeyId: eW91ci1hd3MtYWNjZXNzLWtleS1pZAo=\n  providerSecretAccessKey: eW91ci1hd3Mtc2VjcmV0LWFjY2Vzcy1rZXkK\n  userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K\n---\napiVersion: machine.sapcloud.io/v1alpha1\nkind: AWSMachineClass\nmetadata:\n  name: shoot--foo--bar-cpu-worker-z1-3db65\n  namespace: shoot--foo--bar\nspec:\n  ami: ami-0123456789 # Your controller must map the stated version to the provider specific machine image information, in the AWS case the AMI.\n  blockDevices:\n  - ebs:\n      volumeSize: 20\n      volumeType: gp2\n  iam:\n    name: shoot--foo--bar-nodes\n  keyName: shoot--foo--bar-ssh-publickey\n  machineType: m4.large\n  networkInterfaces:\n  - securityGroupIDs:\n    - sg-1234567890\n    subnetID: subnet-01234\n  region: eu-west-1\n  secretRef:\n    name: shoot--foo--bar-cpu-worker-z1-3db65\n    namespace: shoot--foo--bar\n  tags:\n    kubernetes.io/cluster/shoot--foo--bar: \"1\"\n    kubernetes.io/role/node: \"1\"\n---\napiVersion: machine.sapcloud.io/v1alpha1\nkind: MachineDeployment\nmetadata:\n  name: shoot--foo--bar-cpu-worker-z1\n  namespace: shoot--foo--bar\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: shoot--foo--bar-cpu-worker-z1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        name: shoot--foo--bar-cpu-worker-z1\n    spec:\n      class:\n        kind: AWSMachineClass\n        name: shoot--foo--bar-cpu-worker-z1-3db65\n```\n\n----------------------------------------\n\nTITLE: Defining Control Plane Worker Pool in Shoot API\nDESCRIPTION: YAML snippet showing how to define a worker pool for the control plane in the Shoot API, which distinguishes autonomous shoot clusters from regular ones.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    workers:\n    - name: control-plane\n      controlPlane: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrapeConfig for Shoot Cluster Components in Gardener\nDESCRIPTION: Example of a ScrapeConfig resource that allows Prometheus to scrape metrics from components running in the shoot cluster via kube-apiserver proxy. This configuration includes authentication, TLS configuration, and relabeling rules.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1alpha1\nkind: ScrapeConfig\nmetadata:\n  labels:\n    prometheus: shoot\n  name: shoot-my-cluster-component\n  namespace: shoot--foo--bar\nspec:\n  authorization:\n    credentials:\n      name: shoot-access-prometheus-shoot\n      key: token\n  scheme: HTTPS\n  tlsConfig:\n    ca:\n      secret:\n        name: <name-of-ca-bundle-secret>\n        key: bundle.crt\n  kubernetesSDConfigs:\n  - apiServer: https://kube-apiserver\n    authorization:\n      credentials:\n        name: shoot-access-prometheus-shoot\n        key: token\n    followRedirects: true\n    namespaces:\n      names:\n      - kube-system\n    role: endpoints\n    tlsConfig:\n      ca:\n        secret:\n          name: <name-of-ca-bundle-secret>\n          key: bundle.crt\n      cert: {}\n  metricRelabelings:\n  - sourceLabels:\n    - __name__\n    action: keep\n    regex: ^(metric1|metric2)$\n  - sourceLabels:\n    - namespace\n    action: keep\n    regex: kube-system\n  relabelings:\n  - action: replace\n    replacement: my-cluster-component\n    targetLabel: job\n  - sourceLabels: [__meta_kubernetes_service_name, __meta_kubernetes_pod_container_port_name]\n    separator: ;\n    regex: my-component-service;metrics\n    replacement: $1\n    action: keep\n  - sourceLabels: [__meta_kubernetes_endpoint_node_name]\n    separator: ;\n    regex: (.*)\n    targetLabel: node\n    replacement: $1\n    action: replace\n  - sourceLabels: [__meta_kubernetes_pod_name]\n    separator: ;\n    regex: (.*)\n    targetLabel: pod\n    replacement: $1\n    action: replace\n  - targetLabel: __address__\n    replacement: kube-apiserver:443\n  - sourceLabels: [__meta_kubernetes_pod_name, __meta_kubernetes_pod_container_port_number]\n    separator: ;\n    regex: (.+);(.+)\n    targetLabel: __metrics_path__\n    replacement: /api/v1/namespaces/kube-system/pods/${1}:${2}/proxy/metrics\n    action: replace\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plutono Dashboards for Shoot Clusters\nDESCRIPTION: Example of creating a ConfigMap with custom Plutono dashboard configurations. The ConfigMap should be labeled with 'dashboard.monitoring.gardener.cloud/shoot: \"true\"' to be detected by Gardener's monitoring stack.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    dashboard.monitoring.gardener.cloud/shoot: \"true\"\n  name: extension-foo-my-custom-dashboard\n  namespace: shoot--project--name\ndata:\n  my-custom-dashboard.json: <dashboard-JSON-document>\n```\n\n----------------------------------------\n\nTITLE: Merging Scheduling Instructions for Shoot and ExposureClass in YAML\nDESCRIPTION: This example illustrates the merge of scheduling instructions between a Shoot and an ExposureClass. The Shoot references an ExposureClass, and their respective seedSelectors are combined. The result influences the Gardener Scheduler's decision. Any mismatch in the Seed's capability to handle the ExposureClass handler may cause scheduling errors.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/exposureclasses.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: abc\n  namespace: garden-dev\nspec:\n  exposureClassName: abc\n  seedSelectors:\n    matchLabels:\n      env: prod\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: ExposureClass\nmetadata:\n  name: abc\nhandler: abc\nscheduling:\n  seedSelector:\n    matchLabels:\n      network: internal\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVPN Multiple Connection Endpoints\nDESCRIPTION: OpenVPN configuration demonstrating multiple connection endpoints for high availability. The configuration allows connecting to two different UDP endpoints on port 1194 sequentially for redundancy.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md#2025-04-22_snippet_4\n\nLANGUAGE: conf\nCODE:\n```\n<connection>\nremote 192.168.45.3 1194 udp\n</connection>\n\n<connection>\nremote 192.168.47.34 1194 udp\n</connection>\n```\n\n----------------------------------------\n\nTITLE: Defining KubernetesDashboard struct in Go\nDESCRIPTION: This struct defines configuration values for the Kubernetes dashboard addon. It embeds the Addon struct and includes a field for authentication mode.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\ntype KubernetesDashboard struct {\n\tAddon\n\tAuthenticationMode *string\n}\n```\n\n----------------------------------------\n\nTITLE: Gardenadm Join Command-Specific Options in Bash\nDESCRIPTION: This snippet shows the command-specific options for 'gardenadm join'. Currently, it only includes the help flag (-h or --help) to display help information for the command.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_join.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for join\n```\n\n----------------------------------------\n\nTITLE: Example Helm Chart Values Structure for Controller Installations in Gardenlet\nDESCRIPTION: The YAML structure showing the values that are passed to Helm charts when deploying extension controllers. The values include information about the Gardener environment, feature gates, and seed cluster details.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/gardenlet.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngardener:\n  version: <gardenlet-version>\n  garden:\n    clusterIdentity: <identity-of-garden-cluster>\n    genericKubeconfigSecretName: <secret-name>\n  gardenlet:\n    featureGates:\n      Foo: true\n      Bar: false\n      # ...\n  seed:\n    name: <seed-name>\n    clusterIdentity: <identity-of-seed-cluster>\n    annotations: <seed-annotations>\n    labels: <seed-labels>\n    spec: <seed-specification>\n```\n\n----------------------------------------\n\nTITLE: Applying Test Labels with Different Test Frameworks in Golang\nDESCRIPTION: Example code demonstrating how to apply different test labels using the Common Framework, Shoot Framework, and Gardener Framework for consistent labeling across test machinery tests.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\nf := framework.NewCommonFramework()\nf.Default().Serial().It(\"my test\") => \"[DEFAULT] [SERIAL] my test\"\n\nf := framework.NewShootFramework()\nf.Default().Serial().It(\"my test\") => \"[DEFAULT] [SERIAL] [SHOOT] my test\"\n\nf := framework.NewGardenerFramework()\nf.Default().Serial().It(\"my test\") => \"[DEFAULT] [GARDENER] [SERIAL] my test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Resource with Source Store for Migration in Kubernetes\nDESCRIPTION: This YAML configuration demonstrates the Etcd resource structure used during shoot control plane migration, specifying both the destination and source backup stores. It enables the backup-restore container to access snapshots from both the source and destination backup containers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/17-shoot-control-plane-migration-bad-case.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  backup:\n    ...\n    store:\n      container: 408740b8-6491-415e-98e6-76e92e5956ac\n      secretRef:\n        name: etcd-backup\n      ...\n    sourceStore:\n      container: d1435fea-cd5e-4d5b-a198-81f4025454ff\n      secretRef:\n        name: source-etcd-backup\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining MachineImages struct in Go\nDESCRIPTION: MachineImages is a mapping from logical names to a list of versions with provider-specific identifiers. It is used in the CloudProfileConfig to define available machine images.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/provider-local.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype MachineImages struct {\n    Name     string                `json:\"name\"`\n    Versions []MachineImageVersion `json:\"versions\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DefaultSeccompProfile Feature Gate in Gardenlet - YAML\nDESCRIPTION: This example YAML snippet shows how to enable the 'DefaultSeccompProfile' feature gate in the gardenlet component configuration to allow the webhook-based seccomp profile mutation in Gardener-managed seed clusters. The 'featureGates' section must include 'DefaultSeccompProfile: true' for this capability. Prerequisites include access to the gardenlet configuration and appropriate Gardener privileges. Once enabled, newly created pods will default to the RuntimeDefault seccomp profile unless otherwise excluded by label or explicit profile setting. Output is an updated gardenlet component configuration; be aware that this feature is in Alpha and may be unstable.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/default_seccomp_profile.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nfeatureGates:\n  DefaultSeccompProfile: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor with Shoot Access Token in YAML\nDESCRIPTION: Example of configuring a ServiceMonitor using the shoot-access-prometheus-shoot secret for authorization and optional TLS configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  authorization:\n    credentials:\n      name: shoot-access-prometheus-shoot\n      key: token\n  # in case the component's server certificate is signed by the cluster CA:\n  scheme: HTTPS\n  tlsConfig:\n    ca:\n      secret:\n        name: <name-of-ca-bundle-secret>\n        key: bundle.crt\n```\n\n----------------------------------------\n\nTITLE: Mutating Pod Topology Spread Constraints in YAML\nDESCRIPTION: This snippet demonstrates how the Pod Topology Spread Constraints webhook modifies the pod specification by adding a labelSelector to the topologySpreadConstraints. It adds the 'pod-template-hash' label to the constraint's labelSelector to ensure proper distribution of pods across nodes and zones.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  labels:\n    pod-template-hash: 123abc\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: topology.kubernetes.io/zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        pod-template-hash: 123abc # added by webhook\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Kubeconfig Secret in Gardenlet Values\nDESCRIPTION: YAML configuration for the gardenClientConnection.bootstrapKubeconfig section in the gardenlet configuration. This specifies where the bootstrap kubeconfig should be stored and provides the kubeconfig content.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngardenClientConnection:\n  bootstrapKubeconfig:\n    name: gardenlet-kubeconfig-bootstrap\n    namespace: garden\n    kubeconfig: |\n      <bootstrap-kubeconfig>  # will be base64 encoded by helm\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Access for Prometheus Scraping in Garden Namespace\nDESCRIPTION: Annotation configuration for Services to allow network traffic from Prometheus instances in the garden namespace to scrape metrics from pods. This enables the required network access for monitoring while maintaining security through NetworkPolicies.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/from-all-garden-scrape-targets-allowed-ports: '[{\"port\":<metrics-port-on-pod>,\"protocol\":\"<protocol, typically TCP>\"}]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Dashboards in Gardener with Plutono YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a ConfigMap in the 'garden' namespace for custom dashboards with Plutono. The ConfigMap needs to be labeled appropriately to be recognized by the gardener operator. The JSON data for the dashboard should replace the placeholder '<dashboard-JSON-document>'. Required dependencies include Kubernetes and the gardener-operator. It has the limitation of requiring specific labeling for the ConfigMap to be processed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    dashboard.monitoring.gardener.cloud/garden: \"true\"\n  name: my-custom-dashboard\n  namespace: garden\ndata:\n  my-custom-dashboard.json: <dashboard-JSON-document>\n```\n\n----------------------------------------\n\nTITLE: Force In-Place Worker Pool Update in Gardener\nDESCRIPTION: Command to force an update for worker pools using AutoInPlaceUpdate or ManualInPlaceUpdate strategies via gardener.cloud/operation=force-in-place-update annotation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_operations.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n garden-<project-name> annotate shoot <shoot-name> gardener.cloud/operation=force-in-place-update\n```\n\n----------------------------------------\n\nTITLE: Defining DNSRecord Resource in Kubernetes\nDESCRIPTION: Specification for DNS record management including record type, values, TTL and zone configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: DNSRecord\nmetadata:\n  # Kubernetes standard metadata\nspec:\n  name: string\n  recordType: string\n  values: []\n  ttl: number\n  zone: string\n  region: string\n```\n\n----------------------------------------\n\nTITLE: Creating a ControllerInstallation in Gardener\nDESCRIPTION: Example YAML configuration for a ControllerInstallation resource that instructs Gardener to deploy a specific extension controller on a particular seed cluster, linking the deployment and registration information with the target seed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: ControllerInstallation\nmetadata:\n  name: provider-local\nspec:\n  deploymentRef:\n    name: provider-local\n  registrationRef:\n    name: provider-local\n  seedRef:\n    name: local-1\n```\n\n----------------------------------------\n\nTITLE: Storage Configuration Example\nDESCRIPTION: Configuration for storage resources including capacity and storage class settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncapacity: \"10Gi\"\nclassName: \"standard\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Credentials Rotation in Shoot Cluster\nDESCRIPTION: Command to start the rotation of all credentials in a Shoot cluster by adding the rotate-credentials-start annotation. This triggers the first phase of the rotation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-credentials-start\n```\n\n----------------------------------------\n\nTITLE: Defining KubeletConfigEvictionSoftGracePeriod struct in Go\nDESCRIPTION: This struct defines grace periods for kubelet eviction thresholds. It includes fields for memory, image filesystem, and node filesystem availability and inode limits.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\ntype KubeletConfigEvictionSoftGracePeriod struct {\n\tMemoryAvailable     *metav1.Duration\n\tImageFSAvailable    *metav1.Duration\n\tImageFSInodesFree   *metav1.Duration\n\tNodeFSAvailable     *metav1.Duration\n\tNodeFSInodesFree    *metav1.Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor with Credentials in YAML\nDESCRIPTION: Example of configuring a ServiceMonitor with credentials for accessing the metrics endpoint of a component.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  authorization:\n    credentials:\n      name: <name-of-secret-containing-credentials>\n      key: <data-keyin-secret>\n```\n\n----------------------------------------\n\nTITLE: Shoot-Specific Envoy Filter Configuration\nDESCRIPTION: YAML configuration for FilterChainMatch setup specific to individual Shoot clusters\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nmetadata:\n  name: <shoot-namespace>\n  namespace: istio-system\nspec:\n  workloadSelector:\n    labels:\n      istio: ingressgateway\n  configPatches:\n  - applyTo: FILTER_CHAIN\n    match:\n      context: ANY\n      listener:\n        portNumber: 8443\n        name: 0.0.0.0_8443\n    patch:\n      operation: ADD\n      value:\n        filters:\n        - name: envoy.filters.network.tcp_proxy\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n            stat_prefix: outbound|443||kube-apiserver.<shoot-namespace>.svc.cluster.local\n            cluster: outbound|443||kube-apiserver.<shoot-namespace>.svc.cluster.local\n        filter_chain_match:\n          destination_port: 443\n          prefix_ranges:\n          - address_prefix: 10.1.2.3 # kube-apiserver's cluster-ip\n            prefix_len: 32\n```\n\n----------------------------------------\n\nTITLE: Disabling Pod Injection for Specific Pods - YAML\nDESCRIPTION: Demonstrates how to prevent the 'KUBERNETES_SERVICE_HOST' environment variable injection for specific pods by labeling the pod with 'apiserver-proxy.networking.gardener.cloud/inject: disable'. This is useful when DNS is disabled for the pod, but it still needs to communicate with the kube-apiserver.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_kubernetes_service_host_injection.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n        apiserver-proxy.networking.gardener.cloud/inject: disable\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Defining AdmissionDeploymentSpec Struct in Go\nDESCRIPTION: AdmissionDeploymentSpec contains the deployment specification for the admission controller of an extension. It defines fields for runtime and virtual cluster deployments, as well as deployment values.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype AdmissionDeploymentSpec struct {\n  RuntimeCluster *DeploymentSpec `json:\"runtimeCluster,omitempty\"`\n  VirtualCluster *DeploymentSpec `json:\"virtualCluster,omitempty\"`\n  Values *apiextensionsv1.JSON `json:\"values,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Client Sidecar for Cluster Communication\nDESCRIPTION: This approach attaches a proxy-client sidecar to each component needing shoot cluster access. It requires IP table rules to redirect traffic. Downsides include increased maintenance effort and potential interaction issues with other sidecars, such as those managed by Istio.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/11-apiserver-network-proxy.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPrometheus Pod (Prometheus -> Proxy) <-> Proxy-Server <--- internet <--- Proxy-Agent --> Pods | Nodes | Services\n```\n\n----------------------------------------\n\nTITLE: NetworkPolicy Changes for Kubernetes v1.33\nDESCRIPTION: A new deny-all NetworkPolicy is deployed in kube-system namespace. Shoot owners must explicitly configure Ingress and Egress traffic policies for workloads in kube-system.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_kubernetes_versions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nA new `deny-all` `NetworkPolicy` is deployed into the `kube-system` namespace\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Project Manifest in Gardener\nDESCRIPTION: Refers to an example Project manifest that shows how to create a project for grouping multiple shoot clusters and managing user collaboration with admin or viewer roles.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/05-project-dev.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Options for Grafana Dashboards in Gardener\nDESCRIPTION: Standard time configuration for Grafana dashboards in the Gardener project. This snippet shows how to set up default time ranges, refresh intervals, and time selection options for consistent time-based navigation across dashboards.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/monitoring-stack.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"time\": {\n    \"from\": \"now-1h\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": [\n      \"30s\",\n      \"1m\",\n      \"5m\"\n    ],\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"10d\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying DNS TXT Record for Seed Information in Gardener\nDESCRIPTION: Example showing how to query the DNS TXT record that contains information about which Seed is responsible for a particular Shoot cluster. This record is used to determine control plane location.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndig -t txt aws-01.core.garden.example.com\n\n...\n;; ANSWER SECTION:\naws-01.core.garden.example.com. 120 IN\tTXT \"Seed=seed-01\"\n...\n```\n\n----------------------------------------\n\nTITLE: WorkloadIdentity Resource Structure\nDESCRIPTION: Kubernetes custom resource definition for WorkloadIdentity that allows workloads to be presented before external systems using JWT tokens issued by the Gardener API server.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/security.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.gardener.cloud/v1alpha1\nkind: WorkloadIdentity\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  audiences:\n    # List of intended JWT recipients\n  targetSystem:\n    type: string\n    providerConfig:\n      # Optional provider configuration\n```\n\n----------------------------------------\n\nTITLE: Custom RBAC for Restricting Special Fields\nDESCRIPTION: ClusterRole definition implementing custom RBAC verbs to control which users can modify sensitive fields in NamespacedCloudProfiles like 'kubernetes' and 'machineImages'.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: namespaced-cloud-profile-modify-special-fields\nrules:\n  - apiGroups: [\"core.gardener.cloud\"]\n    resources: [\"namespacedcloudprofiles\"]\n    verbs: [\"modify-spec-kubernetes\", \"modify-spec-machineImages\"]\n```\n\n----------------------------------------\n\nTITLE: Combining Event Recording and Logging in Go\nDESCRIPTION: Example of using both structured logging and event recording for important actions, as event recorders alone don't provide well-structured logs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlog.Info(\"Creating ManagedSeed\", \"replica\", r.GetObjectKey())\na.recorder.Eventf(managedSeedSet, corev1.EventTypeNormal, EventCreatingManagedSeed, \"Creating ManagedSeed %s\", r.GetFullName())\n```\n\n----------------------------------------\n\nTITLE: Pod Anti-Affinity Rule for Single-Zone Setup\nDESCRIPTION: This YAML snippet configures pod anti-affinity to ensure that each pod is scheduled onto a different node within the same zone. This is crucial for control plane components like etcd that require node-level redundancy.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            <labels>\n        topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Artifacts for E2E Test Debugging with gsutil\nDESCRIPTION: Command to copy all artifacts from a Gardener e2e test job to a local directory using gsutil. This allows for local searching and filtering of logs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngsutil cp -r gs://gardener-prow/pr-logs/pull/gardener_gardener/6136/pull-gardener-e2e-kind/1542030416616099840/artifacts/gardener-local-control-plane /tmp\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Ports in Kubernetes - YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Service named 'gardener-resource-manager' which selects pods using specific labels and specifies a port configuration for communication. This configuration serves to establish network policies for the service.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: gardener-resource-manager\n  namespace: a\nspec:\n  selector:\n    app: gardener-resource-manager\n  ports:\n  - name: server\n    port: 443\n    protocol: TCP\n    targetPort: 10250\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Gardenlet with Helm in Bash\nDESCRIPTION: This Bash command demonstrates how to deploy the gardenlet Helm chart to a Kubernetes cluster. It specifies the namespace, values file, and waits for the deployment to complete.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm install gardenlet charts/gardener/gardenlet \\\n  --namespace garden \\\n  -f gardenlet-values.yaml \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Applying a Shoot Resource - Console\nDESCRIPTION: Shows how to use 'kubectl' to apply the Shoot YAML manifest to the cluster. Requires the 'shoot.yaml' file and sufficient privileges. Input is the manifest; output is creation of a new Shoot in the specified namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -f shoot.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Adding AWS-specific Flags to Kube Controller Manager in YAML\nDESCRIPTION: This YAML snippet shows additional flags that an AWS controller adds to the kube-controller-manager deployment to make the cluster functional with AWS-specific configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n        - --cloud-provider=external\n        - --external-cloud-volume-plugin=aws\n        - --cloud-config=/etc/kubernetes/cloudprovider/cloudprovider.conf\n```\n\n----------------------------------------\n\nTITLE: Registering a New OpenIDConnect Resource (YAML CRD Manifest)\nDESCRIPTION: This YAML snippet defines how an administrator registers a new OpenIDConnect resource using a Custom Resource Definition (CRD) for dynamic OIDC provider integration. It requires the CRD installed in the Kubernetes cluster for apiVersion: authentication.gardener.cloud/v1alpha1. Key parameters specify issuer URL, client ID, claim mappings, supported algorithms, and caBundle for TLS trust. Input: configuration values for a new IDP. Output: triggers OWA watcher logic for discovery and authentication wiring. YAML must be applied with 'kubectl apply -f ...' and CRD definitions must pre-exist.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: authentication.gardener.cloud/v1alpha1\\nkind: OpenIDConnect\\nmetadata:\\n  name: foo\\nspec:\\n  issuerURL: https://foo.bar\\n  clientID: some-client-id\\n  usernameClaim: email\\n  usernamePrefix: \\\"test-\\\"\\n  groupsClaim: groups\\n  groupsPrefix: \\\"baz-\\\"\\n  supportedSigningAlgs:\\n  - RS256\\n  requiredClaims:\\n    baz: bar\\n  caBundle: LS0tLS1CRUdJTiBDRVJU...base64-encoded CA certs for issuerURL.\\n\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfileSpec struct in Go\nDESCRIPTION: The CloudProfileSpec struct defines the specification for a cloud profile in Gardener. It includes fields for CA bundle, Kubernetes settings, machine images, machine types, volumes, regions, and other cloud-specific properties.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ntype CloudProfileSpec struct {\n\tCABundle       string              `json:\"caBundle,omitempty\"`\n\tKubernetes     KubernetesSettings  `json:\"kubernetes\"`\n\tMachineImages  []MachineImage      `json:\"machineImages\"`\n\tMachineTypes   []MachineType       `json:\"machineTypes\"`\n\tVolumeTypes    []VolumeType        `json:\"volumeTypes,omitempty\"`\n\tRegions        []Region            `json:\"regions\"`\n\tVolumeTypesConstraints *VolumeTypesConstraints `json:\"volumeTypesConstraints,omitempty\"`\n\tSeedSelector   *SeedSelector       `json:\"seedSelector,omitempty\"`\n\tProviderConfig *runtime.RawExtension `json:\"providerConfig,omitempty\"`\n\tType           string              `json:\"type\"`\n\tCapabilities   []CapabilityDefinition `json:\"capabilities,omitempty\"`\n\tBastion        *Bastion            `json:\"bastion,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Topology Spread Constraints\nDESCRIPTION: YAML configuration for spreading replicas across different availability zones with topology constraints.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - topologyKey: topology.kubernetes.io/zone\n    minDomains: 2 # lower value of max replicas or number of zones\n    maxSkew: 1\n    whenUnsatisfiable: DoNotSchedule\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Defining DNS Struct in Go\nDESCRIPTION: DNS holds information about DNS settings. It includes a field for specifying external domains of the virtual garden cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype DNS struct {\n  Domains []DNSDomain `json:\"domains\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Image Vector Overwrite Configuration\nDESCRIPTION: Demonstrates how to overwrite default image configurations with custom registry settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/image_vector.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  repository: my-custom-image-registry/pause\n  tag: \"3.4\"\n  version: \"1.20.x\"\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  ref: my-custom-image-registry/pause:3.5\n  version: \">= 1.21\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Service Account Issuer Secret in YAML\nDESCRIPTION: Example YAML configuration for the Shoot Service Account Issuer secret, containing the configuration needed to centrally configure gardenlets for implementing GEP-24.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/10-secret-shoot-service-account-issuer.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Node Systemd Service Logging\nDESCRIPTION: Configuration to enable collection of logs from systemd services running on Shoot nodes. This can be configured per shoot purpose, excluding 'testing' purpose which prevents logging stack installation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/configuring_logging.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  enabled: true\n  shootNodeLogging:\n    shootPurposes:\n    - \"evaluation\"\n    - \"deployment\"\n```\n\n----------------------------------------\n\nTITLE: Installing yq on macOS\nDESCRIPTION: Command to install yq, a command-line YAML processor, on macOS using Homebrew.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install yq\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultSpec Structure in Go\nDESCRIPTION: This code defines the DefaultSpec structure, which contains common specification fields used by all Gardener extension resources. It includes fields for resource type, class, and provider configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype DefaultSpec struct {\n\tType           string\n\tClass          ExtensionClass\n\tProviderConfig runtime.RawExtension\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Annotations for Seed Prometheus\nDESCRIPTION: Annotation configuration required for pods in extension namespaces to be scraped by the Seed Prometheus. These annotations specify that the pod should be scraped, which port to scrape from, and the name to use for the metrics.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/scrape=true\nprometheus.io/port=<port>\nprometheus.io/name=<name>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Access in Shoot Resource\nDESCRIPTION: Example YAML configuration showing how to disable SSH access for worker nodes through the .spec.provider.workersSettings.sshAccess field in a Shoot resource. When disabled, this prevents SSH connections, removes Bastion resources, and stops related services.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_workers_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    workersSettings:\n      sshAccess:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Kubeconfig in YAML\nDESCRIPTION: YAML configuration for creating a bootstrap kubeconfig that uses the bootstrap token to authenticate with the garden cluster. This kubeconfig is used during the initial bootstrapping process of the gardenlet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\ncurrent-context: gardenlet-bootstrap@default\nclusters:\n- cluster:\n    certificate-authority-data: <ca-of-garden-cluster>\n    server: https://<endpoint-of-garden-cluster>\n  name: default\ncontexts:\n- context:\n    cluster: default\n    user: gardenlet-bootstrap\n  name: gardenlet-bootstrap@default\nusers:\n- name: gardenlet-bootstrap\n  user:\n    token: <bootstrap-token>\n```\n\n----------------------------------------\n\nTITLE: Sample Gardener Workload Identity JWT Payload Structure\nDESCRIPTION: Example JSON structure showing the payload format of a Gardener workload identity JWT token. Includes standard JWT claims and Gardener-specific claims under the gardener.cloud namespace containing contextual information about the workload, shoot, project, and seed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"aud\": [\n        \"service-foo-provider-bar\"\n    ],\n    \"exp\": 1707315742,\n    \"iat\": 1707312142,\n    \"nbf\": 1707312142,\n    \"iss\": \"https://workload-identity.gardener-local.gardener.cloud\",\n    \"sub\": \"gardener.cloud:workloadidentity:<workloadidentity-namespace>:<workloadidentity-name>:<workloadidentity-uid>\",\n    \"gardener.cloud\": {\n        \"workloadIdentity\": {\n            \"name\": \"<workloadidentity-name>\",\n            \"namespace\": \"<workloadidentity-namespace>\",\n            \"uid\": \"<workloadidentity-uid>\"\n        },\n        \"shoot\": {\n            \"name\": \"<shoot-name>\",\n            \"namespace\": \"<shoot-namespace>\",\n            \"uid\": \"<shoot-uid>\"\n        },\n        \"project\": {\n            \"name\": \"<project-name>\",\n            \"uid\": \"<project-uid>\"\n        },\n        \"seed\": {\n            \"name\": \"<seed-name>\",\n            \"uid\": \"<seed-uid>\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gardener NetworkPolicy Controller for Ingress Watching (YAML)\nDESCRIPTION: Provides a YAML configuration snippet for the Gardener NetworkPolicy controller, typically part of a larger component configuration. It enables the controller (`enabled: true`) and specifies the namespace (`default`) and pod labels (`foo: bar`) of the Ingress controller pods to watch (`ingressControllerSelector`), allowing automatic NetworkPolicy creation for Ingress backends.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ncontrollers:\n  networkPolicy:\n    enabled: true\n    concurrentSyncs: 5\n  # namespaceSelectors:\n  # - matchLabels:\n  #     kubernetes.io/metadata.name: default\n    ingressControllerSelector:\n      namespace: default\n      podSelector:\n        matchLabels:\n          foo: bar\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfileConfig struct in Go\nDESCRIPTION: CloudProfileConfig contains provider-specific configuration embedded in Gardener's CloudProfile resource. It includes a list of machine images with logical names and versions mapped to provider-specific identifiers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/provider-local.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CloudProfileConfig struct {\n    metav1.TypeMeta `json:\",inline\"`\n    MachineImages []MachineImages `json:\"machineImages\"`\n}\n```\n\n----------------------------------------\n\nTITLE: CoreDNS Configuration\nDESCRIPTION: CoreDNS configuration for handling DNS resolution when ExternalName is supported\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndefault.svc.cluster.local.:8053 {\n    file kubernetes.default.svc.cluster.local\n}\n\n.:8053 {\n    errors\n    health\n    kubernetes cluster.local in-addr.arpa ip6.arpa {\n        pods insecure\n        upstream\n        fallthrough in-addr.arpa ip6.arpa\n    }\n    prometheus :9153\n    forward . /etc/resolv.conf\n    cache 30\n    loop\n    reload\n    loadbalance\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Management in CloudProfile - YAML\nDESCRIPTION: This YAML example shows the proposed lifecycle management within a CloudProfile, replacing traditional classification with a detailed lifecycle schedule. Each version contains classifications that change automatically over time based on start times, showing stages from preview to expired.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# assume that the current date is 2024-12-03\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: local\nspec:\n  kubernetes:\n    versions:\n      - version: 1.30.6\n        lifecycle:\n          - classification: preview # starts in preview because no start time is defined\n          - classification: supported\n            startTime: \"2024-12-01T00:00:00Z\"\n          - classification: deprecated\n            startTime: \"2025-03-01T00:00:00Z\"\n          - classification: expired\n            startTime: \"2025-04-01T00:00:00Z\"\nstatus:\n  kubernetes:\n    versions:\n      - version: 1.30.6\n        classification: supported\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets for Gardener Dashboard\nDESCRIPTION: ConfigMap containing visual assets for the Gardener Dashboard such as favicons and logos. Assets must be provided base64-encoded in the binaryData field instead of the data field.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: gardener-dashboard-assets\n  namespace: garden\nbinaryData:\n  favicon-16x16.png: base64(favicon-16x16.png)\n  favicon-32x32.png: base64(favicon-32x32.png)\n  favicon-96x96.png: base64(favicon-96x96.png)\n  favicon.ico: base64(favicon.ico)\n  logo.svg: base64(logo.svg)\n```\n\n----------------------------------------\n\nTITLE: Querying ClusterOpenIDConnectPreset Resources - Bash\nDESCRIPTION: Lists all ClusterOpenIDConnectPreset resources using 'kubectl'. This command displays details such as name, issuer URL, project selector, and Shoot selector labels. Input is no parameters; output is a table summarizing cluster-wide OIDC presets.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get clusteropenidconnectpresets\\nNAME     ISSUER            PROJECT-SELECTOR   SHOOT-SELECTOR   AGE\\ntest     https://foo.bar   <none>             oidc=enabled     1s\\n\n```\n\n----------------------------------------\n\nTITLE: API Server-based Proxy for Prometheus\nDESCRIPTION: Utilizing Kubernetes' proxy feature, this setup allows Prometheus to access shoot cluster endpoints via the API server. It is simpler and more reliable than a port-forward solution but depends on API server availability.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/11-apiserver-network-proxy.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nPrometheus  <-> APIServer <-> Proxy-Server <--- internet <--- Proxy-Agent --> Pods | Nodes | Services\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology-Aware Service for Kubernetes 1.31\nDESCRIPTION: Service configuration for topology-aware routing in Kubernetes version 1.31 using ServiceTrafficDistribution with PreferClose strategy. Also requires the endpoint-slice-hints label to support migration from TopologyAwareHints.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/topology_aware_routing.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    endpoint-slice-hints.resources.gardener.cloud/consider: \"true\"\nspec:\n  trafficDistribution: PreferClose\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Containerd Configuration Files (TOML)\nDESCRIPTION: This TOML snippet shows the `imports` directive used by Gardener in the main `containerd` configuration file. It instructs `containerd` to load and merge all files ending with `.toml` found in the `/etc/containerd/conf.d/` directory. This allows users to add custom configurations without modifying the base Gardener configuration. Note that `containerd` merges entire sections, not individual keys, and this feature applies to nodes created after Gardener v1.51.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/custom-containerd-config.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nimports = [\"/etc/containerd/conf.d/*.toml\"]\n```\n\n----------------------------------------\n\nTITLE: Creating PrometheusRule for Custom Alerts in Gardener\nDESCRIPTION: Example of defining a PrometheusRule resource for custom alerts in Gardener. The resource should be labeled with 'prometheus: shoot' to be picked up by the shoot cluster's Prometheus instance.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  labels:\n    prometheus: shoot\n  name: shoot-my-component\n  namespace: shoot--foo--bar\nspec:\n  groups:\n  - name: my.rules\n    rules:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Pod Anti-Affinity for Multi-Zonal Spread\nDESCRIPTION: This YAML snippet enforces pod anti-affinity across availability zones to ensure replicas are spread evenly when the number of replicas matches the number of zones. This configuration is vital for high availability in multi-zone clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            <labels>\n      topologyKey: \"topology.kubernetes.io/zone\"\n```\n\n----------------------------------------\n\nTITLE: Using Error Codes in Extension Conditions\nDESCRIPTION: Example showing how extension controllers can include error codes in their condition status reports, which Gardener will propagate to the Shoot's status conditions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/shoot-health-status-conditions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  conditions:\n  - type: ControlPlaneHealthy\n    status: \"False\"\n    reason: DeploymentUnhealthy\n    message: 'Deployment cloud-controller-manager is unhealthy: condition \"Available\" has\n      invalid status False (expected True) due to MinimumReplicasUnavailable: Deployment\n      does not have minimum availability.'\n    lastUpdateTime: \"2014-05-25T12:44:27Z\"\n    codes:\n    - ERR_INFRA_UNAUTHORIZED\n```\n\n----------------------------------------\n\nTITLE: Defining PendingReplica Object in Kubernetes\nDESCRIPTION: Structure for tracking a pending replica operation including name, reason, timing and retry information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/seedmanagement.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: string\nreason: PendingReplicaReason\nsince: Time\nretries: int32\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Upgrades for Gardenlet in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure self-upgrades for gardenlet. It specifies the OCI repository containing the gardenlet Helm chart, which is used for automatic upgrades.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nselfUpgrade:\n  deployment:\n    helm:\n      ociRepository:\n        ref: <url-to-oci-repository-containing-gardenlet-helm-chart>\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerInstallation Resource in Kubernetes YAML\nDESCRIPTION: Example of a ControllerInstallation resource that specifies a DNS controller (aws-route53) to be installed on a specific seed cluster. The status field shows that the controller has been successfully deployed to the seed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gardener.cloud/v1alpha1\nkind: ControllerInstallation\nmetadata:\n  name: dns-aws-route53\nspec:\n  registrationRef:\n    name: dns-aws-route53\n  seedRef:\n    name: seed-01\nstatus:\n  conditions:\n  - lastTransitionTime: 2018-08-07T15:09:23Z\n    message: The controller has been successfully deployed to the seed.\n    reason: ControllerDeployed\n    status: \"True\"\n    type: Available\n```\n\n----------------------------------------\n\nTITLE: Defining WorkerStatus struct in Go\nDESCRIPTION: WorkerStatus contains information about created worker resources, including a list of machine images used. This helps maintain reconciliation even if versions are removed from the component config.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/provider-local.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype WorkerStatus struct {\n    metav1.TypeMeta `json:\",inline\"`\n    MachineImages []MachineImage `json:\"machineImages,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Configuration\nDESCRIPTION: Nginx configuration for proxy client deployment in Shoot clusters\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_7\n\nLANGUAGE: conf\nCODE:\n```\nerror_log /dev/stdout;\nstream {\n    server {\n        listen 10.1.2.3:443;\n        proxy_pass api.<external-domain>:8443;\n        proxy_protocol on;\n\n        proxy_protocol_timeout 5s;\n        resolver_timeout 5s;\n        proxy_connect_timeout 5s;\n    }\n}\n\nevents { }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Heap Profile from Admission Controller\nDESCRIPTION: Demonstrates fetching a heap profile from the gardener-admission-controller using curl and analyzing it with Go's pprof tool. The profile is requested from the configured metrics port.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/profiling.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:2723/debug/pprof/heap > /tmp/heap\n$ go tool pprof /tmp/heap\n```\n\n----------------------------------------\n\nTITLE: Defining MachineImage struct in Go\nDESCRIPTION: Defines the MachineImage struct which represents a machine image with name, versions, and update strategy.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\ntype MachineImage struct {\n\tName string\n\tVersions []MachineImageVersion\n\tUpdateStrategy *MachineImageUpdateStrategy\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterParser Custom Resource Template\nDESCRIPTION: YAML template for creating a ClusterParser resource that defines the regex pattern and time format for parsing logs from a specific container, providing structure for custom parser definitions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterParser\nmetadata:\n  name:  << container-name >>-parser\n  labels:\n    fluentbit.gardener/type: \"seed\"\nspec:\n  regex:\n    timeKey: time\n    timeFormat: << time-format >>\n    regex: \"<< regex >>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ContainerRuntimeSpec Structure (v1alpha1)\nDESCRIPTION: Specifies the configuration for a ContainerRuntime resource. It defines the binary path for runtime extensions on worker nodes, identifies the target WorkerPool using ContainerRuntimeWorkerPool, and embeds common DefaultSpec fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nField        Description\n------------ ----------------------------------------------------------------------------------------------------\n// Embedded DefaultSpec fields\nDefaultSpec  DefaultSpec is a structure containing common fields used by all extension resources.\n(DefaultSpec)\n\nbinaryPath   BinaryPath is the Worker’s machine path where container runtime extensions should copy the binaries to.\n(string)\n\nworkerPool   WorkerPool identifies the worker pool of the Shoot. For each worker pool and type, Gardener deploys\n(ContainerRuntimeWorkerPool) a ContainerRuntime CRD.\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ContainerRuntimeWorkerPool Structure (v1alpha1)\nDESCRIPTION: Identifies a specific worker pool within a Shoot cluster for container runtime configuration. Uses the pool's name (immutable) and a label selector to match nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nField     Description\n--------- ----------------------------------------------------------------------------------------------------\nname      Name specifies the name of the worker pool the container runtime should be available for. This field\n(string)  is immutable.\n\nselector  Selector is the label selector used by the extension to match the nodes belonging to the worker pool.\n(meta/v1.LabelSelector)\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Struct in Go\nDESCRIPTION: Defines the Volume struct which contains information about root disks for worker pools. It includes fields for volume name, type, size, and encryption settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\ntype Volume struct {\n\tName string\n\tType string\n\tSize string\n\tEncrypted bool\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Vector Configuration in YAML\nDESCRIPTION: Demonstrates basic image vector configuration for pause-container with version targeting and architecture support.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/image_vector.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  repository: registry.k8s.io/pause\n  tag: \"3.4\"\n  targetVersion: \"1.20.x\"\n  architectures:\n  - amd64\n  - arm64\n- name: pause-container\n  sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile\n  ref: registry.k8s.io/pause:3.5\n  targetVersion: \">= 1.21\"\n  architectures:\n  - amd64\n  - arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor for Long-Term Prometheus\nDESCRIPTION: ServiceMonitor custom resource for extending the Long-Term Prometheus configuration. Similar to the Garden Prometheus configuration, but uses the 'prometheus: longterm' label to target the Long-Term Prometheus instance.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    prometheus: longterm\n  name: longterm-my-component\n  namespace: garden\nspec:\n  selector:\n    matchLabels:\n      app: my-component\n  endpoints:\n  - metricRelabelings:\n    - action: keep\n      regex: ^(metric1|metric2|...)$\n      sourceLabels:\n      - __name__\n    port: metrics\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Access for Webhook Servers\nDESCRIPTION: Annotation configuration for Services to allow network traffic from kube-apiserver instances to webhook server pods. This enables webhook validation and mutation requests to reach the webhook servers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/from-all-webhook-targets-allowed-ports: '[{\"port\":<server-port-on-pod>,\"protocol\":\"<protocol, typically TCP>\"}]'\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Helm Chart References in Gardener\nDESCRIPTION: Multiple examples showing different ways to reference OCI Helm charts in ControllerDeployments, including specifying full references, repository and tag combinations, repository and digest combinations, and how to handle pull secrets for private registries.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhelm:\n  ociRepository:\n    # full ref with either tag or digest, or both\n    ref: registry.example.com/foo:1.0.0@sha256:abc\n---\nhelm:\n  ociRepository:\n    # repository and tag\n    repository: registry.example.com\n    tag: 1.0.0\n---\nhelm:\n  ociRepository:\n    # repository and digest\n    repository: registry.example.com\n    digest: sha256:abc\n---\nhelm:\n  ociRepository:\n    # when specifying both tag and digest, the tag is ignored.\n    repository: registry.example.com\n    tag: 1.0.0\n    digest: sha256:abc\n```\n\n----------------------------------------\n\nTITLE: Vali Table Manager Configuration in YAML\nDESCRIPTION: Configuration for Vali's table manager, enabling retention deletion and setting the retention period for log messages.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntable_manager:\n  retention_deletes_enabled: true\n  retention_period: 336h\n```\n\n----------------------------------------\n\nTITLE: ConfigMap for Storing Shoot OIDC Discovery Documents in YAML\nDESCRIPTION: Example YAML showing the structure of the ConfigMap that stores OIDC discovery documents for a shoot cluster, including both openid-config and jwks data.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/24-shoot-oidc-issuer.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myproj--f924a208-1034-4aeb-84d9-b0184894a0cf\n  namespace: gardener-system-shoot-issuer\n  labels:\n    project.gardener.cloud/name: myproj\n    shoot.gardener.cloud/name: myshoot\ndata:\n  openid-config: |\n    {\n        \"issuer\": \"https://<central.domain.name>/projects/myproj/shoots/f924a208-1034-4aeb-84d9-b0184894a0cf/issuer\",\n        \"jwks_uri\": \"https://<central.domain.name>/projects/myproj/shoots/f924a208-1034-4aeb-84d9-b0184894a0cf/issuer/jwks\",\n        \"response_types_supported\": [\n            \"id_token\"\n        ],\n        \"subject_types_supported\": [\n            \"public\"\n        ],\n        \"id_token_signing_alg_values_supported\": [\n            \"RS256\"\n        ]\n    }\n  jwks: |\n    {\n        \"keys\": [\n            {\n                \"use\": \"sig\",\n                \"kty\": \"RSA\",\n                \"kid\": \"<THE_KEY_IDENTIFIER>\",\n                \"alg\": \"RS256\",\n                \"n\": \"<THE_PUBLIC_KEY>\",\n                \"e\": \"AQAB\"\n            }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for gardenadm Commands in Bash\nDESCRIPTION: This snippet lists the options inherited from parent commands. It includes options for log format and log level configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_connect.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Kubelet Service Configuration in OperatingSystemConfig Resource\nDESCRIPTION: Specifies the kubelet systemd unit configuration that Gardener shall create in the OperatingSystemConfig resource. This unit must contain a Service section with an ExecStart option defining the kubelet command line parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/controlplane-webhooks.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet.service:\n  # Contains the systemd unit configuration file\n  # [Service] section must contain a single ExecStart with kubelet command line\n```\n\n----------------------------------------\n\nTITLE: Mutating EndpointSlice Hints in YAML\nDESCRIPTION: This snippet shows how the EndpointSlice Hints webhook modifies EndpointSlice resources. It adds hints for each endpoint in the EndpointSlice, setting the endpoint's hints to match its zone. This aims to improve topology-aware traffic routing in Kubernetes clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: discovery.k8s.io/v1\nkind: EndpointSlice\nmetadata:\n  name: example-hints\nendpoints:\n- addresses:\n  - \"10.1.2.3\"\n  conditions:\n    ready: true\n  hostname: pod-1\n  zone: zone-a\n  hints:\n    forZones:\n    - name: \"zone-a\" # added by webhook\n- addresses:\n  - \"10.1.2.4\"\n  conditions:\n    ready: true\n  hostname: pod-2\n  zone: zone-b\n  hints:\n    forZones:\n    - name: \"zone-b\" # added by webhook\n```\n\n----------------------------------------\n\nTITLE: Implementing a Shoot Network Test Using the New Framework\nDESCRIPTION: An example Go test implementation using the proposed test framework. This demonstrates how to write a network test for a Shoot cluster with the simplified framework, including cleanup handling, template deployment, and connectivity verification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/09-test-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar _ = ginkgo.Describe(\"Shoot network testing\", func() {\n  // the testframework registers some cleanup handling for a state dump on failure and maybe cleanup of created namespaces\n  f := framework.NewShootFramework()\n  f.CAfterEach(func(ctx context.Context) {\n    ginkgo.By(\"cleanup network test daemonset\")\n    err := f.ShootClient.Client().Delete(ctx, &appsv1.DaemonSet{ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace}})\n    if err != nil {\n      if !apierrors.IsNotFound(err) {\n        Expect(err).To(HaveOccurred())\n      }\n    }\n  }, FinalizationTimeout)\n  f.Release().Default().CIt(\"should reach all webservers on all nodes\", func(ctx context.Context) {\n    ginkgo.By(\"Deploy the net test daemon set\")\n    templateFilepath := filepath.Join(f.ResourcesDir, \"templates\", nginxTemplateName)\n    err := f.RenderAndDeployTemplate(f.Namespace(), templateFilepath)\n    Expect(err).ToNot(HaveOccurred())\n    err = f.WaitUntilDaemonSetIsRunning(ctx, f.ShootClient.Client(), name, namespace)\n    Expect(err).NotTo(HaveOccurred())\n    pods := &corev1.PodList{}\n    err = f.ShootClient.Client().List(ctx, pods, client.MatchingLabels{\"app\": \"net-nginx\"})\n    Expect(err).NotTo(HaveOccurred())\n    // check if all webservers can be reached from all nodes\n    ginkgo.By(\"test connectivity to webservers\")\n    shootRESTConfig := f.ShootClient.RESTConfig()\n    var res error\n    for _, from := range pods.Items {\n      for _, to := range pods.Items {\n        // test pods\n        f.Logger.Infof(\"%s to %s: %s\", from.GetName(), to.GetName(), data)\n      }\n    }\n    Expect(res).ToNot(HaveOccurred())\n  }, NetworkTestTimeout)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining WorkloadIdentityKeyRotation Fields in Kubernetes API\nDESCRIPTION: Definition of fields in the WorkloadIdentityKeyRotation type that tracks credential rotation state including phase and various timestamps. Contains phase information and multiple timestamp fields for tracking rotation progress.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_24\n\nLANGUAGE: kubernetes\nCODE:\n```\nphase       github.com/gardener/gardener/pkg/apis/core/v1beta1.CredentialsRotationPhase\nlastCompletionTime             Kubernetes meta/v1.Time\nlastInitiationTime             Kubernetes meta/v1.Time\nlastInitiationFinishedTime     Kubernetes meta/v1.Time\nlastCompletionTriggeredTime    Kubernetes meta/v1.Time\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Allowed Resources for Garden Control Plane Components\nDESCRIPTION: YAML configuration for setting minimum allowed CPU and memory resources for etcd instances and Kubernetes API server in a Garden cluster. This configuration helps ensure sufficient resources are available for handling abrupt load increases.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/autoscaling-specifics-for-components.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  virtualCluster:\n    etcd:\n      main:\n        autoscaling:\n          minAllowed:\n            cpu: \"2\"\n            memory: 6Gi\n      events:\n        autoscaling:\n          minAllowed:\n            cpu: \"1\"\n            memory: 3Gi\n    kubernetes:\n      kubeAPIServer:\n        autoscaling:\n          minAllowed:\n            cpu: \"1\"\n            memory: 3Gi\n```\n\n----------------------------------------\n\nTITLE: Using gardenadm discover Command\nDESCRIPTION: The basic syntax for using the gardenadm discover command to download Gardener configuration resources from an existing garden cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_discover.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm discover [flags]\n```\n\n----------------------------------------\n\nTITLE: Port Forwarder for Prometheus Connectivity\nDESCRIPTION: The proposed mechanism involves a port-forwarder sidecar attached to a Prometheus pod. This setup connects to the Kubernetes API Server and forwards traffic through a proxy server to the target pods, nodes, and services in the shoot cluster. Challenges include the reliability of port-forward connections and additional component management.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/11-apiserver-network-proxy.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nProm Pod (Prometheus -> Port-forwarder) <-> APIServer -> Proxy-server <--- internet <--- Proxy-Agent --> Pods | Nodes | Services\n```\n\n----------------------------------------\n\nTITLE: Creating a Workerless Shoot Cluster\nDESCRIPTION: This command applies a configuration that creates a Shoot cluster without worker pools by using the shoot-workerless.yaml example file.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f example/provider-local/shoot-workerless.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ObjectReference for Credentials\nDESCRIPTION: Reference to a resource holding credentials for authentication with object store services where backups are stored. Supports v1.Secrets and security.gardener.cloud/v1alpha1.WorkloadIdentity resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\ncredentialsRef</br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#objectreference-v1-core\">\nKubernetes core/v1.ObjectReference\n</a>\n</em>\n```\n\n----------------------------------------\n\nTITLE: Starting Gardener Operator Development Loop\nDESCRIPTION: Initializes the Gardener Operator development environment and starts a skaffold dev loop for continuous deployment of changed components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmake operator-dev\n```\n\n----------------------------------------\n\nTITLE: Defining WorkerControlPlane in Go\nDESCRIPTION: This snippet defines the WorkerControlPlane struct, which specifies that the shoot cluster control plane components should run in a specific worker pool. This is relevant for autonomous shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_47\n\nLANGUAGE: go\nCODE:\n```\ntype WorkerControlPlane struct {}\n```\n\n----------------------------------------\n\nTITLE: Example of Merged Scheduling Instructions in YAML\nDESCRIPTION: Shows the result of merging seedSelectors from a Shoot with an ExposureClass, resulting in modified scheduling instructions. The combination of labels determines which Seed clusters are eligible hosts for the Shoot's control plane.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/exposureclasses.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: abc\n  namespace: garden-dev\nspec:\n  exposureClassName: abc\n  seedSelectors:\n    matchLabels:\n      env: prod\n      network: internal\n```\n\n----------------------------------------\n\nTITLE: Enabling Hosts Directory Pattern in containerd Config (TOML)\nDESCRIPTION: This snippet shows the necessary configuration within `/etc/containerd/config.toml` to enable the new 'hosts directory pattern' for registry configuration. It specifies the `config_path` where containerd should look for per-registry configuration files.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/containerd-registry-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n   config_path = \"/etc/containerd/certs.d\"\n```\n\n----------------------------------------\n\nTITLE: Future Dual-Stack Shoot API Configuration\nDESCRIPTION: Example YAML configuration demonstrating potential future dual-stack support in the Shoot API with both IPv6 and IPv4 CIDRs specified using the extended fields podsCIDRs, nodesCIDRs, and servicesCIDRs alongside the original CIDR fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/21-ipv6-singlestack-local.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  networking:\n    pods: 2001:db8:1::/48\n    nodes: 2001:db8:2::/48\n    services: 2001:db8:3::/48\n    ipFamilies:\n    - IPv6\n    - IPv4\n    # ...\n    podsCIDRs:\n    - 2001:db8:1::/48\n    - 10.0.1.0/24\n    nodesCIDRs:\n    - 2001:db8:2::/48\n    - 10.0.2.0/24\n    servicesCIDRs:\n    - 2001:db8:3::/48\n    - 10.0.3.0/24\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Access for Seed Prometheus Scraping\nDESCRIPTION: Annotation configuration for Services to allow network traffic from Prometheus instances in seed clusters to scrape metrics from pods. This is part of the seed monitoring system deployed by gardenlet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/from-all-seed-scrape-targets-allowed-ports: '[{\"port\":<metrics-port-on-pod>,\"protocol\":\"<protocol, typically TCP>\"}]'\n```\n\n----------------------------------------\n\nTITLE: Defining a NetworkPolicy Allowing Ingress from Seed Cluster VPN in Kubernetes YAML\nDESCRIPTION: This YAML manifest creates a Kubernetes NetworkPolicy named 'allow-from-seed' in a custom namespace. Its purpose is to allow ingress traffic from pods in the 'kube-system' namespace (specifically those labeled 'app: vpn-shoot'), regardless of the Garden version. There are no external dependencies other than Kubernetes itself; the primary prerequisite is a namespace matching the provided value. Main parameters are the target namespace, allowed ingress sources (via namespace and podSelectors), and the policy name. Its main limitation is specificity to VPN-shoot pods for seed clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-from-seed\n  namespace: custom-namespace\nspec:\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          gardener.cloud/purpose: kube-system\n      podSelector:\n        matchLabels:\n          app: vpn-shoot\n\n```\n\n----------------------------------------\n\nTITLE: API Server Configuration Changes for Kubernetes v1.32\nDESCRIPTION: The oidcConfig field in Shoot's kubeAPIServer spec is deprecated. Users should migrate to StructuredAuthentication configuration instead.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_kubernetes_versions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec.kubernetes.kubeAPIServer.oidcConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Restarts in Maintenance Window\nDESCRIPTION: Code snippet for configuring components to restart automatically during the shoot's maintenance time window, which helps ensure components are running with the latest configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/component-checklist.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npkg/component/kubescheduler/kube_scheduler.go#L250\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Write for Centralized Monitoring\nDESCRIPTION: Configuration in GardenletConfiguration to enable remote write from all shoot Prometheus instances to a central monitoring system. It allows filtering which metrics to forward and adding custom labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmonitoring:\n  shoot:\n    remoteWrite:\n      url: https://remoteWriteUrl # remote write URL\n      keep:# metrics that should be forwarded to the external write endpoint. If empty all metrics get forwarded\n      - kube_pod_container_info\n    externalLabels: # add additional labels to metrics to identify it on the central instance\n      additional: label\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration\nDESCRIPTION: JSON configuration for setting up remote debugging in VS Code with Go debugger.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"go remote\",\n  \"type\": \"go\",\n  \"request\": \"attach\",\n  \"mode\": \"remote\",\n  \"port\": 56268,\n  \"host\": \"127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterAutoscalerOptions struct in Go\nDESCRIPTION: Defines the ClusterAutoscalerOptions struct containing cluster autoscaler configurations for a worker pool. Includes fields for scaling thresholds and timings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype ClusterAutoscalerOptions struct {\n  ScaleDownUtilizationThreshold     *float64\n  ScaleDownGpuUtilizationThreshold   *float64\n  ScaleDownUnneededTime              *metav1.Duration\n  ScaleDownUnreadyTime               *metav1.Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Labels into Managed Resources using ManagedResource in YAML\nDESCRIPTION: This example shows how to use a ManagedResource to inject labels into all managed resources. It includes a Secret with a base64 encoded YAML for a Deployment, and a ManagedResource that specifies a label to be injected into the Deployment and its associated resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: managedresource-example2\n  namespace: default\ntype: Opaque\ndata:\n  other-objects.yaml: YXBpVmVyc2lvbjogYXBwcy92MSAjIGZvciB2ZXJzaW9ucyBiZWZvcmUgMS45LjAgdXNlIGFwcHMvdjFiZXRhMgpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IG5naW54LWRlcGxveW1lbnQKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IG5naW54CiAgcmVwbGljYXM6IDIgIyB0ZWxscyBkZXBsb3ltZW50IHRvIHJ1biAyIHBvZHMgbWF0Y2hpbmcgdGhlIHRlbXBsYXRlCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogbmdpbngKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogbmdpbngKICAgICAgICBpbWFnZTogbmdpbng6MS43LjkKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwCg==\n    # apiVersion: apps/v1\n    # kind: Deployment\n    # metadata:\n    #   name: nginx-deployment\n    # spec:\n    #   selector:\n    #     matchLabels:\n    #       app: nginx\n    #   replicas: 2 # tells deployment to run 2 pods matching the template\n    #   template:\n    #     metadata:\n    #       labels:\n    #         app: nginx\n    #     spec:\n    #       containers:\n    #       - name: nginx\n    #         image: nginx:1.7.9\n    #         ports:\n    #         - containerPort: 80\n\n---\napiVersion: resources.gardener.cloud/v1alpha1\nkind: ManagedResource\nmetadata:\n  name: example\n  namespace: default\nspec:\n  secretRefs:\n  - name: managedresource-example2\n  injectLabels:\n    foo: bar\n```\n\n----------------------------------------\n\nTITLE: Example Usage of gardenadm token list Command in Bash\nDESCRIPTION: An example showing how to use the 'gardenadm token list' command to list all bootstrap tokens on the server.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_list.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all bootstrap tokens on the server\ngardenadm token list\n```\n\n----------------------------------------\n\nTITLE: Configuring Immutable ConfigMaps and Secret for Garbage Collection in Kubernetes\nDESCRIPTION: Example YAML configuration showing how to set up immutable ConfigMaps with the garbage-collectable-reference label and a Pod that references one of them. The garbage collector would delete ConfigMap/test-1234 as it's not referenced by any workload.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: test-1234\n  namespace: default\n  labels:\n    resources.gardener.cloud/garbage-collectable-reference: \"true\"\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: test-5678\n  namespace: default\n  labels:\n    resources.gardener.cloud/garbage-collectable-reference: \"true\"\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: default\n  annotations:\n    reference.resources.gardener.cloud/configmap-82a3537f: test-5678\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.14.2\n    terminationGracePeriodSeconds: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard Parameters in Grafana for Gardener Components\nDESCRIPTION: Standard configuration for Grafana dashboards in the Gardener project. This snippet demonstrates how to set up the dashboard title, timezone, categorization tags, version, and editability settings to ensure consistent dashboard configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/monitoring-stack.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"example-component\",\n  \"timezone\": \"utc\",\n  \"tags\": [\n    \"seed\",\n    \"control-plane\"\n  ],\n  \"version\": 1,\n  \"editable\": \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Gardener Operator\nDESCRIPTION: Command to bring up the gardener-operator in a KinD cluster environment.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nmake kind-operator-up operator-up\n```\n\n----------------------------------------\n\nTITLE: Defining CredentialsRotation Struct in Go\nDESCRIPTION: CredentialsRotation contains information about the rotation of credentials. It specifies fields for various types of credential rotations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype CredentialsRotation struct {\n  CertificateAuthorities *v1beta1.CARotation `json:\"certificateAuthorities,omitempty\"`\n  ServiceAccountKey *v1beta1.ServiceAccountKeyRotation `json:\"serviceAccountKey,omitempty\"`\n  ETCDEncryptionKey *v1beta1.ETCDEncryptionKeyRotation `json:\"etcdEncryptionKey,omitempty\"`\n  Observability *v1beta1.ObservabilityRotation `json:\"observability,omitempty\"`\n  WorkloadIdentityKey *WorkloadIdentityKeyRotation `json:\"workloadIdentityKey,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Communication Flow Diagram\nDESCRIPTION: ASCII diagram showing the communication flow between Shoot API Server, Envoy IGW, and proxy components\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+------------------+                    +----------------+\n| Shoot API Server |       TCP          |   Envoy IGW    |\n|                  +<-------------------+ PROXY listener |\n| Cluster A        |                    |     :8443      |\n+------------------+                    +-+--------------+\n                                          ^\n                                          |\n                                          |\n                                          |\n                                          |\n+-----------------------------------------------------------+\n                                          |   Single Node in\n                                          |   the Shoot cluster\n                                          |\n                                          | PROXY Protocol\n                                          |\n                                          |\n                                          |\n +---------------------+       +----------+----------+\n |  Pod talking to     |       |                     |\n |  the kubernetes     |       |       Proxy         |\n |  service            +------>+  No TLS termination |\n |                     |       |                     |\n +---------------------+       +---------------------+\n```\n\n----------------------------------------\n\nTITLE: Disabling Gardener Monitoring for Custom Solutions\nDESCRIPTION: Configuration to disable Gardener's built-in monitoring for shoot clusters, allowing users to implement their own monitoring solutions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmonitoring:\n  shoot:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Families for Seed Networks\nDESCRIPTION: Specifies the IP protocol versions (IPv4/IPv6) to use for seed networking. This field is immutable and defaults to [\"IPv4\"] if not specified.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nipFamilies</br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.IPFamily\">\n[]IPFamily\n</a>\n</em>\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that apply to all gardenadm commands, including log format and log level settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_bootstrap.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Shoot Status with Advertised OIDC Issuer Address in YAML\nDESCRIPTION: Example YAML showing how the shoot status will include an advertised address for the service-account-issuer, making the issuer URL easily discoverable.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/24-shoot-oidc-issuer.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  advertisedAddresses:\n    ...\n    - name: service-account-issuer\n      url: https://<central.domain.name>/projects/<project-name>/shoots/<shoot-uid>/issuer\n```\n\n----------------------------------------\n\nTITLE: Parent Reference with Optional Namespace for Cross-Namespace Inheritance - YAML\nDESCRIPTION: This YAML sample extends the 'parent' reference to optionally specify the namespace, enabling inheritance from a profile in a different namespace (cross-project inheritance). Essential parameters are 'parent.kind', 'parent.name', and optionally 'parent.namespace'. This approach requires API logic in Gardener to locate and validate cross-namespace parents. Input is a NamespacedCloudProfile manifest referencing another namespace; output is a valid hierarchical profile structure. Dependencies include RBAC and cross-namespace access policies. Limitation: Ensuring security and identity validation for cross-project access is required.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nparent:\\n  kind: <NamespacedCloudProfile | CloudProfile>\\n  name: <objects name>\\n  namespace: <(optional) objects namespace if outside project namespace>\\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Printf-style Logging Example in Go\nDESCRIPTION: Example showing the deprecated printf-style logging approach using logrus that should be avoided in new code.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar logger *logrus.Logger\nlogger.Infof(\"Scaling deployment %s/%s to %d replicas\", deployment.Namespace, deployment.Name, replicaCount)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bastion Controller in YAML\nDESCRIPTION: Example configuration for the Bastion Controller within the gardener-controller-manager's ComponentConfig. It demonstrates setting the maxLifetime option in the BastionControllerConfiguration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/controller-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nControllerManagerControllerConfiguration:\n  BastionControllerConfiguration:\n    maxLifetime: 24h\n```\n\n----------------------------------------\n\nTITLE: Configuring Kube Apiserver HVPA for High Availability\nDESCRIPTION: YAML configuration for Horizontal Vertical Pod Autoscaler (HVPA) template to ensure minimum replica count for high availability of the Kubernetes API server.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  hpa:\n    template:\n      spec:\n        minReplicas: 3\n```\n\n----------------------------------------\n\nTITLE: Gardenlet ConfigMap and Deployment Configuration\nDESCRIPTION: Shows how to configure image overrides using ConfigMap and deployment specifications for Gardenlet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/image_vector.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: gardenlet-images-overwrite\n  namespace: garden\ndata:\n  images_overwrite.yaml: |\n    images:\n    - ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gardenlet\n  namespace: garden\nspec:\n  template:\n    spec:\n      containers:\n      - name: gardenlet\n        env:\n        - name: IMAGEVECTOR_OVERWRITE\n          value: /imagevector-overwrite/images_overwrite.yaml\n        volumeMounts:\n        - name: gardenlet-images-overwrite\n          mountPath: /imagevector-overwrite\n      volumes:\n      - name: gardenlet-images-overwrite\n        configMap:\n          name: gardenlet-images-overwrite\n```\n\n----------------------------------------\n\nTITLE: Enabling Topology-Aware Routing in Gardener Seed Cluster Resource - YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable the topology-aware routing feature in a Gardener Seed cluster by setting the 'topologyAwareRouting.enabled' parameter to true under the '.spec.settings' field. It requires at least version 'core.gardener.cloud/v1beta1' for the Seed resource and should be used when the cluster has more than one zone. The key input is the Seed manifest, and the expected effect is that topology-aware traffic routing is activated for eligible control plane Services.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/topology_aware_routing.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Seed\\n# ...\\nspec:\\n  settings:\\n    topologyAwareRouting:\\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Shoot Status with Advertised Addresses in YAML\nDESCRIPTION: This code snippet shows the updated Shoot resource status that includes advertised addresses, which are needed for the API server to generate correct kubeconfig server URLs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/16-adminkubeconfig-subresource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: crazy-botany\n  namespace: garden-dev\nspec: {}\nstatus:\n  advertisedAddresses:\n  - name: external\n    url: https://api.shoot-cluster.external.foo\n  - name: internal\n    url: https://api.shoot-cluster.internal.foo\n  - name: ip\n    url: https://1.2.3.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Gardener Runtime Cluster for Extension Admission\nDESCRIPTION: YAML configuration passed to the chart during reconciliation for the runtime part of admission service, which contains deployment relevant manifests for the runtime cluster. Specifies the priority class to be used for extension admission.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngardener:\n  runtimeCluster:\n    priorityClassName: <Class to be used for extension admission>\n```\n\n----------------------------------------\n\nTITLE: Defining a ServiceMonitor Resource in YAML\nDESCRIPTION: The ServiceMonitor resource facilitates monitoring of services in Kubernetes by defining how metrics are scraped, transformed, and presented. It requires Prometheus Operator CRDs extension. Key parameters include port definitions and bearer token path.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    cluster: shoot--project--name\n  name: cloud-controller-manager\n  namespace: shoot--project--name\nspec:\n  endpoints:\n  - port: metrics # scrape the service port with name `metrics`\n    bearerTokenFile: /var/run/secrets/gardener.cloud/shoot/token/token # could also be replaced with a secret\n    metricRelabelings:\n    - sourceLabels: [ __name__ ]\n      regex: ^(rest_client_requests_total|process_max_fds|process_open_fds)$\n      action: keep\n  namespaceSelector:\n    matchNames:\n    - shoot--project--name\n  selector:\n    matchLabels:\n      role: cloud-controller-manager # discover any service with this label\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Watchdog Prober\nDESCRIPTION: Controls whether the probe controller of the dependency-watchdog should be enabled. This scales down certain controllers when their API server is unreachable to prevent cascading failures.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nenabled</br>\n<em>\nbool\n</em>\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Provider in Garden Resource\nDESCRIPTION: YAML snippet showing how to configure DNS providers in a Garden resource. This example demonstrates setting up OpenStack Designate as the primary DNS provider with credentials stored in a referenced secret.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndns:\n  providers:\n  - name: primary\n    type: openstack-designate\n    secretRef:\n      name: dns-showroom-garden\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Plutono Dashboard ConfigMap in YAML\nDESCRIPTION: Example of creating a ConfigMap to provide a custom dashboard for Plutono in the seed cluster. The ConfigMap should be labeled appropriately and contain the dashboard JSON document.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    dashboard.monitoring.gardener.cloud/seed: \"true\"\n  name: extension-foo-my-custom-dashboard\n  namespace: garden\ndata:\n  my-custom-dashboard.json: <dashboard-JSON-document>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Registry Mirror using hosts.toml (TOML)\nDESCRIPTION: This is an example `hosts.toml` file placed within `/etc/containerd/certs.d/docker.io/`. It configures `http://public-mirror.example.com` as a mirror for the specified upstream server (`https://registry-1.docker.io`) with 'pull' and 'resolve' capabilities, following the recommended 'hosts directory pattern'.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/containerd-registry-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://registry-1.docker.io\"\n\n[host.\"http://public-mirror.example.com\"]\n  capabilities = [\"pull\", \"resolve\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Seed Network Configuration\nDESCRIPTION: Configuration for the network CIDRs of a Kubernetes seed cluster, including nodes, pods, and services networks. This structure also supports IP family configuration and network blocking settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nnodes</br>\n<em>\nstring\n</em>\n```\n\n----------------------------------------\n\nTITLE: Example of Field Removal in Go API Definitions\nDESCRIPTION: Example showing how to properly deprecate a field in the API by commenting it out while reserving its protobuf tag number. This prevents reuse of the same protobuf number by new fields, which would break compatibility for clients using older protobuf definitions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/changing-the-api.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n-\tSeedTemplate *gardencorev1beta1.SeedTemplate `json:\"seedTemplate,omitempty\" protobuf:\"bytes,2,opt,name=seedTemplate\"`\n\n+\t// SeedTemplate is tombstoned to show why 2 is reserved protobuf tag.\n+\t// SeedTemplate *gardencorev1beta1.SeedTemplate `json:\"seedTemplate,omitempty\" protobuf:\"bytes,2,opt,name=seedTemplate\"`\n```\n\n----------------------------------------\n\nTITLE: Preparing Medium-Touch Scenario for gardenadm\nDESCRIPTION: Command to set up the medium-touch scenario for gardenadm, which builds images and renders manifests needed for bootstrap operations. The manifests are rendered to a local directory for use with gardenadm bootstrap.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake gardenadm-medium-touch-up\n```\n\n----------------------------------------\n\nTITLE: Displaying Correctly Parsed Log in Plutono\nDESCRIPTION: Example of a correctly parsed log message as it should appear in Plutono, with structured fields for log content, process ID, severity, and source.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\"log\":\"OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io\",\"pid\":\"1\",\"severity\":\"INFO\",\"source\":\"controller.go:107\"}\n```\n\n----------------------------------------\n\nTITLE: Removing Extension Mapping in CloudProfile YAML\nDESCRIPTION: Example of generalizing image version mapping and moving it to Gardener core, eliminating the need for provider-specific mappings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# CloudProfile\nspec:\n  machineImages:\n    - name: gardenlinux\n      updateStrategy: minor\n      versions:\n        - architectures: arm64\n          classification: supported\n          capabilities:\n            hypervisorType: [\"gen2\"]\n            network: [\"accelerated\", \"standard\"]\n          imageReference: someIDstring\n          version: 1592.2.0\n          region: eu-west-1\n        - architecture: amd64\n          classification: supported\n          capabilities:\n            hypervisorType: [\"gen2\"]\n          imageReference: someIDstring\n          version: 1592.2.0\n          region: eu-west-2\n        - architecture: amd64\n          capabilities:\n            hypervisorType: [\"gen1\"]\n          imageReference: someIDstring\n          version: 1592.2.0\n          region: eu-west-1\n\n  machineTypes:\n    - architecture: amd64\n      cpu: \"896\"\n      gpu: \"0\"\n      memory: 12Ti\n      name: Standard_S896om\n      usable: true\n      capabilities:\n        hypervisorType: [\"gen2\"]\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterRole for Project Tolerations Whitelist Modification Using RBAC (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes ClusterRole that grants full access to create, patch, update, and delete Project resources as well as specifically allowing the modification of the spec.tolerations.whitelist field. It is required for users who need to manage or update the list of permitted tolerations for a Gardener Project. The most critical permission here is 'modify-spec-tolerations-whitelist', which should be tightly controlled. The ClusterRole must be bound to a user or group via a RoleBinding to become effective.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/tolerations.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRole\\nmetadata:\\n  name: full-project-modification-access\\nrules:\\n- apiGroups:\\n  - core.gardener.cloud\\n  resources:\\n  - projects\\n  verbs:\\n  - create\\n  - patch\\n  - update\\n  - modify-spec-tolerations-whitelist\\n  - delete\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping and Connecting an Autonomous Cluster with gardenadm (CLI)\nDESCRIPTION: The `gardenadm bootstrap` command, mentioned in the context of a 'Medium Touch' scenario, likely combines the cluster initialization (`init`) and connection to Gardener (`connect`) steps into a single command for a more streamlined user experience.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm bootstrap\n```\n\n----------------------------------------\n\nTITLE: Specifying Parent Reference for NamespacedCloudProfile Inheritance - YAML\nDESCRIPTION: This YAML snippet shows how a NamespacedCloudProfile can inherit properties from a parent, which can be either a NamespacedCloudProfile or a CloudProfile. The 'parent' field's 'kind' and 'name' parameters indicate the parent's type and identifier. This pattern requires Gardener's API logic to resolve and merge inherited fields. The input is a profile manifest referencing a parent profile; output is a composite NamespacedCloudProfile. Dependencies include API support for inheritance resolution. Limitation: Multi-level or circular dependencies must be validated and may restrict field overrides.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nparent:\\n  kind: <NamespacedCloudProfile | CloudProfile>\\n  name: <objects name>\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Unparsed Log in Plutono\nDESCRIPTION: Example of an incorrectly parsed log message where the JSON structure is preserved as a string inside the log field rather than being parsed into separate fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"log\":\"{\\n  \\\"level\\\":\\\"info\\\",\\\"ts\\\":\\\"2020-06-01T11:23:26.679Z\\\",\\\"logger\\\":\\\"gardener-resource-manager.health-reconciler\\\",\\\"msg\\\":\\\"Finished ManagedResource health checks\\\",\\\"object\\\":\\\"garden/provider-aws-dsm9r\\\"\\n  }\\n\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AdminKubeconfigRequest Response Structure in YAML\nDESCRIPTION: This snippet shows the complete structure of an AdminKubeconfigRequest with its response, including the generated kubeconfig with a client certificate that contains the user's identity.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/16-adminkubeconfig-subresource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: authentication.gardener.cloud/v1alpha1\nkind: AdminKubeconfigRequest\nspec:\n  expirationSeconds: 3600\nstatus:\n  expirationTimestamp: \"2021-02-22T09:06:51Z\"\n  kubeConfig: # this is normally base64-encoded, but decoded for the example\n    apiVersion: v1\n    clusters:\n    - cluster:\n        certificate-authority-data: LS0tLS1....\n        server: https://api.shoot-cluster\n      name: shoot-cluster-a\n    contexts:\n    - context:\n        cluster: shoot-cluster-a\n        user: shoot-cluster-a\n      name: shoot-cluster-a\n    current-context: shoot-cluster-a\n    kind: Config\n    preferences: {}\n    users:\n    - name: shoot-cluster-a\n      user:\n        client-certificate-data: LS0tLS1CRUd...\n        client-key-data: LS0tLS1CRUd...\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Restrictions in Seed YAML\nDESCRIPTION: Example demonstrating how to set access restrictions for a seed cluster, allowing it to host shoots with matching restrictions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/access_restrictions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  accessRestrictions:\n  - name: eu-access-only\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Config File for SeedAuthorizer in YAML\nDESCRIPTION: This YAML configuration defines the webhook configuration file needed for the Kubernetes API server to communicate with the SeedAuthorizer webhook. It specifies the webhook endpoint URL and certificate authority information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/gardenlet_api_access.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\nclusters:\n- name: garden\n  cluster:\n    certificate-authority-data: base64(CA-CERT-OF-GARDENER-ADMISSION-CONTROLLER)\n    server: https://gardener-admission-controller.garden/webhooks/auth/seed\nusers:\n- name: kube-apiserver\n  user: {}\ncontexts:\n- name: auth-webhook\n  context:\n    cluster: garden\n    user: kube-apiserver\ncurrent-context: auth-webhook\n```\n\n----------------------------------------\n\nTITLE: Enabling Topology-Aware Routing in Gardener Garden Runtime Cluster Resource - YAML\nDESCRIPTION: This YAML snippet shows how to enable topology-aware routing in a Gardener garden runtime cluster. The setting is applied by configuring 'topologyAwareRouting.enabled: true' under the 'spec.runtimeCluster.settings' path of the Garden resource. It requires the 'operator.gardener.cloud/v1alpha1' API version and is applicable only to clusters spanning multiple zones. The snippet enables more efficient, zone-aware routing for in-cluster Service communication.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/topology_aware_routing.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.gardener.cloud/v1alpha1\\nkind: Garden\\n# ...\\nspec:\\n  runtimeCluster:\\n    settings:\\n      topologyAwareRouting:\\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating BackupInfrastructure Resource in Gardener\nDESCRIPTION: YAML definition for a BackupInfrastructure resource that manages etcd backups for a Shoot cluster. This resource allows keeping backups for a grace period even after Shoot deletion.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gardener.cloud/v1alpha1\nkind: BackupInfrastructure\nmetadata:\n  name: aws-01-bucket\n  namespace: garden-core\nspec:\n  seed: seed-01\n  shootUID: uuid-of-shoot\n```\n\n----------------------------------------\n\nTITLE: Implementing ForceDelete in Non-Generic Actuator Controllers (Go)\nDESCRIPTION: Example of implementing the ForceDelete method in extension controllers not based on generic actuators, such as the AWS infrastructure controller.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/force-deletion.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// ForceDelete implements infrastructure.Actuator.\nfunc (a *actuator) ForceDelete(ctx context.Context, infra *extensionsv1alpha1.Infrastructure) error {\n    // Implement force deletion logic\n    // Remove finalizers, delete resources, etc.\n    // ...\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Cluster Details Structure - Gardener Go\nDESCRIPTION: Describes the Provider struct, holding cloud or infrastructure provider-specific details such as region and availability zones for a cluster. Both fields are optional, supporting multi-zonal or regional deployments. This struct is included in the RuntimeCluster configuration, essential for cluster topology determination.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype Provider struct {\n    Region string    `json:\"region,omitempty\"`\n    Zones  []string  `json:\"zones,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Forwarding to Upstream DNS with NodeLocalDNS\nDESCRIPTION: This YAML snippet configures the `Shoot` resource within Gardener to disable forwarding DNS queries to upstream DNS when using NodeLocalDNS, allowing custom configurations to apply. It requires a Gardener Kubernetes cluster with node local DNS configured. Inputs include the desired state for DNS forwarding, and outputs ensure compliance with custom DNS handling within the cluster nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/custom-dns-config.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  ...\n  systemComponents:\n    nodeLocalDNS:\n      enabled: true\n      disableForwardToUpstreamDNS: true\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring VPA Options in Gardener Shoot Cluster YAML\nDESCRIPTION: Example YAML snippet showing how to set VPA Recommender and Updater options in a Gardener shoot cluster specification. This includes settings for recommendation margin, CPU and memory percentiles, and eviction parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/shoot_pod_autoscaling_best_practices.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    verticalPodAutoscaler:\n      enabled: true\n      recommender:\n        recommendationMarginFraction: 0.15\n        targetCPUPercentile: 90\n        targetMemoryPercentile: 90\n      updater:\n        evictAfterOOMThreshold: 10m\n        evictionTolerance: 0.5\n        evictionRateBurst: 1\n        evictionRateLimit: -1\n```\n\n----------------------------------------\n\nTITLE: Vali Chunk Store Configuration in YAML\nDESCRIPTION: Configuration for Vali's chunk store, defining the maximum look back period which should match the retention period.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nchunk_store_config:\n  max_look_back_period: 336h\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints for Node Utilization\nDESCRIPTION: This YAML snippet defines a topology spread constraint for scheduling control plane components in a manner that optimizes node utilization. This approach allows for a more balanced distribution of pods across nodes, promoting efficient use of resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n     topologyKey: kubernetes.io/hostname\n     whenUnsatisfiable: DoNotSchedule\n     labelSelector:\n      matchLabels:\n        <labels>\n```\n\n----------------------------------------\n\nTITLE: Augmenting Network API Resource for IPv6 - YAML\nDESCRIPTION: This YAML snippet shows an updated `Network` custom resource using IPv6 subnets for pod and service CIDRs. It introduces the `ipFamilies` field to mark the network family as IPv6. Components using this resource should process and validate CIDR values accordingly, supporting single-stack IPv6 deployments. The approach mirrors changes applied to the `Shoot` and `Seed` resources for consistency.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/21-ipv6-singlestack-local.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\\nkind: Network\\nspec:\\n  podCIDR: 2001:db8:1::/48\\n  serviceCIDR: 2001:db8:3::/48\\n  # ...\\n  ipFamilies:\\n  - IPv6\n```\n\n----------------------------------------\n\nTITLE: Generic Garden Kubeconfig Structure (YAML)\nDESCRIPTION: Structure of the generic garden kubeconfig provided to extensions, including the use of a token file for authentication.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/garden-api-access.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: LS0t...\n    server: https://garden.local.gardener.cloud:6443\n  name: garden\ncontexts:\n- context:\n    cluster: garden\n    user: extension\n  name: garden\ncurrent-context: garden\nusers:\n- name: extension\n  user:\n    tokenFile: /var/run/secrets/gardener.cloud/garden/generic-kubeconfig/token\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Parallel on macOS\nDESCRIPTION: Command to install GNU Parallel on macOS using Homebrew, which is required for code generation scripts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbrew install parallel\n```\n\n----------------------------------------\n\nTITLE: Running Shoot Creation Test with Go Test Command\nDESCRIPTION: Command-line example for running the shoot creation system test. It demonstrates the required parameters including cluster configuration, cloud provider settings, and networking options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ngo test  -timeout=0 ./test/testmachinery/system/shoot_creation \\\n  --v -ginkgo.v -ginkgo.show-node-events \\\n  -kubecfg=$HOME/.kube/config \\\n  -shoot-name=$SHOOT_NAME \\\n  -cloud-profile-name=$CLOUDPROFILE \\\n  -seed=$SEED \\\n  -secret-binding=$SECRET_BINDING \\\n  -provider-type=$PROVIDER_TYPE \\\n  -region=$REGION \\\n  -k8s-version=$K8S_VERSION \\\n  -project-namespace=$PROJECT_NAMESPACE \\\n  -annotations=$SHOOT_ANNOTATIONS \\\n  -infrastructure-provider-config-filepath=$INFRASTRUCTURE_PROVIDER_CONFIG_FILEPATH \\\n  -controlplane-provider-config-filepath=$CONTROLPLANE_PROVIDER_CONFIG_FILEPATH \\\n  -workers-config-filepath=$$WORKERS_CONFIG_FILEPATH \\\n  -worker-zone=$ZONE \\\n  -networking-pods=$NETWORKING_PODS \\\n  -networking-services=$NETWORKING_SERVICES \\\n  -networking-nodes=$NETWORKING_NODES \\\n  -start-hibernated=$START_HIBERNATED\n```\n\n----------------------------------------\n\nTITLE: Defining Backup Struct in Go\nDESCRIPTION: Backup contains the object store configuration for backups for the virtual garden etcd. It specifies fields for provider, bucket name, provider config, and secret reference.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Backup struct {\n  Provider string `json:\"provider\"`\n  BucketName *string `json:\"bucketName,omitempty\"`\n  ProviderConfig *runtime.RawExtension `json:\"providerConfig,omitempty\"`\n  SecretRef corev1.LocalObjectReference `json:\"secretRef\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Additional Permissions to Extensions (YAML)\nDESCRIPTION: Example of a ClusterRole resource used to grant additional permissions to extension clients in the garden cluster, specifically for creating SubjectAccessReviews.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/garden-api-access.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: extension-create-subjectaccessreviews\n  annotations:\n    authorization.gardener.cloud/extensions-serviceaccount-selector: '{\"matchLabels\":{\"controllerregistration.core.gardener.cloud/name\":\"<extension-name>\"}}'\n  labels:\n    authorization.gardener.cloud/custom-extensions-permissions: \"true\"\nrules:\n- apiGroups:\n  - authorization.k8s.io\n  resources:\n  - subjectaccessreviews\n  verbs:\n  - create\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfile API Configuration\nDESCRIPTION: This YAML snippet defines a `CloudProfile` resource in the Gardener system, including configuration for machine images and strategy support. The `inPlaceUpdateConfig` field is particularly important as it indicates whether machine image versions support in-place updates and specifies any minimum version requirements.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/31-inplace-node-update.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: cloudprofile1\nspec:\n  type: <some-provider-name>\n  providerConfig: <some-provider-specific-cloudprofile-config>\n  kubernetes:\n    versions:\n      - version: 1.31.1\n  machineImages:\n    - name: gardenlinux\n      versions:\n        - version: 1443.8.0\n          expirationDate: \"2025-02-28T23:59:59Z\"\n          inPlaceUpdateConfig:\n            supported: true # true/false\n            minVersionForUpdate: 1312.3.0\n        - version: 1443.7.0 # if minVersionForInPlaceUpdate is not specified, in-place update cannot be performed on this version\n  machineTypes:\n    - name: m5.large\n      cpu: \"2\"\n      gpu: \"0\"\n      memory: 8Gi\n      usable: true\n  regions:\n    - name: <region-name>\n```\n\n----------------------------------------\n\nTITLE: Triggering Immediate Shoot Reconciliation in Gardener\nDESCRIPTION: Command to annotate a Shoot cluster for immediate reconciliation using gardener.cloud/operation=reconcile annotation, bypassing the maintenance window.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_operations.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n garden-<project-name> annotate shoot <shoot-name> gardener.cloud/operation=reconcile\n```\n\n----------------------------------------\n\nTITLE: Defining MachineImage struct in Go\nDESCRIPTION: MachineImage represents a mapping from logical names and versions to provider-specific machine image data. It includes fields for name, version, and the actual image identifier.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/provider-local.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MachineImage struct {\n    Name    string `json:\"name\"`\n    Version string `json:\"version\"`\n    Image   string `json:\"image\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Seed API Resource for IPv6 Support - YAML\nDESCRIPTION: This YAML snippet defines a `Seed` custom resource specifying IPv6 CIDRs for nodes, pods, and services. The new `ipFamilies` field is introduced to denote the IP version in use, set to `IPv6`. The definition utilizes existing CIDR fields for IPv6 subnets and demonstrates how shoot default networks can be configured for IPv6. No additional dependencies are required, but Gardener components must honor the provided network family in their logic.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/21-ipv6-singlestack-local.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Seed\\nspec:\\n  networks:\\n    nodes: 2001:db8:11::/48\\n    pods: 2001:db8:12::/48\\n    services: 2001:db8:13::/48\\n    shootDefaults:\\n      pods: 2001:db8:1::/48\\n      services: 2001:db8:3::/48\\n    # ...\\n    ipFamilies:\\n    - IPv6\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Logging in Gardener\nDESCRIPTION: Configuration snippet to enable the Gardener logging stack. When enabled, each Seed will have a logging stack collecting logs from all pods and some systemd services.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/configuring_logging.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints for Host-Based Distribution in Kubernetes\nDESCRIPTION: Configuration for topology spread constraints to ensure replicas are spread across different nodes on a best-effort basis. The constraint uses kubernetes.io/hostname as the topology key with a maxSkew of 1 and will schedule pods even when constraints cannot be satisfied.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: kubernetes.io/hostname\n    whenUnsatisfiable: ScheduleAnyway\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Local Workerless Shoot Configuration in YAML\nDESCRIPTION: YAML configuration for creating a basic workerless Shoot cluster in Gardener. Specifies the local provider type, region, cloud profile and Kubernetes version without any worker node definitions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_workerless.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: local\n  namespace: garden-local\nspec:\n  cloudProfile:\n    name: local\n  region: local\n  provider:\n    type: local\n  kubernetes:\n    version: 1.31.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Provider Zones in YAML\nDESCRIPTION: YAML configuration specifying the provider region and availability zones for a seed cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    region: europe-1\n    zones:\n    - europe-1a\n    - europe-1b\n    - europe-1c\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Domain Secret in YAML\nDESCRIPTION: Example YAML configuration for the default domain secret, containing DNS provider credentials used for creating/deleting DNS records for a default domain for Shoots.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/10-secret-default-domain.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining AuditWebhook Struct in Go\nDESCRIPTION: AuditWebhook contains settings related to an audit webhook configuration. It specifies fields for batch size, kubeconfig secret, and API version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AuditWebhook struct {\n  BatchMaxSize *int32 `json:\"batchMaxSize,omitempty\"`\n  KubeconfigSecretName string `json:\"kubeconfigSecretName\"`\n  Version *string `json:\"version,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: TokenReview Response with User Identity in Kubernetes (JSON)\nDESCRIPTION: This JSON snippet exemplifies the TokenReview authentication response provided by the external webhook or API server after token verification. No dependencies are necessary to use this example; it is returned by Kubernetes compliant endpoints. The main parameters are within the 'status' object: 'authenticated' confirms success, and the user block populates user attributes. Input: webhook receives a valid TokenReview request. Output: status details on user authentication and attributes. The values shown (username, uid, groups, etc.) are illustrative only.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"apiVersion\\\": \\\"authentication.k8s.io/v1beta1\\\",\\n  \\\"kind\\\": \\\"TokenReview\\\",\\n  \\\"status\\\": {\\n    \\\"authenticated\\\": true,\\n    \\\"user\\\": {\\n      \\\"username\\\": \\\"janedoe@example.com\\\",\\n      \\\"uid\\\": \\\"42\\\",\\n      \\\"groups\\\": [\\n        \\\"developers\\\",\\n        \\\"qa\\\"\\n      ],\\n      \\\"extra\\\": {\\n        \\\"extrafield1\\\": [\\n          \\\"extravalue1\\\",\\n          \\\"extravalue2\\\"\\n        ]\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Restrictions in Shoot YAML\nDESCRIPTION: Example showing how to configure access restrictions in a Shoot specification, including optional support parameters for cluster addons and nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/access_restrictions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  region: europe-central-1\n  accessRestrictions:\n  - name: eu-access-only\n#   options:\n#     support.gardener.cloud/eu-access-for-cluster-addons: \"false\"\n#     support.gardener.cloud/eu-access-for-cluster-nodes: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Running Shoot Update Test with Go Test Command\nDESCRIPTION: Command-line example for running the Kubernetes version update system test. It shows the parameters needed to update a shoot's Kubernetes version, with an optional specific version parameter.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ngo test  -timeout=0 ./test/testmachinery/system/shoot_update \\\n  --v -ginkgo.v -ginkgo.show-node-events \\\n  -kubecfg=$HOME/.kube/config \\\n  -shoot-name=$SHOOT_NAME \\\n  -project-namespace=$PROJECT_NAMESPACE \\\n  -version=$K8S_VERSION\n```\n\n----------------------------------------\n\nTITLE: Alternative CloudProfile Lifecycle Definition with Date Fields (YAML)\nDESCRIPTION: This YAML snippet presents a rejected alternative design for defining Kubernetes version lifecycles in a Gardener `CloudProfile` (`core.gardener.cloud/v1beta1`). It proposes using specific date fields (`previewDate`, `supportedDate`, `deprecationDate`, `expirationDate`) alongside a `classification` field. This approach was discarded due to API design concerns (using keys for enum values) and the need for consumers to calculate the effective state.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: local\nspec:\n  kubernetes:\n    versions:\n      - version: 1.30.6\n        classification: unavailable\n        previewDate: \"2025-01-01T00:00:00Z\"\n        supportedDate: \"2025-01-14T00:00:00Z\"\n        deprecationDate: \"2025-03-01T00:00:00Z\"\n        expirationDate: \"2025-06-01T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Referenced Resources in Extension Controllers with Go\nDESCRIPTION: This code snippet shows how extension controllers can resolve references to resources using the GetObjectByReference utility function from the extensions/pkg/controller package. This is needed to properly access resources that have been copied to different namespaces.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/referenced-resources.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    ...\n    ref = &autoscalingv1.CrossVersionObjectReference{\n        APIVersion: \"v1\",\n        Kind:       \"Secret\",\n        Name:       \"foo\",\n    }\n    secret := &corev1.Secret{}\n    if err := controller.GetObjectByReference(ctx, client, ref, \"shoot--test--foo\", secret); err != nil {\n        return err\n    }\n    // Use secret\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology-Aware Service for Kubernetes <1.31\nDESCRIPTION: Service configuration for topology-aware routing in Kubernetes versions less than 1.31 using TopologyAwareHints. Requires the topology-mode annotation and endpoint-slice-hints label to enable zone-aware traffic routing.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/topology_aware_routing.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    service.kubernetes.io/topology-mode: \"auto\"\n  labels:\n    endpoint-slice-hints.resources.gardener.cloud/consider: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading a kubeadm Cluster (Reference/Comparison)\nDESCRIPTION: The `kubeadm upgrade` command is referenced as an example of functionality *not* present in the proposed `gardenadm` tool. In the `gardenadm` workflow, cluster upgrades are managed through the Gardener `Shoot` API after the cluster is connected via `gardenadm connect`, rather than through a dedicated `gardenadm` subcommand.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\nkubeadm upgrade\n```\n\n----------------------------------------\n\nTITLE: Patching EtcdCopyBackupsTask During Manual Backup Copying\nDESCRIPTION: Command to mark an EtcdCopyBackupsTask as successful after manually copying etcd backups between storage providers. This is used as part of the troubleshooting procedure when automatic backup copying fails during migration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/control_plane_migration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSHOOT_NAME=my-shoot\nPROJECT_NAME=my-project\n\nkubectl patch -n shoot--${PROJECT_NAME}--${SHOOT_NAME} etcdcopybackupstask ${SHOOT_NAME} --subresource status --type merge -p \"{\\\"status\\\":{\\\"conditions\\\":[{\\\"type\\\":\\\"Succeeded\\\",\\\"status\\\":\\\"True\\\",\\\"reason\\\":\\\"manual copy successful\\\",\\\"message\\\":\\\"manual copy successful\\\",\\\"lastTransitionTime\\\":\\\"$(date -Iseconds)\\\",\\\"lastUpdateTime\\\":\\\"$(date -Iseconds)\\\"}]}}\"\n```\n\n----------------------------------------\n\nTITLE: Deleting the Garden Resource\nDESCRIPTION: Executes a script to delete the Garden resource named 'local'.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n./hack/usage/delete garden local\n```\n\n----------------------------------------\n\nTITLE: Creating a BackupBucket Extension Resource for Azure in Gardener\nDESCRIPTION: Example YAML configuration for a BackupBucket custom resource of type 'azure'. This resource is created by Gardener in the seed cluster and must be reconciled by an extension controller to provision the actual cloud storage bucket for etcd backups.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/backupbucket.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: BackupBucket\nmetadata:\n  name: foo\nspec:\n  type: azure\n  providerConfig:\n    <some-optional-provider-specific-backupbucket-configuration>\n  region: eu-west-1\n  secretRef:\n    name: backupprovider\n    namespace: shoot--foo--bar\n```\n\n----------------------------------------\n\nTITLE: Calculating Desired Replicas in HPA with Kubernetes\nDESCRIPTION: This formula calculates the desired number of replicas in Kubernetes Horizontal Pod Autoscaling (HPA). It evaluates the required adjustments by comparing current resource usage against defined metrics and scales accordingly. Dependencies include Kubernetes environment with configured metrics collection, and prerequisites involve defining desired metrics. Inputs are current replicas and metric values, with the output being the desired number of replicas.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/shoot_pod_autoscaling_best_practices.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndesiredReplicas = ceil[currentReplicas * (currentMetricValue / desiredMetricValue)]\n```\n\n----------------------------------------\n\nTITLE: Alternative CloudProfile Lifecycle Definition with Lifecycle Map (YAML)\nDESCRIPTION: This YAML snippet illustrates another rejected alternative design for a Gardener `CloudProfile` (`core.gardener.cloud/v1beta1`) version lifecycle. It uses a nested `lifecycle` map where keys represent classification stages ('preview', 'supported', 'deprecation', 'expiration') and values specify the `startTime` for each stage. This was rejected for similar reasons as the date-field approach, primarily API design concerns.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: local\nspec:\n  kubernetes:\n    versions:\n      - version: 1.30.6\n        classification: supported\n        lifecycle:\n          preview:\n            startTime: \"2025-01-01T00:00:00Z\"\n          supported:\n            startTime: \"2025-01-14T00:00:00Z\"\n          deprecation:\n            startTime: \"2025-03-01T00:00:00Z\"\n          expiration:\n            startTime: \"2025-06-01T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: TokenReview Response After API Server Authentication (JSON)\nDESCRIPTION: This JSON snippet details a TokenReview response received after authenticating a calling API server, including recognized user/group attributes typical for Kubernetes service accounts. Primary dependencies are Kubernetes authentication.k8s.io/v1 API and a valid request token. Important outputs include 'authenticated' and the user/groups info. Used as a reference/object model for OWA to make authorization decisions about API server calls. Shows all core fields likely returned in this scenario.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"apiVersion\\\": \\\"authentication.k8s.io/v1\\\",\\n    \\\"kind\\\": \\\"TokenReview\\\",\\n    \\\"metadata\\\": {\\n        \\\"creationTimestamp\\\": null\\n    },\\n    \\\"spec\\\": {\\n        \\\"token\\\": \\\"eyJhbGciOiJSUzI1NiIsImtpZCI6InJocEdLTXZlYjV1OE5heD...\\\"\\n    },\\n    \\\"status\\\": {\\n        \\\"authenticated\\\": true,\\n        \\\"user\\\": {\\n            \\\"groups\\\": [\\n                \\\"system:serviceaccounts\\\",\\n                \\\"system:serviceaccounts:shoot--abcd\\\",\\n                \\\"system:authenticated\\\"\\n            ],\\n            \\\"uid\\\": \\\"14db103e-88bb-4fb3-8efd-ca9bec91c7bf\\\",\\n            \\\"username\\\": \\\"system:serviceaccount:shoot--abcd:kube-apiserver\\\"\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Manager Configuration Struct\nDESCRIPTION: Defines settings for the Kubernetes controller manager including horizontal pod autoscaling, node CIDR configuration, and pod eviction timeouts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype KubeControllerManagerConfig struct {\n  KubernetesConfig\n  HorizontalPodAutoscalerConfig *HorizontalPodAutoscalerConfig\n  NodeCIDRMaskSize int32\n  PodEvictionTimeout *metav1.Duration\n  NodeMonitorGracePeriod *metav1.Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackupBucket CRD for Garden Cluster in YAML\nDESCRIPTION: Specification for the new BackupBucket CRD to be created at the garden cluster level. It defines cloud provider details, region, and credentials for bucket operations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: garden.cloud/v1alpha1\nkind: BackupBucket\nmetadata:\n  name: packet-region1-uid[:5]\n  # No namespace needed. This will be a cluster scope resource.\n  ownerReferences:\n  - kind: CloudProfile\n    name: packet\nspec:\n  provider: aws\n  region: eu-west-1\n  secretRef: # Required for root\n    name: backup-operator-aws\n    namespace: garden\nstatus:\n  lastOperation: ...\n  observedGeneration: ...\n  seed: ...\n```\n\n----------------------------------------\n\nTITLE: Setting up IPv6 Single-Stack Shoot Cluster with Kind\nDESCRIPTION: Commands to initialize a local IPv6-enabled Gardener environment and deploy an IPv6 single-stack shoot cluster. Requires Linux environment with native IPv6 connectivity.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/ipv6.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-up gardener-up IPFAMILY=ipv6\nk apply -f example/provider-local/shoot-ipv6.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes kubeconfig with Service Account Token Volume Projection\nDESCRIPTION: This YAML snippet demonstrates how to configure a kubeconfig file to use Service Account Token Volume Projection. It specifies the cluster, context, and user details, with the token file path set for automatic rotation by the kubelet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/authentication_gardener_control_plane.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: <CA-DATA>\n    server: https://default.kubernetes.svc.cluster.local\n  name: garden\ncontexts:\n- context:\n    cluster: garden\n    user: garden\n  name: garden\ncurrent-context: garden\nusers:\n- name: garden\n  user:\n    tokenFile: /var/run/secrets/projected/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: Defining BackupBucket CRD for Seed Cluster in YAML\nDESCRIPTION: Specification for the BackupBucket CRD at the seed cluster level. This resource will be managed by the extension controllers within the seed to handle provider-specific bucket operations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: BackupBucket\nmetadata:\n  name: packet-random[:5]\n  # No namespace need. This will be a cluster scope resource\nspec:\n  type: aws\n  region: eu-west-1\n  secretRef:\n    name: backup-operator-aws\n    namespace: backup-garden\nstatus:\n  observedGeneration: ...\n  state: ...\n  lastError: ..\n  lastOperation: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Zone Pinning in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to add node affinity to a pod template spec to ensure pods are pinned to specific zones. It uses the 'topology.kubernetes.io/zone' key to match nodes in the specified zones.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values:\n            - <zone1>\n          # - ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Pod Injection for Entire Cluster - YAML\nDESCRIPTION: Illustrates the approach to disable the environment variable injection for an entire cluster by annotating the 'Shoot' resource with 'alpha.featuregates.shoot.gardener.cloud/apiserver-sni-pod-injector: 'disable''. This is used when injection may cause issues and ignoring pods or namespaces individually is impractical.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/shoot_kubernetes_service_host_injection.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  annotations:\n    alpha.featuregates.shoot.gardener.cloud/apiserver-sni-pod-injector: 'disable'\n  name: my-cluster\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy RBAC Resources Using Bash\nDESCRIPTION: This Bash command removes the existing RBAC resources that previously granted global access to gardenlets. This cleanup is necessary when transitioning to the SeedAuthorizer authorization model.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/gardenlet_api_access.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete \\\n  clusterrole.rbac.authorization.k8s.io/gardener.cloud:system:seeds \\\n  clusterrolebinding.rbac.authorization.k8s.io/gardener.cloud:system:seeds \\\n  --ignore-not-found\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Shoot Manifest in Gardener\nDESCRIPTION: Refers to an example Shoot manifest that defines an end-user Kubernetes cluster, including provider-specific configurations for the control plane, infrastructure, and worker nodes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/90-shoot.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet seccompDefault Option in Shoot Cluster - YAML\nDESCRIPTION: This YAML snippet sets the kubelet 'seccompDefault' parameter to true in the shoot's Kubernetes specification, enabling the use of the container runtime's default seccomp profile (RuntimeDefault) for all workloads in a Gardener-managed shoot cluster. It should be included under the '.spec.kubernetes.kubelet' path of the shoot cluster resource definition. The key parameter is 'seccompDefault: true'. The only dependency is a supported Kubernetes version (e.g., v1.25.0 or later) with shoot cluster access. The outcome is that all pods will have RuntimeDefault seccomp profile unless explicitly overridden; the limitation is that privileged containers still run as unconfined.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/default_seccomp_profile.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  kubernetes:\n    version: 1.25.0\n    kubelet:\n      seccompDefault: true\n```\n\n----------------------------------------\n\nTITLE: Setting up KinD Cluster for Local Development\nDESCRIPTION: Shell command to create a local KinD cluster named 'gardener-local' for development purposes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmake kind-operator-up\n```\n\n----------------------------------------\n\nTITLE: Defining MaintenanceTimeWindow Type\nDESCRIPTION: Kubernetes API type definition for MaintenanceTimeWindow which specifies the time window for maintenance operations using HHMMSS+ZONE format.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_33\n\nLANGUAGE: kubernetes-api\nCODE:\n```\ntype MaintenanceTimeWindow struct {\n  begin string  // beginning time in HHMMSS+ZONE format\n  end string    // end time in HHMMSS+ZONE format\n}\n```\n\n----------------------------------------\n\nTITLE: Example CloudProfile Configuration in YAML\nDESCRIPTION: Provides a YAML configuration for a CloudProfile, detailing how machineImages and machineTypes are defined. This example includes identification tags for generation and architectural differences, crucial for compatibility checks. It supports Gardener's decision-making process on compatible machine-image combinations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  machineImages:\n    - name: gardenlinux\n      updateStrategy: minor\n      versions:\n        - architectures: [arm64, amd64]\n          version: 1592.2.0-gen2\n        - architectures: [amd64]\n          classification: supported\n          version: 1592.2.0\n\n  machineTypes:\n    - architecture: amd64\n      cpu: \"896\"\n      gpu: \"0\"\n      memory: 12Ti\n      name: Standard_S896om\n      usable: true\n\n  providerConfig:\n    machineImages:\n      - name: gardenlinux\n        versions:\n          - acceleratedNetworking: true\n            architecture: arm64\n            communityGalleryImageID: /CommunityGalleries/xzy/Images/gardenlinux-nvme-arm64-gen2/Versions/1592.2.0\n            version: 1592.2.0-gen2\n          - acceleratedNetworking: true\n            architecture: amd64\n            communityGalleryImageID: /CommunityGalleries/xzy/Images/gardenlinux-nvme-gen2/Versions/1592.2.0\n            version: 1592.2.0-gen2\n          - acceleratedNetworking: true\n            architecture: amd64\n            communityGalleryImageID: /CommunityGalleries/xzy/Images/gardenlinux-nvme/Versions/1592.2.0\n            version: 1592.2.0\n\n    machineTypes:\n      - acceleratedNetworking: true\n        name: Standard_S896om\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Seed Backup Secret Manifest in Gardener\nDESCRIPTION: Refers to an example manifest for the backup secret needed for Seed clusters, which are Kubernetes clusters used by Gardener to host the control planes of end-user clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/45-secret-seed-backup.yaml\n```\n\n----------------------------------------\n\nTITLE: Waiting for Garden Resource Readiness\nDESCRIPTION: Executes a script to wait for the Garden resource to be ready, checking specific conditions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./hack/usage/wait-for.sh garden local VirtualGardenAPIServerAvailable VirtualComponentsHealthy\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener CloudConfig Structure (v1alpha1)\nDESCRIPTION: Defines the CloudConfig type used in OperatingSystemConfigStatus. It holds a reference to a Kubernetes Secret containing the generated cloud-init configuration data, potentially including confidential information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nField        Description\n------------ ----------------------------------------------------------------------------------------------\nsecretRef    SecretRef is a reference to a secret that contains the actual result of the generated cloud config.\n(core/v1.SecretReference)\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology-Aware Service for Kubernetes ≥1.32\nDESCRIPTION: Service configuration for topology-aware routing in Kubernetes versions 1.32 and above using only ServiceTrafficDistribution with PreferClose strategy, without requiring additional annotations or labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/topology_aware_routing.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nspec:\n  trafficDistribution: PreferClose\n```\n\n----------------------------------------\n\nTITLE: Defining Bastion Configuration in CloudProfile YAML\nDESCRIPTION: Example of the proposed CloudProfile extension with a new bastion section that specifies the machine image and machine type to use for bastion hosts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/27-cloudprofile-bastion-section.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: cloudprofile1\nspec:\n  type: aws\n  bastion:\n    machineImage:\n      name: gardenlinux\n      version: 1443.3.0\n    machineType:\n      name: n1-standard-2\n...\n```\n\n----------------------------------------\n\nTITLE: Injecting Garden Access into Extension Deployment (YAML)\nDESCRIPTION: Example of how gardenlet mutates a Deployment to inject garden cluster access credentials and environment variables for an extension.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/garden-api-access.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gardener-extension-provider-local\n  annotations:\n    reference.resources.gardener.cloud/secret-795f7ca6: garden-access-extension\n    reference.resources.gardener.cloud/secret-d5f5a834: generic-garden-kubeconfig-81fb3a88\nspec:\n  template:\n    metadata:\n      annotations:\n        reference.resources.gardener.cloud/secret-795f7ca6: garden-access-extension\n        reference.resources.gardener.cloud/secret-d5f5a834: generic-garden-kubeconfig-81fb3a88\n    spec:\n      containers:\n      - name: gardener-extension-provider-local\n        env:\n        - name: GARDEN_KUBECONFIG\n          value: /var/run/secrets/gardener.cloud/garden/generic-kubeconfig/kubeconfig\n        - name: SEED_NAME\n          value: local\n        volumeMounts:\n        - mountPath: /var/run/secrets/gardener.cloud/garden/generic-kubeconfig\n          name: garden-kubeconfig\n          readOnly: true\n      volumes:\n      - name: garden-kubeconfig\n        projected:\n          defaultMode: 420\n          sources:\n          - secret:\n              items:\n              - key: kubeconfig\n                path: kubeconfig\n              name: generic-garden-kubeconfig-81fb3a88\n              optional: false\n          - secret:\n              items:\n              - key: token\n                path: token\n              name: garden-access-extension\n              optional: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Topology Spread for Shoot Clusters\nDESCRIPTION: YAML configuration for node-level topology spread constraints in shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: kubernetes.io/hostname\n    whenUnsatisfiable: ScheduleAnyway\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Kubeconfig via Bash\nDESCRIPTION: Shell commands to request a temporary admin kubeconfig with cluster-admin privileges through the shoots/adminkubeconfig subresource. The generated kubeconfig contains client certificates with short validity that require renewal.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=garden-my-namespace\nexport SHOOT_NAME=my-shoot\nexport KUBECONFIG=<kubeconfig for garden cluster>\nkubectl create \\\n    -f <(printf '{\"spec\":{\"expirationSeconds\":600}}') \\\n    --raw /apis/core.gardener.cloud/v1beta1/namespaces/${NAMESPACE}/shoots/${SHOOT_NAME}/adminkubeconfig | \\\n    jq -r \".status.kubeconfig\" | \\\n    base64 -d\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes API Reference for SecretBinding\nDESCRIPTION: API reference snippet showing the beginning of the SecretBinding resource in Gardener, which represents a binding to a secret in the same or another namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: SecretBinding\n# Additional fields would follow here\n```\n\n----------------------------------------\n\nTITLE: MachineCloudConfig CRD for Cloud-Config Downloader\nDESCRIPTION: Defines a MachineCloudConfig CRD for CoreOS that sets up the cloud-config-downloader service. It includes systemd unit configuration and file placements for bootstrapping machine configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: MachineCloudConfig\nmetadata:\n  name: pool-01-downloader\n  namespace: shoot--core--aws-01\nspec:\n  type: CoreOS\n  units:\n  - name: cloud-config-downloader.service\n    command: start\n    enable: true\n    content: |\n      [Unit]\n      Description=Downloads the original cloud-config from Shoot API Server and executes it\n      After=docker.service docker.socket\n      Wants=docker.socket\n      [Service]\n      Restart=always\n      RestartSec=30\n      EnvironmentFile=/etc/environment\n      ExecStart=/bin/sh /var/lib/cloud-config-downloader/download-cloud-config.sh\n  files:\n  - path: /var/lib/cloud-config-downloader/credentials/kubeconfig\n    permissions: 0644\n    content:\n      secretRef:\n        name: cloud-config-downloader\n        dataKey: kubeconfig\n  - path: /var/lib/cloud-config-downloader/download-cloud-config.sh\n    permissions: 0644\n    content:\n      inline:\n        encoding: b64\n        data: IyEvYmluL2Jhc2ggL...\n```\n\n----------------------------------------\n\nTITLE: ServiceMonitor Selector for Prometheus - YAML\nDESCRIPTION: The YAML snippet represents a selector configuration within Prometheus. It allows distinguishing between '*Monitors' relevant for shoot control plane using specific labels. No direct dependencies are noted beyond a functioning Prometheus setup.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserviceMonitorSelector:\n  matchLabels:\n    monitoring.gardener.cloud/monitoring-target: shoot-control-plane\n```\n\n----------------------------------------\n\nTITLE: Defining ControlPlane Struct in Go\nDESCRIPTION: ControlPlane holds information about the general settings for the control plane of the virtual garden cluster. It includes a field for high availability configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype ControlPlane struct {\n  HighAvailability *HighAvailability `json:\"highAvailability,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Gardenlet Custom Resource for Helm-Based Self-Upgrades - YAML\nDESCRIPTION: This YAML snippet defines a complete Gardenlet custom resource for Kubernetes. The resource specifies how gardenlet should self-manage its deployment, referencing an OCI Helm chart repository, and includes deployment, controller, logging, and infrastructure configuration. Inputs include required metadata, deployment strategy, Helm chart reference (via ociRepository), cluster client connection, controller options, feature gates, logging backends, and seed configuration. Outputs are not directly returned—this snippet is intended to be applied to the Kubernetes API server. Dependencies: Kubernetes cluster with CustomResourceDefinitions for Gardenlet, Helm-compatible cluster, network access to described OCI repository. Limitations include the necessity for correct permissions and network accessibility for Helm chart retrieval; all required secrets and namespaces must exist as referenced.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\\nkind: Gardenlet\\nmetadata:\\n  name: local\\n  namespace: garden\\nspec:\\n  deployment:\\n    replicaCount: 1\\n    revisionHistoryLimit: 2\\n    helm:\\n      ociRepository:\\n        ref: <url-to-gardenlet-chart-repository>:v1.97.0\\n  config:\\n    apiVersion: gardenlet.config.gardener.cloud/v1alpha1\\n    kind: GardenletConfiguration\\n    gardenClientConnection:\\n      kubeconfigSecret:\\n        name: gardenlet-kubeconfig\\n        namespace: garden\\n    controllers:\\n      shoot:\\n        reconcileInMaintenanceOnly: true\\n        respectSyncPeriodOverwrite: true\\n      shootState:\\n        concurrentSyncs: 0\\n    featureGates:\\n      DefaultSeccompProfile: true\\n    logging:\\n      enabled: true\\n      vali:\\n        enabled: true\\n      shootNodeLogging:\\n        shootPurposes:\\n        - infrastructure\\n        - production\\n        - development\\n        - evaluation\\n    seedConfig:\\n      apiVersion: core.gardener.cloud/v1beta1\\n      kind: Seed\\n      metadata:\\n        labels:\\n          base: kind\\n      spec:\\n        backup:\\n          provider: local\\n          region: local\\n          credentialsRef:\\n            apiVersion: v1\\n            kind: Secret\\n            name: backup-local\\n            namespace: garden\\n        dns:\\n          provider:\\n            secretRef:\\n              name: internal-domain-internal-local-gardener-cloud\\n              namespace: garden\\n            type: local\\n        ingress:\\n          controller:\\n            kind: nginx\\n          domain: ingress.local.seed.local.gardener.cloud\\n        networks:\\n          nodes: 172.18.0.0/16\\n          pods: 10.1.0.0/16\\n          services: 10.2.0.0/16\\n          shootDefaults:\\n            pods: 10.3.0.0/16\\n            services: 10.4.0.0/16\\n        provider:\\n          region: local\\n          type: local\\n          zones:\\n          - \"0\"\\n        settings:\\n          excessCapacityReservation:\\n            enabled: false\\n          scheduling:\\n            visible: true\\n          verticalPodAutoscaler:\\n            enabled: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Resources to Second KinD Cluster\nDESCRIPTION: This command deploys the required resources to the second KinD cluster (gardener-local2) that was created in the previous step.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmake gardenlet-kind2-up\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration Example for Gardener Shoot\nDESCRIPTION: Example YAML configuration showing how to properly configure a mutating webhook in a Gardener shoot cluster by excluding the kube-system namespace using namespaceSelector. This helps avoid hibernation and maintenance issues.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_status.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: admissionregistration.k8s.io/v1\nkind: MutatingWebhookConfiguration\nwebhooks:\n  - name: my-webhook.example.com\n    namespaceSelector:\n      matchExpressions:\n      - key: gardener.cloud/purpose\n        operator: NotIn\n        values:\n          - kube-system\n    rules:\n      - operations: [\"*\"]\n        apiGroups: [\"\"]\n        apiVersions: [\"v1\"]\n        resources: [\"pods\"]\n        scope: \"Namespaced\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Shoot Resource for Cluster OIDC Injection - YAML\nDESCRIPTION: Provides a minimal Shoot resource YAML suitable for matching a ClusterOpenIDConnectPreset selector, which triggers injection of cluster-wide OIDC settings. Requires that the Shoot is labeled accordingly and the CRD is active. Input is the Shoot metadata and label; output is a Shoot eligible for OIDC mutation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\\napiVersion: core.gardener.cloud/v1beta1\\nmetadata:\\n  name: preset\\n  namespace: default\\n  labels:\\n    oidc: enabled\\nspec:\\n  kubernetes:\\n    version: 1.20.2\\n\n```\n\n----------------------------------------\n\nTITLE: Tearing Down the Gardener Environment\nDESCRIPTION: This command removes the entire Gardener local development environment, including the KinD cluster and all deployed resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nmake kind-down\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregate Prometheus ServiceMonitor in YAML\nDESCRIPTION: Example of creating a ServiceMonitor custom resource for the aggregate Prometheus instance in the seed cluster. This configuration allows scraping metrics from a custom component.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    prometheus: aggregate\n  name: aggregate-my-component\n  namespace: garden\nspec:\n  selector:\n    matchLabels:\n      app: my-component\n  endpoints:\n  - metricRelabelings:\n    - action: keep\n      regex: ^(metric1|metric2|...)$\n      sourceLabels:\n      - __name__\n    port: metrics\n```\n\n----------------------------------------\n\nTITLE: Istio VirtualService Configuration for Shoot API Server\nDESCRIPTION: YAML configuration for an Istio VirtualService resource that defines routing rules based on SNI hostnames to direct traffic to the correct Shoot API server service.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: kube-apiserver\n  namespace: <shoot-namespace>\nspec:\n  hosts:\n  - api.<external-domain>\n  - api.<shoot>.<project>.<internal-domain>\n  gateways:\n  - kube-apiserver-gateway\n  tls:\n  - match:\n    - port: 443\n      sniHosts:\n      - api.<external-domain>\n      - api.<shoot>.<project>.<internal-domain>\n    route:\n    - destination:\n        host: kube-apiserver.<shoot-namespace>.svc.cluster.local\n        port:\n          number: 443\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes API Reference for NamespacedCloudProfile\nDESCRIPTION: API reference showing the structure of the NamespacedCloudProfile resource in Gardener, which represents properties about a provider environment. It includes fields for metadata, spec, and status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: NamespacedCloudProfile\nmetadata:\n  # Standard object metadata\nspec:\n  caBundle: # Optional certificate bundle for host machines\n  kubernetes: # Constraints for Kubernetes settings\n  machineImages: # Allowed machine images\n  machineTypes: # Allowed machine types\n  volumeTypes: # Allowed volume types\n  parent: # Reference to parent CloudProfile\n  providerConfig: # Provider-specific configuration\n  limits: # Operational limits for Shoot clusters\nstatus:\n  # Most recently observed status\n```\n\n----------------------------------------\n\nTITLE: Generating Viewer Kubeconfig via Bash\nDESCRIPTION: Shell commands to request a temporary viewer kubeconfig with read-only access through the shoots/viewerkubeconfig subresource.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=garden-my-namespace\nexport SHOOT_NAME=my-shoot\nkubectl create \\\n    -f <(printf '{\"spec\":{\"expirationSeconds\":600}}') \\\n    --raw /apis/core.gardener.cloud/v1beta1/namespaces/${NAMESPACE}/shoots/${SHOOT_NAME}/viewerkubeconfig | \\\n    jq -r \".status.kubeconfig\" | \\\n    base64 -d\n```\n\n----------------------------------------\n\nTITLE: Creating and Packaging a Test Helm Chart using Shell Commands\nDESCRIPTION: This code snippet demonstrates how to create a new Helm chart, package it, and clean up the temporary files. It uses the 'helm create' command to generate a chart template, 'helm package' to bundle it, and 'rm' to remove the temporary directory.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/utils/oci/testdata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm create example\nhelm package example example\nrm -rf example/\n```\n\n----------------------------------------\n\nTITLE: Completing Credentials Rotation in Shoot Cluster\nDESCRIPTION: Command to complete the rotation of all credentials by adding the rotate-credentials-complete annotation. This triggers the second phase of the rotation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-credentials-complete\n```\n\n----------------------------------------\n\nTITLE: Defining KubernetesConfig struct in Go\nDESCRIPTION: This struct defines common configuration fields for Kubernetes control plane components. It currently only includes a field for feature gates.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\ntype KubernetesConfig struct {\n\tFeatureGates map[string]bool\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS ServiceMonitor with CA Certificate in YAML\nDESCRIPTION: Example of configuring a ServiceMonitor with HTTPS scheme and providing a CA certificate for the TLS configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/logging-and-monitoring.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  scheme: HTTPS\n  tlsConfig:\n    ca:\n      secret:\n        name: <name-of-ca-bundle-secret>\n        key: bundle.crt\n```\n\n----------------------------------------\n\nTITLE: Deprecated containerd Registry Mirror Configuration (TOML)\nDESCRIPTION: This example shows the old and deprecated pattern for configuring a registry mirror in containerd's `config.toml`. It sets up `https://public-mirror.example.com` as a mirror for `docker.io`. If pulling from the mirror fails, containerd falls back to the upstream `docker.io` registry. This method is no longer recommended.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/containerd-registry-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n    [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n      endpoint = [\"https://public-mirror.example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Direct Profiling of Controller Manager with Go Tool\nDESCRIPTION: Shows how to directly fetch and analyze a heap profile from gardener-controller-manager using go tool pprof without manually saving the profile. This approach automatically saves the profile to a temporary location and opens the interactive mode.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/profiling.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go tool pprof http://localhost:2718/debug/pprof/heap\nFetching profile over HTTP from http://localhost:2718/debug/pprof/heap\nSaved profile in /Users/timebertt/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.008.pb.gz\nType: inuse_space\nTime: Sep 3, 2021 at 10:05am (CEST)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof)\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ContainerRuntimeStatus Structure (v1alpha1)\nDESCRIPTION: Defines the status for a ContainerRuntime resource. It embeds the common DefaultStatus fields used by Gardener extension resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nField          Description\n-------------- ----------------------------------------------------------------------------------\n// Embedded DefaultStatus fields\nDefaultStatus  DefaultStatus is a structure containing common fields used by all extension resources.\n(DefaultStatus)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard TLS Certificate Secret for Garden Runtime Cluster\nDESCRIPTION: This YAML snippet defines a Kubernetes Secret that contains the trusted wildcard certificate for Garden Runtime Cluster components. The secret must be deployed in the 'garden' namespace with a specific label to be recognized by Gardener.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/trusted-tls-for-garden-runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  ca.crt: base64-encoded-ca.crt\n  tls.crt: base64-encoded-tls.crt\n  tls.key: base64-encoded-tls.key\nkind: Secret\nmetadata:\n  labels:\n    gardener.cloud/role: garden-cert\n  name: garden-ingress-certificate\n  namespace: garden\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Validation Instructions for Log Parsers\nDESCRIPTION: Instructions to follow the development setup to validate that the configured log parsers are working correctly after deployment.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nFollow your development setup to validate that the parsers are working correctly.\n```\n\n----------------------------------------\n\nTITLE: Example ClusterFilter for Alertmanager Logs\nDESCRIPTION: Example YAML configuration for a ClusterFilter that applies the alertmanager-parser to logs from alertmanager containers, demonstrating how to implement the template for a specific service.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterFilter\nmetadata:\n  labels:\n    fluentbit.gardener/type: seed\n  name: alertmanager\nspec:\n  filters:\n  - parser:\n      keyName: log\n      parser: alertmanager-parser\n      reserveData: true\n  match: \"kubernetes.alertmanager*alertmanager*\"\n```\n\n----------------------------------------\n\nTITLE: TokenReview Request Payload Example for Delegated API Server (JSON)\nDESCRIPTION: This snippet demonstrates the JSON structure for a TokenReview intended for identity validation against a delegated or upstream API server within OWA logic. Dependencies include access to the delegated API server's authentication.k8s.io endpoint and a valid Kubernetes bearer token. The 'spec.token' parameter must be a valid service account or client token. Input: the service account token string. Output: identity as determined by the upstream API server. Only for trusted communication paths as shown.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"TokenReview\\\": {\\n    \\\"kind\\\": \\\"TokenReview\\\",\\n    \\\"apiVersion\\\": \\\"authentication.k8s.io/v1beta1\\\",\\n    \\\"spec\\\": {\\n      \\\"token\\\": \\\"ddeewfwef...\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific E2E Test Cases with Labels\nDESCRIPTION: Command to run specific E2E test cases using Ginkgo label filters. This allows targeting particular test scenarios like credential rotation tests.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./hack/test-e2e-local.sh --label-filter \"Shoot && credentials-rotation\" ./test/e2e/gardener/...\n```\n\n----------------------------------------\n\nTITLE: Reference Path for Istio CRDs\nDESCRIPTION: Documentation note referencing the location of Istio CRDs in the GitHub repository for version 1.14.1.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/component/networking/istio/charts/istio/istio-crds/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Info\\n\\nThose are the crds in https://github.com/istio/istio/blob/1.14.1/manifests/charts/base/crds/crd-all.gen.yaml for the respective version.\n```\n\n----------------------------------------\n\nTITLE: Using Logcheck Standalone\nDESCRIPTION: Command syntax for using the logcheck tool to analyze one or more packages.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogcheck package [package...]\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceAccount Token Configuration in YAML\nDESCRIPTION: YAML configuration for setting up a ServiceAccount token requestor and related RBAC resources to access the virtual garden cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: shoot-access-virtual-garden\n  namespace: garden\n  labels:\n    resources.gardener.cloud/purpose: token-requestor\n    resources.gardener.cloud/class: shoot\n  annotations:\n    serviceaccount.resources.gardener.cloud/name: virtual-garden-user\n    serviceaccount.resources.gardener.cloud/namespace: kube-system\n    serviceaccount.resources.gardener.cloud/token-expiration-duration: 3h\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: managedresource-virtual-garden-access\n  namespace: garden\ntype: Opaque\nstringData:\n  clusterrolebinding____gardener.cloud.virtual-garden-access.yaml: |\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n      name: gardener.cloud.sap:virtual-garden\n    roleRef:\n      apiGroup: rbac.authorization.k8s.io\n      kind: ClusterRole\n      name: cluster-admin\n    subjects:\n    - kind: ServiceAccount\n      name: virtual-garden-user\n      namespace: kube-system\n---\napiVersion: resources.gardener.cloud/v1alpha1\nkind: ManagedResource\nmetadata:\n  name: virtual-garden-access\n  namespace: garden\nspec:\n  secretRefs:\n  - name: managedresource-virtual-garden-access\n```\n\n----------------------------------------\n\nTITLE: Configuring Bastion Resource in Garden Cluster using YAML\nDESCRIPTION: Example YAML configuration for a Bastion resource in the garden cluster. This resource is created by users/gardenctlv2 and contains SSH public key, ingress configuration, and shoot reference information. The status fields track the bastion's readiness and heartbeat information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/15-manage-bastions-and-ssh-key-pair-rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operations.gardener.cloud/v1alpha1\nkind: Bastion\nmetadata:\n  generateName: cli-\n  name: cli-abcdef\n  namespace: garden-myproject\n  annotations:\n    gardener.cloud/created-by: foo # immutable, set by the GAPI Admission Plugin\n    # gardener.cloud/operation: keepalive # this annotation is removed by the GAPI and the status.lastHeartbeatTimestamp and status.expirationTimestamp will be updated accordingly\nspec:\n  shootRef: # namespace cannot be set / it's the same as .metadata.namespace\n    name: my-cluster # immutable\n\n  # the following fields are set by the GAPI\n  seedName: aws-eu2\n  providerType: aws\n\n  sshPublicKey: c3NoLXJzYSAuLi4K # immutable, public `ssh` key of the user\n\n  ingress: # can only be updated by the creator of the bastion\n  - ipBlock:\n      cidr: 1.2.3.4/32 # public IP of the user. CIDR is a string representing the IP Block. Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\"\n\nstatus:\n  observedGeneration: 1\n\n  # the following fields are managed by the controller in the seed and synced by gardenlet\n  ingress: # IP or hostname of the bastion\n    ip: 1.2.3.5\n    # hostname: foo.bar\n\n  conditions:\n  - type: BastionReady # when the `status` is true of condition type `BastionReady`, the client can initiate the `ssh` connection\n    status: 'True'\n    lastTransitionTime: \"2021-03-19T11:59:00Z\"\n    lastUpdateTime: \"2021-03-19T11:59:00Z\"\n    reason: BastionReady\n    message: Bastion for the cluster is ready.\n\n  # the following fields are only set by the GAPI\n  lastHeartbeatTimestamp: \"2021-03-19T11:58:00Z\" # will be set when setting the annotation gardener.cloud/operation: keepalive\n  expirationTimestamp: \"2021-03-19T12:58:00Z\" # extended on each keepalive\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Receivers in Shoot Specification\nDESCRIPTION: YAML configuration to set up email receivers for alerts in the shoot cluster specification. This allows end-users to receive email notifications when something is wrong with their shoot cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/alerting.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  monitoring:\n    alerting:\n      emailReceivers:\n      - john.doe@example.com\n```\n\n----------------------------------------\n\nTITLE: Structured Log Output for Object References\nDESCRIPTION: Examples of JSON-formatted structured log output for both approaches to logging object references, showing how each approach produces clear, processable logs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{\"level\":\"info\",\"ts\":\"2022-01-18T18:00:56.672+0100\",\"msg\":\"Shoot uses SecretBinding\",\"name\":\"my-shoot\",\"namespace\":\"garden-project\",\"secretBinding\":{\"namespace\":\"garden-project\",\"name\":\"aws\"}}\n{\"level\":\"info\",\"ts\":\"2022-01-18T18:00:56.673+0100\",\"msg\":\"Shoot uses SecretBinding\",\"name\":\"my-shoot\",\"namespace\":\"garden-project\",\"secretBindingName\":\"aws\"}\n```\n\n----------------------------------------\n\nTITLE: Using the gardenadm token generate Command\nDESCRIPTION: This command generates a random bootstrap token for Gardener. Bootstrap tokens are used for node authentication during the join process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_generate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm token generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Versions in CloudProfile YAML\nDESCRIPTION: Example YAML configuration for specifying Kubernetes versions in the CloudProfile. It demonstrates how to list multiple versions, including expired ones, to ensure proper upgrade paths for Shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_versions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    versions:\n    - version: 1.26.9\n    - version: 1.25.10\n    - version: 1.25.9\n    - version: 1.24.12\n      expirationDate: \"<expiration date in the past>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Redis with Existing PersistentVolumeClaim\nDESCRIPTION: Helm command for installing Redis using an existing PersistentVolumeClaim, which allows for reusing previously configured persistent storage.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set persistence.existingClaim=PVC_NAME stable/redis\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern for Parsing Alertmanager Logs\nDESCRIPTION: Regular expression pattern that extracts severity, timestamp, source, and log message from alertmanager log format. This pattern identifies four distinct groups in the alertmanager logs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n^level=(?<severity>\\w+)\\s+ts=(?<time>\\d{4}-\\d{2}-\\d{2}[Tt].*[zZ])\\s+caller=(?<source>[^\\s]*+)\\s+(?<log>.*)\n```\n\n----------------------------------------\n\nTITLE: Overriding Kubernetes Version Lifecycles in Gardener NamespacedCloudProfile (YAML)\nDESCRIPTION: This YAML snippet shows an example `NamespacedCloudProfile` resource (`core.gardener.cloud/v1beta1`) overriding the lifecycle stages for specific Kubernetes versions (1.28.0, 1.18.0) defined in its base `CloudProfile`. It illustrates how the `startTime` for 'supported' and 'deprecated' stages can be modified and includes the resulting `status.cloudProfileSpec` showing the merged and potentially implicitly adjusted lifecycle configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: NamespacedCloudProfile\nmetadata:\n  name: local\n  namespace: shoot\nspec:\n  kubernetes:\n    versions:\n      # omitted versions will not be changed\n\n      - version: 1.28.0\n        lifecycle:\n          # preview stage will stay as is\n          - classification: supported\n            startTime: \"2025-12-01T00:00:00Z\" # postpones the start time\n\n      - version: 1.18.0\n        lifecycle:\n          - classification: supported\n            startTime: \"2022-01-01T00:00:00Z\" # adds a startTime to supported\n          - classification: deprecated\n            startTime: \"2024-06-01T00:00:00Z\" # postpones deprecated even after expired\n          # expired stage will be adjusted to the startTime of deprecated to avoid the version to expire before deprecation\nstatus:\n  cloudProfileSpec:\n      kubernetes:\n      versions:\n        - version: 1.27.0 # from base\n\n        - version: 1.28.0\n          lifecycle:\n            - classification: preview # from base\n            - classification: supported\n              startTime: \"2025-12-01T00:00:00Z\" # override\n  \n        - version: 1.18.0\n          lifecycle:\n            - classification: supported\n              startTime: \"2022-01-01T00:00:00Z\" # override\n            - classification: deprecated\n              startTime: \"2024-06-01T00:00:00Z\" # override\n            - classification: expired\n              startTime: \"2024-06-01T00:00:00Z\" # implicit override, explained below\n\n        # from base\n        - version: 2.0.0\n          lifecycle:\n            - classification: preview\n              startTime: \"2036-02-07T06:28:16Z\"\n```\n\n----------------------------------------\n\nTITLE: Defining AdminKubeconfigRequest Schema in YAML\nDESCRIPTION: This code snippet defines the structure of the AdminKubeconfigRequest resource, which allows users to specify the expiration time for the generated kubeconfig in seconds.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/16-adminkubeconfig-subresource.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: authentication.gardener.cloud/v1alpha1\nkind: AdminKubeconfigRequest\nspec:\n  expirationSeconds: 3600\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ControlPlaneStatus Structure (v1alpha1)\nDESCRIPTION: Defines the status for a ControlPlane resource. It primarily embeds the common DefaultStatus structure used across Gardener extension resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nField          Description\n-------------- ----------------------------------------------------------------------------------\n// Embedded DefaultStatus fields\nDefaultStatus  DefaultStatus is a structure containing common fields used by all extension resources.\n(DefaultStatus)\n```\n\n----------------------------------------\n\nTITLE: Updating EnvoyFilter for Reversed-VPN in Diff Format\nDESCRIPTION: This code snippet presents a diff illustrating changes made to the EnvoyFilter named 'reversed-vpn'. It aims to support additional HTTP header checks for proxy destinations using regex validation. This ensures compatibility with shoot API servers and VPN servers while simplifying external authorization configurations. The main changes include extending route matchers for custom headers and removing deprecated external server settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/30-apiserver-proxy.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n apiVersion: networking.istio.io/v1alpha3\n kind: EnvoyFilter\n metadata:\n   name: reversed-vpn\n spec:\n   configPatches:\n   - applyTo: NETWORK_FILTER\n     match:\n       context: GATEWAY\n       listener:\n         filterChain:\n           filter:\n             name: envoy.filters.network.http_connection_manager\n         portNumber: 8132\n     patch:\n       operation: MERGE\n       value:\n         name: envoy.filters.network.http_connection_manager\n         typed_config:\n           '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n           route_config:\n             virtual_hosts:\n             - domains: \n               - api.*\n               name: reversed-vpn\n               routes:\n               - match:\n                   connect_matcher: {}\n+                  headers:\n+                  - name: Reversed-VPN\n+                    string_match:\n+                      safe_regex: '^outbound\\|1194\\|\\|vpn-seed-server(-[0-4])?\\..*\\.svc\\.cluster\\.local$'\n                 route:\n                   cluster_header: Reversed-VPN\n                   upgrade_configs:\n                   - connect_config: {}\n                     upgrade_type: CONNECT\n+              - match:\n+                  connect_matcher: {}\n+                  headers:\n+                  - name: X-Gardener-Destination\n+                    string_match:\n+                      # see https://regex101.com/r/m0ZAAj/1\n+                      safe_regex: '^outbound\\|(1194\\|\\|vpn-seed-server(-[0-4])?|443\\|\\|kube-apiserver)\\..*\\.svc\\.cluster\\.local$'\n+                route:\n+                 cluster_header: X-Gardener-Destination\n+                 upgrade_configs:\n+                 - connect_config: {}\n+                   upgrade_type: CONNECT\n               - match:\n                   headers:\n                   - invert_match: true\n                     name: :method\n                     string_match:\n                       exact: CONNECT\n                   prefix: /\n                 redirect:\n                   https_redirect: true\n                   port_redirect: 443\n-                typed_per_filter_config:\n-                  envoy.filters.http.ext_authz:\n-                    '@type': type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\n-                    disabled: true\n\n# ...\n\n-  - applyTo: HTTP_FILTER\n-    match:\n-      context: GATEWAY\n-      listener:\n-        filterChain:\n-          filter:\n-            name: envoy.filters.network.http_connection_manager\n-            subFilter:\n-              name: envoy.filters.http.router\n-        portNumber: 8132\n-    patch:\n-      filterClass: AUTHZ\n-      operation: INSERT_BEFORE\n-      value:\n-        name: envoy.filters.http.ext_authz\n-        typed_config:\n-          '@type': type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n-          grpc_service:\n-            envoy_grpc:\n-              cluster_name: outbound|9001||reversed-vpn-auth-server.garden.svc.cluster.local\n\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerResourceLifecycleStrategy Type in Gardener\nDESCRIPTION: Definition of ControllerResourceLifecycleStrategy type alias used in ControllerResourceLifecycle for defining strategies during reconciliation, deletion, and migration operations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n<h3 id=\"core.gardener.cloud/v1beta1.ControllerResourceLifecycleStrategy\">ControllerResourceLifecycleStrategy\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#core.gardener.cloud/v1beta1.ControllerResourceLifecycle\">ControllerResourceLifecycle</a>)\n</p>\n<p>\n<p>ControllerResourceLifecycleStrategy is a string alias.</p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Credentials Struct in Go\nDESCRIPTION: Credentials contains information about the virtual garden cluster credentials. It includes a field for credential rotation configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Credentials struct {\n  Rotation *CredentialsRotation `json:\"rotation,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bastion Resource in Go\nDESCRIPTION: Defines the Bastion struct representing an SSH bastion for a shoot cluster. It includes fields for API version, kind, metadata, spec, and status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operations.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Bastion struct {\n\tmetav1.TypeMeta\n\tmetav1.ObjectMeta\n\tSpec   BastionSpec\n\tStatus BastionStatus\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackupEntry CRD for Garden Cluster in YAML\nDESCRIPTION: Specification for the new BackupEntry CRD at garden cluster level. It includes shoot references, owner references, and bucket information to maintain shoot-specific backup entries.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: garden.cloud/v1alpha1\nkind: BackupEntry\nmetadata:\n  name: shoot--dev--example--3ef42 # Naming convention explained before\n  namespace: garden-dev\n  ownerReferences:\n  - apiVersion: core.gardener.cloud/v1beta1\n    blockOwnerDeletion: false\n    controller: true\n    kind: Shoot\n    name: example\n    uid: 19a9538b-5058-11e9-b5a6-5e696cab3bc8\nspec:\n  shootUID: 19a9538b-5058-11e9-b5a6-5e696cab3bc8 # Just for reference to find back associated shoot.\n  # The following section comes from cloudProfile or seed yaml based on granularity decision.\n  bucketName: packet-region1-uid[:5]\nstatus:\n  lastOperation: ...\n  observedGeneration: ...\n  seed: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring PodDisruptionBudget for High Availability in Kubernetes\nDESCRIPTION: Standard PodDisruptionBudget configuration for high availability components in Gardener. It allows a maximum of one pod to be unavailable during voluntary disruptions and permits eviction of unhealthy pods.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/high-availability-of-components.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  maxUnavailable: 1\n  unhealthyPodEvictionPolicy: AlwaysAllow\n  selector:\n    matchLabels: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing ForceDelete in Generic Actuator-based Controllers (Go)\nDESCRIPTION: Example of overriding the ForceDelete method in extension controllers based on generic actuators, such as the Azure controlplane controller.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/force-deletion.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ForceDelete method implementation\nfunc (a *actuator) ForceDelete(ctx context.Context, infra *extensionsv1alpha1.Infrastructure) error {\n    // Custom force deletion logic\n    // ...\n\n    // Call the regular Delete method if graceful deletion is possible\n    return a.Delete(ctx, infra)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS for Virtual Garden Cluster Access\nDESCRIPTION: Adds an entry to the /etc/hosts file to enable DNS resolution for the virtual garden cluster API server.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | sudo tee -a /etc/hosts\n\n# Manually created to access local Gardener virtual garden cluster.\n# TODO: Remove this again when the virtual garden cluster access is no longer required.\n172.18.255.3 api.virtual-garden.local.gardener.cloud\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a ManagedSeed with a seedTemplate in Gardener (YAML)\nDESCRIPTION: This YAML manifest defines a `ManagedSeed` resource named 'crazy-botany' in the 'garden' namespace. It uses the `seedTemplate` section to specify the details of the Seed resource that will be created, including metadata (labels) and spec (provider type, region, taints), based on the Shoot named 'crazy-botany'. This configuration does not deploy a `gardenlet` to the Shoot.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/13-automated-seed-management.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: seedmanagement.gardener.cloud/v1alpha1\nkind: ManagedSeed\nmetadata:\n  name: crazy-botany\n  namespace: garden\nspec:\n  shoot:\n    name: crazy-botany # Shoot that should be registered as a Seed\n  seedTemplate: # Seed template, including spec and parts of the metadata\n    metadata:\n      labels:\n        foo: bar\n    spec:\n      provider:\n        type: gcp\n        region: europe-west1\n      taints:\n      - key: seed.gardener.cloud/protected\n      ...\n```\n\n----------------------------------------\n\nTITLE: Requesting a Workload Identity Token in Gardener (YAML)\nDESCRIPTION: This YAML snippet shows an example `TokenRequest` resource within the `security.gardener.cloud/v1alpha1` API group. It's used to request a JWT for a specific context (e.g., a Shoot object referenced in `contextObject`) and can specify a desired token expiration (`expirationSeconds`). The API server responds with the generated JWT (`status.token`) and its expiration timestamp (`status.expirationTimestamp`); this resource is not persisted.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/26-workload-identity.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.gardener.cloud/v1alpha1\nkind: TokenRequest\nspec:\n  contextObject: # Optional field, various metadata about context of use of the token\n    apiVersion: core.gardener.cloud/v1beta1\n    kind: Shoot\n    name: foo\n    namespace: garden-local\n    uid: 54d09554-6a68-4f46-a23a-e3592385d820\n  expirationSeconds: 600 # Optional field, gardener will set default value of 3600 seconds for token duration if the field is unset.\nstatus:\n  token: eyJhbGciOiJ....OkBBrVWA # The generated OIDC token\n  expirationTimestamp: 2024-02-09T16:35:02Z\n```\n\n----------------------------------------\n\nTITLE: Executing Shoot Test Suite with Ginkgo\nDESCRIPTION: Command example for running the shoot test suite with Ginkgo, showing how to specify test focus and skip options, as well as shoot and project parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test -timeout=0 ./test/testmachinery/suites/shoot \\\n      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\\n      --report-file=/tmp/report.json \\\n      --disable-dump=false \\\n      -kubecfg=/path/to/gardener/kubeconfig \\\n      -shoot-name=<shoot-name> \\\n      -project-namespace=<gardener project namespace> \\\n      -ginkgo.focus=\"\\[RELEASE\\]\" \\\n      -ginkgo.skip=\"\\[SERIAL\\]|\\[DISRUPTIVE\\]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Rules for Gardener Monitoring\nDESCRIPTION: Example alert rule configuration that demonstrates the structure of an alert definition including expressions, labels for routing, and annotations for documentation. Shows proper formatting for alert severity, type, and visibility labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/monitoring-stack.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n* name: example.rules\n  rules:\n  * alert: ExampleAlert\n    expr: absent(up{job=\"exampleJob\"} == 1)\n    for: 20m\n    labels:\n      service: example\n      severity: critical # How severe is the alert? (blocker|critical|info|warning)\n      type: shoot # For which topology is the alert relevant? (seed|shoot)\n      visibility: all # Who should receive the alerts? (all|operator|owner)\n    annotations:\n      description: A longer description of the example alert that should also explain the impact of the alert.\n      summary: Short summary of an example alert.\n```\n\n----------------------------------------\n\nTITLE: Running Skaffold Development Loop\nDESCRIPTION: Command to start a Skaffold development loop for the operator seed environment.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nmake operator-seed-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Resource in YAML for Gardener Extensions\nDESCRIPTION: This YAML snippet demonstrates the structure of a Cluster resource in Gardener. It includes metadata and spec sections, with the spec containing CloudProfile, Seed, and Shoot manifests. This resource is created by Gardener before starting the shoot reconciliation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Cluster\nmetadata:\n  name: shoot--foo--bar\nspec:\n  cloudProfile:\n    apiVersion: core.gardener.cloud/v1beta1\n    kind: CloudProfile\n    ...\n  seed:\n    apiVersion: core.gardener.cloud/v1beta1\n    kind: Seed\n    ...\n  shoot:\n    apiVersion: core.gardener.cloud/v1beta1\n    kind: Shoot\n    ...\n```\n\n----------------------------------------\n\nTITLE: TokenReview Response After Successful OIDC Authentication via OWA (JSON)\nDESCRIPTION: This JSON snippet shows the TokenReview object sent by OWA after a successful OIDC token validation. In addition to the standard Kubernetes user fields, it adds extra fields specific to the Gardener OWA implementation, including the authenticator name and UID. Dependencies include an OWA deployment and the OpenIDConnect CRD setup in the target Kubernetes cluster. Inputs: user token, success in authenticator list. Outputs: user identity, group affiliation, and OWA authenticator info for downstream authorization/decision logic. Intended for API responses and auditing purposes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"TokenReview\\\": {\\n    \\\"kind\\\": \\\"TokenReview\\\",\\n    \\\"apiVersion\\\": \\\"authentication.k8s.io/v1beta1\\\",\\n    \\\"spec\\\": {\\n      \\\"token\\\": \\\"ddeewfwef...\\\"\\n    },\\n    \\\"status\\\": {\\n      \\\"authenticated\\\": true,\\n      \\\"user\\\": {\\n        \\\"username\\\": \\\"test-foo@bar.com\\\",\\n        \\\"groups\\\": [\\n          \\\"baz-employee\\\"\\n        ],\\n        \\\"extra\\\": {\\n          \\\"gardener.cloud/authenticator/name\\\": [\\n            \\\"foo\\\"\\n          ],\\n          \\\"gardener.cloud/authenticator/uid\\\": [\\n            \\\"e5062528-e5a4-4b97-ad83-614d015b0979\\\"\\n          ]\\n        }\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Validation for Managed OIDC Issuer in Go\nDESCRIPTION: Go code for implementing static validation rules that ensure the shoot.Spec.Kubernetes.KubeAPIServer.ServiceAccountConfig.Issuer is not set when using the managed issuer annotation, and that the annotation cannot be removed once set.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/24-shoot-oidc-issuer.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif oldShoot.Annotations[\"authentication.gardener.cloud/issuer\"] == \"managed\" {\n    // ensure that the new shoot also has this annotation\n    // ensure that newShoot.Spec.Kubernetes.KubeAPIServer.ServiceAccountConfig.Issuer is not set\n    // ensure that the shoot is not configured as workerless\n    newShoot.Annotations[\"authentication.gardener.cloud/issuer\"] = \"managed\"\n} else if newShoot.Annotations[\"authentication.gardener.cloud/issuer\"] == \"managed\" {\n    // ensure that newShoot.Spec.Kubernetes.KubeAPIServer.ServiceAccountConfig.Issuer is not set\n    // ensure that the shoot is not configured as workerless\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Log Output Format Example\nDESCRIPTION: Example of the JSON-formatted structured log output produced when logging object keys, showing how name and namespace are properly structured.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{\"level\":\"info\",\"ts\":\"2021-12-16T08:32:21.059+0100\",\"msg\":\"Creating Deployment\",\"deployment\":{\"name\": \"bar\", \"namespace\": \"foo\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Security Context\nDESCRIPTION: Example of configuring container security context with necessary Linux capabilities while avoiding privileged mode.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/component-checklist.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nSecurityContext: &v1.SecurityContext{\n    Privileged: pointer.Bool(false),\n    Capabilities: &v1.Capabilities{\n        Add: []v1.Capability{\"NET_ADMIN\", \"NET_RAW\"},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Roles in a Gardener Project Resource\nDESCRIPTION: This YAML example demonstrates how to configure a Project resource with an extension role 'foo' for a user. Extension roles are prefixed with 'extension:' and allow extension controllers to provide custom permissions to project members.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/project-roles.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Project\nmetadata:\n  name: dev\nspec:\n  members:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: alice.doe@example.com\n    role: admin\n    roles:\n    - owner\n    - extension:foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Gardenlet Kubeconfig Secret in Values\nDESCRIPTION: YAML configuration for the gardenClientConnection.kubeconfigSecret section in the gardenlet configuration. This defines where the gardenlet should store the real kubeconfig after the bootstrap process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngardenClientConnection:\n  kubeconfigSecret:\n    name: gardenlet-kubeconfig\n    namespace: garden\n```\n\n----------------------------------------\n\nTITLE: Applying Taints for Unreachable Nodes in Kubernetes\nDESCRIPTION: When a node becomes unreachable, kube-controller-manager applies NoSchedule and NoExecute taints to prevent new pods from being scheduled and to evict existing pods. This YAML snippet shows the structure of these taints.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntaints:\n- effect: NoSchedule\n  key: node.kubernetes.io/unreachable\n- effect: NoExecute\n  key: node.kubernetes.io/unreachable\n```\n\n----------------------------------------\n\nTITLE: Istio Gateway and Virtual Service Configuration\nDESCRIPTION: YAML configuration for setting up Istio Gateway, VirtualService, and EnvoyFilter for PROXY protocol support on port 8443\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: blackhole\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 8443\n      name: tcp\n      protocol: TCP\n    hosts:\n    - \"*\"\n\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: blackhole\n  namespace: istio-system\nspec:\n  hosts:\n  - blackhole.local\n  gateways:\n  - blackhole\n  tcp:\n  - match:\n    - port: 8443\n    route:\n    - destination:\n        host: localhost\n        port:\n          number: 9999 # any dummy port will work\n\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nmetadata:\n  name: proxy-protocol\n  namespace: istio-system\nspec:\n  workloadSelector:\n    labels:\n      istio: ingressgateway\n  configPatches:\n  - applyTo: LISTENER\n    match:\n      context: ANY\n      listener:\n        portNumber: 8443\n        name: 0.0.0.0_8443\n    patch:\n      operation: MERGE\n      value:\n        listener_filters:\n        - name: envoy.filters.listener.proxy_protocol\n```\n\n----------------------------------------\n\nTITLE: Using Generated Gardener Client Sets for Custom Resources\nDESCRIPTION: Shows how to use Gardener's generated client sets to interact with Gardener-specific custom resources (Shoot in this example). Demonstrates the client-go style pattern applied to Gardener's extended API resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  ctx   context.Context\n  c     gardencoreclientset.Interface // \"github.com/gardener/gardener/pkg/client/core/clientset/versioned\"\n  shoot *gardencorev1beta1.Shoot      // \"github.com/gardener/gardener/pkg/apis/core/v1beta1\"\n)\n\nupdatedShoot, err := c.CoreV1beta1().Shoots(\"garden-my-project\").Update(ctx, shoot, metav1.UpdateOptions{})\n```\n\n----------------------------------------\n\nTITLE: Test Framework Elasticsearch Bulk Report JSON Example\nDESCRIPTION: Example JSON document structure generated by the framework for Elasticsearch reporting. Each test case is documented with metadata from the test suite, including test name, labels, phase, and execution time.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"suite\": {\n        \"name\": \"Shoot Test Suite\",\n        \"phase\": \"Succeeded\",\n        \"tests\": 3,\n        \"failures\": 1,\n        \"errors\": 0,\n        \"time\": 87.427\n    },\n    \"name\": \"Shoot application testing  [DEFAULT] [RELEASE] [SHOOT] should download shoot kubeconfig successfully\",\n    \"shortName\": \"should download shoot kubeconfig successfully\",\n    \"labels\": [\n        \"DEFAULT\",\n        \"RELEASE\",\n        \"SHOOT\"\n    ],\n    \"phase\": \"Succeeded\",\n    \"time\": 0.724512057\n}\n```\n\n----------------------------------------\n\nTITLE: SubjectAccessReview for Authorization of API Server (JSON)\nDESCRIPTION: This JSON snippet is a complete example of a SubjectAccessReview request/response objects, used to determine if a given user or API server (identified by groups and user fields) may perform the /validate-token operation. It is only valid with Kubernetes authorization.k8s.io/v1 APIs, requiring access to this endpoint. Key parameters are the user, groups, and nonResourceAttributes designating the action and HTTP verb. Output is a decision on whether token validation is allowed, including rationale. Used by OWA and RBAC managers for policy enforcement.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/12-oidc-webhook-authenticator.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"apiVersion\\\": \\\"authorization.k8s.io/v1\\\",\\n  \\\"kind\\\": \\\"SubjectAccessReview\\\",\\n  \\\"spec\\\": {\\n    \\\"groups\\\": [\\n      \\\"system:serviceaccounts\\\",\\n      \\\"system:serviceaccounts:shoot--abcd\\\",\\n      \\\"system:authenticated\\\"\\n    ],\\n    \\\"nonResourceAttributes\\\": {\\n      \\\"path\\\": \\\"/validate-token\\\",\\n      \\\"verb\\\": \\\"post\\\"\\n    },\\n    \\\"user\\\": \\\"system:serviceaccount:shoot--abcd:kube-apiserver\\\"\\n  },\\n  \\\"status\\\": {\\n    \\\"allowed\\\": true,\\n    \\\"reason\\\": \\\"RBAC: allowed by RoleBinding \\\\\\\"kube-apiserver\\\\\\\" of ClusterRole \\\\\\\"kube-apiserver\\\\\\\" to ServiceAccount \\\\\\\"system:serviceaccount:shoot--abcd:kube-apiserver\\\\\\\"\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Kubeconfig via Go\nDESCRIPTION: Go code using controller-runtime client to request a temporary admin kubeconfig. Creates an AdminKubeconfigRequest with 10-minute expiration period.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexpiration := 10 * time.Minute\nexpirationSeconds := int64(expiration.Seconds())\nadminKubeconfigRequest := &authenticationv1alpha1.AdminKubeconfigRequest{\n  Spec: authenticationv1alpha1.AdminKubeconfigRequestSpec{\n    ExpirationSeconds: &expirationSeconds,\n  },\n}\nerr := client.SubResource(\"adminkubeconfig\").Create(ctx, shoot, adminKubeconfigRequest)\nif err != nil {\n  return err\n}\nconfig = adminKubeconfigRequest.Status.Kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shoot's Monitoring Secret\nDESCRIPTION: Command to retrieve the monitoring secret for a shoot cluster, which contains the credentials needed to access the Prometheus instance.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get secret <shoot-name>.monitoring -o yaml\n```\n\n----------------------------------------\n\nTITLE: Defining DNSDomain Struct in Go\nDESCRIPTION: DNSDomain defines a DNS domain with optional provider. This struct is not fully defined in the provided specification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype DNSDomain struct {\n  // Fields not specified in the provided API doc\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Seccomp Profile\nDESCRIPTION: Examples of configuring Seccomp profiles for containers in both seed and shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/component-checklist.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nSecurityContext: &v1.PodSecurityContext{\n    SeccompProfile: &v1.SeccompProfile{\n        Type: v1.SeccompProfileTypeRuntimeDefault,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint with Logcheck\nDESCRIPTION: Command to run golangci-lint with the logcheck plugin enabled.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Checking Seed Status with kubectl\nDESCRIPTION: This command checks the status of the local Seed cluster. The output shows a ready Seed with name, status, provider, region, age, version, and Kubernetes version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNAME    STATUS   PROVIDER   REGION   AGE     VERSION       K8S VERSION\nlocal   Ready    local      local    4m42s   vX.Y.Z-dev    v1.28.1\n```\n\n----------------------------------------\n\nTITLE: Logging Object Keys with Client.ObjectKey in Go\nDESCRIPTION: Example of logging object keys (name and namespace) using the object's type as the log key and a client.ObjectKey as the value, resulting in structured logs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar deployment *appsv1.Deployment\nlog.Info(\"Creating Deployment\", \"deployment\", client.ObjectKeyFromObject(deployment))\n```\n\n----------------------------------------\n\nTITLE: OperatingSystemConfig Status Update in YAML\nDESCRIPTION: An example of the status field update for an OperatingSystemConfig resource. It references the secret containing the generated configuration and includes operation status details.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\nstatus:\n  cloudConfig:\n    secretRef:\n      name: osc-result-pool-01-original\n      namespace: default\n  lastOperation:\n    description: Successfully generated cloud config\n    lastUpdateTime: \"2019-01-23T07:45:23Z\"\n    progress: 100\n    state: Succeeded\n    type: Reconcile\n  observedGeneration: 5\n```\n\n----------------------------------------\n\nTITLE: Defining Networking Parameters Structure - Gardener Go\nDESCRIPTION: Establishes a Go struct called Networking, used to configure networking settings for a virtual garden cluster. The main field, Services, lists one or more service CIDRs, which are additive over time (cannot be removed after creation). This pattern mirrors Kubernetes' own networking configuration practices. Intended for use in cluster specification objects.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype Networking struct {\n    Services []string `json:\"services\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedSeedSetStatus Object in Kubernetes\nDESCRIPTION: Status representation of a ManagedSeedSet containing fields for observed generation, replica counts, revisions and conditions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/seedmanagement.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nobservedGeneration: int64\nreplicas: int32\nreadyReplicas: int32\nnextReplicaNumber: int32\ncurrentReplicas: int32\nupdatedReplicas: int32\ncurrentRevision: string\nupdateRevision: string\ncollisionCount: int32\nconditions: []Condition\npendingReplica: PendingReplica\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Local Operator\nDESCRIPTION: Executes end-to-end tests for the local Gardener Operator setup.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmake test-e2e-local-operator\n```\n\n----------------------------------------\n\nTITLE: Testing New Tests with Shoot Suite in Console\nDESCRIPTION: Command for testing newly created tests with the shoot test suite by focusing on specific tests and providing the necessary parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngo test -timeout=0 ./test/testmachinery/suites/shoot \\\n      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\\n      --report-file=/tmp/report.json \\\n      --disable-dump=false \\\n      -kubecfg=/path/to/gardener/kubeconfig \\\n      -shoot-name=<shoot-name> \\\n      -project-namespace=<gardener project namespace> \\\n      -fenced=<true|false>\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Kubeconfig via Python\nDESCRIPTION: Python script using kubernetes-client to load existing kubeconfig and create a new admin kubeconfig for a shoot cluster. Includes setup of API client for cluster interaction.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_access.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nimport json\nfrom kubernetes import client, config\nimport yaml\n\n# Set configuration options\nshoot_name=\"my-shoot\" # Name of the shoot\nproject_namespace=\"garden-my-namespace\" # Namespace of the project\n\n# Load kubeconfig from default ~/.kube/config\nconfig.load_kube_config()\napi = client.ApiClient()\n\n# Create kubeconfig request\nkubeconfig_request = {\n    'apiVersion': 'authentication.gardener.cloud/v1alpha1',\n    'kind': 'AdminKubeconfigRequest',\n    'spec': {\n      'expirationSeconds': 600\n    }\n}\n\nresponse = api.call_api(resource_path=f'/apis/core.gardener.cloud/v1beta1/namespaces/{project_namespace}/shoots/{shoot_name}/adminkubeconfig',\n                        method='POST',\n                        body=kubeconfig_request,\n                        auth_settings=['BearerToken'],\n                        _preload_content=False,\n                        _return_http_data_only=True,\n                       )\n\ndecoded_kubeconfig = base64.b64decode(json.loads(response.data)[\"status\"][\"kubeconfig\"]).decode('utf-8')\nprint(decoded_kubeconfig)\n\n# Create an API client to interact with the shoot cluster\nshoot_api_client = config.new_client_from_config_dict(yaml.safe_load(decoded_kubeconfig))\nv1 = client.CoreV1Api(shoot_api_client)\n```\n\n----------------------------------------\n\nTITLE: Defining Destination Header for Envoy HTTP CONNECT Requests (Text/Envoy Cluster String)\nDESCRIPTION: This textual snippet shows the format of the custom X-Gardener-Destination HTTP header to be used in HTTP CONNECT requests for routing via Envoy. The value follows the Envoy cluster string format to indicate the intended destination service. This header is required for proper routing when implementing the tunneling configuration and must match the target cluster convention in the Gardener network infrastructure. Inputs are the service parameters for the shoot; the output is used in header-based cluster selection within Envoy.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/30-apiserver-proxy.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\noutbound|443||kube-apiserver.<technical-shoot-id>.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Initializing the First Control Plane Node with gardenadm (CLI)\nDESCRIPTION: The `gardenadm init` command bootstraps the first control plane node for a new autonomous shoot cluster. It handles complex setup tasks including potentially faking a Kubernetes API temporarily, managing network configurations, dealing with webhooks, and setting up etcd via etcd-druid. Requires a host meeting specified prerequisites.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm init\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener SecretBinding Resource and Associated Secret in YAML\nDESCRIPTION: This snippet defines a Gardener `SecretBinding` resource and the Kubernetes `Secret` it references. The `Secret` (`secret1`) stores provider-specific credentials required for operations within the scope of the binding, potentially including DNS management keys. The `SecretBinding` resource links this `Secret` (potentially from a different namespace) to the current namespace (`garden-core`), making the credentials available, for example, to `Shoot` resources created in this namespace. It can optionally reference quotas.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret1\n  namespace: garden-core\ntype: Opaque\ndata:\n  # <some-provider-specific data keys>\n  # https://github.com/gardener/gardener-extension-provider-alicloud/blob/master/example/30-infrastructure.yaml#L14-L15\n  # https://github.com/gardener/gardener-extension-provider-aws/blob/master/example/30-infrastructure.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-azure/blob/master/example/30-infrastructure.yaml#L14-L17\n  # https://github.com/gardener/gardener-extension-provider-gcp/blob/master/example/30-infrastructure.yaml#L14\n  # https://github.com/gardener/gardener-extension-provider-openstack/blob/master/example/30-infrastructure.yaml#L15-L18\n  # https://github.com/gardener/gardener-extension-provider-packet/blob/master/example/30-infrastructure.yaml#L14-L15\n  #\n  # If you use your own domain (not the default domain of your landscape) then you have to add additional keys to this secret.\n  # The reason is that the DNS management is not part of the Gardener core code base but externalized, hence, it might use other\n  # key names than Gardener itself.\n  # The actual values here depend on the DNS extension that is installed to your landscape.\n  # For example, check out https://github.com/gardener/external-dns-management and find a lot of example secret manifests here:\n  # https://github.com/gardener/external-dns-management/tree/master/examples\n\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: SecretBinding\nmetadata:\n  name: secretbinding1\n  namespace: garden-core\nsecretRef:\n  name: secret1\n# namespace: namespace-other-than-'garden-core' // optional\nquotas: []\n# - name: quota-1\n# # namespace: namespace-other-than-'garden-core' // optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Gardener Virtual Cluster for Extension Admission\nDESCRIPTION: YAML configuration passed to the chart during reconciliation for the virtual part of admission service, which includes webhook registration and RBAC configuration. Specifies the service account details used to connect to the garden cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngardener:\n  virtualCluster:\n    serviceAccount:\n      name: <Name of the service account used to connect to the garden cluster>\n      namespace: <Namespace of the service account>\n```\n\n----------------------------------------\n\nTITLE: Logging Object References in Go\nDESCRIPTION: Two approaches for logging object references: constructing a full object key or using a name-specific log key when only the name is available.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  // object to reconcile\n  shoot *gardencorev1beta1.Shoot\n  // retrieved via logf.FromContext, preconfigured by controller with namespace and name of reconciliation request\n  log logr.Logger\n)\n\n// option a: full object key, manually constructed\nlog.Info(\"Shoot uses SecretBinding\", \"secretBinding\", client.ObjectKey{Namespace: shoot.Namespace, Name: *shoot.Spec.SecretBindingName})\n// option b: only name under respective *Name log key\nlog.Info(\"Shoot uses SecretBinding\", \"secretBindingName\", *shoot.Spec.SecretBindingName)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Shoot Readiness with wait-for.sh Script\nDESCRIPTION: This command waits for the Shoot cluster in the garden-local namespace to be ready with all required components including API server, control plane, observability components, nodes, and system components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE=garden-local ./hack/usage/wait-for.sh shoot local APIServerAvailable ControlPlaneHealthy ObservabilityComponentsHealthy EveryNodeReady SystemComponentsHealthy\n```\n\n----------------------------------------\n\nTITLE: Referencing Example InternalSecret Manifest in Gardener\nDESCRIPTION: Refers to an example InternalSecret manifest, which is a resource for storing Gardener-internal secrets that end-users don't have access to, similar to Kubernetes Secrets but with separate RBAC controls.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/11-internal-secret.yaml\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Framed Capability in YAML\nDESCRIPTION: Example of a poorly framed capability using boolean values, which makes it harder to compare values consistently or add new options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- capability name: supportsNVMe\n- capability values: true, false\n```\n\n----------------------------------------\n\nTITLE: Defining SNI TLS Configuration Structure - Gardener Go\nDESCRIPTION: This snippet defines the SNI struct, which encapsulates TLS Server Name Indication configuration settings for use in the Gardener system. It is referenced as an optional configuration block for virtual cluster networking or API server exposure. No direct dependencies are listed, but its use likely presupposes a Go project leveraging the Gardener API machinery.\nInputs/outputs: N/A (struct type definition); may be embedded into higher-level configuration objects.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype SNI struct {\n    // Fields for TLS SNI settings here (not detailed in snippet)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Positively Framed Capability in YAML\nDESCRIPTION: Example of a correctly framed capability for disc controller types, using positive values that can be matched using a union operation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- capability name: discControllerType\n- capability values: SCSI, NVMe, SCSI_MULTIQUEUE\n```\n\n----------------------------------------\n\nTITLE: Querying Pods in the Shoot Control Plane with kubectl\nDESCRIPTION: Command to list all pods in the shoot control plane namespace, showing their status, readiness, and the nodes they're running on.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get po -n <shoot-control-ns> # list of pods in the shoot control plane\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Framework Using YAML Configuration File Example\nDESCRIPTION: Example YAML configuration for the test framework showing how to set verbosity level, kubeconfig path, and project namespace. This configuration can be provided via the --config flag instead of individual command-line arguments.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nverbose: debug\nkubecfg: /kubeconfig/path\nproject-namespace: garden-it\n```\n\n----------------------------------------\n\nTITLE: Setting Up KinD Cluster\nDESCRIPTION: Command to create a local KinD cluster named 'gardener-local' for Gardener deployment. Can be configured for IPv6 with additional flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-up\n```\n\n----------------------------------------\n\nTITLE: Using Controller-Runtime Client for Resource Updates in Go\nDESCRIPTION: This snippet demonstrates how to use controller-runtime's generic client to update both built-in Kubernetes resources (Deployment) and custom resources (Shoot) in a uniform way. The client accepts any object implementing the client.Object interface.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  ctx        context.Context\n  c          client.Client            // \"sigs.k8s.io/controller-runtime/pkg/client\"\n  deployment *appsv1.Deployment       // \"k8s.io/api/apps/v1\"\n  shoot      *gardencorev1beta1.Shoot // \"github.com/gardener/gardener/pkg/apis/core/v1beta1\"\n)\n\nerr := c.Update(ctx, deployment)\n// or\nerr = c.Update(ctx, shoot)\n```\n\n----------------------------------------\n\nTITLE: Creating a Garden Resource\nDESCRIPTION: Applies a YAML configuration to create a Garden resource in the Kubernetes cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f example/operator/20-garden.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints for Single Zone in Kubernetes YAML\nDESCRIPTION: This snippet shows how to add topology spread constraints to a pod template spec when there's only one zone. It ensures pods are scheduled across different nodes within the zone.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n  - topologyKey: kubernetes.io/hostname\n    minDomains: 3 # lower value of max replicas or 3\n    maxSkew: 1\n    whenUnsatisfiable: ScheduleAnyway # or DoNotSchedule\n    matchLabelKeys: \n    - pod-template-hash\n    labelSelector: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Logging with Zap in Go\nDESCRIPTION: Example of setting up logging in test code to write logs to GinkgoWriter, which shows logs on test failure but not on success.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nlogf.SetLogger(logger.MustNewZapLogger(logger.DebugLevel, logger.FormatJSON, zap.WriteTo(GinkgoWriter)))\nlog := logf.Log.WithName(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Initiating ServiceAccount Token Signing Key Rotation in Gardener Shoot\nDESCRIPTION: This command starts the rotation process for the ServiceAccount token signing key by annotating the Shoot resource. It triggers stage one of the rotation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-serviceaccount-key-start\n```\n\n----------------------------------------\n\nTITLE: Deleting bulk keys from etcd by targeting follower node\nDESCRIPTION: Command to delete all keys in the range 0 to 99999 by targeting an etcd follower node. The output shows the command execution time details, with the operation completing in under 1 second.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ntime etcdctl --endpoints=https://etcd-main-1.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 del 0 99999    --dial-timeout=300s --command-timeout=300s\n```\n\n----------------------------------------\n\nTITLE: Aggregated Capabilities in CloudProfile YAML\nDESCRIPTION: Example of defining aggregated capabilities for machine image versions in a CloudProfile, showing architecture and capability sets.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# CloudProfile\nspec:\n  machineImages:\n    - name: gardenlinux\n      updateStrategy: minor\n      versions:\n        - architectures: [arm64, amd64]\n          classification: supported\n          capabilities: # all values in provider config aggregated per capability\n            hypervisorType: [\"gen2\", \"gen1\"]\n            network: [\"accelerated\", \"standard\"]\n          version: 1592.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Short-Term Network Extension Resource in Gardener\nDESCRIPTION: Simplified YAML configuration for the initial implementation of the Network resource in Gardener. It specifies the network plugin type and cloud provider without detailed configuration, which will be applied by the Network operator.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/03-networking-extensibility.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Network\nmetadata:\n  name: calico-network\n  namespace: shoot--core--test-01\nspec:\n  type: calico\n  cloudProvider: {aws,azure,...}\nstatus:\n  observedGeneration: 2\n  lastOperation: ...\n  lastError: ...\n```\n\n----------------------------------------\n\nTITLE: Checking Etcd Cluster Status with Endpoint Status Command\nDESCRIPTION: Command to display the status of all endpoints in an etcd cluster in a tabular format, showing endpoint URLs, IDs, versions, database sizes, leadership status, and raft protocol details.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\netcdctl endpoint status --cluster -w table\n```\n\n----------------------------------------\n\nTITLE: Kube-Proxy Configuration Type\nDESCRIPTION: Defines configuration for kube-proxy including proxy mode selection and enablement flags.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ntype KubeProxyConfig struct {\n  KubernetesConfig\n  Mode *ProxyMode\n  Enabled *bool\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AAAA DNS Records in DNSRecord API - YAML\nDESCRIPTION: This YAML snippet exemplifies creating a `DNSRecord` with a record type of `AAAA`, thereby allowing storage and provisioning of IPv6 addresses. The `values` field is used to supply IPv6 address(es) if `recordType` is `AAAA`. Consumers must support validation for both the AAAA type and proper IPv6 formatting in values. No additional dependencies, aside from a compliant Gardener extension controller, are necessary.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/21-ipv6-singlestack-local.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\\nkind: DNSRecord\\nspec:\\n  # ...\\n  recordType: AAAA\\n  values:\\n  - 2001:db8:f00::1\n```\n\n----------------------------------------\n\nTITLE: Additional Properties for Garden Deployment in YAML\nDESCRIPTION: These properties are automatically mixed into Helm values for garden deployments, providing runtime cluster information to extension controllers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ngardener:\n  runtimeCluster:\n    enabled: true\n    priorityClassName: <priority-class-name-for-extension>\n```\n\n----------------------------------------\n\nTITLE: Applying ClusterOpenIDConnectPreset Resource - Console\nDESCRIPTION: Applies the ClusterOpenIDConnectPreset manifest to the cluster using 'kubectl'. This command expects the manifest file ('preset.yaml') to be properly formed and the CRD to be registered; input is the filename, and the output is the creation or update of the cluster-scoped preset.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -f preset.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Gardener Components\nDESCRIPTION: Command to build base images and deploy Gardener resources into the cluster. Supports IPv6 configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake gardener-up\n```\n\n----------------------------------------\n\nTITLE: Checking Garden Resource Status with kubectl\nDESCRIPTION: Shell command to check the status of a Garden resource including Kubernetes version, Gardener version, and component status. This command helps verify if the virtual Garden cluster is ready for use.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get garden crazy-botany\n```\n\n----------------------------------------\n\nTITLE: Additional Properties for Seed Deployment in YAML\nDESCRIPTION: These properties are automatically mixed into Helm values for seed deployments, providing detailed information about the garden, seed cluster, and Gardenlet configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ngardener:\n  version: <gardener-version>\n  garden:\n    clusterIdentity: <uuid-of-gardener-installation>\n    genericKubeconfigSecretName: <generic-garden-kubeconfig-secret-name>\n  seed:\n    name:             <seed-name>\n    clusterIdentity:  <seed-cluster-identity>\n    annotations:      <seed-annotations>\n    labels:           <seed-labels>\n    provider:         <seed-provider-type>\n    region:           <seed-region>\n    volumeProvider:   <seed-first-volume-provider>\n    volumeProviders:  <seed-volume-providers>\n    ingressDomain:    <seed-ingress-domain>\n    protected:        <seed-protected-taint>\n    visible:          <seed-visible-setting>\n    taints:           <seed-taints>\n    networks:         <seed-networks>\n    blockCIDRs:       <seed-networks-blockCIDRs>\n    spec:             <seed-spec>\n  gardenlet:\n    featureGates: <gardenlet-feature-gates>\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes struct in Go\nDESCRIPTION: This struct defines the configuration for the Kubernetes control plane in a Shoot cluster. It includes fields for various components like cluster autoscaler, API server, controller manager, scheduler, and more.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\ntype Kubernetes struct {\n\tClusterAutoscaler       *ClusterAutoscaler\n\tKubeAPIServer           *KubeAPIServerConfig\n\tKubeControllerManager   *KubeControllerManagerConfig\n\tKubeScheduler           *KubeSchedulerConfig\n\tKubeProxy               *KubeProxyConfig\n\tKubelet                 *KubeletConfig\n\tVersion                 *string\n\tVerticalPodAutoscaler   *VerticalPodAutoscaler\n\tEnableStaticTokenKubeconfig *bool\n\tETCD                    *ETCD\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Webhook Labels for Shoot Cloud Provider in YAML\nDESCRIPTION: YAML snippet showing the label that Gardener adds to Shoot namespaces to indicate the cloud provider. Webhooks should use this label to determine which namespaces to operate on.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/controlplane-webhooks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshoot.gardener.cloud/provider: <provider>\n```\n\n----------------------------------------\n\nTITLE: Specifying Webhook Labels for Seed Cloud Provider in YAML\nDESCRIPTION: YAML snippet showing the label that Gardener adds to Shoot namespaces to indicate the Seed cloud provider. Webhooks should use this label to determine which namespaces to operate on for Seed-specific customizations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/controlplane-webhooks.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nseed.gardener.cloud/provider: <provider>\n```\n\n----------------------------------------\n\nTITLE: Completing CA Certificate Rotation in Shoot Cluster\nDESCRIPTION: Command to complete the CA rotation process by adding the rotate-ca-complete annotation. This initiates stage three of the CA rotation process.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_credentials_rotation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-ca-complete\n```\n\n----------------------------------------\n\nTITLE: Comparing Kubernetes API Groups Script Usage\nDESCRIPTION: Example command for comparing API groups between Kubernetes versions using the comparison script\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/new-kubernetes-version.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhack/compare-k8s-api-groups.sh 1.26 1.27\n```\n\n----------------------------------------\n\nTITLE: Running a Simple End-to-End Test\nDESCRIPTION: This command executes a simple end-to-end test that creates and deletes a Shoot cluster to verify the setup works correctly. It specifies the kubeconfig path from the local Gardener setup.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmake test-e2e-local-simple KUBECONFIG=\"$PWD/example/gardener-local/kind/local/kubeconfig\"\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Struct in Go\nDESCRIPTION: Authentication contains settings related to authentication. It includes a field for webhook configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Authentication struct {\n  Webhook *AuthenticationWebhook `json:\"webhook,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: AuditConfig Fields\nDESCRIPTION: Settings for API server audit configuration and policy.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nauditPolicy:          # Audit policy configuration\n  configMapRef:     # Reference to ConfigMap containing audit policy\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Second Seed Cluster\nDESCRIPTION: This command creates a second KinD cluster named gardener-local2 for testing features like control plane migration. It sets up the cluster and stores the kubeconfig in the specified path.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake kind2-up\n```\n\n----------------------------------------\n\nTITLE: Adding Monitoring Configuration via ConfigMap in YAML\nDESCRIPTION: The provided ConfigMap defines alerting rules and a scrape configuration for monitoring the 'cloud-controller-manager'. It leverages Prometheus by appending configuration to existing setups with specific labels. Dependencies include a Prometheus-compatible environment for changes to reflect.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/19-migrating-observability-stack-to-operators.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    extensions.gardener.cloud/configuration: monitoring\n  name: cloud-controller-manager-observability-config\n  namespace: shoot--project--name\ndata:\n  alerting_rules: |\n    cloud-controller-manager.rules.yaml: |\n    groups:\n    - name: cloud-controller-manager.rules\n      rules:\n      - alert: CloudControllerManagerDown\n        expr: absent(up{job=\"cloud-controller-manager\"} == 1)\n        for: 15m\n        labels:\n          service: cloud-controller-manager\n          severity: critical\n          type: seed\n          visibility: all\n        annotations:\n          description: All infrastructure specific operations cannot be completed (e.g. creating loadbalancers or persistent volumes).\n          summary: Cloud controller manager is down.\n  observedComponents: |\n    observedPods:\n    - podPrefix: cloud-controller-manager\n    isExposedToUser: true\n  scrape_config: |\n    - job_name: cloud-controller-manager\n      scheme: https\n      tls_config:\n        insecure_skip_verify: true\n      authorization:\n        type: Bearer\n        credentials_file: /var/run/secrets/gardener.cloud/shoot/token/token\n      honor_labels: false\n      kubernetes_sd_configs:\n      - role: endpoints\n        namespaces:\n          names: [shoot--project--name]\n      relabel_configs:\n      - source_labels:\n        - __meta_kubernetes_service_name\n        - __meta_kubernetes_endpoint_port_name\n        action: keep\n        regex: cloud-controller-manager;metrics\n      # common metrics\n      - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [ __meta_kubernetes_pod_name ]\n          target_label: pod\n      metric_relabel_configs:\n      - source_labels: [ __name__ ]\n        regex: ^(rest_client_requests_total|process_max_fds|process_open_fds)$\n        action: keep\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Shoot with Cluster OIDC Config Applied - Console\nDESCRIPTION: Uses 'kubectl get' to fetch a Shoot manifest post-mutation in YAML, verifying OIDC config injection via a cluster-scoped preset. Inputs are shoot name and output format; output is a full resource manifest suitable for inspection.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nkubectl get shoot preset -o yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up KinD Cluster for gardenadm\nDESCRIPTION: Command to create a KinD cluster for local development of gardenadm. This sets up the necessary Kubernetes environment that will host the pods serving as machines for autonomous shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kind-up\n```\n\n----------------------------------------\n\nTITLE: Listing Machines in a Gardener-managed Kubernetes Cluster using kubectl\nDESCRIPTION: Command to list all machines for a multi-AZ shoot control plane using kubectl. This command helps in diagnosing issues related to machine states like Terminating, Unknown, or CrashLoopBackOff.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get machines # list of machines for the multi-AZ shoot control plane\n```\n\n----------------------------------------\n\nTITLE: Preparing High-Touch Scenario for gardenadm\nDESCRIPTION: Command to set up the high-touch scenario for gardenadm, which builds required images, deploys machine pods, and installs the gardenadm binary on them. This enables direct execution of gardenadm on machine pods.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake gardenadm-high-touch-up\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for gardenadm token generate\nDESCRIPTION: Lists available options specific to the generate command, which only includes the help flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_generate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for generate\n```\n\n----------------------------------------\n\nTITLE: Extension Lifecycle Configuration in YAML\nDESCRIPTION: Detailed lifecycle configuration options for Extension resources, specifying when to reconcile, delete, and migrate resources during Gardener's control flows.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/registration.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n    ...\n    lifecycle:\n      reconcile: AfterKubeAPIServer\n      delete: BeforeKubeAPIServer\n      migrate: BeforeKubeAPIServer\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram for SNI-based API Server Proxying\nDESCRIPTION: A text-based diagram illustrating the flow of data from client through Network LoadBalancer to the Proxy server, which then routes to the appropriate Shoot API Server based on SNI.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------------+\n|                               |\n|           Network LB          | (accessible from clients)\n|                               |\n|                               |\n+-------------+-------+---------+                       +------------------+\n              |       |                                 |                  |\n              |       |            proxy + lb           | Shoot API Server |\n              |       |    +-------------+------------->+                  |\n              |       |    |                            | Cluster A        |\n              |       |    |                            |                  |\n              |       |    |                            +------------------+\n              |       |    |\n     +----------------v----+--+\n     |        |               |\n   +-+--------v----------+    |                         +------------------+\n   |                     |    |                         |                  |\n   |                     |    |       proxy + lb        | Shoot API Server |\n   |        Proxy        |    +-------------+---------->+                  |\n   |                     |    |                         | Cluster B        |\n   |                     |    |                         |                  |\n   |                     +----+                         +------------------+\n   +----------------+----+\n                    |\n                    |\n                    |                                   +------------------+\n                    |                                   |                  |\n                    |             proxy + lb            | Shoot API Server |\n                    +-------------------+-------------->+                  |\n                                                        | Cluster C        |\n                                                        |                  |\n                                                        +------------------+\n```\n\n----------------------------------------\n\nTITLE: Running Logcheck via Make\nDESCRIPTION: Command to run logcheck through the project's make system.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Deleting a ServiceAccount using kubectl (Bash)\nDESCRIPTION: This command uses `kubectl` to delete the ServiceAccount named 'robot-user' from the 'project-abc' namespace. Deleting a ServiceAccount invalidates all previously issued tokens associated with it. Requires `kubectl` access and permissions to delete ServiceAccounts in the namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/service-account-manager.md#2025-04-22_snippet_3\n\nLANGUAGE: code\nCODE:\n```\nkubectl -n project-abc delete sa robot-user\n```\n\n----------------------------------------\n\nTITLE: Verifying Code Changes with Make in Bash\nDESCRIPTION: Executes verification checks including linting, formatting, static code checks, and tests before submitting a pull request.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/process.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake verify\n```\n\n----------------------------------------\n\nTITLE: Accessing and Testing gardenadm in High-Touch Scenario\nDESCRIPTION: Commands to execute a shell session on a machine pod and verify the gardenadm installation. This allows for interactive use of gardenadm in the high-touch scenario.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl -n gardenadm-high-touch exec -it machine-0 -- bash\nroot@machine-0:/# gardenadm -h\ngardenadm bootstraps and manages autonomous shoot clusters in the Gardener project.\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Watchdog Weeder\nDESCRIPTION: Controls whether the endpoint controller (weeder) of the dependency-watchdog should be enabled. This helps manage pods in CrashLoopBackoff by restarting them when dependencies become available.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nenabled</br>\n<em>\nbool\n</em>\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Seed Manifest in Gardener\nDESCRIPTION: Refers to an example Seed manifest that represents a seed cluster configuration in Gardener. Seed clusters host the control planes of end-user Kubernetes clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/50-seed.yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing Optional Seed Secret Manifest in Gardener\nDESCRIPTION: Refers to an optional example manifest for the secret containing kubeconfig for accessing a seed cluster when not using the recommended gardenlet deployment approach.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/40-secret-seed.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining MaintenanceAutoUpdate Type\nDESCRIPTION: Kubernetes API type definition for MaintenanceAutoUpdate which contains configurations for automatic updates of Kubernetes version and machine image version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_32\n\nLANGUAGE: kubernetes-api\nCODE:\n```\ntype MaintenanceAutoUpdate struct {\n  kubernetesVersion bool    // indicates if patch Kubernetes version may be auto-updated\n  machineImageVersion bool  // indicates if machine image version may be auto-updated\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterAutoscaler struct in Go\nDESCRIPTION: Defines the ClusterAutoscaler struct containing configuration flags for the Kubernetes cluster autoscaler. Includes fields for scaling behavior, thresholds, and other autoscaler options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype ClusterAutoscaler struct {\n  ScaleDownDelayAfterAdd        *metav1.Duration\n  ScaleDownDelayAfterDelete      *metav1.Duration\n  ScaleDownDelayAfterFailure     *metav1.Duration\n  ScaleDownUnneededTime          *metav1.Duration\n  ScaleDownUtilizationThreshold  *float64\n  ScanInterval                   *metav1.Duration\n  Expander                       *ExpanderMode\n  MaxNodeProvisionTime           *metav1.Duration\n  MaxGracefulTerminationSeconds *int32\n  IgnoreTaints                   []string\n  NewPodScaleUpDelay             *metav1.Duration\n  MaxEmptyBulkDelete             *int32\n  IgnoreDaemonsetsUtilization    *bool\n  Verbosity                      *int32\n  StartupTaints                  []string\n  StatusTaints                   []string\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Second Seed Readiness\nDESCRIPTION: This command waits for the second Seed cluster (local2) to be ready with all required components for testing purposes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n./hack/usage/wait-for.sh seed local2 GardenletReady SeedSystemComponentsHealthy ExtensionsReady\n```\n\n----------------------------------------\n\nTITLE: Deleting Key Range from Etcd Leader with Time Measurement\nDESCRIPTION: Command to delete a range of keys (from 0 to 99999) from the etcd leader with execution time measurement. It uses extended timeouts to accommodate the large operation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntime etcdctl --endpoints=https://etcd-main-2.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 del 0 99999    --dial-timeout=300s --command-timeout=300s\n```\n\n----------------------------------------\n\nTITLE: Debugging Gardener Operator\nDESCRIPTION: Starts the Gardener Operator in debug mode, similar to the gardener-debug command but specific to the Operator component.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmake operator-debug\n```\n\n----------------------------------------\n\nTITLE: Accessing Virtual Garden Cluster\nDESCRIPTION: Retrieves the kubeconfig for the virtual garden cluster and uses it to list namespaces, demonstrating access to the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n garden get secret gardener -o jsonpath={.data.kubeconfig} | base64 -d > /tmp/virtual-garden-kubeconfig\nkubectl --kubeconfig /tmp/virtual-garden-kubeconfig get namespaces\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Integration Table\nDESCRIPTION: Markdown table showing the different integration types, their purposes, and relevant documentation locations for implementing cloud provider support in Gardener.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/new-cloud-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Type|Purpose|Location|Documentation|\n|---|---|---|---|\n|Seed or Shoot|Machine Lifecycle|[machine-controller-manager](https://github.com/gardener/machine-controller-manager)| [MCM new cloud provider](https://github.com/gardener/machine-controller-manager/blob/master/docs/development/cp_support_new.md) |\n|Seed only|etcd backup/restore|[etcd-backup-restore](https://github.com/gardener/etcd-backup-restore/)| In process |\n|All|Extension implementation|[gardener](https://github.com/gardener/gardener)| [Extension controller](../extensions/overview.md) |\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Gardener Extensions (Bash)\nDESCRIPTION: Command to tear down the Gardener environment, including deleting all Shoots, uninstalling gardenlet from the Seed, and removing Gardener components from KinD.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake gardener-extensions-down\n```\n\n----------------------------------------\n\nTITLE: Running Focused Ginkgo Tests\nDESCRIPTION: Example of running specific Ginkgo tests using focus flags for targeted test execution.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nginkgo run --focus \"should delete the unused resources\" ./pkg/resourcemanager/controller/garbagecollector\n```\n\n----------------------------------------\n\nTITLE: Running Selective E2E Tests for gardenadm\nDESCRIPTION: Commands to run specific e2e tests for the high-touch scenario using label filters. This allows for targeted testing of specific gardenadm functionality.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake gardenadm-high-touch-up\n./hack/test-e2e-local.sh gardenadm --label-filter=\"high-touch\" ./test/e2e/gardenadm/...\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Existing Shoot Configuration\nDESCRIPTION: Command to run E2E tests using an existing shoot cluster instead of creating a new one. This approach can speed up test development by reusing existing resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./hack/test-e2e-local.sh --label-filter \"Shoot && credentials-rotation\" ./test/e2e/gardener/... -- --project-namespace=garden-local --existing-shoot-name=local\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests on Local Development Machine\nDESCRIPTION: Commands for setting up and running E2E tests locally using KinD cluster and Gardener. These commands create a local test environment and execute the test suite.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-up\nexport KUBECONFIG=$PWD/example/gardener-local/kind/local/kubeconfig\nmake gardener-up\nmake test-e2e-local\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenIDConnectPreset Admission Plugin - Text\nDESCRIPTION: Shows the command-line flag to disable the OpenIDConnectPreset admission plugin in the gardener-apiserver process. No dependencies except access to gardener-apiserver configuration. Input is a CLI flag; output is deactivation of the OIDC preset admission controller.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n--disable-admission-plugins=OpenIDConnectPreset\\n\n```\n\n----------------------------------------\n\nTITLE: ShootState CRD for Cluster State Management\nDESCRIPTION: Defines a ShootState CRD that stores non-reconstructable state information to enable control plane migration between seed clusters. Includes certificates, DNS records, and infrastructure state.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gardener.cloud/v1alpha1\nkind: ShootState\nmetadata:\n  name: shoot--core--aws-01\nshootRef:\n  name: aws-01\n  project: core\nstate:\n  secrets:\n  - name: ca\n    data: ...\n  - name: kube-apiserver-cert\n    data: ...\n  resources:\n  - kind: DNS\n    name: record-1\n    state: <copied-state-of-dns-crd>\n  - kind: Infrastructure\n    name: networks\n    state: <copied-state-of-infrastructure-crd>\n```\n\n----------------------------------------\n\nTITLE: Scheduler Configuration Fields\nDESCRIPTION: Specifies settings for the Kubernetes scheduler including PD volume limits and scheduling profiles.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype KubeSchedulerConfig struct {\n  KubernetesConfig\n  KubeMaxPDVols *string\n  Profile *SchedulingProfile\n}\n```\n\n----------------------------------------\n\nTITLE: Tearing Down the Second Seed Cluster\nDESCRIPTION: This command removes the second KinD cluster (gardener-local2) that was set up for testing purposes.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nmake kind2-down\n```\n\n----------------------------------------\n\nTITLE: Running Shoot Deletion Test with Go Test Command\nDESCRIPTION: Command-line example for running the shoot deletion system test. It shows the minimal required parameters to execute the test, including kubeconfig, shoot name, and project namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ngo test  -timeout=0 -ginkgo.v -ginkgo.show-node-events \\\n  ./test/testmachinery/system/shoot_deletion \\\n  -kubecfg=$HOME/.kube/config \\\n  -shoot-name=$SHOOT_NAME \\\n  -project-namespace=$PROJECT_NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Stress-Testing Gardener Envtest Suite using Bash\nDESCRIPTION: This sequence of Bash commands demonstrates how to stress-test a Gardener integration test suite that uses a standard 'envtest' environment (without gardener-apiserver). It involves building the test binary with Ginkgo, starting the test environment, setting environment variables (KUBECONFIG, USE_EXISTING_CLUSTER, CI timeouts), changing to the test directory, and finally running the compiled test multiple times in parallel using the 'stress' tool.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# build a test binary\nginkgo build ./test/integration/resourcemanager/health\n\n# prepare a test environment to run the test against\nmake start-envtest\n\n# in another terminal session:\nexport KUBECONFIG=$PWD/dev/envtest-kubeconfig.yaml\nexport USE_EXISTING_CLUSTER=true\n\n# use same timeout settings like in CI\nsource ./hack/test-integration.env\n\n# switch to test package directory like `go test`\ncd ./test/integration/resourcemanager/health\n\n# run the test in parallel and report any failures\nstress -ignore \"unable to grab random port\" -p 16 ./health.test\n...\n```\n\n----------------------------------------\n\nTITLE: Comparing Kubernetes Admission Plugins Script Usage\nDESCRIPTION: Example command for comparing admission plugins between Kubernetes versions using the comparison script\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/new-kubernetes-version.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhack/compare-k8s-admission-plugins.sh 1.26 1.27\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gardenlet Kubeconfig in Bash\nDESCRIPTION: This Bash command retrieves the gardenlet kubeconfig from a Kubernetes secret, decodes it from base64, and outputs the result. It's used to verify the successful deployment of gardenlet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n garden get secret gardenlet-kubeconfig -o json | jq -r .data.kubeconfig | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Chart Parameters in Markdown Table\nDESCRIPTION: This markdown table lists configurable parameters for the Redis Helm chart, including their descriptions and default values. It covers various aspects such as global settings, image configuration, clustering, security, and monitoring.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                                     | Description                                                                                                                                         | Default                                                 |\n| --------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |\n| `global.imageRegistry`                        | Global Docker image registry                                                                                                                        | `nil`                                                   |\n| `global.imagePullSecrets`                     | Global Docker registry secret names as an array                                                                                                     | `[]` (does not add image pull secrets to deployed pods) |\n| `global.storageClass`                         | Global storage class for dynamic provisioning                                                                                                       | `nil`                                                        |\n| `global.redis.password`                       | Redis password (overrides `password`)                                                                                                               | `nil`                                                   |\n| `global.storageClass`                         | Global storage class for dynamic provisioning                                                                                                       | `nil`                                                   |\n| `image.registry`                              | Redis Image registry                                                                                                                                | `docker.io`                                             |\n| `image.repository`                            | Redis Image name                                                                                                                                    | `bitnami/redis`                                         |\n| `image.tag`                                   | Redis Image tag                                                                                                                                     | `{TAG_NAME}`                                            |\n| `image.pullPolicy`                            | Image pull policy                                                                                                                                   | `IfNotPresent`                                          |\n| `image.pullSecrets`                           | Specify docker-registry secret names as an array                                                                                                    | `nil`                                                   |\n| `nameOverride`                                | String to partially override redis.fullname template with a string (will prepend the release name)                                                  | `nil`                                                   |\n| `fullnameOverride`                            | String to fully override redis.fullname template with a string                                                                                      | `nil`                                                   |\n| `cluster.enabled`                             | Use master-slave topology                                                                                                                           | `true`                                                  |\n| `cluster.slaveCount`                          | Number of slaves                                                                                                                                    | `1`                                                     |\n| `existingSecret`                              | Name of existing secret object (for password authentication)                                                                                        | `nil`                                                   |\n| `existingSecretPasswordKey`                   | Name of key containing password to be retrieved from the existing secret                                                                            | `nil`                                                   |\n| `usePassword`                                 | Use password                                                                                                                                        | `true`                                                  |\n| `usePasswordFile`                             | Mount passwords as files instead of environment variables                                                                                           | `false`                                                 |\n| `password`                                    | Redis password (ignored if existingSecret set)                                                                                                      | Randomly generated                                      |\n| `configmap`                                   | Additional common Redis node configuration (this value is evaluated as a template)                                                                  | See values.yaml                                         |\n| `clusterDomain`                               | Kubernetes DNS Domain name to use                                                                                                                   | `cluster.local`                                         |\n| `networkPolicy.enabled`                       | Enable NetworkPolicy                                                                                                                                | `false`                                                 |\n| `networkPolicy.allowExternal`                 | Don't require client label for connections                                                                                                          | `true`                                                  |\n| `securityContext.enabled`                     | Enable security context (both redis master and slave pods)                                                                                          | `true`                                                  |\n| `securityContext.fsGroup`                     | Group ID for the container (both redis master and slave pods)                                                                                       | `1001`                                                  |\n| `securityContext.runAsUser`                   | User ID for the container (both redis master and slave pods)                                                                                        | `1001`                                                  |\n| `securityContext.sysctls`                     | Set namespaced sysctls for the container (both redis master and slave pods)                                                                         | `nil`                                                   |\n| `serviceAccount.create`                       | Specifies whether a ServiceAccount should be created                                                                                                | `false`                                                 |\n| `serviceAccount.name`                         | The name of the ServiceAccount to create                                                                                                            | Generated using the fullname template                   |\n| `rbac.create`                                 | Specifies whether RBAC resources should be created                                                                                                  | `false`                                                 |\n| `rbac.role.rules`                             | Rules to create                                                                                                                                     | `[]`                                                    |\n| `metrics.enabled`                             | Start a side-car prometheus exporter                                                                                                                | `false`                                                 |\n| `metrics.image.registry`                      | Redis exporter image registry                                                                                                                       | `docker.io`                                             |\n| `metrics.image.repository`                    | Redis exporter image name                                                                                                                           | `bitnami/redis-exporter`                                |\n| `metrics.image.tag`                           | Redis exporter image tag                                                                                                                            | `{TAG_NAME}`                                            |\n| `metrics.image.pullPolicy`                    | Image pull policy                                                                                                                                   | `IfNotPresent`                                          |\n```\n\n----------------------------------------\n\nTITLE: Examples of gardenadm token creation\nDESCRIPTION: Example commands showing how to create a bootstrap token with a specific ID or generate one randomly.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_create.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a bootstrap token with id \"foo123\" on the server\ngardenadm token create foo123.bar4567890baz123\n\n# Create a bootstrap token generated randomly\ngardenadm token create\n```\n\n----------------------------------------\n\nTITLE: Running Tests Until Failure\nDESCRIPTION: Command for continuously running tests until a failure occurs using Ginkgo's until-it-fails flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nginkgo run --until-it-fails ./pkg/resourcemanager/controller/garbagecollector\n```\n\n----------------------------------------\n\nTITLE: Deploying Gardener Operator Locally\nDESCRIPTION: Shell command to build base images and deploy Gardener Operator resources into the local cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmake operator-up\n```\n\n----------------------------------------\n\nTITLE: Testing Go Code with Basic Assertions\nDESCRIPTION: Example showing proper test structure with Gomega assertions and error handling in Go tests.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nExpect(err).To(MatchError(\"foo\"))\n\nExpect(err).To(HaveOccurred())\n```\n\n----------------------------------------\n\nTITLE: Deleting Redis StatefulSet Before Upgrading to 4.0.0\nDESCRIPTION: Command to delete the Redis master StatefulSet with the --cascade=false flag before upgrading to version 4.0.0, which is necessary to handle immutable selector changes.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete statefulsets.apps --cascade=false my-release-redis-master\n```\n\n----------------------------------------\n\nTITLE: Options for gardenadm token create command\nDESCRIPTION: Available options specific to the 'token create' subcommand.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_create.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Shoot with OIDC Config Applied - Console\nDESCRIPTION: Queries a specific Shoot resource in YAML format to verify that the OpenIDConnectPreset's OIDC configuration has been injected by the admission controller. This command uses 'kubectl' with '-o yaml' for detailed inspection. Input is the Shoot name; output is the entire Shoot object, including OIDC fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nkubectl get shoot preset -o yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Reconciliation Flow Table in Markdown\nDESCRIPTION: A markdown table showing the detailed reconciliation flow for Shoot creation and management in Gardener. It lists various operations and their descriptions, including actions performed by Gardener and cloud-specific Botanists.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation | Description |\n|-----------|-------------|\n| botanist.DeployNamespace | Gardener creates the namespace for the Shoot in the Seed cluster. |\n| botanist.DeployKubeAPIServerService | Gardener creates a Service of type `LoadBalancer` in the Seed.<br>AWS Botanist registers a Mutating Webhook and adds its AWS-specific annotation. |\n| botanist.WaitUntilKubeAPIServerServiceIsReady | Gardener checks the `.status` object of the just created `Service` in the Seed. The contract is that also clouds not supporting load balancers must react on the `Service` object and modify the `.status` to correctly reflect the kube-apiserver's ingress IP. |\n| botanist.DeploySecrets | Gardener creates the secrets/certificates it needs like it does today, but it provides utility functions that can be adopted by Botanists/other controllers if they need additional certificates/secrets created on their own. (We should also add labels to all secrets) |\n| botanist.Shoot.Components.DNS.Internal{Provider/Entry}.Deploy | Gardener creates a DNS-specific CRD in the Seed, and the responsible DNS-controller picks it up and creates a corresponding DNS record (see the CRD specification above). |\n| botanist.Shoot.Components.DNS.External{Provider/Entry}.Deploy | Gardener creates a DNS-specific CRD in the Seed, and the responsible DNS-controller picks it up and creates a corresponding DNS record (see the CRD specification above). |\n| shootCloudBotanist.DeployInfrastructure | Gardener creates a Infrastructure-specific CRD in the Seed, and the responsible Botanist picks it up and does its job (see the CRD above). |\n| botanist.DeployBackupInfrastructure | Gardener creates a `BackupInfrastructure` resource in the Garden cluster.<br>(The BackupInfrastructure controller creates a BackupInfrastructure-specific CRD in the Seed, and the responsible Botanist picks it up and does its job (see the CRD above)) |\n| botanist.WaitUntilBackupInfrastructureReconciled | Gardener checks the `.status` object of the just created `BackupInfrastructure` resource. |\n| hybridBotanist.DeployETCD | Gardener only deploys the etcd `StatefulSet` without adding a backup-restore sidecar.<br>The cloud-specific Botanist registers a Mutating Webhook and adds the backup-restore sidecar, and it also creates the `Secret` needed by the backup-restore sidecar. |\n| botanist.WaitUntilEtcdReady | Gardener checks the `.status` object of the etcd `Statefulset` and waits until readiness is indicated. |\n| hybridBotanist.DeployCloudProviderConfig | Gardener does not execute this anymore because it doesn't know anything about cloud-specific configuration. |\n| hybridBotanist.DeployKubeAPIServer | Gardener only deploys the kube-apiserver `Deployment` without any cloud-specific flags/configuration.<br> The cloud-specific Botanist registers a Mutating Webhook and adds whatever is needed for the kube-apiserver to run in its cloud environment. |\n| hybridBotanist.DeployKubeControllerManager | Gardener only deploys the kube-controller-manager `Deployment` without any cloud-specific flags/configuration.<br>The cloud-specific Botanist registers a Mutating Webhook and adds whatever is needed for the kube-controller-manager to run in its cloud environment (e.g., the cloud-config). |\n| hybridBotanist.DeployKubeScheduler | Gardener only deploys the kube-scheduler `Deployment` without any cloud-specific flags/configuration.<br>The cloud-specific Botanist registers a Mutating Webhook and adds whatever is needed for the kube-scheduler to run in its cloud environment. |\n| hybridBotanist.DeployCloudControllerManager | Gardener does not execute this anymore because it doesn't know anything about cloud-specific configuration. The Botanists would be responsible to deploy their own cloud-controller-manager now.<br>They would watch for the kube-apiserver Deployment to exist, and as soon as it does, they would deploy the CCM.<br> (Side note: The Botanist would also be responsible to deploy further controllers needed for this cloud environment, e.g. F5-controllers or CSI plugins). |\n| botanist.WaitUntilKubeAPIServerReady | Gardener checks the `.status` object of the kube-apiserver `Deployment` and waits until readiness is indicated. |\n| botanist.InitializeShootClients | Unchanged; Gardener creates a Kubernetes client for the Shoot cluster. |\n| botanist.DeployMachineControllerManager | Deleted, Gardener no longer deploys MCM itself. See below. |\n| hybridBotanist.ReconcileMachines | Gardener creates a `Worker` CRD in the Seed, and the responsible `Worker` controller picks it up and does its job (see the CRD above). It also deploys the machine-controller-manager.<br>Gardener waits until the status indicates that the controller is done. |\n| hybridBotanist.DeployKubeAddonManager | This function also computes the CoreOS cloud-config (because the secret storing it is managed by the kube-addon-manager).<br>Gardener would deploy the CloudConfig-specific CRD in the Seed, and the responsible OS controller picks it up and does its job (see the CRD above).<br>The Botanists, which would have to modify something, would register a Webhook for this CloudConfig-specific resource and apply their changes.<br>The rest is mostly unchanged, Gardener generates the manifests for the addons and deploys the kube-addon-manager into the Seed.<br>AWS Botanist registers a Webhook for nginx-ingress.<br>Azure Botanist registers a Webhook for calico.<br>Gardener will no longer deploy the `StorageClass`es. Instead, the Botanists wait until the kube-apiserver is available and deploy them.<br><br>In the long term we want to get rid of optional addons inside the Gardener core and implement a sophisticated addon concept (see [#246](https://github.com/gardener/gardener/issues/246)). |\n| shootCloudBotanist.DeployKube2IAMResources | This function would be removed (currently Gardener would execute a Terraform job creating the IAM roles specified in the Shoot manifest). We cannot keep this behavior, the user would be responsible to create the needed IAM roles on its own. |\n| botanist.Shoot.Components.Nginx.DNSEtnry | Gardener creates a DNS-specific CRD in the Seed, and the responsible DNS-controller picks it up and creates a corresponding DNS record (see the CRD specification above). |\n| botanist.WaitUntilVPNConnectionExists | Unchanged, Gardener checks that it is possible to port-forward to a Shoot pod. |\n| seedCloudBotanist.ApplyCreateHook | This function would be removed (actually, only the AWS Botanist implements it).<br>AWS Botanist deploys the aws-lb-readvertiser once the API Server is deployed and updates the ELB health check protocol one the load balancer pointing to the API server is created. |\n| botanist.DeploySeedMonitoring | Unchanged, Gardener deploys the monitoring stack into the Seed. |\n| botanist.DeployClusterAutoscaler | Unchanged, Gardener deploys the cluster-autoscaler into the Seed. |\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretReference for DNS Provider\nDESCRIPTION: Reference to a Secret object containing cloud provider credentials used for registering external domains with the specified DNS provider.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nsecretRef</br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#secretreference-v1-core\">\nKubernetes core/v1.SecretReference\n</a>\n</em>\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS for gardener-operator Setup\nDESCRIPTION: This script adds DNS entries to the local /etc/hosts file for using the alternative gardener-operator setup with a virtual garden cluster load balancer.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | sudo tee -a /etc/hosts\n\n# Begin of Gardener Operator local setup section\n172.18.255.3 api.virtual-garden.local.gardener.cloud\n172.18.255.3 plutono-garden.ingress.runtime-garden.local.gardener.cloud\n```\n\n----------------------------------------\n\nTITLE: Querying Redis Sentinel for Current Master Address\nDESCRIPTION: Command to query the Redis Sentinel cluster for identifying the current master in a Redis Sentinel setup. Used for accessing write operations in a clustered environment.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSENTINEL get-master-addr-by-name <name of your MasterSet. Example: mymaster>\n```\n\n----------------------------------------\n\nTITLE: Computing Kubernetes Controllers Script Usage\nDESCRIPTION: Example command for computing controller changes between Kubernetes versions\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/new-kubernetes-version.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhack/compute-k8s-controllers.sh 1.28 1.29\n```\n\n----------------------------------------\n\nTITLE: Restart CoreDNS Deployment\nDESCRIPTION: This Bash command rolls out a restart for the CoreDNS deployment in the kube-system namespace, effectively reloading its configuration instantly. It relies on `kubectl` as the CLI tool for interacting with Kubernetes clusters. Input is simply executing the command, and output ensures the updated configuration via ConfigMap is applied without waiting for the typical reload interval.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/custom-dns-config.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system rollout restart deploy coredns\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Kernel Settings with Privileged Container\nDESCRIPTION: YAML configuration for a privileged initContainer that modifies host kernel settings required by Redis, including increasing somaxconn and disabling transparent huge pages.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsysctlImage:\n  enabled: true\n  mountHostSys: true\n  command:\n    - /bin/sh\n    - -c\n    - |-\n      install_packages procps\n      sysctl -w net.core.somaxconn=10000\n      echo never > /host-sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Triggering Immediate Maintenance in Gardener\nDESCRIPTION: Command to annotate a Shoot cluster for immediate maintenance using gardener.cloud/operation=maintain annotation, bypassing the maintenance window.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_operations.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n garden-<project-name> annotate shoot <shoot-name> gardener.cloud/operation=maintain\n```\n\n----------------------------------------\n\nTITLE: Managing Cluster Join Tokens with gardenadm (CLI)\nDESCRIPTION: The `gardenadm token` command is used to manage bootstrap tokens. These tokens are necessary for securely adding new control plane or worker nodes to an existing autonomous shoot cluster initialized by `gardenadm init`.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm token\n```\n\n----------------------------------------\n\nTITLE: Watching Kubernetes Bastion Resources using kubectl Alias\nDESCRIPTION: This command uses a kubectl alias ('k') to continuously watch ('-w') for changes to 'bastion' resources across all namespaces ('-A'). It's useful for observing the state of these objects during testing or debugging.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# watch test objects\nk get bastion -A -w\n```\n\n----------------------------------------\n\nTITLE: Requesting a ServiceAccount Token using curl (Bash)\nDESCRIPTION: This command demonstrates requesting a ServiceAccount token by directly calling the Kubernetes API server's TokenRequest endpoint using `curl`. It sends a POST request with a JSON payload specifying the API version, kind ('TokenRequest'), and desired expiration time (3600 seconds). Requires a valid authorization token (`<auth-token>`) for the API call.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/service-account-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.gardener/api/v1/namespaces/project-abc/serviceaccounts/robot-user/token \\\n    -H \"Authorization: Bearer <auth-token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"apiVersion\": \"authentication.k8s.io/v1\",\n        \"kind\": \"TokenRequest\",\n        \"spec\": {\n          \"expirationSeconds\": 3600\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Defining a Gardener Beta Test Suite in TestMachinery\nDESCRIPTION: A YAML definition for a Gardener test suite that runs all tests labeled as beta. This demonstrates the simplified test definition approach using Ginkgo focus to select tests based on labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/09-test-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: testmachinery.sapcloud.io\nkind: TestDefinition\nmetadata:\n  name: gardener-beta-suite\nspec:\n  description: Test suite that runs all gardener tests that are labeled as beta\n  activeDeadlineSeconds: 7200\n  labels: [\"gardener\", \"beta\"]\n​\n  command: [bash, -c]\n  args:\n  - >\n    go test -timeout=0 ./test/integration/suite\n    --v -ginkgo.v -ginkgo.progress -ginkgo.no-color\n    -ginkgo.focus=\"[GARDENER] [BETA]\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Gardenlet Certificate in Bash\nDESCRIPTION: This Bash command demonstrates how to view the details of the gardenlet certificate using OpenSSL. It's part of the process to verify the successful deployment and certificate bootstrap of gardenlet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in ./gardenlet-cert -noout -text\n```\n\n----------------------------------------\n\nTITLE: Referencing Example SecretBinding Manifest in Gardener\nDESCRIPTION: Refers to an example SecretBinding manifest that binds the infrastructure provider secret to be referenced later when creating shoot clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/80-secretbinding.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener BackupBucket Resource and Associated Secret in YAML\nDESCRIPTION: This snippet defines a cluster-scoped Gardener `BackupBucket` resource and the `Secret` it uses for provider credentials. The `Secret` (`backup-operator-provider`) contains provider-specific access keys for the backup storage. The `BackupBucket` resource specifies the backup provider type and region, references the `Secret`, and links to the `Seed` resource (`seed1`) it serves. The status section shows the result of the last reconciliation operation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/04-new-core-gardener-cloud-apis.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# See also: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md.\n\napiVersion: v1\nkind: Secret\nmetadata:\n  name: backup-operator-provider\n  namespace: backup-garden\ntype: Opaque\ndata:\n  # <some-provider-specific data keys>\n  # https://github.com/gardener/gardener-extension-provider-alicloud/blob/master/example/30-backupbucket.yaml#L9-L11\n  # https://github.com/gardener/gardener-extension-provider-aws/blob/master/example/30-backupbucket.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-azure/blob/master/example/30-backupbucket.yaml#L9-L10\n  # https://github.com/gardener/gardener-extension-provider-gcp/blob/master/example/30-backupbucket.yaml#L9\n  # https://github.com/gardener/gardener-extension-provider-openstack/blob/master/example/30-backupbucket.yaml#L9-L13\n\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: BackupBucket\nmetadata:\n  name: <seed-provider-type>-<region>-<seed-uid>\n  ownerReferences:\n  - kind: Seed\n    name: seed1\nspec:\n  provider:\n    type: <some-provider-name> # {aws,azure,gcp,...}\n    region: europe-central-1\n  seed: seed1\n  secretRef:\n    name: backup-operator-provider\n    namespace: backup-garden\nstatus:\n  lastOperation:\n    description: Backup bucket has been successfully reconciled.\n    lastUpdateTime: '2020-04-13T14:34:27Z'\n    progress: 100\n    state: Succeeded\n    type: Reconcile\n  observedGeneration: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ClusterAutoscalerOptions Structure (v1alpha1)\nDESCRIPTION: Specifies configuration options for the cluster autoscaler applied to a WorkerPool. Includes thresholds and timings for scaling down nodes based on utilization (CPU and GPU), unneeded duration, unreadiness, and maximum provisioning time.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nField                            Description\n-------------------------------- --------------------------------------------------------------------------------------------------------\nscaleDownUtilizationThreshold    (Optional) Defines the threshold in fraction (0.0 - 1.0) under which a node is being removed.\n(string)\n\nscaleDownGpuUtilizationThreshold (Optional) Defines the threshold in fraction (0.0 - 1.0) of gpu resources under which a node is being removed.\n(string)\n\nscaleDownUnneededTime            (Optional) Defines how long a node should be unneeded before it is eligible for scale down.\n(meta/v1.Duration)\n\nscaleDownUnreadyTime             (Optional) Defines how long an unready node should be unneeded before it is eligible for scale down.\n(meta/v1.Duration)\n\nmaxNodeProvisionTime             (Optional) Defines how long cluster autoscaler should wait for a node to be provisioned.\n(meta/v1.Duration)\n```\n\n----------------------------------------\n\nTITLE: Deleting Local KinD Cluster in Gardener (Bash)\nDESCRIPTION: Command to securely delete the local KinD cluster after tearing down the Gardener environment.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-extensions-clean\n```\n\n----------------------------------------\n\nTITLE: Gardener-Managed containerd Registry Configuration (TOML)\nDESCRIPTION: This snippet shows the configuration automatically added by Gardener to `/etc/containerd/config.toml` on Shoot nodes. It enables the 'hosts directory pattern' by setting the `config_path` to `/etc/containerd/certs.d`, allowing Shoot owners to subsequently add their specific registry configurations within that directory.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/advanced/containerd-registry-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.grpc.v1.cri\".registry] # gardener-managed\n   config_path = \"/etc/containerd/certs.d\"\n```\n\n----------------------------------------\n\nTITLE: Using Stress Tool for Test Deflaking\nDESCRIPTION: Commands for using the Go stress tool to identify flaky tests through parallel test execution.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo install golang.org/x/tools/cmd/stress@latest\n\nginkgo build ./pkg/resourcemanager/controller/garbagecollector\n\nstress -p 16 ./pkg/resourcemanager/controller/garbagecollector/garbagecollector.test -ginkgo.focus \"should delete the unused resources\"\n```\n\n----------------------------------------\n\nTITLE: Defining ShootState Custom Resource in Kubernetes YAML\nDESCRIPTION: YAML definition of the ShootState custom resource used to store control plane state for migration. It includes owner references to the Shoot resource, finalizers, and sections for gardenlet secrets and extension-specific state data.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1alpha1\nkind: ShootState\nmetadata:\n  name: my-shoot\n  namespace: garden-core\n  ownerReference:\n    apiVersion: core.gardener.cloud/v1beta1\n    blockOwnerDeletion: true\n    controller: true\n    kind: Shoot\n    name: my-shoot\n    uid: ...\n  finalizers:\n  - gardener\ngardenlet:\n  secrets:\n  - name: ca\n    data:\n      ca.crt: ...\n      ca.key: ...\n  - name: ssh-keypair\n    data:\n      id_rsa: ...\n  - name:\n...\nextensions:\n- kind: Infrastructure\n  state: ... (Terraform state)\n- kind: ControlPlane\n  purpose: normal\n  state: ... (Certificates generated by the extension)\n- kind: Worker\n  state: ... (Machine objects)\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Shoot Reconciliation in Gardener\nDESCRIPTION: Command to annotate a failed Shoot cluster to trigger a new reconciliation attempt using gardener.cloud/operation=retry annotation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_operations.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n garden-<project-name> annotate shoot <shoot-name> gardener.cloud/operation=retry\n```\n\n----------------------------------------\n\nTITLE: Restarting Systemd Services on Worker Nodes\nDESCRIPTION: Command to restart specific systemd services (kubelet and containerd) on a worker node using worker.gardener.cloud/restart-systemd-services annotation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/shoot_operations.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate node <node-name> worker.gardener.cloud/restart-systemd-services=kubelet,containerd\n```\n\n----------------------------------------\n\nTITLE: Executing Gardenadm Join Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'gardenadm join' command. It is used to bootstrap further control plane nodes or worker nodes and join them to the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_join.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm join [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a bootstrap token with gardenadm CLI\nDESCRIPTION: The command syntax for creating a bootstrap token using gardenadm, which can be either a specified token in the format '[a-z0-9]{6}.[a-z0-9]{16}' or randomly generated.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_create.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm token create [token] [flags]\n```\n\n----------------------------------------\n\nTITLE: Applying OpenIDConnectPreset Resource - Console\nDESCRIPTION: Demonstrates using the 'kubectl' CLI to apply the above OpenIDConnectPreset YAML manifest to a Kubernetes cluster. This command requires that the 'preset.yaml' file is present and the user has privileges to create cluster-scoped CRDs. Input is the file path; the output is the creation of an OpenIDConnectPreset resource on the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -f preset.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Options for gardenadm token Command\nDESCRIPTION: Basic options available for the gardenadm token command, showing only help flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for token\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Tests\nDESCRIPTION: This snippet demonstrates how to run specific integration tests by setting the PATH environment variable, sourcing the test environment, and executing the test script with a specific test directory.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PWD/hack/tools/bin/$(go env GOOS)-$(go env GOARCH):$PATH\"\n\nsource ./hack/test-integration.env\n./hack/test-integration.sh ./test/integration/resourcemanager/tokenrequestor\n```\n\n----------------------------------------\n\nTITLE: Running Gardener Full Reconcile Test with Go Test Command\nDESCRIPTION: Command-line example for running the Gardener full reconciliation system test. It demonstrates how to verify that all shoots in a Gardener instance are successfully reconciled.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ngo test  -timeout=0 ./test/testmachinery/system/complete_reconcile \\\n  --v -ginkgo.v -ginkgo.show-node-events \\\n  -kubecfg=$HOME/.kube/config \\\n  -project-namespace=$PROJECT_NAMESPACE \\\n  -gardenerVersion=$GARDENER_VERSION # needed to validate the last acted gardener version of a shoot\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationWebhook Struct in Go\nDESCRIPTION: AuthenticationWebhook contains settings related to an authentication webhook configuration. It specifies fields for cache TTL, kubeconfig secret, and API version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype AuthenticationWebhook struct {\n  CacheTTL *metav1.Duration `json:\"cacheTTL,omitempty\"`\n  KubeconfigSecretName string `json:\"kubeconfigSecretName\"`\n  Version *string `json:\"version,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DNSRecordStatus Structure in Go\nDESCRIPTION: This code defines the DNSRecordStatus structure, which represents the status of a DNSRecord resource in Gardener. It embeds the DefaultStatus and includes an additional Zone field.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype DNSRecordStatus struct {\n\tDefaultStatus\n\tZone string\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking etcd with bulk key generation targeting leader node\nDESCRIPTION: Command for performance testing etcd by generating 100,000 keys with 1KB values targeting the etcd leader node. Uses the benchmark tool with specific parameters for rate limiting (500 rps), connection settings, and TLS authentication.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nbenchmark put --target-leader  --rate 500 --conns=400 --clients=800 --sequential-keys --key-starts 0 --val-size=1024 --total=100000 \\\n    --endpoints=https://etcd-main-client:2379 \\\n    --key=/var/etcd/ssl/client/client/tls.key \\\n    --cacert=/var/etcd/ssl/client/ca/bundle.crt \\\n    --cert=/var/etcd/ssl/client/client/tls.crt\n```\n\n----------------------------------------\n\nTITLE: Deleting Bootstrap Token with gardenadm CLI\nDESCRIPTION: This command deletes a bootstrap token from the server using the gardenadm CLI. It requires the token ID as an argument and supports additional flags for help and logging options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_delete.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm token delete [token-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on macOS\nDESCRIPTION: Command to install Docker desktop application on macOS using Homebrew cask.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask docker\n```\n\n----------------------------------------\n\nTITLE: Requesting a ServiceAccount Token using kubectl (Bash)\nDESCRIPTION: This command uses `kubectl` to request a temporary authentication token for the 'robot-user' ServiceAccount in the 'project-abc' namespace. The token's requested validity duration is set to 3600 seconds (1 hour) using the `--duration` flag. This leverages the Kubernetes TokenRequest API.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/project/service-account-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n project-abc create token robot-user --duration=3600s\n```\n\n----------------------------------------\n\nTITLE: Manually Waking Up a Cluster in Gardener\nDESCRIPTION: This kubectl command patches the Shoot resource to disable hibernation. It sets the .spec.hibernation.enabled field to false, indicating the cluster's desired state is to be awakened.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_hibernate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl patch shoot -n $NAMESPACE $SHOOT_NAME -p '{\"spec\":{\"hibernation\":{\"enabled\": false}}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Redis with Custom Release Name\nDESCRIPTION: This command installs Redis with a custom release name 'my-release' using the default configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release stable/redis\n```\n\n----------------------------------------\n\nTITLE: Example: Deleting Specific Bootstrap Token\nDESCRIPTION: This example demonstrates how to delete a bootstrap token with the ID 'foo123' using the gardenadm CLI.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_delete.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a bootstrap token with id \"foo123\" on the server\ngardenadm token delete foo123\n```\n\n----------------------------------------\n\nTITLE: Using gardenadm bootstrap Command\nDESCRIPTION: The basic syntax for the bootstrap command which initializes infrastructure for an Autonomous Shoot Cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_bootstrap.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm bootstrap [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Gardenadm Commands in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with 'gardenadm join'. They allow setting the log format (json or text) and log level (debug, info, or error) for the command output.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_join.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Example Usage of gardenadm discover\nDESCRIPTION: An example showing how to use the gardenadm discover command with a specific kubeconfig file to download Gardener configuration resources.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_discover.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Download the configuration\ngardenadm discover --kubeconfig ~/.kube/config\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Range from Etcd Follower\nDESCRIPTION: Command to fetch a range of keys (from 1 to 17999) from an etcd follower and save the output to a file. This is used to measure GET request traffic patterns when targeting a follower node.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\netcdctl --endpoints=https://etcd-main-2.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 get 1 17999 > /tmp/range.txt\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceLimit Structure - Gardener Go\nDESCRIPTION: Defines ResourceLimit, used to specify which API groups, versions, and resources are subject to object size limits and what those limits are. Wildcard values allow blanket coverage. The Size field references Kubernetes' resource.Quantity for specifying limit values. Used as part of ResourceAdmissionConfiguration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntype ResourceLimit struct {\n    APIGroups   []string              `json:\"apiGroups,omitempty\"`\n    APIVersions []string              `json:\"apiVersions,omitempty\"`\n    Resources   []string              `json:\"resources\"`\n    Size        resource.Quantity     `json:\"size\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Cluster Configuration Structure - Gardener Go\nDESCRIPTION: This type models the Kubernetes struct for specifying version and component-level configuration of a Gardener-managed virtual cluster, including nested kubeAPIServer and kubeControllerManager configs as well as the cluster's Kubernetes version. Each field is optional but allows granular override of cluster component behaviors. This struct is intended for use in the VirtualCluster section of the operator.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype Kubernetes struct {\n    KubeAPIServer         *KubeAPIServerConfig        `json:\"kubeAPIServer,omitempty\"`\n    KubeControllerManager *KubeControllerManagerConfig `json:\"kubeControllerManager,omitempty\"`\n    Version               string                      `json:\"version,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OpenIDConnectPreset Resources - Console\nDESCRIPTION: Shows how to list existing OpenIDConnectPreset resources in the cluster. The output provides resource names, issuers, selectors, and age using the 'kubectl' CLI. Input is no parameters; output is a tabular summary of OpenIDConnectPresets.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl get openidconnectpresets\\nNAME     ISSUER            SHOOT-SELECTOR   AGE\\ntest-1   https://foo.bar   oidc=enabled     1s\\n\n```\n\n----------------------------------------\n\nTITLE: Options for gardenadm init Command\nDESCRIPTION: Available command-line options specific to the 'gardenadm init' command, including configuration directory path specification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_init.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -d, --config-dir string   Path to a directory containing the Gardener configuration files for the init command, i.e., files containing resources like CloudProfile, Shoot, etc. The files must be in YAML/JSON and have .{yaml,yml,json} file extensions to be considered.\n  -h, --help                help for init\n```\n\n----------------------------------------\n\nTITLE: Time Format Pattern for Alertmanager Logs\nDESCRIPTION: Time format pattern that matches the timestamp format in alertmanager logs, using Ruby's strptime format to correctly parse the timestamp components.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n%Y-%m-%dT%H:%M:%S.%L\n```\n\n----------------------------------------\n\nTITLE: Extracting Prometheus Credentials from Secret\nDESCRIPTION: Commands to decode and extract the username and password from the monitoring secret, which are required for authenticating with the Prometheus instance.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/monitoring/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho \"$(kubectl get secret <shoot-name>.monitoring -o jsonpath='{.data.username}' | base64 --decode)\"\necho \"$(kubectl get secret <shoot-name>.monitoring -o jsonpath='{.data.password}' | base64 --decode)\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Cherry Pick with Bash Script\nDESCRIPTION: Executes a cherry pick script to apply changes from a master branch PR to a specific release branch.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/process.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_USER=<your-user> hack/cherry-pick-pull.sh upstream/release-v3.14 3632\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 NAT Rules\nDESCRIPTION: Command to set up iptables rules for IPv6 NAT configuration to enable outgoing traffic from the kind network to the internet.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nip6tables -t nat -A POSTROUTING -o $(ip route show default | awk '{print $5}') -s fd00:10::/64 -j MASQUERADE\n```\n\n----------------------------------------\n\nTITLE: Joining a Node to an Autonomous Cluster with gardenadm (CLI)\nDESCRIPTION: The `gardenadm join` command allows adding new nodes (either control plane or worker) to an autonomous shoot cluster previously initialized with `gardenadm init`. It requires a valid bootstrap token (generated via `gardenadm token`) and network connectivity to the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm join\n```\n\n----------------------------------------\n\nTITLE: Example of gardenadm bootstrap Command\nDESCRIPTION: Example showing how to bootstrap infrastructure using a specific kubeconfig file.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_bootstrap.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Bootstrap the infrastructure\ngardenadm bootstrap --kubeconfig ~/.kube/config\n```\n\n----------------------------------------\n\nTITLE: Executing gardenadm connect Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'gardenadm connect' command. It deploys a gardenlet for further cluster management in the Gardener project.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_connect.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm connect [flags]\n```\n\n----------------------------------------\n\nTITLE: Waiting for Seed Readiness in Gardener (Bash)\nDESCRIPTION: Command to wait for the Seed to be ready, useful when waking up a Seed from hibernation or unpausing a KinD cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait --for=condition=gardenletready seed provider-extensions --timeout=5m\n```\n\n----------------------------------------\n\nTITLE: Generating PUT Load on Etcd Follower\nDESCRIPTION: Benchmark command that generates 100 PUT requests per second for 30 seconds targeting an etcd follower. It creates sequential keys with 1KiB values starting from key 3000, resulting in approximately 100KiB/s of traffic.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbenchmark put  --rate 100 --conns=400 --clients=400 --sequential-keys --key-starts 3000 --val-size=1024 --total=3000 \\\n    --endpoints=https://etcd-main-1.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 \\\n    --key=/var/etcd/ssl/client/client/tls.key \\\n    --cacert=/var/etcd/ssl/client/ca/bundle.crt \\\n    --cert=/var/etcd/ssl/client/client/tls.crt\n```\n\n----------------------------------------\n\nTITLE: TokenRequest Resource Structure\nDESCRIPTION: Kubernetes custom resource definition for requesting WorkloadIdentity tokens with configurable expiration and context object specifications.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/security.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.gardener.cloud/v1alpha1\nkind: TokenRequest\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  contextObject:\n    kind: string\n    apiVersion: string\n    name: string\n    namespace: string\n    uid: string\n  expirationSeconds: integer\n```\n\n----------------------------------------\n\nTITLE: Pausing KinD Cluster in Gardener (Bash)\nDESCRIPTION: Command to pause the KinD cluster by stopping and keeping its docker container, allowing for fast switching off without leaving orphaned infrastructure elements.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-extensions-down\n```\n\n----------------------------------------\n\nTITLE: Disabling ClusterOpenIDConnectPreset Admission Plugin - Text\nDESCRIPTION: Specifies the command-line flag for disabling ClusterOpenIDConnectPreset admission control in the gardener-apiserver. Setting this disables runtime mutation of Shoots based on cluster-scoped OIDC presets. Input is a string to use as a process argument.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n--disable-admission-plugins=ClusterOpenIDConnectPreset\\n\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for gardenadm connect in Bash\nDESCRIPTION: This snippet shows the command-specific options for 'gardenadm connect'. Currently, it only includes the help flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_connect.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for connect\n```\n\n----------------------------------------\n\nTITLE: Executing gardenadm version Command in Shell\nDESCRIPTION: This command prints the client version information for the gardenadm tool. It can be run with optional flags for help or to inherit logging options from parent commands.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_version.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngardenadm version [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Namespace Network Access for Seed Monitoring\nDESCRIPTION: Additional annotation required for Services in extension namespaces to allow Prometheus instances in seed clusters to scrape metrics from extension pods.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  networking.resources.gardener.cloud/pod-label-selector-namespace-alias: extensions\n```\n\n----------------------------------------\n\nTITLE: Running Specific Package Tests\nDESCRIPTION: Commands for running tests on specific Go packages using test.sh script or direct Go/Ginkgo commands.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./hack/test.sh ./pkg/resourcemanager/controller/... ./pkg/utils/secrets/...\n\ngo test ./pkg/resourcemanager/controller/... ./pkg/utils/secrets/...\nginkgo run ./pkg/resourcemanager/controller/... ./pkg/utils/secrets/...\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Make\nDESCRIPTION: Commands for executing unit tests using Make targets with and without coverage reporting.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n\nmake test-cov\nopen test.coverage.html\nmake test-cov-clean\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster Shoot Resource - Console\nDESCRIPTION: Demonstrates applying the above Shoot manifest to the Gardener cluster using 'kubectl'. Inputs are the manifest's file path and content; the output is shoot resource creation, enabling evaluation by the ClusterOpenIDConnectPreset mechanism.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/openidconnect-presets.md#2025-04-22_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -f shoot.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Current Istio Templates in Gardener\nDESCRIPTION: Commands to render the current Istio templates from Gardener repository for CRDs, Istiod, and Ingress components using Helm.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/component/networking/istio/charts/istio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm template istio pkg/component/networking/istio/charts/istio/istio-crds -n istio-system > istio-crds.yaml\n\nhelm template istio pkg/component/networking/istio/charts/istio/istio-istiod -n istio-system \\\n--set=deployNamespace=true > istio-istiod.yaml\n\nhelm template istio pkg/component/networking/istio/charts/istio/istio-ingress -n istio-ingress \\\n--set=deployNamespace=true \\\n--set=serviceType=ClusterIP \\\n--set=portsNames.status=status-port > istio-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes Table in Markdown\nDESCRIPTION: This snippet presents a markdown table that lists various error codes, their classification as user errors, and descriptions. It provides a comprehensive overview of known error codes in the Gardener system.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_status.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Error code                            | User error | Description                                                                                         |\n| ------------------------------------- | :--------: | --------------------------------------------------------------------------------------------------- |\n| `ERR_INFRA_UNAUTHENTICATED`           | true       | Indicates that the last error occurred due to the client request not being completed because it lacks valid authentication credentials for the requested resource. It is classified as a non-retryable error code. |\n| `ERR_INFRA_UNAUTHORIZED`              | true       | Indicates that the last error occurred due to the server understanding the request but refusing to authorize it. It is classified as a non-retryable error code. |\n| `ERR_INFRA_QUOTA_EXCEEDED`            | true       | Indicates that the last error occurred due to infrastructure quota limits. It is classified as a non-retryable error code. |\n| `ERR_INFRA_RATE_LIMITS_EXCEEDED`      | false      | Indicates that the last error occurred due to exceeded infrastructure request rate limits. |\n| `ERR_INFRA_DEPENDENCIES`              | true       | Indicates that the last error occurred due to dependent objects on the infrastructure level. It is classified as a non-retryable error code. |\n| `ERR_RETRYABLE_INFRA_DEPENDENCIES`    | false      | Indicates that the last error occurred due to dependent objects on the infrastructure level, but the operation should be retried. |\n| `ERR_INFRA_RESOURCES_DEPLETED`        | true       | Indicates that the last error occurred due to depleted resource in the infrastructure. |\n| `ERR_CLEANUP_CLUSTER_RESOURCES`       | true       | Indicates that the last error occurred due to resources in the cluster that are stuck in deletion. |\n| `ERR_CONFIGURATION_PROBLEM`           | true       | Indicates that the last error occurred due to a configuration problem. It is classified as a non-retryable error code. |\n| `ERR_RETRYABLE_CONFIGURATION_PROBLEM` | true       | Indicates that the last error occurred due to a retryable configuration problem. \"Retryable\" means that the occurred error is likely to be resolved in a ungraceful manner after given period of time. |\n| `ERR_PROBLEMATIC_WEBHOOK`             | true       | Indicates that the last error occurred due to a webhook not following the [Kubernetes best practices](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#best-practices-and-warnings). |\n```\n\n----------------------------------------\n\nTITLE: Example Usage of gardenadm token generate\nDESCRIPTION: A practical example showing how to generate a random bootstrap token with default settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_generate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a random bootstrap token\ngardenadm token generate\n```\n\n----------------------------------------\n\nTITLE: Executing gardenadm token list Command in Bash\nDESCRIPTION: This command lists all bootstrap tokens on the server. It can be run without any additional flags.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_list.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm token list [flags]\n```\n\n----------------------------------------\n\nTITLE: Using gardenadm init Command\nDESCRIPTION: The basic syntax for the 'gardenadm init' command used to bootstrap the first control plane node.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_init.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm init [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Architecture in Shoot Specification\nDESCRIPTION: Example showing how to specify CPU architecture for a worker pool in a Shoot resource. The architecture field is optional and defaults to amd64 if not specified.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_supported_architectures.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    workers:\n    - name: cpu-worker\n      machine:\n        architecture: <some-cpu-architecture> # optional\n```\n\n----------------------------------------\n\nTITLE: Structuring Gardener CloudProfile in Go\nDESCRIPTION: Defines the Go structure for CloudProfileSpec, which includes machineImages, machineTypes, and ProviderConfig. It specifies how machine images and types are organized for Gardener's core functionality. Dependencies include Go's runtime.RawExtension for provider-specific configurations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype CloudProfileSpec struct {\n...\n\tMachineImages []MachineImage\n\tMachineTypes []MachineType\n\tProviderConfig *runtime.RawExtension\n...\n}\n```\n\n----------------------------------------\n\nTITLE: DNSRecord Status with Zone Information in YAML\nDESCRIPTION: This example shows a DNSRecord resource with its status field populated. The status includes the hosted zone determined by the extension controller during the first reconciliation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/dnsrecord.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: DNSRecord\nmetadata:\n  name: dnsrecord-external\n  namespace: shoot--foo--bar\nspec:\n  ...\nstatus:\n  lastOperation: ...\n  zone: ZFOO\n```\n\n----------------------------------------\n\nTITLE: Correct Structured Logging Example in Go\nDESCRIPTION: Example showing the preferred structured logging approach using logr with key-value pairs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar logger logr.Logger\nlogger.Info(\"Scaling deployment\", \"deployment\", client.ObjectKeyFromObject(deployment), \"replicas\", replicaCount)\n```\n\n----------------------------------------\n\nTITLE: Available Options for gardenadm token list Command in Bash\nDESCRIPTION: This snippet shows the available options for the 'gardenadm token list' command, which includes a help flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_list.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Adding TODO Statement with GitHub Issue Reference in Golang\nDESCRIPTION: Example of how to add a TODO statement in Golang code referencing a GitHub issue for task dependency.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/process.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// TODO(<github-username>): Remove this code after https://github.com/gardener/gardener/issues/<issue-number> has been implemented.\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for gardenadm\nDESCRIPTION: Commands to prepare both scenarios and execute end-to-end tests for gardenadm. This verifies that gardenadm functions correctly in both high-touch and medium-touch scenarios.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake gardenadm-high-touch-up gardenadm-medium-touch-up\nmake test-e2e-local-gardenadm\n```\n\n----------------------------------------\n\nTITLE: Starting envtest Environment and Running Tests Against It\nDESCRIPTION: This sequence of commands starts a persistent envtest environment for debugging, then runs integration tests against it. This allows for inspection of the test environment using kubectl between test runs.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake start-envtest\n\n# in another terminal session:\nexport KUBECONFIG=$PWD/dev/envtest-kubeconfig.yaml\nexport USE_EXISTING_CLUSTER=true\n\n# run test with verbose output\n./hack/test-integration.sh -v ./test/integration/resourcemanager/health -ginkgo.v\n\n# in another terminal session:\nexport KUBECONFIG=$PWD/dev/envtest-kubeconfig.yaml\n# watch test objects\nk get managedresource -A -w\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Kubeconfig with Custom Parameters\nDESCRIPTION: This command shows how to generate an admin kubeconfig for a Shoot cluster with custom namespace and name parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./hack/usage/generate-admin-kubeconf.sh --namespace <namespace> --shoot-name <shootname> > admin-kubeconf.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating PUT Load on Etcd Leader\nDESCRIPTION: Benchmark command that generates 100 PUT requests per second for 30 seconds targeting the etcd leader. It creates sequential keys with 1KiB values, resulting in approximately 100KiB/s of traffic.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbenchmark put --target-leader  --rate 100 --conns=400 --clients=400 --sequential-keys --key-starts 0 --val-size=1024 --total=3000 \\\n     --endpoints=https://etcd-main-client:2379 \\\n     --key=/var/etcd/ssl/client/client/tls.key \\\n     --cacert=/var/etcd/ssl/client/ca/bundle.crt \\\n     --cert=/var/etcd/ssl/client/client/tls.crt\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out Istio Repository\nDESCRIPTION: Commands to clone the Istio GitHub repository and checkout the desired version tag for comparison.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/component/networking/istio/charts/istio/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nISTIO_VERSION=1.25.1\ngit clone https://github.com/istio/istio.git\ncd istio\ngit checkout $ISTIO_VERSION\n```\n\n----------------------------------------\n\nTITLE: Global options for gardenadm commands\nDESCRIPTION: Options inherited from parent commands that apply to all gardenadm commands, including log formatting and level configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_create.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Installing GNU bash on macOS\nDESCRIPTION: Command to install GNU bash on macOS to replace the built-in bash that might be missing features required by some shell scripts.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bash\n```\n\n----------------------------------------\n\nTITLE: Vali Multiple Index Configuration in YAML\nDESCRIPTION: Example of adding a new non-overlapping index configuration to Vali, with a different prefix and starting date.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nschema_config:\n  configs:\n  - from: 2018-04-15\n    store: boltdb\n    object_store: filesystem\n    schema: v11\n    index:\n      prefix: index_\n      period: 24h\n  - from: 2020-06-18\n    store: boltdb\n    object_store: filesystem\n    schema: v11\n    index:\n      prefix: index_new_\n      period: 24h\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for gardenadm token list Command in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'gardenadm token list' command. They allow customization of log format and level.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_list.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Alternative CloudProfile Lifecycle with Reconciler-Patched Classification (YAML)\nDESCRIPTION: This YAML snippet shows a rejected alternative for managing Kubernetes version lifecycles in a Gardener `CloudProfile` (`core.gardener.cloud/v1beta1`). In this approach, the administrator defines lifecycle stages with `startTime`, and a reconciler would dynamically update the `classification` field in the `spec` based on the current time. This was rejected because it breaks the administrator's ownership of the spec and introduces complexity regarding validation and time drift.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/32-version-classification-lifecycles.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# assume that the current date is 2024-12-03\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: local\nspec:\n  kubernetes:\n    versions:\n      - version: 1.30.6\n        classification: supported # the classification is patched by the reconciler and not set by the administrator\n        lifecycle:\n          - classification: preview\n          - classification: supported\n            startTime: \"2024-12-01T00:00:00Z\"\n          - classification: deprecated\n            startTime: \"2025-03-01T00:00:00Z\"\n          - classification: expired\n            startTime: \"2025-04-01T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Nodes with Zone Information\nDESCRIPTION: Command to retrieve nodes with custom output columns showing node name and availability zone information from node labels.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -o=custom-columns='NAME:metadata.name,ZONE:metadata.labels.topology\\.kubernetes\\.io\\/zone' # list of nodes with name, zone and status (was taken separately)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Using Make\nDESCRIPTION: This command uses the make rule to prepare the environment and run all integration tests by downloading necessary binaries and setting required environment variables.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake test-integration\n```\n\n----------------------------------------\n\nTITLE: Global Options for gardenadm CLI\nDESCRIPTION: Lists the global command-line options available for the gardenadm tool, including help, log format, and log level settings. The log format can be either JSON or text (default: text), and the log level can be debug, info, or error (default: info).\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                help for gardenadm\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceAdmissionWebhookMode Type Alias - Gardener Go\nDESCRIPTION: Declares ResourceAdmissionWebhookMode as a string type alias for specifying the operation mode of resource admission webhooks throughout Gardener. Common allowed values are 'block' and 'log'. This alias provides strong typing for configuration fields controlling webhook behavior.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype ResourceAdmissionWebhookMode string\n```\n\n----------------------------------------\n\nTITLE: Running Gardener API Integration Tests\nDESCRIPTION: This example shows how to run integration tests that require the Gardener API server. It starts an envtest with Gardener components, then runs tests against it with specific environment variables.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# modify GardenerTestEnvironment{} in test/start-envtest to disable admission plugins and enable feature gates like in test suite...\n\nmake start-envtest ENVTEST_TYPE=gardener\n\n# in another terminal session:\nexport KUBECONFIG=$PWD/dev/envtest-kubeconfig.yaml\nexport USE_EXISTING_GARDENER=true\n\n# run test with verbose output\n./hack/test-integration.sh -v ./test/integration/controllermanager/bastion -ginkgo.v\n\n# in another terminal session:\nexport KUBECONFIG=$PWD/dev/envtest-kubeconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Shoot Status with kubectl\nDESCRIPTION: This command checks the status of the local Shoot cluster in the garden-local namespace. The output shows details including the cluster name, cloud profile, provider, region, Kubernetes version, hibernation status, last operation progress, and age.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nNAME    CLOUDPROFILE   PROVIDER   REGION   K8S VERSION   HIBERNATION   LAST OPERATION            STATUS    AGE\nlocal   local          local      local   1.28.1        Awake         Create Processing (43%)   healthy   94s\n```\n\n----------------------------------------\n\nTITLE: Building Logcheck Plugin\nDESCRIPTION: Command to build the logcheck tool as a golangci-lint plugin with required CGO settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCGO_ENABLED=1 go build -o logcheck.so -buildmode=plugin github.com/gardener/gardener/hack/tools/logcheck/plugin\n```\n\n----------------------------------------\n\nTITLE: Finding Shoot Cluster IP Address\nDESCRIPTION: Shell command to find the IP address for non-HA shoot clusters exposed through Istio.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n \"$(kubectl -n <shoot-namespace> get gateway kube-apiserver -o jsonpath={.spec.selector.istio} | sed 's/.*--/istio-ingress--/')\" get svc istio-ingressgateway -o jsonpath={.status.loadBalancer.ingress..ip}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that are inherited from parent commands, including logging format and level configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Audit Policy ConfigMap Reference Structure\nDESCRIPTION: YAML structure showing the configuration that needs to be removed from the Shoot spec to revert to the default audit policy configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/security/shoot_auditpolicy.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauditPolicy:\n  configMapRef:\n    name: <configmap-name>\n```\n\n----------------------------------------\n\nTITLE: Removing Seed with Workload Identity Support (Bash)\nDESCRIPTION: Command to remove a seed that was used to host the Gardener Discovery Server in a development setup with workload identity support.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEV_SETUP_WITH_WORKLOAD_IDENTITY_SUPPORT=true make gardener-extensions-down SEED_NAME=<seed-name>\n```\n\n----------------------------------------\n\nTITLE: Global Options for gardenadm\nDESCRIPTION: Options that are inherited from the parent gardenadm command, including log format and log level settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_discover.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Deploying Redis with Password Authentication and Features\nDESCRIPTION: Helm command parameters for deploying Redis with password file authentication, enabled sentinels, and metrics. Demonstrates how to configure secure Redis deployments.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nusePassword=true\nusePasswordFile=true\nexistingSecret=redis-password-file\nsentinels.enabled=true\nmetrics.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Scaling Etcd StatefulSet for Cluster Membership Change\nDESCRIPTION: Command to scale the etcd StatefulSet to 3 replicas, which is used to trigger a scenario where a new follower joins the cluster with a large revision difference for testing synchronization traffic patterns.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale statefulsets etcd-main --replicas=3 -n  shoot--ash-garden--mz-neem\n```\n\n----------------------------------------\n\nTITLE: Installing Logcheck Standalone Binary\nDESCRIPTION: Command to install the logcheck tool as a standalone binary using go install.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/gardener/gardener/hack/tools/logcheck\n```\n\n----------------------------------------\n\nTITLE: Referencing Example CloudProfile Manifest in Gardener\nDESCRIPTION: Refers to an example CloudProfile manifest that contains constraints like available machine types, regions, and Kubernetes versions offered by a specific infrastructure provider. It may also include provider-specific configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/30-cloudprofile.yaml\n```\n\n----------------------------------------\n\nTITLE: Runtime Networking Configuration Example\nDESCRIPTION: Configuration structure for defining networking settings in a runtime cluster, including node, pod and service CIDRs and blocked networks.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operator.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nnodes: # Optional\n  - \"10.0.0.0/24\" # Example CIDR\npods:\n  - \"10.244.0.0/16\" # Example CIDR\nservices:\n  - \"10.96.0.0/12\" # Example CIDR\nblockCIDRs: # Optional\n  - \"169.254.169.254/32\" # Example blocked CIDR\n```\n\n----------------------------------------\n\nTITLE: Deploying Kube Controller Manager in YAML\nDESCRIPTION: This YAML snippet demonstrates how Gardener deploys the kube-controller-manager component into the seed cluster, specifying various flags for its operation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  template:\n    spec:\n      containers:\n      - command:\n        - /usr/local/bin/kube-controller-manager\n        - --allocate-node-cidrs=true\n        - --attach-detach-reconcile-sync-period=1m0s\n        - --controllers=*,bootstrapsigner,tokencleaner\n        - --cluster-cidr=100.96.0.0/11\n        - --cluster-name=shoot--core--aws-01\n        - --cluster-signing-cert-file=/srv/kubernetes/ca/ca.crt\n        - --cluster-signing-key-file=/srv/kubernetes/ca/ca.key\n        - --concurrent-deployment-syncs=10\n        - --concurrent-replicaset-syncs=10\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning the Gardener Repository\nDESCRIPTION: Commands to create the directory structure and clone the Gardener repository from GitHub into the GOPATH.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $(go env GOPATH)/src/github.com/gardener\ncd $(go env GOPATH)/src/github.com/gardener\ngit clone git@github.com:gardener/gardener.git\ncd gardener\n```\n\n----------------------------------------\n\nTITLE: Options for gardenadm bootstrap Command\nDESCRIPTION: Available command-specific options for the bootstrap command including help and kubeconfig specification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_bootstrap.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                help for bootstrap\n  -k, --kubeconfig string   Path to the kubeconfig file pointing to the KinD cluster\n```\n\n----------------------------------------\n\nTITLE: Defining Symlink Directory Structure\nDESCRIPTION: Shows the required symlink paths to go mod cache directories needed for logcheck testing. These symlinks ensure test files use the same dependency versions as the main module.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/pkg/logcheck/testdata/src/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n./github.com/go-logr/logr\n./sigs.k8s.io/controller-runtime/pkg/log\n```\n\n----------------------------------------\n\nTITLE: Running gardenadm in Medium-Touch Scenario\nDESCRIPTION: Command to execute gardenadm directly on the local machine using go run. This demonstrates how to use gardenadm in the medium-touch scenario.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ go run ./cmd/gardenadm -h\ngardenadm bootstraps and manages autonomous shoot clusters in the Gardener project.\n...\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Locking for Patch Requests in controller-runtime (Go)\nDESCRIPTION: This code snippet shows how to enable optimistic locking when performing both JSON merge and strategic merge patches with the controller-runtime client in Go. By using MergeFromWithOptions or MergeFromWithOptimisticLock, the patch operation will include resourceVersion checks, ensuring safe concurrent modifications. Dependencies include the controller-runtime client and Gardener API types. Inputs are the original and modified resource objects; outputs are errors from conflicting or invalid update attempts. This approach is critical when multiple controllers might update intersecting fields or lists.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// json merge patch + optimistic locking\npatch := client.MergeFromWithOptions(shoot.DeepCopy(), client.MergeFromWithOptimisticLock{})\n// ...\n\n// strategic merge patch + optimistic locking\npatch = client.StrategicMergeFrom(shoot.DeepCopy(), client.MergeFromWithOptimisticLock{})\n// ...\n\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for gardenadm token delete\nDESCRIPTION: This snippet shows the command-specific options available for the 'gardenadm token delete' command, which only includes a help flag.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_delete.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Kubeconfig Example for TokenRequestor Controller in Gardener\nDESCRIPTION: Example YAML for a kubeconfig that can be provided in the .data.kubeconfig field of a Secret. The TokenRequestor controller will populate the token field for the user in the current context.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: AAAA\n    server: some-server-url\n  name: shoot--foo--bar\ncontexts:\n- context:\n    cluster: shoot--foo--bar\n    user: shoot--foo--bar-token\n  name: shoot--foo--bar\ncurrent-context: shoot--foo--bar\nkind: Config\npreferences: {}\nusers:\n- name: shoot--foo--bar-token\n  user:\n    token: \"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Shoot Cluster\nDESCRIPTION: This command deletes the local Shoot cluster in the garden-local namespace using a helper script.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n./hack/usage/delete shoot local garden-local\n```\n\n----------------------------------------\n\nTITLE: Creating BackupUpload Custom Resource - Kubernetes YAML\nDESCRIPTION: This manifest defines a BackupUpload resource in the extensions.gardener.cloud/v1alpha1 API for uploading arbitrary data to an existing BackupEntry. It requires the target entry name, local file path, type, and the data to be uploaded. Key inputs are metadata for naming and namespacing, and the spec fields for data targeting; the resource is intended for controllers that handle data upload to underlying backup storage. Dependencies include the API definition for BackupUpload and an operational backup/controller infrastructure. The uploaded data is specified in the data field, and the resource must be deployed to a compatible Kubernetes cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/22-improved-usage-of-shootstate-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: BackupUpload\nmetadata:\n  name: example\n  namespace: default\nspec:\n  entryName: example-entry\n  filePath: shootstate.yaml.enc\n  type: local\n  data: <to-be-uploaded-data>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Redis with Helm (Production Configuration)\nDESCRIPTION: This command installs Redis using a production configuration specified in the values-production.yaml file.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install stable/redis --values values-production.yaml\n```\n\n----------------------------------------\n\nTITLE: Command Options for gardenadm discover\nDESCRIPTION: The available command-line options specific to the gardenadm discover command, including help and kubeconfig path specification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_discover.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                help for discover\n  -k, --kubeconfig string   Path to the kubeconfig file pointing to the garden cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Logcheck in golangci-lint\nDESCRIPTION: YAML configuration to integrate logcheck as a custom linter in golangci-lint.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/logcheck/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlinters-settings:\n  custom:\n    logcheck:\n      path: hack/tools/bin/logcheck.so\n      description: Check structured logging calls to logr.Logger instances\n      original-url: github.com/gardener/gardener/hack/tools/logcheck\n```\n\n----------------------------------------\n\nTITLE: Defining Current BackupInfra Specification in YAML\nDESCRIPTION: The current YAML specification for BackupInfrastructure resources in Gardener, showing the basic structure with seed name and shootUID fields.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#BackupInfra spec\nKind: BackupInfrastructure\nSpec:\n    seed: seedName\n    shootUID : shoot.status.uid\n```\n\n----------------------------------------\n\nTITLE: Defining Gardener ControlPlaneSpec Structure (v1alpha1)\nDESCRIPTION: Defines the specification for a ControlPlane resource. It embeds DefaultSpec, specifies the region, purpose (e.g., exposure, immutable), includes the InfrastructureProviderStatus (raw extension), and references a secret (SecretReference) containing cloud provider credentials.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nField                       Description\n--------------------------- --------------------------------------------------------------------------------------------------------\n// Embedded DefaultSpec fields\nDefaultSpec                 DefaultSpec is a structure containing common fields used by all extension resources.\n(DefaultSpec)\n\npurpose                     (Optional) Purpose contains the data if a cloud provider needs additional components in order to expose\n(Purpose)                   the control plane. This field is immutable.\n\ninfrastructureProviderStatus (Optional) InfrastructureProviderStatus contains the provider status that has been generated by the \n(runtime.RawExtension)      controller responsible for the `Infrastructure` resource.\n\nregion                      Region is the region of this control plane. This field is immutable.\n(string)\n\nsecretRef                   SecretRef is a reference to a secret that contains the cloud provider specific credentials.\n(core/v1.SecretReference)\n```\n\n----------------------------------------\n\nTITLE: Enabling Gardener Debug Mode\nDESCRIPTION: Command to start Gardener in debug mode with Delve integration for Go debugging.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake gardener-debug\n```\n\n----------------------------------------\n\nTITLE: Generating and Creating Bootstrap Token\nDESCRIPTION: Commands to generate a random bootstrap token and create it on the server for joining additional nodes to the cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm token generate\ngardenadm token create <token>\n```\n\n----------------------------------------\n\nTITLE: Discovering Cluster Nodes or Prerequisites with gardenadm (CLI)\nDESCRIPTION: The `gardenadm discover` command is part of the proposed `gardenadm` tool for setting up autonomous shoot clusters. Its specific function is not detailed in the provided text but is likely related to node discovery or prerequisite checks before cluster initialization.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm discover\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with Go Modules in Gardener\nDESCRIPTION: Command to run 'go mod tidy' via the Makefile to ensure the go.mod file matches the source code by adding missing modules and removing unused ones.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tidy\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for gardenadm Commands\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'version' command. They allow configuration of log format and log level for the command output.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_version.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis from Outside the Cluster (NodePort)\nDESCRIPTION: This snippet shows how to connect to Redis from outside the cluster when using NodePort service type, by obtaining the node IP and port.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/templates/NOTES.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n    export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"redis.fullname\" . }}-master)\n    redis-cli -h $NODE_IP -p $NODE_PORT {{- if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Go on macOS\nDESCRIPTION: Command to install the Go programming language on macOS using Homebrew.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install go\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-Project Sharing of CloudProfiles in Shoot Objects - YAML\nDESCRIPTION: This YAML configuration extends the Shoot object to reference a NamespacedCloudProfile from another namespace by adding the 'namespace' field in 'cloudProfile'. It requires Gardener's API and validations to support namespace-scoped CloudProfiles. Key parameters are 'spec.cloudProfile.kind', 'spec.cloudProfile.name', and 'spec.cloudProfile.namespace'. The input is a Kubernetes YAML manifest for a Shoot referencing a cross-project profile; output is a Shoot resource with cross-project linkage. Prerequisite is cross-namespace validation logic and RBAC handling for profile access. Limitations include the need for clear authorization strategies for cross-project references.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md#2025-04-22_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\\nkind: Shoot\\nmetadata:\\n  name: my-shoot\\n  namespace: project-xyz\\n  ...\\nspec:\\n  ...\\n  cloudProfile:\\n    kind: NamespacedCloudProfile\\n    name: aws-profile-xyz\\n    namespace: other-project-abc\\n  ...\\n\n```\n\n----------------------------------------\n\nTITLE: Testing New Tests with Gardener Suite in Console\nDESCRIPTION: Command for testing newly created tests with the gardener test suite, providing report options and project namespace.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngo test -timeout=0 ./test/testmachinery/suites/gardener \\\n      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\\n      --report-file=/tmp/report.json \\\n      --disable-dump=false \\\n      -kubecfg=/path/to/gardener/kubeconfig \\\n      -project-namespace=<gardener project namespace>\n```\n\n----------------------------------------\n\nTITLE: Available Options for gardenadm version Command\nDESCRIPTION: This snippet shows the available options specific to the 'version' command. It includes a help flag for displaying command usage information.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_version.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Interacting with containerd via ctr CLI (Prerequisite)\nDESCRIPTION: The `ctr` command-line interface is listed as a prerequisite. It must be pre-installed alongside `containerd` on the machines intended to host the autonomous shoot cluster, allowing direct interaction with the container runtime.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\nctr\n```\n\n----------------------------------------\n\nTITLE: Feature Gates Table in Markdown\nDESCRIPTION: Markdown table displaying feature gates with their default values, stages, and version information for the Gardener project. Shows progression of features through Alpha, Beta, GA, and Removed stages.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/feature_gates.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                                      | Default | Stage        | Since   | Until   |\n|----------------------------------------------|---------|--------------|---------|---------|\n| NodeLocalDNS                                 | `false` | `Alpha`      | `1.7`   | `1.25`  |\n| NodeLocalDNS                                 |         | `Removed`    | `1.26`  |         |\n| KonnectivityTunnel                           | `false` | `Alpha`      | `1.6`   | `1.26`  |\n| KonnectivityTunnel                           |         | `Removed`    | `1.27`  |         |\n```\n\n----------------------------------------\n\nTITLE: API Server Configuration Code Structures\nDESCRIPTION: Defines configuration options for the Kubernetes API server including authentication, authorization, logging, encryption, and autoscaling settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/core.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ncode requests</code></br>\n<em>\n<a href=\"#core.gardener.cloud/v1beta1.APIServerRequests\">\nAPIServerRequests\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Requests contains configuration for request-specific settings for the kube-apiserver.</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Scheduling Profile in Shoot Specification\nDESCRIPTION: YAML configuration showing how to set the scheduling profile in the Shoot specification using the kubernetes.kubeScheduler.profile field.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_scheduling_profiles.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  # ...\n  kubernetes:\n    kubeScheduler:\n      profile: \"balanced\" # or \"bin-packing\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH for GNU tools on macOS\nDESCRIPTION: Commands to add GNU tools to the PATH environment variable on macOS, allowing them to be used without the 'g' prefix.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$(brew --prefix)/opt/coreutils/libexec/gnubin:$PATH\nexport PATH=$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH\nexport PATH=$(brew --prefix)/opt/gnu-tar/libexec/gnubin:$PATH\nexport PATH=$(brew --prefix)/opt/grep/libexec/gnubin:$PATH\nexport PATH=$(brew --prefix)/opt/gzip/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Comparing Istio Charts\nDESCRIPTION: Commands to compare the current and new versions of Istiod and Ingress configurations using diff.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/component/networking/istio/charts/istio/README.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndiff istio-istiod.yaml istio-istiod-${ISTIO_VERSION}.yaml\ndiff istio-ingress.yaml istio-ingress-${ISTIO_VERSION}.yaml\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Gardener Tests\nDESCRIPTION: A console representation of the directory structure for Gardener tests, showing the organization of different test types including e2e, integration, and testmachinery tests.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ntest\n├── e2e           # end-to-end tests (using provider-local)\n│  ├── gardener\n│  │  ├── seed\n│  │  ├── shoot\n|  |  └── ...\n|  └──operator\n├── framework     # helper code shared across integration, e2e and testmachinery tests\n├── integration   # integration tests (envtests)\n│  ├── controllermanager\n│  ├── envtest\n│  ├── resourcemanager\n│  ├── scheduler\n│  └── ...\n└── testmachinery # test machinery tests\n   ├── gardener   # actual test cases imported by suites/gardener\n   │  └── security\n   ├── shoots     # actual test cases imported by suites/shoot\n   │  ├── applications\n   │  ├── care\n   │  ├── logging\n   │  ├── operatingsystem\n   │  ├── operations\n   │  └── vpntunnel\n   ├── suites     # suites that run against a running garden or shoot cluster\n   │  ├── gardener\n   │  └── shoot\n   └── system     # suites that are used for building a full test flow\n      ├── complete_reconcile\n      ├── managed_seed_creation\n      ├── managed_seed_deletion\n      ├── shoot_cp_migration\n      ├── shoot_creation\n      ├── shoot_deletion\n      ├── shoot_hibernation\n      ├── shoot_hibernation_wakeup\n      └── shoot_update\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl on macOS\nDESCRIPTION: Command to install kubectl (Kubernetes command-line tool) on macOS using Homebrew. The guide specifies version v1.27.x or newer is required.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install kubernetes-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying the gardenadm Tool Version (CLI)\nDESCRIPTION: The `gardenadm version` command prints the version information for the `gardenadm` command-line tool.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\ngardenadm version\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis from Outside the Cluster (LoadBalancer)\nDESCRIPTION: This snippet demonstrates how to connect to Redis from outside the cluster when using LoadBalancer service type, by obtaining the service IP.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/templates/NOTES.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"redis.fullname\" . }} --template \"{{\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\"}\")\n    redis-cli -h $SERVICE_IP -p {{ .Values.master.service.nodePort }} {{- if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart with Password Parameter\nDESCRIPTION: Example showing how to install the Redis Helm chart with a custom password parameter using the helm install command.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release \\\n  --set password=secretpassword \\\n    stable/redis\n```\n\n----------------------------------------\n\nTITLE: Kubelet Configuration File in OperatingSystemConfig Resource\nDESCRIPTION: Specifies the kubelet configuration file that Gardener shall create in the OperatingSystemConfig resource. This file must contain a KubeletConfiguration resource in YAML format with appropriate parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/controlplane-webhooks.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n/var/lib/kubelet/config/kubelet:\n  # Contains a KubeletConfiguration resource in YAML format\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Commands to install the Homebrew package manager on macOS, which is used for installing other dependencies in this guide.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of gardenadm connect in Bash\nDESCRIPTION: This example demonstrates how to deploy a gardenlet using the 'gardenadm connect' command without any additional flags.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_connect.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm connect\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Version Requirements\nDESCRIPTION: Lists the supported Kubernetes version ranges for Garden clusters (min 1.27.x), Seed clusters (min 1.27.x), and Shoot clusters (1.27 to 1.32). The actual shoot cluster versions depend on provider extension support.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot-operations/supported_k8s_versions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGarden Clusters: 1.27.x (minimum)\\nSeed Clusters: 1.27.x (minimum)\\nShoot Clusters: 1.27 to 1.32\n```\n\n----------------------------------------\n\nTITLE: Defining GEP Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter section that contains metadata for a Gardener Enhancement Proposal (GEP) including title, GEP number, creation date, status, authors, and reviewers.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/00-template.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: GEP Title\ngep-number: NNNN\ncreation-date: 20XX-XX-XX\nstatus: implementable|implemented\nauthors:\n- \"@you\"\n- \"@maybe-another-author\"\nreviewers:\n- \"@main-reviewer-1\"\n- \"@main-reviewer-2\"\n---\n```\n\n----------------------------------------\n\nTITLE: Component-Specific Image Vector Configuration\nDESCRIPTION: Illustrates how to configure image vectors for dependent components like etcd-druid.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/image_vector.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n- name: etcd-druid\n  imageVectorOverwrite: |\n    images:\n    - name: etcd\n      tag: v1.2.3\n      repository: etcd/etcd\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Range from Etcd Leader\nDESCRIPTION: Command to fetch a range of keys (from 1 to 17999) from the etcd leader and save the output to a file. This is used to measure GET request traffic patterns when targeting the leader node.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\netcdctl --endpoints=https://etcd-main-1.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 get 1 17999 > /tmp/range2.txt\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Core Utilities on macOS\nDESCRIPTION: Command to install GNU core utilities and related tools on macOS using Homebrew, which are needed for compatibility with Linux commands.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils gnu-sed gnu-tar grep gzip\n```\n\n----------------------------------------\n\nTITLE: Deleting Key Range from Etcd Follower with Time Measurement\nDESCRIPTION: Command to delete a range of keys (from 0 to 99999) from an etcd follower with execution time measurement. It uses extended timeouts to accommodate the large operation.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntime etcdctl --endpoints=https://etcd-main-1.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 del 0 99999    --dial-timeout=300s --command-timeout=300s\n```\n\n----------------------------------------\n\nTITLE: Installing iproute2 on macOS\nDESCRIPTION: Command to install iproute2mac on macOS using Homebrew, which provides network administration utilities.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install iproute2mac\n```\n\n----------------------------------------\n\nTITLE: Running ManagedSeed E2E Test with Local Provider\nDESCRIPTION: Command to execute end-to-end tests specifically for ManagedSeed functionality using the local provider extension.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/provider-local.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./hack/test-e2e-local.sh --label-filter \"ManagedSeed\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Using CLI in Various Configurations\nDESCRIPTION: These commands demonstrate how to connect to Redis using the redis-cli in different deployment scenarios, including standalone, cluster, and sentinel modes.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/templates/NOTES.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{- if .Values.cluster.enabled }}\n   {{- if .Values.sentinel.enabled }}\n   redis-cli -h {{ template \"redis.fullname\" . }} -p {{ .Values.sentinel.service.redisPort }}{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }} # Read only operations\n   redis-cli -h {{ template \"redis.fullname\" . }} -p {{ .Values.sentinel.service.sentinelPort }}{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }} # Sentinel access\n   {{- else }}\n   redis-cli -h {{ template \"redis.fullname\" . }}-master{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n   redis-cli -h {{ template \"redis.fullname\" . }}-slave{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n   {{- end }}\n{{- else }}\n   redis-cli -h {{ template \"redis.fullname\" . }}-master{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Removing Chart Label from Redis Deployments for 4.0.0 Upgrade\nDESCRIPTION: Commands to patch Redis slave and metrics deployments to remove the immutable chart label from selector matchLabels, which is required for upgrading to version 4.0.0.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch deployments my-release-redis-slave --type=json -p='[{\"op\": \"remove\", \"path\": \"/spec/selector/matchLabels/chart\"}]'\nkubectl patch deployments my-release-redis-metrics --type=json -p='[{\"op\": \"remove\", \"path\": \"/spec/selector/matchLabels/chart\"}]'\n```\n\n----------------------------------------\n\nTITLE: CoreDNS Autoscaler ConfigMap Default Settings\nDESCRIPTION: This YAML snippet represents the default configuration for the `coredns-autoscaler` ConfigMap in the `kube-system` namespace of a Gardener shoot cluster. It shows the default `linear` scaling configuration parameter values used for calculating CoreDNS replicas based on cluster size.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/autoscaling/dns-autoscaling.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\\nlinear: '{\"coresPerReplica\":256,\"min\":2,\"nodesPerReplica\":16}'\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS\nDESCRIPTION: Command to install Git version control system on macOS using Homebrew.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Linking to Gardener CLI Documentation in Markdown\nDESCRIPTION: This snippet creates a bullet point list with a single item, linking to the documentation for the 'gardenadm' command using Markdown syntax.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [`gardenadm`](gardenadm/gardenadm.md)\n```\n\n----------------------------------------\n\nTITLE: Reference: List of NetworkPolicies Deployed by Gardenlet in Text Table\nDESCRIPTION: This text snippet provides a reference list compiling the default NetworkPolicies deployed by 'gardenlet' to the 'kube-system' namespace in shoot clusters. Each policy is paired with its pod selector, showing which traffic scenarios the policies allow. This is intended as operational documentation or a checklist rather than an executable script, and is for context when auditing or supplementing Gardener's default network rules.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/network_policies.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nNAME                                       POD-SELECTOR\ngardener.cloud--allow-dns                  k8s-app in (kube-dns)\ngardener.cloud--allow-from-seed            networking.gardener.cloud/from-seed=allowed\ngardener.cloud--allow-to-dns               networking.gardener.cloud/to-dns=allowed\ngardener.cloud--allow-to-apiserver         networking.gardener.cloud/to-apiserver=allowed\ngardener.cloud--allow-to-from-nginx        app=nginx-ingress\ngardener.cloud--allow-to-kubelet           networking.gardener.cloud/to-kubelet=allowed\ngardener.cloud--allow-to-public-networks   networking.gardener.cloud/to-public-networks=allowed\ngardener.cloud--allow-vpn                  app=vpn-shoot\n\n```\n\n----------------------------------------\n\nTITLE: Installing Redis with Helm (Testing Configuration)\nDESCRIPTION: This command installs Redis using the default testing configuration provided by the Helm chart.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install stable/redis\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included in files to apply the Apache License 2.0. It includes placeholders for the year and copyright owner information, along with the standard license text.\nSOURCE: https://github.com/gardener/gardener/blob/master/LICENSES/Apache-2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart with Custom Values File\nDESCRIPTION: Example demonstrating how to install the Redis Helm chart using a custom values YAML file that specifies configuration parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release -f values.yaml stable/redis\n```\n\n----------------------------------------\n\nTITLE: Listing Machine Resources in Kubernetes Cluster\nDESCRIPTION: Command to list all machine custom resources in the Kubernetes cluster, showing the machine names and their current status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get machines # list of machines for the multi-AZ shoot control plane\n```\n\n----------------------------------------\n\nTITLE: Setting Sysctls via securityContext in Kubernetes 1.12+\nDESCRIPTION: YAML configuration for setting system controls (sysctls) using securityContext in Kubernetes 1.12 and later, as an alternative to using initContainers for Redis optimization.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  sysctls:\n  - name: net.core.somaxconn\n    value: \"10000\"\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that can be used with 'gardenadm init', including logging configuration options.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_init.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Helper Functions to Avoid in Go Controllers\nDESCRIPTION: List of helper functions that should be avoided in Gardener controllers due to caching issues and webhook performance concerns. These include controllerutil.CreateOrUpdate, controllerutil.CreateOrPatch, and Try{Update,UpdateStatus,Patch,PatchStatus} functions.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ncontrollerutil.CreateOrUpdate\n```\n\nLANGUAGE: go\nCODE:\n```\ncontrollerutil.CreateOrPatch\n```\n\nLANGUAGE: go\nCODE:\n```\nTry{Update,UpdateStatus,Patch,PatchStatus}\n```\n\n----------------------------------------\n\nTITLE: Command for Importing Test Tools\nDESCRIPTION: Command to import binary tools from the golang-test image into the local environment. The source directory defaults to /gardenertools but can be configured via TOOLS_BIN_SOURCE_DIR environment variable.\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/tools/image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake import-tools-bin\n```\n\n----------------------------------------\n\nTITLE: Watching etcd keys by targeting follower node in Gardener Kubernetes cluster\nDESCRIPTION: Command to watch keys between 0 and 99999 by specifically targeting an etcd follower node. This command uses etcdctl with specific timeout values to monitor for changes to these keys in real-time.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ntime etcdctl --endpoints=https://etcd-main-1.etcd-main-peer.shoot--ash-garden--mz-neem.svc:2379 watch 0 99999    --dial-timeout=300s --command-timeout=300s\n```\n\n----------------------------------------\n\nTITLE: Production Configuration Differences for Redis Cluster in Helm\nDESCRIPTION: Highlights the differences between default and production configurations for Redis cluster, showing recommended values for slave count, network policies, and metrics exporters.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- cluster.slaveCount: 2\n+ cluster.slaveCount: 3\n```\n\nLANGUAGE: diff\nCODE:\n```\n- networkPolicy.enabled: false\n+ networkPolicy.enabled: true\n```\n\nLANGUAGE: diff\nCODE:\n```\n- metrics.enabled: false\n+ metrics.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists global options available to all gardenadm commands, including logging format and level configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_generate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Garden Client Connection in Managed Seed\nDESCRIPTION: YAML configuration for a ManagedSeed resource, specifying the Garden API endpoint. This is required when deploying a Gardenlet to a different Kubernetes cluster where internal communication is not possible.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  gardenlet:\n    config:\n      apiVersion: gardenlet.config.gardener.cloud/v1alpha1\n      kind: GardenletConfiguration\n      gardenClientConnection:\n        gardenClusterAddress: https://api.garden.crazy-botany.gardener.cloud\n```\n\n----------------------------------------\n\nTITLE: Checking File Size with du Command\nDESCRIPTION: Command to display the size of a file in human-readable format, used to verify the size of data retrieved from etcd after a GET request.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/20-ha-control-planes.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndu -h  /tmp/range2.txt\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Redis Helm Release\nDESCRIPTION: This command removes all Kubernetes components associated with the 'my-release' deployment and deletes the release.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ helm delete my-release\n```\n\n----------------------------------------\n\nTITLE: Checking Second Seed Status\nDESCRIPTION: This command checks the status of the second Seed cluster (local2). The output shows details including status, provider, region, age, version, and Kubernetes version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nNAME    STATUS   PROVIDER   REGION   AGE     VERSION       K8S VERSION\nlocal2  Ready    local      local    4m42s   vX.Y.Z-dev    v1.25.1\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Provider Extension in Gardener\nDESCRIPTION: YAML configuration for deploying the OpenStack provider extension, which supports BackupBucket, DNSRecord, and other resources. The configuration includes deployment settings for both runtime and virtual clusters, with resource specifications for components managed by this extension.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  name: provider-openstack\nspec:\n  deployment:\n    admission:\n      runtimeCluster:\n        helm:\n          ociRepository:\n            repository: europe-docker.pkg.dev/gardener-project/releases/charts/gardener/extensions/admission-openstack-runtime\n            tag: v1.44.1\n      values:\n        replicaCount: 3\n      virtualCluster:\n        helm:\n          ociRepository:\n            repository: europe-docker.pkg.dev/gardener-project/releases/charts/gardener/extensions/admission-openstack-application\n            tag: v1.44.1\n    extension:\n      helm:\n        ociRepository:\n          repository: europe-docker.pkg.dev/gardener-project/releases/charts/gardener/extensions/provider-openstack\n          tag: v1.44.1\n      runtimeClusterValues:\n        vpa:\n          enabled: true\n          resourcePolicy:\n            minAllowed:\n              memory: 128Mi\n          updatePolicy:\n            updateMode: Auto\n      values:\n        replicaCount: 3\n        resources:\n          requests:\n            cpu: 30m\n            memory: 256Mi\n      injectGardenKubeconfig: true\n  resources:\n  - kind: BackupBucket\n    type: openstack\n  - kind: BackupEntry\n    type: openstack\n  - kind: Bastion\n    type: openstack\n  - kind: ControlPlane\n    type: openstack\n  - kind: Infrastructure\n    type: openstack\n  - kind: Worker\n    type: openstack\n  - kind: DNSRecord\n    type: openstack-designate\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeClass and ExposureClass Resources in YAML\nDESCRIPTION: This snippet demonstrates the definition of RuntimeClass and ExposureClass resources in Kubernetes. It configures a RuntimeClass named 'gvisor' and an ExposureClass named 'internet', with handlers and optional scheduling fields. No external dependencies are required, but administrators must ensure the corresponding configuration is installed correctly.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/networking/exposureclasses.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: gvisor\nhandler: gvisorconfig\n# scheduling:\n#   nodeSelector:\n#     env: prod\n---\nkind: ExposureClass\nmetadata:\n  name: internet\nhandler: internet-config\n# scheduling:\n#   seedSelector:\n#     matchLabels:\n#       network/env: internet\n```\n\n----------------------------------------\n\nTITLE: Removing Additional IP Address on macOS\nDESCRIPTION: This command removes the additional IP address (172.18.255.2) from the loopback device on macOS after tearing down the second KinD cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nsudo ip addr del 172.18.255.2 dev lo0\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Ginkgo Focus on Specific Test\nDESCRIPTION: Command showing how to use the ginkgo.focus flag to run specific tests by name pattern, useful for targeting individual tests without modifying the code.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ngo test -timeout=0 ./test/testmachinery/suites/gardener \\\n      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\\n      --report-file=/tmp/report.json \\\n      -kubecfg=/path/to/gardener/kubeconfig \\\n      -project-namespace=<gardener project namespace> \\\n      -ginkgo.focus=\"my first test\"\n```\n\n----------------------------------------\n\nTITLE: Example of gardenadm init Command\nDESCRIPTION: An example showing how to bootstrap the first control plane node using the 'gardenadm init' command without any flags.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_init.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Bootstrap the first control plane node\ngardenadm init\n```\n\n----------------------------------------\n\nTITLE: Creating Backup Secret for Gardener in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a secret in the garden cluster with client credentials for the storage provider used for etcd backups. The format of the secret is specific to the cloud provider being used.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: sweet-seed-backup\n  namespace: garden\ntype: Opaque\ndata:\n  # client credentials format is provider specific\n```\n\n----------------------------------------\n\nTITLE: Configuring an Extension in a Shoot Resource\nDESCRIPTION: YAML showing how to configure an extension in a Shoot resource with custom provider configuration. The 'example' extension is configured with a key-value parameter that will be passed to the Extension resource.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/extension.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nmetadata:\n  name: bar\n  namespace: garden-foo\nspec:\n  extensions:\n  - type: example\n    providerConfig:\n      foo: bar\n...\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Provider Secret Manifest in Gardener\nDESCRIPTION: Refers to an example manifest for the secret containing infrastructure provider credentials, which are required to create and manage resources in the cloud provider's environment.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/70-secret-provider.yaml\n```\n\n----------------------------------------\n\nTITLE: Tearing Down the KinD Cluster\nDESCRIPTION: Command to remove the KinD cluster and clean up resources after testing. This ensures a clean environment for subsequent tests or development work.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally_with_gardenadm.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake kind-down\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Chart Version for Gardenlet Deployment - YAML\nDESCRIPTION: This minimal YAML snippet shows how to update the Helm chart version or digest for the Gardenlet's deployment via the ociRepository ref. By changing the tag or digest, users can trigger a self-upgrade of the gardenlet component. Inputs include the new Helm chart reference/tag (supplied as ref). Output is a newly triggered reconciliation process (when applied to the cluster resource). Prerequisites: the cluster must already be configured for gardenlet self-management, and new OCI references must be accessible. Proper formatting and referencing are required for seamless upgrades.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/deploy_gardenlet_manually.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\\n  deployment:\\n    helm:\\n      ociRepository:\\n        ref: <url-to-gardenlet-chart-repository>:v1.97.0\n```\n\n----------------------------------------\n\nTITLE: Defining Worker CRD in Kubernetes\nDESCRIPTION: This snippet defines the Custom Resource Definition for the Worker resource in Gardener. It includes fields for metadata, spec (containing infrastructure provider status, region, secret reference, SSH public key, and worker pools), and status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_7\n\nLANGUAGE: kubernetes\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: workers.extensions.gardener.cloud\nspec:\n  group: extensions.gardener.cloud\n  versions:\n    - name: v1alpha1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                infrastructureProviderStatus:\n                  type: object\n                  x-kubernetes-preserve-unknown-fields: true\n                region:\n                  type: string\n                secretRef:\n                  type: object\n                sshPublicKey:\n                  type: string\n                  format: byte\n                pools:\n                  type: array\n                  items:\n                    type: object\n            status:\n              type: object\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for gardenadm token delete\nDESCRIPTION: This snippet lists the options inherited from parent commands, including log format and log level configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/cli-reference/gardenadm/gardenadm_token_delete.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --log-format string   The format for the logs. Must be one of [json text] (default \"text\")\n      --log-level string    The level/severity for the logs. Must be one of [debug info error] (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Defining Capabilities as a Map in Go\nDESCRIPTION: This Go snippet introduces the type alias `Capabilities` as a map from string to string slice for holding capability sets. It underpins the schema for specifying and checking machine image and machine type compatibility. No external dependencies are required; this type integrates with surrounding struct definitions. It expects keys as capability names and values as available options for those capabilities, with constraints set by provider support.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/33-machine-image-capabilities.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntype Capabilities map[string][]string\n\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes API Conflict Error (409) Response in JSON\nDESCRIPTION: Illustrates the JSON structure of a standard Kubernetes API Status object returned upon encountering a conflict error (HTTP status code 409). This occurs when an update request includes a `resourceVersion` that no longer matches the object's current version in etcd, indicating a concurrent modification.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Status\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {},\n  \"status\": \"Failure\",\n  \"message\": \"Operation cannot be fulfilled on configmaps \\\"foo\\\": the object has been modified; please apply your changes to the latest version and try again\",\n  \"reason\": \"Conflict\",\n  \"details\": {\n    \"name\": \"foo\",\n    \"kind\": \"configmaps\"\n  },\n  \"code\": 409\n}\n```\n\n----------------------------------------\n\nTITLE: Example ClusterParser for Alertmanager Logs\nDESCRIPTION: Example YAML configuration for a ClusterParser that defines the specific regex pattern and time format for parsing alertmanager logs, showing a complete implementation with escaped regex patterns.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/log_parsers.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterParser\nmetadata:\n  name: alermanager-parser\n  labels:\n    fluentbit.gardener/type: \"seed\"\nspec:\n  regex:\n    timeKey: time\n    timeFormat: \"%Y-%m-%dT%H:%M:%S.%L\"\n    regex: \"^level=(?<severity>\\\\w+)\\\\s+ts=(?<time>\\\\d{4}-\\\\d{2}-\\\\d{2}[Tt].*[zZ])\\\\s+caller=(?<source>[^\\\\s]*+)\\\\s+(?<log>.*)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Ingress Certificate Secret in YAML\nDESCRIPTION: This YAML snippet shows how to create a Kubernetes Secret containing a wildcard TLS certificate for securing shoot control plane components. The secret must be placed in the garden namespace of the seed cluster and include the proper gardener.cloud/role label.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/operations/trusted-tls-for-control-planes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  ca.crt: base64-encoded-ca.crt\n  tls.crt: base64-encoded-tls.crt\n  tls.key: base64-encoded-tls.key\nkind: Secret\nmetadata:\n  labels:\n    gardener.cloud/role: controlplane-cert\n  name: seed-ingress-certificate\n  namespace: garden\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Using Gardener's ClientMap to Obtain Client Interfaces in Go\nDESCRIPTION: This snippet demonstrates how to use Gardener's ClientMap to obtain client interfaces for different cluster types. ClientMaps manage the lifecycle of clients, handling creation, caching, version refreshing, and invalidation when no longer needed.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/kubernetes-clients.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  ctx   context.Context\n  cm    clientmap.ClientMap // \"github.com/gardener/gardener/pkg/client/kubernetes/clientmap\"\n  shoot *gardencorev1beta1.Shoot\n)\n\ncs, err := cm.GetClient(ctx, keys.ForShoot(shoot)) // kubernetes.Interface\nif err != nil {\n  return err\n}\n\nc := cs.Client() // client.Client\n```\n\n----------------------------------------\n\nTITLE: Configuring VPA Settings in Gardener Shoot Cluster\nDESCRIPTION: YAML configuration for enabling and customizing Vertical Pod Autoscaler settings in a Gardener-managed Kubernetes cluster. Includes parameters for eviction thresholds, recommendation margins, and update intervals.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/high-availability/shoot_high_availability_best_practices.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    verticalPodAutoscaler:\n      enabled: true\n      evictAfterOOMThreshold: 10m0s\n      evictionRateBurst: 1\n      evictionRateLimit: -1\n      evictionTolerance: 0.5\n      recommendationMarginFraction: 0.15\n      updaterInterval: 1m0s\n      recommenderInterval: 1m0s\n```\n\n----------------------------------------\n\nTITLE: Sample BackupEntry Resource Definition in YAML\nDESCRIPTION: Example of a BackupEntry resource created by Gardener in the seed cluster that needs to be reconciled by an extension controller. It includes configuration for Azure provider, region, bucket information, and a reference to the provider secret.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/backupentry.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: BackupEntry\nmetadata:\n  name: shoot--foo--bar\nspec:\n  type: azure\n  providerConfig:\n    <some-optional-provider-specific-backup-bucket-configuration>\n  backupBucketProviderStatus:\n    <some-optional-provider-specific-backup-bucket-status>\n  region: eu-west-1\n  bucketName: foo\n  secretRef:\n    name: backupprovider\n    namespace: shoot--foo--bar\n```\n\n----------------------------------------\n\nTITLE: Configuring a Protected Gardenlet in Gardener\nDESCRIPTION: YAML configuration for protecting the first Seed cluster by setting taints and scheduling visibility to prevent user Shoot control planes from being scheduled on it. This setup is recommended for hosting only control planes of Gardener-managed Seed clusters.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/setup_gardener.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  config:\n    seedConfig:\n      spec:\n        scheduling:\n          visible: false\n        taints:\n          - key: seed.gardener.cloud/protected\n```\n\n----------------------------------------\n\nTITLE: Defining Infrastructure Resource in YAML for Azure Provider\nDESCRIPTION: Example YAML definition of an Infrastructure resource for Azure, specifying the provider config including resource group and network settings.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/infrastructure.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Infrastructure\nmetadata:\n  name: infrastructure\n  namespace: shoot--foo--bar\nspec:\n  type: azure\n  region: eu-west-1\n  secretRef:\n    name: cloudprovider\n    namespace: shoot--foo--bar\n  providerConfig:\n    apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureConfig\n    resourceGroup:\n      name: mygroup\n    networks:\n      vnet: # specify either 'name' or 'cidr'\n      # name: my-vnet\n        cidr: 10.250.0.0/16\n      workers: 10.250.0.0/19\n```\n\n----------------------------------------\n\nTITLE: Last Maintenance Status Failure Example in YAML\nDESCRIPTION: Demonstrates the status output when maintenance operations partially fail, including failure reasons and details of successful and failed operations.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_maintenance.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nLast Maintenance:\n  Description:     \"(1/2) maintenance operations successful: Control Plane: Updated Kubernetes version from 1.26.4 to 1.27.1. Reason: Kubernetes version expired - force update required, Worker pool x: 'gardenlinux' machine image version maintenance failed. Reason for update: machine image version expired\"\n  FailureReason:   \"Worker pool x: either the machine image 'gardenlinux' is reaching end of life and migration to another machine image is required or there is a misconfiguration in the CloudProfile.\"\n  State:           Failed\n  Triggered Time:  2023-07-28T09:07:27Z\n```\n\n----------------------------------------\n\nTITLE: Defining DNSRecordSpec Structure in Go\nDESCRIPTION: This code defines the DNSRecordSpec structure, which represents the specification for a DNSRecord resource in Gardener. It includes fields for DNS record details such as name, type, values, and TTL.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/extensions.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype DNSRecordSpec struct {\n\tDefaultSpec\n\tSecretRef corev1.SecretReference\n\tRegion    string\n\tZone      string\n\tName      string\n\tRecordType DNSRecordType\n\tValues    []string\n\tTTL       int64\n}\n```\n\n----------------------------------------\n\nTITLE: Operating System Config Result Secret in YAML\nDESCRIPTION: An example of the Secret resource that contains the generated operating system configuration. This secret is created by the operating system extension controller and referenced in the OperatingSystemConfig status.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/operatingsystemconfig.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: osc-result-pool-01-original\n  namespace: default\n  ownerReferences:\n  - apiVersion: extensions.gardener.cloud/v1alpha1\n    blockOwnerDeletion: true\n    controller: true\n    kind: OperatingSystemConfig\n    name: pool-01-original\n    uid: 99c0c5ca-19b9-11e9-9ebd-d67077b40f82\ndata:\n  cloud_config: base64(generated-user-data)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Helm Chart Notice in Markdown\nDESCRIPTION: A markdown notice informing users that the gardener/controlplane Helm chart is deprecated and will be removed after v1.135. It provides links to migration documentation for switching to gardener-operator.\nSOURCE: https://github.com/gardener/gardener/blob/master/charts/gardener/controlplane/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `gardener/controlplane` Helm Chart\n\n> [!CAUTION]\n> This Helm chart has been marked as \"deprecated\".\n> It will be removed after v1.135 of Gardener has been released (around beginning of 2026).\n>\n> We urge you to switch to a [`gardener-operator`](../../../docs/concepts/operator.md)-based installation.\n> Read all about it [here](../../../docs/concepts/operator.md#migrating-an-existing-gardener-landscape-to-gardener-operator).\n```\n\n----------------------------------------\n\nTITLE: Running Redis Client Pod in Kubernetes\nDESCRIPTION: This command runs a temporary Redis client pod in the Kubernetes cluster, setting up environment variables and labels as needed.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/templates/NOTES.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run --namespace {{ .Release.Namespace }} {{ template \"redis.fullname\" . }}-client --rm --tty -i --restart='Never' \\\n   {{ if .Values.usePassword }} --env REDIS_PASSWORD=$REDIS_PASSWORD \\{{ end }}\n   {{- if and (.Values.networkPolicy.enabled) (not .Values.networkPolicy.allowExternal) }}--labels=\"{{ template \"redis.name\" . }}-client=true\" \\{{- end }}\n   --image {{ template \"redis.image\" . }} -- bash\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis from Outside the Cluster (ClusterIP)\nDESCRIPTION: This snippet shows how to connect to Redis from outside the cluster when using ClusterIP service type, by setting up port forwarding.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/templates/NOTES.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ template \"redis.fullname\" . }}-master {{ .Values.redisPort }}:{{ .Values.redisPort }} &\n    redis-cli -h 127.0.0.1 -p {{ .Values.redisPort }} {{- if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining BastionSpec in Go\nDESCRIPTION: Defines the BastionSpec struct specifying the configuration for a Bastion. It includes fields for the target shoot, seed name, provider type, SSH public key, and ingress policies.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operations.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype BastionSpec struct {\n\tShootRef     corev1.LocalObjectReference\n\tSeedName     string\n\tProviderType string\n\tSSHPublicKey string\n\tIngress      []BastionIngressPolicy\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering New Istio Version Templates\nDESCRIPTION: Commands to render templates for the new Istio version's Istiod and Ingress components with specific configuration parameters.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/component/networking/istio/charts/istio/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm template manifests/charts/istio-control/istio-discovery/ -n istio-system \\\n--set=global.omitSidecarInjectorConfigMap=true \\\n--set=global.configValidation=true \\\n--set=pilot.autoscaleEnabled=false \\\n--set=global.operatorManageWebhooks=true > istio-istiod-${ISTIO_VERSION}.yaml\n\nhelm template manifests/charts/gateways/istio-ingress -n istio-ingress > istio-ingress-${ISTIO_VERSION}.yaml\n```\n\n----------------------------------------\n\nTITLE: Specifying Mutated Resource Label in YAML\nDESCRIPTION: YAML snippet showing the label added by gardenlet to resources that have been mutated by controlplane webhooks. Provider extensions can use this label in object selectors to avoid intercepting unrelated objects.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/controlplane-webhooks.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprovider.extensions.gardener.cloud/mutated-by-controlplane-webhook: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Kubelet Configuration Changes for Kubernetes v1.31\nDESCRIPTION: Deprecation of clientAuthentication in oidcConfig and systemReserved fields. Users should use kubeReserved fields instead for resource reservation configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/shoot_kubernetes_versions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n.spec.kubernetes.kubeAPIServer.oidcConfig.clientAuthentication\n.spec.kubernetes.kubelet.systemReserved\n.spec.provider.workers[].kubernetes.kubelet.systemReserved\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Quota Manifest in Gardener\nDESCRIPTION: Refers to an example Quota manifest used to limit resource consumption for trial clusters, allowing operators to control costs and ensure fair resource distribution among users.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/apiserver.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n../../example/60-quota.yaml\n```\n\n----------------------------------------\n\nTITLE: Extension Resource Structure in Gardener\nDESCRIPTION: YAML template showing the structure of an Extension resource created in the shoot namespace of the seed cluster. This defines the 'example' extension type with an empty provider configuration.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/extensions/resources/extension.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: extensions.gardener.cloud/v1alpha1\nkind: Extension\nmetadata:\n  name: example\n  namespace: shoot--foo--bar\nspec:\n  type: example\n  providerConfig: {}\n```\n\n----------------------------------------\n\nTITLE: Resources Directory Structure for Test Templates\nDESCRIPTION: Directory structure showing the location of template files used by the tests. The templates include guestbook and logger applications used for standard test scenarios.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/testmachinery_tests.md#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nresources\n└── templates\n    ├── guestbook-app.yaml.tpl\n    └── logger-app.yaml.tpl\n```\n\n----------------------------------------\n\nTITLE: Listing Gardenadm Commands\nDESCRIPTION: Lists the available commands for the gardenadm CLI tool, including discover, init, token, join, connect, and version.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngardenadm discover\ngardenadm init\ngardenadm token\ngardenadm join\ngardenadm connect\ngardenadm version\n```\n\n----------------------------------------\n\nTITLE: Plutono Vali Datasource Configuration in YAML\nDESCRIPTION: Configuration for connecting Plutono to Vali as a datasource, specifying the access method, URL, and maximum lines to display.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/logging.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- name: vali\n  type: vali\n  access: proxy\n  url: http://logging.{{ .Release.Namespace }}.svc:3100\n  jsonData:\n    maxLines: 5000\n```\n\n----------------------------------------\n\nTITLE: DNS Zone File Configuration\nDESCRIPTION: Zone file configuration for kubernetes.default.svc.cluster.local DNS resolution\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ORIGIN default.svc.cluster.local.\n\n@\t30 IN\tSOA local. local. (\n        2017042745 ; serial\n        1209600    ; refresh (2 hours)\n        1209600    ; retry (1 hour)\n        1209600    ; expire (2 weeks)\n        30         ; minimum (1 hour)\n        )\n\n  30 IN NS local.\n\nkubernetes     IN A     10.0.0.2\n```\n\n----------------------------------------\n\nTITLE: Defining MachineImageVersion struct in Go\nDESCRIPTION: MachineImageVersion contains a version and a provider-specific identifier for a machine image. It is used within the MachineImages struct to represent multiple versions of an image.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/provider-local.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MachineImageVersion struct {\n    Version string `json:\"version\"`\n    Image   string `json:\"image\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Restrictions in CloudProfile YAML\nDESCRIPTION: Example showing how to configure region-specific access restrictions in a CloudProfile specification. Demonstrates setting up EU-access-only restriction for europe-central-1 region.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/usage/shoot/access_restrictions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  regions:\n  - name: europe-central-1\n    accessRestrictions:\n    - name: eu-access-only\n  - name: us-west-1\n```\n\n----------------------------------------\n\nTITLE: Enabling DefaultDeny NetworkPolicy for Redis\nDESCRIPTION: Kubernetes command to enable DefaultDeny NetworkPolicy for Redis by setting namespace annotations, which restricts pod connectivity for better security.\nSOURCE: https://github.com/gardener/gardener/blob/master/test/framework/applications/charts/redis/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate namespace default \"net.beta.kubernetes.io/network-policy={\\\"ingress\\\":{\\\"isolation\\\":\\\"DefaultDeny\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Design Diagram Markdown Reference for Shoot Kube-Apiserver Autoscaling\nDESCRIPTION: A markdown reference to a diagram illustrating the proposed autoscaling design with independently driven HPA and VPA for the shoot kube-apiserver component.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/proposals/23-autoscaling-kube-apiserver-via-independent-hpa-and-vpa.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Design outline](./assets/gep23-design-outline.png \"Design outline\")\n```\n\n----------------------------------------\n\nTITLE: Defining BastionIngressPolicy in Go\nDESCRIPTION: Defines the BastionIngressPolicy struct representing an ingress policy for SSH bastion hosts. It includes a field for specifying allowed IP blocks.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/api-reference/operations.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype BastionIngressPolicy struct {\n\tIPBlock networkingv1.IPBlock\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TODO Statement with GitHub Username in Golang\nDESCRIPTION: Example of how to add a TODO statement in Golang code with an associated GitHub username and removal condition.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/process.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// TODO(<github-username>): Remove this code after v1.75 has been released.\n```\n\n----------------------------------------\n\nTITLE: Comparing Istio CRDs\nDESCRIPTION: Command to compare the current CRDs with the new version's CRDs using diff.\nSOURCE: https://github.com/gardener/gardener/blob/master/pkg/component/networking/istio/charts/istio/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndiff istio-crds.yaml istio/${ISTIO_VERSION}/manifests/charts/base/files/crd-all.gen.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing jq on macOS\nDESCRIPTION: Command to install jq, a command-line JSON processor, on macOS using Homebrew.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install jq\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Gardener Operator Environment\nDESCRIPTION: Executes make commands to tear down the Gardener Operator environment and associated Kind cluster.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/concepts/operator.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nmake operator-down\nmake kind-operator-down\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Environment\nDESCRIPTION: Command to tear down the KinD operator environment.\nSOURCE: https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nmake kind-operator-down\n```\n\n----------------------------------------\n\nTITLE: SPDX License Header Declaration\nDESCRIPTION: Standard SPDX header declaring copyright ownership by SAP SE and Apache-2.0 license for the Gardener project\nSOURCE: https://github.com/gardener/gardener/blob/master/hack/LICENSE_BOILERPLATE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors\n// \n// SPDX-License-Identifier: Apache-2.0\n```"
  }
]