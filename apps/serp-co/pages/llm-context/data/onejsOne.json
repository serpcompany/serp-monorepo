[
  {
    "owner": "onejs",
    "repo": "one",
    "content": "TITLE: Creating a Root Layout Component in One.js\nDESCRIPTION: A basic layout component for One.js that uses the Slot component to render child routes, serving as the top-level wrapper for all routes in the application.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'one'\n\nexport default function Layout() {\n  return <Slot />\n}\n```\n\n----------------------------------------\n\nTITLE: Link Component Props Interface Definition in TypeScript React\nDESCRIPTION: Defines the TypeScript interface for LinkProps, extending TextProps from React Native. This interface specifies all available props for the Link component including navigation controls (href, replace, push), styling (className), event handlers (onPress), and web-specific attributes (target, rel, download).\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Link.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextProps } from 'react-native'\n\nexport interface LinkProps extends TextProps {\n  children?: React.ReactNode\n  \n  /** Path to navigate to. */\n  href: Href\n\n  /** Forward props to child component. Useful for custom buttons. */\n  asChild?: boolean\n\n  /** Replace the current route without adding to the history. */\n  replace?: boolean\n\n  /** Should push the current route  */\n  push?: boolean\n\n  /** On web, this sets the HTML `class` directly. On native, no-op or can be used via a compile-time plugin. */\n  className?: string\n\n  onPress?: (e:\n    React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    | GestureResponderEvent\n  ) => void\n\n  /**\n   * **Web only:** Specifies where to open the `href`.\n   *\n   * - **_self**: the current tab.\n   * - **_blank**: opens in a new tab or window.\n   * - **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n   * - **_top**: opens in the highest browsing context ancestor. If no ancestors, defaults to **_self**.\n   *\n   * This property is passed to the underlying anchor (`<a>`) tag.\n   *\n   * @default '_self'\n   *\n   * @example\n   * <Link href=\"https://tamagui.dev\" target=\"_blank\">Open in new tab</Link>\n   */\n  target?: '_self' | '_blank' | '_parent' | '_top' | string\n\n  /**\n   * **Web only:** Specifies the relationship between the `href` and the current route.\n   *\n   * Common values:\n   * - **nofollow**: Indicates to search engines that they should not follow the `href`. This is often used for user-generated content or links that should not influence search engine rankings.\n   * - **noopener**: Suggests that the `href` should not have access to the opening window's `window.opener` object, which is a security measure to prevent potentially harmful behavior in cases of links that open new tabs or windows.\n   * - **noreferrer**: Requests that the browser not send the `Referer` HTTP header when navigating to the `href`. This can enhance user privacy.\n   *\n   * The `rel` property is primarily used for informational and instructive purposes, helping browsers and web\n   * crawlers make better decisions about how to handle and interpret the links on a web page. It is important\n   * to use appropriate `rel` values to ensure that links behave as intended and adhere to best practices for web\n   * development and SEO (Search Engine Optimization).\n   *\n   * This property is passed to the underlying anchor (`<a>`) tag.\n   *\n   * @example\n   * <Link href=\"https://tamagui.dev\" rel=\"nofollow\">Open</Link>\n   */\n  rel?: string\n\n  /**\n   * **Web only:** Specifies that the `href` should be downloaded when the user clicks on the link,\n   * instead of navigating to it. It is typically used for links that point to files that the user should download,\n   * such as PDFs, images, documents, etc.\n   *\n   * The value of the `download` property, which represents the filename for the downloaded file.\n   * This property is passed to the underlying anchor (`<a>`) tag.\n   *\n   * @example\n   * <Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>\n   */\n  download?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Loader Implementation with useLoader Hook in TSX\nDESCRIPTION: Demonstrates the basic implementation of a loader function and accessing its data on the client using the useLoader hook. The loader runs on the server and returns data that can be safely passed to the client.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-loader.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoader } from 'one'\n\nexport async function loader() {\n  return {\n    user: 'tamagui'\n  }\n}\n\nexport default function HomePage() {\n  const data = useLoader(loader)\n  \n  return (\n    <p>\n      {data.user}\n    </p>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up SSR-Safe Dark Mode with Tamagui and Color Scheme Provider\nDESCRIPTION: Implementation of a layout component that provides SSR-safe dark mode support using Tamagui and @vxrn/color-scheme. It sets up the SchemeProvider, MetaTheme for browser theme-color, and configures Tamagui with the appropriate color scheme.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-dark-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'one'\nimport { TamaguiProvider, Theme } from '@tamagui/core'\nimport { config } from '@tamagui/config/v3'\nimport { MetaTheme, SchemeProvider, useColorScheme } from '@vxrn/color-scheme'\n\nexport default function Layout() {\n  return (\n    <SchemeProvider>\n      <MetaTheme\n        darkColor={config.themes.dark.color1.val}\n        lightColor={config.themes.light.color1.val}\n      />\n      <TamaguiRoot>\n        <Theme name=\"yellow\">\n          <Slot />\n        </Theme>\n      </TamaguiRoot>\n    </SchemeProvider>\n  )\n}\n\nconst TamaguiRoot = ({ children }) => {\n  const [scheme] = useColorScheme()\n  return (\n    <TamaguiProvider disableInjectCSS config={config} defaultTheme={scheme}>\n      {children}\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with renderToPipeableStream\nDESCRIPTION: Example of using React DOM server API for server-side rendering. It shows how to render a React component to a pipeable stream and send it as an HTTP response.\nSOURCE: https://github.com/onejs/one/blob/main/packages/one/vendor/react-dom/README.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { renderToPipeableStream } from 'react-dom/server';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nfunction handleRequest(res) {\n  // ... in your server handler ...\n  const stream = renderToPipeableStream(<App />, {\n    onShellReady() {\n      res.statusCode = 200;\n      res.setHeader('Content-type', 'text/html');\n      stream.pipe(res);\n    },\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Navigation in One.js\nDESCRIPTION: This snippet demonstrates how to use the Link component from One.js to create navigation links to different routes within an application.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-navigation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'one'\n\nexport default function HomePage() {\n  return (\n    <>\n      <Link href=\"/blog\">\n        Go to the blog\n      </Link>\n\n      <Link href=\"/blog/introducing-one\">\n        Go to the Introducing One article\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in One.js\nDESCRIPTION: This code demonstrates how to access dynamic route parameters in both the loader function and the page component using the useParams hook.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'one'\n\nexport function loader({ params }) {\n  // params.slug will be a string matching the URL parameter\n}\n\nexport default function BlogPostPage() {\n  const params = useParams()\n  // params.slug will be a string matching the URL parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring One.js Vite Plugin with Dependency Management\nDESCRIPTION: This snippet demonstrates how to configure the One.js Vite plugin, focusing on the 'deps' option for managing dependencies. It shows various ways to handle package compatibility, including applying patches to node_modules.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/configuration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UserConfig } from 'vite'\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({      \n      deps: {\n        // setting to true is the same as setting:\n        // viteConfig.ssr.optimizeDeps.include.push('moti/author')\n        'moti/author': true,\n\n        // setting to 'interop' is the same as setting:\n        // viteConfig.ssr.optimizeDeps.include.push('node-fetch')\n        // viteConfig.ssr.optimizeDeps.needsInterop.push('node-fetch')\n        'node-fetch': 'interop',\n\n        // passing an object lets you easily apply patches to your actual node_modules\n        '@sentry/react-native': {\n          // you can specify a semver range to only apply to certain versions:\n          version: '~15.2.0',\n\n          // you can use globs to apply to only specific files\n          // if you pass an array value, One will apply one of two transforms to matching files:\n          //    swc => @swc/core will transform your file into CommonJS compatible code, removing JSX as well\n          //    flow => the FlowType transformer will run to remove Flow types\n          '**/*.js': ['flow', 'swc']\n\n          // you can also apply custom transforms using a function\n          'dist/js/utils/environment.js': (contents) => {\n            if (typeof contents !== 'string') return\n            return contents.replace(\n              `import { version as RNV } from 'react-native/Libraries/Core/ReactNativeVersion';`,\n              `import { Platform } from 'react-native';\\nconst RNV = Platform.constants.reactNativeVersion;\\n`\n            )\n          },\n        },\n      },\n    })\n  ]\n} satisfies UserConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Bottom Tab Navigation with Tabs Component in One.js (TSX)\nDESCRIPTION: This code snippet demonstrates how to use the Tabs component from One.js to create a bottom tab navigation in a React Native application. It shows the basic structure of implementing a tab screen with a title and href option.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'one'\n\nexport default function Layout() {\n  return (\n    <Tabs>\n      <Tabs.Screen\n        name=\"explore\"\n        options={{\n          title: 'Explore',\n          href: '/explore',\n        }}\n      />\n    </Tabs>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with HTML Structure for Web\nDESCRIPTION: Implementation of a root layout that provides full HTML page structure for web platforms while remaining compatible with native platforms. This layout defines the document structure with html, head, and body elements.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-layouts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'one'\n\nexport default function Layout() {\n  return (\n    <html lang=\"en-US\">\n      <head>\n        <meta charSet=\"utf-8\" />\n      </head>\n      \n      <body>\n        <Slot />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Usage in Layout File with React Navigation\nDESCRIPTION: Demonstrates how to use the Stack component in a layout file with custom header configuration. This example shows setting up a Stack with headerRight option that displays a Settings button.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Stack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'one'\nimport { Button } from 'react-native'\n\nexport default function Layout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerRight() {\n          return (\n            <Button label=\"Settings\" />\n          )\n        },\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Router Type Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Router object returned by useRouter hook. Includes methods for navigation, history manipulation, parameter management, and state subscription.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/hooks-useRouter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype Router = {\n  /** Go back in the history. */\n  back: () => void\n  /** If there's history that supports invoking the `back` function. */\n  canGoBack: () => boolean\n  /** Navigate to the provided href using a push operation if possible. */\n  push: (href: Href, options?: LinkToOptions) => void\n  /** Navigate to the provided href. */\n  navigate: (href: Href, options?: LinkToOptions) => void\n  /** Navigate to route without appending to the history. */\n  replace: (href: Href, options?: LinkToOptions) => void\n  /** Navigate to the provided href using a push operation if possible. */\n  dismiss: (count?: number) => void\n  /** Navigate to first screen within the lowest stack. */\n  dismissAll: () => void\n  /** If there's history that supports invoking the `dismiss` and `dismissAll` function. */\n  canDismiss: () => boolean\n  /** Update the current route query params. */\n  setParams: <T = ''>(params?: T extends '' ? Record<string, string | undefined | null> : InputRouteParams<T>) => void\n  /** Subscribe to state updates from the router */\n  subscribe: (listener: RootStateListener) => () => void\n  /** Subscribe to loading state updates */\n  onLoadState: (listener: LoadingStateListener) => () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Response Throwing\nDESCRIPTION: Demonstrates error handling pattern by throwing Response objects to end loader execution early when encountering error conditions.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-loader.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({ params: { id } }) {\n  const user = await db.users.findOne({ id })\n\n  if (!user) {\n    throw Response.error()\n  }\n  \n  // ... rest of function\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Navigation in Layout Files with One.js\nDESCRIPTION: This example shows how to import and use the Drawer component from the 'one' package inside a _layout.tsx file. The Drawer component wraps around route children and is based on React Navigation's Drawer Navigator.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Drawer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Drawer } from 'one'\n\nexport default function Layout() {\n  return (\n    <Drawer />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with React Hooks\nDESCRIPTION: This snippet demonstrates how to create a simple counter component using React hooks, specifically useState. It also shows how to render the component using ReactDOM's createRoot method.\nSOURCE: https://github.com/onejs/one/blob/main/packages/one/vendor/react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)>\n        Increment\n      </button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: LinkProps Interface Definition for One.js Link Component\nDESCRIPTION: This code defines the LinkProps interface, which specifies the props accepted by the Link component in One.js. It includes various options for controlling navigation behavior and rendering.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-navigation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface LinkProps extends TextProps {\n  /** Path to route to. */\n  href: Href\n\n  /** Forward props to child component. Useful for custom buttons. */\n  asChild?: boolean\n\n  /** Should replace the current route without adding to the history. */\n  replace?: boolean\n\n  /** Should push the current route  */\n  push?: boolean\n\n  /** On web, this sets the HTML `class` directly. On native, can be used with CSS interop tools. */\n  className?: string\n\n  onPress?: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent) => void\n\n  /**\n    * **Web only:** Specifies where to open the `href`, passed to the underlying anchor (`<a>`) tag.\n    *   See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target\n    */\n  target?: '_self' | '_blank' | '_parent' | '_top' | (string & object)\n\n  /**\n    * **Web only:** Specifies the relationship between the `href` and the current route.\n    *   See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\n    */\n  rel?: string\n\n  /**\n    * **Web only:** Specifies that the `href` should be downloaded when the user clicks on the link.\n    */\n  download?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack.Screen Components for Route Customization\nDESCRIPTION: Shows how to customize individual routes by using Stack.Screen components as children of the Stack. This example configures different presentation options for index, dynamic [id], and sheet routes.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Stack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'one'\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"index\" options={{ title: 'Feed' }} />\n      <Stack.Screen name=\"[id]\" options={{ title: 'Post' }} />\n      <Stack.Screen\n        name=\"sheet\"\n        options={{\n          presentation: 'formSheet',\n          gestureDirection: 'vertical',\n          animation: 'slide_from_bottom',\n          headerShown: false,\n        }}\n      />\n    </Stack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring One.js Vite Plugin\nDESCRIPTION: Complete configuration example for the One.js Vite plugin, demonstrating all available options including web settings, native configuration, optimization settings, and React-specific features. Includes detailed comments explaining each configuration option.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { UserConfig } from 'vite'\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({\n      // all web-specific configuration nests in web:\n      web: {\n        // Choose the default strategy for routes without path-specifiers to render in\n        // can be one of \"spa\", \"ssg\" or \"ssr\"\n        defaultRenderMode: 'spa', // defaults to 'ssg'\n\n        // If using a server-rendered render mode, looseHydration will collapse large hydration\n        // error logs in development mode. React can gracefully recover from hydration issues,\n        // and they can often be ignored, but by default React produces large error logs.\n        // Turning this on will collapse those logs to one line.\n        looseHydration: false, // defaults to true\n\n        // Define server redirects for development and production\n        redirects: [\n          {\n            source: '/vite',\n            destination: 'https://vxrn.dev',\n            permanent: true,\n          },\n          {\n            source: '/docs/components/:slug/:version',\n            destination: '/ui/:slug/:version',\n            permanent: true,\n          },\n        ],\n      },\n\n      /**\n      * Path to a js or ts file to import before the rest of your app runs\n      * One controls your root, but you may want to run some JS before anything else\n      * Use this to give One the entrypoint to run\n      */\n      setupFile: './setup.ts',\n\n      optimization: {\n        /**\n        * Turn on [vite-plugin-barrel](https://github.com/JiangWeixian/vite-plugin-barrel/tree/master).\n        * Optimizes barrel export files to speed up your build, you must list the packages that have\n        * barrel exports. Especially useful for icon packs.\n        * \n        * @default ['@tamagui/lucide-icons']\n        * @type boolean | string[]\n        */\n        barrel: ['my-icon-package']\n      },\n\n      // native-specific config:\n      native: {\n        // One will set up your React Native app to run via AppRegistry.registerComponent(app.key)\n        // This setting determines app.key and must match the React Native app container you've built\n        key: 'AppName',\n      },\n\n      config: {\n        // Disable or configure the auto-added vite-tsconfig-paths\n        // https://www.npmjs.com/package/vite-tsconfig-paths\n        tsConfigPaths: false\n\n        // Disable auto-adding default tsconfig.json if not found\n        ensureTSConfig: false\n      },\n\n      server: {\n        // Configures production server to be compatible\n        // defaults to node\n        platform: 'node' | 'vercel'\n      },\n\n      react: {\n        // enable the new react compiler\n        compiler: true,\n\n        // react-scan support, must add the react-scan package to your package.json\n        // native is experimental, web is better supported\n        scan: true | 'web' | 'native',\n      },\n\n      // The deps configuration is a powerful way to apply patches to node_modules\n      // to configure patching and optimizeDeps for server-side.\n      // we found the React Native and general node module package ecosystem to not always\n      // play nice with universal apps, and this provides an easy way to configure them\n      deps: {\n        'moti/author': true,\n        '@sentry/react-native': {\n          version: '~15.2.0',\n          '**/*.js': ['jsx']\n        }\n      },\n\n     /**\n      * Per-file control over how code transforms.\n      * Defaults to SWC, runs babel before SWC if:\n      *\n      *  - options.react.compiler is `true`, on tsx files in your app\n      *  - `react-native-reanimated` is in your dependencies and a file contains a reanimated keyword\n      *\n      * Otherwise One defaults to using `@swc/core`.\n      *\n      * Accepts a function:\n      *\n      *   (props: {\n      *      id: string\n      *      code: string\n      *      development: boolean\n      *      environment: Environment\n      *      reactForRNVersion: '18' | '19'\n      *   }) =>\n      *      | true     // default transforms\n      *      | false    // no transforms\n      *      | 'babel'  // force babel default transform\n      *      | 'swc'    // force swc default transform\n      *\n      *       // force babel, custom transform\n      *\n      *      | {\n      *          transform: 'babel'\n      *          excludeDefaultPlugins?: boolean\n      *        } & babel.TransformOptions\n      *\n      *      // force swc, custom transform\n      *\n      *      | {\n      *          transform: 'swc'\n      *        } & SWCOptions\n      *\n      * Babel defaults to preset `@babel/preset-typescript` with plugins:\n      *\n      *  - @babel/plugin-transform-destructuring\n      *  - @babel/plugin-transform-runtime\n      *  - @babel/plugin-transform-react-jsx\n      *  - @babel/plugin-transform-async-generator-functions\n      *  - @babel/plugin-transform-async-to-generator\n      *\n      *\n      * SWC default to target es5 for native, es2020 for web.\n      *\n      */\n      transform: true\n    })\n  ]\n} satisfies UserConfig\n```\n\n----------------------------------------\n\nTITLE: Rendering React Component in Browser using React DOM\nDESCRIPTION: Example of how to use react-dom/client to render a React component in a browser environment. It demonstrates creating a root and rendering an App component.\nSOURCE: https://github.com/onejs/one/blob/main/packages/vendor/react-dom/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Using redirect Function in One.js\nDESCRIPTION: Demonstrates how to use the redirect function to redirect users to different paths. This function takes a path string and optional status number, returning a Response.redirect object on the server and calling router.navigate on the client.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/helpers-utility-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from 'one'\n\nexport function redirectToLogin() {\n  return redirect('/login')\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Browser Using createRoot\nDESCRIPTION: Example of using React DOM client API to render a React component in a browser environment. It imports createRoot, defines a simple App component, and renders it to a DOM element.\nSOURCE: https://github.com/onejs/one/blob/main/packages/one/vendor/react-dom/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect with React Navigation in a Profile Component\nDESCRIPTION: Example showing how to use useFocusEffect to subscribe to API updates only when a profile screen is focused. The hook accepts a callback function and a dependencies array, similar to useEffect, but executes only when the route gains focus in navigation.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/hooks-useFocusEffect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native'\nimport { useCallback } from 'react'\n\nfunction Profile({ userId }) {\n  const [user, setUser] = React.useState(null)\n\n  useFocusEffect(\n    () => {\n      const unsubscribe = API.subscribe(userId, (user) => setUser(user))\n      return () => unsubscribe()\n    },\n    [userId]\n  )\n\n  return <ProfileContent user={user} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLoader Hook with Loader Function in TSX\nDESCRIPTION: This snippet demonstrates how to use the useLoader hook to retrieve data from a loader function defined in the same file. It shows the loader function definition and its usage within a React component.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/hooks-useLoader.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoader } from 'one'\n\nexport function loader() {\n  return { hello: 'world' }\n}\n\nexport default function Page() {\n  const data = useLoader(loader)\n\n  return (\n    <>{data.hello}</>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoadProgressBar in Layout Component (TSX)\nDESCRIPTION: Example showing how to integrate the LoadProgressBar component into a root layout file. The component should be rendered at the top level of the layout to display a loading indicator during page navigation.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-LoadProgressBar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoadProgressBar, Slot } from 'one'\n\nexport default function Layout() {\n  return (\n    <>\n      <LoadProgressBar />\n      <Slot />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Rest Parameters in One.js Routes\nDESCRIPTION: This snippet shows how to access rest parameters in both the loader function and the page component for routes defined with [...rest].tsx syntax.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'one'\n\nexport function loader({ params }) {\n  // params.rest is an array ['a', 'b', 'c']\n}\n\nexport default function BlogPostPage() {\n  const params = useParams()\n  // params.rest is an array ['a', 'b', 'c']\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Public Environment Variables in One.js\nDESCRIPTION: Demonstrates how to set a public environment variable that will be accessible on both server and client sides in One.js. The variable must be prefixed with 'ONE_PUBLIC_' or 'VITE_' to be exposed to the client.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/environment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nONE_PUBLIC_DAYTIME=false one dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with Tamagui Provider\nDESCRIPTION: Setting up the root layout component with Tamagui provider and color scheme integration for theme support\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-tamagui.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TamaguiProvider, Theme } from 'tamagui'\nimport { MetaTheme, SchemeProvider, useColorScheme } from '@vxrn/color-scheme'\nimport { LoadProgressBar, Slot, usePathname } from 'one'\nimport config from '../config/tamagui.config'\n\nexport default function Layout() {\n  return (\n    <SchemeProvider>\n      <ThemeProvider>\n        <Slot />\n      </ThemeProvider>\n    </SchemeProvider>\n  )\n}\n\n// this is in its own component so it can access the useColorScheme hook\nconst ThemeProvider = ({ children }) => {\n  const [scheme] = useColorScheme()\n  return (\n    <TamaguiProvider config={config} defaultTheme={scheme}>\n      {children}\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect Handling in Loader\nDESCRIPTION: Shows how to implement redirection within a loader using the redirect utility function when certain conditions are met.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-loader.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from 'one'\n\nexport async function loader({ params: { id } }) {\n  const user = await db.users.findOne({ id })\n\n  if (!user) {\n    throw redirect('/login')\n  }\n\n  // ... rest of function\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Server Initialization\nDESCRIPTION: Example of programmatically starting the One server using the serve function from one/serve package.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-serve.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { serve } from 'one/serve'\n\nawait serve()\n```\n\n----------------------------------------\n\nTITLE: Using One's Handler Type Helper for API Routes\nDESCRIPTION: Demonstrates how to use One's built-in Handler type helper to improve TypeScript typing in API routes. This simplifies the code by inferring the request and response types.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-modes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handler } from 'one'\n\n// this route will be typed as \"(request: Request) => Response | Promise<Response>\"\nexport const GET: Handler = (request) => {\n  return new Response.json({\n    hello: 'world'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Layout with Slot in One.js\nDESCRIPTION: A simple layout implementation that uses the Slot component to render sub-routes without any frame or additional container elements. This represents the most basic layout configuration in One.js.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-layouts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'one'\n\nexport default function Layout() {\n  return (\n   <Slot />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Stack Navigation within a Tab\nDESCRIPTION: Example of a nested layout that implements Stack navigation within a tab. Shows platform-specific rendering by using Slot for web and Stack for native platforms, demonstrating the nested layouts pattern.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-layouts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, Stack } from 'one'\n\nexport default function FeedLayout() {\n  return (\n    <>\n      {typeof window !== 'undefined' ? (\n        <Slot />\n      ) : (\n        <Stack>\n          <Stack.Screen name=\"index\" options={{ title: 'Feed' }} />\n          <Stack.Screen name=\"[id]\" options={{ title: 'Post' }} />\n        </Stack>\n      )}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Navigation in Root Layout\nDESCRIPTION: Implementation of a root layout that sets up a tabbed navigation structure with three tabs (Feed, Notifications, and Profile). Uses React Navigation's Tabs component with custom icons and screen options.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-layouts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bell, Home, User } from '@tamagui/lucide-icons'\nimport { Home } from '~/features/icons'\n\nexport function RootLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        headerShown: false,\n      }}\n    >\n      <Tabs.Screen\n        name=\"(feed)\"\n        options={{\n          title: 'Feed',\n          tabBarIcon: ({ color }) => <Home size={20} color={color} />,\n        }}\n      />\n\n      <Tabs.Screen\n        name=\"notifications\"\n        options={{\n          title: 'Notifications',\n          tabBarIcon: ({ color }) => <Bell size={20} color={color} />,\n        }}\n      />\n\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ color }) => <User size={20} color={color} />,\n        }}\n      />\n    </Tabs>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in One.js\nDESCRIPTION: Shows how to access environment variables in One.js. Variables can be accessed via both process.env and import.meta.env, providing compatibility with ESM and CJS.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/environment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.ONE_PUBLIC_DAYTIME\nimport.meta.env.ONE_PUBLIC_DAYTIME\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Route Strings with href in One.js\nDESCRIPTION: Shows how to use the href function to create typed route strings with compile-time validation. While it performs type checking at compile time, at runtime it only validates that the input is a string.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/helpers-utility-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { href } from 'one'\n\nconst postPageLink = href(`/post/hello-world`) // will type error if invalid Href\n```\n\n----------------------------------------\n\nTITLE: Logging Errors with Sentry in TypeScript\nDESCRIPTION: Demonstrates the correct way to log errors using Sentry by passing an Error object instead of a string. This approach provides a useful stack trace for debugging.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/logger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.error(new Error('Invalid input'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Layout with Slot Component in One.js\nDESCRIPTION: Demonstrates the basic implementation of a layout component using the Slot component from One.js. This simple layout pattern directly renders child components without additional navigation containers like Stack, Drawer, or Tab views.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Slot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'one'\n\nexport default function Layout() {\n  return (\n    <Slot />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing One.js via CLI\nDESCRIPTION: The simplest way to start a new One.js project using the CLI to bootstrap from a starter template.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx one\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Route for MDX Content\nDESCRIPTION: A One.js route implementation that generates static paths from MDX files and renders MDX content. This uses generateStaticParams to create routes for each MDX file and loader to fetch the MDX content for rendering.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-mdx.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getMDXComponent } from \"mdx-bundler/client\";\nimport { useMemo } from \"react\";\nimport { useLoader } from \"one\";\nimport { Text, View } from \"react-native\";\nimport { components } from \"~/features/MDXComponents\";\n\nexport async function generateStaticParams() {\n  const { getAllFrontmatter } = await import(\"@vxrn/mdx\");\n  const frontmatters = getAllFrontmatter(\"data\");\n  const paths = frontmatters.map(({ slug }) => ({\n    slug: slug.replace(/.*docs\\//, \"\"),\n  }));\n  return paths;\n}\n\nexport async function loader({ params }) {\n  const { getMDXBySlug } = await import(\"@vxrn/mdx\");\n  const { frontmatter, code } = await getMDXBySlug(\"data\", params.slug);\n  return {\n    frontmatter,\n    code,\n  };\n}\n\nexport function DocsPage() {\n  const { code, frontmatter } = useLoader(loader);\n  const Component = useMemo(() => getMDXComponent(code), [code]);\n\n  return (\n    <View style={{ padding: 20 }}>\n      <Text style={{ fontSize: 48, fontWeight: \"bold\", marginBottom: 10 }}>\n        {frontmatter.title}\n      </Text>\n      <Component components={components} />\n    </View>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameters in Loader\nDESCRIPTION: Shows how to access dynamic route parameters within a loader function. The example demonstrates accessing the 'id' parameter from the URL pattern /user/[id].\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-loader.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({ params }) {\n  // for route /user/jamon params.id is a string \"jamon\"\n  const user = await getUser(params.id)\n  \n  return {\n    greet: `Hello ${user.name}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MDX Components with React Native\nDESCRIPTION: Setup for custom React Native text components to render different MDX elements. This file defines how headings (h1, h2, h3) and paragraphs will be styled and rendered.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-mdx.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\n\nexport const components = {\n  h1: ({ children }) => (\n    <Text style={{ fontSize: 24, fontWeight: \"bold\", marginBottom: 10 }}>\n      {children}\n    </Text>\n  ),\n  h2: ({ children }) => (\n    <Text style={{ fontSize: 20, fontWeight: \"bold\", marginBottom: 8 }}>\n      {children}\n    </Text>\n  ),\n  h3: ({ children }) => (\n    <Text style={{ fontSize: 18, fontWeight: \"bold\", marginBottom: 6 }}>\n      {children}\n    </Text>\n  ),\n  p: ({ children }) => <Text style={{ marginBottom: 10 }}>{children}</Text>,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrollBehavior for Top-Only Reset in React\nDESCRIPTION: This code shows how to configure the ScrollBehavior component to only reset scroll position to the top on new page navigation, without restoring previous positions when navigating back or forward.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-ScrollBehavior.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollBehavior disabled=\"restore\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a GET API Route Handler in One\nDESCRIPTION: Shows how to create a GET-specific API route handler that returns JSON data. This approach allows for HTTP method-specific handling within API routes.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-modes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const GET = (request: Request): Response => {\n  return new Response.json({\n    hello: 'world'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Migrated One Application\nDESCRIPTION: Command to start the newly migrated One application using yarn.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-migrating-create-react-app-cra-to-vite-with-one.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing generateStaticParams for SSG Pages with Dynamic Segments\nDESCRIPTION: This snippet demonstrates how to use the generateStaticParams function in a static site generated (SSG) page with nested dynamic segments. The function fetches blog posts and maps them to route parameters that One will use to generate static pages at build time.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-exports.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const blogPosts = await getAllBlogPosts()\n\n  return blogPosts.map(post => {\n    return {\n      month: post.month,\n      year: post.year,\n      slug: post.slug,\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Index Page in One.js\nDESCRIPTION: A simple index page component for a One.js application using React Native components, demonstrating basic styling with flexbox for cross-platform compatibility.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from \"react-native\";\n\nexport default function MyApp() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        minHeight: \"100%\",\n      }}\n    >\n      <Text>Hello from One</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with setResponseHeaders in One.js\nDESCRIPTION: Demonstrates how to use the setResponseHeaders utility function to modify response headers from anywhere on the server. The function takes a callback that receives a Headers object which can be modified.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/helpers-utility-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware, setResponseHeaders } from 'one'\n\nexport default createMiddleware(({ request }) => {\n  ØsetResponseHeaders((headers) => {\n    headers.append('test-header', 'test-value')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Server-to-Client Data with setServerData and getServerData\nDESCRIPTION: Illustrates a pattern for improving client hydration performance by passing data from server to client. The example implements a simple useFetch hook that serializes data to JSON for transfer between environments.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/helpers-utility-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { setServerData, getServerData } from 'one'\n\ntype SafeURLs = `${`https://tamagui.dev` | `http://localhost`}${string}`\n\nconst useFetch = async (url: SafeURLs) => {\n  if (process.env.VITE_ENVIRONMENT === 'ssr') {\n    // on server data must be set during render\n    setServerData(url, await fetch(url).then(res => res.json()))\n  }\n\n  return getServerData(url)\n}\n\nexport default async (props) => {\n  const serverData = await useFetch(props.url)\n  return <div />\n}\n\n// can use it in loaders, too\n\nexport const loader = async ({ params }) => {\n  await doSomething()\n  setServerData(params.idl, 'data')\n  return {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Route Component in One.js (Cross-platform)\nDESCRIPTION: This snippet demonstrates a simple page component that matches the '/' route and renders on both native and web platforms using React Native's Text component.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native'\n\nexport default function HomePage() {\n  return (\n    <Text>Hello world</Text>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsFocused Hook in React Navigation\nDESCRIPTION: The useIsFocused hook returns a boolean value indicating whether the current screen is active. It is re-exported from React Navigation and can be used to determine the focus state of a screen.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/hooks-useIsFocused.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isFocused = useIsFocused();\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Component\nDESCRIPTION: Simple React Native component setup with AppRegistry configuration for the native platform.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppRegistry, View } from 'react-native'\n\nAppRegistry.registerComponent('main', () => App)\n\nfunction App() {\n  return <View style={{ width: 100, height: 100, backgroundColor: 'red' }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Navigator with withLayoutContext in One.js (TSX)\nDESCRIPTION: This code demonstrates how to adapt a third-party React Navigation navigator (react-native-bottom-tabs) to work with One.js layouts using the withLayoutContext higher-order component. After wrapping the navigator with withLayoutContext, the resulting component can be used in any _layout.tsx file.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/exports-withLayoutContext.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNativeBottomTabNavigator } from '@bottom-tabs/react-navigation'\nimport { withLayoutContext } from 'one'\n\nconst NativeTabsNavigator = createNativeBottomTabNavigator().Navigator\n\nexport const NativeTabs = withLayoutContext(\n  NativeTabsNavigator\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Logging with Preserved Stack Trace in TypeScript\nDESCRIPTION: Illustrates how to log a custom error message while preserving the original error's stack trace using the 'cause' property of the Error constructor in TypeScript.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/logger/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  ...\n} catch(err) {\n  const myCustomError = new Error('Invalid input', { cause: err })\n  logger.error(myCustomError)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample MDX File with Frontmatter\nDESCRIPTION: Example of MDX content with frontmatter metadata that includes title and description. This shows the basic structure of an MDX file that would be placed in your data directory.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-mdx.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: MDX Guide\ndescription: Setting up MDX for web\n---\n\nIn building out this beautiful website, and the equally beautiful [tamagui.dev](https://tamagui.dev), the surprising\nmost difficult part was getting MDX to work well...\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Interface\nDESCRIPTION: TypeScript interface definition for the serve function options, including custom Hono app, host, port, compression, and environment loading settings.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-serve.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype ServeOptions = {\n  // you can pass in your own Hono server\n  app?: Hono\n  \n  host?: string\n  port?: number\n  compress?: boolean\n\n  /**\n    * Whether to run the Vite logic to load .env files before running the server\n    * @default false\n    */\n  loadEnv?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for MDX Support\nDESCRIPTION: Vite configuration required for proper MDX integration in a One.js project. This config sets @vxrn/mdx as an external dependency to handle its ESM modules and configures SSR options for proper rendering.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-mdx.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport { one } from 'one/vite'\n\nexport default defineConfig({\n  ssr: {\n    noExternal: true,\n    external: ['@vxrn/mdx'],\n  },\n  plugins: [\n    one({\n      web: {\n        defaultRenderMode: 'ssg',\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Toggle Button Component with Tamagui\nDESCRIPTION: Implementation of a ThemeToggleButton component that allows users to cycle between light, dark, and system color schemes. It uses the useSchemeSetting hook from @vxrn/color-scheme and handles platform differences between web and native.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-dark-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moon, Sun, SunMoon } from '@tamagui/lucide-icons'\nimport { useSchemeSetting } from '@vxrn/color-scheme'\nimport { Appearance } from 'react-native'\nimport { View, isWeb, Paragraph, YStack } from 'tamagui'\n\nconst schemeSettings = ['light', 'dark', 'system'] as const\n\nexport function ThemeToggleButton() {\n  const { onPress, Icon, setting } = useToggleTheme()\n\n  return (\n    <View group ai=\"center\" containerType=\"normal\" gap=\"$1\">\n      <View\n        p=\"$3\"\n        br=\"$10\"\n        hoverStyle={{\n          bg: '$color2',\n        }}\n        pressStyle={{\n          bg: '$color1',\n        }}\n        pointerEvents=\"auto\"\n        cur=\"pointer\"\n        onPress={onPress}\n      >\n        <Icon size={20} />\n      </View>\n\n      <YStack>\n        <Paragraph\n          animation=\"100ms\"\n          size=\"$1\"\n          mb={-20}\n          color=\"$color10\"\n          o={0}\n          $group-hover={{\n            o: 1,\n          }}\n        >\n          {setting[0].toUpperCase()}\n          {setting.slice(1)}\n        </Paragraph>\n      </YStack>\n    </View>\n  )\n}\n\nexport function useToggleTheme() {\n  const [{ setting, scheme }, setSchemeSetting] = useSchemeSetting()\n  const Icon = setting === 'system' ? SunMoon : setting === 'dark' ? Moon : Sun\n\n  return {\n    setting,\n    scheme,\n    Icon,\n    onPress: () => {\n      const next = schemeSettings[(schemeSettings.indexOf(setting) + 1) % 3]\n\n      if (!isWeb) {\n        Appearance.setColorScheme(next === 'system' ? scheme : next)\n      }\n\n      setSchemeSetting(next)\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting One.js Development Server\nDESCRIPTION: Command to install dependencies and start the development server for a One.js application.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn install && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Trace Component with Screen and Section Context in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Trace component to set screen and section context for child components. It's typically used to wrap other components and provide metadata for logging.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/telemetry/trace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Trace screen={Screens.Home} section={SectionName.ExploreSearch}>\n  {children}\n</Trace>\n```\n\n----------------------------------------\n\nTITLE: Creating React Counter Component with Hooks\nDESCRIPTION: Demonstrates creating a basic counter component using React hooks (useState) and rendering it with react-dom. The example shows component definition, state management, and DOM mounting.\nSOURCE: https://github.com/onejs/one/blob/main/packages/vendor/react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Counter />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Routing Mode in One Vite Plugin\nDESCRIPTION: Sets the default rendering mode for the One framework using the Vite plugin configuration. In this example, the default mode is changed from the built-in 'ssg' to 'spa'.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-modes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({\n      web: {\n        defaultRenderMode: 'spa'\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Return Value from generateStaticParams\nDESCRIPTION: This snippet shows an example of the data structure returned by generateStaticParams. The array of objects with keys matching the dynamic segment names will be used to generate static pages at the corresponding routes.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-exports.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    month: 10,\n    year: 2025,\n    slug: 'some-slug'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Resolving Require Not Defined Error\nDESCRIPTION: Configuration to optimize dependencies using Vite interop transforms to resolve 'require is not defined' errors.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/common-issues.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport one from 'one/vite'\n\n{\n  plugins: [\n    one({\n      deps: {\n        '@bad/dependency': 'interop',\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite SSR External Dependencies\nDESCRIPTION: Configuration to disable Vite external dependencies for server-side rendering troubleshooting. This forces Vite to use esbuild and apply CommonJS transforms for better compatibility.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/common-issues.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  ssr: {\n    noExternal: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ScrollBehavior Component in React\nDESCRIPTION: This example demonstrates how to disable the ScrollBehavior component using the 'disabled' prop. When set to true, it prevents automatic scroll management.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-ScrollBehavior.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollBehavior disabled={true} />\n```\n\n----------------------------------------\n\nTITLE: Custom Response Return in Loader\nDESCRIPTION: Shows how to return a custom Response object from a loader function with specific headers and JSON-formatted body.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-loader.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({ params: { id } }) {\n  const user = await db.users.findOne({ id })\n  const body = JSON.stringify(user)\n  return new Response(body, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing React Native Package Compatibility\nDESCRIPTION: Configuration to handle React Native packages that have compatibility issues with non-Metro bundlers, including JSX in .js files and Flow types removal.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/common-issues.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  plugins: [\n    one({\n      // ...\n      deps: {\n        'react-native-vector-icons': {\n          '**/*.js': [\n            'jsx', // Transpile JSX in .js files\n            'flow', // Remove flow types\n          ],\n        },\n      },\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LinkToResult Type in TypeScript\nDESCRIPTION: Type definition for the object returned by the useLinkTo hook. Includes href string, role identifier, and onPress event handler that works with both web and React Native events.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/hooks-useLinkTo.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkToResult = {\n  href: string\n  role: 'link'\n  onPress: (event: e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent) => void\n}\n```\n\n----------------------------------------\n\nTITLE: One Development Server CLI Options\nDESCRIPTION: Command line arguments available for the 'one dev' command to configure the development server settings. Options include cache clearing, host configuration, port selection, and debug mode.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-dev.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--clean    # boolean, will clear all caches before running\n--host     # string, set the hostname to bind to\n--port     # string, set the port to bind to\n-- debug   # turns on vite debugging\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with One Plugin\nDESCRIPTION: Configuration for Vite using the One plugin, set to SPA mode for compatibility with Create React App. This enables Vite's build system with One's features.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-migrating-create-react-app-cra-to-vite-with-one.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { UserConfig } from 'vite'\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({\n      web: {\n        defaultRenderMode: 'spa'\n      }\n    }),\n  ],\n} satisfies UserConfig\n```\n\n----------------------------------------\n\nTITLE: LoadProgressBar Props Type Definition (TSX)\nDESCRIPTION: Type definition for the LoadProgressBar component props. Includes configuration options for controlling the loading indicator's behavior, such as timing delays, initial percentage, update frequency, and styling options.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-LoadProgressBar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type LoadProgressBarProps = {\n  /** How long after a navigation to wait before showing the progress bar (in ms) */\n  startDelay?: number\n  /** How long after a navigation completes to wait before hiding the progress bar (in ms) */\n  finishDelay?: number\n  /** The starting percent it should show the loading state at */\n  initialPercent?: number\n  /** How often the progress bar should update (in ms) */\n  updateInterval?: number\n  /** How often to skip an update (checked each during the loop) */\n  sporadicness?: number\n  /** Pass style to the inner View */\n  style?: ViewProps['style']\n  /** Pass onLayout to the inner View */\n  onLayout?: ViewProps['onLayout']\n  /** Pass children to the inner View */\n  children?: ViewProps['children']\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Module Export Issues with Dependencies\nDESCRIPTION: Configuration to handle dependencies that have export issues using the One Vite plugin's fixDependencies option.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/common-issues.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({\n      fixDependencies: {\n        'erroring-dep': 'exclude'\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tamagui Configuration\nDESCRIPTION: Basic Tamagui configuration setup using the default preset config\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-tamagui.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from '@tamagui/config/v3'\nimport { createTamagui } from 'tamagui'\n\nexport const config = createTamagui(config)\n```\n\n----------------------------------------\n\nTITLE: Defining Redirect Component Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Redirect component props, specifying the required href string property for the destination URL.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Redirect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RedirectProps {\n  href: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using useServerHeadInsertion Hook for CSS-in-JS Integration\nDESCRIPTION: Example of how to use the useServerHeadInsertion hook to insert elements into the head tag after server rendering, particularly useful for CSS-in-JS libraries that need to inject styles.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-layouts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, useServerHeadInsertion } from 'one'\n\nexport default function Layout() {\n  useServerHeadInsertion(() => {\n    // this will run after the entire page renders\n    // return a single React.ReactElement that will be spliced into your <head />\n    return <style>{renderCSS()}</style>\n  })\n\n  return (\n    <html>\n      <Slot />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Context to Sentry Logs in TypeScript\nDESCRIPTION: Demonstrates how to include additional context when logging errors with Sentry using the 'extra' field. This allows for more detailed and informative error reports.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/logger/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.error(error, {\n  extra: {\n    swapFormState: {\n      currencies,\n      currencyAmounts,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Head Component Example Usage\nDESCRIPTION: Example showing the Head component syntax for adding elements to HTML head section or controlling app meta information on native platforms.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-Head.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Head />\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Dependencies\nDESCRIPTION: Installing required npm packages for Tamagui integration including core, config, vite plugin and color scheme support\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-tamagui.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add tamagui @tamagui/config @tamagui/vite-plugin @vxrn/color-scheme\n```\n\n----------------------------------------\n\nTITLE: Adding vxrn Expo Plugin to App Configuration\nDESCRIPTION: JSON configuration that adds the vxrn/expo-plugin to your Expo plugins list in app.json, which hooks into the Expo build process to ensure One.js apps build correctly with EAS.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-eas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"vxrn/expo-plugin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an API Route Handler in One\nDESCRIPTION: Demonstrates how to create a default API route handler that returns JSON data. This handler responds to all HTTP methods and uses the Web standard Request and Response objects.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-modes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default (request: Request): Response => {\n  return new Response.json({\n    hello: 'world'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Analytics Event with Parent TraceContext in TypeScript\nDESCRIPTION: This snippet demonstrates how to log an analytics event while including properties from a parent TraceContext. It uses the useTrace hook to retrieve parent trace properties and combines them with event-specific properties.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/telemetry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst parentTrace = useTrace()\n\nconst onSomeAction = (index: number) => {\n  sendAnalyticsEvent(EventName.MyEventName, {\n    ... needed properties ...\n    ...parentTrace,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for One.js Deployment\nDESCRIPTION: Configuration setup for Vite to specify deployment target (node or vercel) for the One.js application.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-build.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({\n      web: {\n        deploy: 'vercel' // defaults to node\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native CLI for One.js Integration with EAS\nDESCRIPTION: Setup for react-native.config.cjs that overrides React Native CLI commands to use Vite instead of Metro for JavaScript bundling during native iOS and Android builds.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-eas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // Setting up and overriding some react-native CLI commands.\n  // Necessary for building native iOS and Android apps,\n  // where Vite shall be used instead of Metro for JS bundling during the build precess.\n  commands: [...require('vxrn/react-native-commands')]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS Build Phase Script\nDESCRIPTION: Updates the 'Bundle React Native code and images' phase in the iOS project's build settings to use the correct CLI path.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-ios-native.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# ⬇️ Add this line directly above the line that calls react-native-xcode.sh\nexport CLI_PATH=\"$('$NODE_BINARY' --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/cli.js'\")\"\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native App Registration\nDESCRIPTION: Configuration for registering React Native components with One.js, ensuring proper app initialization and startup.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/common-issues.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one({\n      native: {\n        // make sure this matches the key you use to build your native app\n        key: 'my-app'\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Route Component in One.js (Web-only)\nDESCRIPTION: This snippet shows a simple page component that matches the '/' route and renders only on web platforms using HTML elements.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function HomePage() {\n  return (\n    <div>Hello world</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: One.js Project Package.json Configuration\nDESCRIPTION: Basic package.json configuration for a One.js application, including dependencies for both web and native platforms and scripts for development, building, and serving.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"one-app\",\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"one dev\",\n    \"build\": \"one build\",\n    \"serve\": \"one serve\"\n  },\n  \"dependencies\": {\n    \"one\": \"latest\",\n    \"react\": \"~19.0.0\",\n    \"react-native\": \"^0.76.5\",\n    \"react-native-web\": \"^0.19.12\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Root Layout with External CSS\nDESCRIPTION: Updated root layout configuration with external CSS import and disabled CSS injection\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-tamagui.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport '../public/tamagui.css'\n\nimport { TamaguiProvider, Theme } from 'tamagui'\nimport { MetaTheme, SchemeProvider, useColorScheme } from '@vxrn/color-scheme'\nimport { LoadProgressBar, Slot, usePathname } from 'one'\nimport config from '../config/tamagui.config'\n\nexport default function Layout() {\n  return (\n    <SchemeProvider>\n      <ThemeProvider>\n        <Slot />\n      </ThemeProvider>\n    </SchemeProvider>\n  )\n}\n\nconst ThemeProvider = ({ children }) => {\n  const [scheme] = useColorScheme()\n  return (\n    <TamaguiProvider config={config} defaultTheme={scheme} disableInjectCSS>\n      {children}\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Server\nDESCRIPTION: JavaScript code to programmatically create and configure a vxrn development server with error handling and graceful shutdown.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDevServer } from 'vxrn'\n\nmain()\n\nasync function main() {\n  const { viteServer, start, stop } = await createDevServer({\n    root: process.cwd(),\n    host: '127.0.0.1',\n    webConfig: {\n      plugins: [],\n    },\n    nativeConfig: {\n      plugins: [],\n    },\n  })\n\n  const { closePromise } = await start()\n\n  viteServer.printUrls()\n\n  process.on('beforeExit', () => {\n    stop()\n  })\n\n  process.on('SIGINT', () => {\n    stop()\n  })\n\n  process.on('uncaughtException', (err) => {\n    console.error(err?.message || err)\n  })\n\n  await closePromise\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Tamagui\nDESCRIPTION: Setting up the Tamagui Vite plugin with optimization and component configurations\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-tamagui.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: [\n    tamaguiPlugin({\n      optimize: true,\n      components: ['tamagui'],\n      config: './config/tamagui.config.ts',\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for One.js\nDESCRIPTION: A minimal Vite configuration file for a One.js project that imports and applies the One.js plugin.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Typed as UserConfig for handy autocomplete\nimport type { UserConfig } from 'vite'\nimport { one } from 'one/vite'\n\nexport default {\n  plugins: [\n    one(),\n  ],\n} satisfies UserConfig\n```\n\n----------------------------------------\n\nTITLE: Logging Impressions with Trace Component in TypeScript\nDESCRIPTION: This snippet illustrates how to use the Trace component to log impression events. It captures all surrounding context and allows for additional properties to be included in the logged event.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/telemetry/trace/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Trace logImpression properties={{prop: value}}>\n  {children}\n</Trace>\n```\n\n----------------------------------------\n\nTITLE: Defining LinkToProps Type in TypeScript\nDESCRIPTION: Type definition for the props accepted by the useLinkTo hook. Includes href property for the destination and an optional replace flag.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/hooks-useLinkTo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkToProps = {\n  href: Href;\n  replace?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Web Entry\nDESCRIPTION: Web entry point for React Native application using React DOM for web rendering.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client'\nimport { View } from 'react-native'\n\nfunction App() {\n  return <View style={{ width: 100, height: 100, backgroundColor: 'red' }} />\n}\n\ncreateRoot(document.querySelector('#root')).render(<App />)\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Access in Loader\nDESCRIPTION: Demonstrates accessing the full resolved pathname within a loader function using the path parameter.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-loader.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({ path }) {\n  // if the route is /user/123 then path is \"/user/123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Properties for Trace Component in TypeScript\nDESCRIPTION: This example shows how to add extra properties to the Trace component, which will be sent with impression events. It's useful for including specific details like token address and name in the logged data.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/telemetry/trace/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Trace screen={Screens.TokenDetails} properties={{tokenAddress: address, tokenName: name}}>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Try/Catch Blocks with Sentry in TypeScript\nDESCRIPTION: Shows the proper way to log caught errors in a try/catch block using Sentry. It emphasizes logging the actual caught error to preserve the original stack trace.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/logger/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  ...\n} catch(err) {\n  logger.error(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Vite Configuration with CSS Output\nDESCRIPTION: Enhanced Vite plugin configuration with CSS output optimization\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-tamagui.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: [\n    tamaguiPlugin({\n      optimize: true,\n      components: ['tamagui'],\n      config: './config/tamagui.config.ts',\n      outputCSS: './public/tamagui.css'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default PostCSS Configuration Logic in One.js\nDESCRIPTION: This snippet illustrates the internal logic used by One.js to set up PostCSS configuration. It checks for the existence of a PostCSS config file and sets up the CSS options accordingly, using either the custom config or LightningCSS as a fallback.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/configuration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  css: postCSSConfigPath ?\n    {\n      postcss: postCSSConfigPath\n    } : \n    {\n      transformer: 'lightningcss',\n      lightningcss: {\n        targets: {\n          safari: (15 << 16) | (2 << 8),\n        },\n      },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building One.js Applications for Different Platforms\nDESCRIPTION: Command for building One.js applications for web, iOS, or Android platforms using the CLI tool.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-build.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx one build [web | ios | android]\n```\n\n----------------------------------------\n\nTITLE: Fixing Node.js Version Compatibility in EAS Builds\nDESCRIPTION: Configuration snippet for updating the Node.js version in eas.json to resolve compatibility issues during builds. EAS defaults to an older Node version, which can cause dependency conflicts.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-eas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* ... */\n  \"build\": {\n    \"shared\": {\n      \"node\": \"20.15.0\"\n    },\n    \"development\": {\n      \"extends\": \"shared\",\n      /* ... */\n    },\n    \"preview\": {\n      \"extends\": \"shared\",\n      /* ... */\n    },\n    \"production\": {\n      \"extends\": \"shared\",\n      /* ... */\n    }\n  },\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React DOM\nDESCRIPTION: Example of server-side rendering using react-dom/server. It shows how to use renderToPipeableStream to render a React component on the server and pipe the result to the response.\nSOURCE: https://github.com/onejs/one/blob/main/packages/vendor/react-dom/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToPipeableStream } from 'react-dom/server';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nfunction handleRequest(res) {\n  // ... in your server handler ...\n  const stream = renderToPipeableStream(<App />, {\n    onShellReady() {\n      res.statusCode = 200;\n      res.setHeader('Content-type', 'text/html');\n      stream.pipe(res);\n    },\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Dependencies\nDESCRIPTION: Bash command to add the required dependencies for MDX support: @vxrn/mdx for processing MDX files and mdx-bundler for bundling and rendering MDX content.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-mdx.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vxrn/mdx mdx-bundler\n```\n\n----------------------------------------\n\nTITLE: Generating Native Code for iOS in One Project\nDESCRIPTION: Prepares the One application for iOS deployment by generating the necessary native code. This is a prerequisite step before building and uploading the iOS app to the App Store or TestFlight.\nSOURCE: https://github.com/onejs/one/blob/main/examples/testflight/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn prebuild:native\n```\n\n----------------------------------------\n\nTITLE: Updating Main React Component for One Framework\nDESCRIPTION: Modified main component moved from src/App.js to app/index.tsx for One's file-based routing system, using the ~ path alias for imports.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-migrating-create-react-app-cra-to-vite-with-one.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '~/src/App.css'\nimport logo from '~/src/logo.svg'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>app/index.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Native Code for iOS in One Project\nDESCRIPTION: Command to prepare the One application for iOS by generating the necessary native code before building for distribution.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-recommended/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn prebuild:native\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Plugin for Prebuild\nDESCRIPTION: Adds the vxrn/expo-plugin to the Expo configuration in app.json or app.config.js/ts for Expo Prebuild support.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-ios-native.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"vxrn/expo-plugin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring One Server CLI Options\nDESCRIPTION: Command line arguments for configuring the One server including host, port, platform adapter, and compression settings.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-serve.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--host          # string, set the hostname to bind to\n--port          # string, set the port to bind to\n--platform      # node | vercel, instructs Hono server to use adapter\n--compress      # boolean, enable gzip compression, defaults to true\n```\n\n----------------------------------------\n\nTITLE: Configuring Prebuild Script in package.json for iOS\nDESCRIPTION: Adds a script to the package.json file to enable prebuilding of native code for iOS using the 'one prebuild' command.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-ios-native.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prebuild:native\": \"one prebuild\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Plugin in app.json\nDESCRIPTION: Adds the vxrn/expo-plugin to the plugins array in app.json for Expo configuration.\nSOURCE: https://github.com/onejs/one/blob/main/examples/expo-blank/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"vxrn/expo-plugin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts for One Framework\nDESCRIPTION: Updated package.json scripts to replace CRA commands with One's development and build processes, including test configuration for Vitest.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-migrating-create-react-app-cra-to-vite-with-one.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"one dev\",\n    \"build\": \"one build\",\n    \"test\": \"vitest run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: One.js Default TypeScript Configuration\nDESCRIPTION: The default TypeScript configuration created by One.js when starting the dev server, with settings optimized for React Native and web development.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"~/*\": [\n        \"./*\"\n      ]\n    },\n    \"strict\": true,\n    \"rootDir\": \".\",\n    \"module\": \"Preserve\",\n    \"moduleResolution\": \"Bundler\",\n    \"preserveSymlinks\": true,\n    \"skipLibCheck\": true,\n    \"jsx\": \"react-jsx\",\n    \"noImplicitAny\": false,\n    \"types\": [\n      \"node\",\n      \"react\",\n      \"vite/client\"\n    ],\n    \"lib\": [\n      \"dom\",\n      \"esnext\"\n    ]\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \".expo\",\n    \"**/test\",\n    \"**/dist\",\n    \"**/types\",\n    \"**/__tests__\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding vxrn Dependency in package.json\nDESCRIPTION: Adds the vxrn workspace dependency to package.json and updates NPM scripts to use vxrn instead of expo.\nSOURCE: https://github.com/onejs/one/blob/main/examples/expo-blank/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"vxrn\": \"workspace:*\"\n  },\n  \"scripts\": {\n    \"start\": \"vxrn start\",\n    \"android\": \"vxrn run android\",\n    \"ios\": \"vxrn run ios\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollBehavior Component in React\nDESCRIPTION: This snippet shows how to import and use the ScrollBehavior component in a One.js application, typically in the root _layout.tsx file. The component controls scroll behavior during navigation.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/components-ScrollBehavior.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollBehavior />\n```\n\n----------------------------------------\n\nTITLE: Running One App in Development Mode\nDESCRIPTION: Command to start a One application in development mode for testing and development purposes.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-tamagui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building One App for Web Production\nDESCRIPTION: Command to build a One application for web production deployment.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-tamagui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:web\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Press Events with Trace Component in TypeScript\nDESCRIPTION: This snippet shows how to log a custom press event using the Trace component. It allows specifying a different event name than the default, which is useful for logging specific interactions.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/telemetry/trace/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Trace logPress pressEvent={MobileEventName.FiatOnRampWidgetOpened}>\n  {children}\n</Trace>\n```\n\n----------------------------------------\n\nTITLE: Running One Project in Development Mode\nDESCRIPTION: Command to start the One application in development mode, which enables features like hot reloading.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-recommended/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating a new VXRN project using npm\nDESCRIPTION: Command to initialize a new VXRN project using npm's create command. This runs the create-vxrn package which likely sets up the necessary project structure and dependencies for a VXRN application.\nSOURCE: https://github.com/onejs/one/blob/main/packages/create-vxrn/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vxrn\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native for Vite Bundling\nDESCRIPTION: Creates a react-native.config.cjs file to configure React Native to use Vite as the JS bundler during the native build process.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-ios-native.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  commands: [...require('vxrn/react-native-commands')]\n}\n```\n\n----------------------------------------\n\nTITLE: Running One Project in Development Mode\nDESCRIPTION: Starts the One application in development mode. This command enables hot reloading and other development features for efficient local development.\nSOURCE: https://github.com/onejs/one/blob/main/examples/testflight/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running One.js Application\nDESCRIPTION: Command to execute the One.js application using npm run script.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run one\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server using the configured setup.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode dev.js\n```\n\n----------------------------------------\n\nTITLE: Running Prebuild Command for iOS\nDESCRIPTION: Executes the prebuild script to generate native code and Xcode project for iOS.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-ios-native.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn prebuild:native\n```\n\n----------------------------------------\n\nTITLE: Installing React and React DOM\nDESCRIPTION: Command to install both react and react-dom packages using npm.\nSOURCE: https://github.com/onejs/one/blob/main/packages/vendor/react-dom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Running vxrn CLI Commands\nDESCRIPTION: CLI commands for running the development server and building production web applications.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx vxrn dev # runs a dev server\nnpx vxrn build # builds a production web app\n```\n\n----------------------------------------\n\nTITLE: Installing vxrn Package\nDESCRIPTION: Commands to create a new vxrn project using the template starter and install vxrn as a development dependency.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vxrn@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -d vxrn\n```\n\n----------------------------------------\n\nTITLE: Running Docker and Development Servers\nDESCRIPTION: Commands to start Docker, Zero server, and the development server in separate terminal tabs.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-zero/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn docker up\nyarn zero\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Generating Native Code for iOS Build\nDESCRIPTION: Command to generate the necessary native code before building a One application for iOS. This is a prerequisite for iOS distribution.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-tamagui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn prebuild:native\n```\n\n----------------------------------------\n\nTITLE: Installing React and React DOM\nDESCRIPTION: Command to install both React and React DOM packages using npm.\nSOURCE: https://github.com/onejs/one/blob/main/packages/one/vendor/react-dom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Running Tauri Development Server\nDESCRIPTION: Command to start the Tauri development server instead of the standard development server.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-zero/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev:tauri\n```\n\n----------------------------------------\n\nTITLE: Initializing Database for One Project\nDESCRIPTION: Command to initialize the database schema and initial data for the One project application.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-recommended/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn db:init\n```\n\n----------------------------------------\n\nTITLE: Using VitePress useData Hook in Markdown/Vue\nDESCRIPTION: Example showing how to use the useData() hook to access theme, page, and frontmatter data in a VitePress page. Demonstrates data access and display within a combined Markdown and Vue script setup block.\nSOURCE: https://github.com/onejs/one/blob/main/docs/api.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n<pre>{{ theme }}</pre>\n\n### Page Data\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n<pre>{{ frontmatter }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Production\nDESCRIPTION: Environment variable configuration for setting the production server URL.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-build.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nONE_SERVER_URL=https://onestack.dev\n```\n\n----------------------------------------\n\nTITLE: Building One Project for Web Production\nDESCRIPTION: Command to create a production-ready build of the One application for web deployment.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-recommended/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:web\n```\n\n----------------------------------------\n\nTITLE: Running Docker for Database Setup in One Project\nDESCRIPTION: Command to start the Postgres database using Docker Compose as specified in the project's docker-compose.yml file.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-recommended/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Creating React Native Config File\nDESCRIPTION: Adds a react-native.config.cjs file, likely for custom React Native configuration settings.\nSOURCE: https://github.com/onejs/one/blob/main/examples/expo-blank/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// react-native.config.cjs\nmodule.exports = {\n  // Custom React Native configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Database for One Project\nDESCRIPTION: Sets up the initial database structure for the One project. This yarn command likely runs migrations and seeds the database with any required initial data.\nSOURCE: https://github.com/onejs/one/blob/main/examples/testflight/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn db:init\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container for Postgres Database in One Project\nDESCRIPTION: Initializes the Postgres database using the provided Docker configuration file. This command launches all services defined in docker-compose.yml, which contains the necessary database setup for the One project.\nSOURCE: https://github.com/onejs/one/blob/main/examples/testflight/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for iOS Project\nDESCRIPTION: Command to open the generated Xcode workspace file for the iOS project.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-ios-native.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/*.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Building One Project for Web Production\nDESCRIPTION: Compiles and bundles the One application for web production deployment. This optimizes the application for performance and prepares it for hosting on a web server.\nSOURCE: https://github.com/onejs/one/blob/main/examples/testflight/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:web\n```\n\n----------------------------------------\n\nTITLE: VitePress Home Page Configuration YAML\nDESCRIPTION: Defines the structure and content of the VitePress home page including hero section layout, navigation actions, and feature highlights for the vxrn project. This configuration showcases the project's main features including Vite integration, SWC compilation, and CLI tools.\nSOURCE: https://github.com/onejs/one/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"vxrn\"\n  text: \"Vite ↔ React Native\"\n  tagline: Vite plugins to serve React Native apps with hot reloading. Serve web and native apps at once (beta).\n  image:\n    src: /vite-react-native.svg\n    alt: Vite\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /get-started\n    - theme: alt\n      text: Github\n      link: https://github.com/onejs/one\n\nfeatures:\n  - title: All the goodness of Vite\n    details: Quick startup, great web support, easy configuration, large and growing  community.\n  - title: SWC and React Refresh\n    details: Look ma, no Babel! Fast compile thanks to SWC and hot reloading support for native and web simulatenously.\n  - title: Experimental CLI\n    details: npm create vxrn@latest\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the development server for testing and reproducing the bug in a local environment.\nSOURCE: https://github.com/onejs/one/blob/main/repro/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building One.js for iOS Platform\nDESCRIPTION: Specific command example for building One.js applications for iOS platform.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/one-build.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx one build ios\n```\n\n----------------------------------------\n\nTITLE: HTML Entry Point\nDESCRIPTION: HTML template file with root element and module script reference for the web entry point.\nSOURCE: https://github.com/onejs/one/blob/main/docs/get-started.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/index.web.jsx\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Logging Presses with Trace Component in TypeScript\nDESCRIPTION: This example demonstrates how to use the Trace component to log press events. It captures all surrounding context and allows for additional properties to be included in the logged event.\nSOURCE: https://github.com/onejs/one/blob/main/tests/uniswap/utilities/telemetry/trace/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Trace logPress properties={{prop: value}}>\n  {children}\n</Trace>\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies with npm\nDESCRIPTION: Installs the required React and React DOM packages using npm.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-zero/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Pinning One.js Version for Production\nDESCRIPTION: Command to install a specific version of One.js for production stability, ensuring consistent behavior across different environments.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install one@latest --save-exact\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Transformation with Babel\nDESCRIPTION: Code snippet describing a planned feature to allow configurable Babel transformation through the One.js plugin. This would enable specifying Babel plugins for specific files based on ID patterns.\nSOURCE: https://github.com/onejs/one/blob/main/next.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntransformWithBabel(id, code): string[] | babelConfig | boolean\n```\n\n----------------------------------------\n\nTITLE: Status Page Frontmatter in Markdown\nDESCRIPTION: Frontmatter metadata for the status documentation page defining the title and description.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/status.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Status\ndescription: One is currently in beta\n---\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan Package\nDESCRIPTION: Command to install the react-scan package as a dependency for enabling React Scan functionality in One.js\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/configuration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing One Framework Dependencies\nDESCRIPTION: Command to add One framework and its dependencies to an existing Create React App project.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/guides-migrating-create-react-app-cra-to-vite-with-one.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add one\n```\n\n----------------------------------------\n\nTITLE: Cloning the One Monorepo for Bug Reproduction\nDESCRIPTION: Command to clone the forked One monorepo to your local machine. Uses the --depth 1 flag to create a shallow clone for faster download.\nSOURCE: https://github.com/onejs/one/blob/main/repro/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 https://github.com/<your-username>/one.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bug Reproduction\nDESCRIPTION: Command to install project dependencies using yarn. The documentation notes that bun, pnpm, or npm can be used instead if the bug is specific to those package managers.\nSOURCE: https://github.com/onejs/one/blob/main/repro/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Vite Hot Update Implementation Note\nDESCRIPTION: TODO comment about migrating to the hotUpdate hook in Vite for improved hot module replacement functionality.\nSOURCE: https://github.com/onejs/one/blob/main/next.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TODO see about moving to hotUpdate\n// https://deploy-preview-16089--vite-docs-main.netlify.app/guide/api-vite-environment.html#the-hotupdate-hook\n```\n\n----------------------------------------\n\nTITLE: Committing Bug Reproduction to Git\nDESCRIPTION: Commands to stage, commit, and push changes to GitHub after reproducing the bug. Includes a descriptive commit message format for better tracking.\nSOURCE: https://github.com/onejs/one/blob/main/repro/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"repro: Describe the bug being reproduced\"\ngit push origin <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Resetting Docker Data\nDESCRIPTION: Command to reset all data in the Docker environment for a clean start.\nSOURCE: https://github.com/onejs/one/blob/main/examples/one-zero/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn docker:start:clean\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Reproduction Directory\nDESCRIPTION: Command to change to the repro directory where bug reproduction should be implemented.\nSOURCE: https://github.com/onejs/one/blob/main/repro/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd repro\n```\n\n----------------------------------------\n\nTITLE: Referencing React Navigation Test Sources in Markdown\nDESCRIPTION: Provides links to the original React Navigation test directories on GitHub, which serve as the source for some of the project's tests.\nSOURCE: https://github.com/onejs/one/blob/main/packages/one/src/fork/__tests__/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* https://github.com/react-navigation/react-navigation/tree/main/packages/core/src/__tests__\n* https://github.com/react-navigation/react-navigation/tree/main/packages/native/src/__tests__\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware in One.js\nDESCRIPTION: This code snippet demonstrates how to create a middleware using the createMiddleware function in One.js. The middleware checks the request URL, handles specific cases, and allows for post-processing of responses.\nSOURCE: https://github.com/onejs/one/blob/main/apps/onestack.dev/data/docs/routing-middlewares.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from 'one'\n\nexport default createMiddleware(async ({ request, next }) => {\n  if (request.url.includes(`test-middleware`)) {\n    return Response.json({ middleware: 'works' })\n  }\n\n  const response = await next()\n\n  if (!response && request.url.endsWith('/missing')) {\n    return Response.json({ notFound: true })\n  }\n\n  return response\n})\n```"
  }
]