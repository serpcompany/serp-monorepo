[
  {
    "owner": "pmndrs",
    "repo": "react-three-flex",
    "content": "TITLE: Implementing Flex Container Component in React Three Flex\nDESCRIPTION: Demonstrates the basic usage of the Flex container component with its available props including size, position, direction, plane, and scale factor settings. Also shows integration with standard Flexbox properties.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex\n  size={[1, 1, 1]} // Total size of the flex container, see above\n  position={[0, 0, 0]} // Default - position for the flex container in the scene\n  direction=\"ltr\" // Default - right to left or right to left\n  plane=\"xy\" // Default - plane axes, see above\n  scaleFactor={100} // Default - integer scale factor, see above (Sizing)\n  onReflow={fn} // Called everytime the layout is recalculated\n  {...R3FlexProps} // Standard Flexbox props, described below\n>\n  <Box>{/* ... */}</Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic React Three Flex Layout Implementation\nDESCRIPTION: Example of a basic layout using Flex and Box components to position 3D objects following flexbox principles.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Flex, Box } from '@react-three/flex'\n\nconst Layout = () => (\n  <Flex justifyContent=\"center\" alignItems=\"center\">\n    <Box centerAnchor>\n      <mesh geometry={box} />\n    </Box>\n    <Box centerAnchor flexGrow={1}>\n      <mesh geometry={torus} />\n    </Box>\n  </Flex>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Flexbox Properties with Flex Component\nDESCRIPTION: Example showing how to use various Flexbox properties with the Flex component including padding, alignment, justification, and wrapping.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// Flex with padding top set to 10, alignItems to 'center', justifyContent to 'space-around' and flexWrap to 'wrap'\n<Flex pt={10} align=\"center\" justify=\"space-around\" wrap=\"wrap\">\n  {/* ... */}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Component in React Three Flex\nDESCRIPTION: Shows the usage of the Box component which serves as a container for 3D meshes, with support for center anchoring and standard Flexbox properties.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  centerAnchor // If the inner content position is relative to its center, see above (Anchors)\n  {...R3FlexProps} // Standard Flexbox props, described below\n>\n  <mesh geometry={box} />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flex Container Size and Direction\nDESCRIPTION: Shows how to set up a flex container with specific dimensions and flex direction properties.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex flexDirection=\"row\" flexWrap=\"wrap\" size={[300, 200, 0]}>\n  {/* ... */}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Nesting Flex Containers for Complex Layouts\nDESCRIPTION: Shows how to create complex layouts by nesting Flex containers and Box components.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex flexDirection=\"row\" flexWrap=\"wrap\" size={[50, 0, 0]}>\n  <Box centerAnchor>\n    <mesh geometry={sphere} />\n  </Box>\n  <Box flexDirection=\"column\" flexWrap=\"no-wrap\">\n    <Box centerAnchor>\n      <mesh geometry={sphere} />\n    </Box>\n    <Box centerAnchor>\n      <mesh geometry={box} />\n    </Box>\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Margin and Padding to Flex Elements\nDESCRIPTION: Example showing how to apply margin and padding to both Flex container and Box elements.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex flexDirection=\"row\" size={[300, 200, 0]} padding={30} margin={5}>\n  <Box padding={5} marginTop={5} centerAnchor>\n    <mesh geometry={sphere} />\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Function Children with Box Component\nDESCRIPTION: Demonstrates how to use a function as children in the Box component, allowing dynamic content based on width and height parameters.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>{(width, height) => <Model width={width} height={height} />}</Box>\n```\n\n----------------------------------------\n\nTITLE: Stretching Elements with useFlexSize Hook\nDESCRIPTION: Shows how to control element sizing using the useFlexSize hook to access the container dimensions.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Inner() {\n  const [width, height] = useFlexSize()\n  return <Plane args={[width, height]} />\n}\n\nfunction Outer() {\n  return (\n    <Flex>\n      <Box width=\"auto\" height=\"auto\" flexGrow={1} centerAnchor>\n        <Inner />\n```\n\n----------------------------------------\n\nTITLE: Stretching Elements with Children Render Function\nDESCRIPTION: Demonstrates how to control element sizing using a children render function that provides width and height parameters.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\n  <Box width=\"auto\" height=\"auto\" flexGrow={1} centerAnchor>\n    {(width, height) => <Plane args={[width, height]} />}\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Center Anchor with Box Component\nDESCRIPTION: Example showing how to set centerAnchor prop to position the object relative to its center rather than the upper left corner.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box centerAnchor>\n  <mesh geometry={sphere} />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Orientation with Plane Prop\nDESCRIPTION: Demonstrates how to specify the plane in which the flex container operates using the plane prop.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex plane=\"xy\" size={[100, 200, 0]}>\n  {/* ... */}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Measuring Container with onReflow Callback\nDESCRIPTION: Demonstrates how to use the onReflow prop to get container dimensions when the layout is recalculated.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex onReflow={(totalWidth, totalHeight) => ...}>\n {/* ... */}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Automatic Reflow Triggering with State Changes\nDESCRIPTION: Example of how state changes inside a Box component will trigger a reflow of the layout.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction AnimatedBox() {\n  // Since <Box/> is inside the component, setting the state will rerender it, thus causing a reflow.\n  // ⚠️ If <Box/> were outside this component, this would NOT cause a reflow!\n  const [state, setState] = useState(true)\n  useInterval(() => setState((s) => !s), 1000)\n  return (\n    <Box centerAnchor>\n      <mesh>\n        <boxBufferGeometry attach=\"geometry\" args={[state ? 10 : 30, 10, 10]} />\n```\n\n----------------------------------------\n\nTITLE: Manual Reflow with useFrame Hook\nDESCRIPTION: Shows how to trigger a manual reflow using the useReflow hook when animating with useFrame.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction AnimatedBox() {\n  const ref = useRef()\n  const reflow = useReflow()\n  useFrame(({ clock }) => {\n    ref.current.scale.x = 1 + Math.sin(clock.getElapsed())\n    reflow()\n  })\n  return (\n    <Box centerAnchor>\n      <mesh ref={ref}>\n```\n\n----------------------------------------\n\nTITLE: Manual Reflow for Box Outside Component\nDESCRIPTION: Demonstrates how to trigger manual reflow using useEffect when the Box is outside the component that has state changes.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction AnimatedBox() {\n  const [state, setState] = useState(true)\n  useInterval(() => setState((s) => !s), 1000)\n  const reflow = useReflow()\n  useEffect(reflow, [state])\n  return (\n    <mesh ref={ref} scale={[state ? 1 : 3, 1, 1]}>\n```\n\n----------------------------------------\n\nTITLE: Example of No Automatic Reflow Case\nDESCRIPTION: Demonstrates a case where state changes do not trigger a reflow because the Box component is in the parent component.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction AnimatedBox() {\n  // ⚠️ Setting state does not rerender <Box/> since it's in the parent\n  // ‼️ No Reflow!!\n  const [state, setState] = useState(true)\n  useInterval(() => setState((s) => !s), 1000)\n  return (\n    <mesh scale={[state ? 1 : 3, 1, 1]}>\n      <boxBufferGeometry attach=\"geometry\" />\n    </mesh>\n  )\n}\n\nfunction Layout() {\n  return (\n    <Flex>\n      <Box centerAnchor>\n        <AnimatedBox />\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Flex with npm\nDESCRIPTION: Command to install the @react-three/flex package using npm.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/flex\n```\n\n----------------------------------------\n\nTITLE: Starting the React Three Flex development server\nDESCRIPTION: Runs the React Three Flex application in development mode, which enables real-time reloading of the application when changes are made to the code. This command also displays lint errors in the console.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building the React Three Flex project for production\nDESCRIPTION: Creates an optimized production build of the React Three Flex application in the build folder, with minified files and hashed filenames for caching purposes.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/examples/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running tests for React Three Flex project\nDESCRIPTION: Launches the test runner in interactive watch mode, allowing for continuous testing while developing the React Three Flex application.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/examples/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App in React Three Flex project\nDESCRIPTION: Removes the single build dependency and copies all configuration files directly into the project, giving full control over the build configuration. This is a one-way operation that cannot be reversed.\nSOURCE: https://github.com/pmndrs/react-three-flex/blob/master/examples/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```"
  }
]