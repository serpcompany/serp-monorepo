[
  {
    "owner": "vuejs",
    "repo": "core",
    "content": "TITLE: Create and Mount Vue App with runtime-dom\nDESCRIPTION: This snippet demonstrates how to create a Vue application using the `createApp` function from `@vue/runtime-dom` and mount it to a DOM element. It also shows how to define a simple root component using the `h` function for creating virtual DOM nodes. Dependencies: @vue/runtime-dom.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/runtime-dom/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, createApp } from '@vue/runtime-dom'\n\nconst RootComponent = {\n  render() {\n    return h('div', 'hello world')\n  },\n}\n\ncreateApp(RootComponent).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: ES Module Import (Browser)\nDESCRIPTION: This snippet illustrates importing Vue.js using native ES modules in a browser environment with `<script type=\"module\">`. It requires using the `vue.esm-browser.js` or `vue.runtime.esm-browser.js` distribution.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue/README.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: renderToString Usage\nDESCRIPTION: Demonstrates basic usage of the `renderToString` function from `@vue/server-renderer` to render a Vue app to an HTML string.  It requires `vue` and `@vue/server-renderer` to be installed. The rendered HTML is then logged to the console.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createSSRApp } = require('vue')\nconst { renderToString } = require('@vue/server-renderer')\n\nconst app = createSSRApp({\n  data: () => ({ msg: 'hello' }),\n  template: `<div>{{ msg }}</div>`,\n})\n\n;(async () => {\n  const html = await renderToString(app)\n  console.log(html)\n})()\n```\n\n----------------------------------------\n\nTITLE: Bundler Configuration for Runtime Compilation\nDESCRIPTION: This snippet outlines the necessary bundler configuration when using a bundler like webpack or Rollup and wanting to use runtime template compilation.  It involves aliasing the `vue` import to the `vue.esm-bundler.js` file which includes the compiler.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue/README.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: pipeToNodeWritable Usage\nDESCRIPTION: Demonstrates using `pipeToNodeWritable` to render a Vue app and pipe it to an existing Node.js Writable stream, such as an HTTP response. This function requires a Node.js environment and access to the HTTP response object (`res`).\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a Node.js http handler\npipeToNodeWritable(app, {}, res)\n```\n\n----------------------------------------\n\nTITLE: Node.js Server-Side Rendering\nDESCRIPTION: This snippet describes how to use Vue in a Node.js server-side rendering environment using `require()`. The `vue.cjs.js` or `vue.cjs.prod.js` files are designed for this purpose. Webpack configuration with `target: 'node'` and externalization of `vue` is also mentioned.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue/README.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: CreateApp API Usage JavaScript\nDESCRIPTION: Demonstrates the updated `createApp` API in Vue.js. This change affects how a Vue application is initialized and mounted. The `createApp()` function now accepts the root component and an optional props object. The `app.mount()` function accepts a single argument: the root container. `app.unmount()` no longer needs arguments.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst app = createApp(RootComponent)\napp.mount('#app')\napp.unmount()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Renderer with @vue/runtime-core (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom renderer using the `createRenderer` function from `@vue/runtime-core`. It defines a renderer with custom patchProp, insert, remove, and createElement functions. The resulting `render` and `createApp` functions can then be used to render Vue components using the custom renderer.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/runtime-core/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRenderer } from '@vue/runtime-core'\n\nconst { render, createApp } = createRenderer({\n  patchProp,\n  insert,\n  remove,\n  createElement,\n  // ...\n})\n\n// `render` is the low-level API\n// `createApp` returns an app instance with configurable context shared\n// by the entire app tree.\nexport { render, createApp }\n\nexport * from '@vue/runtime-core'\n```\n\n----------------------------------------\n\nTITLE: Update dependencies in package.json (Diff)\nDESCRIPTION: This snippet shows the changes required in `package.json` to upgrade Vue to version 3.1.0, install `@vue/compat` and replace `vue-template-compiler` with `@vue/compiler-sfc`. It uses the diff format to highlight additions and removals.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n \"dependencies\": {\n-  \"vue\": \"^2.6.12\",\n+  \"vue\": \"^3.1.0\",\n+  \"@vue/compat\": \"^3.1.0\"\n  ...\n },\n \"devDependencies\": {\n-  \"vue-template-compiler\": \"^2.6.12\"\n+  \"@vue/compiler-sfc\": \"^3.1.0\"\n }\n```\n\n----------------------------------------\n\nTITLE: Handling Teleports with renderToString\nDESCRIPTION: Illustrates how to access teleported content when using `renderToString`.  The teleported content is available under the `teleports` property of the SSR context object. This example shows how to log the teleported content to the console.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }\n```\n\n----------------------------------------\n\nTITLE: Teleport Component Usage Example in Vue.js\nDESCRIPTION: This snippet demonstrates the new usage of the `<Teleport>` component in Vue.js, including renaming the `target` prop to `to`. The `<Teleport>` component allows rendering content in a different part of the DOM tree. The example shows how to render a modal in a specific DOM node, conditionally based on a disabled property.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.0.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Teleport to=\"#modal-layer\" :disabled=\"isMobile\">\n  <div class=\"modal\">hello</div>\n</Teleport>\n```\n\n----------------------------------------\n\nTITLE: Facade Module Example JavaScript\nDESCRIPTION: This code snippet illustrates the structure of a facade module generated by @vue/compiler-sfc. It imports the script, template, and style blocks of a Vue Single File Component (SFC) as separate modules. It then attaches the render function to the script and adds metadata like __file and __scopeId for tooling purposes. Finally, it exports the modified script.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/compiler-sfc/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// main script\nimport script from '/project/foo.vue?vue&type=script'\n// template compiled to render function\nimport { render } from '/project/foo.vue?vue&type=template&id=xxxxxx'\n// css\nimport '/project/foo.vue?vue&type=style&index=0&id=xxxxxx'\n\n// attach render function to script\nscript.render = render\n\n// attach additional metadata\n// some of these should be dev only\nscript.__file = 'example.vue'\nscript.__scopeId = 'xxxxxx'\n\n// additional tooling-specific HMR handling code\n// using __VUE_HMR_API__ global\n\nexport default script\n```\n\n----------------------------------------\n\nTITLE: Configure Vue CLI for compat mode (JavaScript)\nDESCRIPTION: This snippet shows how to configure Vue CLI to alias `vue` to `@vue/compat` and enable compatibility mode using `compilerOptions` in `vue.config.js`. It ensures the application runs in Vue 2 compatibility mode during the migration.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: config => {\n    config.resolve.alias.set('vue', '@vue/compat')\n\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap(options => {\n        return {\n          ...options,\n          compilerOptions: {\n            compatConfig: {\n              MODE: 2,\n            },\n          },\n        }\n      })\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue Global Instance (CDN)\nDESCRIPTION: This snippet demonstrates how to access the Vue global instance when using Vue.js directly from a CDN via a <script> tag. The `vue.global.js` or `vue.runtime.global.js` files expose the `Vue` global object, enabling you to interact with the library.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Rendering a Vue Component using @vue/runtime-test\nDESCRIPTION: This code snippet demonstrates how to render a simple Vue component using the @vue/runtime-test package. It imports necessary functions like h (createElement), render, nodeOps (for DOM operations), and dumpOps (for debugging). The component is rendered into a test environment and the DOM operations are logged.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/runtime-test/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h, render, nodeOps, dumpOps } from '@vue/runtime-test'\n\nconst App = {\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  },\n  render () {\n    return h('div', this.msg)\n  }\n}\n\n// root is of type `TestElement` as defined in src/nodeOps.ts\nconst root = nodeOps.createElement('div')\nrender(h(App), root)\n\nconst ops = dumpOps()\nconsole.log(ops)\n```\n\n----------------------------------------\n\nTITLE: renderToNodeStream Usage\nDESCRIPTION: Shows how to use `renderToNodeStream` to render a Vue app to a Node.js Readable stream, which is then piped to an HTTP response. This is suitable for Node.js environments.  It requires a Node.js environment and the `vue` package.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a Node.js http handler\nrenderToNodeStream(app).pipe(res)\n```\n\n----------------------------------------\n\nTITLE: renderToWebStream Usage\nDESCRIPTION: Shows how to use `renderToWebStream` to render a Vue app to a Web ReadableStream, which can then be used to create a Response. This method is suitable for environments that support the Web Streams API.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// inside an environment with ReadableStream support\nreturn new Response(renderToWebStream(app))\n```\n\n----------------------------------------\n\nTITLE: TSConfig JSX Import Source Configuration\nDESCRIPTION: This snippet demonstrates how to configure the `jsxImportSource` option in `tsconfig.json` to specify 'vue' as the JSX factory source. This configuration ensures correct type handling when using JSX with Vue, especially after version 3.3, where the global JSX namespace is no longer registered by default.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.3.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"vue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plain Webpack for compat mode (JavaScript)\nDESCRIPTION: This snippet shows how to configure plain Webpack to alias `vue` to `@vue/compat` and enable compatibility mode using `compilerOptions` in `webpack.config.js`. It ensures the application runs in Vue 2 compatibility mode during the migration using a standard Webpack setup.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  resolve: {\n    alias: {\n      vue: '@vue/compat',\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          compilerOptions: {\n            compatConfig: {\n              MODE: 2,\n            },\n          },\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for compat mode (JavaScript)\nDESCRIPTION: This snippet shows how to configure Vite to alias `vue` to `@vue/compat` and enable compatibility mode using `compilerOptions` in `vite.config.js`. It enables Vue 2 compatibility mode within a Vite project setup.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nexport default {\n  resolve: {\n    alias: {\n      vue: '@vue/compat',\n    },\n  },\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          compatConfig: {\n            MODE: 2,\n          },\n        },\n      },\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Component-Specific Compat Configuration - Vue.js\nDESCRIPTION: This code demonstrates how to configure compatibility features on a per-component basis using the `compatConfig` option.  The `MODE: 3` setting within `compatConfig` enables Vue 3 behavior specifically for this component.  `FEATURE_ID_A: true` enables compatibility for a particular feature only within this component.  This allows for fine-grained control over compatibility during migration and doesn't require any external dependencies beyond Vue. No specific output is produced by this configuration.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  compatConfig: {\n    MODE: 3, // opt-in to Vue 3 behavior for this component only\n    FEATURE_ID_A: true, // features can also be toggled at component level\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Compat Features Globally - Vue.js\nDESCRIPTION: This code snippet demonstrates how to disable specific compatibility features globally using the `configureCompat` function from Vue. This is useful for opting out of compatibility behavior for certain features during a Vue 2 to Vue 3 migration. The `FEATURE_ID_A` and `FEATURE_ID_B` constants represent the IDs of the features to be disabled.  No specific inputs are required beyond the feature IDs, and no output is generated, as the configuration is applied globally.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureCompat } from 'vue'\n\n// disable compat for certain features\nconfigureCompat({\n  FEATURE_ID_A: false,\n  FEATURE_ID_B: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Enable Compat Features in Vue 3 Mode Globally\nDESCRIPTION: This code snippet shows how to configure the entire application to default to Vue 3 behavior, while enabling compatibility for specific features.  The `MODE: 3` setting ensures Vue 3 behavior is the default.  `FEATURE_ID_A` and `FEATURE_ID_B` are the IDs of features to be enabled for compatibility. This approach allows developers to gradually migrate to Vue 3 while maintaining compatibility for selected features. No specific outputs are produced, as the configuration is applied globally.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue-compat/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureCompat } from 'vue'\n\n// default everything to Vue 3 behavior, and only enable compat\n// for certain features\nconfigureCompat({\n  MODE: 3,\n  FEATURE_ID_A: true,\n  FEATURE_ID_B: true,\n})\n```\n\n----------------------------------------\n\nTITLE: JSX Import Source Opt-in\nDESCRIPTION: This snippet shows how to opt-in to the `jsxImportSource` per-file using a comment. It's an alternative to configuring `tsconfig.json` and can be used for specific files that require JSX support with Vue. This is relevant when upgrading to Vue 3.3 and beyond.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.3.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* @jsxImportSource vue */\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags for Bundler Builds\nDESCRIPTION: This snippet describes the feature flags available in `esm-bundler` builds of Vue that can be overwritten at compile time. These flags, such as `__VUE_OPTIONS_API__`, `__VUE_PROD_DEVTOOLS__`, and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`, control the inclusion of specific features in the final bundle and enable tree-shaking.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/vue/README.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: pipeToWebWritable Usage\nDESCRIPTION: Illustrates using `pipeToWebWritable` to render a Vue app and pipe it to an existing Web WritableStream, such as a TransformStream.  This is useful in environments like Cloudflare Workers.  It might require importing `TransformStream` from `'stream/web'` in Node.js.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// TransformStream is available in environments such as CloudFlare workers.\n// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'\nconst { readable, writable } = new TransformStream()\npipeToWebWritable(app, {}, writable)\n\nreturn new Response(readable)\n```\n\n----------------------------------------\n\nTITLE: Checking Prop Absence with Symbol Default Value - JavaScript\nDESCRIPTION: This code snippet demonstrates how to check for the absence of a prop in Vue 3 by using a Symbol as a default value. This approach is necessary because `this.$props` and the `props` object passed to `setup()` now always contain all the keys for declared props, even for props that are absent.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.1.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAbsent = Symbol()\n\nexport default {\n  props: {\n    foo: { default: isAbsent }\n  },\n  setup(props) {\n    if (props.foo === isAbsent) {\n      // foo is absent\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: renderToSimpleStream Usage\nDESCRIPTION: Demonstrates using `renderToSimpleStream` to render a Vue app in streaming mode using a simple readable interface with `push` and `destroy` methods.  It accumulates the rendered chunks into a string and logs the complete result when finished. Error handling is also shown.\nSOURCE: https://github.com/vuejs/core/blob/main/packages/server-renderer/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet res = ''\n\nrenderToSimpleStream(\n  app,\n  {},\n  {\n    push(chunk) {\n      if (chunk === null) {\n        // done\n        console(`render complete: ${res}`)\n      } else {\n        res += chunk\n      }\n    },\n    destroy(err) {\n      // error encountered\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Run SFC Playground Locally (Dev)\nDESCRIPTION: This command starts the Vue.js SFC Playground in development mode. It requires pnpm to be installed and should be executed from the repository root directory.\nSOURCE: https://github.com/vuejs/core/blob/main/packages-private/sfc-playground/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev-sfc\n```\n\n----------------------------------------\n\nTITLE: Vite Vue Setup with npm\nDESCRIPTION: These commands are used to install the necessary dependencies for a Vite-based Vue project using npm and then start the development server. The `npm install` command installs the dependencies listed in the `package.json` file, and `npm run dev` starts the development server, typically on a local port.\nSOURCE: https://github.com/vuejs/core/blob/main/packages-private/sfc-playground/src/download/template/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Vite Vue Setup with Yarn\nDESCRIPTION: These commands are used to install the necessary dependencies for a Vite-based Vue project using Yarn and then start the development server. The `yarn` command installs the dependencies listed in the `package.json` file, and `yarn dev` starts the development server, typically on a local port.\nSOURCE: https://github.com/vuejs/core/blob/main/packages-private/sfc-playground/src/download/template/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Vite Vue Setup with pnpm\nDESCRIPTION: These commands are used to install the necessary dependencies for a Vite-based Vue project using pnpm and then start the development server. The `pnpm install` command installs the dependencies listed in the `package.json` file, and `pnpm run dev` starts the development server, typically on a local port.\nSOURCE: https://github.com/vuejs/core/blob/main/packages-private/sfc-playground/src/download/template/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Build SFC Playground for Production\nDESCRIPTION: This command builds the Vue.js SFC Playground for production deployment. It requires pnpm to be installed and should be executed from the repository root directory.\nSOURCE: https://github.com/vuejs/core/blob/main/packages-private/sfc-playground/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build-sfc-playground\n```\n\n----------------------------------------\n\nTITLE: Compiler Option Signature Change (getTextMode)\nDESCRIPTION: The `getTextMode` compiler option signature has changed, requiring updates to any custom compilers that rely on this option. The old signature accepted tag, namespace, and parent ElementNode. The new signature accepts an ElementNode and the parent ElementNode.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.0.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n;(tag: string, ns: string, parent: ElementNode | undefined) => TextModes\n```\n\nLANGUAGE: typescript\nCODE:\n```\n;(node: ElementNode, parent: ElementNode | undefined) => TextModes\n```\n\n----------------------------------------\n\nTITLE: Compiler SFC Transform Asset URLs Option Update\nDESCRIPTION: The `transformAssetUrlsBase` option has been removed and merged into `trasnformAssetUrls`.  The new `trasnformAssetUrls` option now accepts a configuration object that allows specifying base URLs, including absolute URLs, and defining tag-specific URL attributes.\nSOURCE: https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.0.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    base?: string\n    includeAbsolute?: string\n    tags?: { [name: string]: string[] }\n  }\n```"
  }
]