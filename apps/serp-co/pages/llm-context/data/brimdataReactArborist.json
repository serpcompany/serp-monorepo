[
  {
    "owner": "brimdata",
    "repo": "react-arborist",
    "content": "TITLE: Creating a Basic Tree Component in React\nDESCRIPTION: Simplest implementation of React Arborist using the initialData prop to create an uncontrolled component that handles create, move, rename, and delete operations internally.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tree } from 'react-arborist';\n\nfunction App() {\n  return <Tree initialData={data} />;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Tree Component Props\nDESCRIPTION: Complete TypeScript interface definition for all the props that can be passed to the Tree component, including data options, handlers, renderers, and configuration settings.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ninterface TreeProps<T> {\n  /* Data Options */\n  data?: readonly T[];\n  initialData?: readonly T[];\n\n  /* Data Handlers */\n  onCreate?: handlers.CreateHandler<T>;\n  onMove?: handlers.MoveHandler<T>;\n  onRename?: handlers.RenameHandler<T>;\n  onDelete?: handlers.DeleteHandler<T>;\n\n  /* Renderers*/\n  children?: ElementType<renderers.NodeRendererProps<T>>;\n  renderRow?: ElementType<renderers.RowRendererProps<T>>;\n  renderDragPreview?: ElementType<renderers.DragPreviewProps>;\n  renderCursor?: ElementType<renderers.CursorProps>;\n  renderContainer?: ElementType<{}>;\n\n  /* Sizes */\n  rowHeight?: number;\n  overscanCount?: number;\n  width?: number | string;\n  height?: number;\n  indent?: number;\n  paddingTop?: number;\n  paddingBottom?: number;\n  padding?: number;\n\n  /* Config */\n  childrenAccessor?: string | ((d: T) => T[] | null);\n  idAccessor?: string | ((d: T) => string);\n  openByDefault?: boolean;\n  selectionFollowsFocus?: boolean;\n  disableMultiSelection?: boolean;\n  disableEdit?: string | boolean | BoolFunc<T>;\n  disableDrag?: string | boolean | BoolFunc<T>;\n  disableDrop?:\n    | string\n    | boolean\n    | ((args: {\n        parentNode: NodeApi<T>;\n        dragNodes: NodeApi<T>[];\n        index: number;\n      }) => boolean);\n\n  /* Event Handlers */\n  onActivate?: (node: NodeApi<T>) => void;\n  onSelect?: (nodes: NodeApi<T>[]) => void;\n  onScroll?: (props: ListOnScrollProps) => void;\n  onToggle?: (id: string) => void;\n  onFocus?: (node: NodeApi<T>) => void;\n\n  /* Selection */\n  selection?: string;\n\n  /* Open State */\n  initialOpenState?: OpenMap;\n\n  /* Search */\n  searchTerm?: string;\n  searchMatch?: (node: NodeApi<T>, searchTerm: string) => boolean;\n\n  /* Extra */\n  className?: string | undefined;\n  rowClassName?: string | undefined;\n\n  dndRootElement?: globalThis.Node | null;\n  onClick?: MouseEventHandler;\n  onContextMenu?: MouseEventHandler;\n  dndManager?: DragDropManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Component with Custom Hooks and Renderers\nDESCRIPTION: Demonstrates a comprehensive setup of the Tree component using custom hooks for nodes, selection, and opens, along with custom keybindings and renderers.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst tree = useTree(data, {\n  nodes: {\n    id: (d) => d.path,\n    children: (d) => d.items,\n    searchTerm: 'hi',\n    searchFilter: leavesOnly\n  },\n  selection: {\n    id: (data) => select(Current.getPath)\n  },\n  opens: {\n    id: (d) => d.path,\n    isOpen: (d) => d.isOpen\n  },\n  keybindings: (defaults) => {\n    return {\n      ...defaults(),\n      \"cmd+a\": () => tree.thisThat()\n      \"up\": () => tree.focus.up()\n    }\n  }\n});\n\nreturn (\n  <Tree\n    {...tree}\n    renderers={{\n      node: () => {}\n      row: () => {}\n      cursor: () => {}\n\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Appearance with a Custom Node Component\nDESCRIPTION: Example showing how to customize the appearance of the tree by setting dimensions and providing a custom Node component to render each node.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <Tree\n      initialData={data}\n      openByDefault={false}\n      width={600}\n      height={1000}\n      indent={24}\n      rowHeight={36}\n      overscanCount={1}\n      paddingTop={30}\n      paddingBottom={10}\n      padding={25 /* sets both */}\n    >\n      {Node}\n    </Tree>\n  );\n}\n\nfunction Node({ node, style, dragHandle }) {\n  /* This node instance can do many things. See the API reference. */\n  return (\n    <div style={style} ref={dragHandle}>\n      {node.isLeaf ? \"üçÅ\" : \"üóÄ\"}\n      {node.data.name}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Tree Component in React\nDESCRIPTION: Example demonstrating how to create a controlled tree component by handling data modifications through callback props.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  /* Handle the data modifications outside the tree component */\n  const onCreate = ({ parentId, index, type }) => {};\n  const onRename = ({ id, name }) => {};\n  const onMove = ({ dragIds, parentId, index }) => {};\n  const onDelete = ({ ids }) => {};\n\n  return (\n    <Tree\n      data={data}\n      onCreate={onCreate}\n      onRename={onRename}\n      onMove={onMove}\n      onDelete={onDelete}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Node Manipulation in React Arborist\nDESCRIPTION: Shows how to handle node manipulation events such as creation, update, deletion, and movement in the Tree component.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst nodes = useNodes(/* */);\n\nreturn (\n  <Tree\n    nodes={{\n      value: nodes.value,\n      onChange: (e) => {\n        // e.type === \"new\" | \"create\" | \"update\" | \"delete\" | \"move\"\n        // e.payload = {\n          id: //string\n          isLeaf://\n          parentId: // id,\n          index://n\n\n        }\n        nodes.set(e.value);\n      }\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rendering for Tree Components\nDESCRIPTION: Shows how to completely customize the rendering of the tree by providing custom components for rows, drag previews, cursors, and nodes.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <Tree\n      data={data}\n      /* The outer most element in the list */\n      renderRow={MyRow}\n      /* The \"ghost\" element that follows the mouse as you drag */\n      renderDragPreview={MyDragPreview}\n      /* The line that shows where an element will be dropped */\n      renderCursor={MyCursor}\n    >\n      {/* The inner element that shows the indentation and data */}\n      {MyNode}\n    </Tree>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NodeObject Interface in TypeScript\nDESCRIPTION: The TypeScript interface that defines the core NodeObject structure required by the TreeManager and TreeController. It includes properties for identification, data storage, parent/child relationships, and node characteristics.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/terms.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NodeObject<T> = {\n  id: string;\n  data: T;\n  parent: NodeObject<T> | null;\n  children: NodeObject<T>[] | null;\n  isLeaf: boolean;\n  level: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Filtering Functionality\nDESCRIPTION: Example showing how to implement search filtering in the tree to only display nodes that match the search term, with parent nodes automatically opened.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const term = useSearchTermString()\n  <Tree\n    data={data}\n    searchTerm={term}\n    searchMatch={\n      (node, term) => node.data.name.toLowerCase().includes(term.toLowerCase())\n    }\n  />\n}\n```\n\n----------------------------------------\n\nTITLE: Handling External and Internal Selection Changes in React\nDESCRIPTION: Illustrates how to handle selection changes both externally and internally in React components, including a Tree component.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst [value, setValue] = useState('hello world');\n\nreturn <input value={value} onChange={(e) => setValue(e.target.value)} />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst selection = useMultiSelection();\n\nreturn (\n  <Tree\n    selection={{\n      value: selection.value,\n      onChange: (e) => {\n        // Now we will include all the relevant information\n        // to perform side effects in here.\n        // This will run if changed internally,\n        // This will not run if changed externally\n        selection.set(e.target.value);\n      }\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Syncing Tree Selection with External State\nDESCRIPTION: Demonstrates how to synchronize the tree selection with external state by passing an ID to the selection prop, which automatically selects and scrolls to that node.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const chatId = useCurrentChatId();\n\n  /* \n    Whenever the currentChatRoomId changes, \n    the tree will automatically select it and scroll to it. \n  */\n\n  return <Tree initialData={data} selection={chatId} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Tree State with External Data Store in React\nDESCRIPTION: Demonstrates how to sync the tree state with an external data store, such as a backend database, using various callback props.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst nodes = useNodes(data)\n\n<Tree\n  onMove={(args) => api.move(args)}\n  onEdit={(args) => api.edit(args)}\n  onCreate={() => api.create(args)}\n  onDelete={() => api.destroy(args)}\n  onOpen={(args) => {\n    nodes.addChild(id, {loading: true})\n    api.fetchChildren(id)\n  }}\n  onSelect={}\n  onFocus={}\n  nodes={{\n    value: nodes.value,\n    onChange: nodes.set\n  }}\n  selection={{\n    value: selection.value,\n    onChange: selection.set\n  }}\n  opens={{\n    value: opens.value,\n    onChange: opens.set\n  }}\n  focus={{\n    value: focus.value,\n    onChange: focus.set\n  }}\n  dnd={{\n    value: dnd.value,\n    onChange: dnd.set\n  }}\n  treeState={{\n    value: state.value,\n    onChange: state.set\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tree API via Refs in React\nDESCRIPTION: Shows how to access the Tree API instance by using a ref, allowing programmatic control of the tree from the parent component.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const treeRef = useRef();\n\n  useEffect(() => {\n    const tree = treeRef.current;\n    tree.selectAll();\n    /* See the Tree API reference for all you can do with it. */\n  }, []);\n\n  return <Tree initialData={data} ref={treeRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Selection State in React Arborist\nDESCRIPTION: Shows how to track and change the selection state of the tree, using external state and effects.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst id = useSelector(Current.fileId)\nconst selection = useMultiSelection(id)\n\nuseEffect(() => {\n  selection.only(id)\n}, [id])\n\n<Tree\n  selection={{\n    value: selection.value,\n    onChange: selection.set\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Managing Expanded State in React Arborist\nDESCRIPTION: Demonstrates how to control the expanded state of the tree, either by extracting it from the tree data or using a separate state object.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// If you keep the open data within your tree data,\n// you can extract it with the useOpens hook.\n\nconst [opens, setOpens] = useOpens(data, {\n  id: (d) => d.path\n  isOpen = (d) => d.isOpen\n})\n\n// Otherwise, you can provide your own object\n// to keep track of it.\nconst [opens, setOpens] = useState({})\n\n<Tree\n  opens={{\n    value: opens,\n    onChange: (newValue) => setOpens(newValue)\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Node State Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the complete state object for a tree node, including properties for editing, selection, focus, and drag states.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype NodeState = {\n  isEditing: boolean;\n  isDragging: boolean;\n  isSelected: boolean;\n  isSelectedStart: boolean;\n  isSelectedEnd: boolean;\n  isFocused: boolean;\n  isOpen: boolean;\n  isClosed: boolean;\n  isLeaf: boolean;\n  isInternal: boolean;\n  willReceiveDrop: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Node Component Props\nDESCRIPTION: TypeScript interface definition for the props passed to the Node renderer component, which handles the visual appearance, drag functionality, and edit state of each node.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nexport type NodeRendererProps<T> = {\n  style: CSSProperties;\n  node: NodeApi<T>;\n  tree: TreeApi<T>;\n  dragHandle?: (el: HTMLDivElement | null) => void;\n  preview?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Row Component Props\nDESCRIPTION: TypeScript interface definition for the props passed to the Row renderer component, which handles drop functionality, styling, and ARIA attributes.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ntype RowRendererProps<T> = {\n  node: NodeApi<T>;\n  innerRef: (el: HTMLDivElement | null) => void;\n  attrs: HTMLAttributes<any>;\n  children: ReactElement;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Filtering in React Arborist\nDESCRIPTION: Demonstrates how to implement tree filtering using the useNodes hook with search terms and custom filtering options.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst nodes = useNodes({\n  searchTerm: '',\n  searchMatch: leafs | leavesAndInternal | custom\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Property Accessors for Tree Data\nDESCRIPTION: Example showing how to work with data that has different property names by using idAccessor and childrenAccessor props to customize how the tree accesses data fields.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const data = [\n    {\n      category: \"Food\",\n      subCategories: [{ category: \"Restaurants\" }, { category: \"Groceries\" }],\n    },\n  ];\n  return (\n    <Tree\n      data={data}\n      /* An accessor can provide a string property name */\n      idAccessor=\"category\"\n      /* or a function with the data as the argument */\n      childrenAccessor={(d) => d.subCategories}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree Component with Node Data in React\nDESCRIPTION: Shows how to pass node data to the Tree component and handle state changes.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tree\n  nodes={{\n    value: nodes,\n    onChange: (newValue) => setNodes(newValue)\n  }}\n>\n  {Node}\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes with State Management in React\nDESCRIPTION: Demonstrates how to create nodes from data and manage state using React hooks. It shows two approaches: one with useState and another with a custom useNodes hook.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// #APPROVED\nconst [data, setData] = useState(myRandomData);\nconst nodes = createNodes(data, {\n  id: (d) => d.path,\n  name: (d) => d.name,\n  children: (d) => d.files,\n  isLeaf: (d) => !('files' in d),\n  sort: (a, b) => a.name - b.name,\n  isVisible: (node) => true // not sure about his yet\n});\n\n<Tree\n  nodes={{\n    value: nodes,\n    onChange: (e) => setData(nodes.handleChange(e))\n  }}\n>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// #APPROVED\nconst nodes = useNodes(myRandomData, {\n  id: (d) => d.path,\n  name: (d) => d.name,\n  children: (d) => d.files,\n  isLeaf: (d) => !('files' in d),\n  sort: (a, b) => a.name - b.name,\n  isVisible: (node) => true // not sure about his yet\n});\n\n<Tree nodes={nodes} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Sizing for Tree Component\nDESCRIPTION: Demonstrates how to make the tree component responsive by using the useResizeObserver hook to dynamically adjust its dimensions based on parent container size.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst { ref, width, height } = useResizeObserver();\n \n<div className=\"parent\" ref={ref}>\n  <Tree height={height} width={width} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining DragPreview Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the DragPreview component, which shows a ghost version of the dragged node. Includes properties for offset coordinates, mouse position, node IDs and drag state.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype DragPreviewProps = {\n  offset: XYCoord | null;\n  mouse: XYCoord | null;\n  id: string | null;\n  dragIds: string[];\n  isDragging: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Cursor Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the Cursor component, which shows the drop target line. Includes positioning and indentation properties.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CursorProps = {\n  top: number;\n  left: number;\n  indent: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Selection Externally in React Arborist\nDESCRIPTION: Shows how to change the tree selection externally using effects and custom hooks.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst chatId = useCurrentChatId();\nconst selection = useSelection();\n\nuseEffect(() => {\n  selection.selectOne(chatId, {scroll: 'center'});\n}, [chatId]);\n\nreturn (\n  <Tree\n    selection={{\n      value: selection.value\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Data Structure in JavaScript\nDESCRIPTION: Example of a tree-like data structure representing a file system, used as input for React Arborist.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/content/_index.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  name: 'code',\n  path: '/users/jk',\n  files: [\n    {\n      name: 'react-arborist',\n      path: '/users/jk/code',\n      files: [\n        {\n          name: 'package.json',\n          path: '/users/jk/code/react-arborist'\n        },\n        {\n          name: '.prettierrc',\n          path: '/users/jk/code/react-arborist'\n        }\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Data Structure in JavaScript\nDESCRIPTION: Sample data structure for a tree containing chat categories, including nested children for certain nodes.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n  { id: \"1\", name: \"Unread\" },\n  { id: \"2\", name: \"Threads\" },\n  {\n    id: \"3\",\n    name: \"Chat Rooms\",\n    children: [\n      { id: \"c1\", name: \"General\" },\n      { id: \"c2\", name: \"Random\" },\n      { id: \"c3\", name: \"Open Source Projects\" },\n    ],\n  },\n  {\n    id: \"4\",\n    name: \"Direct Messages\",\n    children: [\n      { id: \"d1\", name: \"Alice\" },\n      { id: \"d2\", name: \"Bob\" },\n      { id: \"d3\", name: \"Charlie\" },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining disableDrop Function in TypeScript for React Arborist Tree Component\nDESCRIPTION: This code snippet demonstrates the new signature for the disableDrop prop function in React Arborist 3.0.0. It allows dynamic determination of whether a drop is allowed based on the dragged nodes, the potential new parent node, and the drop index.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function disableDrop(args: {\n  dragNodes: NodeApi[]; // The nodes being dragged\n  parentNode: NodeApi; // The new parent of the dragNodes if dropped\n  index: number; // The new child index of the dragNodes if dropped\n}): boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing React Arborist with Package Managers\nDESCRIPTION: Commands to install the React Arborist library using either Yarn or npm package managers.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-arborist\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-arborist\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running React Arborist Locally\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and starting the local development server.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn && yarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for End-to-End Testing in React Arborist\nDESCRIPTION: This code snippet sets up the configuration for Playwright, a browser automation tool, to run end-to-end tests for the React Arborist project. It specifies test file patterns, browser options, and other testing parameters.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/e2e/README.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig, devices } from \"@playwright/test\";\n\n/**\n * Read environment variables from file.\n * https://github.com/motdotla/dotenv\n */\n// require('dotenv').config();\n\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig({\n  testDir: \"./\",\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: \"html\",\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    // baseURL: 'http://127.0.0.1:3000',\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: \"on-first-retry\",\n  },\n\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: \"chromium\",\n      use: { ...devices[\"Desktop Chrome\"] },\n    },\n\n    {\n      name: \"firefox\",\n      use: { ...devices[\"Desktop Firefox\"] },\n    },\n\n    {\n      name: \"webkit\",\n      use: { ...devices[\"Desktop Safari\"] },\n    },\n\n    /* Test against mobile viewports. */\n    // {\n    //   name: 'Mobile Chrome',\n    //   use: { ...devices['Pixel 5'] },\n    // },\n    // {\n    //   name: 'Mobile Safari',\n    //   use: { ...devices['iPhone 12'] },\n    // },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ..devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n\n  /* Run your local dev server before starting the tests */\n  // webServer: {\n  //   command: 'npm run start',\n  //   url: 'http://127.0.0.1:3000',\n  //   reuseExistingServer: !process.env.CI,\n  // },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Individual React Arborist Modules\nDESCRIPTION: Commands for running tests on specific modules by navigating to their directories.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd modules/react-arborist && yarn test\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in React Arborist\nDESCRIPTION: Command for building the project and running all tests from the root directory.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build && yarn test\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying React Arborist Demo Site\nDESCRIPTION: Command for building the showcase site which is then manually deployed to Netlify.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Starter Site Template\nDESCRIPTION: Command sequence for cloning the Hugo starter template, renaming the project directory, and starting the development server. Requires Git, Hugo, and Yarn to be installed.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/jameskerr/hugo-starter\n\nmv hugo-starter my-cool-site # rename to something you want\n\ncd my-cool-site\n\nyarn\n\nhugo server\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with npm or yarn\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running either command, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/showcase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Frontmatter in Markdown\nDESCRIPTION: This snippet defines the frontmatter for a Hugo content file. It sets the title, date, and draft status for a new page or post. The title is dynamically generated from the file name, and the date is set to the current date.\nSOURCE: https://github.com/brimdata/react-arborist/blob/main/modules/docs/archetypes/default.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+++\ntitle = '{{ replace .File.ContentBaseName \"-\" \" \" | title }}'\ndate = {{ .Date }}\ndraft = true\n+++\n```"
  }
]