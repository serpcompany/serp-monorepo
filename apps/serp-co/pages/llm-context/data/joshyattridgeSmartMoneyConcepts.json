[
  {
    "owner": "joshyattridge",
    "repo": "smart-money-concepts",
    "content": "TITLE: Identifying Order Blocks (OB) using SMC\nDESCRIPTION: This function detects order blocks in the OHLC data, which represent areas of high market order concentration. It returns information about bullish/bearish order blocks, their price range, volume, and strength.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsmc.ob(ohlc, swing_highs_lows, close_mitigation = False)\n```\n\n----------------------------------------\n\nTITLE: Calculating Fair Value Gap (FVG) using SMC\nDESCRIPTION: This function calculates Fair Value Gaps in the provided OHLC data. It returns information about bullish and bearish gaps, their top and bottom levels, and mitigation indices.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsmc.fvg(ohlc, join_consecutive=False)\n```\n\n----------------------------------------\n\nTITLE: Detecting Liquidity zones using SMC\nDESCRIPTION: This function identifies liquidity zones where multiple highs or lows occur within a small price range. It returns the type of liquidity, price level, end index, and sweep index.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsmc.liquidity(ohlc, swing_highs_lows, range_percent = 0.01)\n```\n\n----------------------------------------\n\nTITLE: Detecting Break of Structure (BOS) and Change of Character (CHoCH)\nDESCRIPTION: This function identifies breaks in market structure and changes of character using swing high/low data. It returns the type of event, price level, and the index of the candle that broke the level.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsmc.bos_choch(ohlc, swing_highs_lows, close_break = True)\n```\n\n----------------------------------------\n\nTITLE: Identifying Swing Highs and Lows using SMC\nDESCRIPTION: This function detects swing highs and lows in the OHLC data based on a specified swing length. It returns the type of swing (high or low) and the corresponding price level.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsmc.swing_highs_lows(ohlc, swing_length = 50)\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Retracements using SMC\nDESCRIPTION: This function calculates the current and deepest retracement percentages from swing highs or lows in the OHLC data. It returns the retracement direction and percentages.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsmc.retracements(ohlc, swing_highs_lows)\n```\n\n----------------------------------------\n\nTITLE: Identifying Trading Sessions using SMC\nDESCRIPTION: This function determines which candles fall within a specified trading session (e.g., Sydney, Tokyo, London, New York) or custom time range. It returns session activity, high, and low prices.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsmc.sessions(ohlc, session, start_time, end_time, time_zone = \"UTC\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Previous High and Low for a given timeframe\nDESCRIPTION: This function returns the previous high and low prices for a specified timeframe (e.g., 15m, 1H, 4H, 1D, 1W, 1M) from the OHLC data.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsmc.previous_high_low(ohlc, time_frame = \"1D\")\n```\n\n----------------------------------------\n\nTITLE: Importing the Smart Money Concepts module in Python\nDESCRIPTION: This code snippet shows how to import the smc module from the smartmoneyconcepts library for use in Python scripts.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom smartmoneyconcepts import smc\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to Smart Money Concepts\nDESCRIPTION: Step-by-step Git commands for forking, creating a feature branch, committing changes, and submitting a pull request to the Smart Money Concepts repository.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am 'Add some feature'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Money Concepts library using pip\nDESCRIPTION: This command installs the smartmoneyconcepts library using pip, the Python package installer.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install smartmoneyconcepts\n```\n\n----------------------------------------\n\nTITLE: Hiding SMC credit message using environment variable\nDESCRIPTION: This command sets an environment variable to hide the credit message displayed when importing the SMC library.\nSOURCE: https://github.com/joshyattridge/smart-money-concepts/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport SMC_CREDIT=0\n```"
  }
]