[
  {
    "owner": "apache",
    "repo": "activemq-website",
    "content": "TITLE: Failover Transport Example with Initial Reconnect Delay\nDESCRIPTION: Illustrates a basic Failover transport configuration with two TCP URIs and sets the `initialReconnectDelay` to 100 milliseconds. This means the client will wait 100ms before attempting the first reconnect. The code snippet shows a common configuration setting for handling connection failures and retries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nfailover:(tcp://localhost:61616,tcp://remotehost:61616)?initialReconnectDelay=100\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Transport in ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates how to configure the failover transport in ActiveMQ Classic to connect to multiple URIs for high availability. It specifies a list of TCP endpoints that the client will attempt to connect to in order.  The failover transport ensures that the client can reconnect to another available broker if the current connection fails. It replaces the 'reliable' transport.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/changes-in-40.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfailover:tcp://host1:port1,tcp://host2:port2\n```\n\n----------------------------------------\n\nTITLE: Setting Serializable Packages System Property\nDESCRIPTION: This code snippet shows how to set the `org.apache.activemq.SERIALIZABLE_PACKAGES` system property to whitelist packages for ObjectMessage serialization/deserialization in ActiveMQ Classic. It's configured within the `ACTIVEMQ_OPTS` environment variable.  This property is interpreted by both the broker and client library. Failure to set this properly can lead to `java.io.IOException: Security risk: class is not in the trusted packages` exceptions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/objectmessage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-Dorg.apache.activemq.SERIALIZABLE_PACKAGES=java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper,com.mycompany.myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Beans for JMS and JDBC Transaction\nDESCRIPTION: This snippet defines Spring beans for ActiveMQ Classic broker, Geronimo transaction manager, Jencks connection manager, JMS connection factory, and a JDBC data source. It configures resources for performing JMS and JDBC operations in a transactional context.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-and-jdbc-operations-in-one-transaction.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans>\n    <!-- ActiveMQ Classic Broker -->\n    <bean id=\"broker\" class=\"org.apache.activemq.broker.BrokerService\" init-method=\"start\" destroy-method=\"stop\">\n        <property name=\"persistent\" value=\"false\"/>\n        <property name=\"transportConnectorURIs\">\n            <list>\n                <value>tcp://localhost:5000</value>\n            </list>\n        </property>\n    </bean>\n\n    <!-- Geronimo Transaction Manager -->\n    <bean id=\"transactionContextManager\" class=\"org.jencks.factory.TransactionContextManagerFactoryBean\"/>\n    <bean id=\"geronimo\" class=\"org.jencks.factory.GeronimoTransactionManagerFactoryBean\"/>\n    <bean id=\"geronimoTransactionManager\" class=\"org.springframework.transaction.jta.JtaTransactionManager\">\n        <property name=\"userTransaction\" ref=\"geronimo\" />\n    </bean>\n\n    <!-- Jencks Connection Manager -->\n    <bean id=\"connectionManager\" class=\"org.jencks.factory.ConnectionManagerFactoryBean\">\n        <property name=\"transactionSupport\">\n            <bean class=\"org.jencks.factory.XATransactionFactoryBean\">\n                <property name=\"useTransactionCaching\" value=\"true\"/>\n                <property name=\"useThreadCaching\" value=\"false\"/>\n            </bean>\n        </property>\n        <property name=\"poolingSupport\">\n            <bean class=\"org.jencks.factory.SinglePoolFactoryBean\">\n                <property name=\"maxSize\" value=\"2\"/>\n                <property name=\"minSize\" value=\"1\"/>\n                <property name=\"blockingTimeoutMilliseconds\" value=\"60\"/>\n                <property name=\"idleTimeoutMinutes\" value=\"60\"/>\n                <property name=\"matchOne\" value=\"true\"/>\n                <property name=\"matchAll\" value=\"true\"/>\n                <property name=\"selectOneAssumeMatch\" value=\"true\"/>\n            </bean>\n        </property>\n    </bean>\n\n    <!-- ActiveMQ Classic Connection -->\n    <bean id=\"jmsResourceAdapter\" class=\"org.apache.activemq.ra.ActiveMQResourceAdapter\" depends-on=\"broker\">\n        <property name=\"serverUrl\">\n            <value>tcp://localhost:5000</value>\n        </property>\n    </bean>\n    <bean id=\"jmsManagedConnectionFactory\" class=\"org.apache.activemq.ra.ActiveMQManagedConnectionFactory\">\n        <property name=\"resourceAdapter\" ref=\"jmsResourceAdapter\"/>\n    </bean>\n    <bean id=\"jmsConnectionFactory\" class=\"org.springframework.jca.support.LocalConnectionFactoryBean\">\n        <property name=\"managedConnectionFactory\" ref=\"jmsManagedConnectionFactory\"/>\n        <property name=\"connectionManager\" ref=\"connectionManager\"/>\n    </bean>\n\n    <!-- Tranql JDBC Connection -->\n    <!--\n    <bean id=\"tranqlManagedConnectionFactory\" class=\"org.jencks.tranql.XAPoolDataSourceMCF\">\n        <property name=\"driverName\" value=\"org.postgresql.Driver\"/>\n        <property name=\"url\" value=\"jdbc:postgresql://ats-manager/activemq\"/>\n        <property name=\"user\" value=\"activemq\"/>\n    </bean>\n    <bean id=\"tranqlDataSource\" class=\"org.springframework.jca.support.LocalConnectionFactoryBean\">\n        <property name=\"managedConnectionFactory\" ref=\"tranqlManagedConnectionFactory\"/>\n        <property name=\"connectionManager\" ref=\"connectionManager\"/>\n    </bean>\n    -->\n\n    <!-- Enhydra JDBC Connection -->\n    <bean id=\"enhydraDataSource\" class=\"org.enhydra.jdbc.pool.StandardXAPoolDataSource\" destroy-method=\"shutdown\">\n        <property name=\"dataSource\">\n            <bean class=\"org.enhydra.jdbc.standard.StandardXADataSource\" destroy-method=\"shutdown\">\n                <property name=\"transactionManager\" ref=\"geronimo\" />\n                <property name=\"driverName\" value=\"org.postgresql.Driver\" />\n                <property name=\"url\" value=\"jdbc:postgresql://ats-manager/activemq\" />\n            </bean>\n        </property>\n        <property name=\"user\" value=\"activemq\"/>\n    </bean>\n\n    <bean id=\"jencksJCAContainer\" class=\"org.jencks.JCAContainer\">\n        <property name=\"bootstrapContext\">\n            <bean class=\"org.jencks.factory.BootstrapContextFactoryBean\">\n                <property name=\"threadPoolSize\" value=\"25\"/>\n            </bean>\n        </property>\n        <property name=\"resourceAdapter\" ref=\"jmsResourceAdapter\"/>\n    </bean>\n\n    <bean id=\"inboundConnector\" class=\"org.jencks.JCAConnector\">\n        <property name=\"jcaContainer\" ref=\"jencksJCAContainer\" />\n        <property name=\"activationSpec\">\n            <bean class=\"org.apache.activemq.ra.ActiveMQActivationSpec\">\n                <property name=\"destination\" value=\"messages.input\"/>\n                <property name=\"destinationType\" value=\"javax.jms.Queue\"/>\n            </bean>\n        </property>\n        <property name=\"transactionManager\" ref=\"geronimo\"/>\n        <property name=\"ref\" value=\"echoBean\"/>\n    </bean>\n\n    <bean id=\"echoBean\" class=\"transactions.EchoBean\">\n        <property name=\"jdbcTemplate\">\n            <bean class=\"org.springframework.jdbc.core.JdbcTemplate\">\n                <property name=\"dataSource\" ref=\"enhydraDataSource\"/>\n            </bean>\n        </property>\n        <property name=\"jmsTemplate\">\n            <bean class=\"org.springframework.jms.core.JmsTemplate\">\n                <property name=\"connectionFactory\" ref=\"jmsConnectionFactory\"/>\n            </bean>\n        </property>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Sending to Multiple Queues with ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates how to send a message to multiple queues as a single logical operation using ActiveMQ Classic's composite destinations feature. It creates an ActiveMQQueue object with a comma-separated list of queue names, effectively treating them as a single virtual destination. The message is then sent to this virtual destination, resulting in the message being sent to each of the specified queues.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/composite-destinations.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// send to 3 queues as one logical operation\nQueue queue = new ActiveMQQueue(\"FOO.A,FOO.B,FOO.C\");\nproducer.send(queue, someMessage);\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Priority in ActiveMQ Classic with Java\nDESCRIPTION: This code snippet demonstrates how to set the consumer priority for an ActiveMQ Classic queue using Destination Options. The priority is set to 10 in this example.  The range of priority values is 0 to 127, with 127 being the highest. Requires the ActiveMQ client library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/consumer-priority.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nqueue = new ActiveMQQueue(\"TEST.QUEUE?consumer.priority=10\");\nconsumer = session.createConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Default Credentials Configuration\nDESCRIPTION: Specifies the default username and password for ActiveMQ Classic in the `conf/credentials.properties` file. These credentials are used by various components to connect to the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\nactivemq.username=system activemq.password=manager\n```\n\n----------------------------------------\n\nTITLE: Authorization Plugin Configuration\nDESCRIPTION: This snippet demonstrates how to configure an `authorizationPlugin` in ActiveMQ Classic to control access to queues, topics, and temporary destinations. It uses `authorizationEntry` elements to define access permissions (read, write, admin) based on user groups.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<broker> \n  .. \n    <plugins> \n      .. \n      <authorizationPlugin> \n        <map> \n          <authorizationMap> \n            <authorizationEntries> \n              <authorizationEntry queue=\"TEST.Q\" read=\"users\" write=\"users\" admin=\"users\" /> \n              <authorizationEntry topic=\"ActiveMQ.Advisory.>\" read=\"*\" write=\"*\" admin=\"*\"/> \n            </authorizationEntries> \n            <tempDestinationAuthorizationEntry> \n              <tempDestinationAuthorizationEntry read=\"admin\" write=\"admin\" admin=\"admin\"/> \n            </tempDestinationAuthorizationEntry> \n          </authorizationMap> \n        </map> \n      </authorizationPlugin> \n      .. \n    </plugins> \n  .. \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Sending BlobMessage with URL - Java\nDESCRIPTION: This code snippet demonstrates how to create and send a BlobMessage using a URL to a shared file or web server. It uses the createBlobMessage method of the ActiveMQSession with a URL object.  The message is then sent using a MessageProducer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/blob-messages.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlobMessage message = session.createBlobMessage(new URL(\"http://some.shared.site.com\");\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Simple Authentication Plugin Configuration\nDESCRIPTION: This snippet shows how to configure the SimpleAuthenticationPlugin in ActiveMQ Classic.  It defines users with usernames, passwords, and group memberships directly within the broker's XML configuration. These users can then be used for authorization.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<simpleAuthenticationPlugin>\n  <users>\n    <authenticationUser username=\"system\" password=\"manager\" groups=\"users,admins\"/>\n    <authenticationUser username=\"user\" password=\"password\" groups=\"users\"/>\n    <authenticationUser username=\"guest\" password=\"password\" groups=\"guests\"/>\n  </users>\n</simpleAuthenticationPlugin>\n```\n\n----------------------------------------\n\nTITLE: Creating a JMS Connection using ActiveMQConnectionFactory in Java\nDESCRIPTION: This snippet demonstrates how to create a JMS connection to an ActiveMQ Classic broker using the ActiveMQConnectionFactory. It instantiates the factory with a broker URL and then creates a connection. This avoids the need for JNDI setup. Requires the ActiveMQ client library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/uri-protocols.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://somehost:61616\");\nConnection connection = factory.createConnection();\n```\n\n----------------------------------------\n\nTITLE: Java: JMS API Package Update (javax.jms to jakarta.jms)\nDESCRIPTION: This snippet demonstrates the API namespace change from javax.jms to jakarta.jms when transitioning to Jakarta Messaging 3.1. This is a purely naming convention change and requires code adjustments for the package name only. It affects import statements for all JMS-related classes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms2.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport javax.jms.ConnectionFactory\nimport javax.jms.Message\nimport javax.jms...\n```\n\nLANGUAGE: java\nCODE:\n```\nimport jakarta.jms.ConnectionFactory\nimport jakarta.jms.Message\nimport jakarta.jms...\n```\n\n----------------------------------------\n\nTITLE: Default ActiveMQ Classic Configuration\nDESCRIPTION: This XML snippet shows the default ActiveMQ Classic configuration, including bean definitions for property placeholders, broker configuration, destination policies, management context, persistence adapter, system usage, transport connectors, and shutdown hooks. It uses Spring XML with an ActiveMQ Classic extension for common configurations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-xml-configuration.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans\n  xmlns=\"http://www.springframework.org/schema/beans\"\n  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <value>file:${activemq.conf}/credentials.properties</value>\n        </property>\n    </bean>\n\n    <!--\n        The <broker> element is used to configure the ActiveMQ Classic broker.\n    -->\n    <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\">\n\n        <!--\n            For better performances use VM cursor and small memory limit.\n            For more information, see:\n\n            http://activemq.apache.org/message-cursors.html\n\n            Also, if your producer is \"hanging\", it's probably due to producer flow control.\n            For more information, see:\n            http://activemq.apache.org/producer-flow-control.html\n        -->\n\n        <destinationPolicy>\n            <policyMap>\n              <policyEntries>\n                <policyEntry topic=\">\" producerFlowControl=\"true\">\n                    <!-- The constantPendingMessageLimitStrategy is used to prevent\n                         slow topic consumers to block producers and affect other consumers\n                         by limiting the number of messages that are retained\n                         For more information, see:\n\n                         http://activemq.apache.org/slow-consumer-handling.html\n\n                    -->\n                  <pendingMessageLimitStrategy>\n                    <constantPendingMessageLimitStrategy limit=\"1000\"/>\n                  </pendingMessageLimitStrategy>\n                </policyEntry>\n                <policyEntry queue=\">\" producerFlowControl=\"true\" memoryLimit=\"1mb\">\n                  <!-- Use VM cursor for better latency\n                       For more information, see:\n\n                       http://activemq.apache.org/message-cursors.html\n\n                  <pendingQueuePolicy>\n                    <vmQueueCursor/>\n                  </pendingQueuePolicy>\n                  -->\n                </policyEntry>\n              </policyEntries>\n            </policyMap>\n        </destinationPolicy>\n\n\n        <!--\n            The managementContext is used to configure how ActiveMQ Classic is exposed in\n            JMX. By default, ActiveMQ Classic uses the MBean server that is started by\n            the JVM. For more information, see:\n\n            http://activemq.apache.org/jmx.html\n        -->\n        <managementContext>\n            <managementContext createConnector=\"false\"/>\n        </managementContext>\n\n        <!--\n            Configure message persistence for the broker. The default persistence\n            mechanism is the KahaDB store (identified by the kahaDB tag).\n            For more information, see:\n\n            http://activemq.apache.org/persistence.html\n        -->\n        <persistenceAdapter>\n            <kahaDB directory=\"${activemq.data}/kahadb\"/>\n        </persistenceAdapter>\n\n\n          <!--\n            The systemUsage controls the maximum amount of space the broker will\n            use before slowing down producers. For more information, see:\n            http://activemq.apache.org/producer-flow-control.html\n            If using ActiveMQ Classic embedded - the following limits could safely be used:\n\n        <systemUsage>\n            <systemUsage>\n                <memoryUsage>\n                    <memoryUsage limit=\"20 mb\"/>\n                </memoryUsage>\n                <storeUsage>\n                    <storeUsage limit=\"1 gb\"/>\n                </storeUsage>\n                <tempUsage>\n                    <tempUsage limit=\"100 mb\"/>\n                </tempUsage>\n            </systemUsage>\n        </systemUsage>\n        -->\n          <systemUsage>\n            <systemUsage>\n                <memoryUsage>\n                    <memoryUsage limit=\"64 mb\"/>\n                </memoryUsage>\n                <storeUsage>\n                    <storeUsage limit=\"100 gb\"/>\n                </storeUsage>\n                <tempUsage>\n                    <tempUsage limit=\"50 gb\"/>\n                </tempUsage>\n            </systemUsage>\n        </systemUsage>\n\n        <!--\n            The transport connectors expose ActiveMQ Classic over a given protocol to\n            clients and other brokers. For more information, see:\n\n            http://activemq.apache.org/configuring-transports.html\n        -->\n        <transportConnectors>\n            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->\n            <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n            <transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n        </transportConnectors>\n\n        <!-- destroy the spring context on shutdown to stop jetty -->\n        <shutdownHooks>\n            <bean xmlns=\"http://www.springframework.org/schema/beans\" class=\"org.apache.activemq.hooks.SpringContextHook\" />\n        </shutdownHooks>\n\n    </broker>\n\n    <!--\n        Enable web consoles, REST and Ajax APIs and demos\n\n        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details\n    -->\n    <import resource=\"jetty.xml\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Sending to Queues and Topics with ActiveMQ Classic\nDESCRIPTION: This code snippet illustrates how to send a message to both queues and topics in a single operation using ActiveMQ Classic composite destinations. It creates an ActiveMQQueue with a combination of queue names and topic names, differentiated by the prefixes `queue://` and `topic://`. When a message is sent to this composite destination, it will be delivered to the specified queues and published to the specified topics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/composite-destinations.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// send to queues and topic one logical operation\nQueue queue = new ActiveMQQueue(\"FOO.A,topic://NOTIFY.FOO.A\");\nproducer.send(queue, someMessage);\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Configuration\nDESCRIPTION: This example demonstrates how to configure failover transport using a comma separated list of URLs. The failover transport will try each URL in random order to establish connection and reconnects automatically if connection fails. This is helpful for achieving High Availability (HA).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/uri-protocols.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nfailover:(tcp://foo:61699,tcp://bar:61617,tcp://whatnot:61698)\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Broker Redelivery with XML\nDESCRIPTION: This XML snippet demonstrates how to enable and configure the `redeliveryPlugin` in ActiveMQ Classic. It includes settings for fallback to dead-letter queue, sending to DLQ if maximum retries are exceeded, and specific redelivery policies for different destinations. The `schedulerSupport` attribute must be enabled on the broker for this feature to work.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<broker schedulerSupport=\"true\">\n        \n        <plugins>\n            <redeliveryPlugin fallbackToDeadLetter=\"true\" \n                              sendToDlqIfMaxRetriesExceeded=\"true\">\n                <redeliveryPolicyMap>\n                    <redeliveryPolicyMap>\n                        <redeliveryPolicyEntries>\n                            <!-- a destination specific policy -->\n                            <redeliveryPolicy queue=\"SpecialQueue\" \n                                              maximumRedeliveries=\"4\" \n                                              redeliveryDelay=\"10000\"/>\n                        </redeliveryPolicyEntries>\n                        \n                        <defaultEntry>\n                            <!-- the fallback policy for all other destinations -->\n                            <redeliveryPolicy maximumRedeliveries=\"4\" \n                                              initialRedeliveryDelay=\"5000\"\n                                              redeliveryDelay=\"10000\"/>\n                        </defaultEntry>\n                    </redeliveryPolicyMap>\n                </redeliveryPolicyMap>\n            </redeliveryPlugin>\n        </plugins>\n        \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring JAAS Authentication Plugin in ActiveMQ Classic XML\nDESCRIPTION: This snippet demonstrates how to configure the JAAS authentication plugin within the activemq.xml file.  It sets up the LDAPLoginModule for authentication and LDAPAuthorizationMap for authorization.  The configuration includes the LDAP connection details, search bases, and attribute mappings for topics and queues.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugins> \n  <!-- use JAAS to authenticate using the login.config file on the classpath to configure JAAS --> \n  <jaasAuthenticationPlugin configuration=\"LdapConfiguration\" /> \n  <!-- lets configure a destination based role/group authorization mechanism --> \n  <authorizationPlugin> \n    <map> \n      <bean xmlns=\"http://www.springframework.org/schema/beans\" id=\"lDAPAuthorizationMap\" class=\"org.apache.activemq.security.LDAPAuthorizationMap\"> \n        <property name=\"initialContextFactory\" value=\"com.sun.jndi.ldap.LdapCtxFactory\"/> \n        <property name=\"connectionURL\" value=\"ldap://ldap.acme.com:389\"/> \n        <property name=\"authentication\" value=\"simple\"/> \n        <property name=\"connectionUsername\" value=\"cn=mqbroker,ou=Services,dc=acme,dc=com\"/> \n        <property name=\"connectionPassword\" value=\"password\"/> \n        <property name=\"connectionProtocol\" value=\"s\"/> \n        <property name=\"topicSearchMatching\" value=\"cn={0},ou=Topic,ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=com\"/> \n        <property name=\"topicSearchSubtreeBool\" value=\"true\"/> \n        <property name=\"queueSearchMatching\" value=\"cn={0},ou=Queue,ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=com\"/> \n        <property name=\"queueSearchSubtreeBool\" value=\"true\"/> \n        <property name=\"adminBase\" value=\"(cn=admin)\"/> \n        <property name=\"adminAttribute\" value=\"member\"/> \n        <property name=\"adminAttributePrefix\" value=\"cn=\"/> \n        <property name=\"readBase\" value=\"(cn=read)\"/> \n        <property name=\"readAttribute\" value=\"member\"/> \n        <property name=\"readAttributePrefix\" value=\"cn=\"/> \n        <property name=\"writeBase\" value=\"(cn=write)\"/> \n        <property name=\"writeAttribute\" value=\"member\"/> \n        <property name=\"writeAttributePrefix\" value=\"cn=\"/> \n      </bean> \n    </map> \n  </authorizationPlugin> \n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Producing and Consuming Messages via ActiveMQ CLI\nDESCRIPTION: These commands demonstrate producing and consuming messages using the ActiveMQ Classic command-line tool. They require that the `${ACTIVEMQ_HOME}` environment variable is set to the ActiveMQ Classic installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n${ACTIVEMQ_HOME}/bin/activemq producer\n${ACTIVEMQ_HOME}/bin/activemq consumer\n```\n\n----------------------------------------\n\nTITLE: EmbeddedActiveMQBroker JUnit Rule (Java)\nDESCRIPTION: This snippet demonstrates using the `EmbeddedActiveMQBroker` JUnit Rule to automatically start and stop an embedded ActiveMQ Classic broker for each test. Add this to the test class to simplify broker management.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Rule\npublic EmbeddedActiveMQBroker broker = new EmbeddedActiveMQBroker();\n```\n\n----------------------------------------\n\nTITLE: Connecting with Failover Transport in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to configure automatic reconnection to multiple JMS brokers using the `failover:` protocol in ActiveMQ Classic. It specifies a comma-separated list of broker URLs, enabling the client to automatically reconnect to another available broker if one goes down.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-configure-automatic-reconnection.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfailover:tcp://host1:port1,tcp://host2:port2\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker Transport Connector Configuration\nDESCRIPTION: This XML snippet shows how to configure the ActiveMQ Classic broker's transport connector URL to set the `wireFormat.maxInactivityDuration` and `wireFormat.maxInactivityDurationInitalDelay` parameters. These parameters control the timeout and initial delay for inactivity monitoring on the broker side. The snippet is placed inside the `<transportConnectors>` section of the ActiveMQ Classic configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-inactivitymonitor.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n  <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?wireFormat.maxInactivityDuration=30000&amp;wireFormat.maxInactivityDurationInitalDelay=10000\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Camel Context Configuration\nDESCRIPTION: Defines a basic Camel context within ActiveMQ Classic's XML configuration file.  It shows a simple route from activemq:example.A to activemq:example.B.  This configuration lacks security credentials and is not suitable for secure environments.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ** Lets deploy some Enterprise Integration Patterns inside the ActiveMQ Classic Message Broker ** For more details see ** ** http://activemq.apache.orgFeatures/enterprise-integration-patterns.md -->\n<camelContext id=\"camel\" xmlns=\"http://activemq.apache.org/camel/schema/spring\">\n  <package>org.foo.bar</package>\n  <route> \n    <from uri=\"activemq:example.A\"/>\n    <to uri=\"activemq:example.B\"/>\n  </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Limit via Connection URI - All Consumers\nDESCRIPTION: This snippet demonstrates how to configure the prefetch limit for all consumer types using the connection URI.  It sets the `jms.prefetchPolicy.all` parameter to 50, affecting all consumers connected via this URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/what-is-the-prefetch-limit-for.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntcp://localhost:61616?jms.prefetchPolicy.all=50\n```\n\n----------------------------------------\n\nTITLE: Generating Broker Certificate using Keytool\nDESCRIPTION: This command generates a certificate for the broker using the keytool utility. It creates a keystore named broker.ks with an alias 'broker' and uses the RSA algorithm.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -alias broker -keyalg RSA -keystore broker.ks\n```\n\n----------------------------------------\n\nTITLE: Message Authorization Policy Configuration\nDESCRIPTION: Configures a custom message authorization policy within the ActiveMQ Classic broker configuration.  It defines a bean that points to a custom Java class implementing the message authorization logic.  Requires a custom Java class implementing `org.apache.activemq.security.MessageAuthorizationPolicy`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ..\n  <messageAuthorizationPolicy>\n    <bean class=\"com.acme.MyMessageAuthorizationPolicy\" xmlns=\"\"/>\n  </messageAuthorizationPolicy>\n  ..\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenWire Transport with Status Monitor\nDESCRIPTION: This snippet demonstrates how to configure the OpenWire transport in ActiveMQ Classic with the `enableStatusMonitor` option enabled. The status monitor will detect blocked connections. The uri attribute configures the bind address for the transport.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-version-5-transports.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n   <!-– ... -->\n\n   <transportConnectors>\n     <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" enableStatusMonitor=\"true\"/> \n   </<transportConnectors>\n\n   <!-– ... -->\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Setting Message Delivery Mode to Persistent in JMS (Java)\nDESCRIPTION: This code snippet demonstrates how to set the delivery mode of a JMS message to persistent, ensuring durability.  It uses the `setDeliveryMode()` method of the `MessageProducer` interface. The `DeliveryMode.PERSISTENT` constant ensures that messages are stored to disk and survive broker restarts.  Dependencies include the `javax.jms` package.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-make-messages-durable.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = ...;\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\n```\n\n----------------------------------------\n\nTITLE: Combine CRON and Repeat Scheduling (Java)\nDESCRIPTION: Combines CRON scheduling with repeat scheduling properties (AMQ_SCHEDULED_DELAY, AMQ_SCHEDULED_PERIOD, AMQ_SCHEDULED_REPEAT). The scheduler will deliver the message according to the CRON expression, and repeat delivery as configured for each CRON trigger.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/delay-and-schedule-message-delivery.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"test msg\");\nmessage.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, \"0 * * * *\");\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 1000);\nmessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, 9);\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Purge Messages with Message Selector ActiveMQ Admin\nDESCRIPTION: This command deletes messages from destinations matching 'FOO.*' that satisfy the JMS message selector criteria. The selector filters based on JMSMessageID (wildcard matching '*:10') and JMSPriority (>5). The entire selector expression is enclosed in double quotes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin purge --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.*\n```\n\n----------------------------------------\n\nTITLE: Broker URI Example\nDESCRIPTION: This example demonstrates how to start an ActiveMQ Classic broker, accept connections on port 61616, establish a network connection to remotehost:61616, disable persistence, and enable JMX.  This configures the broker to use TCP transport on localhost and static network connection to a remote host, while disabling persistence and enabling JMX.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-uri.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbroker:(tcp://localhost:61616,network:static:tcp://remotehost:61616)?persistent=false&useJmx=true\n```\n\n----------------------------------------\n\nTITLE: Placing Non-Persistent Messages on DLQ in ActiveMQ Classic (XML)\nDESCRIPTION: This XML configuration shows how to configure ActiveMQ Classic to place non-persistent messages on the dead-letter queue if they cannot be delivered. The `processNonPersistent` property is set to `true` on the dead-letter strategy.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  \n  <destinationPolicy>\n   <policyMap>\n     <policyEntries>\n       <!-- Set the following policy on all queues using the '>' wildcard -->\n       <policyEntry queue=\">\">\n         <!-- \n           Tell the dead letter strategy to also place non-persisted messages \n           onto the dead-letter queue if they can't be delivered.\n         -->\n         <deadLetterStrategy>\n           <sharedDeadLetterStrategy processNonPersistent=\"true\" />\n         </deadLetterStrategy>\n       </policyEntry>\n     </policyEntries>\n   </policyMap>\n  </destinationPolicy>\n  \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Enabling ShiroPlugin with Shiro INI Configuration in ActiveMQ Classic using Spring XML\nDESCRIPTION: This XML snippet demonstrates how to enable the ShiroPlugin in ActiveMQ Classic by defining it as a Spring bean within the broker's plugins section. It includes an embedded Shiro ini configuration for defining users, roles, and their respective permissions. It assumes a simple/small set of static users that access ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:amq=\"http://activemq.apache.org/schema/core\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n\n    <broker xmlns=\"http://activemq.apache.org/schema/core\" ... other attributes here ...>\n        <plugins>\n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <property name=\"iniConfig\"><value>\n\n                [main]\n                # Shiro object graph configuration here if desired/necessary\n\n                [users]\n                # users section format:\n                #\n                # username = password [, assignedRole1, assignedRole2, ..., assignedRoleN]\n                #\n                # for example:\n                #\n                # scott = tiger, advisory, users, administrators\n                #\n                # Roles and permissions assigned to roles are defined in the [roles] section\n                # below. By transitive association, any user assigned a role is granted the\n                # role's permissions.\n                \n                # ActiveMQ Classic System User\n                # needed for in-VM/local connections when authentication is enabled:\n                system = manager, system\n                \n                # Other users here.  You should almost always add the \\`advisory\\` role for each\n                # user to make your life easy!  See the [roles] comments below for more info.\n                # jsmith = jsmithsPassword, advisory\n                # djones = djonesPassword, advisory, ...\n                # etc.\n\n                [roles]\n                # roles section format:\n                #\n                # roleName = wildcardPermission1, wildcardPermission2, ..., wildcardPermissionN\n                #\n                # The 'system' role is assigned all permissions (*).  Be careful when assigning\n                # this to actual users other than then system user:\n                system = *\n\n                # Full access rights should generally be given to the ActiveMQ.Advisory.*\n                # destinations because by default an ActiveMQConnection uses advisory topics to\n                # get early knowledge of temp destination creation and deletion. For more info:\n                #\n                #   http://activemq.apache.org/Features/security.md\n                #\n                # So we create an 'advisory' role here with a wildcard/catch-all permissions\n                # for all advisory topics.  To make your life easy, ensure you assign this to\n                # any/all users in the [users] section above, e.g.\n                #\n                #   jsmith = jsmithsPassword, advisory, ...\n\n                advisory = topic:ActiveMQ.Advisory*\n\n                </value></property>\n            </bean>\n        </plugins>\n    </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring KahaDB Persistence Adapter in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures the KahaDB persistence adapter to store broker data in a shared directory. This allows multiple brokers to access the same data, enabling a master/slave setup with failover capabilities. The `directory` attribute specifies the location of the shared directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shared-file-system-master-slave.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n  <kahaDB directory=\"/sharedFileSystem/sharedBrokerData\"/>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: SSL Transport URI Example in ActiveMQ Classic\nDESCRIPTION: This example demonstrates a basic SSL transport URI for ActiveMQ Classic, illustrating the use of the `ssl://` scheme and a transport option `trace`. It showcases how to configure a connection to an ActiveMQ Classic broker using SSL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?trace=false\n```\n\n----------------------------------------\n\nTITLE: Encrypt Password with Algorithm using ActiveMQ CLI (Bash)\nDESCRIPTION: This command encrypts a password using the ActiveMQ command-line tool, specifying the encryption algorithm. It takes the password to encrypt via `--input`, a secret with `--password`, and the encryption algorithm using `--algorithm`. The encrypted password will be printed to standard output.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/activemq encrypt --password activemq --input mypassword --algorithm PBEWITHHMACSHA256ANDAES_256\n...\nEncrypted text: h/cWj/ZZelMt3Y7NSzUG2vHYSnfWK561qjNg9Ywyr9yT72ru7pR4IEUnHLIdLSOb\n```\n\n----------------------------------------\n\nTITLE: Setting Message Time-To-Live (TTL) via send() method in JMS\nDESCRIPTION: This code shows how to set the message expiration individually for each message sent using the `send()` method of the `MessageProducer` interface in JMS. The TTL value is passed as a parameter during the send operation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-set-the-message-expiration.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nproducer.send(Destination, Message, int, int, long)\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Explicit Content Type - Bash\nDESCRIPTION: This `curl` command sends a message to an ActiveMQ queue with an explicitly specified `Content-Type` header. This resolves the issue where the servlet incorrectly reads the message body if the `body` parameter is missing. `-XPOST` ensures the POST method is used.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:admin -d \"hello world $(date)\" -H \"Content-Type: text/plain\" -XPOST http://localhost:8161/api/message?destination=queue://abc.def\n```\n\n----------------------------------------\n\nTITLE: Delay Message Delivery in ActiveMQ Classic (Java)\nDESCRIPTION: Schedules a message for delivery after a specified delay using the AMQ_SCHEDULED_DELAY message property. The delay is set in milliseconds. Requires ActiveMQ Classic and JMS libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/delay-and-schedule-message-delivery.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"test msg\");\nlong time = 60 * 1000;\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Using PooledConnectionFactory with JmsTemplate\nDESCRIPTION: This XML snippet demonstrates how to configure a PooledConnectionFactory with JmsTemplate for efficient JMS resource management in Spring. The PooledConnectionFactory pools connections, sessions, and producers to improve performance.  The destroy-method=\"stop\" ensures proper shutdown of the connection factory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/spring-support.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<!-- a pooling based JMS provider -->\n<bean id=\"jmsFactory\" class=\"org.apache.activemq.pool.PooledConnectionFactory\" destroy-method=\"stop\">\n  <property name=\"connectionFactory\">\n    <bean class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n      <property name=\"brokerURL\">\n        <value>tcp://localhost:61616</value>\n      </property>\n    </bean>\n  </property>\n</bean>\n\n<!-- Spring JMS Template -->\n<bean id=\"myJmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n  <property name=\"connectionFactory\">\n    <ref local=\"jmsFactory\"/>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO+SSL Transport in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the NIO SSL transport within the broker's XML configuration file. It involves specifying the transportConnector with the 'nio+ssl' name and using the 'nio+ssl://' URI scheme. This configuration allows a large number of SSL clients to connect to a single broker instance, but is only available on the server side.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-transports.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio+ssl\" uri=\"nio+ssl://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Example for Single Broker Connection\nDESCRIPTION: Illustrates a simple Failover transport configuration where the client only needs to be configured with one broker. When the `updateClusterClients` option is enabled on the broker, the client will be automatically informed of other available brokers in the cluster. This simplifies initial configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nfailover:(tcp://primary:61616)\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Classic Broker with Broker XBean URI\nDESCRIPTION: This command starts an ActiveMQ Classic broker using a Broker XBean URI to load configuration from an XML file. The XML file allows for custom configuration of the Message Broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console xbean:foo.xml\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Specific XSD Version\nDESCRIPTION: This XML snippet demonstrates how to configure Spring beans with a specific version of the ActiveMQ Classic XSD.  It includes the necessary namespaces and schema locations for both Spring beans and ActiveMQ Classic configuration. This configuration requires Spring and a specific ActiveMQ Classic version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:amq=\"http://activemq.org/config/1.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n        http://activemq.org/config/1.0 http://activemq.apache.org/schema/core/activemq-core-4.1.2.xsd\">\n```\n\n----------------------------------------\n\nTITLE: Schedule Message Delivery with CRON (Java)\nDESCRIPTION: Schedules a message for delivery based on a CRON expression using the AMQ_SCHEDULED_CRON message property.  Requires ActiveMQ Classic and JMS libraries.  CRON scheduling takes precedence over delay based scheduling.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/delay-and-schedule-message-delivery.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"test msg\");\nmessage.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, \"0 * * * *\");\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Discarding DLQ Plugin - Drop Specific Destinations (XML)\nDESCRIPTION: This XML configuration shows how to configure the DiscardingDLQBrokerPlugin to drop messages only from specific destinations.  The `dropOnly` attribute specifies a space-delimited list of destination names, and the `reportInterval` attribute configures the frequency of outputting the number of dropped messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<beans> \n  <broker>\n    <plugins>\n      <discardingDLQBrokerPlugin dropOnly=\"MY.EXAMPLE.TOPIC.29 MY.EXAMPLE.QUEUE.87\" reportInterval=\"1000\"/>\n    </plugins>\n  </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Journal Persistence (AMQ 4.x)\nDESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ broker for JDBC persistence with journaling in AMQ 4.x. It shows the default configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n  <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"../activemq-data\"/> \n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Subscription Strategy\nDESCRIPTION: This snippet demonstrates how to configure the subscription strategy for MQTT clients.  Setting `transport.subscriptionStrategy` to `mqtt-virtual-topic-subscriptions` maps QoS=1 and QoS=2 subscriptions to JMS virtual topics, improving scalability.  Requires ActiveMQ Classic and proper URI formatting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"mqtt\" uri=\"mqtt://localhost:1883?transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions\"/>\n```\n\n----------------------------------------\n\nTITLE: Destination Policy Configuration with conditionalNetworkBridgeFilterFactory - XML\nDESCRIPTION: This snippet configures a destination policy with a `conditionalNetworkBridgeFilterFactory` for a queue. Setting `replayWhenNoConsumers` to `true` allows messages to be replayed over the network bridge when no consumers are present.  `enableAudit` should be set to `false` when using `replayWhenNoConsumers=true` for versions < 5.9 to prevent duplicate detection issues.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n    <destinationPolicy>\n      <policyMap>\n        <policyEntries>\n          <policyEntry queue=\"TEST.>\" enableAudit=\"false\">\n            <networkBridgeFilterFactory>\n              <conditionalNetworkBridgeFilterFactory replayWhenNoConsumers=\"true\"/>\n            </networkBridgeFilterFactory>\n          </policyEntry>\n        </policyEntries>\n      </policyMap>\n    </destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Queue in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates configuring a composite queue in ActiveMQ. Messages sent to the virtual queue \"MY.QUEUE\" are forwarded to both the physical queue \"FOO\" and the topic \"BAR\". Subscribers can only consume messages from \"FOO\" and \"BAR\" unless `forwardOnly` is set to `false`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-destinations.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors>\n <virtualDestinationInterceptor> \n   <virtualDestinations> \n     <compositeQueue name=\"MY.QUEUE\">\n       <forwardTo>\n         <queue physicalName=\"FOO\" /> \n         <topic physicalName=\"BAR\" />\n       </forwardTo>\n     </compositeQueue>\n   </virtualDestinations>\n </virtualDestinationInterceptor>\n</destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: Creating an Exclusive Consumer in ActiveMQ using Java\nDESCRIPTION: This code snippet demonstrates how to create an exclusive consumer in ActiveMQ using Destination Options. The `consumer.exclusive=true` option ensures that only one consumer receives messages from the queue, maintaining message order. It requires the ActiveMQ client library to be included in the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/exclusive-consumer.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nqueue = new ActiveMQQueue(\"TEST.QUEUE?consumer.exclusive=true\");\nconsumer = session.createConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Decrypt Password using ActiveMQ CLI (Bash)\nDESCRIPTION: This command decrypts an encrypted password using the ActiveMQ command-line tool. It takes the encrypted password as input using the `--input` argument and the secret key used for encryption using the `--password` argument. The decrypted output is then displayed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/activemq decrypt  --password activemq --input eeWjNyX6FY8Fjp3E+F6qTytV11bZItDp\n...\nDecrypted text: mypassword\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO Transport in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to configure the NIO transport within the broker's XML configuration file. It involves specifying the transportConnector with the 'nio' name and using the 'nio://' URI scheme. This allows clients to connect using the NIO transport, potentially providing better performance than TCP.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-transports.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio\" uri=\"nio://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Broker Configuration (JDBC Master Slave)\nDESCRIPTION: This XML configuration shows how to configure an ActiveMQ Classic broker to use JDBC Master Slave. It defines a broker with a JDBC persistence adapter and a transport connector.  The `jdbcPersistenceAdapter` uses the database for persistence and the master/slave election.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-master-slave.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans>\n\n  <!-- Allows us to use system properties as variables in this configuration file -->\n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n  \n  <broker xmlns=\"http://activemq.apache.org/schema/core\">\n\n    <destinationPolicy>\n      <policyMap><policyEntries>\n        \n          <policyEntry topic=\"FOO.>\">\n            <dispatchPolicy>\n              <strictOrderDispatchPolicy />\n            </dispatchPolicy>\n            <subscriptionRecoveryPolicy>\n              <lastImageSubscriptionRecoveryPolicy />\n            </subscriptionRecoveryPolicy>\n          </policyEntry>\n\n      </policyEntries></policyMap>\n    </destinationPolicy>\n  \n  \n    <persistenceAdapter>\n        <jdbcPersistenceAdapter dataDirectory=\"${activemq.base}/activemq-data\"/>\n\n        <!-- \n        <jdbcPersistenceAdapter dataDirectory=\"activemq-data\" dataSource=\"#oracle-ds\"/>\n        --> \n    </persistenceAdapter>\n  \n    <transportConnectors>\n       <transportConnector name=\"default\" uri=\"tcp://localhost:61616\"/>\n    </transportConnectors>\n    \n  </broker>\n  \n  <!--  This xbean configuration file supports all the standard spring xml configuration options -->\n  \n  <!-- Postgres DataSource Sample Setup -->\n  <!-- \n  <bean id=\"postgres-ds\" class=\"org.postgresql.ds.PGPoolingDataSource\">\n    <property name=\"serverName\" value=\"localhost\"/>\n    <property name=\"databaseName\" value=\"activemq\"/>\n    <property name=\"portNumber\" value=\"0\"/>\n    <property name=\"user\" value=\"activemq\"/>\n    <property name=\"password\" value=\"activemq\"/>\n    <property name=\"dataSourceName\" value=\"postgres\"/>\n    <property name=\"initialConnections\" value=\"1\"/>\n    <property name=\"maxConnections\" value=\"10\"/>\n  </bean>\n  -->\n  \n  <!-- MySql DataSource Sample Setup -->\n  <!-- \n  <bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n    <property name=\"url\" value=\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"/>\n    <property name=\"username\" value=\"activemq\"/>\n    <property name=\"password\" value=\"activemq\"/>\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n  </bean>\n  -->  \n   \n  <!-- Oracle DataSource Sample Setup -->\n  <!--\n  <bean id=\"oracle-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"oracle.jdbc.driver.OracleDriver\"/>\n    <property name=\"url\" value=\"jdbc:oracle:thin:@localhost:1521:AMQDB\"/>\n    <property name=\"username\" value=\"scott\"/>\n    <property name=\"password\" value=\"tiger\"/>\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n  </bean>\n  -->\n      \n  <!-- Embedded Derby DataSource Sample Setup -->\n  <!-- \n  <bean id=\"derby-ds\" class=\"org.apache.derby.jdbc.EmbeddedDataSource\">\n    <property name=\"databaseName\" value=\"derbydb\"/>\n    <property name=\"createDatabase\" value=\"create\"/>\n  </bean>\n  -->  \n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring System Usage Limits (XML)\nDESCRIPTION: This XML snippet shows how to configure system usage limits for memory, store, and temporary storage in ActiveMQ Classic.  The broker uses these limits to determine when to slow down producers to prevent resource exhaustion. Configuration occurs in the `activemq.xml` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/producer-flow-control.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<systemUsage>\n  <systemUsage>\n    <memoryUsage>\n      <memoryUsage limit=\"64 mb\" />\n    </memoryUsage>\n    <storeUsage>\n      <storeUsage limit=\"100 gb\" />\n    </storeUsage>\n    <tempUsage>\n      <tempUsage limit=\"10 gb\" />\n    </tempUsage>\n  </systemUsage>\n</systemUsage>\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized Acknowledgements using Connection URI in ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates how to enable optimized acknowledgements in ActiveMQ Classic using a Connection URI. The `jms.optimizeAcknowledge=true` parameter is appended to the connection URI to enable the feature. This approach configures the acknowledgement optimization during connection factory creation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/optimized-acknowledgement.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncf = new ActiveMQConnectionFactory(\"tcp://locahost:61616?jms.optimizeAcknowledge=true\");\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Configuration Syntax\nDESCRIPTION: Defines the general syntax for configuring the Failover transport in ActiveMQ Classic. It shows two possible formats: one with transport options and nested URI options, and another with a simple comma-separated list of URIs.  It's crucial for setting up reliable connections to brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nfailover:(uri1,...,uriN)?transportOptions&nestedURIOptions\n```\n\nLANGUAGE: none\nCODE:\n```\nfailover:uri1,...,uriN\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Network Connector in ActiveMQ\nDESCRIPTION: This code shows how to configure a static network connector in ActiveMQ.  With static networks, the broker forwards messages to the remote side regardless of whether there are consumers there. This also requires setting `staticBridge` to `true`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"static:(tcp://host)\" staticBridge=\"true\">\n        <staticallyIncludedDestinations>\n      \t\t<queue physicalName=\"always.include.queue\"/>\n        </staticallyIncludedDestinations>\n</networkConnector>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Slave Broker in ActiveMQ with masterConnectorURI\nDESCRIPTION: This XML configuration snippet demonstrates how to define a broker as a slave using the `masterConnectorURI` attribute. It also shows setting the `shutdownOnMasterFailure` property to determine whether the slave should shut down if the master fails. It includes persistence adapter and transport connector configurations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pure-master-slave.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker masterConnectorURI=\"tcp://masterhost:62001\" shutdownOnMasterFailure=\"false\">\n  <persistenceAdapter>\n      <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"${activemq.base}/data/broker2\" />\n    </persistenceAdapter>\n\n    <transportConnectors>\n\t  <transportConnector uri=\"tcp://slavehost:61616\"/>\n   </transportConnectors>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Jasypt Configuration with Environment Variable (XML)\nDESCRIPTION: This XML snippet configures Jasypt to decrypt passwords. It uses environment variables (`ACTIVEMQ_ENCRYPTION_PASSWORD`) for the encryption key. It defines a `configurationEncryptor` bean which reads password from environment variable and then a `propertyConfigurer` bean that decrypts properties from a properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"environmentVariablesConfiguration\" class=\"org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig\">\n  <property name=\"algorithm\" value=\"PBEWithMD5AndDES\" />\n  <property name=\"passwordEnvName\" value=\"ACTIVEMQ_ENCRYPTION_PASSWORD\" />\n</bean>\n                                                                     \n<bean id=\"configurationEncryptor\" class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\">\n  <property name=\"config\" ref=\"environmentVariablesConfiguration\" />\n</bean> \n    \n<bean id=\"propertyConfigurer\" class=\"org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer\"> \n  <constructor-arg ref=\"configurationEncryptor\" /> \n  <property name=\"location\" value=\"file:${activemq.base}/conf/credentials-enc.properties\"/> \n</bean>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker XML Configuration Example\nDESCRIPTION: This XML snippet provides an example configuration for an ActiveMQ Classic broker. It defines the broker with JMX enabled, a journaledJDBC persistence adapter, a transport connector using discovery over TCP, and a network connector using multicast. The xmlns attribute specifies the XML namespace.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-brokers.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker useJmx=\"true\">\n  \n    <persistenceAdapter>\n      <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"../data\"/>\n    </persistenceAdapter>\n  \n    <transportConnectors>\n      <transportConnector uri=\"discovery:tcp://localhost:61616\"/>\n    </transportConnectors>\n    \n    <networkConnectors>\n      <networkConnector uri=\"multicast\"/>\n    </networkConnectors>\n    \n  </broker>\n  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX Remote Access (Windows)\nDESCRIPTION: This snippet shows how to configure the ActiveMQ Classic startup script (Windows) to enable JMX remote access and password protection. It sets the `ACTIVEMQ_SUNJMX_START` environment variable with the necessary JVM options to specify the JMX remote port, disable SSL, and point to the access and password files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nACTIVEMQ_SUNJMX_START=-Dcom.sun.management.jmxremote.port=1616 -Dcom.sun.management.jmxremote.ssl=false \\\n  -Dcom.sun.management.jmxremote.password.file=%ACTIVEMQ_BASE%/conf/jmx.password \\\n  -Dcom.sun.management.jmxremote.access.file=%ACTIVEMQ_BASE%/conf/jmx.access\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Per-Destination Persistence\nDESCRIPTION: This XML snippet shows how to enable automatic per-destination persistence in ActiveMQ Classic using the filteredKahaDB adapter. Setting `perDestination=\"true\"` on the catch-all filteredKahaDB entry assigns each matching destination its own KahaDB instance, allowing for independent persistence configurations for each destination. The root element is mKahaDB and its filteredPersistenceAdapters are filteredKahaDB.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kahadb.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"broker\">\n\n <persistenceAdapter>\n  <mKahaDB directory=\"${activemq.base}/data/kahadb\">\n    <filteredPersistenceAdapters>\n      <!-- kahaDB per destinations -->\n      <filteredKahaDB perDestination=\"true\">\n        <persistenceAdapter>\n          <kahaDB journalMaxFileLength=\"32mb\"/>\n        </persistenceAdapter>\n      </filteredKahaDB>\n    </filteredPersistenceAdapters>\n  </mKahaDB>\n </persistenceAdapter>\n\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configure Startup Destinations XML - ActiveMQ Classic\nDESCRIPTION: This XML snippet configures a queue named 'FOO.BAR' and a topic named 'SOME.TOPIC' to be available at ActiveMQ Classic startup. These destinations are defined within the <destinations> element of the broker configuration. The broker XML namespace is defined at the top level.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configure-startup-destinations.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/core\">\n  <destinations>\n    <queue physicalName=\"FOO.BAR\" />\n    <topic physicalName=\"SOME.TOPIC\" />\n  </destinations>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Connection using Zeroconf\nDESCRIPTION: This XML snippet shows how to use Zeroconf to discover available ActiveMQ Classic brokers.  The brokerURL property is set to a Zeroconf address, allowing the client to dynamically locate brokers in the development environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/spring-support.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"jmsFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n  <property name=\"brokerURL\">\n    <value>zeroconf://_activemq.broker.development.</value>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Repeated Message Delivery with Delay in ActiveMQ using NMS (C#)\nDESCRIPTION: This code snippet shows how to schedule a message for repeated delivery with an initial delay and a period between each re-delivery using the `AMQ_SCHEDULED_DELAY`, `AMQ_SCHEDULED_PERIOD`, and `AMQ_SCHEDULED_REPEAT` properties.  It sets the initial delay to 30 seconds, the period between deliveries to 10 seconds, and the number of repetitions to 9. The ActiveMQ broker must have scheduler support enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/delay-and-schedule-message-feature.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nlong delay = 30 * 1000;\nlong period = 10 * 1000;\nint repeat = 9;\nmessage.Properties[\"AMQ_SCHEDULED_DELAY\"] = delay;\nmessage.Properties[\"AMQ_SCHEDULED_PERIOD\"] = period;\nmessage.Properties[\"AMQ_SCHEDULED_REPEAT\"] = repeat;\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Jolokia Security Policy - XML\nDESCRIPTION: This XML snippet defines the default Jolokia security policy for ActiveMQ. It enforces CORS checks and denies access to sensitive MBeans like `DiagnosticCommand` and `HotSpotDiagnostic` to prevent unauthorized access and potential security vulnerabilities.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<restrict>\n\n  <!-- Enforce that an Origin/Referer header is present to prevent CSRF -->\n  <cors>\n    <strict-checking/>\n  </cors>\n\n  <!-- deny calling operations or getting attributes from these mbeans -->\n  <deny>\n    <mbean>\n      <name>com.sun.management:type=DiagnosticCommand</name>\n      <attribute>*</attribute>\n      <operation>*</operation>\n    </mbean>\n    <mbean>\n      <name>com.sun.management:type=HotSpotDiagnostic</name>\n      <attribute>*</attribute>\n      <operation>*</operation>\n    </mbean>\n  </deny>\n\n</restrict>\n```\n\n----------------------------------------\n\nTITLE: Schedule Repeated Message Delivery (Java)\nDESCRIPTION: Schedules a message for repeated delivery with an initial delay, a period between deliveries, and a number of repetitions using AMQ_SCHEDULED_DELAY, AMQ_SCHEDULED_PERIOD, and AMQ_SCHEDULED_REPEAT message properties.  All times are in milliseconds.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/delay-and-schedule-message-delivery.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"test msg\");\nlong delay = 30 * 1000;\nlong period = 10 * 1000;\nint repeat = 9;\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);\nmessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Topics in ActiveMQ\nDESCRIPTION: This XML snippet configures ActiveMQ to treat all topics as virtual topics.  It defines a virtual destination interceptor that maps all topics (using the \">\" wildcard) to consumer queues with the prefix \"VirtualTopicConsumers.*.\". The selectorAware attribute is set to false, meaning all messages will be dispatched to the queues regardless of existing subscribers' selectors.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-destinations.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors> \n  <virtualDestinationInterceptor> \n    <virtualDestinations> \n      <virtualTopic name=\">\" prefix=\"VirtualTopicConsumers.*.\" selectorAware=\"false\"/>   \n    </virtualDestinations>\n  </virtualDestinationInterceptor> \n</destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Send at Connection Level in ActiveMQ Classic\nDESCRIPTION: This code snippet shows how to enable asynchronous message sending at the `ActiveMQConnection` level. Setting `useAsyncSend` to `true` at the connection level overrides any configuration set on the connection factory. This allows you to configure asynchronous sends for specific connections.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/async-sends.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n((ActiveMQConnection)connection).setUseAsyncSend(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring a CompositeTopic on Remote Broker - XML\nDESCRIPTION: This snippet configures a CompositeTopic on the Remote Broker.  Messages sent to the 'include.bar' topic are forwarded to the 'include.bar.forward' queue. The `forwardOnly` attribute set to 'false' means that consumers directly subscribed to 'include.bar' will also receive the messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<compositeTopic name=\"include.bar\" forwardOnly=\"false\">\n    <forwardTo>\n        <queue physicalName=\"include.bar.forward\" />\n    </forwardTo>\n</compositeTopic >\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hostname Validation Configuration in ActiveMQ Classic\nDESCRIPTION: These examples demonstrate how to configure client-side hostname validation using `socket.verifyHostName` or `verifyHostName`. When enabled, the server certificate's CN will be compared to the server hostname to verify they match during SSL connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?socket.verifyHostName=false\n```\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?verifyHostName=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Broker URLs in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to specify a list of URLs to connect to multiple message brokers in ActiveMQ Classic. The URLs are separated by commas and prefixed with 'list:'. The JMS client will attempt to connect to each URL in random order until a connection is established.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-connect-to-one-of-a-number-of-message-brokers.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlist:tcp://localhost:61699,tcp://localhost:61617,tcp://localhost:61698\n```\n\n----------------------------------------\n\nTITLE: NetworkConnector Configuration with Destinations - XML\nDESCRIPTION: This snippet shows an example configuration for a NetworkConnector, including dynamicallyIncludedDestinations, excludedDestinations, and staticallyIncludedDestinations. It illustrates how to define which queues and topics should always be included, dynamically included, or excluded from forwarding.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors>\n      <networkConnector uri=\"static:(tcp://localhost:61617)\"\n         name=\"bridge\"\n         conduitSubscriptions=\"true\"\n         decreaseNetworkConsumerPriority=\"false\">\n      \t<dynamicallyIncludedDestinations>\n      \t\t<queue physicalName=\"include.test.foo\"/>\n      \t\t<topic physicalName=\"include.test.bar\"/>\n      \t</dynamicallyIncludedDestinations>\n      \t<excludedDestinations>\n      \t\t<queue physicalName=\"exclude.test.foo\"/>\n      \t\t<topic physicalName=\"exclude.test.bar\"/>\n      \t</excludedDestinations>\n        <staticallyIncludedDestinations>\n      \t\t<queue physicalName=\"always.include.queue\"/>\n      \t\t<topic physicalName=\"always.include.topic\"/>\n      \t</staticallyIncludedDestinations>\n      </networkConnector>\n    </networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Message Prefetch Size\nDESCRIPTION: This snippet shows how to change the default prefetch size for MQTT subscriptions. The `transport.activeMQSubscriptionPrefetch` parameter allows adjusting the number of messages prefetched by the JMS-like consumer created for each MQTT client.  Requires ActiveMQ Classic and proper URI formatting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"mqtt\" uri=\"mqtt://localhost:1883?transport.activeMQSubscriptionPrefetch=32766\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionFactory JNDI Resource in Tomcat (Context.xml)\nDESCRIPTION: This XML snippet shows how to configure a ConnectionFactory resource in Tomcat's context.xml file for ActiveMQ Classic. It uses the JNDIReferenceFactory to create the ConnectionFactory and specifies the broker URL, broker name and whether to use an embedded broker. This allows applications to look up the ConnectionFactory via JNDI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tomcat.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Context ...>\n  ...\n  <Resource name=\"jms/ConnectionFactory\" auth=\"Container\"\n            type=\"org.apache.activemq.ActiveMQConnectionFactory\"/>\n  <ResourceParams name=\"jms/ConnectionFactory\">\n    <parameter>\n      <name>factory</name>\n      <value>org.activemq.jndi.JNDIReferenceFactory</value>\n    </parameter>\n    <parameter>\n      <name>brokerURL</name>\n      <value>vm://localhost</value>\n    </parameter>\n    <parameter>\n      <name>brokerName</name>\n      <value>LocalActiveMQBroker</value>\n    </parameter>\n    <parameter>\n      <name>useEmbeddedBroker</name>\n      <value>true</value>\n    </parameter>\n  </ResourceParams>\n  ...\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Wire Protocols (XML)\nDESCRIPTION: This XML snippet configures the AUTO transport to enable only OpenWire and STOMP protocols. It uses the `auto.protocols` property to specify the allowed protocols as a comma-separated list.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto\" uri=\"auto://localhost:5671?auto.protocols=default,stomp\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO Transport in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to configure the NIO transport in an ActiveMQ Classic broker using XML configuration. The NIO transport uses Java's New I/O package for potentially better performance. The uri attribute specifies the address and port to bind to.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-version-5-transports.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio\" uri=\"nio://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Activating decreaseNetworkConsumerPriority in NetworkConnector - XML\nDESCRIPTION: This snippet configures a NetworkConnector with the `decreaseNetworkConsumerPriority` attribute set to `true`. This helps to prioritize local consumers over network consumers, reducing the number of advisory messages and potentially improving performance.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n    <networkConnectors>\n      <networkConnector uri=\"static:(tcp://mybroker:61616)\" decreaseNetworkConsumerPriority=\"true\" />\n    </networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Threads in ActiveMQ Classic XML Configuration\nDESCRIPTION: This XML snippet shows how to enable Virtual Threads in the ActiveMQ Classic configuration file (activemq.xml). By setting the `virtualThreadTaskRunner` attribute to `true` on the `<broker>` element, ActiveMQ will utilize Virtual Threads for task execution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-threads.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker ... virtualThreadTaskRunner=\"true\" .. >\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Configuration (activemq.xml)\nDESCRIPTION: This XML configuration file (/usr/local/activemq/conf/activemq.xml) demonstrates a complex ActiveMQ Classic setup with queue definitions, STOMP transport, authentication, authorization, JMX configuration, and web console settings.  It assumes ActiveMQ Classic is installed in /usr/local/activemq/.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/complex-single-broker-configuration-stomp-only.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  ActiveMQ Classic activemq.xml configuration file (/usr/local/activemq/conf/activemq.xml)\n\n  * ActiveMQ Classic JVM Startup options are in /etc/activemq.conf\n\n  * Uses the Sun JMX connector for remote management.  Point jconsole at:\n    service:jmx:rmi:///jndi/rmi://myserver.domain.net:61616/jmxrmi\n\n  * Uses Kaha persistence storage, stored in the \"activemq-data\" directory.\n    \"activemq-data\" and \"logs\" sub-directories must be writable by the\n    ActiveMQ Classic user.\n\n  * Also see conf/log4j.properties for logging configuration\n-->\n\n<beans>\n    <!-- Enables system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n    <broker xmlns=\"http://activemq.org/config/1.0\" brokerName=\"SERVER1\"\n        populateJMSXUserID=\"true\" useJmx=\"true\" persistent=\"true\">\n\n    <!-- Queue setup.  Queues can be created on the fly by any user with\n         admin rights, but it is not good to give every user admin rights.  -->\n    <destinations>\n        <queue physicalName=\"widgets\" />\n        <queue physicalName=\"spacecontrol\" />\n        <queue physicalName=\"displays\" />\n    </destinations>\n\n    <!-- We only allow Stomp clients -->\n    <transportConnectors>\n        <transportConnector name=\"stomp\" uri=\"stomp://localhost:61613\"/>\n    </transportConnectors>\n\n    <!-- We don't have any other brokers to connect to -->\n    <networkConnectors>\n    </networkConnectors>\n\n    <!-- Do not create an ActiveMQ JMX connector.  Use the Sun JMX connector\n         instead, and hook ActiveMQ Classic to it. -->\n    <managementContext>\n        <managementContext createConnector=\"false\" />\n    </managementContext>\n\n    <plugins>\n        <simpleAuthenticationPlugin>\n            <users>\n                <authenticationUser username=\"sa\" password=\"manager\" groups=\"producers,consumers,admins\" />\n                <authenticationUser username=\"frontend\" password=\"manager\" groups=\"producers,consumers\" />\n                <authenticationUser username=\"backend\" password=\"manager\" groups=\"consumers\" />\n            </users>\n        </simpleAuthenticationPlugin>\n        <authorizationPlugin>\n            <map>\n                <authorizationMap>\n                    <authorizationEntries>\n                        <authorizationEntry queue=\">\" write=\"producers\" read=\"consumers\" admin=\"admins\" />\n                    </authorizationEntries>\n                </authorizationMap>\n            </map>\n        </authorizationPlugin>\n    </plugins>\n\n    </broker>\n\n    <!-- Do not create ActiveMQ.Agent topic, as it does not work if\n         destination security is enabled -->\n    <!-- <commandAgent xmlns=\"http://activemq.org/config/1.0\"/> -->\n\n    <!-- Web Console.  Auth is via JAAS.  Beware: jetty-plus-6.1.4.jar contains the\n         JAAS classes, and is not included with ActiveMQ Classic.  You need to download\n         separately.  Web Console queue browser will fail, as it tries to use JMS\n         to browse the queue, and that requires a password.\n    -->\n\n    <jetty xmlns=\"http://mortbay.com/schemas/jetty/1.0\">\n        <connectors>\n            <nioConnector port=\"8161\" />\n        </connectors>\n\n        <userRealms>\n            <!-- \"name\" must match the realm in web.xml, and \"loginModuleName\" must be defined in login.conf -->\n            <jaasUserRealm name=\"ActiveMQ\" loginModuleName=\"ActiveMQ\"\n                    callbackHandlerClass=\"org.mortbay.jetty.plus.jaas.callback.DefaultCallbackHandler\" />\n        </userRealms>\n\n        <handlers>\n            <webAppContext contextPath=\"/admin\" resourceBase=\"${activemq.base}/webapps/admin\" logUrlOnStart=\"true\" />\n        </handlers>\n    </jetty>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redelivery Policy in ActiveMQ Classic (Java)\nDESCRIPTION: This Java code snippet demonstrates how to configure the redelivery policy for an ActiveMQ Classic connection. It sets the initial redelivery delay, back-off multiplier, exponential back-off usage, and maximum redelivery attempts. The RedeliveryPolicy object is obtained from an existing ActiveMQConnection object.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRedeliveryPolicy policy = connection.getRedeliveryPolicy();\npolicy.setInitialRedeliveryDelay(500);\npolicy.setBackOffMultiplier(2);\npolicy.setUseExponentialBackOff(true);\npolicy.setMaximumRedeliveries(2);\n```\n\n----------------------------------------\n\nTITLE: Example Discovery URI\nDESCRIPTION: Provides an example URI demonstrating the use of the `multicast` discovery agent and setting the `initialReconnectDelay` transport option.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery-transport-reference.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndiscovery:(multicast://default)?initialReconnectDelay=100\n```\n\n----------------------------------------\n\nTITLE: JNDI properties configuration\nDESCRIPTION: This is a sample `jndi.properties` file used to configure the JNDI context for ActiveMQ Classic. It defines the initial context factory, provider URL, and JNDI names for queues and topics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\njava.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory\n\n# use the following property to configure the default connector\njava.naming.provider.url = vm://localhost\n\n# use the following property to specify the JNDI name the connection factory\n# should appear as. \n#connectionFactoryNames = connectionFactory, queueConnectionFactory, topicConnectionFactry\n\n# register some queues in JNDI using the form\n# queue.[jndiName] = [physicalName]\nqueue.MyQueue = example.MyQueue\n\n\n# register some topics in JNDI using the form\n# topic.[jndiName] = [physicalName]\ntopic.MyTopic = example.MyTopic\n```\n\n----------------------------------------\n\nTITLE: Setting Broker URL with Async Sends in ActiveMQ Classic (Java)\nDESCRIPTION: This snippet demonstrates how to set the brokerURL on an ActiveMQConnectionFactory to enable asynchronous sends.  The `jms.useAsyncSend=true` parameter is appended to the connection URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/connection-configuration-uri.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ntcp://localhost:61616?jms.useAsyncSend=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplex Network Connectors\nDESCRIPTION: This snippet shows how to configure multiple duplex network connectors between two brokers using unique names. This can increase throughput or partition topics and queues. The `duplex` attribute is set to `true` to enable bi-directional bridging.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors>\n        <networkConnector name=\"SYSTEM1\" duplex=\"true\" uri=\"static:(tcp://10.x.x.x:61616)\">\n                <dynamicallyIncludedDestinations>\n                        <topic physicalName=\"outgoing.System1\" />\n                </dynamicallyIncludedDestinations>\n        </networkConnector>\n        <networkConnector name=\"SYSTEM2\" duplex=\"true\" uri=\"static:(tcp://10.x.x.x:61616)\">\n                <dynamicallyIncludedDestinations>\n                        <topic physicalName=\"outgoing.System2\"/>\n                </dynamicallyIncludedDestinations>\n        </networkConnector>\n  </networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Spring Configuration with ActiveMQSslConnectionFactory\nDESCRIPTION: This snippet illustrates how to configure an `ActiveMQSslConnectionFactory` in a Spring application context. It demonstrates setting truststore, keystore, passwords, broker URL, username, and password for establishing an SSL connection to ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"AMQJMSConnectionFactory\" class=\"org.apache.activemq.ActiveMQSslConnectionFactory\">\n  <property name=\"trustStore\" value=\"/path/to/truststore.ts\" />\n  <property name=\"trustStorePassword\" value=\"password\" />\n  <property name=\"keyStore\" value=\"/path/to/keystore.ks\" />\n  <property name=\"keyStorePassword\" value=\"password\" />\n  <property name=\"brokerURL\" value=\"ssl://localhost:61616\" />\n  <property name=\"userName\" value=\"admin\" /> \n  <property name=\"password\" value=\"admin\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: JMS Server Setup and Message Handling\nDESCRIPTION: This code presents a complete server-side implementation for handling JMS requests and sending responses.  It sets up an embedded ActiveMQ broker, creates a connection and session, and listens for messages on a specified queue. Upon receiving a message, it extracts the correlation ID, processes the message, and sends a response back to the JMSReplyTo destination using the original correlation ID.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-should-i-implement-request-response-with-jms.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activemq.broker.BrokerService;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\nimport javax.jms.*;\n\npublic class Server implements MessageListener {\n    private static int ackMode;\n    private static String messageQueueName;\n    private static String messageBrokerUrl;\n\n    private Session session;\n    private boolean transacted = false;\n    private MessageProducer replyProducer;\n    private MessageProtocol messageProtocol;\n\n    static {\n        messageBrokerUrl = \"tcp://localhost:61616\";\n        messageQueueName = \"client.messages\";\n        ackMode = Session.AUTO_ACKNOWLEDGE;\n    }\n\n    public Server() {\n        try {\n            //This message broker is embedded\n            BrokerService broker = new BrokerService();\n            broker.setPersistent(false);\n            broker.setUseJmx(false);\n            broker.addConnector(messageBrokerUrl);\n            broker.start();\n        } catch (Exception e) {\n            //Handle the exception appropriately\n        }\n\n        //Delegating the handling of messages to another class, instantiate it before setting up JMS so it\n        //is ready to handle messages\n        this.messageProtocol = new MessageProtocol();\n        this.setupMessageQueueConsumer();\n    }\n\n    private void setupMessageQueueConsumer() {\n        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(messageBrokerUrl);\n        Connection connection;\n        try {\n            connection = connectionFactory.createConnection();\n            connection.start();\n            this.session = connection.createSession(this.transacted, ackMode);\n            Destination adminQueue = this.session.createQueue(messageQueueName);\n\n            //Setup a message producer to respond to messages from clients, we will get the destination\n            //to send to from the JMSReplyTo header field from a Message\n            this.replyProducer = this.session.createProducer(null);\n            this.replyProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\n            //Set up a consumer to consume messages off of the admin queue\n            MessageConsumer consumer = this.session.createConsumer(adminQueue);\n            consumer.setMessageListener(this);\n        } catch (JMSException e) {\n            //Handle the exception appropriately\n        }\n    }\n\n    public void onMessage(Message message) {\n        try {\n            TextMessage response = this.session.createTextMessage();\n            if (message instanceof TextMessage) {\n                TextMessage txtMsg = (TextMessage) message;\n                String messageText = txtMsg.getText();\n                response.setText(this.messageProtocol.handleProtocolMessage(messageText));\n            }\n\n            //Set the correlation ID from the received message to be the correlation id of the response message\n            //this lets the client identify which message this is a response to if it has more than\n            //one outstanding message to the server\n            response.setJMSCorrelationID(message.getJMSCorrelationID());\n\n            //Send the response to the Destination specified by the JMSReplyTo field of the received message,\n            //this is presumably a temporary queue created by the client\n            this.replyProducer.send(message.getJMSReplyTo(), response);\n        } catch (JMSException e) {\n            //Handle the exception appropriately\n        }\n    }\n\n    public static void main(String[] args) {\n        new Server();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inactive Destination Purge in ActiveMQ\nDESCRIPTION: This example shows how to configure ActiveMQ to check for and delete inactive queues.  The `schedulePeriodForDestinationPurge` attribute on the `<broker>` element defines how often the broker checks for inactive destinations. The `gcInactiveDestinations` and `inactiveTimoutBeforeGC` attributes on the `<policyEntry>` element configure the conditions under which a destination is considered inactive and can be removed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/delete-inactive-destinations.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/core\" schedulePeriodForDestinationPurge=\"10000\">\n\n  <destinationPolicy>\n     <policyMap>\n        <policyEntries>\n           <policyEntry queue=\">\" gcInactiveDestinations=\"true\" inactiveTimoutBeforeGC=\"30000\"/>\n        </policyEntries>\n     </policyMap>\n  </destinationPolicy>\n      \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Transport Connector Configuration Example - ActiveMQ Classic\nDESCRIPTION: This example demonstrates how to configure a transport connector within the ActiveMQ Classic broker. It defines a transport connector named 'openwire' using the TCP protocol on port 61616, and enables the status monitor for connection blocking detection. This configuration applies to the server side.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-connection-uris.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n   <!-- ... -->\n\n   <transportConnectors>\n     <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" enableStatusMonitor=\"true\"/> \n   </<transportConnectors>\n\n   <!-- ... -->\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Configuration Plugin in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure the runtime configuration plugin within the ActiveMQ broker configuration. The `checkPeriod` attribute specifies the interval (in milliseconds) for checking changes to the broker XML configuration's last update timestamp. Setting `start=\"false\"` prevents automatic broker startup before plugin initialization.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/runtime-configuration.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/core\" start=\"false\" ... >\n    <plugins>\n      <runtimeConfigurationPlugin checkPeriod=\"1000\" />\n    </plugins>\n    ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Embedding ActiveMQ Broker in Spring XML\nDESCRIPTION: This XML snippet demonstrates how to embed an ActiveMQ Classic broker configuration directly within a Spring XML file using the XML schema-based configuration introduced in Spring 2.0.  It configures a broker with a transport connector and a connection factory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/spring-support.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<beans \n  xmlns=\"http://www.springframework.org/schema/beans\" \n  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n\n  <amq:broker useJmx=\"false\" persistent=\"false\">\n    <amq:transportConnectors>\n      <amq:transportConnector uri=\"tcp://localhost:0\" />\n    </amq:transportConnectors>\n  </amq:broker>\n\n  <amq:connectionFactory id=\"jmsFactory\" brokerURL=\"vm://localhost\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring OCSP Responder Properties in java.security\nDESCRIPTION: This snippet shows example settings for the java.security file. It enables OCSP and specifies the URL of the OCSP responder. The file configures Online Certificate Status Protocol (OCSP) to validate certificates during runtime.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nocsp.enable=true ocsp.responderURL=<http://ocsp.example.net:80>\n```\n\n----------------------------------------\n\nTITLE: Configuring JMS Bridge with Oracle AQ using Spring XML\nDESCRIPTION: This XML configuration defines a JMS bridge using ActiveMQ Classic and Camel to connect to Oracle AQ queues and topics. It sets up connection factories, Camel routes for consuming messages from Oracle AQ and sending them to ActiveMQ queues, and logging the received messages. Dependencies include ojdbc.jar and aqjms.jar.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-bridge-with-oracle-aq.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans>\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n    <broker useJmx=\"true\" persistent=\"false\" xmlns=\"http://activemq.org/config/1.0\"\n            brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\" >\n    </broker>\n\n    <camelContext id=\"camel\" xmlns=\"http://activemq.apache.org/camel/schema/spring\">\n        <!-- Dependencies: ojdbc.jar and aqjms.jar must be in the activemq lib directory -->\n\n        <!-- this camel route will read incoming messages from Oracle -->\n        <route>\n            <from uri=\"oracleQueue:queue:ORACLE_QUEUE\">\n            <to   uri=\"activemq:queue:queue.inboundOracleAQqueue\" >\n        </route>\n        <route>\n            <!-- NOTE: I have had success with a topic using ActiveMQ Classic 5.3, but not 5.1 -->\n            <from uri=\"oracleTopic:topic:ORACLE_TOPIC\">\n            <to   uri=\"activemq:queue:queue.inboundOracleAQtopic\" >\n        </route>\n\n        <!-- these camel routes will log the messages to the console .... replace them with something more useful!!  -->\n        <route>\n            <from uri=\"activemq:queue:queue.inboundOracleAQqueue\" >\n            <to uri=\"log:oracleAQ.inbound.got_a_queue_message?level=ERROR\">\n        </route>\n        <route>\n            <from uri=\"activemq:queue:queue.inboundOracleAQtopic\" >\n            <to uri=\"log:oracleAQ.inbound.got_a_topic_message?level=ERROR\">\n        </route>\n    </camelContext>\n\n    <!-- without the following bean instantiation, we will get an oracle.jms.AQjmsException with each and every received message -->\n    <bean id=\"requiredBeanForOracleAq\" class=\"org.apache.activemq.ActiveMQConnectionFactory\" />\n\n    <bean id=\"connectionFactoryOracleAQQueue\" class=\"oracle.jms.AQjmsFactory\" factory-method=\"getQueueConnectionFactory\">\n        <constructor-arg index=\"0\">\n            <value>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST ....... (SERVICE_NAME = myDbService)))</value>\n        </constructor-arg>\n        <constructor-arg index=\"1\" type=\"java.util.Properties\">\n            <value></value>\n        </constructor-arg>\n    </bean>\n\n    <bean id=\"connectionFactoryOracleAQTopic\" class=\"oracle.jms.AQjmsFactory\"\n                factory-method=\"getQueueConnectionFactory\">\n        <constructor-arg index=\"0\">\n            <value>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST ....... (SERVICE_NAME = myDbService)))</value>\n        </constructor-arg>\n        <constructor-arg index=\"1\" type=\"java.util.Properties\">\n            <value></value>\n        </constructor-arg>\n    </bean>\n\n    <bean id=\"oracleQueueCredentials\" class=\"org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter\">\n        <property name=\"targetConnectionFactory\">\n            <ref bean=\"connectionFactoryOracleAQQueue\">\n        </property>\n        <property name=\"username\">\n            <value>foo</value>\n        </property>\n        <property name=\"password\">\n            <value>bar</value>\n        </property>\n    </bean>\n\n    <bean id=\"oracleTopicCredentials\" class=\"org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter\">\n        <property name=\"targetConnectionFactory\">\n            <ref bean=\"connectionFactoryOracleAQTopic\">\n        </property>\n        <property name=\"username\">\n            <value>foo</value>\n        </property>\n        <property name=\"password\">\n            <value>bar</value>\n        </property>\n    </bean>\n\n   <bean id=\"oracleQueue\" class=\"org.apache.camel.component.jms.JmsComponent\">\n        <property name=\"connectionFactory\" ref=\"oracleQueueCredentials\">\n   </bean>\n\n   <bean id=\"oracleTopic\" class=\"org.apache.camel.component.jms.JmsComponent\">\n        <property name=\"connectionFactory\" ref=\"oracleTopicCredentials\">\n   </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: JAAS Login Configuration for LDAP Authentication\nDESCRIPTION: This snippet configures the JAAS login module to use LDAP for authentication. It defines the initial context factory, connection URL, and credentials to connect to the LDAP server.  It also specifies the search bases and matching patterns for users and roles.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nLdapConfiguration { \n   org.apache.activemq.jaas.LDAPLoginModule required \n   initialContextFactory=com.sun.jndi.ldap.LdapCtxFactory \n   connectionURL=\"ldap://ldap.acme.com:389\" \n   connectionUsername=\"cn=mqbroker,ou=Services,dc=acme,dc=com\" \n   connectionPassword=password connectionProtocol=s \n   authentication=simple \n   userBase=\"ou=User,ou=ActiveMQ,ou=systems,dc=acme,dc=com\" \n   userRoleName=dummyUserRoleName \n   userSearchMatching=\"(uid={0})\" \n   userSearchSubtree=false \n   roleBase=\"ou=Group,ou=ActiveMQ,ou=systems,dc=acme,dc=com\" \n   roleName=cn \n   roleSearchMatching=\"(member:=uid={1})\" \n   roleSearchSubtree=true \n   ; \n};\n```\n\n----------------------------------------\n\nTITLE: VM Transport URI with External Configuration File\nDESCRIPTION: This snippet demonstrates how to configure an embedded broker using an external configuration file (e.g., activemq.xml) with the VM transport. The `brokerConfig` parameter specifies the location of the configuration file, allowing for centralized broker configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/vm-transport-reference.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nvm://localhost?brokerConfig=xbean:activemq.xml\n```\n\n----------------------------------------\n\nTITLE: Broker Configuration Example for Cluster Updates\nDESCRIPTION: Demonstrates how to configure a broker to automatically update connected clients with information about other brokers in the cluster. The `updateClusterClients` attribute is set to `true`, and the `updateClusterFilter` is used to specify which brokers should be included in the updates. This allows clients to automatically discover new brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" updateClusterClients=\"true\" updateClusterFilter=\".*A.*,.*B.*\"/>\n  </transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Broker with Custom XML Configuration\nDESCRIPTION: This example demonstrates starting an ActiveMQ Classic broker using a custom XML configuration file. The configuration file 'myconfig.xml' is loaded from the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nactivemq xbean:myconfig.xml\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Passwords in DataSource (XML)\nDESCRIPTION: This snippet shows how to use encrypted passwords when configuring a DataSource for JDBC connections. The `${jdbc.password}` placeholder will be resolved using the decrypted value from the properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n  <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n  <property name=\"url\" value=\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"/>\n  <property name=\"username\" value=\"activemq\"/>\n  <property name=\"password\" value=\"${jdbc.password}\"/>\n  <property name=\"maxActive\" value=\"200\"/>\n  <property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Dispatch at Consumer Level via Destination URI - Java\nDESCRIPTION: This snippet shows how to configure `dispatchAsync` at the consumer level using Destination Options in the ActiveMQ queue URI. Setting `consumer.dispatchAsync=false` overrides connection and connection factory settings, ensuring synchronous dispatch for this specific consumer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/consumer-dispatch-async.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nqueue = new ActiveMQQueue(\"TEST.QUEUE?consumer.dispatchAsync=false\");\nconsumer = session.createConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Configuring LevelDB Persistence Adapter in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to configure ActiveMQ Classic to use LevelDB as its persistence adapter.  It involves specifying the `<levelDB>` tag within the `<persistenceAdapter>` section of the broker configuration. The `directory` attribute specifies where the LevelDB data files will be stored.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/leveldb-store.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <broker brokerName=\"broker\" ... >\n    ...\n    <persistenceAdapter>\n      <levelDB directory=\"activemq-data\"/>\n    </persistenceAdapter>\n    ...\n  </broker>\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Example with Priority Backup\nDESCRIPTION: Demonstrates the use of the `priorityBackup` option to prioritize a local broker over a remote broker. The client will always try to connect and stay connected to the `local` broker. If the local broker fails, it will fail over to the `remote` broker, but it will constantly try to reconnect to the `local` broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nfailover:(tcp://local:61616,tcp://remote:61616)?randomize=false&priorityBackup=true\n```\n\n----------------------------------------\n\nTITLE: Enable MessageGroupHashBucket in ActiveMQ (XML)\nDESCRIPTION: This XML snippet configures ActiveMQ to use `MessageGroupHashBucket` for message grouping within a specific queue. `MessageGroupHashBucket` provides bounded memory usage while still tracking all groups. The `cachedSize` attribute controls the number of buckets in the hash table. It requires no external dependencies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\">\">\n          <messageGroupMapFactory>\n            <messageGroupHashBucked cachedSize=1024 />\n          </messageGroupMapFactory>\n      </policyEntry>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Exporting Broker Certificate using Keytool\nDESCRIPTION: This command exports the broker's certificate from the keystore broker.ks. The certificate is exported with the alias 'broker' and saved to the file broker_cert, which can then be shared with clients to establish trust.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -export -alias broker -keystore broker.ks -file broker_cert\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Basic Authentication - Bash\nDESCRIPTION: This `curl` command sends a message to an ActiveMQ queue using Basic Authentication with the username `system` and password `manager`. It specifies the message body using the `-d` flag and the destination queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u system:manager -d \"body=message\" http://localhost:8161/demo/message/TEST?type=queue\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling ShiroPlugin with PropertyPlaceholderConfigurer\nDESCRIPTION: This XML snippet shows how to enable or disable the Shiro plugin by setting a property in a `.properties` file without having to change your XML config using Spring's PropertySourcesPlaceholderConfigurer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<beans ...>\n\n    <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n       ...\n    </bean>\n\n    <broker ...>\n        <plugins ...>\n\n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <property name=\"enabled\" value=\"${shiro.enabled}\"/>\n            </bean>\n \n        </plugins>\n    </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Order Dispatch Policy in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to enable total ordering for a topic in ActiveMQ Classic using the `<strictOrderDispatchPolicy/>`. It configures the dispatch policy within a destination policy, ensuring that all consumers receive messages from the topic in the same order. The policy is applied to all topics (`topic=\">\"`).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/total-ordering.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry topic=\">\">\n        <dispatchPolicy>\n          <strictOrderDispatchPolicy/>\n        </dispatchPolicy>\n      </policyEntry>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Customizing ConnectionSubjectFactory (Spring XML)\nDESCRIPTION: This snippet shows how to customize the `ConnectionSubjectFactory` used by the Shiro plugin, by defining a bean of type `com.my.ConnectionSubjectFactory` and injecting it into the `subjectFilter.connectionSubjectFactory` property of the `shiroPlugin` bean. This is done to allow for customization of `Subject` creation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n    <property name=\"subjectFilter.connectionSubjectFactory\">\n        <bean class=\"com.my.ConnectionSubjectFactory\" .../>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configure Shared File Locker with KahaDB in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure the Shared File Locker for the KahaDB persistence adapter in ActiveMQ Classic. It sets the directory for KahaDB data and specifies the lockAcquireSleepInterval for the shared file locker. The lockKeepAlivePeriod attribute is applicable to versions of ActiveMQ Classic 5.9.0 and newer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pluggable-storage-lockers.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n\t<kahaDB directory=\"target/activemq-data\" lockKeepAlivePeriod=\"10000\">\n\t\t<locker>\n\t\t\t<shared-file-locker lockAcquireSleepInterval=\"5000\"/>\n\t\t</locker>\n\t</kahaDB>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Enabling Stomp Protocol\nDESCRIPTION: This snippet shows how to enable STOMP protocol support in the ActiveMQ Classic broker by adding a transport connector definition with the URI scheme `stomp`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n   <transportConnector name=\"stomp\" uri=\"stomp://localhost:61613\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX via /etc/activemq.conf (Unix)\nDESCRIPTION: This snippet shows an alternative configuration by setting properties inside `/etc/activemq.conf` on a Unix-like system. The snippet defines `ACTIVEMQ_HOME`, `ACTIVEMQ_BASE`, and `ACTIVEMQ_SUNJMX_START`. The `ACTIVEMQ_SUNJMX_START` property sets the JMX port, disables SSL, and specifies the password and access file paths.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nACTIVEMQ_HOME=DRIVE_LETTER:/where/ActiveMQ/is/installed\nACTIVEMQ_BASE=${ACTIVEMQ_HOME}\nACTIVEMQ_SUNJMX_START=\"-Dcom.sun.management.jmxremote.port=1616 -Dcom.sun.management.jmxremote.ssl=false \\\n    -Dcom.sun.management.jmxremote.password.file=${ACTIVEMQ_BASE}/conf/jmx.password \\\n    -Dcom.sun.management.jmxremote.access.file=${ACTIVEMQ_BASE}/conf/jmx.access\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JMS Bridge Connector in ActiveMQ Classic using XML\nDESCRIPTION: This XML configuration demonstrates setting up a JMS bridge connector within an ActiveMQ Classic broker using Spring. It defines inbound and outbound queue bridges for message transfer between local and remote queues based on a message selector. The configuration uses system properties for variables and includes a connection factory pointing to the remote broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-bridge-with-remote-broker.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n    <broker useJmx=\"true\" persistent=\"false\" xmlns=\"http://activemq.org/config/1.0\"\n            brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\">\n        <jmsBridgeConnectors>\n            <jmsQueueConnector outboundQueueConnectionFactory=\"#remoteBroker\">\n                <inboundQueueBridges>\n                    <inboundQueueBridge\n                            inboundQueueName = \"queue.ping\"\n                            localQueueName   = \"queue.incomingMsgs.ping\"\n                            selector         = \"JMSType LIKE 'foo%'\"/>\n                </inboundQueueBridges>\n                <outboundQueueBridges>\n                    <outboundQueueBridge\n                            outboundQueueName = \"queue.pong\"\n                            localQueueName    = \"queue.incomingMsgs.ping\"\n                            selector          = \"JMSType LIKE 'foo%'\"/>\n                </outboundQueueBridges>\n            </jmsQueueConnector>\n        </jmsBridgeConnectors>\n    </broker>\n\n    <!-- JMS ConnectionFactory to use for remote bridging -->\n    <bean id=\"remoteBroker\" class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n        <property name=\"brokerURL\" value=\"failover:(tcp://remote_activemq:61616)\" />\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Enabling MQTT over NIO Transport\nDESCRIPTION: This snippet demonstrates how to enable the MQTT protocol over NIO transport for better scalability and performance. By using the `mqtt+nio` transport prefix, the connector utilizes NIO transport underneath, which generally uses fewer threads than a standard connector.  No specific dependencies are needed besides ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"mqtt+nio\" uri=\"mqtt+nio://localhost:1883\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Order Dispatch for Queues - XML\nDESCRIPTION: This snippet demonstrates how to configure strict order dispatch for queues in ActiveMQ Classic by setting the `strictOrderDispatch` attribute to `false` within the `<policyEntry />` element. When `strictOrderDispatch` is set to `false`, messages will be dispatched in a round-robin fashion. Consumer priorities are observed during dispatching.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/dispatch-policies.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<policyEntry queue=\">\" strictOrderDispatch=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch and Redelivery Policies via URI in ActiveMQ Classic (Java)\nDESCRIPTION: This example shows how to configure nested objects like `ActiveMQPrefetchPolicy` and `RedeliveryPolicy` on a connection using the `jms.prefetchPolicy.*` and `jms.redeliveryPolicy.*` prefixes in the connection URI. It sets the prefetch limit and the maximum number of redeliveries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/connection-configuration-uri.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ntcp://localhost:61616?jms.prefetchPolicy.all=100&jms.redeliveryPolicy.maximumRedeliveries=5\n```\n\n----------------------------------------\n\nTITLE: Scheduling Repeated Message ActiveMQ Stomp C#\nDESCRIPTION: This snippet illustrates how to schedule a message for repeated delivery with an initial delay and a period between subsequent deliveries. It sets the `AMQ_SCHEDULED_DELAY`, `AMQ_SCHEDULED_PERIOD`, and `AMQ_SCHEDULED_REPEAT` properties to control the initial delay, the interval between deliveries, and the number of repetitions, respectively. In this example, the message is delayed by 30 seconds initially, then re-delivered 9 times every 10 seconds.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/advanced-features/stomp-delayed-and-scheduled-message-feature.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nlong delay = 30 * 1000;\nlong period = 10 * 1000;\nint repeat = 9;\nmessage.Properties[\"AMQ_SCHEDULED_DELAY\"] = delay;\nmessage.Properties[\"AMQ_SCHEDULED_PERIOD\"] = period;\nmessage.Properties[\"AMQ_SCHEDULED_REPEAT\"] = repeat;\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: JMS Connection using JNDI\nDESCRIPTION: This code snippet demonstrates how to create a JMS connection to ActiveMQ Classic using JNDI. It looks up the ConnectionFactory and Topic from the JNDI context, creates a TopicConnection, TopicSession, and TopicSubscriber.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Create a new intial context, which loads from jndi.properties file: \njavax.naming.Context ctx = new javax.naming.InitialContext(); \n// Lookup the connection factory: \njavax.jms.TopicConnectionFactory factory = (javax.jms.TopicConnectionFactory)ctx.lookup(\"ConnectionFactory\"); \n// Create a new TopicConnection for pub/sub messaging: \njavax.jms.TopicConnection conn = factory.getTopicConnection(); \n// Lookup an existing topic: \njavax.jms.Topic mytopic = (javax.jms.Topic)ctx.lookup(\"MyTopic\"); \n// Create a new TopicSession for the client: \njavax.jms.TopicSession session = conn.createTopicSession(false,TopicSession.AUTO_ACKNOWLEDGE); \n// Create a new subscriber to receive messages: \njavax.jms.TopicSubscriber subscriber = session.createSubscriber(mytopic);\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to a Queue using curl\nDESCRIPTION: This snippet demonstrates how to publish a message to a queue using a curl command. It includes authentication details, the message body, destination, and the type of destination (queue).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -u admin:admin -d \"body=message\" http://localhost:8161/api/message/TEST?type=queue\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Persistence Adapter with Lease-Based Locker (XML)\nDESCRIPTION: This XML snippet configures the JDBC persistence adapter with a lease-based database locker.  It specifies the data source, lock keep-alive period, and lock acquire sleep interval. The `brokerName` attribute on the `<broker/>` tag should be unique for each broker in a master/slave cluster, or the `leaseHolderId` on the `<lease-database-locker/>` tag should have unique values.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pluggable-storage-lockers.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n\t<jdbcPersistenceAdapter dataDirectory=\"${activemq.data}\" dataSource=\"#mysql-ds\" lockKeepAlivePeriod=\"5000\">\n\t\t<locker>\n\t\t\t<lease-database-locker lockAcquireSleepInterval=\"10000\"/>\n\t\t</locker>\n\t</jdbcPersistenceAdapter>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Subscribing with a Message Selector in STOMP\nDESCRIPTION: This snippet shows how to create a subscription with a message selector using the STOMP protocol.  The `selector` header in the `SUBSCRIBE` frame is set to the desired SQL 92 selector expression. Only messages that match the selector will be delivered to the subscription.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nSUBSCRIBE\nid:sub0\nselector:type = 'car' AND color = 'blue' AND weight > 2500\ndestination:/topic/foo\n\n^@\n```\n\n----------------------------------------\n\nTITLE: JBoss Data Source Configuration for ActiveMQ Classic\nDESCRIPTION: This snippet shows an example of a JBoss data source configuration file (activemq-jms-ds.xml) for ActiveMQ Classic. This file configures JMS QueueConnectionFactory and TopicConnectionFactory, as well as AdminObjects for a queue and topic, and makes them available via JNDI. It is deployed to the JBoss deploy directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE connection-factories\n    PUBLIC \"-//JBoss//DTD JBOSS JCA Config 1.5//EN\"\n    \"http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd\">\n\n<connection-factories>\n\n   <tx-connection-factory>\n      <jndi-name>activemq/QueueConnectionFactory</jndi-name>\n      <xa-transaction/>\n      <track-connection-by-tx/>\n      <rar-name>activemq-ra.rar</rar-name>\n      <connection-definition>javax.jms.QueueConnectionFactory</connection-definition>\n      <ServerUrl>vm://localhost</ServerUrl>\n      <!--\n      <UserName>sa</UserName>\n      <Password></Password>\n      -->\n      <min-pool-size>1</min-pool-size>\n      <max-pool-size>200</max-pool-size>\n      <blocking-timeout-millis>30000</blocking-timeout-millis>\n      <idle-timeout-minutes>3</idle-timeout-minutes>\n   </tx-connection-factory>\n\n   <tx-connection-factory>\n      <jndi-name>activemq/TopicConnectionFactory</jndi-name>\n      <xa-transaction/>\n      <track-connection-by-tx/>\n      <rar-name>activemq-ra.rar</rar-name>\n      <connection-definition>javax.jms.TopicConnectionFactory</connection-definition>\n      <ServerUrl>vm://localhost</ServerUrl>\n      <!--\n      <UserName>sa</UserName>\n      <Password></Password>\n      -->\n      <min-pool-size>1</min-pool-size>\n      <max-pool-size>200</max-pool-size>\n      <blocking-timeout-millis>30000</blocking-timeout-millis>\n      <idle-timeout-minutes>3</idle-timeout-minutes>\n   </tx-connection-factory>\n\n   <mbean code=\"org.jboss.resource.deployment.AdminObject\" name=\"activemq.queue:name=outboundQueue\">\n      <attribute name=\"JNDIName\">activemq/queue/outbound</attribute>\n      <depends optional-attribute-name=\"RARName\">jboss.jca:service=RARDeployment,name='activemq-ra.rar'</depends>\n      <attribute name=\"Type\">javax.jms.Queue</attribute>\n      <attribute name=\"Properties\">PhysicalName=queue.outbound</attribute>\n   </mbean>\n\n   <mbean code=\"org.jboss.resource.deployment.AdminObject\" name=\"activemq.topic:name=inboundTopic\">\n      <attribute name=\"JNDIName\">activemq/topic/inbound</attribute>\n      <depends optional-attribute-name=\"RARName\">jboss.jca:service=RARDeployment,name='activemq-ra.rar'</depends>\n      <attribute name=\"Type\">javax.jms.Topic</attribute>\n      <attribute name=\"Properties\">PhysicalName=topic.inbound</attribute>\n   </mbean>\n\n</connection-factories>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Exceptions (XML)\nDESCRIPTION: This XML configuration demonstrates how to configure ActiveMQ Classic to throw a `javax.jms.ResourceAllocationException` on the client side when no space is available on the broker. Setting `sendFailIfNoSpace` to `true` causes the `send()` operation to fail immediately.  Configuration occurs in the `activemq.xml` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/producer-flow-control.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<systemUsage>\n <systemUsage sendFailIfNoSpace=\"true\">\n   <memoryUsage>\n     <memoryUsage limit=\"20 mb\"/>\n   </memoryUsage>\n </systemUsage>\n</systemUsage>\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Journal Persistence (AMQ 5.x)\nDESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ broker for JDBC persistence with journaling. It defines the broker, persistence factory, and transport connectors. It uses Spring Beans XML schema for configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\" \n       xmlns:amq=\"http://activemq.apache.org/schema/core\" \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd \n                           http://activemq.apache.org/schema/core \n                           http://activemq.apache.org/schema/core/activemq-core.xsd\"> \n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/> \n  <broker useJmx=\"true\" xmlns=\"http://activemq.apache.org/schema/core\"> \n    <networkConnectors> \n      <!-- <networkConnector uri=\"multicast://default?initialReconnectDelay=100\" /> <networkConnector uri=\"static://(tcp://localhost:61616)\" /> --> \n    </networkConnectors> \n    <persistenceFactory>\n      <journalPersistenceAdapterFactory journalLogFiles=\"5\" dataDirectory=\"${basedir}/target\" /> \n      <!-- To use a different dataSource, use the following syntax : --> \n      <!-- <journalPersistenceAdapterFactory journalLogFiles=\"5\" dataDirectory=\"${basedir}/activemq-data\" dataSource=\"#mysql-ds\"/> --> \n    </persistenceFactory> \n    <transportConnectors> \n      <transportConnector uri=\"tcp://localhost:61636\" /> \n    </transportConnectors> \n  </broker> \n  <!-- MySql DataSource Sample Setup --> \n  <!-- \n  <bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\"> \n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/> \n    <property name=\"url\" value=\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"/> \n    <property name=\"username\" value=\"activemq\"/> \n    <property name=\"password\" value=\"activemq\"/> \n    <property name=\"poolPreparedStatements\" value=\"true\"/> \n  </bean> \n  --> \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Consuming High Priority Messages Using Selectors (Java-like)\nDESCRIPTION: This example illustrates how to use JMS message selectors to consume high-priority messages in ActiveMQ Classic. Consumers are configured with selectors like 'JMSPriority > 6' to filter messages based on priority. These examples are conceptual and would exist in the JMS client code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-support-priority-queues.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJMSPriority > 6\n```\n\nLANGUAGE: java\nCODE:\n```\nJMSPriority >= 4\n```\n\n----------------------------------------\n\nTITLE: Setting ACTIVEMQ_SSL_OPTS for Java Security Properties\nDESCRIPTION: This command sets the ACTIVEMQ_SSL_OPTS environment variable to include the path to the java.security configuration file. This file is used to configure OCSP (Online Certificate Status Protocol) for advanced certificate validation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nACTIVEMQ_SSL_OPTS=\"-Djava.security.properties=$ACTIVEMQ_CONF/java.security\"\n```\n\n----------------------------------------\n\nTITLE: Setting Message Time-To-Live (TTL) via setTimeToLive() in JMS\nDESCRIPTION: This code demonstrates how to configure message expiration using the `setTimeToLive()` method of the `MessageProducer` interface in JMS. It allows setting a default TTL for messages sent by a particular producer. The TTL is specified in milliseconds.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-set-the-message-expiration.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nproducer.setTimeToLive(long)\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumers Before Dispatch Starts in ActiveMQ\nDESCRIPTION: This XML snippet shows how to configure a destination policy to delay message dispatch until a certain number of consumers are present or a certain time has elapsed. This helps ensure equal message group distribution when adding consumers later.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\">\" consumersBeforeDispatchStarts=\"2\" timeBeforeDispatchStarts=\"2000\"/>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Checking ActiveMQ Classic Port (Unix)\nDESCRIPTION: This command uses `netstat` and `grep` to check if ActiveMQ Classic is listening on its default port (61616) in a Unix environment. `netstat -nl` displays network statistics, and `grep 61616` filters the output to show only lines containing \"61616\".  It verifies that the broker is running and listening for connections.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnetstat -nl|grep 61616\n```\n\n----------------------------------------\n\nTITLE: Configuring ShiroPlugin with Embedded shiro.ini Config (Spring XML)\nDESCRIPTION: This snippet shows how to embed the `shiro.ini` configuration directly within the Spring XML file.  The `iniConfig` property contains the entire `shiro.ini` content as a string value. This method keeps all configuration in one place but can make the XML file verbose.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<beans ...>\n    <broker ...>\n        <plugins ...>\n        \n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <property name=\"iniConfig\">\n                    <value>\n                    [main]\n\n                    # Shiro object graph configuration here if desired/necessary\n\n                    [users]\n                    system = manager, system\n\n                    [roles]\n                    system = *\n                    advisory = topic:ActiveMQ.Advisory*\n                    </value>\n                </property>\n            </bean>\n\n        </plugins>\n    </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Send at ConnectionFactory Level in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to enable asynchronous message sending at the `ActiveMQConnectionFactory` level.  Setting `useAsyncSend` to `true` on the connection factory makes all connections created from it send messages asynchronously. This is useful when you want to ensure all producers connected through that factory will send messages asynchronously.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/async-sends.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n((ActiveMQConnectionFactory)connectionFactory).setUseAsyncSend(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring ShiroPlugin with shiro.ini Resource Path (Spring XML)\nDESCRIPTION: This code snippet demonstrates how to configure the ShiroPlugin by referencing a `shiro.ini` file via its resource path. The `iniResourcePath` property points to the location of the `shiro.ini` file, allowing Shiro to load its configuration from an external file. This promotes separation of concerns.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<beans ...>\n    <broker ...>\n        <plugins>\n\n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <property name=\"iniResourcePath\" value=\"classpath:myshiro.ini\"/>\n            </bean>\n\n        </plugins>\n    </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Unique Property Message Eviction Strategy Configuration\nDESCRIPTION: This XML snippet configures a UniquePropertyMessageEvictionStrategy.  The `propertyName` attribute specifies the JMS message property that will be used to identify messages for eviction. This allows for application-specific eviction logic based on message content.  In this example, the property is set to \"STOCK\".\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-consumer-handling.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<uniquePropertyMessageEvictionStrategy propertyName=\"STOCK\"/>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Property Placeholder Configuration\nDESCRIPTION: This XML snippet configures a PropertyPlaceholderConfigurer in Spring to load credentials from a file. It enables the use of property placeholders within the ActiveMQ Classic configuration, allowing sensitive information like credentials to be externalized. It requires the Spring Beans library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/web-console.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n<property name=\"locations\">\n<value>file:${activemq.base}/conf/credentials.properties</value>\n</property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Broker with Default Configuration\nDESCRIPTION: This command starts the ActiveMQ Classic broker using the default configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-configuration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nactivemq\n```\n\n----------------------------------------\n\nTITLE: Failover Transport URL Example\nDESCRIPTION: This example shows how to configure the failover transport URL for clients to connect to available brokers in a JDBC Master Slave setup. The URL lists multiple broker addresses, allowing the client to automatically switch to a different broker if the current one fails.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-master-slave.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfailover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)\n```\n\n----------------------------------------\n\nTITLE: Listing All Running ActiveMQ Brokers (Default JMX Context)\nDESCRIPTION: This example demonstrates listing the names of all running ActiveMQ Classic brokers in the default JMX context. It uses the default JMX connection settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin list\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQ Store via amqPersistenceAdapter in XML\nDESCRIPTION: This snippet demonstrates how to configure the AMQ Store in ActiveMQ Classic using the amqPersistenceAdapter within the broker's XML configuration. It sets the directory for storing message data and logs, and configures the maximum file length of the data logs. It requires the activemq-broker dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amq-message-store.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <broker brokerName=\"broker\" persistent=\"true\" useShutdownHook=\"false\">\n    <persistenceAdapter>\n      <amqPersistenceAdapter directory=\"${activemq.base}/activemq-data\" maxFileLength=\"32mb\"/>\n    </persistenceAdapter>\n    <transportConnectors>\n      <transportConnector uri=\"tcp://localhost:61616\"/>\n    </transportConnectors>\n  </broker>\n```\n\n----------------------------------------\n\nTITLE: VM Transport Advanced Example URI with Persistence and Marshal\nDESCRIPTION: This example URI shows the advanced syntax to configure VM transport with broker persistence and marshalling disabled. The tcp transport is configured within the broker settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/vm-transport-reference.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nvm:(broker:(tcp://localhost:6000)?persistent=false)?marshal=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Revocation List (CRL) Path in XML\nDESCRIPTION: This XML snippet configures the certificate revocation list (CRL) path within the sslContext element. It specifies the location of the CRL file, allowing the broker to reject revoked certificates. It also defines the keystore and truststore locations and passwords.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<sslContext>\n    <sslContext keyStore=\"org/apache/activemq/security/broker1.ks\"\n                keyStorePassword=\"password\"\n                trustStore=\"org/apache/activemq/security/activemq-revoke.jks\"\n                trustStorePassword=\"password\"\n                crlPath=\"org/apache/activemq/security/activemq-revoke.crl\"/>\n</sslContext>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Limit via Connection URI - Queue Consumers\nDESCRIPTION: This snippet shows how to configure the prefetch limit specifically for queue consumers using the connection URI.  It sets the `jms.prefetchPolicy.queuePrefetch` parameter to 1, affecting only queue consumers connected via this URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/what-is-the-prefetch-limit-for.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=1\n```\n\n----------------------------------------\n\nTITLE: VM Transport URI\nDESCRIPTION: This example shows the simplest form of a VM transport URI for using an embedded broker within the same JVM as the JMS client.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nvm://locahost\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ KahaDB HA Broker Configuration\nDESCRIPTION: This snippet shows the configuration file (ha.xml) for setting up a KahaDB High Availability (HA) broker in ActiveMQ Classic. It assumes a ZooKeeper server is running on localhost at port 2181 and starts the broker using the specified configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kahadb-replication-experimental.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nprompt> $ACTIVEMQ_HOME/bin/activemq xbean:ha.xml\n```\n\n----------------------------------------\n\nTITLE: Customized VM Broker URI\nDESCRIPTION: This example shows a customized VM transport URI for configuring an embedded broker.  This specifies the broker name, and a transport configuration (tcp) to be used by the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nvm:broker:(tcp://localhost:61616)\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL Connector - XML\nDESCRIPTION: This XML snippet configures an SSL connector in `conf/jetty.xml` to enable secure connections to ActiveMQ. It specifies the port, keystore location, and password for the SSL connection. Uncommenting this bean enables SSL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"SecureConnector\" class=\"org.eclipse.jetty.server.ssl.SslSelectChannelConnector\">\n    <property name=\"port\" value=\"8162\" />\n    <property name=\"keystore\" value=\"file:${activemq.conf}/broker.ks\" />\n    <property name=\"password\" value=\"password\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Send via URI - ActiveMQ\nDESCRIPTION: This snippet shows how to enable asynchronous sending of persistent messages by setting the 'jms.useAsyncSend' property to 'true' in the connection URI. This allows the client to stream messages to the broker without waiting for acknowledgement for each message.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-enable-asynchronous-sending.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntcp://localhost:61616?jms.useAsyncSend=true\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration on Messages in DLQ in ActiveMQ Classic (XML)\nDESCRIPTION: This XML configuration demonstrates how to set an expiration time for messages in the DLQ in ActiveMQ Classic.  The `expiration` attribute of the `deadLetterStrategy` is set to a value in milliseconds. This is configured per queue to avoid unintended loops.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  \n  <destinationPolicy>\n   <policyMap>\n     <policyEntries>\n       <policyEntry queue=\"QueueWhereItIsOkToExpireDLQEntries\">\n         <deadLetterStrategy>\n           <.... expiration=\"300000\"/>\n         </deadLetterStrategy>\n       </policyEntry>\n     </policyEntries>\n   </policyMap>\n  </destinationPolicy>\n  \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Disabling Async Dispatch on Broker's Transport Connector - XML\nDESCRIPTION: This XML snippet demonstrates how to disable async dispatch on a specific transport connector in the ActiveMQ broker configuration.  Setting `disableAsyncDispatch` to `true` prevents clients connecting via this transport from enabling async dispatch, overriding any client-side settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/consumer-dispatch-async.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" disableAsyncDispatch=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Multicast Network Connector XML Configuration\nDESCRIPTION: This XML configuration example shows a multicast network connector. When using SSL with self-signed certificates, it is recommended to comment out this configuration to prevent certificate errors.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"multicast://default\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Feature URL in Karaf\nDESCRIPTION: This command adds the ActiveMQ features URL to Karaf, allowing the installation of ActiveMQ-related features. It specifies the ActiveMQ version to be used.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkaraf@root> features:chooseurl activemq 5.9.0\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenWire Format in Spring\nDESCRIPTION: This Spring XML configuration snippet demonstrates how to configure the OpenWire format within a Spring bean definition. It sets the brokerURL property of the ActiveMQConnectionFactory, including options like jms.optimizeAcknowledge and wireFormat.maxInactivityDuration. It requires the Spring framework and ActiveMQ client library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-wire-formats.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n  <property name=\"brokerURL\" value=\"failover:(tcp://localhost:61616?jms.optimizeAcknowledge=false&wireFormat.maxInactivityDuration=30000)\"/>\n  <!-- other options... -->\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Persistence without Journal (AMQ 3.x)\nDESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ broker for JDBC persistence without journaling in AMQ 3.x. It directly specifies the dataSource.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<persistence> \n  <jdbcPersistence dataSourceRef=\"derby-ds\"/> \n</persistence>\n```\n\n----------------------------------------\n\nTITLE: Sending to Mixed Destinations with JMS\nDESCRIPTION: This Java code demonstrates sending a message to a mix of queue and topic destinations using JMS and ActiveMQ's composite destination feature.  It creates a queue destination string with comma-separated queue and topic names and then sends a text message.  The `topic://` prefix is used to differentiate topic destinations from queues. It requires JMS and ActiveMQ client libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nDestination destination = session.createQueue(\"test-queue,test-queue-foo,topic://test-topic-foo\")\n```\n\n----------------------------------------\n\nTITLE: Producing Messages with ActiveMQ Classic using JMS and JNDI in Java\nDESCRIPTION: This Java code demonstrates a simple JMS producer that sends messages to a queue or topic using JNDI to look up the connection factory and destination. It takes the destination name as a command-line argument and an optional argument specifying the number of messages to send. The code creates a connection, session, and producer, then sends text messages to the specified destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * The SimpleQueueSender class consists only of a main method,\n * which sends several messages to a queue. \n * \n * Run this program in conjunction with SimpleQueueReceiver. \n * Specify a queue name on the command line when you run the \n * program. By default, the program sends one message. Specify \n * a number after the queue name to send that number of messages. \n */ \n\npackage org.apache.activemq.demo; \n\nimport javax.jms.Connection; \nimport javax.jms.ConnectionFactory; \nimport javax.jms.Destination; \nimport javax.jms.JMSException; \nimport javax.jms.MessageProducer; \nimport javax.jms.Session; \nimport javax.jms.TextMessage; \nimport javax.naming.Context; \nimport javax.naming.InitialContext; \nimport javax.naming.NamingException; \nimport org.slf4j.Logger; \nimport org.slf4j.LoggerFactory; \n/**\n * A simple polymorphic JMS producer which can work with Queues or Topics which \n * uses JNDI to lookup the JMS connection factory and destination.\n */ \npublic final class SimpleProducer { \n   private static final Logger LOG = LoggerFactory.getLogger(SimpleProducer.class); \n   private SimpleProducer() {}  \n  \n   /**\n    * @param args the destination name to send to and optionally, the number of \n    * messages to send \n    */ \n   public static void main(String[] args) { \n      Context jndiContext; \n      ConnectionFactory connectionFactory; \n      Connection connection; \n      Session session; \n      Destination destination; \n      MessageProducer producer; \n      String destinationName; \n      final int numMsgs;  \n      \n      if ((args.length < 1) || (args.length > 2)) { \n         LOG.info(\"Usage: java SimpleProducer <destination-name> [<number-of-messages>]\"); System.exit(1); \n      }  \n      \n      destinationName = args[0]; \n      LOG.info(\"Destination name is \" + destinationName); \n      \n      if (args.length == 2) { \n         numMsgs = (new Integer(args[1])).intValue(); \n      } else { \n         numMsgs = 1; \n      } \n      \n      /*\n       * Create a JNDI API InitialContext object \n       */\n      try { \n         jndiContext = new InitialContext(); \n      } catch (NamingException e) { \n         LOG.info(\"Could not create JNDI API context: \" + e.toString()); \n         System.exit(1); \n      }\n      \n      /* \n       * Look up connection factory and destination. \n       */\n      try { \n         connectionFactory = (ConnectionFactory)jndiContext.lookup(\"ConnectionFactory\"); \n         destination = (Destination)jndiContext.lookup(destinationName); \n      } catch (NamingException e) { \n         LOG.info(\"JNDI API lookup failed: \" + e); \n         System.exit(1); \n      }  \n      \n      /*\n       * Create connection. Create session from connection; false means \n       * session is not transacted. Create sender and text message. Send \n       * messages, varying text slightly. Send end-of-messages message. \n       * Finally, close the connection. \n       */ \n      try { \n         connection = connectionFactory.createConnection(); \n         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); \n         producer = session.createProducer(destination); \n         TextMessage message = session.createTextMessage();  \n         for (int i = 0; i < numMsgs; i++) { \n            message.setText(\"This is message \" + (i + 1)); \n            LOG.info(\"Sending message: \" + message.getText()); producer.send(message); \n         }  \n         \n         /*\n          * Send a non-text control message indicating end of messages. \n          */ \n         producer.send(session.createMessage()); \n      } catch (JMSException e) { \n         LOG.info(\"Exception occurred: \" + e); \n      } finally { \n         if (connection != null) { \n            try { \n               connection.close(); \n            } catch (JMSException ignored) {\n            } \n         } \n      } \n   } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KahaDB Persistence in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure ActiveMQ Classic to use KahaDB as its persistence adapter.  It sets the directory for storing data and configures the maximum size of the journal files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kahadb.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <broker brokerName=\"broker\">\n    <persistenceAdapter>\n      <kahaDB directory=\"activemq-data\" journalMaxFileLength=\"32mb\"/>\n    </persistenceAdapter>\n </broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Adapter in ActiveMQ\nDESCRIPTION: This snippet demonstrates how to explicitly specify the JDBC adapter within the activemq.xml configuration file. The `adapter` attribute is used to identify the specific adapter to use, such as `postgresql-jdbc-adapter` in this example. This configuration allows ActiveMQ to interact with the specified JDBC database for message persistence.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-support.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<jdbcPersistenceAdapter adapter=\"postgresql-jdbc-adapter\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Dispatch at ConnectionFactory - Java\nDESCRIPTION: This snippet demonstrates how to set the `dispatchAsync` property to `false` at the `ActiveMQConnectionFactory` level. This will cause the broker to perform synchronous dispatch to consumers created by this factory, potentially reducing context switching costs for fast consumers but increasing the risk of producer blocking for slow consumers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/consumer-dispatch-async.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n((ActiveMQConnectionFactory)connectionFactory).setDispatchAsync(false);\n```\n\n----------------------------------------\n\nTITLE: MasterSlave Discovery Configuration in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure a network connector in ActiveMQ using master-slave discovery. It uses the 'masterslave:' transport prefix to specify a list of broker URLs, designating them as master and slave brokers for establishing a network bridge.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors>\n  <networkConnector uri=\"masterslave:(tcp://host1:61616,tcp://host2:61616,tcp://..)\"/>\n</networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default JMX Connector (XML)\nDESCRIPTION: This snippet configures ActiveMQ Classic to use the default JVM JMX connector instead of creating its own.  Setting `createConnector` to `false` within the `<managementContext>` element achieves this.  This is typically done when configuring password protection for the JMX connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.org/config/1.0\" brokerName=\"localhost\"useJmx=\"true\">\n\n  ...\n\n  <managementContext>\n     <managementContext createConnector=\"false\"/>\n  </managementContext>\n\n  ...\n\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Start Broker using activemq.xml on Classpath\nDESCRIPTION: This example demonstrates how to start an ActiveMQ Classic broker using the `activemq.xml` configuration file located on the classpath. The `xbean:activemq.xml` URI specifies that the XML configuration should be loaded from the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-xbean-uri.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nxbean:activemq.xml\n```\n\n----------------------------------------\n\nTITLE: LDIF File for Populating LDAP Server with ActiveMQ Classic Data\nDESCRIPTION: This LDIF file provides a sample structure for an LDAP server to support ActiveMQ Classic authentication and authorization. It defines organizational units, users, groups, and access control lists for queues and topics. Passwords are defaulted and should be changed for production environments.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nversion: 1 \n# \n# Sample LDIF for ActiveMQ LDAP authentication and authorisation \n# Passwords are defaulted to \"password\" - it is your responsibility to change them! \n# \n# Sets up: \n# 1. Bind user \n# 2. A sample queue with admin,read,write permission assignments \n# 3. ActiveMQ Classic advisory topics \n# 4. Two groups - admin and webapp \n# 5. Two users - admin and webapp \n# 6. Role assignments - admin->admin, webapp->webapp \n# \n# (c) Robin Bramley 2008 # Provided as is without any warranty of any kind \n# \ndn: dc=acme,dc=com \ndc: acme \nobjectClass: domain \nobjectClass: top \n\ndn: ou=Services,dc=acme,dc=com \nou: Services \nobjectClass: organizationalUnit \nobjectClass: top \n\ndn: cn=mqbroker,ou=Services,dc=acme,dc=com \ncn: mqbroker \nobjectClass: organizationalRole \nobjectClass: top \nobjectClass: simpleSecurityObject \nuserPassword: {SSHA}j0NpveEO0YD5rgI5kY8OxSRiN5KQ/kE4 \ndescription: Bind user for MQ broker \n\ndn: ou=systems,dc=acme,dc=com \nou: systems \nobjectClass: organizationalUnit \nobjectClass: top \n\ndn: ou=ActiveMQ,ou=systems,dc=acme,dc=com \nobjectClass: organizationalUnit \nobjectClass: top \nou: ActiveMQ \n\ndn: ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=com \nobjectClass: organizationalUnit \nobjectClass: top \nou: Destination \n\ndn: ou=Queue,ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=com \nobjectClass: organizationalUnit \nobjectClass: top \nou: Queue \n\ndn: cn=com.acme.myfirstrealqueue,ou=Queue,ou=Destination,ou=ActiveMQ,ou=syst ems,dc=acme,dc=com \ncn: com.acme.myfirstrealqueue \ndescription: A queue \nobjectClass: applicationProcess \nobjectClass: top \n\ndn: cn=admin,cn=com.acme.myfirstrealqueue,ou=Queue,ou=Destination,ou=ActiveM Q,ou=systems,dc=acme,dc=com \ncn: admin \ndescription: Admin privilege group, members are roles \nmember: cn=admin \nmember: cn=webapp \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: cn=read,cn=com.acme.myfirstrealqueue,ou=Queue,ou=Destination,ou=ActiveMQ ,ou=systems,dc=acme,dc=com \ncn: read member: cn=webapp \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: cn=write,cn=com.acme.myfirstrealqueue,ou=Queue,ou=Destination,ou=ActiveM Q,ou=systems,dc=acme,dc=com \ncn: write \nobjectClass: groupOfNames \nobjectClass: top member: cn=webapp \n\ndn: ou=Topic,ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=co m \nobjectClass: organizationalUnit \nobjectClass: top \nou: Topic \n\ndn: cn=ActiveMQ.Advisory.Consumer,ou=Topic,ou=Destination,ou=ActiveMQ,ou=sys tems,dc=acme,dc=com \ncn: ActiveMQ.Advisory.Consumer \nobjectClass: applicationProcess \nobjectClass: top description: Advisory topic about consumers \n\ndn: cn=read,cn=ActiveMQ.Advisory.Consumer,ou=Topic,ou=Destination,ou=ActiveM Q,ou=systems,dc=acme,dc=com \ncn: read member: cn=webapp \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: cn=ActiveMQ.Advisory.TempQueue,ou=Topic,ou=Destination,ou=ActiveMQ,ou=sy stems,dc=acme,dc=com \ncn: ActiveMQ.Advisory.TempQueue \ndescription: Advisory topic about temporary queues \nobjectClass: applicationProcess \nobjectClass: top \n\ndn: cn=read,cn=ActiveMQ.Advisory.TempQueue,ou=Topic,ou=Destination,ou=Active MQ,ou=systems,dc=acme,dc=com \ncn: read member: cn=webapp \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: cn=ActiveMQ.Advisory.TempTopic,ou=Topic,ou=Destination,ou=ActiveMQ,ou=sy stems,dc=acme,dc=com \ncn: ActiveMQ.Advisory.TempTopic \nobjectClass: applicationProcess \nobjectClass: top \ndescription: Advisory topic about temporary topics \n\ndn: cn=read,cn=ActiveMQ.Advisory.TempTopic,ou=Topic,ou=Destination,ou=Active MQ,ou=systems,dc=acme,dc=com \ncn: read \nmember: cn=webapp \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: ou=Group,ou=ActiveMQ,ou=systems,dc=acme,dc=com \nobjectClass: organizationalUnit \nobjectClass: top \nou: Group \n\ndn: cn=admin,ou=Group,ou=ActiveMQ,ou=systems,dc=acme,dc=com \ncn: admin \nmember: uid=admin \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: cn=webapp,ou=Group,ou=ActiveMQ,ou=systems,dc=acme,dc=com \ncn: webapp \nmember: uid=webapp \nobjectClass: groupOfNames \nobjectClass: top \n\ndn: ou=User,ou=ActiveMQ,ou=systems,dc=acme,dc=com \nobjectClass: organizationalUnit \nobjectClass: top \nou: User \n\ndn: uid=admin,ou=User,ou=ActiveMQ,ou=systems,dc=acme,dc=com \nuid: admin \nuserPassword: {SSHA}j0NpveEO0YD5rgI5kY8OxSRiN5KQ/kE4 \nobjectClass: account \nobjectClass: simpleSecurityObject \nobjectClass: top \n\ndn: uid=webapp,ou=User,ou=ActiveMQ,ou=systems,dc=acme,dc=com \nuid: webapp \nuserPassword: {SSHA}j0NpveEO0YD5rgI5kY8OxSRiN5KQ/kE4 \nobjectClass: account \nobjectClass: simpleSecurityObject \nobjectClass: top\n```\n\n----------------------------------------\n\nTITLE: Enable DEBUG Logging in log4j.properties\nDESCRIPTION: This snippet shows the changes required in log4j.properties to switch the root logger level from INFO to DEBUG. This involves commenting out the INFO level line and uncommenting the DEBUG level line. This provides more detailed logging information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-the-logging.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n#log4j.rootLogger=INFO, stdout, out\nlog4j.logger.org.apache.activemq.spring=WARN\nlog4j.logger.org.springframework=WARN\nlog4j.logger.org.apache.xbean.spring=WARN\n\n# When debugging or reporting problems to the ActiveMQ team,\n# comment out the above lines and uncomment the next.\n\nlog4j.rootLogger=DEBUG, out, stdout\n```\n\n----------------------------------------\n\nTITLE: Simple Authentication Plugin with Anonymous Access\nDESCRIPTION: This snippet demonstrates enabling anonymous access using the SimpleAuthenticationPlugin in ActiveMQ Classic.  The `anonymousAccessAllowed` attribute, when set to `true`, allows clients to connect without providing a username or password, assigning them a default username (anonymous) and group (anonymous).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<simpleAuthenticationPlugin anonymousAccessAllowed=\"true\"> <users> <authenticationUser username=\"system\" password=\"manager\" groups=\"users,admins\"/> <authenticationUser username=\"user\" password=\"password\" groups=\"users\"/> <authenticationUser username=\"guest\" password=\"password\" groups=\"guests\"/> </users> </simpleAuthenticationPlugin>\n```\n\n----------------------------------------\n\nTITLE: Create Connection Pool - ActiveMQ Classic - Shell\nDESCRIPTION: Creates a connector connection pool in Glassfish, associating it with the deployed ActiveMQ resource adapter. This command specifies the resource adapter name, connection definition (javax.jms.ConnectionFactory), and enables pinging and connection validation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-glassfish.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/asadmin create-connector-connection-pool \\\n  --raname activemq-rar \\\n  --connectiondefinition javax.jms.ConnectionFactory \\\n  --ping true --isconnectvalidatereq true \\\n  jms/myConnectionPool\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker using Maven Plugin\nDESCRIPTION: This snippet shows how to run an ActiveMQ Classic broker using the ActiveMQ Startup Maven Plugin. It downloads and installs the plugin and then executes it to run the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/run-broker.md#_snippet_0\n\nLANGUAGE: Maven\nCODE:\n```\nmvn org.apache.activemq.tooling:maven-activemq-plugin:5.0-SNAPSHOT:run\n```\n\n----------------------------------------\n\nTITLE: Disabling Producer Flow Control for a Destination (XML)\nDESCRIPTION: This XML snippet shows how to disable producer flow control for a specific topic in ActiveMQ Classic using destination policies.  Setting `producerFlowControl` to `false` on a destination policy allows messages to be dispatched without flow control restrictions. This is configured within the broker's `activemq.xml` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/producer-flow-control.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry topic=\"FOO.>\" producerFlowControl=\"false\"/>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Limit via Destination Options (Queue)\nDESCRIPTION: This snippet illustrates how to configure the prefetch limit on a per-consumer basis using destination options. It creates an `ActiveMQQueue` with the `consumer.prefetchSize` parameter set to 10, which applies only to consumers created for this specific queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/what-is-the-prefetch-limit-for.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nqueue = new ActiveMQQueue(\"TEST.QUEUE?consumer.prefetchSize=10\");\nconsumer = session.createConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP to JMS Transformer in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows how to configure the AMQP to JMS transformer in ActiveMQ Classic. The `transport.transformer` parameter specifies the strategy for mapping AMQP messages to JMS messages, allowing for interoperability with JMS applications.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amqp.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"amqp\" uri=\"amqp://localhost:5672?transport.transformer=jms\"/>\n```\n\n----------------------------------------\n\nTITLE: NIO Configuration with Protocol Suffix\nDESCRIPTION: Shows how to configure NIO transport for protocols other than OpenWire, such as MQTT, AMQP, or Stomp. It demonstrates using the '+nio' suffix to specify the NIO transport for a particular protocol.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/nio-transport-reference.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmqtt+nio://localhost:1883\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Send using a Connection URI in C#\nDESCRIPTION: This code snippet demonstrates how to configure asynchronous message sending using a connection URI with the Apache.NMS.ActiveMQ library. The `nms.AsyncSend=true` parameter in the connection URI enables async sends. This configuration improves performance by allowing the producer to send messages without waiting for acknowledgement, tolerating a small amount of message loss in failure scenarios.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/async-sends.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory(\"tcp://locahost:61616?nms.AsyncSend=true\");\n```\n\n----------------------------------------\n\nTITLE: jTDS DataSource Configuration (XML)\nDESCRIPTION: Defines a bean for the jTDS DataSource. It specifies the server name, port number, database name, user, and password properties for connecting to the SQL Server database. The configuration uses the net.sourceforge.jtds.jdbcx.JtdsDataSource class.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sqlserver.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mssql-ds\" class=\"net.sourceforge.jtds.jdbcx.JtdsDataSource\">\n   <property name=\"serverName\" value=\"SERVERNAME\"/>\n   <property name=\"portNumber\" value=\"PORTNUMBER\"/>\n   <property name=\"databaseName\" value=\"DATABASENAME\"/>\n   <property name=\"user\" value=\"USER\"/>\n   <property name=\"password\" value=\"PASSWORD\"/>\n </bean>\n```\n\n----------------------------------------\n\nTITLE: Broker Properties URI Syntax - ActiveMQ Classic\nDESCRIPTION: Defines the syntax for specifying a broker properties URI in ActiveMQ Classic. The `name` is resolved on the classpath, as a local file, or a remote URL, pointing to the properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-properties-uri.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nproperties:name\n```\n\n----------------------------------------\n\nTITLE: Receiving BlobMessage - Java\nDESCRIPTION: This snippet shows how to receive a BlobMessage and access its InputStream. It implements a MessageListener, checks if the received message is a BlobMessage, casts it, and then retrieves the InputStream to process the blob data.  It requires a MessageListener implementation to be set on a MessageConsumer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/blob-messages.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MyListener implements MessageListener {\n  public void onMessage(Message message) {\n    if (message instanceof BlobMessage) {\n      BlobMessage blobMessage = (BlobMessage) message;\n      InputStream in = blobMessage.getInputStream();\n\n      // process the stream...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Failover URI Configuration - Nested Options - ActiveMQ (Java)\nDESCRIPTION: This example demonstrates the use of nested URI options in ActiveMQ. By using the 'nested.' prefix, the 'wireFormat.maxInactivityDuration' option is applied to all URIs within the failover configuration. This simplifies the configuration and avoids repetition.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfailover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)?nested.wireFormat.maxInactivityDuration=1000\n```\n\n----------------------------------------\n\nTITLE: Broker URI Syntax\nDESCRIPTION: This code snippet shows the general syntax for defining a Broker URI in ActiveMQ Classic.  The URI allows specifying transport connectors, network connectors, a broker name, and various broker options. The URI supports defining multiple connectors through the composite URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-uri.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbroker:(transportURI,network:networkURI)/brokerName?brokerOptions\n```\n\n----------------------------------------\n\nTITLE: Creating Embedded Broker (Java)\nDESCRIPTION: This snippet shows how to explicitly create and start an embedded ActiveMQ Classic broker instance in Java code.  It disables persistence to avoid issues with previous test results affecting future tests. Requires importing the BrokerService class from ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\nbroker.setPersistent(false);\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: Tuning Prefetch Size for AMQP Connections in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to tune the default prefetch size for AMQP connections in ActiveMQ Classic. The `transport.prefetch` parameter allows overriding the client-specified prefetch value, and `transport.producerCredit` allows tuning the credit given to amqp receiver link.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amqp.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;transport.prefetch=10\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQConnectionFactory in Spring\nDESCRIPTION: This XML snippet demonstrates how to create an ActiveMQConnectionFactory bean in a Spring configuration file. It configures the brokerURL property to connect to a remote ActiveMQ Classic broker on localhost at port 61616.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/spring-support.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"jmsFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n  <property name=\"brokerURL\">\n    <value>tcp://localhost:61616</value>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Transport for Auto-Reconnect\nDESCRIPTION: This snippet demonstrates how to configure a failover transport URI to enable automatic reconnection to the ActiveMQ Classic broker in case of failure.  The connection URI is modified to use the `failover:` prefix.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/run-broker.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nfailover:tcp://host:port\n```\n\n----------------------------------------\n\nTITLE: Failover Transport URL Configuration\nDESCRIPTION: This code snippet shows how to configure the Failover Transport URL for clients connecting to the broker nodes in the replication cluster. It provides an example URL with multiple broker addresses.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/replicated-leveldb-store.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfailover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)\n```\n\n----------------------------------------\n\nTITLE: Creating Broker with ActiveMQConnectionFactory in Java\nDESCRIPTION: This Java code creates an embedded broker using the ActiveMQConnectionFactory. The 'vm://' transport is used, and broker properties can be configured using query parameters in the URI. This allows for programmatic configuration of the embedded broker. Broker is created on first connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\n```\n\n----------------------------------------\n\nTITLE: Failover Transport URL in ActiveMQ Classic\nDESCRIPTION: This URL configures the Failover Transport for clients to connect to multiple brokers. The client will automatically attempt to connect to the other brokers in the list if the current connection fails, enabling high availability. The list of brokers is provided as comma-separated TCP URLs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shared-file-system-master-slave.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfailover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionFactory JNDI Resource in Tomcat 5.5+\nDESCRIPTION: This XML snippet provides an alternative configuration for the ConnectionFactory JNDI resource in Tomcat 5.5 and later. It simplifies the configuration by including the factory and broker URL directly in the Resource element.  It is important to place the ActiveMQ Classic and dependent JARs in Tomcat's shared lib directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tomcat.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Context>\n    ...\n  <Resource name=\"jms/ConnectionFactory\" auth=\"Container\" type=\"org.apache.activemq.ActiveMQConnectionFactory\" description=\"JMS Connection Factory\"\n        factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\" brokerURL=\"vm://localhost\" brokerName=\"LocalActiveMQBroker\"/>\n    ....\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Component with Credentials\nDESCRIPTION: Configures the Camel ActiveMQ component to use the current broker with specified username and password.  It defines a bean that sets the brokerURL, userName, and password for the ActiveMQConnectionFactory, enabling secure connection to the broker. Requires the org.apache.activemq.camel.component.ActiveMQComponent.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- configure the camel activemq component to use the current broker -->\n<bean id=\"activemq\" class=\"org.apache.activemq.camel.component.ActiveMQComponent\" >\n  <property name=\"connectionFactory\"> \n    <bean class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n      <property name=\"brokerURL\" value=\"vm://localhost?create=false&amp;waitForStart=10000\" />\n      <property name=\"userName\" value=\"system\"/> \n      <property name=\"password\" value=\"manager\"/>\n    </bean>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: NMS Synchronous Message Consumption C#\nDESCRIPTION: This C# code snippet demonstrates how to connect to an ActiveMQ broker, create a session, define a destination queue, send a text message, and then synchronously receive and process that message. It uses the Apache.NMS library for message queuing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/examples/nms-simple-synchronous-consumer-example.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nusing System;\nusing Apache.NMS;\nusing Apache.NMS.Util;\n\nnamespace Apache.NMS.ActiveMQ.Test\n{\npublic class TestMain\n{\n    public static void Main(string[] args)\n    {\n        // Example connection strings:\n        //    activemq:tcp://activemqhost:61616\n        //    stomp:tcp://activemqhost:61613\n        //    ems:tcp://tibcohost:7222\n        //    msmq://localhost\n\n        Uri connecturi = new Uri(\"activemq:tcp://activemqhost:61616\");\n        \n        Console.WriteLine(\"About to connect to \" + connecturi);\n\n        // NOTE: ensure the nmsprovider-activemq.config file exists in the executable folder.\n        IConnectionFactory factory = new NMSConnectionFactory(connecturi);\n\n        using(IConnection connection = factory.CreateConnection())\n        using(ISession session = connection.CreateSession())\n        {\n             // Examples for getting a destination:\n             //\n             // Hard coded destinations:\n             //    IDestination destination = session.GetQueue(\"FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //    IDestination destination = session.GetTopic(\"FOO.BAR\");\n             //    Debug.Assert(destination is ITopic);\n             //\n             // Embedded destination type in the name:\n             //    IDestination destination = SessionUtil.GetDestination(session, \"queue://FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //    IDestination destination = SessionUtil.GetDestination(session, \"topic://FOO.BAR\");\n             //    Debug.Assert(destination is ITopic);\n             //\n             // Defaults to queue if type is not specified:\n             //    IDestination destination = SessionUtil.GetDestination(session, \"FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //\n             // .NET 3.5 Supports Extension methods for a simplified syntax:\n             //    IDestination destination = session.GetDestination(\"queue://FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //    IDestination destination = session.GetDestination(\"topic://FOO.BAR\");\n             //    Debug.Assert(destination is ITopic);\n\n            IDestination destination = SessionUtil.GetDestination(session, \"queue://FOO.BAR\");\n            Console.WriteLine(\"Using destination: \" + destination);\n\n            // Create a consumer and producer\n            using(IMessageConsumer consumer = session.CreateConsumer(destination))\n            using(IMessageProducer producer = session.CreateProducer(destination))\n            {\n                // Start the connection so that messages will be processed.\n                connection.Start();\n\t\t\t\tproducer.DeliveryMode = MsgDeliveryMode.Persistent;\n\t\t\t\t\t\n                // Send a message\n                ITextMessage request = session.CreateTextMessage(\"Hello World!\");\n                request.NMSCorrelationID = \"abc\";\n                request.Properties[\"NMSXGroupID\"] = \"cheese\";\n                request.Properties[\"myHeader\"] = \"Cheddar\";\n\n                producer.Send(request);\n\n                // Consume a message\n                ITextMessage message = consumer.Receive() as ITextMessage;\n                if(message == null)\n                {\n                    Console.WriteLine(\"No message received!\");\n                }\n                else\n                {\n                    Console.WriteLine(\"Received message with ID:   \" + message.NMSMessageId);\n                    Console.WriteLine(\"Received message with text: \" + message.Text);\n                }\n            }\n        }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Client Certificate using Keytool\nDESCRIPTION: This command generates a certificate for the client using the keytool utility. It creates a keystore named client.ks with an alias 'client' and uses the RSA algorithm.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -alias client -keyalg RSA -keystore client.ks\n```\n\n----------------------------------------\n\nTITLE: Spring Bean Configuration: ActiveMQConnectionFactory\nDESCRIPTION: This XML snippet demonstrates the Spring bean configuration for ActiveMQConnectionFactory. It shows that the Spring bean definitions do not change even when supporting Jakarta Messaging. The class name remains the same, regardless of the JMS API being used.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms2.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n```\n\n----------------------------------------\n\nTITLE: Enabling MQTT Transport Connector in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to add a transport connector to the ActiveMQ Classic broker to enable MQTT support.  It configures the broker to listen for MQTT connections on the default port 1883.  No specific dependencies are required beyond the ActiveMQ Classic broker itself.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n   <transportConnector name=\"mqtt\" uri=\"mqtt://localhost:1883\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Tuning Producer Credit for AMQP Connections in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to tune the producer credit for AMQP connections in ActiveMQ Classic. The `transport.producerCredit` parameter allows overriding the broker-side `amqp` receiver link that handles incoming messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amqp.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;transport.producerCredit=10000\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in ra.xml (Updated)\nDESCRIPTION: This XML snippet shows the updated configuration in ra.xml, where the tcp:// transport is commented out and the vm:// transport is uncommented. This configures ActiveMQ Classic to use the in-VM protocol for communication, which is more efficient for embedded brokers. The snippet ensures that the ActiveMQ Classic resource adapter uses the embedded broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      The URL to the ActiveMQ Classic server that you want this connection to connect to.  If using\n      an embedded broker, this value should be 'vm://localhost'.\n    </description>\n    <config-property-name>ServerUrl</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <!-- <config-property-value>tcp://localhost:61616</config-property-value> -->\n    <config-property-value>vm://localhost</config-property-value>\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Broker (AMQ 3.x/4.x)\nDESCRIPTION: This snippet demonstrates the basic command to start the ActiveMQ broker.  It assumes that the activemq.xml file is on the classpath. This approach works on both AMQ 3.x and 4.x versions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nactivemq\n```\n\n----------------------------------------\n\nTITLE: NMS Asynchronous Consumer Example in C#\nDESCRIPTION: This C# code demonstrates how to create an NMS consumer to asynchronously receive messages from an Apache ActiveMQ queue. It establishes a connection, creates a session, defines a destination queue, and sets up a message listener to process incoming messages. The example also includes sending a test message to the queue and waiting for the asynchronous reception.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/examples/nms-simple-asynchronous-consumer-example.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/* \n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nusing System;\nusing System.Threading;\nusing Apache.NMS;\nusing Apache.NMS.Util;\n\nnamespace Apache.NMS.ActiveMQ.Test\n{\npublic class TestMain\n{\n    protected static AutoResetEvent semaphore = new AutoResetEvent(false);\n    protected static ITextMessage message = null;\n    protected static TimeSpan receiveTimeout = TimeSpan.FromSeconds(10);\n\n    public static void Main(string[] args)\n    {\n        // Example connection strings:\n        //    activemq:tcp://activemqhost:61616\n        //    stomp:tcp://activemqhost:61613\n        //    ems:tcp://tibcohost:7222\n        //    msmq://localhost\n\n        Uri connecturi = new Uri(\"activemq:tcp://activemqhost:61616\");\n\n        Console.WriteLine(\"About to connect to \" + connecturi);\n\n        // NOTE: ensure the nmsprovider-activemq.config file exists in the executable folder.\n        IConnectionFactory factory = new NMSConnectionFactory(connecturi);\n\n        using(IConnection connection = factory.CreateConnection())\n        using(ISession session = connection.CreateSession())\n        {\n             // Examples for getting a destination:\n             //\n             // Hard coded destinations:\n             //    IDestination destination = session.GetQueue(\"FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //    IDestination destination = session.GetTopic(\"FOO.BAR\");\n             //    Debug.Assert(destination is ITopic);\n             //\n             // Embedded destination type in the name:\n             //    IDestination destination = SessionUtil.GetDestination(session, \"queue://FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //    IDestination destination = SessionUtil.GetDestination(session, \"topic://FOO.BAR\");\n             //    Debug.Assert(destination is ITopic);\n             //\n             // Defaults to queue if type is not specified:\n             //    IDestination destination = SessionUtil.GetDestination(session, \"FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //\n             // .NET 3.5 Supports Extension methods for a simplified syntax:\n             //    IDestination destination = session.GetDestination(\"queue://FOO.BAR\");\n             //    Debug.Assert(destination is IQueue);\n             //    IDestination destination = session.GetDestination(\"topic://FOO.BAR\");\n             //    Debug.Assert(destination is ITopic);\n            IDestination destination = SessionUtil.GetDestination(session, \"queue://FOO.BAR\");\n\n            Console.WriteLine(\"Using destination: \" + destination);\n\n            // Create a consumer and producer\n            using(IMessageConsumer consumer = session.CreateConsumer(destination))\n            using(IMessageProducer producer = session.CreateProducer(destination))\n            {\n                // Start the connection so that messages will be processed.\n                connection.Start();\n\t\tproducer.DeliveryMode = MsgDeliveryMode.Persistent;\n                producer.RequestTimeout = receiveTimeout;\n\n                consumer.Listener += new MessageListener(OnMessage);\n\n                // Send a message\n                ITextMessage request = session.CreateTextMessage(\"Hello World!\");\n                request.NMSCorrelationID = \"abc\";\n                request.Properties[\"NMSXGroupID\"] = \"cheese\";\n                request.Properties[\"myHeader\"] = \"Cheddar\";\n\n                producer.Send(request);\n\n                // Wait for the message\n                semaphore.WaitOne((int) receiveTimeout.TotalMilliseconds, true);\n\n                if(message == null)\n                {\n                    Console.WriteLine(\"No message received!\");\n                }\n                else\n                {\n                    Console.WriteLine(\"Received message with ID:   \" + message.NMSMessageId);\n                    Console.WriteLine(\"Received message with text: \" + message.Text);\n                }\n            }\n        }\n    }\n\n    protected static void OnMessage(IMessage receivedMsg)\n    {\n        message = receivedMsg as ITextMessage;\n        semaphore.Set();\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AMQ with Unique ClientId - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to initialize `amq.js` with a unique `clientId`.  Using a unique client ID allows multiple browser windows to coexist without interfering with each other's message subscriptions. The example uses the current time as the `clientId` to ensure uniqueness within a session.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ajax.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\norg.activemq.Amq.init({\n  uri: 'amq',\n  logging: true,\n  timeout: 45,\n  clientId:(new Date()).getTime().toString()\n});\n```\n\n----------------------------------------\n\nTITLE: Using CallerRunsPolicy in ActiveMQ Classic Java\nDESCRIPTION: This code snippet shows how to use a `ThreadPoolExecutor.CallerRunsPolicy` as a rejected task handler for the ActiveMQ Classic connection factory. This prevents exceptions when the thread pool reaches its maximum size by executing rejected tasks in the calling thread, avoiding potential application crashes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-deal-with-large-number-of-threads-in-clients.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nconnectionFactory.setRejectedTaskHandler(new ThreadPoolExecutor.CallerRunsPolicy());\nConnection conn = connectionFactory.createConnection();\nconn.start();\n```\n\n----------------------------------------\n\nTITLE: Sending to Composite Destinations with JMS\nDESCRIPTION: This Java code demonstrates sending a message to multiple destinations (queues) using JMS and ActiveMQ's composite destination feature.  It creates a queue destination string with comma-separated queue names and then sends a text message. It requires JMS and ActiveMQ client libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDestination destination = session.createQueue(\"test-queue,test-queue-foo\")\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"Message #\" + i);\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Password-Protected JMX (Java)\nDESCRIPTION: This snippet illustrates the JMX URL format required to connect to a password-protected ActiveMQ Classic broker.  Replace `<your hostname>` with the actual hostname or IP address of the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nservice:jmx:rmi:///jndi/rmi://<your hostname>:1616/jmxrmi\n```\n\n----------------------------------------\n\nTITLE: Oracle DataSource Sample Setup (Commented)\nDESCRIPTION: This commented-out example illustrates the configuration of an Oracle DataSource for use with ActiveMQ Classic. It employs `org.apache.commons.dbcp.BasicDataSource` and specifies the driver class name, JDBC URL, username, password, and connection pooling properties.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-master-slave.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  <bean id=\"oracle-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"oracle.jdbc.driver.OracleDriver\"/>\n    <property name=\"url\" value=\"jdbc:oracle:thin:@localhost:1521:AMQDB\"/>\n    <property name=\"username\" value=\"scott\"/>\n    <property name=\"password\" value=\"tiger\"/>\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n  </bean>\n  -->\n```\n\n----------------------------------------\n\nTITLE: Set CATALINA_OPTS to Disable Hawtio Authentication in Tomcat\nDESCRIPTION: This shell command sets the `CATALINA_OPTS` environment variable to disable Hawtio authentication in Tomcat, deferring authentication to the Artemis broker connection. This is done by setting the `hawtio.authenticationEnabled` system property to `false`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport CATALINA_OPTS=\"-Dhawtio.authenticationEnabled=false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TransportConnector in ActiveMQ Classic Broker XML\nDESCRIPTION: This snippet demonstrates configuring a TransportConnector with server-side options in an ActiveMQ Classic broker's XML configuration file. It shows how to set the `uri`, `name`, and `enableStatusMonitor` attributes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-4-connection-uris.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" enableStatusMonitor=\"true\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: JMS Resource Management Example (Java)\nDESCRIPTION: This code snippet demonstrates the correct pattern for obtaining, using, and releasing JMS resources within a try-finally block to prevent resource leaks, especially in multi-threaded environments. It highlights the importance of releasing resources in the `finally` block to ensure cleanup even if exceptions occur during usage.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javalangoutofmemory.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nobtainJmsResource(); \n\ntry \n{ \n    useJmsResource() \n} finally { \n    releaseJmsResource(); \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Address/Port with SSL URI in ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates how to define the local address and local port for an SSL transport using the URI path in ActiveMQ Classic. The URI format is `ssl://host:port/localAddress:localPort`.  This is useful when the client needs to bind to a specific local address and port.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-define-a-local-address-and-local-port-for-tcp-or-ssl.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nssl://localhost:5666/localhost:60606\n```\n\n----------------------------------------\n\nTITLE: Initializing Broker with Java Code\nDESCRIPTION: This Java snippet demonstrates how to create and start an embedded ActiveMQ Classic broker using explicit Java code. It configures a TCP connector on localhost at port 61616 and starts the broker. This is useful for optimizing network hops in JMS applications.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\n\n// configure the broker\nbroker.addConnector(\"tcp://localhost:61616\");\n\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Delayed Message in ActiveMQ using NMS (C#)\nDESCRIPTION: This code snippet demonstrates how to schedule a message for delivery after a specified delay using the `AMQ_SCHEDULED_DELAY` property. It creates a producer, a text message, sets the delay property to 60 seconds (60000 milliseconds), and sends the message.  The ActiveMQ broker must have scheduler support enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/delay-and-schedule-message-feature.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nlong time = 60 * 1000;\nmessage.Properties[\"AMQ_SCHEDULED_DELAY\"] = time;\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Policies for Topics - XML\nDESCRIPTION: This snippet shows an example of configuring destination policies for topics in ActiveMQ Classic. It includes various policy entries for different topics, specifying dispatch policies, subscription recovery policies, and pending message limit strategies. This allows fine-grained control over message handling and delivery for specific topic patterns.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/dispatch-policies.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n   <policyMap>\n      <policyEntries>\n         <policyEntry topic=\"FOO.>\">\n            <dispatchPolicy>\n               <roundRobinDispatchPolicy />\n            </dispatchPolicy>\n            <subscriptionRecoveryPolicy>\n               <lastImageSubscriptionRecoveryPolicy />\n            </subscriptionRecoveryPolicy>\n         </policyEntry>\n         <policyEntry topic=\"ORDERS.>\">\n            <dispatchPolicy>\n               <strictOrderDispatchPolicy />\n            </dispatchPolicy>\n            <!-- 1 minutes worth -->\n            <subscriptionRecoveryPolicy>\n               <timedSubscriptionRecoveryPolicy recoverDuration=\"60000\" /> \n            </subscriptionRecoveryPolicy>\n         </policyEntry>\n         <policyEntry topic=\"PRICES.>\">\n            <!-- lets force old messages to be discarded for slow consumers --> \n            <pendingMessageLimitStrategy>\n               <constantPendingMessageLimitStrategy limit=\"10\"/>\n            </pendingMessageLimitStrategy>\n            <!-- 10 seconds worth -->\n            <subscriptionRecoveryPolicy>\n               <timedSubscriptionRecoveryPolicy recoverDuration=\"10000\" />\n            </subscriptionRecoveryPolicy>\n         </policyEntry>\n         <policyEntry tempTopic=\"true\" advisoryForConsumed=\"true\" />\n         <policyEntry tempQueue=\"true\" advisoryForConsumed=\"true\" />\n      </policyEntries>\n   </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Transport URI in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the failover transport URI in ActiveMQ Classic using the ActiveMQConnectionFactory. The failover transport ensures that the JMS client automatically reconnects to the broker in case of a socket exception. This configuration is used as the brokerURL in the ActiveMQConnectionFactory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-support-auto-reconnection.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nfailover:tcp://host:port\n```\n\n----------------------------------------\n\nTITLE: Customizing SecurityContextFactory (Spring XML)\nDESCRIPTION: This snippet shows how to customize the `SecurityContextFactory` used by the Shiro plugin, by defining a bean of type `com.my.SecurityContextFactory` and injecting it into the `subjectFilter.securityContextFactory` property of the `shiroPlugin` bean. This allows for customization of `SecurityContext` creation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n    <property name=\"subjectFilter.securityContextFactory\">\n        <bean class=\"com.my.SecurityContextFactory\" .../>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Slave Authentication in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure authentication for a slave broker connecting to the master using the `<masterConnector/>` element.  It specifies the `remoteURI`, `userName`, and `password` for the slave to authenticate with the master.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pure-master-slave.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"slave\" useJmx=\"false\"  deleteAllMessagesOnStartup=\"true\"  xmlns=\"http://activemq.apache.org/schema/core\">\n  <services>\n    <masterConnector remoteURI= \"tcp://localhost:62001\" userName=\"James\" password=\"Cheese\"/>\n  </services>\n\n  <transportConnectors>\n    <transportConnector uri=\"tcp://localhost:62002\"/>\n  </transportConnectors>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Send using Connection URI in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to enable asynchronous message sending using a connection URI in ActiveMQ Classic. By appending `jms.useAsyncSend=true` to the connection string, all messages sent through this connection will be sent asynchronously. This can improve performance, especially for persistent messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/async-sends.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncf = new ActiveMQConnectionFactory(\"tcp://locahost:61616?jms.useAsyncSend=true\");\n```\n\n----------------------------------------\n\nTITLE: Listing Available Karaf Features\nDESCRIPTION: This command lists the available Karaf features after adding the ActiveMQ features URL. It shows the ActiveMQ broker, HTTP, Camel, and web console features.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkaraf@root> features:list\nState         Version         Name                 Repository\n[uninstalled] [5.9.0         ] activemq-broker               activemq-5.9.0        \n[uninstalled] [5.9.0         ] activemq-http                 activemq-5.9.0        \n[uninstalled] [5.9.0         ] activemq-camel                activemq-5.9.0        \n[uninstalled] [5.9.0         ] activemq-web-console          activemq-5.9.0\n```\n\n----------------------------------------\n\nTITLE: Using Failover Transport with Stomp ConnectionFactory Directly - C#\nDESCRIPTION: This snippet demonstrates configuring failover transport when initializing the Stomp ConnectionFactory directly. It provides a simplified way to specify failover with the Stomp connection factory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/uri-configuration.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new Apache.NMS.Stomp.ConnectionFactory(\"failover:tcp://localhost:61613\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Interceptor in ActiveMQ using XML\nDESCRIPTION: This XML configuration enables the Logging Interceptor in ActiveMQ, setting the `logAll` attribute to `true` to log all events and disabling `logConnectionEvents` by setting it to `false`.  The configuration utilizes Spring Beans and ActiveMQ core schema definitions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/logging-interceptor.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans \n  xmlns=\"http://www.springframework.org/schema/beans\" \n  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n  <broker useJmx=\"false\" persistent=\"false\" xmlns=\"http://activemq.apache.org/schema/core\">\n    <plugins>\n    \n      <!-- lets enable detailed logging in the broker but ignore ConnectionEvents -->\n      <loggingBrokerPlugin logAll=\"true\" logConnectionEvents=\"false\"/>\n      \n      <timeStampingBrokerPlugin zeroExpirationOverride=\"1000\" ttlCeiling=\"60000\" futureOnly=\"true\"/>    \n      <traceBrokerPathPlugin/>\n      \n    </plugins>\n  </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Setting Slow KahaDB Access Logging Threshold\nDESCRIPTION: This snippet shows how to set a system property to configure the threshold (in milliseconds) for logging slow KahaDB access times.  This helps diagnose performance issues related to disk access.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kahadb.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-Dorg.apache.activemq.store.kahadb.LOG_SLOW_ACCESS_TIME=1500\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins with XBean and Spring Beans (XML)\nDESCRIPTION: This example demonstrates how to configure plugins using both XBean custom XML and regular Spring beans within the `<plugins>` tag in ActiveMQ Classic. It includes a `simpleAuthenticationPlugin` configured with XBean and a `loggingPlugin` configured as a Spring bean.  This configuration method is necessary when both XBean-configured and Spring-configured plugins are used together.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/developing-plugins.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n    <simpleAuthenticationPlugin>\n      <users>\n        <authenticationUser username=\"system\" password=\"manager\"\n          groups=\"users,admins\"/>\n        <authenticationUser username=\"user\" password=\"password\"\n          groups=\"users\"/>\n        <authenticationUser username=\"guest\" password=\"password\" groups=\"guests\"/>\n      </users>\n    </simpleAuthenticationPlugin>  \n    <bean xmlns=\"http://www.springframework.org/schema/beans\" \n          id=\"loggingPlugin\" \n          class=\"org.apache.activemq.broker.util.LoggingBrokerPlugin\"\n    />\n</plugins>  \n```\n\n----------------------------------------\n\nTITLE: Client TCP Transport Configuration\nDESCRIPTION: Example of configuring the TCP transport on the client side using the brokerURL.  Note the omission of the `transport.*` prefix for client-side configuration. Includes thread name, trace, and socket timeout settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tcp-transport-reference.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntcp://localhost:61616?threadName&trace=false&soTimeout=60000\n```\n\n----------------------------------------\n\nTITLE: Replicated LevelDB Store Configuration in ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates the XML configuration for enabling the Replicated LevelDB Store within the ActiveMQ Classic broker. It includes properties such as directory, replicas, bind address, ZooKeeper address, and security settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/replicated-leveldb-store.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"broker\" ... >\n  ...\n  <persistenceAdapter>\n    <replicatedLevelDB\n      directory=\"activemq-data\"\n      replicas=\"3\"\n      bind=\"tcp://0.0.0.0:0\"\n      zkAddress=\"zoo1.example.org:2181,zoo2.example.org:2181,zoo3.example.org:2181\"\n      zkPassword=\"password\"\n      zkPath=\"/activemq/leveldb-stores\"\n      hostname=\"broker1.example.org\"\n      />\n  </persistenceAdapter>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Sending BlobMessage with File - Java\nDESCRIPTION: This snippet shows how to create and send a BlobMessage from a local file. It uses the createBlobMessage method of the ActiveMQSession, passing a File object. The message is then sent using a MessageProducer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/blob-messages.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// lets use a local file\nBlobMessage message = session.createBlobMessage(new File(\"/foo/bar\");\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Sending Message via POST\nDESCRIPTION: This snippet illustrates a basic (and non-RESTful) approach to sending a message to a queue using an HTTP POST request. The destination queue is specified in the URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /queue/Destination\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages in a Transaction via ActiveMQ CLI\nDESCRIPTION: This command consumes messages within a transaction using the ActiveMQ Classic command-line tool.  The `--transacted true` parameter enables transactional consumption.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq consumer --transacted true\n```\n\n----------------------------------------\n\nTITLE: Enabling AMQP over NIO in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows how to configure ActiveMQ Classic to use NIO for the AMQP protocol, which can improve scalability and performance. Using `amqp+nio` as the transport scheme enables the NIO transport.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amqp.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"amqp+nio\" uri=\"amqp+nio://localhost:5672\"/>\n```\n\n----------------------------------------\n\nTITLE: JMX Access File Content\nDESCRIPTION: This snippet shows the contents of a jmx.access file, which defines the roles and their access permissions for JMX connections. 'monitorRole' has readonly access and 'controlRole' has readwrite access. This file is used in conjunction with a password file to secure the JMX connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# The \"monitorRole\" role has readonly access.\n# The \"controlRole\" role has readwrite access.\nmonitorRole readonly\ncontrolRole readwrite\n```\n\n----------------------------------------\n\nTITLE: Peer Transport Configuration Syntax\nDESCRIPTION: This snippet shows the general syntax for configuring the Peer transport in ActiveMQ Classic. It includes the peer group, broker name, and optional broker options as query parameters. The brokerOptions allow customizing the embedded broker's behavior.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/peer-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npeer://peer-group/brokerName?brokerOptions\n```\n\n----------------------------------------\n\nTITLE: Configure Stomp Logging to Separate File in ActiveMQ Classic (log4j)\nDESCRIPTION: This `log4j.properties` snippet configures a separate appender named `stomp` to write Stomp-related logs to a dedicated file (`data/stomp.log`). It defines the file path, size limits, backup index, and logging pattern for these logs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.appender.stomp=org.apache.log4j.RollingFileAppender\nlog4j.appender.stomp.file=${activemq.base}/data/stomp.log\nlog4j.appender.stomp.maxFileSize=1024KB\nlog4j.appender.stomp.maxBackupIndex=5\nlog4j.appender.stomp.append=true\nlog4j.appender.stomp.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stomp.layout.ConversionPattern=%d \\[%-15.15t\\] %-5p %-30.30c{1} - %m%n\n\nlog4j.logger.org.apache.activemq.transport.stomp=TRACE, stomp\nlog4j.additivity.org.apache.activemq.transport.stomp=false\n\n# Enable these two lines and disable the above two if you want the frame IO ONLY (e.g., no heart beat messages, inactivity monitor etc).\n#log4j.logger.org.apache.activemq.transport.stomp.StompIO=TRACE, stomp\n#log4j.additivity.org.apache.activemq.transport.stomp.StompIO=false\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Destination Subscriptions on Creation - XML\nDESCRIPTION: This snippet configures the Remote Broker to send advisory messages when a virtual destination is created. This is enabled by setting `useVirtualDestSubsOnCreation` to `true`.  This ensures that messages are forwarded even if there are no active consumers initially.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker name=\"remoteBroker\" useVirtualDestSubs=\"true\" useVirtualDestSubsOnCreation=\"true\">  \n     .....\n  </broker>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive Consumer - ActiveMQ\nDESCRIPTION: To configure an exclusive consumer on a queue, the `consumer.exclusive=true` setting is specified in the queue name. This ensures that only the first consumer to subscribe receives messages while it is active.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n\"QUEUE.NAME?consumer.exclusive=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Journal Persistence (AMQ 3.x)\nDESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ broker for JDBC persistence with journaling in AMQ 3.x.  It specifies the journal directory and a dataSource.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<persistence> \n  <journalPersistence directory=\"../var/journal\"> \n    <jdbcPersistence dataSourceRef=\"derby-ds\"/> \n  </journalPersistence> \n</persistence>\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Connection with Authentication in C++\nDESCRIPTION: This code snippet demonstrates how to create a CMS Connection with a username and password for authentication. The credentials are passed to the createConnection method, and a CMSException is thrown if they are invalid.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection( \"<USERNAME>\", \"<PASSWORD>\") );\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker Configuration (broker-config.xml)\nDESCRIPTION: This XML snippet shows the structure of the broker-config.xml file, highlighting the persistenceAdapter, transportConnectors, and networkConnectors elements.  It provides the foundation for configuring ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker useJmx=\"true\">\n  ...\n    <persistenceAdapter>\n      <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"activemq-data\"/>\n      <!-- To use a different datasource, use th following syntax : -->\n      <!--\n      <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"../data\" dataSource=\"#postgres-ds\"/>\n       -->\n    </persistenceAdapter>\n\n    <transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Camel Route Definition in Spring XML\nDESCRIPTION: This snippet demonstrates a simple Apache Camel route defined in a Spring XML file. It configures a route that consumes messages from an MQSeries queue named `Foo.Bar` and sends them to an ActiveMQ Classic queue named `Cheese`.  Camel provides an easier way to bridge between different messaging technologies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-to-jms-bridge.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext xmlns=\"http://camel.apache.org/schema/spring\">\n  <route>\n    <from uri=\"mqseries:Foo.Bar\"/>\n    <to uri=\"activemq:Cheese\"/>\n  </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Discarding Expired Messages Configuration in ActiveMQ Classic (XML)\nDESCRIPTION: This XML configuration snippet demonstrates how to configure ActiveMQ Classic to discard expired messages instead of sending them to the DLQ. The `processExpired` property is set to `false` on a shared dead letter strategy, preventing expired messages from entering the DLQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  \n  <destinationPolicy>\n   <policyMap>\n     <policyEntries>\n       <!-- Set the following policy on all queues using the '>' wildcard -->\n       <policyEntry queue=\">\">\n         <!-- \n           Tell the dead letter strategy not to process expired messages\n           so that they will just be discarded instead of being sent to\n           the DLQ \n         -->\n         <deadLetterStrategy>\n           <sharedDeadLetterStrategy processExpired=\"false\" />\n         </deadLetterStrategy>\n       </policyEntry>\n     </policyEntries>\n   </policyMap>\n  </destinationPolicy>\n  \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Network Connector - Broker D\nDESCRIPTION: This snippet configures an LDAP network connector for 'srv-d.mydomain.com'. It specifies the LDAP server URI, base DN, anonymous authentication, search filter, and search scope. This allows the broker to dynamically discover and connect to other brokers based on the LDAP directory information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ldap-broker-discovery-mechanism.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"srv-d.mydomain.com\" ...>\n   ...\n\n   <networkConnectors/>\n      <ldapNetworkConnector uri=\"ldap://myldap.mydomain.com:389\"\n                            base=\"dc=brokers-other,dc=mydomain,dc=com\"\n                            anonymousAuthentication=\"true\"\n                            searchFilter=\"(cn=*)\"\n                            searchScope=\"SUBTREE_SCOPE\"\n                            />\n   </networkConnectors>\n\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Message ActiveMQ Stomp C#\nDESCRIPTION: This code snippet demonstrates how to schedule a message for delayed delivery using the `AMQ_SCHEDULED_DELAY` property. It sets up a message producer, creates a text message, sets the `AMQ_SCHEDULED_DELAY` property to specify the delay in milliseconds (60 seconds in this example), and then sends the message.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/advanced-features/stomp-delayed-and-scheduled-message-feature.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nlong time = 60 * 1000;\nmessage.Properties[\"AMQ_SCHEDULED_DELAY\"] = time;\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Locking Next Messages (Batch Retrieval)\nDESCRIPTION: This snippet requests a batch of up to 10 message URLs using an HTTP POST request. The consumer ID is required, and the `max` parameter specifies the maximum number of messages to retrieve.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST lockNextMessage/consumerId?max=10\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Persistence without Journal (AMQ 4.x)\nDESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ broker for JDBC persistence without journaling in AMQ 4.x.  It specifies a dataSource for JDBC access.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter> \n  <jdbcPersistenceAdapter dataSource=\"#my-ds\"/> \n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Configure AjaxServlet in web.xml\nDESCRIPTION: This snippet demonstrates how to configure the `AjaxServlet` in the web application's `web.xml` file. This servlet is responsible for serving the required JavaScript files and handling the JMS requests and responses. The `url-pattern` specifies the URL path that maps to the servlet.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ajax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n  <servlet-name>AjaxServlet</servlet-name>\n  <servlet-class>org.apache.activemq.web.AjaxServlet</servlet-class>\n</servlet>\n...\n<servlet-mapping>\n  <servlet-name>AjaxServlet</servlet-name>\n  <url-pattern>/amq/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Failover URI Configuration - Long Format - ActiveMQ (Java)\nDESCRIPTION: This example shows the traditional way of configuring the 'wireFormat.maxInactivityDuration' option for each URI in a failover configuration. It requires repeating the same option for each broker, which can be cumbersome.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfailover:(tcp://broker1:61616?wireFormat.maxInactivityDuration=1000,tcp://broker2:61616?wireFormat.maxInactivityDuration=1000,tcp://broker3:61616?wireFormat.maxInactivityDuration=1000)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Priority Enforcement by Disabling Cache (XML)\nDESCRIPTION: This configuration disables the cache, message expiration check, and lowers consumer prefetch to 1 to prioritize high-priority messages in ActiveMQ Classic. It involves setting 'useCache' to 'false', 'expireMessagesPeriod' to '0', and 'queuePrefetch' to '1' in the policy entry.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-support-priority-queues.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\">\" prioritizedMessages=\"true\" useCache=\"false\" expireMessagesPeriod=\"0\" queuePrefetch=\"1\" />\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: JAAS LoginModule Configuration\nDESCRIPTION: This snippet demonstrates the configuration for a JAAS LoginModule in ActiveMQ Classic. It specifies the PropertiesLoginModule, points to user and group property files, and sets the `reload` flag to determine whether the property files are reloaded on each authentication request.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nactivemq { org.apache.activemq.jaas.PropertiesLoginModule required org.apache.activemq.jaas.properties.user=\"users.properties\" org.apache.activemq.jaas.properties.group=\"groups.properties\" reload=true; };\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Message Size in MessageServlet\nDESCRIPTION: This snippet shows how to configure the `maxMessageSize` init parameter in the `MessageServlet` in `web.xml` to change or disable the message size limit.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>MessageServlet</servlet-name>\n    <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n    <async-supported>true</async-supported>\n\n    <init-param>\n        <param-name>maxMessageSize</param-name>\n        <param-value>-1</param-value>\n    </init-param>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Content Type in web.xml - XML\nDESCRIPTION: This XML snippet configures the `MessageServlet` to send responses with `application/json` content type by default. It's added to the `WEB-INF/web.xml` file. This avoids the default `text/xml` content type and ensures REST clients receive JSON responses.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>MessageServlet</servlet-name>\n    <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n    <init-param>\n            <param-name>defaultContentType</param-name>\n            <param-value>application/json</param-value>\n    </init-param>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Start Broker using activemq.xml from File System\nDESCRIPTION: This example shows how to start an ActiveMQ Classic broker using the `activemq.xml` configuration file located in the current directory. The `xbean:file:./activemq.xml` URI specifies that the XML configuration should be loaded from the file system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-xbean-uri.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nxbean:file:./activemq.xml\n```\n\n----------------------------------------\n\nTITLE: Configure Debug Logging in ActiveMQ Classic with Log4j\nDESCRIPTION: This snippet configures debug logging for the org.apache.activemq package by setting the log level to DEBUG in the log4j.properties file. This will enable more verbose logging output, which is helpful for debugging.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-enable-debug-logging.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nlog4j.logger.org.apache.activemq=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtered Destinations in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows how to configure filtered destinations within a composite queue in ActiveMQ Classic. Messages sent to the virtual destination MY.QUEUE will be forwarded to FOO if the selector 'odd = \\'yes\\'' matches, and to BAR if the selector 'i = 5' matches. This allows for selective forwarding of messages based on message properties.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-destinations.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors> <virtualDestinationInterceptor> <virtualDestinations> \n   <compositeQueue name=\"MY.QUEUE\">\n    <forwardTo>\n     <filteredDestination selector=\"odd = 'yes'\" queue=\"FOO\"/>\n     <filteredDestination selector=\"i = 5\" topic=\"BAR\"/>\n    </forwardTo>\n  </compositeQueue>\n</virtualDestinations> </virtualDestinationInterceptor> </destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: XPath Selector Example (XML)\nDESCRIPTION: This code snippet shows how to use XPath selectors in ActiveMQ Classic to filter messages containing XML bodies. The XPath expression selects elements with the title tag that have the lang attribute set to 'eng'. XPath support requires the Xalan library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/selectors.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nXPATH '//title\\[@lang=''eng''\\]'\n```\n\n----------------------------------------\n\nTITLE: Configuring ShiroPlugin in ActiveMQ Classic using Java\nDESCRIPTION: This Java snippet shows how to configure the ShiroPlugin programmatically within an ActiveMQ Classic BrokerService. The ShiroPlugin can be configured via getters and setters after instantiation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nBrokerService brokerService = new BrokerService();\n\nShiroPlugin shiroPlugin = new ShiroPlugin();\n//configure shiroPlugin via getters/setters here\n\nbroker.setPlugins(new BrokerPlugin[]{shiroPlugin});\n//continue configuring the brokerService as necessary ...\n```\n\n----------------------------------------\n\nTITLE: Initializing ActiveMQ ConnectionFactory with URI - C#\nDESCRIPTION: This code snippet demonstrates how to initialize an ActiveMQ ConnectionFactory using a URI with specific parameters. It configures the connection to use the ActiveMQ protocol over TCP at localhost on port 61616 and enables tight encoding for the wire format.  It leverages the Apache.NMS.ActiveMQ.ConnectionFactory class for initialization.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/uri-configuration.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new Apache.NMS.ActiveMQ.ConnectionFactory(\"tcp://localhost:61616?wireFormat.tightEncodingEnabled=true\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Destination Subscriptions on Local Broker - XML\nDESCRIPTION: This snippet configures the NetworkConnector on the Local Broker to listen for advisory messages from the Remote Broker about Virtual Destination subscriptions.  Setting `useVirtualDestSubs` to `true` enables the Local Broker to forward messages based on these subscriptions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"static:(tcp://host)\" useVirtualDestSubs=\"true\">\n  <dynamicallyIncludedDestinations>\n    <topic physicalName=\"include.bar\"/>\n  </dynamicallyIncludedDestinations>\n</networkConnector>\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Packages in ActiveMQConnectionFactory (Java)\nDESCRIPTION: This example shows how to configure trusted packages directly within the `ActiveMQConnectionFactory` using the `setTrustedPackages()` method. This is a client-side configuration to allow deserialization of objects from specified packages. It requires creating an `ArrayList` of package names. Requires activemq-client library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/objectmessage.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustedPackages(new ArrayList(Arrays.asList(\"org.apache.activemq.test,org.apache.camel.test\".split(\",\"))));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Statistics using StatisticsPlugin in ActiveMQ Classic (Java)\nDESCRIPTION: This Java code snippet demonstrates how to retrieve broker statistics using the ActiveMQ Classic StatisticsPlugin. It creates a temporary queue for replies, sends an empty message to the ActiveMQ.Statistics.Broker destination, and then receives and prints the statistics from the broker. The reply message is a MapMessage containing statistics for the target broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/statisticsplugin.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nQueue replyTo = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(replyTo);\n\nString queueName = \"ActiveMQ.Statistics.Broker\";\nQueue testQueue = session.createQueue(queueName);\nMessageProducer producer = session.createProducer(testQueue);\nMessage msg = session.createMessage();\nmsg.setJMSReplyTo(replyTo);\nproducer.send(msg);\n\nMapMessage reply = (MapMessage) consumer.receive();\nassertNotNull(reply);\n\nfor (Enumeration e = reply.getMapNames();e.hasMoreElements();) {\n  String name = e.nextElement().toString();\n  System.out.println(name + \"=\" + reply.getObject(name));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Broadcasting with BlazeChannel in Java\nDESCRIPTION: This code demonstrates creating a BlazeChannel, starting it, broadcasting a message to a topic, and then shutting down the channel. It uses the BlazeChannelFactory to create the channel and BlazeMessage to construct the message payload.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broadcasting.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.activeblaze.*;\n...\nBlazeChannelFactory factory = new BlazeChannelFactory();\nBlazeChannel sender = factory.createChannel();\n//start the channel and send a message\nsender.start();\n\nString destination = \"foo.bar\";\nBlazeMessage msg = new BlazeMessage(\"test payload\");\nsender.broadcast(destination,msg);\n//shutdown the sender\nsender.shutDown();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Destination Statistics using StatisticsPlugin in ActiveMQ Classic (Java)\nDESCRIPTION: This Java code snippet demonstrates how to retrieve destination statistics for a queue named TEST.FOO using the ActiveMQ Classic StatisticsPlugin. It sends a message to the queue and then another message to the ActiveMQ.Statistics.Destination.TEST.FOO queue with a replyTo header. The reply message is a MapMessage containing statistics for the target destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/statisticsplugin.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nQueue replyTo = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(replyTo);\n\nQueue testQueue = session.createQueue(\"TEST.FOO\");\nMessageProducer producer = session.createProducer(null);\n\nString queueName = \"ActiveMQ.Statistics.Destination.\" + testQueue.getQueueName()\nQueue query = session.createQueue(queueName);\n\nMessage msg = session.createMessage();\n\nproducer.send(testQueue, msg) \nmsg.setJMSReplyTo(replyTo);\nproducer.send(query, msg);\nMapMessage reply = (MapMessage) consumer.receive();\nassertNotNull(reply);\nassertTrue(reply.getMapNames().hasMoreElements());\n        \nfor (Enumeration e = reply.getMapNames();e.hasMoreElements();) {\n    String name = e.nextElement().toString();\n    System.err.println(name + \"=\" + reply.getObject(name));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Exclusive Consumer with ActiveMQ URI Configuration in C#\nDESCRIPTION: This code snippet demonstrates how to create an exclusive consumer in NMS.ActiveMQ using the ActiveMQ URI configuration. The `consumer.exclusive=true` parameter in the queue name ensures that only one consumer receives messages from the queue at a time. Requires NMS.ActiveMQ library and an active ActiveMQ session.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/exclusive-consumers.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar queue = session.GetQueue(\"TEST.QUEUE?consumer.exclusive=true\");\nvar consumer = session.CreateConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Building ActiveMQ Classic with Maven\nDESCRIPTION: These commands use Maven to build ActiveMQ Classic from source. The `mvn clean install` command compiles the code, runs tests, and packages the application. The `export MAVEN_OPTS` command increases the memory available to Maven to prevent OutOfMemoryErrors. The `mvn eclipse:eclipse` and `mvn idea:idea` commands generate project files for Eclipse and IntelliJ IDEA, respectively, allowing you to work with the source code in your IDE.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]\nmvn clean install # add \"-Dmaven.test.skip=true\" if tests are failing on your system (should not happen)\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport MAVEN_OPTS=\"-Xmx512M\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn eclipse:eclipse\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn idea:idea\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Package in activemq.xml (Java DSL)\nDESCRIPTION: This snippet demonstrates how to configure the `activemq.xml` file to specify the package where Camel routes are located when using Java DSL. The `package` attribute within the `camelContext` element should point to the root package containing the route classes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/enterprise-integration-patterns.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext xmlns=\"http://activemq.apache.org/camel/schema/spring\">\n <package>org.acme.cheese</package>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Broker with Multiple Transport Connectors and JMX\nDESCRIPTION: This example demonstrates running a broker with two transport connectors (tcp://localhost:61616 and tcp://localhost:5000) and JMX enabled. This allows the broker to listen on multiple ports and be managed via JMX.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nactivemq broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true\n```\n\n----------------------------------------\n\nTITLE: Enabling AMQP Transport Connector in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to enable the AMQP protocol in ActiveMQ Classic by adding a transport connector to the broker's configuration. The `uri` attribute specifies the address and port on which the broker will listen for AMQP connections.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amqp.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n   <transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with Client Acknowledgment via ActiveMQ CLI\nDESCRIPTION: This command consumes messages using client acknowledgment mode with the ActiveMQ Classic command-line tool. The `--ackMode CLIENT_ACKNOWLEDGE` parameter sets the acknowledgment mode to client acknowledgment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq consumer --ackMode CLIENT_ACKNOWLEDGE\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenWire Protocol for a Connector\nDESCRIPTION: This XML snippet shows how to explicitly configure a connector to use the OpenWire protocol. This is useful when you want to dedicate a specific connector to OpenWire and prevent it from detecting other protocols. The `protocol` attribute is used to enforce the OpenWire protocol.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<connector protocol=\"openwire\" ... />\n```\n\n----------------------------------------\n\nTITLE: Enabling MQTT over NIO + SSL Transport\nDESCRIPTION: This snippet shows how to enable MQTT over NIO with SSL for secure communication.  It uses the `mqtt+nio+ssl` protocol.  Requires SSL configuration for ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"mqtt+nio\" uri=\"mqtt+nio+ssl://localhost:1883\"/>\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Example with Timeout\nDESCRIPTION: Illustrates how to set a timeout on send operations when using the Failover transport. If the connection cannot be established within the specified time (3000ms in this case), the send operation will fail, allowing the application to handle the timeout. The `timeout` option prevents indefinite blocking during reconnection attempts.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nfailover:(tcp://primary:61616)?timeout=3000\n```\n\n----------------------------------------\n\nTITLE: Enabling JMX in Broker Configuration (XML)\nDESCRIPTION: This snippet demonstrates how to enable JMX within the ActiveMQ Classic broker configuration file (e.g., xbean configuration).  The `useJmx` attribute is set to \"true\" within the `<broker>` element. This allows the broker's statistics and management functionality to be accessed via JMX.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker useJmx=\"true\" brokerName=\"BROKER1\">\n...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Broker with Default Configuration\nDESCRIPTION: This example demonstrates how to start an ActiveMQ Classic broker using the default configuration file 'xbean:activemq.xml'. This is the simplest way to launch a broker, relying on the default settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nactivemq\n```\n\n----------------------------------------\n\nTITLE: Message Consumption Authorization Method\nDESCRIPTION: Shows the signature of the method to be implemented in a custom Java class for message level authorization. The method `isAllowedToConsume` takes a ConnectionContext and a Message as input and returns a boolean indicating whether the consumption is allowed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic boolean isAllowedToConsume(ConnectionContext context, Message message){...}\n```\n\n----------------------------------------\n\nTITLE: Tuning NIO Transport Thread Usage\nDESCRIPTION: Example of setting system properties to tune the NIO transport thread pool size in ActiveMQ. This example modifies the `ACTIVEMQ_OPTS` environment variable to configure the core, maximum pool sizes, and work queue capacity of the NIO transport's thread pool.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/nio-transport-reference.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nACTIVEMQ_OPTS=\"$ACTIVEMQ_OPTS -Dorg.apache.activemq.transport.nio.SelectorManager.corePoolSize=2000 -Dorg.apache.activemq.transport.nio.SelectorManager.maximumPoolSize=2000 -Dorg.apache.activemq.transport.nio.SelectorManager.workQueueCapacity=1024\"\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Timed Subscription Recovery Policy\nDESCRIPTION: This XML snippet configures a timed subscription recovery policy. It specifies the duration (in milliseconds) for which the subscription will attempt to recover messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/per-destination-policies.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<timedSubscriptionRecoveryPolicy recoverDuration=\"60000\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling AUTO over NIO SSL in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet configures ActiveMQ Classic to use auto wire format detection over an NIO SSL connection.  It employs the `auto+nio+ssl` transport prefix and sets the URI for the secure NIO connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto+nio+ssl\" uri=\"auto+nio+ssl://localhost:5671\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Exclusive Subscription in STOMP\nDESCRIPTION: This snippet demonstrates how to create an exclusive subscription using the STOMP protocol.  It involves adding the `exclusive:true` header to the `SUBSCRIBE` frame. This ensures that only one consumer receives messages from the specified queue, maintaining message order. The server automatically fails over to another subscription if the current one fails.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nSUBSCRIBE\nid:mysub\nexclusive:true\ndestination:/queue/foo\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-Create Broker with VM Transport - Java\nDESCRIPTION: This code snippet demonstrates how to disable the automatic creation of an embedded ActiveMQ Classic broker when using the VM transport. It sets the 'create' property of the ActiveMQConnectionFactory to 'false'. This prevents the broker from being started automatically if it doesn't already exist. Requires the ActiveMQ client library as a dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-turn-off-creating-an-embedded-activemq-classic-broker-when-using-the-vm-transport.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"vm://localhost?create=false\");\n```\n\n----------------------------------------\n\nTITLE: Configure Stomp Connector Tracing in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet demonstrates how to enable tracing for the Stomp connector in ActiveMQ Classic by setting the `trace` parameter to `true` in the connector's URI. This allows you to monitor all packets sent and received by the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n   <transportConnector name=\"stomp\" uri=\"stomp://localhost:61613?trace=true\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: JBoss Startup Command\nDESCRIPTION: This bash command is used to start the JBoss application server with a specific configuration (default). It sets the environment variables necessary for the server to run.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ cd jboss-4.0.4.GA\n$ ./bin/run.sh -c default\n```\n\n----------------------------------------\n\nTITLE: Start ActiveMQ Broker with Security Configuration (Bash)\nDESCRIPTION: This command starts the ActiveMQ broker using a specific security configuration file (`activemq-security.xml`). This file contains the Jasypt configuration that enables password decryption.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/activemq start xbean:conf/activemq-security.xml\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Broker with Absolute File Path Configuration\nDESCRIPTION: This example shows how to run an ActiveMQ Classic broker using a configuration file specified by an absolute file path. The 'xbean:file:C:/ActiveMQ/conf/broker2.xml' syntax allows you to point to a specific location on the file system for the broker's configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nactivemq xbean:file:C:/ActiveMQ/conf/broker2.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Routes with ActiveMQ Classic\nDESCRIPTION: This XML configuration demonstrates setting up Camel routes within an ActiveMQ broker. It includes defining the broker, enabling JMX, setting persistence to false, and specifying data directory.  It utilizes Spring beans for property placeholder configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sample-camel-routes.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans>\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n    <broker useJmx=\"true\" persistent=\"false\" xmlns=\"http://activemq.org/config/1.0\"\n            brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\">\n    </broker>\n\n    <camelContext id=\"camel\" xmlns=\"http://activemq.apache.org/camel/schema/spring\">\n        <!-- simple bridge from a topic to queue -->\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming\">\n            <to   uri=\"activemq:queue:queue.HelloWorld\">\n        </route>\n\n        <!-- Dependencies: camel-juel-[camel-n].jar, juel-[juel-n]-impl.jar, juel-[juel-n].jar must be in the activemq lib directory -->\n        <!-- 2 separate JUEL based filters -->\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel1\">\n            <filter>\n                <el>${in.headers.JMSType.equals('foo')}</el>\n                <filter>\n                    <el>${in.headers.myHeaderField.equals('takeMe')}</el>\n                    <to   uri=\"activemq:queue:queue.HelloWorld.camel1.fooMsgs\">\n                </filter>\n            </filter>\n            <filter>\n                <el>${in.headers.JMSType.equals('bar')}</el>\n                <filter>\n                    <el>${in.headers.myHeaderField.equals('takeMe')}</el>\n                    <filter>\n                        <el>${in.headers.myOtherHeaderField.equals('3')}</el>\n                        <to   uri=\"activemq:queue:queue.HelloWorld.camel1.fooMsgs.special\">\n                    </filter>\n                </filter>\n            </filter>\n        </route>\n\n        <!-- route using 2 separate xpath based filters, assuming the message has an XML body -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel2\">\n            <filter>\n                <xpath>$JMSType = 'foo' and $myCustomHeader='takeMe'</xpath>\n                <to   uri=\"activemq:queue:queue.HelloWorld.camel2.fooMsgs\">\n            </filter>\n            <filter>\n                <xpath>$JMSType = 'bar' and $myCustomHeader='takeMe'</xpath>\n                <to   uri=\"activemq:queue:queue.HelloWorld.camel2.barMsgs\">\n            </filter>\n        </route>\n\n        <!-- route using choice route based on xpath -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel3\">\n            <choice>\n                <when>\n                    <xpath>$JMSType = 'foo'</xpath>\n                    <to   uri=\"activemq:queue:queue.HelloWorld.camel3.fooMsgs\">\n                </when>\n                <otherwise>\n                    <to   uri=\"activemq:queue:queue.HelloWorld.camel3.nonFooMsgs\">\n                </otherwise>\n            </choice>\n        </route>\n\n        <!-- route using choice route based on JUEL -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel4\">\n            <choice>\n                <when>\n                    <el>${in.headers.JMSType.equals('foo')}</el>\n                    <to uri=\"activemq:queue:queue.HelloWorld.camel4.fooMsgs\">\n                </when>\n            </choice>\n        </route>\n\n        <!-- route using nested JUEL based filters -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel5\">\n            <filter>\n                <el>${in.headers.JMSType.equals('foo')}</el>\n                <filter>\n                    <el>${in.headers.OperationRequest.equals('foo1')}</el>\n                    <to uri=\"activemq:queue:queue.HelloWorld.camel5.foo1Msgs\">\n                </filter>\n                <filter>\n                    <el>${in.headers.OperationRequest.equals('foo2')}</el>\n                    <to uri=\"activemq:queue:queue.HelloWorld.camel5.foo2Msgs\">\n                </filter>\n            </filter>\n        </route>\n\n        <!-- route using nested JUEL and xpath filters, including a filter which examines the message content for an xml attribute -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel6\">\n            <filter>\n                <el>${in.headers.JMSType.equals('foo')}</el>\n                <filter>\n                    <xpath>/rootXMLBodyNode/childXMLBodyNode[@myAttributeKey='myAttributeValue']</xpath>\n                    <to uri=\"activemq:queue:queue.HelloWorld.camel6.fooMsgs\">\n                </filter>\n            </filter>\n        </route>\n\n        <!-- route using nested JUEL and xpath filters, including a filter which examines the message content for an xml value -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel7\">\n            <filter>\n                <el>${in.headers.JMSType.equals('Tideworks.GateVision.XmlCmd')}</el>\n                <filter>\n                    <xpath>/rootXMLBodyNode/childXMLBodyNode/elementKey = 'elementValue'</xpath>\n                    <to uri=\"activemq:queue:queue.HelloWorld.camel7.fooMsgs\">\n                </filter>\n            </filter>\n        </route>\n\n        <!-- route using nested JUEL and xpath filters, including a filter which examines the message content for an xml attribute -->\n\n        <route>\n            <from uri=\"activemq:topic:topic.HelloWorld.incoming.camel8\">\n            <filter>\n                <el>${in.headers.JMSType.equals('foo')}</el>\n                <filter>\n                    <xpath>/rootXMLBodyNode/childXMLBodyNode[@myAttributeKey='myAttributeValue']/grandchildXMLBodyNode[@myAttributeKey='myAttributeValue']</xpath>\n                    <to uri=\"activemq:queue:queue.HelloWorld.camel8.fooMsgs\">\n                </filter>\n            </filter>\n        </route>\n    </camelContext>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connector with Dynamically Included Destinations in ActiveMQ\nDESCRIPTION: This snippet demonstrates how to configure a network connector in ActiveMQ to dynamically include specific destinations (queues and topics). The broker will send messages to the remote broker only when there is a consumer for these destinations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"static:(tcp://host)\">\n  <dynamicallyIncludedDestinations>\n    <queue physicalName=\"include.test.foo\"/>\n    <topic physicalName=\"include.test.bar\"/>\n  </dynamicallyIncludedDestinations>\n</networkConnector>\n```\n\n----------------------------------------\n\nTITLE: Route Messages Based on Queue Depth Limit with XML\nDESCRIPTION: This example demonstrates how to route messages based on a destination's queue depth reaching a certain limit. It uses the Camel Message Router pattern and Spring Expression Language (SpEL) to check the queue size. If the queue size is greater than or equal to 100, the message is routed to 'test.broker.processLater'; otherwise, it is routed back to 'test.broker.queue'. This configuration also defines beans for broker and destination views to retrieve statistics from the ActiveMQ Classic broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-camel-component.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext id=\"camel\" trace=\"false\" xmlns=\"http://camel.apache.org/schema/spring\">\n  <route id=\"routeAboveQueueLimitTest\">\n    <from uri=\"broker:queue:test.broker.queue\"/>\n    <choice>\n      <when>\n        <spel>#{@destinationView.queueSize >= 100}</spel>\n        <to uri=\"broker:queue:test.broker.processLater\"/>\n      </when>\n      <otherwise>\n        <to uri=\"broker:queue:test.broker.queue\"/>\n      </otherwise>\n    </choice>\n  </route>\n</camelContext>\n\n<bean id=\"brokerView\" class=\"org.apache.activemq.broker.view.MessageBrokerView\">\n  <constructor-arg value=\"testBroker\"/>\n</bean>\n\n<bean id=\"destinationView\" factory-bean=\"brokerView\" factory-method=\"getDestinationView\">\n  <constructor-arg value=\"test.broker.component.route\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Default XML Configuration\nDESCRIPTION: This XML snippet represents the default configuration for ActiveMQ Classic. It defines the broker settings, including destination policies, management context, persistence adapter, system usage, and transport connectors. It also uses Spring beans for property placeholders and shutdown hooks. The configuration leverages XML namespaces for Spring and ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-configuration.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans\n  xmlns=\"http://www.springframework.org/schema/beans\"\n  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <value>file:${activemq.conf}/credentials.properties</value>\n        </property>\n    </bean>\n\n    <!--\n        The <broker> element is used to configure the ActiveMQ Classic broker.\n    -->\n    <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\">\n\n        <!--\n            For better performances use VM cursor and small memory limit.\n            For more information, see:\n\n            http://activemq.apache.org/message-cursors.html\n\n            Also, if your producer is \"hanging\", it's probably due to producer flow control.\n            For more information, see:\n            http://activemq.apache.org/producer-flow-control.html\n        -->\n\n        <destinationPolicy>\n            <policyMap>\n              <policyEntries>\n                <policyEntry topic=\">\" producerFlowControl=\"true\">\n                    <!-- The constantPendingMessageLimitStrategy is used to prevent\n                         slow topic consumers to block producers and affect other consumers\n                         by limiting the number of messages that are retained\n                         For more information, see:\n\n                         http://activemq.apache.org/slow-consumer-handling.html\n\n                    -->\n                  <pendingMessageLimitStrategy>\n                    <constantPendingMessageLimitStrategy limit=\"1000\"/>\n                  </pendingMessageLimitStrategy>\n                </policyEntry>\n                <policyEntry queue=\">\" producerFlowControl=\"true\" memoryLimit=\"1mb\">\n                  <!-- Use VM cursor for better latency\n                       For more information, see:\n\n                       http://activemq.apache.org/message-cursors.html\n\n                  <pendingQueuePolicy>\n                    <vmQueueCursor/>\n                  </pendingQueuePolicy>\n                  -->\n                </policyEntry>\n              </policyEntries>\n            </policyMap>\n        </destinationPolicy>\n\n\n        <!--\n            The managementContext is used to configure how ActiveMQ Classic is exposed in\n            JMX. By default, ActiveMQ Classic uses the MBean server that is started by\n            the JVM. For more information, see:\n\n            http://activemq.apache.org/jmx.html\n        -->\n        <managementContext>\n            <managementContext createConnector=\"false\"/>\n        </managementContext>\n\n        <!--\n            Configure message persistence for the broker. The default persistence\n            mechanism is the KahaDB store (identified by the kahaDB tag).\n            For more information, see:\n\n            http://activemq.apache.org/persistence.html\n        -->\n        <persistenceAdapter>\n            <kahaDB directory=\"${activemq.data}/kahadb\"/>\n        </persistenceAdapter>\n\n\n          <!--\n            The systemUsage controls the maximum amount of space the broker will\n            use before slowing down producers. For more information, see:\n            http://activemq.apache.org/producer-flow-control.html\n            If using ActiveMQ Classic embedded - the following limits could safely be used:\n\n        <systemUsage>\n            <systemUsage>\n                <memoryUsage>\n                    <memoryUsage limit=\"20 mb\"/>\n                </memoryUsage>\n                <storeUsage>\n                    <storeUsage limit=\"1 gb\"/>\n                </storeUsage>\n                <tempUsage>\n                    <tempUsage limit=\"100 mb\"/>\n                </tempUsage>\n            </systemUsage>\n        </systemUsage>\n        -->\n          <systemUsage>\n            <systemUsage>\n                <memoryUsage>\n                    <memoryUsage limit=\"64 mb\"/>\n                </memoryUsage>\n                <storeUsage>\n                    <storeUsage limit=\"100 gb\"/>\n                </storeUsage>\n                <tempUsage>\n                    <tempUsage limit=\"50 gb\"/>\n                </tempUsage>\n            </systemUsage>\n        </systemUsage>\n\n        <!--\n            The transport connectors expose ActiveMQ Classic over a given protocol to\n            clients and other brokers. For more information, see:\n\n            http://activemq.apache.org/configuring-transports.html\n        -->\n        <transportConnectors>\n            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->\n            <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n            <transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n        </transportConnectors>\n\n        <!-- destroy the spring context on shutdown to stop jetty -->\n        <shutdownHooks>\n            <bean xmlns=\"http://www.springframework.org/schema/beans\" class=\"org.apache.activemq.hooks.SpringContextHook\" />\n        </shutdownHooks>\n\n    </broker>\n\n    <!--\n        Enable web consoles, REST and Ajax APIs and demos\n\n        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details\n    -->\n    <import resource=\"jetty.xml\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with JMS Selector\nDESCRIPTION: This code snippet demonstrates how to create a JMS selector to filter messages based on their JMSMessageID.  A consumer can then be created using this selector to only receive messages matching the specified ID. This approach is useful for consuming specific messages but is noted to be less efficient for general JMS usage.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-consume-a-specific-message.md#_snippet_0\n\nLANGUAGE: JMS\nCODE:\n```\nJMSMessageID = 'abc'\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic Destination with URI parameters - C#\nDESCRIPTION: This code snippet demonstrates how to create a topic destination with specific URI parameters within an NMS session. It sets the consumer prefetch size to 2000 and enables the noLocal flag, preventing the consumer from receiving messages published by the same connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/uri-configuration.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nd = session.CreateTopic(\"com.foo?consumer.prefetchSize=2000&consumer.noLocal=true\");\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for ActiveMQ Classic 5.0\nDESCRIPTION: This XML snippet demonstrates the configuration for ActiveMQ Classic version 5.0, specifying the correct namespace and schema location. It's crucial to use the appropriate namespace based on the ActiveMQ Classic version being used. It requires Spring.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:amq=\"http://activemq.org/config/1.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://activemq.org/config/1.0\n        http://activemq.apache.org/schema/core/activemq-core-5.0.0.xsd\n    \">\n</beans>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic InactivityMonitor Debug Logging\nDESCRIPTION: This log snippet shows the DEBUG logging produced when the ActiveMQ Classic InactivityMonitor detects inactivity on a connection. It shows the timeout, the lack of messages received, and the InactivityIOException being thrown. It also includes a stack trace showing the classes involved in the inactivity check and exception handling.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-inactivitymonitor.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2012-06-26 17:13:55,712 | DEBUG | 30000 ms elapsed since last read check. | org.apache.activemq.transport.AbstractInactivityMonitor | InactivityMonitor ReadCheck\n2012-06-26 17:13:55,712 | DEBUG | No message received since last read check for tcp:///127.0.0.1:52659! Throwing InactivityIOException. | org.apache.activemq.transport.AbstractInactivityMonitor | InactivityMonitor ReadCheck\n2012-06-26 17:13:55,714 | DEBUG | Transport Connection to: tcp://127.0.0.1:52659 failed: \norg.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://127.0.0.1:52659 |\norg.apache.activemq.broker.TransportConnection.Transport | InactivityMonitor Async Task: \njava.util.concurrent.ThreadPoolExecutor$Worker@6a346239\norg.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://127.0.0.1:52659\n    at org.apache.activemq.transport.AbstractInactivityMonitor$4.run(AbstractInactivityMonitor.java:187)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n    at java.lang.Thread.run(Thread.java:680)\n```\n\n----------------------------------------\n\nTITLE: Getting Next Message for Consumer\nDESCRIPTION: This snippet retrieves the next available message for a specific consumer using an HTTP POST request. The consumer ID is required to identify the correct subscription.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /nextMessageForMe/consumerId\n```\n\n----------------------------------------\n\nTITLE: Using Failover Transport with Generic NMSConnectionFactory - C#\nDESCRIPTION: This snippet shows how to use the failover transport with the generic NMSConnectionFactory. It configures the connection factory to attempt reconnection to the broker using the failover protocol.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/uri-configuration.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new NMSConnectionFactory(\"stomp:failover:tcp://localhost:61613\");\n```\n\n----------------------------------------\n\nTITLE: Extracting ActiveMQ Classic RAR Contents\nDESCRIPTION: This snippet demonstrates how to extract the contents of the ActiveMQ Classic RAR file into the newly created deploy directory within JBoss. This step is crucial for deploying the ActiveMQ Classic resource adapter and enabling integration with JBoss.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njar xvf /opt/incubator-activemq-4.0.2/lib/optional/activemq-ra-4.0.2.rar\n  created: META-INF/\n inflated: META-INF/MANIFEST.MF\n inflated: META-INF/DISCLAIMER.txt\n inflated: META-INF/LICENSE.txt\n inflated: META-INF/ra.xml\n inflated: broker-config.xml\n inflated: activemq-ra-4.0.2.jar\n inflated: activemq-core-4.0.2.jar\n inflated: activeio-core-3.0-beta4.jar\n inflated: derby-10.1.1.0.jar\n inflated: spring-1.2.6.jar\n```\n\n----------------------------------------\n\nTITLE: Disabling Async Sessions in ActiveMQ Classic Java\nDESCRIPTION: This code snippet demonstrates how to disable asynchronous sessions in ActiveMQ Classic by setting the `alwaysSessionAsync` property to `false` on the `ActiveMQConnectionFactory`. This eliminates session threads completely but might affect system performance.  It should be used with caution and after proper performance testing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-deal-with-large-number-of-threads-in-clients.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nconnectionFactory.setAlwaysSessionAsync(false);\nConnection conn = connectionFactory.createConnection();\nconn.start();\n```\n\n----------------------------------------\n\nTITLE: Browsing Queue Messages - ActiveMQ\nDESCRIPTION: This snippet shows how to iterate through messages retrieved by a queue browser.  It retrieves an enumeration of messages and prints each message's content to the console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nEnumeration enumeration = browser.getEnumeration();\n\nwhile (enumeration.hasMoreElements()) {\n    TextMessage message = (TextMessage) enumeration.nextElement();\n    System.out.println(\"Browsing: \" + message);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Truststore to ACTIVEMQ_SSL_OPTS\nDESCRIPTION: This command adds the truststore path to the ACTIVEMQ_SSL_OPTS environment variable. This ensures that the broker trusts the client certificate by referencing the appropriate broker truststore.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n-Djavax.net.ssl.trustStore=/path/to/broker.ts\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Default Configuration XML\nDESCRIPTION: This XML snippet shows the default configuration for an ActiveMQ Classic broker. It includes configuration for bean definitions, destination policies, management context, persistence adapter (KahaDB), system usage (memory, store, and temp usage), transport connectors (OpenWire, AMQP, Stomp, MQTT, WS), and shutdown hooks. It uses Spring beans and property placeholders.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configure-version-5-brokers.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans\n  xmlns=\"http://www.springframework.org/schema/beans\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <value>file:${activemq.conf}/credentials.properties</value>\n        </property>\n    </bean>\n   <!-- Allows accessing the server log -->\n    <bean id=\"logQuery\" class=\"io.fabric8.insight.log.log4j.Log4jLogQuery\"\n          lazy-init=\"false\" scope=\"singleton\"\n          init-method=\"start\" destroy-method=\"stop\">\n    </bean>\n    <!--\n        The <broker> element is used to configure the ActiveMQ Classic broker.\n    -->\n    <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\">\n        <destinationPolicy>\n            <policyMap>\n              <policyEntries>\n                <policyEntry topic=\">\" >\n                    <!-- The constantPendingMessageLimitStrategy is used to prevent\n                         slow topic consumers to block producers and affect other consumers\n                         by limiting the number of messages that are retained\n                         For more information, see:\n                         http://activemq.apache.org/components/classic/documentation/slow-consumer-handling\n                    -->\n                  <pendingMessageLimitStrategy>\n                    <constantPendingMessageLimitStrategy limit=\"1000\"/>\n                  </pendingMessageLimitStrategy>\n                </policyEntry>\n              </policyEntries>\n            </policyMap>\n        </destinationPolicy>\n\n        <!--\n            The managementContext is used to configure how ActiveMQ Classic is exposed in\n            JMX. By default, ActiveMQ Classic uses the MBean server that is started by\n            the JVM. For more information, see:\n            http://activemq.apache.org/components/classic/documentation/jmx\n        -->\n        <managementContext>\n            <managementContext createConnector=\"false\"/>\n        </managementContext>\n        <!--\n            Configure message persistence for the broker. The default persistence\n            mechanism is the KahaDB store (identified by the kahaDB tag).\n            For more information, see:\n            http://activemq.apache.org/components/classic/documentation/persistence\n        -->\n        <persistenceAdapter>\n            <kahaDB directory=\"${activemq.data}/kahadb\"/>\n        </persistenceAdapter>\n\n          <!--\n            The systemUsage controls the maximum amount of space the broker will\n            use before disabling caching and/or slowing down producers. For more information, see:\n            http://activemq.apache.orgFeatures/components/classic/documentation/producer-flow-control\n          -->\n          <systemUsage>\n            <systemUsage>\n                <memoryUsage>\n                    <memoryUsage percentOfJvmHeap=\"70\" />\n                </memoryUsage>\n                <storeUsage>\n                    <storeUsage limit=\"100 gb\"/>\n                </storeUsage>\n                <tempUsage>\n                    <tempUsage limit=\"50 gb\"/>\n                </tempUsage>\n            </systemUsage>\n        </systemUsage>\n        <!--\n            The transport connectors expose ActiveMQ Classic over a given protocol to\n            clients and other brokers. For more information, see:\n            http://activemq.apache.org/components/classic/documentation/configuring-transports\n        -->\n        <transportConnectors>\n            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->\n            <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n            <transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n            <transportConnector name=\"stomp\" uri=\"stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n            <transportConnector name=\"mqtt\" uri=\"mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n            <transportConnector name=\"ws\" uri=\"ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/>\n        </transportConnectors>\n        <!-- destroy the spring context on shutdown to stop jetty -->\n        <shutdownHooks>\n            <bean xmlns=\"http://www.springframework.org/schema/beans\" class=\"org.apache.activemq.hooks.SpringContextHook\" />\n        </shutdownHooks>\n    </broker>\n    <!--\n        Enable web consoles, REST and Ajax APIs and demos\n        The web consoles requires by default login, you can disable this in the jetty.xml file\n        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details\n    -->\n    <import resource=\"jetty.xml\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: TCP Transport Options in Connection URI (AMQP)\nDESCRIPTION: Demonstrates how to append TCP transport configuration options to the connection URI, along with other NMS configuration options.  This allows customization of the underlying socket behavior.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/amqp/uri-configuration.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\namqp://localhost:5672?nms.clientId=foo&transport.receiveBufferSize=30000\n```\n\n----------------------------------------\n\nTITLE: Enable Stomp Transport Logging in ActiveMQ Classic (log4j)\nDESCRIPTION: This `log4j.properties` snippet demonstrates how to enable TRACE level logging for the `org.apache.activemq.transport.stomp` package in ActiveMQ Classic. It also configures a separate appender to write these logs to a dedicated file, making it easier to debug Stomp communication.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.logger.org.apache.activemq.transport.stomp=TRACE\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX Remote Access (Unix)\nDESCRIPTION: This snippet shows how to configure the ActiveMQ Classic startup script (Unix) to enable JMX remote access and password protection. It sets the `ACTIVEMQ_SUNJMX_START` environment variable with the necessary JVM options to specify the JMX remote port, disable SSL, and point to the access and password files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nACTIVEMQ_SUNJMX_START=\"-Dcom.sun.management.jmxremote.port=1616 -Dcom.sun.management.jmxremote.ssl=false \\\n  -Dcom.sun.management.jmxremote.password.file=${ACTIVEMQ_BASE}/conf/jmx.password \\\n  -Dcom.sun.management.jmxremote.access.file=${ACTIVEMQ_BASE}/conf/jmx.access\"\n```\n\n----------------------------------------\n\nTITLE: Broker XML Configuration - Modified\nDESCRIPTION: This XML snippet from META-INF/ra.xml sets the BrokerXmlConfig property to 'xbean:broker-config.xml', instructing ActiveMQ Classic to load its configuration from this file located on the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      Sets the XML configuration file used to configure the embedded ActiveMQ Classic broker via\n      Spring if using embedded mode.\n\n      BrokerXmlConfig is the filename which is assumed to be on the classpath unless\n      a URL is specified. So a value of foo/bar.xml would be assumed to be on the\n      classpath whereas file:dir/file.xml would use the file system.\n      Any valid URL string is supported.\n    </description>\n    <config-property-name>BrokerXmlConfig</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <config-property-value>xbean:broker-config.xml</config-property-value>\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Scalability Configuration Example (XML)\nDESCRIPTION: Points to an example broker configuration file demonstrating scalability settings.  This file likely contains XML configurations for optimizing ActiveMQ Classic for a large number of queues, potentially including settings for optimized dispatch, transport configurations and memory usage.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-configure-10s-of-1000s-of-queues-in-a-single-broker.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<http://svn.apache.org/repos/asf/activemq/trunk/assembly/src/sample-conf/activemq-scalability.xml>\n```\n\n----------------------------------------\n\nTITLE: Send JMS Message with ActiveMQ Classic Ajax API\nDESCRIPTION: This JavaScript code shows how to send a JMS message using the ActiveMQ Classic Ajax API. The `amq.sendMessage()` function takes the destination URL and the message content as parameters. The destination can be a topic or a queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ajax.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\namq.sendMessage(myDestination,myMessage);\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: ActiveMQ Client Jakarta\nDESCRIPTION: This XML snippet shows the Maven dependency required to use the transitional Jakarta Messaging 3.1 client with ActiveMQ Classic 5.18.x.  It allows using the jakarta.jms API namespace. Note: the `activemq-client-jakarta` module is removed in ActiveMQ Classic 6.0.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms2.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-client-jakarta</artifactId>\n  <version>${activemq.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Browsing ActiveMQ Classic Messages\nDESCRIPTION: Browses messages in a specified destination. It can use the broker connection from the configuration or a specified AMQ URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq browse FOO.BAR # use broker connection from configuration\nbin/activemq browse --amqurl tcp://localhost:61616 FOO.BAR\n```\n\n----------------------------------------\n\nTITLE: Linking Local QueueConnectionFactory to Global JNDI in jboss.xml\nDESCRIPTION: This XML snippet from jboss.xml links the local resource name 'queuefactoryref' to the global JNDI name 'java:/activemq/QueueConnectionFactory'. This allows JBoss to inject the configured QueueConnectionFactory into the EJB.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<resource-managers>\n   <resource-manager>\n      <res-name>queuefactoryref</res-name>\n      <res-jndi-name>java:/activemq/QueueConnectionFactory</res-jndi-name>\n   </resource-manager>\n   ...\n</resource-managers>\n```\n\n----------------------------------------\n\nTITLE: Consuming Advisory Messages in ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates how to consume advisory messages in ActiveMQ Classic. It creates a consumer for an advisory topic and sets a message listener to process incoming advisory messages. Inside the onMessage method, it checks if the message is an ActiveMQMessage, extracts the data structure, and logs any errors during the process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDestination advisoryDestination = AdvisorySupport.getProducerAdvisoryTopic(destination)\nMessageConsumer consumer = session.createConsumer(advisoryDestination);\nconsumer.setMessageListener(this);\n\npublic void onMessage(Message msg){\n    if(msg instanceof ActiveMQMessage) {\n        try {\n             ActiveMQMessage aMsg = (ActiveMQMessage)msg;\n             ProducerInfo prod = (ProducerInfo) aMsg.getDataStructure();\n        } \n        catch(JMSException e) {\n            log.error(\"Failed to process message: \" + msg);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Frame Size for Stomp over SSL\nDESCRIPTION: This snippet demonstrates how to configure the maxFrameSize wire format option to limit the maximum frame size that can be sent.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"stomp+ssl\" uri=\"stomp+ssl://localhost:61612?wireFormat.maxFrameSize=1000000\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Usage Check in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the ActiveMQ Classic broker to periodically check disk space and adjust store and temporary disk limits. The `schedulePeriodForDiskUsageCheck` attribute specifies the interval (in milliseconds) at which the check is performed. Setting this value to greater than 0 enables the periodic check.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/periodically-checking-disk-limits.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/core\" schedulePeriodForDiskUsageCheck=\"60000\">\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Stopping All ActiveMQ Brokers in a Specified JMX Context\nDESCRIPTION: This example demonstrates how to stop all running ActiveMQ Classic brokers within a specified JMX context. It uses a custom JMX URL to connect to a remote broker and stop all brokers registered there.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin stop --jmxurl service:jmx:rmi:///jndi/rmi://remotehost:1099/jmxrmi --all\n```\n\n----------------------------------------\n\nTITLE: Message with Message Group Header in STOMP\nDESCRIPTION: This example shows how to include the `message_group` header in a STOMP `MESSAGE` frame.  This enables message grouping, ensuring that messages with the same `message_group` value are consistently routed to the same consumer for processing, providing sticky load balancing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nMESSAGE\ndestination:/queue/PO.REQUEST\nmessage_group:hiram\n\nPO145\n^@\n```\n\n----------------------------------------\n\nTITLE: Configure Database Locker with JDBC in ActiveMQ\nDESCRIPTION: This XML snippet shows how to configure the Database Locker for the JDBC persistence adapter in ActiveMQ Classic. It defines the data directory, the data source (mysql-ds), and the lockAcquireSleepInterval for the database locker.  The lockKeepAlivePeriod is used to ensure the broker still holds the lock.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pluggable-storage-lockers.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n    <jdbcPersistenceAdapter dataDirectory=\"${activemq.data}\" dataSource=\"#mysql-ds\" lockKeepAlivePeriod=\"10000\">\n        <locker>\n            <database-locker lockAcquireSleepInterval=\"5000\"/>\n        </locker>\n    </jdbcPersistenceAdapter>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Valid ActiveMQ Classic XML Configuration (Alphabetical)\nDESCRIPTION: This XML configuration demonstrates the correct, alphabetical ordering of elements within the `<broker>` element for ActiveMQ Classic 5.4 and later. The order ensures that elements are arranged alphabetically, satisfying the XML schema validation requirements introduced in ActiveMQ Classic 5.4. This configuration resolves the `SAXParseException` errors encountered with incorrectly ordered configurations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd   \nhttp://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd      \nhttp://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\">\n  \n  <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"brokerB1\" destroyApplicationContextOnStop=\"true\">\n    \n    <destinationPolicy>\n      <policyMap>\n        <policyEntries>\n          <policyEntry queue=\">\" producerFlowControl=\"true\" memoryLimit=\"5mb\">\n            <deadLetterStrategy>\n              <individualDeadLetterStrategy queuePrefix=\"DLQ.\" useQueueForQueueMessages=\"true\"/>\n            </deadLetterStrategy>\n          </policyEntry>\n        </policyEntries>\n      </policyMap>\n    </destinationPolicy>\n    \n    <managementContext>\n      <managementContext createConnector=\"false\"/>\n    </managementContext>\n\n    <persistenceAdapter>\n      <kahaDB directory=\"${activemq.base}/data/kahadb\" enableJournalDiskSyncs=\"false\" indexWriteBatchSize=\"10000\" indexCacheSize=\"1000\"/>\n    </persistenceAdapter>\n\n    <plugins>\n      <loggingBrokerPlugin/>\n    </plugins>\n    \n    <systemUsage>\n      <systemUsage>\n        <memoryUsage>\n          <memoryUsage limit=\"420 mb\"/>\n        </memoryUsage>\n        <storeUsage>\n          <storeUsage limit=\"1 gb\"/>\n        </storeUsage>\n        <tempUsage>\n          <tempUsage limit=\"250 mb\"/>\n        </tempUsage>\n      </systemUsage>\n    </systemUsage>\n    \n    <transportConnectors>\n      <transportConnector name=\"tcp\" uri=\"tcp://0.0.0.0:61616\"/>\n    </transportConnectors>\n    \n  </broker>\n  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection with relaxAutoCommit\nDESCRIPTION: This snippet shows how to configure a MySQL connection for ActiveMQ using a `BasicDataSource`. The `relaxAutoCommit` flag is set to `true`, which is recommended when using MySQL with ActiveMQ.  The configuration includes the JDBC driver class name, URL, username, password and pooling settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-support.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n  <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n  <property name=\"url\" value=\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"/>\n  <property name=\"username\" value=\"activemq\"/>\n  <property name=\"password\" value=\"activemq\"/>\n  <property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Sending BlobMessage with InputStream - Java\nDESCRIPTION: This code demonstrates creating and sending a BlobMessage using an InputStream. It uses the createBlobMessage method of the ActiveMQSession, passing an InputStream object. The message is then sent via a MessageProducer. Requires an InputStream to be initialized beforehand.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/blob-messages.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// lets use a stream\nInputStream in = ...;\nBlobMessage message = session.createBlobMessage(in);\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring JMS Bridge Connector in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet configures a JMS bridge connector in ActiveMQ Classic to establish a connection with the local broker. It defines inbound and outbound queue bridges with specific queue names and selectors. The bean 'localBroker' configures the connection factory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-bridge-with-local-broker.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n    <broker useJmx=\"true\" persistent=\"false\" xmlns=\"http://activemq.org/config/1.0\"\n            brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\">\n        <jmsBridgeConnectors>\n            <jmsQueueConnector outboundQueueConnectionFactory=\"#localBroker\">\n                <inboundQueueBridges>\n                    <inboundQueueBridge\n                            inboundQueueName = \"queue.ping\"\n                            localQueueName   = \"queue.incomingMsgs.ping\"\n                            selector         = \"JMSType LIKE 'foo%'\"/>\n                </inboundQueueBridges>\n                <outboundQueueBridges>\n                    <outboundQueueBridge\n                            localQueueName    = \"queue.incomingMsgs.ping\"\n                            outboundQueueName = \"queue.pong\"\n                            selector          = \"JMSType LIKE 'foo%'\"/>\n                </outboundQueueBridges>\n            </jmsQueueConnector>\n        </jmsBridgeConnectors>\n    </broker>\n\n    <!-- JMS ConnectionFactory to use for local bridging -->\n    <bean id=\"localBroker\" class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n        <property name=\"brokerURL\" value=\"vm://localhost:61616\" />\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamicallyIncludedDestinations in NetworkConnector - XML\nDESCRIPTION: This snippet configures a NetworkConnector on the Local Broker to dynamically include a topic. It specifies that messages sent to the 'include.bar' topic on the Local Broker should be forwarded to the Remote Broker if there are consumers interested in that topic on the Remote Broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"static:(tcp://host)\">\n\t<dynamicallyIncludedDestinations>\n    \t<topic physicalName=\"include.bar\"/>\n\t</dynamicallyIncludedDestinations>\n</networkConnector>\n```\n\n----------------------------------------\n\nTITLE: Spring Configuration for Embedded Broker with VM Transport\nDESCRIPTION: This Spring configuration snippet demonstrates how to ensure that the embedded broker is started before the JMS ConnectionFactory when using the VM transport. The `depends-on` attribute ensures the `connectionFactory` bean depends on the `broker` bean, preventing connection issues due to the broker not being initialized.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/vm-transport-reference.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"broker\" class=\"org.apache.activemq.xbean.BrokerFactoryBean\">\n    <property name=\"config\" value=\"classpath:org/apache/activemq/xbean/activemq.xml\" />\n    <property name=\"start\" value=\"true\" />\n  </bean>\n\n  <bean id=\"connectionFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\" depends-on=\"broker\">\n    <property name=\"brokerURL\" value=\"vm://localhost\"/>\n  </bean>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ with Custom Config (5.8 or older)\nDESCRIPTION: This command starts ActiveMQ Classic in console mode using a custom configuration file, `conf/activemq-demo.xml`. The `xbean:` prefix specifies that the configuration file is an XBean XML configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq console xbean:conf/activemq-demo.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtered KahaDB Persistence\nDESCRIPTION: This XML snippet demonstrates how to configure filtered KahaDB persistence adapters in ActiveMQ Classic. It shows how to match all queues and all destinations, assigning specific configurations to each, like setting store usage limits for queues and disabling journal disk syncs for destinations. The root element is mKahaDB and its filteredPersistenceAdapters are filteredKahaDB.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kahadb.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"broker\">\n\n <persistenceAdapter>\n  <mKahaDB directory=\"${activemq.base}/data/kahadb\">\n    <filteredPersistenceAdapters>\n      <!-- match all queues -->\n      <filteredKahaDB queue=\">\">\n        <usage>\n         <storeUsage limit=\"1g\" />\n        </usage>\n        <persistenceAdapter>\n          <kahaDB journalMaxFileLength=\"32mb\"/>\n        </persistenceAdapter>\n      </filteredKahaDB>\n      \n      <!-- match all destinations -->\n      <filteredKahaDB>\n        <persistenceAdapter>\n          <kahaDB enableJournalDiskSyncs=\"false\"/>\n        </persistenceAdapter>\n      </filteredKahaDB>\n    </filteredPersistenceAdapters>\n  </mKahaDB>\n </persistenceAdapter>\n\n</broker>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker Configuration XML Snippet\nDESCRIPTION: This XML snippet shows a typical ActiveMQ Classic broker configuration using the tcpServerTransport. It includes settings for the URI, backlog, useAsyncSend, and maxOutstandingMessages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-configure-activemq-classic-to-use-aio-server-transport.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ==================================================================== -->\n<!-- ActiveMQ Classic Broker Configuration -->\n<!-- ==================================================================== -->\n<broker>\n <connector>\n  <tcpServerTransport uri=\"tcp://localhost:61616\" backlog=\"1000\" useAsyncSend=\"true\" maxOutstandingMessages=\"50\"/>\n </connector>\n    .\n    .\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with Durable Topic Subscriber\nDESCRIPTION: This command configures the ActiveMQ Classic consumer to use a durable topic subscriber. The `--durable` option enables durability, `--clientId` specifies the client ID, and `--destination` specifies the topic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq consumer --durable true --clientId example --destination topic://TEST\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker, Consumer, and Producer with Maven (Shell)\nDESCRIPTION: These commands are used to start the ActiveMQ Classic broker, consumer, and producer using the Maven plugin. The broker URL can be specified using the `-Durl` parameter. For remote brokers, `-Dfactory.brokerURL` needs to be specified for both consumer and producer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-performance-module-users-manual.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn activemq-perf:broker -Durl=broker:tcp://localhost:61616\nmvn activemq-perf:consumer\nmvn activemq-perf:producer\n```\n\nLANGUAGE: sh\nCODE:\n```\nmvn activemq-perf:consumer -Dfactory.brokerURL=tcp://host:port\nmvn activemq-perf:producer -Dfactory.brokerURL=tcp://host:port\n```\n\n----------------------------------------\n\nTITLE: Network Connector Configuration\nDESCRIPTION: This snippet illustrates how to configure a `<networkConnector>` element in ActiveMQ Classic to connect to another broker that requires authentication. The `userName` and `password` attributes within the `<networkConnector>` element are essential for providing authentication credentials to the target broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors> \n  <networkConnector name=\"brokerAbridge\" userName=\"user\" password=\"password\" uri=\"static://(tcp://brokerA:61616)\"/> \n</networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Server URL Configuration - Modified\nDESCRIPTION: This XML snippet from META-INF/ra.xml configures the URL for the ActiveMQ Classic server to use the vm protocol for embedded brokers. The original TCP configuration is commented out.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      The URL to the ActiveMQ Classic server that you want this connection to connect to.  If using\n      an embedded broker, this value should be 'vm://localhost'.\n    </description>\n    <config-property-name>ServerUrl</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <!-- <config-property-value>tcp://localhost:61616</config-property-value> -->\n    <config-property-value>vm://localhost</config-property-value>\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Passwords in authenticationUser (XML)\nDESCRIPTION: This snippet shows how to use encrypted passwords in the `simpleAuthenticationPlugin` configuration. The `${activemq.password}` and `${guest.password}` placeholders will be resolved using the decrypted values from the properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<simpleAuthenticationPlugin>\n  <users>\n    <authenticationUser username=\"system\" password=\"${activemq.password}\"\n      groups=\"users,admins\"/>\n    <authenticationUser username=\"user\" password=\"${guest.password}\"\n      groups=\"users\"/>\n    <authenticationUser username=\"guest\" password=\"${guest.password}\" groups=\"guests\"/>\n  </users>\n</simpleAuthenticationPlugin>\n```\n\n----------------------------------------\n\nTITLE: Disabling Object Serialization in ActiveMQ Classic 4.x (Java)\nDESCRIPTION: This snippet demonstrates how to disable automatic serialization of ObjectMessage payloads in ActiveMQ Classic 4.x using the `objectMessageSerializationDefered` flag on the ActiveMQConnectionFactory. Setting this flag to `true` enables passing objects by reference instead of by value, potentially improving performance.  Ensure all producers and consumers share a compatible class loader when using this optimization to avoid ClassCastExceptions. Requires ActiveMQ client library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-should-i-use-the-vm-transport.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost\");\nfactory.setObjectMessageSerializationDefered(true);\n```\n\n----------------------------------------\n\nTITLE: Sending a Large Message via OutputStream in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to send a large message using an OutputStream in ActiveMQ Classic. It creates an OutputStream associated with a destination queue, writes the file data to the stream, and then closes the stream to ensure the message is sent. Requires an ActiveMQConnection and a Destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-streams.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnection connection = ...;\nDestination destination = new ActiveMQQueue(\"FOO.BAR\");\n\nOutputStream out = connection.createOutputStream(destination);\n\n// write the file to out\nout.close();\n```\n\n----------------------------------------\n\nTITLE: Configure JMS Queue Bridge using XBean XML\nDESCRIPTION: This snippet demonstrates how to configure a JMS Queue Bridge in ActiveMQ Classic using XBean XML. It sets up a broker with a JMS queue connector that forwards messages to a remote ActiveMQ broker. It defines an inbound queue bridge to receive messages from a specific queue on the remote broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-to-jms-bridge.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/core\" id=\"localbroker\"\n  brokerName=\"localBroker\" persistent=\"false\">\n  <jmsBridgeConnectors>\n    <jmsQueueConnector\n      outboundQueueConnectionFactory=\"#remoteFactory\">\n      <inboundQueueBridges>\n        <inboundQueueBridge\n          inboundQueueName=\"org.apache.activemq.network.jms.QueueBridgeXBeanTest\" />\n      </inboundQueueBridges>\n    </jmsQueueConnector>\n  </jmsBridgeConnectors>\n  <transportConnectors>\n    <transportConnector uri=\"tcp://localhost:61234\" />\n  </transportConnectors>\n</broker>\n<!-- JMS ConnectionFactory to use remote -->\n<bean id=\"remoteFactory\"\n  class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n  <property name=\"brokerURL\" value=\"tcp://localhost:61666\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Text Message via ActiveMQ CLI\nDESCRIPTION: This command sends a text message with custom text using the ActiveMQ Classic command-line tool. The `--message` parameter specifies the message content and `--messageCount` specifies the number of messages to send.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq producer --message \"My message\" --messageCount 1\n```\n\n----------------------------------------\n\nTITLE: Discovery Transport Configuration Syntax\nDESCRIPTION: Shows the general syntax for configuring the Discovery transport in ActiveMQ Classic. It demonstrates two possible formats: one with transport options and another without.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndiscovery:(discoveryAgentURI)?transportOptions\n```\n\nLANGUAGE: text\nCODE:\n```\ndiscovery:discoveryAgentURI\n```\n\n----------------------------------------\n\nTITLE: SQL Server 2005 DataSource Configuration (XML)\nDESCRIPTION: Defines a bean for the SQL Server 2005 DataSource using Apache Commons DBCP. It configures the connection to a SQL Server 2005 database using the specified driver class, JDBC URL format, username, and password. The URL includes host, port, database name, user, and password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sqlserver.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mssql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n  <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n  <property name=\"url\" value=\"jdbc:sqlserver://HOST:PORT;databaseName=DBNAME;user=USER;password=PASSWORD\"/>\n  <property name=\"username\" value=\"USER\"/>\n  <property name=\"password\" value=\"PASSWORD\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Checking JMSXGroupFirstForConsumer Property\nDESCRIPTION: This Java code snippet demonstrates how to check for the JMSXGroupFirstForConsumer boolean header on a JMS message. This header is set on the first message sent to a consumer for a specific message group, useful for cache invalidation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString groupId = message.getStringProperty(\"JMSXGroupId\");\n\nif (message.getBooleanProperty(\"JMSXGroupFirstForConsumer\")) {\n   // flush cache for groupId\n}\n```\n\n----------------------------------------\n\nTITLE: Purge Messages from a Queue ActiveMQ Admin\nDESCRIPTION: This command deletes all messages from the specified queue.  It utilizes the activemq-admin tool with the 'purge' task, targeting the queue specified.  No specific options are used in this example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin purge FOO.BAR\n```\n\n----------------------------------------\n\nTITLE: Zeroconf Transport URL Format\nDESCRIPTION: This defines the format of the transport URL used when using Zeroconf for discovery.  The `<serviceName>` is the Zeroconf service name, which starts with an underscore (_) and ends with a dot (.).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nzeroconf:<serviceName>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stomp over NIO\nDESCRIPTION: This snippet demonstrates how to configure ActiveMQ Classic to use Stomp over the NIO transport for better scalability and performance by changing the URI scheme of the transport connector to `stomp+nio`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"stomp+nio\" uri=\"stomp+nio://localhost:61612\"/>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Broker XML Configuration with ZeroConf Discovery\nDESCRIPTION: Configures an ActiveMQ broker to use ZeroConf for discovery. It demonstrates how to set the `discoveryUri` attribute on a transport connector to enable ZeroConf-based announcement of the broker's availability.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/zeroconf-transport-reference.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker name=\"foo\">\n  <transportConnectors>\n    <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" discoveryUri=\"zeroconf:_activemq_development. />\n  </transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Broker Configuration with Slow Consumer Handling\nDESCRIPTION: This XML snippet shows an example ActiveMQ Classic broker configuration, where the `pendingMessageLimitStrategy` is configured for topics matching the `PRICES.>` wildcard. This strategy limits the number of messages kept for each consumer to 10 above their prefetch buffer size, preventing slow consumers from overwhelming the broker. It also sets a timed subscription recovery policy.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-consumer-handling.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\" \n       xmlns:amq=\"http://activemq.apache.org/schema/core\" \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n                           http://www.springframework.org/schema/beans/spring-beans.xsd \n                           http://activemq.apache.org/schema/core \t\n                           http://activemq.apache.org/schema/core/activemq-core.xsd\"> \n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/> \n  <broker xmlns=\"http://activemq.apache.org/schema/core\" persistent=\"false\" brokerName=\"${brokername}\"> \n    <!-- lets define the dispatch policy --> \n    <destinationPolicy> \n      <policyMap> \n        <policyEntries> \n          <policyEntry topic=\"FOO.>\"> \n            <dispatchPolicy> \n              <roundRobinDispatchPolicy/> \n            </dispatchPolicy> \n            <subscriptionRecoveryPolicy> \n              <lastImageSubscriptionRecoveryPolicy/> \n            </subscriptionRecoveryPolicy>\n          </policyEntry> \n          <policyEntry topic=\"ORDERS.>\"> \n            <dispatchPolicy> \n              <strictOrderDispatchPolicy/> \n            </dispatchPolicy> \n            <!-- 1 minutes worth --> \n            <subscriptionRecoveryPolicy>\n              <timedSubscriptionRecoveryPolicy recoverDuration=\"60000\"/>\n            </subscriptionRecoveryPolicy> \n          </policyEntry> \n          <policyEntry topic=\"PRICES.>\"> \n          <!-- lets force old messages to be discarded for slow consumers --> \n            <pendingMessageLimitStrategy> \n              <constantPendingMessageLimitStrategy limit=\"10\"/> \n            </pendingMessageLimitStrategy> \n            <!-- 10 seconds worth --> \n            <subscriptionRecoveryPolicy> \n              <timedSubscriptionRecoveryPolicy recoverDuration=\"10000\"/> \n            </subscriptionRecoveryPolicy> \n          </policyEntry> \n          <policyEntry tempTopic=\"true\" advisoryForConsumed=\"true\"/> \n          <policyEntry tempQueue=\"true\" advisoryForConsumed=\"true\"/> \n        </policyEntries> \n      </policyMap> \n    </destinationPolicy> \n  </broker> \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring log4j Conversion Pattern for ActiveMQ Classic MDC\nDESCRIPTION: This snippet shows how to define a `ConversionPattern` in log4j to include MDC values such as broker name, connector address, and destination name in the log output. This is helpful for environments with multiple brokers sharing the same log, making it easier to differentiate log messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mdc-logging.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nlog4j.appender.stdout.layout.ConversionPattern=%d [%-15.15t] - %-5p %-30.30c{1} - %-10.10X{activemq.broker} %-20.20X{activemq.connector} %-20.20X{activemq.destination} - %m%n\n```\n\n----------------------------------------\n\nTITLE: Creating JNDI Context with Properties\nDESCRIPTION: This code snippet shows how to create a new initial context using a Properties object instead of relying on a jndi.properties file. This approach allows configuring the initial context factory and provider URL programmatically, as recommended by the JMS specification.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava.util.Properties props = new java.util.Properties(); \nprops.setProperty(javax.naming.Context.INITIAL_CONTEXT_FACTORY, \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\"); \nprops.setProperty(javax.naming.Context.PROVIDER_URL, \"tcp://hostname:61616\"); \njavax.naming.Context ctx = new javax.naming.InitialContext(props);\n```\n\n----------------------------------------\n\nTITLE: Disabling Dedicated Task Runner in ActiveMQ Classic (Startup)\nDESCRIPTION: This snippet demonstrates how to disable the dedicated task runner in ActiveMQ Classic, which can help reduce the number of threads used when managing a large number of queues. This configuration can be set in the startup script or in the activemq.conf file. It's recommended for deployments handling tens of thousands of queues. Note that from version 5.6 onwards, dedicated task runner is disabled by default.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-configure-10s-of-1000s-of-queues-in-a-single-broker.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nACTIVEMQ_OPTS=\"-Xmx512M -Dorg.apache.activemq.UseDedicatedTaskRunner=false\"\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic 4.x .bindings Configuration (properties)\nDESCRIPTION: This configuration defines the JNDI bindings for ActiveMQ Classic 4.x.  It sets up several queues (Archive, GateIn, ProviderIn, ProviderOut) and a QueueConnectionFactory with specific properties like brokerURL, brokerName, username, and password. The ClassName and FactoryName specify the classes used by JNDI to create and manage the ActiveMQ resources.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sun-jndi.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nArchive/ClassName=org.apache.activemq.command.ActiveMQQueue\nArchive/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory\nArchive/RefAddr/0/Type=physicalName\nArchive/RefAddr/0/Content=Archive\nArchive/RefAddr/0/Encoding=String\n\nGateIn/ClassName=org.apache.activemq.command.ActiveMQQueue\nGateIn/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory\nGateIn/RefAddr/0/Type=physicalName\nGateIn/RefAddr/0/Content=GateIn\nGateIn/RefAddr/0/Encoding=String\n\nProviderIn/ClassName=org.apache.activemq.command.ActiveMQQueue\nProviderIn/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory\nProviderIn/RefAddr/0/Type=physicalName\nProviderIn/RefAddr/0/Content=ProviderIn\nProviderIn/RefAddr/0/Encoding=String\n\nProviderOut/ClassName=org.apache.activemq.command.ActiveMQQueue\nProviderOut/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory\nProviderOut/RefAddr/0/Type=physicalName\nProviderOut/RefAddr/0/Content=ProviderOut\nProviderOut/RefAddr/0/Encoding=String\n\nQueueConnectionFactory/ClassName=org.apache.activemq.ActiveMQConnectionFactory\nQueueConnectionFactory/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory\nQueueConnectionFactory/RefAddr/0/Type=brokerURL\nQueueConnectionFactory/RefAddr/0/Content=vm\\://localhost\nQueueConnectionFactory/RefAddr/0/Encoding=String\nQueueConnectionFactory/RefAddr/1/Type=brokerName\nQueueConnectionFactory/RefAddr/1/Content=ID\\:zdv-1189-1098562819250-0\\:0\nQueueConnectionFactory/RefAddr/1/Encoding=String\nQueueConnectionFactory/RefAddr/2/Type=password\nQueueConnectionFactory/RefAddr/2/Content=defaultPassword\nQueueConnectionFactory/RefAddr/2/Encoding=String\nQueueConnectionFactory/RefAddr/3/Type=userName\nQueueConnectionFactory/RefAddr/3/Content=defaultUser\nQueueConnectionFactory/RefAddr/3/Encoding=String\n```\n\n----------------------------------------\n\nTITLE: FixedCountSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Configures a fixed-count subscription recovery policy. The maximumSize attribute specifies the maximum number of messages to retain.  Older messages are discarded when the limit is exceeded.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<fixedCountSubscriptionRecoveryPolicy maximumSize=\"100\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connector with Disabled Inactivity Monitor - XML\nDESCRIPTION: This XML snippet demonstrates how to configure an ActiveMQ Classic network connector with the wireFormat.maxInactivityDuration property set to 0, effectively disabling the inactivity monitor. This workaround prevents connection drops when sending large messages over slow network links by preventing premature timeouts.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-networks-drop-large-messages.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker brokerName=\"receiver\">\n    <transportConnectors>\n      <transportConnector uri=\"tcp://localhost:62002\"/>\n    </transportConnectors>\n\n    <networkConnectors>\n      <networkConnector uri=\"static:(tcp://somehost:62001?wireFormat.maxInactivityDuration=0)\"/>\n    </networkConnectors>\n\n    <persistenceAdapter>\n      <memoryPersistenceAdapter/>\n    </persistenceAdapter>\n  </broker>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Declaring TopicDurableMDB in ejb-jar.xml\nDESCRIPTION: This snippet declares the `TopicDurableMDB` within the `ejb-jar.xml` deployment descriptor. It specifies the EJB name, class, messaging type, and activation configuration properties, including the destination and destination type. The activation configuration links the MDB to a JCA.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/inbound-communication.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<message-driven>\n   ...\n   <ejb-name>TopicDurableMDB</ejb-name>\n   <ejb-class>com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean</ejb-class>\n   <messaging-type>javax.jms.MessageListener</messaging-type>\n   ...\n   <activation-config>\n      <activation-config-property>\n         <activation-config-property-name>Destination</activation-config-property-name>\n         <activation-config-property-value>topic.testTopic</activation-config-property-value>\n      </activation-config-property>\n      <activation-config-property>\n         <activation-config-property-name>DestinationType</activation-config-property-name>\n         <activation-config-property-value>javax.jms.Topic</activation-config-property-value>\n      </activation-config-property>\n      ...\n   </activation-config>\n   ...\n</message-driven>\n```\n\n----------------------------------------\n\nTITLE: Java Stomp API Usage Example in ActiveMQ Classic\nDESCRIPTION: This Java code demonstrates basic usage of the Java Stomp API included with ActiveMQ Classic. It shows how to connect to a broker, send and receive messages, and manage transactions. It's designed for testing purposes and recommends using the standard JMS API in production environments.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nStompConnection connection = new StompConnection();\nconnection.open(\"localhost\", 61613);\n\t\t\nconnection.connect(\"system\", \"manager\");\nStompFrame connect = connection.receive();\n\nif(!connect.getAction().equals(Stomp.Responses.CONNECTED)) {\n\tthrow new Exception (\"Not connected\");\n}\n\t\t\nconnection.begin(\"tx1\");\nconnection.send(\"/queue/test\", \"message1\", \"tx1\", null);\nconnection.send(\"/queue/test\", \"message2\", \"tx1\", null);\nconnection.commit(\"tx1\");\n\t\nconnection.subscribe(\"/queue/test\", Subscribe.AckModeValues.CLIENT);\n\t\nconnection.begin(\"tx2\");\n\t\nStompFrame message = connection.receive();\nSystem.out.println(message.getBody());\nconnection.ack(message, \"tx2\");\n\t\nmessage = connection.receive();\nSystem.out.println(message.getBody());\nconnection.ack(message, \"tx2\");\n\t\nconnection.commit(\"tx2\");\n\t\t\nconnection.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Enabling JMSXUserID via Java Code\nDESCRIPTION: This snippet demonstrates how to enable the populateJMSXUserID property on the ActiveMQ broker using Java code. This allows the broker to add the JMSXUserID property to each JMS message, revealing the authenticated username of the sender.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmsxuserid.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\nbroker.setPopulateJMSXUserID(true);\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Destination\nDESCRIPTION: This snippet shows how a consumer can subscribe to a destination using an HTTP POST request.  A unique consumer ID is used to identify the subscription. This is part of a simple REST design using 1 at a time delivery.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /subscribe/consumerId/Destination\n```\n\n----------------------------------------\n\nTITLE: Broker TCP Transport Configuration\nDESCRIPTION: Example of configuring the TCP transport on the broker side within a TransportConnector. This includes setting the thread name, disabling tracing, and configuring the socket timeout.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tcp-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntcp://localhost:61616?transport.threadName&transport.trace=false&transport.soTimeout=60000\n```\n\n----------------------------------------\n\nTITLE: NetworkConnector Configuration for Queues Only - XML\nDESCRIPTION: This snippet configures a NetworkConnector to only forward messages for queues, excluding topics. This can be useful when you want to separate queue and topic traffic across different network connectors.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors>\n      <networkConnector uri=\"static:(tcp://localhost:61617)\"\n         name=\"queues_only\"\n         conduitSubscriptions=\"false\"\n         decreaseNetworkConsumerPriority=\"false\">\n      \t<excludedDestinations>\n      \t\t<topic physicalName=\">\"/>\n      \t</excludedDestinations>\n      </networkConnector>\n    </networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Create Connector Resource (asadmin)\nDESCRIPTION: This command creates a connector resource in SJSAS using the asadmin tool. It associates the resource with the specified connection pool (ActiveMQQueueConnectionFactoryPool) and JNDI name (jms/SimpleQueueConnectionFactory), which should match the jndi-name in sun-ejb-jar.xml.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasadmin create-connector-resource \\\n  --poolname ActiveMQQueueConnectionFactoryPool \\\n  jms/SimpleQueueConnectionFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Topic Subscriber Cursors in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to configure different cursor policies for durable and transient topic subscribers in ActiveMQ Classic. It sets the producerFlowControl to false, a memoryLimit of 1mb, and defines deadLetterStrategy. It specifies vmCursor for pendingSubscriberPolicy and vmDurableCursor for pendingDurableSubscriberPolicy.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-cursors.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n      <policyMap>\n        <policyEntries>\n          <policyEntry topic=\"org.apache.>\" producerFlowControl=\"false\" memoryLimit=\"1mb\">\n            <dispatchPolicy>\n              <strictOrderDispatchPolicy />\n            </dispatchPolicy>\n            <deadLetterStrategy>\n              <individualDeadLetterStrategy  topicPrefix=\"Test.DLQ.\" />\n            </deadLetterStrategy>\n            <pendingSubscriberPolicy>\n            \t<vmCursor />\n            </pendingSubscriberPolicy>\n            <pendingDurableSubscriberPolicy>\n                <vmDurableCursor/>\n            </pendingDurableSubscriberPolicy>\n          </policyEntry>\n        </policyEntries>\n      </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Path\nDESCRIPTION: Specifies the location of the XML configuration file used to configure the ActiveMQ Classic broker when running in embedded mode. The path can be a classpath resource or a file system URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-3-transport-configurations.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nfoo/bar.xml\n```\n\nLANGUAGE: xml\nCODE:\n```\nfile:dir/file.xml\n```\n\n----------------------------------------\n\nTITLE: Segmented In-VM JMS Communication\nDESCRIPTION: This snippet demonstrates how to segment the VM protocol for logically different JMS networks within the same JVM, using unique URIs like `vm://localhost/foo` to group networks and prevent interference.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-topologies.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvm://localhost/foo\n```\n\n----------------------------------------\n\nTITLE: Setting ACTIVEMQ_SSL_OPTS Environment Variable\nDESCRIPTION: This command sets the ACTIVEMQ_SSL_OPTS environment variable. This variable specifies the path to the broker's keystore and the keystore password.  This is used by ActiveMQ Classic to configure SSL for the broker.  The variable is used by the broker startup scripts.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport ACTIVEMQ_SSL_OPTS = -Djavax.net.ssl.keyStore=/path/to/broker.ks -Djavax.net.ssl.keyStorePassword=password\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Packages in Camel Context (XML)\nDESCRIPTION: This XML configuration shows how to set trusted packages for ObjectMessage deserialization within a Camel context, using Spring beans.  It defines an `ActiveMQConnectionFactory` bean and sets the `trustedPackages` property to a list of allowed packages. Requires activemq-spring and camel-jms libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/objectmessage.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"connectionFactory\" class=\"org.apache.activemq.spring.ActiveMQConnectionFactory\">\n    <property name=\"brokerURL\" value=\"tcp://localhost:61616\"/>\n    <property name=\"trustedPackages\">\n        <list>\n            <value>org.apache.activemq.test</value>\n            <value>org.apache.camel.test</value>\n        </list>\n    </property>\n</bean>\n<bean id=\"jmsConfig\" class=\"org.apache.camel.component.jms.JmsConfiguration\">\n    <property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n</bean>\n<bean id=\"activemq\" class=\"org.apache.activemq.camel.component.ActiveMQComponent\">\n    <property name=\"configuration\" ref=\"jmsConfig\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Disabling Topic Advisories in ActiveMQConnectionFactory via URL\nDESCRIPTION: This snippet demonstrates disabling topic advisories on the ActiveMQConnectionFactory using the broker URL. It appends the jms.watchTopicAdvisories=false parameter to the URL to prevent automatic subscription to topic advisories.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ntcp://localhost:61616?jms.watchTopicAdvisories=false\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenWire Format in Java\nDESCRIPTION: This Java snippet demonstrates how to configure the OpenWire format using the ActiveMQConnectionFactory.  It sets the cacheEnabled and tightEncodingEnabled options via the connection URI.  It requires the ActiveMQ client library as a dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-wire-formats.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"tcp://localhost:61616?wireFormat.cacheEnabled=false&wireFormat.tightEncodingEnabled=false\");\n```\n\n----------------------------------------\n\nTITLE: Zeroconf Broker URL Example\nDESCRIPTION: This brokerURL uses Zeroconf to find an available broker. One will be randomly chosen & things will auto-failover on disconnect if there are several brokers running.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nzeroconf:_activemq_development.\n```\n\n----------------------------------------\n\nTITLE: Setting Max Thread Pool Size in ActiveMQ Classic Java\nDESCRIPTION: This code snippet demonstrates how to limit the maximum number of threads a session can use in ActiveMQ Classic by setting the `maxThreadPoolSize` property on the `ActiveMQConnectionFactory`. This prevents uncontrolled thread creation and potential OOM issues. The `maxThreadPoolSize` is set to 10 in this example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-deal-with-large-number-of-threads-in-clients.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nconnectionFactory.setMaxThreadPoolSize(10);\nConnection conn = connectionFactory.createConnection();\nconn.start();\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistence in ActiveMQ\nDESCRIPTION: This XML snippet shows how to disable persistence in ActiveMQ by setting the `persistent` attribute of the broker element to `false`. This configuration will cause the broker to use the MemoryPersistenceAdapter.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<broker persistent=\"false\"> </broker>\n```\n\n----------------------------------------\n\nTITLE: Excluding Virtual Topic Consumer Queues in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to exclude virtual topic consumer queues from a network connector configuration in ActiveMQ Classic. This prevents duplicate messages in a network of brokers when using virtual topics. The configuration excludes any queue with a physical name matching the pattern 'Consumer.*.VirtualTopic.>' from being bridged by the network connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-destinations.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors> <networkConnector uri=\"static://([tcp://localhost:61617](tcp://localhost:61617))\">\n <excludedDestinations> \n <queue physicalName=\"Consumer.*.VirtualTopic.>\"/> \n </excludedDestinations> \n</networkConnector> </networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Selector Cache Broker Plugin\nDESCRIPTION: This XML snippet configures the VirtualSelectorCacheBrokerPlugin in ActiveMQ. It specifies the path to a file where the selector cache will be persisted, allowing the broker to retain selector information even after consumers disconnect and reconnect. The persistFile option uses Java serialization, requiring appropriate JDK serialFilter configuration for security.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-destinations.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n <virtualSelectorCacheBrokerPlugin persistFile=\"<some path>/selectorcache.data\" />\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Linking TopicDurableMDB to Connector in jboss.xml\nDESCRIPTION: This snippet links the `TopicDurableMDB` to the `activemq-ra-1.2.rar` connector and specifies that instances of the MDB should be placed in the newly configured MDB container. This completes the configuration necessary to enable the MDB to process messages from ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/inbound-communication.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<message-driven>\n   <ejb-name>TopicDurableMDB</ejb-name>\n   <resource-adapter-name>activemq-ra-1.2-SNAPSHOT.rar</resource-adapter-name>\n   <configuration-name>ActiveMQ Classic Message Driven Bean</configuration-name>\n</message-driven>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic Broker\nDESCRIPTION: This command starts the ActiveMQ Classic broker in the console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console\n```\n\n----------------------------------------\n\nTITLE: Polling for Messages with receiveNoWait in C++\nDESCRIPTION: This snippet shows how to poll for messages using the `receiveNoWait()` method.  The method returns immediately, allowing for other processing to occur if no message is available. A check for NULL is necessary to determine if a message was received.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nwhile( !done ) {\n\n   std::auto_ptr<Message> message( myConsumer->receiveNoWait() );\n\n   if( message.get() != NULL ) {\n      ...Do Something with the message...\n   }\n\n   ...Perform other application logic before checking for another message...\n}\n```\n\n----------------------------------------\n\nTITLE: Browse Queue Tree\nDESCRIPTION: Retrieves a list of queues and child categories within a specific directory as an Atom Feed. A GET request to a directory URL like /queues/uk/products returns a 200 OK response with an Atom Feed containing entries for each queue and child category within the specified directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /queues/uk/products\n-------------------->\n\n200 OK\nAtom Feed with one entry per queue in uk.products.* together with any child catgory/directory\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Dispatch in ActiveMQ\nDESCRIPTION: This XML snippet shows how to configure a destination policy to delay message dispatch until a certain time or a certain number of consumers are present. This helps ensure equal message group distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\">\" timeBeforeDispatchStarts=\"200\"/>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: TransportConnector without multicast discovery - XML\nDESCRIPTION: This snippet shows the modified transportConnector element after removing the multicast discovery URI attribute. The broker will no longer advertise its connection URI on the multicast network, disabling multicast discovery for this connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-disable-multicast-discovery.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\" />\n```\n\n----------------------------------------\n\nTITLE: OSGi Reference for ActiveMQ Component\nDESCRIPTION: Adds an OSGi reference to the ActiveMQ component. This allows a pre-configured ActiveMQComponent instance deployed in the OSGi container to take precedence over the default component.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<osgi:reference id=\"activemq\" interface=\"org.apache.camel.Component\" />\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Classic Broker in Console\nDESCRIPTION: This command starts an ActiveMQ Classic broker using the default configuration in the foreground. It relies on the 'activemq' script provided in the ActiveMQ Classic binary distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console\n```\n\n----------------------------------------\n\nTITLE: Disabling Dedicated Task Runners - ActiveMQ Classic\nDESCRIPTION: This code snippet demonstrates how to disable dedicated task runners in ActiveMQ Classic to reduce the number of threads used. It involves setting the ACTIVEMQ_OPTS environment variable.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/scaling-queues.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACTIVEMQ_OPTS=\"-Xmx512M -Dorg.apache.activemq.UseDedicatedTaskRunner=false\"\n```\n\n----------------------------------------\n\nTITLE: QueueConnectionFactory Configuration in panacya-jms-ds.xml\nDESCRIPTION: This XML snippet from panacya-jms-ds.xml configures the QueueConnectionFactory and binds it to the JNDI name 'activemq/QueueConnectionFactory'. It specifies the RAR name, connection definition, and security domain.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<tx-connection-factory>\n   <jndi-name>activemq/QueueConnectionFactory</jndi-name>\n   <xa-transaction/>\n   <rar-name>activemq-ra-1.2-SNAPSHOT.rar</rar-name>\n   <connection-definition>javax.jms.QueueConnectionFactory</connection-definition>\n   <security-domain-and-application>JmsXARealm</security-domain-and-application>\n</tx-connection-factory>\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Network Connector - Simple Network\nDESCRIPTION: This snippet demonstrates how to configure an LDAP network connector in ActiveMQ Classic for a simple network topology. It specifies the LDAP server URI, base distinguished name (DN), anonymous authentication, search filter, and search scope. This configuration allows 'srv-a.mydomain.com' to discover other brokers via LDAP.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ldap-broker-discovery-mechanism.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"srv-a.mydomain.com\" ...>\n   ...\n\n   <networkConnectors>\n      <ldapNetworkConnector uri=\"ldap://myldap.mydomain.com:389\"\n                            base=\"dc=brokers,dc=mydomain,dc=com\"\n                            anonymousAuthentication=\"true\"\n                            searchFilter=\"(cn=*)\"\n                            searchScope=\"SUBTREE_SCOPE\"\n                            />\n   </networkConnectors>\n\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Ant Build Output for ActiveMQ Consumer\nDESCRIPTION: This snippet shows the expected output from the 'ant consumer' command.  It details the steps of the build process, including creating directories, compiling source files, and running the consumer. The consumer then connects to the ActiveMQ broker and starts consuming messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\nBuildfile: build.xml\n\ninit:\n    [mkdir] Created dir: /opt/incubator-activemq-4.0.2/example/target/classes\n    [mkdir] Created dir: /opt/incubator-activemq-4.0.2/example/src/ddl\n\ncompile:\n    [javac] Compiling 6 source files to /opt/incubator-activemq-4.0.2/example/target/classes\n\nconsumer:\n     [echo] Running consumer against server at $url = tcp://localhost:61616 for subject $subject = TEST.FOO\n     [java] Connecting to URL: tcp://localhost:61616\n     [java] Consuming queue: TEST.FOO\n     [java] Using non-durable subscription\n     [java] We are about to wait until we consume: 10 message(s) then we will shutdown\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Destinations with getDestinations() in Java\nDESCRIPTION: This snippet demonstrates how to retrieve all active destinations from the ActiveMQ Classic broker programmatically using the `getDestinations()` method. This method allows developers to obtain a list of currently active destinations, enabling monitoring and management of the message broker's state.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-see-what-destinations-are-used.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nRegion.getDestinations(ActiveMQDestination destination)\n```\n\n----------------------------------------\n\nTITLE: Configuring In-JVM Messaging URL - ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to configure the broker URL for pure in-memory messaging in ActiveMQ Classic 3.x/4.x. Setting the URL to 'vm://localhost' enables message exchange within the same JVM. You can replace 'localhost' with any text to create logical JMS broker segments.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-activemq-classic-using-in-jvm-messaging.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvm://localhost\n```\n\n----------------------------------------\n\nTITLE: VM Transport Example URI with Marshal and Persistence\nDESCRIPTION: This example URI demonstrates how to configure the VM transport with marshal and broker persistence options.  marshal=false disables marshalling, while broker.persistent=false disables persistent storage for the embedded broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/vm-transport-reference.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvm://broker1?marshal=false&broker.persistent=false\n```\n\n----------------------------------------\n\nTITLE: Transforming XML to Java Object with Stomp in ActiveMQ Classic\nDESCRIPTION: This Java code demonstrates how to send a Java object as an XML message using ActiveMQ Classic's built-in transformation capabilities over Stomp. It involves creating a producer, sending an object message, connecting to the Stomp broker, subscribing to a queue with XML transformation specified, and verifying the received message.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate String xmlObject = \"<pojo>\\n\" \n        + \"  <name>Dejan</name>\\n\"\n        + \"  <city>Belgrade</city>\\n\" \n        + \"</pojo>\";\n\npublic void testTransformationReceiveXMLObject() throws Exception {\n\t\n    MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));\n    ObjectMessage message = session.createObjectMessage(new SamplePojo(\"Dejan\", \"Belgrade\"));\n    producer.send(message);\n\t\n    String frame = \"CONNECT\\n\" + \"login: system\\n\" + \"passcode: manager\\n\\n\" + Stomp.NULL;\n    stompConnection.sendFrame(frame);\n\n    frame = stompConnection.receiveFrame();\n    assertTrue(frame.startsWith(\"CONNECTED\"));\n\n    frame = \"SUBSCRIBE\\n\" + \"destination:/queue/USERS.\" + getQueueName() + \"\\n\" + \"ack:auto\" + \"\\n\" + \"transformation:jms-object-xml\\n\\n\" + Stomp.NULL;\n    stompConnection.sendFrame(frame);\n    \n    frame = stompConnection.receiveFrame();\n\n    assertTrue(frame.trim().endsWith(xmlObject));\n    \n    frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;\n    stompConnection.sendFrame(frame);\n}     \n```\n\n----------------------------------------\n\nTITLE: Configuring the MessageServlet to Default to Queue\nDESCRIPTION: This snippet shows how to configure the `MessageServlet` in `web.xml` to default to creating queues instead of topics when a type parameter is not specified in the REST request.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n  <servlet-name>MessageServlet</servlet-name>  \n  <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n  <load-on-startup>1</load-on-startup>\n  <init-param>\n     <param-name>topic</param-name>\n     <param-value>false</param-value>\n  </init-param>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Native Compile Java JAR\nDESCRIPTION: Compiles the Java JAR file (MQAdapter.jar) into a shared library using GCJ. This allows the Java code to be linked with the C++ code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngcj -shared -findirect-dispatch -fjni -fPIC -Wl,-symbolic -o MQAdapter.so MQAdapter.jar\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Consumer with Ant\nDESCRIPTION: This snippet demonstrates how to run the ActiveMQ Classic consumer using Apache Ant.  It navigates to the examples directory and executes the `ant consumer` command. The output shows the build process and the consumer connecting to the specified URL and consuming messages from the TEST.FOO queue. This requires Apache Ant to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /opt/incubator-activemq-4.0.2/examples    #note in activemq v5 the directory is just \"example\" not \"examples\"\n$ ant consumer\n```\n\n----------------------------------------\n\nTITLE: Customizing SQL DDL in ActiveMQ\nDESCRIPTION: This snippet demonstrates how to configure SQL datatypes within ActiveMQ's JDBC persistence adapter using the `<statements>` element.  Specifically, it shows how to customize the `stringIdDataType`. This customization ensures that the JDBCMessageStore uses the right SQL flavor for the underlying database.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-support.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker useJmx=\"false\">\n\n  <persistenceAdapter>\n    <journaledJDBC useJournal=\"false\">\n      <statements>\n        <statements stringIdDataType =\"VARCHAR(128)\"/>\n      </statements>\n    </journaledJDBC>\n  </persistenceAdapter>\n\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configure Resource Adapter - ActiveMQ Classic - Shell\nDESCRIPTION: Configures the ActiveMQ resource adapter in Glassfish to connect to a failover setup of ActiveMQ brokers. The ServerUrl property defines the broker addresses, reconnection delay, and JMS compression settings. The UserName and Password properties configure authentication for the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-glassfish.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/asadmin create-resource-adapter-config --property ServerUrl='failover:(tcp://broker-c1.foobar.local:61616,tcp://broker-c2.foobar.local:61616,tcp://broker-c3.foobar.local:61616)?initialReconnectDelay=2000&jms.useCompression=true':UserName='admin':Password='admin' activemq-rar\n```\n\n----------------------------------------\n\nTITLE: Creating Client Truststore and Importing Broker Certificate using Keytool\nDESCRIPTION: This command creates a truststore for the client and imports the broker's certificate into it.  This allows the client to trust the broker's certificate. The truststore is named client.ts and the imported certificate is from the file broker_cert with alias 'broker'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -import -alias broker -keystore client.ts -file broker_cert\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with a Selector using wget\nDESCRIPTION: This snippet demonstrates consuming messages with a selector using wget. The selector is provided as an HTTP header.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\nwget  --user admin --password admin --save-cookies cookies.txt --load-cookies cookies.txt --keep-session-cookies  --header=\"selector: test=2\" http://localhost:8161/api/message/test?type=queue\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Plugin (OpenLDAP)\nDESCRIPTION: Configures the ActiveMQ broker to use the `cachedLDAPAuthorizationMap` plugin with specific parameters for OpenLDAP.  This includes the connection URL, username, password, search bases for queues, topics, and temporary destinations, refresh interval, and legacy group mapping setting. These parameters allow the module to connect to and query the OpenLDAP server.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/cached-ldap-authorization-module.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<authorizationPlugin>\n    <map>\n        <cachedLDAPAuthorizationMap\n            connectionURL=\"ldap://localhost:389\"\n            connectionUsername=\"cn=admin,dc=activemq,dc=apache,dc=org\"\n            connectionPassword=\"sunflower\"\n            queueSearchBase=\"ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org\"\n            topicSearchBase=\"ou=Topic,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org\"\n            tempSearchBase=\"ou=Temp,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org\"\n            refreshInterval=\"300000\"\n            legacyGroupMapping=\"false\"\n        />\n    </map>\n</authorizationPlugin>\n```\n\n----------------------------------------\n\nTITLE: Configure JNDI Mapping for Queue - ActiveMQ Classic - Shell\nDESCRIPTION: Configures a JNDI mapping for a queue in Glassfish, associating a physical queue name with a JNDI name.  This allows applications to lookup the queue using the JNDI name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-glassfish.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbin/asadmin create-admin-object \\\n\t--raname activemq-rar \\\n  --restype javax.jms.Queue \\\n  --property PhysicalName=MY.MAGIC.OUT \\\n  jms/queue/MY.MAGIC.OUT\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Broker from Maven\nDESCRIPTION: This command shows how to run an ActiveMQ Classic broker from a source distribution using Maven. It specifies the configuration file using the `-Dconfig` parameter. Assumes the user is in the `assembly` module directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-configuration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmaven server -Dconfig=xbean:file:src/release/conf/activemq.xml\n```\n\n----------------------------------------\n\nTITLE: VM Protocol Configuration in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the VM protocol within ActiveMQ Classic for in-JVM communication. It uses a URI to specify the protocol and can optionally include a segment for logically separating JMS networks within the same JVM. There are no dependencies, as it's a core protocol feature.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/topologies.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvm://localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring XMPP Transport Connector in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ Classic broker to enable the XMPP transport connector. It defines a broker with transport connectors for openwire, stomp, and xmpp, specifying the URI for each protocol.  The xmpp connector is configured to listen on port 61222.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xmpp.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.org/config/1.0\">\n  <transportConnectors>\n     <transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n     <transportConnector name=\"stomp\"    uri=\"stomp://localhost:61613\"/>\n     <transportConnector name=\"xmpp\"     uri=\"xmpp://localhost:61222\"/>\n  </transportConnectors>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic BrokerFilter Extension (Java)\nDESCRIPTION: This Java snippet shows how to extend `BrokerFilter` to intercept broker operations. It overrides the `addConnection` and `addSession` methods to add custom logic before calling the parent implementation. This example allows you to perform actions whenever a connection or session is added to the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/interceptors.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activemq.broker.Broker;\nimport org.apache.activemq.broker.BrokerFilter;\nimport org.apache.activemq.broker.ConnectionContext;\nimport org.apache.activemq.command.ConnectionInfo;\n\npublic class MyBroker extends BrokerFilter {\n    \n     public MyBroker(Broker next) {\n        super(next);                \n    }\n\n    public void addConnection(ConnectionContext context, ConnectionInfo info) \n            throws Exception {       \n        \n         // Your code goes here \n\n        // Then call your parent\n        super.addConnection(context, info);\n    }   \n\n    public void addSession(ConnectionContext context, SessionInfo info) \n            throws Exception {       \n        \n         //  Your code goes here...\n\n         // Then call your parent\n         super.addSession(context, info);\n    }\t\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeStampPlugin in ActiveMQ Classic XML\nDESCRIPTION: This XML snippet demonstrates how to enable the TimeStampPlugin in an ActiveMQ Classic broker configuration.  It sets the `ttlCeiling` and `zeroExpirationOverride` attributes to 86,400,000 milliseconds (1 day), limiting the expiration time and overriding expiration times for messages without an existing expiration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/timestampplugin.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n  <!-- 86,400,000 ms = 1 day -->\n  <timeStampingBrokerPlugin ttlCeiling=\"86400000\" zeroExpirationOverride=\"86400000\"/>\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: OSGi Service Export for ActiveMQ Component\nDESCRIPTION: Registers the configured ActiveMQ component as an OSGi service. This makes the component available for other OSGi bundles to use.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<service ref=\"activemq\" interface=\"org.apache.camel.Component\"/>\n```\n\n----------------------------------------\n\nTITLE: Configure JMS Topic Bridge using Spring XML\nDESCRIPTION: This example shows how to configure a JMS Topic Bridge within an ActiveMQ Classic broker using Spring XML configuration. It defines a local broker and a JMS topic connector that bridges messages to a remote JMS provider. An inbound topic bridge is configured to subscribe to a specific topic on the remote broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-to-jms-bridge.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- local broker with embedded Jms to Jms bridge (ok - it's contrived) -->\n<bean id=\"localbroker\" class=\"org.apache.activemq.broker.BrokerService\"\n  init-method=\"start\">\n  <property name=\"brokerName\" value = \"localBroker\"/>\n    <property name=\"persistent\" value = \"false\"/>\n  <property name=\"transportConnectorURIs\">\n    <list>\n      <value>tcp://localhost:61234</value>\n    </list>\n  </property>\n  <property name=\"jmsBridgeConnectors\">\n    <list>\n      <ref bean=\"jmsConnector\"/>\n    </list>\n  </property>\n</bean>\n\n<!-- JMS ConnectionFactory to use local broker (the one with the bridge) -->\n<bean id=\"localFactory\"\n  class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n  <property name=\"brokerURL\" value=\"tcp://localhost:61234\" />\n</bean>\n\n<!--JmsTopicConnector - the Jms bridge -->\n<bean id=\"jmsConnector\"\n  class=\"org.apache.activemq.network.jms.JmsTopicConnector\">\n  <property name = \"outboundTopicConnectionFactory\" ref = \"remoteFactory\"/>\n\n  <property name = \"inboundTopicBridges\">\n    <list>\n      <ref bean=\"InboundTopicBridge\" />\n    </list>\n  </property>\n\n</bean>\n\n<bean id =\"InboundTopicBridge\" class=\"org.apache.activemq.network.jms.InboundTopicBridge\">\n  <property name = \"inboundTopicName\" value = \"org.apache.activemq.network.jms.TopicBridgeSpringTest\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Broker from Java Command Line\nDESCRIPTION: This command demonstrates how to start an ActiveMQ Classic broker directly from the command line using the `java` command.  It requires the ActiveMQ Classic classes to be in the classpath and specifies the configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-configuration.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\njava org.apache.activemq.broker.Main xbean:file:src/release/conf/activemq.xml\n```\n\n----------------------------------------\n\nTITLE: Creating ActiveMQ Queue with Consumer Options - Java\nDESCRIPTION: This code snippet demonstrates how to create an ActiveMQ Queue with consumer options specified in the queue name. It sets the `consumer.dispatchAsync` option to `false` and the `consumer.prefetchSize` option to `10`. This allows configuring the consumer's behavior directly in the destination string.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/destination-options.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nqueue = new ActiveMQQueue(\"TEST.QUEUE?consumer.dispatchAsync=false&consumer.prefetchSize=10\");\nconsumer = session.createConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Initializing NMSConnectionFactory with Stomp - C#\nDESCRIPTION: This snippet shows how to initialize the NMSConnectionFactory with a Stomp URI. It demonstrates creating a connection factory instance using the generic NMSConnectionFactory class, specifying the Stomp protocol and broker address.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/uri-configuration.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new NMSConnectionFactory(\"stomp:tcp://localhost:61613\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Topic Advisories in ActiveMQConnectionFactory via Java Code\nDESCRIPTION: This snippet demonstrates disabling topic advisories on the ActiveMQConnectionFactory using Java code. It sets the watchTopicAdvisories attribute to false to prevent automatic subscription to topic advisories.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();\nfactory.setWatchTopicAdvisories(false);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Destination Map with getDestinationMap() in Java\nDESCRIPTION: This snippet explains how to access a map of all `Destination` objects, indexed by `ActiveMQDestination`, using the `getDestinationMap()` method in ActiveMQ Classic. This provides detailed information about each destination, such as queue depths, and enables granular monitoring and management of the message broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-see-what-destinations-are-used.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nRegion.getDestinationMap()\n```\n\n----------------------------------------\n\nTITLE: Building ActiveMQ Classic from Source with Maven\nDESCRIPTION: This command builds ActiveMQ Classic from source using Maven. The `-Dmaven.test.skip=true` option is used to skip the tests if they are failing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Create a Subscription\nDESCRIPTION: Creates a subscription to a queue. A POST request to /subscriptions returns a 201 OK response with a Location header containing the URI for the created subscription. Subscription data, such as prefetch buffer size and selectors, could be form-encoded key/value pairs in the request body.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /subscriptions\n-------------------->\n\n201 OK\nLocation: subscriptionUri\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Disabling JMX Creation in ActiveMQ for JBoss Integration\nDESCRIPTION: This snippet configures ActiveMQ Classic to use the existing JMX instance provided by JBoss, instead of creating a new one.  This avoids conflicts and integrates ActiveMQ Classic monitoring with JBoss's JMX infrastructure.  It should be placed as the first child of the broker tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<managementContext><!-- we'll use an existing one (JBoss) instead of creating one -->\n  <managementContext createConnector=\"false\"/>\n</managementContext>\n```\n\n----------------------------------------\n\nTITLE: HTML Download Links (Current Release)\nDESCRIPTION: This HTML snippet provides download links for the current release of ActiveMQ Artemis Console. It includes links for the binary (tar.gz and zip), and source (tar.gz and zip) distributions along with their respective SHA512 checksums and GPG signatures. The download links are generated using variables defined elsewhere (include.release.version).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/artemis_console_release.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\ntar.gz | [apache-artemis-console-{{include.release.version}}-bin.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.asc)|\nZIP | [apache-artemis-console-{{include.release.version}}-bin.zip](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.asc)|\nSource tar.gz | [apache-artemis-console-{{include.release.version}}-source-release.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.asc)|\nSource ZIP | [apache-artemis-console-{{include.release.version}}-source-release.zip](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.asc)|\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Send at the ConnectionFactory Level in C#\nDESCRIPTION: This code snippet demonstrates how to enable asynchronous message sending at the ConnectionFactory level using the AsyncSend property of the Apache.NMS.ActiveMQ.ConnectionFactory object. Setting AsyncSend to true enables asynchronous sends for all connections created by this factory, potentially improving performance by allowing messages to be sent without waiting for acknowledgement.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/async-sends.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n((ConnectionFactory)connectionFactory).AsyncSend = true;\n```\n\n----------------------------------------\n\nTITLE: Queue Browser for Durable Topic Subscription - STOMP\nDESCRIPTION: This example demonstrates using a queue browser to implement durable topic subscriptions. The `include-seq`, `from-seq`, and `browser-end` headers enable resuming from the last known sequence number. The example demonstrates starting from the head of the queue (`from-seq:0`).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_20\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\ndestination:/queue/foo\nbrowser:true\nbrowser-end:false\ninclude-seq:seq\nfrom-seq:0\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Enabling AUTO over NIO in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet configures ActiveMQ Classic to use auto wire format detection over an NIO TCP connection.  It utilizes the `auto+nio` transport prefix and defines the URI for the NIO-based connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto+nio\" uri=\"auto+nio://localhost:5671\"/>\n```\n\n----------------------------------------\n\nTITLE: Consumer Selector Example (JMS)\nDESCRIPTION: Illustrates how a consumer uses a JMS selector to filter messages based on the JMSXGroupID header. This shows a manual approach to achieve similar functionality to message groups.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-message-groups-compare-to-selectors.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJMXGroupID = 'A'\n```\n\n----------------------------------------\n\nTITLE: Using Shiro Command Line Hasher\nDESCRIPTION: This bash command uses the Shiro Command Line Hasher to generate secure password hashes.  The -p argument specifies to prompt the user to type and confirm a password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar shiro-tools-hasher-X.X.X-cli.jar -p\n```\n\n----------------------------------------\n\nTITLE: Configuring Stomp over SSL\nDESCRIPTION: This snippet shows how to configure ActiveMQ Classic to use Stomp over an SSL connection by changing the URI scheme to `stomp+ssl`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"stomp+ssl\" uri=\"stomp+ssl://localhost:61612\"/>\n```\n\n----------------------------------------\n\nTITLE: Discarding DLQ Plugin - Drop Destinations with Regular Expressions (XML)\nDESCRIPTION: This XML configuration uses regular expressions to define the destinations to be dropped by the DiscardingDLQBrokerPlugin.  The `dropOnly` attribute contains a space-delimited list of regular expressions that match destination names. The `reportInterval` specifies the frequency of reporting dropped messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<beans> \n  <broker>\n    <plugins>\n      <discardingDLQBrokerPlugin dropOnly=\"MY.EXAMPLE.TOPIC.[0-9]{3} MY.EXAMPLE.QUEUE.[0-9]{3}\" reportInterval=\"3000\"/>\n    </plugins>\n  </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: VM Transport Advanced Broker Configuration URI\nDESCRIPTION: This snippet illustrates the advanced syntax for configuring a VM transport connection using a Broker Configuration URI. It allows for more extensive broker configuration options. The `brokerOptions` can include various settings for the embedded broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/vm-transport-reference.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nvm:(broker:(tcp://localhost)?brokerOptions)?transportOptions\n```\n\nLANGUAGE: text\nCODE:\n```\nvm:broker:(tcp://localhost)?brokerOptions\n```\n\n----------------------------------------\n\nTITLE: 32-bit libstdc++.la Content for Solaris 10\nDESCRIPTION: This snippet provides the correct content for the libstdc++.la file in /usr/sfw/lib/ on Solaris 10 when using the GNU compiler. This file is essential for linking the library correctly and resolving build failures caused by an empty libstdc++.la file. The file defines the library's name, dependencies, version information, and installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/errors-from-libstdla-on-solaris-10-using-the-gnu-compiler.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# libstdc++.la - a libtool library file\n# Generated by ltmain.sh - GNU libtool 1.4a-GCC3.0 (1.641.2.256 2001/05/28 20:09:07 with GCC-local changes)\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='libstdc++.so.6'\n\n# Names of this library.\nlibrary_names='libstdc++.so.6.0.3 libstdc++.so.6 libstdc++.so'\n\n# The name of the static archive.\nold_library='libstdc++.a'\n\n# Libraries that this one depends upon.\ndependency_libs='-lc -lm -L/usr/sfw/lib -lgcc_s'\n\n# Version information for libstdc++.\ncurrent=6\nage=0\nrevision=3\n\n# Is this an already installed library?\ninstalled=yes\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='/usr/sfw/lib'\n```\n\n----------------------------------------\n\nTITLE: Applying Wire Format Options to OpenWire (XML)\nDESCRIPTION: This XML snippet shows how to apply a wire format option specifically to the OpenWire format using the `wireFormat.default.` prefix. In this case, `maxFrameSize` is set to 1000 only for OpenWire.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto\" uri=\"auto://localhost:5671?wireFormat.default.maxFrameSize=1000\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Network Bridge Filter Factory in ActiveMQ Classic\nDESCRIPTION: This configuration snippet demonstrates how to configure a conditional network bridge filter factory in ActiveMQ Classic to replay messages when there are no consumers. This setup is particularly useful for virtual topics in a network of brokers, ensuring messages are not orphaned if a durable subscriber reconnects to a different broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-durable-subscribers-in-a-network-of-brokers.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\"TEST.>\" enableAudit=\"false\">\n        <conditionalNetworkBridgeFilterFactory replayWhenNoConsumers=\"true\"/>\n      </policyEntry>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Downloading ActiveMQ Classic Binary using wget\nDESCRIPTION: This command downloads the ActiveMQ Classic binary distribution using the `wget` utility.  Replace `http://activemq.apache.org/path/tofile/apache-activemq-x.x.x-bin.tar.gz` with the correct download URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwget http://activemq.apache.org/path/tofile/apache-activemq-x.x.x-bin.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Handling SSL Certificate Unknown Exception in Java\nDESCRIPTION: This code snippet shows a stack trace of a javax.jms.JMSException caused by a javax.net.ssl.SSLHandshakeException with the message 'Received fatal alert: certificate_unknown'. This error indicates that the client's JVM does not trust the SSL certificate presented by the ActiveMQ Classic broker. To resolve, the broker's certificate must be exported, imported into the client's truststore, and the location of the truststore should be specified using the 'javax.net.ssl.trustStore' system property during client VM startup.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/certificateunknown.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njavax.jms.JMSException: start failed: Received fatal alert: certificate_unknown\n       at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:200)\n       at org.activemq.broker.impl.BrokerConnectorImpl.addClient(BrokerConnectorImpl.java:308)\n       at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupp\n       at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:1\n       at java.lang.Thread.run(Unknown Source)\nCaused by: javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown\n       at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Unknown Source)\n       at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Unknown Source)\n       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(Unknown Source)\n       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(Unknown Source)\n       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source)\n       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(Unknown Source)\n       at com.sun.net.ssl.internal.ssl.AppInputStream.read(Unknown Source)\n       at java.io.BufferedInputStream.fill(Unknown Source)\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Network Broker 2 Configuration (XML)\nDESCRIPTION: This XML configuration defines the second broker ('SecondBroker') in the network. It mirrors the structure of the first broker's configuration, including JMX, shutdown hook, and WebLogic security integration. It configures a network connector back to the first broker for message routing and uses an embedded Derby database for persistence.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://activemq.org/config/1.0\">\n  <!-- Allows us to use system properties as variables in this configuration file -->\n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n  \n  <broker useJmx=\"true\" brokerName=\"SecondBroker\" useShutdownHook=\"false\"\n          plugins=\"#WebLogicSecurity\">\n\n    <!-- Register all ActiveMQ Classic MBeans with the WebLogic runtime MBeanServer -->\n    <managementContext>\n      <managementContext>\n          <MBeanServer>\n             <bean class=\"org.springframework.jndi.JndiObjectFactoryBean\" xmlns=\"\">\n                <property name=\"jndiName\" value=\"java:comp/env/jmx/runtime\" />\n                <property name=\"lookupOnStartup\" value=\"true\" />\n                <property name=\"expectedType\" value=\"javax.management.MBeanServer\" />\n             </bean>\n          </MBeanServer>\n      </managementContext>\n    </managementContext>\n  \n    <persistenceAdapter>\n      <!-- By default, use an embedded Derby database -->\n        <journaledJDBC journalLogFiles=\"5\"\n                       dataDirectory=\"/server/bea/weblogic920/domains/jms/activemq-b2-data\"/>\n      <!-- Use this with the WebLogicDataSource below to use a WebLogic\n           database connection pool instead of the embedded Derby database\n        <journaledJDBC journalLogFiles=\"5\"\n                       dataDirectory=\"/server/bea/weblogic920/domains/jms/activemq-b2-data\"\n                       dataSource=\"#WebLogicDataSource\" />\n\n      -->\n    </persistenceAdapter>\n  \n    <transportConnectors>\n        <transportConnector name=\"SecondBrokerTCP\" uri=\"tcp://0.0.0.0:60011\" />\n    </transportConnectors>\n    \n    <networkConnectors>\n        <networkConnector name=\"Broker2ToBroker1\"\n                          uri=\"static://(tcp://localhost:60010)\" failover=\"true\"\n                          userName=\"fixme\" password=\"fixme\" />\n    </networkConnectors>\n  </broker>\n\n  <bean id=\"WebLogicSecurity\"\n        class=\"com.example.activemq.weblogic.ActiveMQToWebLogicSecurity\">\n      <property name=\"authorizedGroup\" value=\"activemq\" />\n  </bean>\n\n<!-- Uncomment and configure this if you want to use a WebLogic database\n     connection pool for persistent messages\n  <bean id=\"WebLogicDataSource\"\n        class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n     <property name=\"jndiName\" value=\"db/pool/jndi/name\"/>\n  </bean>\n-->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Verifying ActiveMQ Classic RAR Content - Shell\nDESCRIPTION: This series of commands verifies the contents of the ActiveMQ Classic RAR (Resource Adapter Archive) file.  It navigates to the ActiveMQ Classic directory and then uses the `jar tvf` command to list the table of contents of the activemq-ra-4.0.2.rar file. This ensures that the RAR file contains the expected components.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd ./incubator-activemq-4.0.2.tar.gz\n$ jar tvf /opt/incubator-activemq-4.0.2/lib/optional/activemq-ra-4.0.2.rar\n     0 Mon Sep 25 19:00:50 MDT 2006 META-INF/\n   399 Mon Sep 25 19:00:48 MDT 2006 META-INF/MANIFEST.MF\n   523 Mon Sep 25 13:07:40 MDT 2006 META-INF/DISCLAIMER.txt\n 11359 Mon Sep 25 13:07:40 MDT 2006 META-INF/LICENSE.txt\n 20305 Mon Sep 25 13:07:40 MDT 2006 META-INF/ra.xml\n  2334 Mon Sep 25 13:07:40 MDT 2006 broker-config.xml\n 70023 Mon Sep 25 19:00:48 MDT 2006 activemq-ra-4.0.2.jar\n1351744 Mon Sep 25 19:00:14 MDT 2006 activemq-core-4.0.2.jar\n232107 Mon Sep 25 18:22:48 MDT 2006 activeio-core-3.0-beta4.jar\n2143211 Tue Aug 01 11:44:50 MDT 2006 derby-10.1.1.0.jar\n1901653 Tue Aug 01 11:47:08 MDT 2006 spring-1.2.6.jar\n 94713 Tue Aug 01 11:47:22 MDT 2006 xbean-spring-2.2.jar\n 52915 Tue Aug 01 12:22:16 MDT 2006 commons-logging-1.1.jar\n 16030 Tue Aug 01 12:22:32 MDT 2006 geronimo-j2ee-management_1.0_spec-1.0.jar\n329586 Tue Aug 01 12:22:54 MDT 2006 backport-util-concurrent-2.1.jar\n358085 Tue Aug 01 12:23:26 MDT 2006 log4j-1.2.12.jar\n   523 Mon Sep 25 19:00:50 MDT 2006 META-INF/DISCLAIMER.txt\n 11359 Mon Sep 25 19:00:50 MDT 2006 META-INF/LICENSE.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Priority with Destination Options in C#\nDESCRIPTION: This snippet demonstrates how to set the consumer priority for an ActiveMQ queue using destination options in C#. The priority is set as part of the queue name, which is then used to create a consumer. A higher priority value means the consumer will receive messages before consumers with lower priorities.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/consumer-priority.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar queue = session.GetQueue(\"TEST.QUEUE?consumer.priority=10\");\nvar consumer = session.CreateConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Stopping ActiveMQ Classic (Unix)\nDESCRIPTION: These commands stops the ActiveMQ Classic broker in a Unix environment if it's running in the background. The `cd` command navigates to the `bin` directory. `./activemq stop` then sends a stop command to the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]/bin\n./activemq stop\n```\n\n----------------------------------------\n\nTITLE: Configuring MDB Container in jboss.xml\nDESCRIPTION: This snippet configures a new MDB container in `jboss.xml`, using the previously defined `invoker-proxy-binding`. This container will host the MDB instances responsible for processing messages from ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/inbound-communication.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<container-configuration>\n   <container-name>ActiveMQ Classic Message Driven Bean</container-name>\n   <call-logging>false</call-logging>\n   <invoker-proxy-binding-name>activemq-message-driven-bean</invoker-proxy-binding-name>\n   ...\n</container-configuration>\n```\n\n----------------------------------------\n\nTITLE: Encrypted Passwords in properties file\nDESCRIPTION: This snippet shows how encrypted passwords should be stored in the `credentials-enc.properties` file.  Note the use of `ENC()` to wrap encrypted passwords, allowing a mix of plain and encrypted values. The passwords are encrypted using the previously described commands, then placed into the properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nactivemq.username=system\nactivemq.password=ENC(mYRkg+4Q4hua1kvpCCI2hg==)\nguest.password=ENC(Cf3Jf3tM+UrSOoaKU50od5CuBa8rxjoL)\n...\njdbc.password=ENC(eeWjNyX6FY8Fjp3E+F6qTytV11bZItDp)\n```\n\n----------------------------------------\n\nTITLE: Configure Kaha Persistence Adapter (ActiveMQ 5.0+)\nDESCRIPTION: Configures the Kaha persistence adapter within the ActiveMQ broker XML configuration for ActiveMQ Classic versions 5.0 and above. This snippet defines the directory for storing data and sets the maximum data file length.  It is required for enabling persistent messaging.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kaha-persistence.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<broker brokerName=\"broker\" persistent=\"true\" useShutdownHook=\"false\">\n  <transportConnectors>\n    <transportConnector uri=\"tcp://localhost:61616\"/>\n  </transportConnectors>\n  <persistenceAdapter>\n    <kahaPersistenceAdapter directory=\"activemq-data\" maxDataFileLength=\"33554432\"/>\n  </persistenceAdapter>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Classic Broker with Broker Properties URI\nDESCRIPTION: This command starts an ActiveMQ Classic broker using a Broker Properties URI to load configuration from a properties file.  This approach avoids dependencies on Spring, xbean-spring, and XML.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console properties:foo.properties\n```\n\n----------------------------------------\n\nTITLE: Configure Destination Policies using Spring XML\nDESCRIPTION: This Spring XML configuration snippet demonstrates how to define destination policies in ActiveMQ. It configures different dispatch and subscription recovery policies for topics matching the 'FOO.>' and 'ORDERS.>' wildcard patterns. It utilizes Spring beans and ActiveMQ's core schema for configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/per-destination-policies.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:amq=\"http://activemq.apache.org/schema/core\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n                           http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n \n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n \n  <broker persistent=\"false\" \n          brokerName=\"${brokername}\" \n          xmlns=\"http://activemq.apache.org/schema/core\">\n    \n    <destinationPolicy>\n      <policyMap>\n        <policyEntries>\n          <policyEntry topic=\"FOO.>\">\n            <dispatchPolicy>\n              <roundRobinDispatchPolicy/>\n            </dispatchPolicy>\n            <subscriptionRecoveryPolicy>\n              <lastImageSubscriptionRecoveryPolicy/>\n            </subscriptionRecoveryPolicy>\n          </policyEntry>\n           \n          <policyEntry topic=\"ORDERS.>\">\n            <dispatchPolicy>\n              <strictOrderDispatchPolicy/>\n            </dispatchPolicy>\n \n            <!-- Recover 1 minute's worth -->\n```\n\n----------------------------------------\n\nTITLE: Create Connector Resource - ActiveMQ Classic - Shell\nDESCRIPTION: Creates a connector resource in Glassfish, providing a JNDI mapping for the connection pool. This allows applications to lookup the connection factory using the specified JNDI name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-glassfish.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbin/asadmin create-connector-resource \\\n  --poolname jms/myConnectionPool \\\n  jms/myConnectionFactory\n```\n\n----------------------------------------\n\nTITLE: Applying Wire Format Options to All Formats (XML)\nDESCRIPTION: This XML snippet illustrates how to apply a wire format option to all available wire formats (OpenWire, STOMP, AMQP, MQTT) using the `wireFormat.` prefix. In this example, `maxFrameSize` is set to 1000 for all formats.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto\" uri=\"auto://localhost:5671?wireFormat.maxFrameSize=1000\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Async Send in ActiveMQConnectionFactory (ClassLoaderSPI)\nDESCRIPTION: This code snippet demonstrates how to set the `useAsyncSend` property to `true` in `ActiveMQConnectionFactory` using `ActiveMQClassLoaderSPI`.  It is equivalent to calling `factory.setUseAsyncSend(true)`. This configuration enables asynchronous sending of messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-performance-module-users-manual.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nfactory.useAsyncSend=true\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connector with CORS Origin in ActiveMQ\nDESCRIPTION: This snippet configures a WebSocket connector in ActiveMQ to allow cross-origin resource sharing (CORS) from any domain. The `cors_origin` parameter is set to `*` in the `bind` URI, allowing access from any domain. Without this setting, WebSocket connections are restricted to the same origin as the web page.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"ws\" bind=\"ws://0.0.0.0:61623?cors_origin=*\"/>\n```\n\n----------------------------------------\n\nTITLE: Working with String data in BlazeMessage using Java\nDESCRIPTION: This snippet shows how to create a BlazeMessage with a string and retrieve it.  It illustrates using the constructor to create a BlazeMessage from a string and using setText/getText methods. It requires the 'org.apache.activeblaze' package.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/the-activeblaze-message-type.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activeblaze.*;\n...\n\nBlazeMessage msg = new BlazeMessage(\"test string\");\nString text = msg.getText();\n\nBlazeMessage msg = new BlazeMessage();\nmsg.setText(\"test string\");\nString text = msg.getText();\n```\n\n----------------------------------------\n\nTITLE: broker-config.xml: Core Configuration Elements\nDESCRIPTION: This XML snippet highlights the important elements in the broker-config.xml file, namely the `<persistenceAdapter>`, `<transportConnectors>`, and `<networkConnectors>` elements. These elements configure the persistence mechanism, transport protocols, and network connections for the ActiveMQ Classic broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker useJmx=\"true\">\n  ...\n    <persistenceAdapter>\n      <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"activemq-data\"/>\n      <!-- To use a different datasource, use th following syntax : -->\n      <!--\n      <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"../data\" dataSource=\"#postgres-ds\"/>\n       -->\n    </persistenceAdapter>\n\n    <transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Quick Build with Maven 3\nDESCRIPTION: This snippet demonstrates how to perform a quick build of ActiveMQ Classic using Maven 3.  It skips tests to speed up the process and configures the build to not fail if no tests are found. This is useful for quickly verifying the build process without running extensive tests.  Ensure Maven is installed and configured correctly before running this command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/building.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dtest=false -DfailIfNoTests=false clean install\n```\n\n----------------------------------------\n\nTITLE: Configuring Heart-Beat Grace Period\nDESCRIPTION: This snippet shows how to configure the `transport.hbGracePeriodMultiplier` transport option to define the grace period for read heart-beats in ActiveMQ Classic 5.9.0 and later.  The grace period multiplier allows for tolerance of late arriving heartbeats from the client. The multiplier is applied to the read-timeout interval specified by the client.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n   <transportConnector name=\"stomp\" uri=\"stomp://localhost:61613?transport.hbGracePeriodMultiplier=1.5\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Jasypt Configuration with Password in XML (XML)\nDESCRIPTION: This XML snippet provides an alternative Jasypt configuration where the encryption password is hardcoded in the XML file. This is less secure than using an environment variable. This defines a `configurationEncryptor` bean which uses the password attribute.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"configurationEncryptor\" class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\">\n  <property name=\"algorithm\" value=\"PBEWithMD5AndDES\"/>\n  <property name=\"password\" value=\"activemq\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Display Topic Statistics ActiveMQ Admin\nDESCRIPTION: This command displays statistics for all topics on the broker. The activemq-admin tool is invoked with the 'dstat' task, specifying 'topics' as the destination type.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin dstat topics\n```\n\n----------------------------------------\n\nTITLE: Setting Producer Window Size in ActiveMQ Classic (Java)\nDESCRIPTION: This code snippet demonstrates how to set the `ProducerWindowSize` on an ActiveMQ Classic connection factory.  This controls the amount of data a producer can send before waiting for an acknowledgement from the broker. This configuration is particularly relevant for asynchronous sends, enabling per-producer flow control. Requires ActiveMQ client library as a dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/producer-flow-control.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory connctionFactory = connctionFactory.setProducerWindowSize(1024000);\n```\n\n----------------------------------------\n\nTITLE: LevelDB Store Configuration in virtual_host (XML)\nDESCRIPTION: This XML snippet configures the LevelDB message store within a virtual host.  It specifies the directory where the store will hold its data files using the `directory` attribute. The `${apollo.base}/data` is a placeholder for the base directory of the Apollo installation. Other optional attributes such as `flush_delay`, `read_threads`, and `sync` can be configured as well.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<virtual_host id=\"default\">\n  ...\n  <leveldb_store directory=\"${apollo.base}/data\"/>\n  ..\n</virtual_host>\n```\n\n----------------------------------------\n\nTITLE: Unset Environment Variable (Bash)\nDESCRIPTION: This command unsets the `ACTIVEMQ_ENCRYPTION_PASSWORD` environment variable after the broker has started. This is done to prevent the encryption password from being stored on the system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ unset ACTIVEMQ_ENCRYPTION_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic 3.x .bindings Configuration (properties)\nDESCRIPTION: This configuration defines the JNDI bindings for ActiveMQ Classic 3.x. Similar to the 4.x configuration, it sets up queues and a QueueConnectionFactory, but includes additional properties like useEmbeddedBroker and useAsyncSend. Note the difference in the Queue class being used, `org.activemq.message.ActiveMQQueue` as opposed to `org.apache.activemq.command.ActiveMQQueue`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sun-jndi.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nArchive/ClassName=org.activemq.message.ActiveMQQueue\nArchive/FactoryName=org.activemq.jndi.JNDIReferenceFactory\nArchive/RefAddr/0/Type=physicalName\nArchive/RefAddr/0/Content=Archive\nArchive/RefAddr/0/Encoding=String\n\nGateIn/ClassName=org.activemq.message.ActiveMQQueue\nGateIn/FactoryName=org.activemq.jndi.JNDIReferenceFactory\nGateIn/RefAddr/0/Type=physicalName\nGateIn/RefAddr/0/Content=GateIn\nGateIn/RefAddr/0/Encoding=String\n\nProviderIn/ClassName=org.activemq.message.ActiveMQQueue\nProviderIn/FactoryName=org.activemq.jndi.JNDIReferenceFactory\nProviderIn/RefAddr/0/Type=physicalName\nProviderIn/RefAddr/0/Content=ProviderIn\nProviderIn/RefAddr/0/Encoding=String\n\nProviderOut/ClassName=org.activemq.message.ActiveMQQueue\nProviderOut/FactoryName=org.activemq.jndi.JNDIReferenceFactory\nProviderOut/RefAddr/0/Type=physicalName\nProviderOut/RefAddr/0/Content=ProviderOut\nProviderOut/RefAddr/0/Encoding=String\n\nQueueConnectionFactory/ClassName=org.apache.activemq.ActiveMQConnectionFactory\nQueueConnectionFactory/FactoryName=org.activemq.jndi.JNDIReferenceFactory\nQueueConnectionFactory/RefAddr/0/Type=brokerURL\nQueueConnectionFactory/RefAddr/0/Content=vm\\://localhost\nQueueConnectionFactory/RefAddr/0/Encoding=String\nQueueConnectionFactory/RefAddr/1/Type=brokerName\nQueueConnectionFactory/RefAddr/1/Content=ID\\:zdv-1189-1098562819250-0\\:0\nQueueConnectionFactory/RefAddr/1/Encoding=String\nQueueConnectionFactory/RefAddr/2/Type=password\nQueueConnectionFactory/RefAddr/2/Content=defaultPassword\nQueueConnectionFactory/RefAddr/2/Encoding=String\nQueueConnectionFactory/RefAddr/3/Type=useEmbeddedBroker\nQueueConnectionFactory/RefAddr/3/Content=true\nQueueConnectionFactory/RefAddr/3/Encoding=String\nQueueConnectionFactory/RefAddr/4/Type=userName\nQueueConnectionFactory/RefAddr/4/Content=defaultUser\nQueueConnectionFactory/RefAddr/4/Encoding=String\nQueueConnectionFactory/RefAddr/5/Type=useAsyncSend\nQueueConnectionFactory/RefAddr/5/Content=true\nQueueConnectionFactory/RefAddr/5/Encoding=String\n```\n\n----------------------------------------\n\nTITLE: Enumerate Destinations with Advisory Messages using NMS C#\nDESCRIPTION: This C# code demonstrates how to use advisory messages to enumerate queues, topics, and all destinations on an ActiveMQ broker. It creates a connection, session, and consumers to receive advisory messages, then extracts the destination information and prints it to the console.  It relies on the Apache NMS and Apache.NMS.ActiveMQ libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/examples/activemq-enumerate-destination-using-advisory-messages.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nusing System;\nusing Apache.NMS;\nusing Apache.NMS.Util;\nusing Apache.NMS.ActiveMQ;\nusing Apache.NMS.ActiveMQ.Commands;\n\nnamespace AdvisoryExample\n{\n    class AdvisoryExample\n    {\n        private IConnection connection;\n        private ISession session;\n\n        public const String QUEUE_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.Queue\";\n        public const String TOPIC_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.Topic\";\n        public const String TEMPQUEUE_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.TempQueue\";\n        public const String TEMPTOPIC_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.TempTopic\";\n\n        public const String ALLDEST_ADVISORY_DESTINATION = QUEUE_ADVISORY_DESTINATION + \",\" +\n                                                           TOPIC_ADVISORY_DESTINATION + \",\" +\n                                                           TEMPQUEUE_ADVISORY_DESTINATION + \",\" +\n                                                           TEMPTOPIC_ADVISORY_DESTINATION;\n\n        AdvisoryExample()\n        {\n            IConnectionFactory factory = new ConnectionFactory();\n\n            connection = factory.CreateConnection();\n            connection.Start();\n            session = connection.CreateSession();\n        }\n\n        void EnumerateQueues()\n        {\n            Console.WriteLine(\"Listing all Queues on Broker:\");\n\n            IDestination dest = session.GetTopic(QUEUE_ADVISORY_DESTINATION);\n\n            using(IMessageConsumer consumer = session.CreateConsumer(dest))\n            {\n                IMessage advisory;\n\n                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)\n                {\n                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;\n\n                    if(amqMsg.DataStructure != null)\n                    {\n                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;\n                        if(info != null)\n                        {\n                            Console.WriteLine(\"   Queue: \" + info.Destination.ToString() );\n                        }\n                    }\n                }\n            }\n            Console.WriteLine(\"Listing Complete.\");\n        }\n\n        void EnumerateTopics()\n        {\n            Console.WriteLine(\"Listing all Topics on Broker:\");\n\n            IDestination dest = session.GetTopic(TOPIC_ADVISORY_DESTINATION);\n\n            using(IMessageConsumer consumer = session.CreateConsumer(dest))\n            {\n                IMessage advisory;\n\n                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)\n                {\n                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;\n\n                    if(amqMsg.DataStructure != null)\n                    {\n                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;\n                        if(info != null)\n                        {\n                            Console.WriteLine(\"   Topic: \" + info.Destination.ToString() );\n                        }\n                    }\n                }\n            }\n            Console.WriteLine(\"Listing Complete.\");\n        }\n\n        void EnumerateDestinations()\n        {\n            Console.WriteLine(\"Listing all Destinations on Broker:\");\n\n            IDestination dest = session.GetTopic(ALLDEST_ADVISORY_DESTINATION);\n\n            using(IMessageConsumer consumer = session.CreateConsumer(dest))\n            {\n                IMessage advisory;\n\n                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)\n                {\n                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;\n\n                    if(amqMsg.DataStructure != null)\n                    {\n                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;\n                        if(info != null)\n                        {\n                            string destType = info.Destination.IsTopic ? \"Topic\" : \"Qeue\";\n                            destType = info.Destination.IsTemporary ? \"Temporary\" + destType : destType;\n                            Console.WriteLine(\"   \" + destType + \": \" + info.Destination.ToString() );\n                        }\n                    }\n                }\n            }\n            Console.WriteLine(\"Listing Complete.\");\n        }\n\n        void ShutDown()\n        {\n            session.Close();\n            connection.Close();\n        }\n\n        public static void Main (string[] args)\n        {\n            AdvisoryExample ex = new AdvisoryExample();\n\n            ex.EnumerateQueues();\n            ex.EnumerateTopics();\n            ex.EnumerateDestinations();\n            ex.ShutDown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Function - ActiveMQ Producer C++\nDESCRIPTION: This is the main function where the ActiveMQ producer is initialized and run. It sets the broker URI, number of messages to send, destination URI, and whether to use topics or queues. It then creates a `SimpleProducer` instance, runs it, and closes it to clean up resources before exiting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc AMQCPP_UNUSED, char* argv[] AMQCPP_UNUSED) {\n\n    activemq::library::ActiveMQCPP::initializeLibrary();\n\n    std::cout << \"=====================================================\\n\";\n    std::cout << \"Starting the example:\" << std::endl;\n    std::cout << \"-----------------------------------------------------\\n\";\n\n    // Set the URI to point to the IPAddress of your broker.\n    // add any optional params to the url to enable things like\n    // tightMarshalling or tcp logging etc.  See the CMS web site for\n    // a full list of configuration options.\n    //\n    //  http://activemq.apache.org/cms/\n    //\n    std::string brokerURI =\n        \"failover://(tcp://127.0.0.1:61616)\";\n\n    //============================================================\n    // Total number of messages for this producer to send.\n    //============================================================\n    unsigned int numMessages = 2000;\n\n    //============================================================\n    // This is the Destination Name and URI options.  Use this to\n    // customize where the Producer produces, to have the producer\n    // use a topic or queue set the 'useTopics' flag.\n    //============================================================\n    std::string destURI = \"TEST.FOO\";\n\n    //============================================================\n    // set to true to use topics instead of queues\n    // Note in the code above that this causes createTopic or\n    // createQueue to be used in the producer.\n    //============================================================\n    bool useTopics = false;\n\n    // Create the producer and run it.\n    SimpleProducer producer( brokerURI, numMessages, destURI, useTopics );\n\n    // Publish the given number of Messages\n    producer.run();\n\n    // Before exiting we ensure that all CMS resources are closed.\n    producer.close();\n\n    std::cout << \"-----------------------------------------------------\\n\";\n    std::cout << \"Finished with the example.\" << std::endl;\n    std::cout << \"=====================================================\\n\";\n\n    activemq::library::ActiveMQCPP::shutdownLibrary();\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerate Destinations with Advisory Messages in ActiveMQ\nDESCRIPTION: This C# code demonstrates how to enumerate queues, topics, and all destinations available on an ActiveMQ broker by consuming advisory messages. It establishes a connection to the broker, creates a session, and subscribes to advisory topics for each destination type, printing the found destinations to the console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/examples/ActiveMQ Advisory Message Examples/activemq-enumerate-destination-using-advisory-messages.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nusing System;\nusing Apache.NMS;\nusing Apache.NMS.Util;\nusing Apache.NMS.ActiveMQ;\nusing Apache.NMS.ActiveMQ.Commands;\n\nnamespace AdvisoryExample\n{\n    class AdvisoryExample\n    {\n        private IConnection connection;\n        private ISession session;\n\n        public const String QUEUE_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.Queue\";\n        public const String TOPIC_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.Topic\";\n        public const String TEMPQUEUE_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.TempQueue\";\n        public const String TEMPTOPIC_ADVISORY_DESTINATION = \"ActiveMQ.Advisory.TempTopic\";\n\n        public const String ALLDEST_ADVISORY_DESTINATION = QUEUE_ADVISORY_DESTINATION + \",\" +\n                                                           TOPIC_ADVISORY_DESTINATION + \",\" +\n                                                           TEMPQUEUE_ADVISORY_DESTINATION + \",\" +\n                                                           TEMPTOPIC_ADVISORY_DESTINATION;\n\n        AdvisoryExample()\n        {\n            IConnectionFactory factory = new ConnectionFactory();\n\n            connection = factory.CreateConnection();\n            connection.Start();\n            session = connection.CreateSession();\n        }\n\n        void EnumerateQueues()\n        {\n            Console.WriteLine(\"Listing all Queues on Broker:\");\n\n            IDestination dest = session.GetTopic(QUEUE_ADVISORY_DESTINATION);\n\n            using(IMessageConsumer consumer = session.CreateConsumer(dest))\n            {\n                IMessage advisory;\n\n                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)\n                {\n                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;\n\n                    if(amqMsg.DataStructure != null)\n                    {\n                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;\n                        if(info != null)\n                        {\n                            Console.WriteLine(\"   Queue: \" + info.Destination.ToString() );\n                        }\n                    }\n                }\n            }\n            Console.WriteLine(\"Listing Complete.\");\n        }\n\n        void EnumerateTopics()\n        {\n            Console.WriteLine(\"Listing all Topics on Broker:\");\n\n            IDestination dest = session.GetTopic(TOPIC_ADVISORY_DESTINATION);\n\n            using(IMessageConsumer consumer = session.CreateConsumer(dest))\n            {\n                IMessage advisory;\n\n                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)\n                {\n                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;\n\n                    if(amqMsg.DataStructure != null)\n                    {\n                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;\n                        if(info != null)\n                        {\n                            Console.WriteLine(\"   Topic: \" + info.Destination.ToString() );\n                        }\n                    }\n                }\n            }\n            Console.WriteLine(\"Listing Complete.\");\n        }\n\n        void EnumerateDestinations()\n        {\n            Console.WriteLine(\"Listing all Destinations on Broker:\");\n\n            IDestination dest = session.GetTopic(ALLDEST_ADVISORY_DESTINATION);\n\n            using(IMessageConsumer consumer = session.CreateConsumer(dest))\n            {\n                IMessage advisory;\n\n                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)\n                {\n                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;\n\n                    if(amqMsg.DataStructure != null)\n                    {\n                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;\n                        if(info != null)\n                        {\n                            string destType = info.Destination.IsTopic ? \"Topic\" : \"Qeue\";\n                            destType = info.Destination.IsTemporary ? \"Temporary\" + destType : destType;\n                            Console.WriteLine(\"   \" + destType + \": \" + info.Destination.ToString() );\n                        }\n                    }\n                }\n            }\n            Console.WriteLine(\"Listing Complete.\");\n        }\n\n        void ShutDown()\n        {\n            session.Close();\n            connection.Close();\n        }\n\n        public static void Main (string[] args)\n        {\n            AdvisoryExample ex = new AdvisoryExample();\n\n            ex.EnumerateQueues();\n            ex.EnumerateTopics();\n            ex.EnumerateDestinations();\n            ex.ShutDown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins as Spring Beans (XML)\nDESCRIPTION: This snippet shows how to configure plugins as regular Spring beans and reference them in the broker's `plugins` attribute in ActiveMQ Classic.  The `plugins` attribute within the `<broker>` tag references a bean defined with an `id` of `loggingPlugin`.  This allows for configuring plugins without requiring custom XML definitions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/developing-plugins.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker useJmx=\"true\" xmlns=\"http://activemq.apache.org/schema/core\" plugins=\"#loggingPlugin\">\n ...\n</broker>\n\n<bean id=\"loggingPlugin\" \n      class=\"org.apache.activemq.broker.util.LoggingBrokerPlugin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveIO Server Transport in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to configure ActiveMQ Classic to use the ActiveIO server transport. It replaces the tcpServerTransport with serverTransport and specifies the AIO URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-configure-activemq-classic-to-use-aio-server-transport.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<connector>\n <serverTransport uri=\"activeio:aio://<ip address>:<port>\" />\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ as Background Process with Custom Config (5.8 or older)\nDESCRIPTION: This command starts ActiveMQ Classic as a background process using a custom configuration file, `conf/activemq-demo.xml`. The `xbean:` prefix specifies that the configuration file is an XBean XML configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq start xbean:conf/activemq-demo.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Inactive Durable Subscriber Removal in ActiveMQ\nDESCRIPTION: This snippet shows how to configure ActiveMQ to automatically remove inactive durable subscribers.  `offlineDurableSubscriberTimeout` specifies the inactivity period in milliseconds, and `offlineDurableSubscriberTaskSchedule` defines how often the broker checks for inactive subscribers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/manage-durable-subscribers.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker name=\"localhost\" offlineDurableSubscriberTimeout=\"86400000\" offlineDurableSubscriberTaskSchedule=\"3600000\">\n```\n\n----------------------------------------\n\nTITLE: SimpleAsyncConsumer Class Definition C++\nDESCRIPTION: This class encapsulates the logic for asynchronously consuming messages from an ActiveMQ broker. It inherits from ExceptionListener, MessageListener, and DefaultTransportListener to handle exceptions, messages, and transport events. The constructor takes the broker URI, destination URI, a flag indicating whether to use topics, and a flag indicating whether to use client acknowledgement.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nclass SimpleAsyncConsumer : public ExceptionListener,\n                            public MessageListener,\n                            public DefaultTransportListener {\nprivate:\n\n    Connection* connection;\n    Session* session;\n    Destination* destination;\n    MessageConsumer* consumer;\n    bool useTopic;\n    std::string brokerURI;\n    std::string destURI;\n    bool clientAck;\n\nprivate:\n\n    SimpleAsyncConsumer( const SimpleAsyncConsumer& );\n    SimpleAsyncConsumer& operator= ( const SimpleAsyncConsumer& );\n\npublic:\n\n    SimpleAsyncConsumer( const std::string& brokerURI,\n                         const std::string& destURI,\n                         bool useTopic = false,\n                         bool clientAck = false ) :\n        connection(NULL),\n        session(NULL),\n        destination(NULL),\n        consumer(NULL),\n        useTopic(useTopic),\n        brokerURI(brokerURI),\n        destURI(destURI),\n        clientAck(clientAck) {\n    }\n\n    virtual ~SimpleAsyncConsumer() {\n        this->cleanup();\n    }\n\n    void close() {\n        this->cleanup();\n    }\n\n    void runConsumer() {\n\n        try {\n\n            // Create a ConnectionFactory\n            ActiveMQConnectionFactory* connectionFactory =\n                new ActiveMQConnectionFactory( brokerURI );\n\n            // Create a Connection\n            connection = connectionFactory->createConnection();\n            delete connectionFactory;\n\n            ActiveMQConnection* amqConnection = dynamic_cast<ActiveMQConnection*>( connection );\n            if( amqConnection != NULL ) {\n                amqConnection->addTransportListener( this );\n            }\n\n            connection->start();\n\n            connection->setExceptionListener(this);\n\n            // Create a Session\n            if( clientAck ) {\n                session = connection->createSession( Session::CLIENT_ACKNOWLEDGE );\n            } else {\n                session = connection->createSession( Session::AUTO_ACKNOWLEDGE );\n            }\n\n            // Create the destination (Topic or Queue)\n            if( useTopic ) {\n                destination = session->createTopic( destURI );\n            } else {\n                destination = session->createQueue( destURI );\n            }\n\n            // Create a MessageConsumer from the Session to the Topic or Queue\n            consumer = session->createConsumer( destination );\n            consumer->setMessageListener( this );\n\n        } catch (CMSException& e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Called from the consumer since this class is a registered MessageListener.\n    virtual void onMessage( const Message* message ) {\n\n        static int count = 0;\n\n        try\n        {\n            count++;\n            const TextMessage* textMessage =\n                dynamic_cast< const TextMessage* >( message );\n            string text = \"\";\n\n            if( textMessage != NULL ) {\n                text = textMessage->getText();\n            } else {\n                text = \"NOT A TEXTMESSAGE!\";\n            }\n\n            if( clientAck ) {\n                message->acknowledge();\n            }\n\n            printf( \"Message #%d Received: %s\\n\", count, text.c_str() );\n        } catch (CMSException& e) {\n            e.printStackTrace();\n        }\n    }\n\n    // If something bad happens you see it here as this class is also been\n    // registered as an ExceptionListener with the connection.\n    virtual void onException( const CMSException& ex AMQCPP_UNUSED ) {\n        printf(\"CMS Exception occurred.  Shutting down client.\\n\");\n        exit(1);\n    }\n\n    virtual void transportInterrupted() {\n        std::cout << \"The Connection's Transport has been Interrupted.\" << std::endl;\n    }\n\n    virtual void transportResumed() {\n        std::cout << \"The Connection's Transport has been Restored.\" << std::endl;\n    }\n\nprivate:\n\n    void cleanup(){\n\n        try {\n            if( connection != NULL ) {\n                connection->close();\n            }\n        } catch ( CMSException& e ) { \n            e.printStackTrace(); \n        }\n\n        delete destination;\n        delete consumer;\n        delete session;\n        delete connection;\n    }\n};\n\n```\n\n----------------------------------------\n\nTITLE: PerformanceTestSuite JUnit Test (Controller Factory)\nDESCRIPTION: This JUnit test suite defines two test methods, 'testSmallMessages' and 'testLargeMessages', which simulate sending and receiving messages through ActiveMQ. Each test method starts a broker, a consumer, and a producer using a 'buildQueue' object, configures them with specific parameters (e.g., message count, message size), and waits for them to complete.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/example-testing-scenario.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class PerformanceTestSuite {\n   public void testSmallMessages() {\n   \t  buildQueue.start(\"broker\", \"\");\n   \t  buildQueue.start(\"consumer\", \"--messageCount=1000\");\n   \t  buildQueue.start(\"producer\", \"--messageCount=1000\");\n   \t  buildQueue.join(5 * MINUTES);\n   }\n\n   public void testLargeMessages() {\n   \t  buildQueue.start(\"broker\", \"\");\n   \t  buildQueue.start(\"consumer\", \"--messageCount=1000 --messageSize=1M\");\n   \t  buildQueue.start(\"producer\", \"--messageCount=1000 --messageSize=1M\");\n   \t  buildQueue.join(10 * MINUTES);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Dependency to Maven POM\nDESCRIPTION: This snippet shows how to add the ActiveMQ 5.14.1 dependency to a Maven project using the pom.xml file.  This dependency includes the activemq-all uber jar, providing all ActiveMQ components. For more fine-grained control, individual components such as activemq-client or activemq-broker can be specified.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-01.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.14.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker XML Config in ra.xml (Updated)\nDESCRIPTION: This XML snippet shows the updated configuration in ra.xml, where the config-property-value now points to 'xbean:broker-config.xml'. This tells the ActiveMQ Classic RAR to load the broker configuration from the broker-config.xml file located on the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      Sets the XML configuration file used to configure the embedded ActiveMQ Classic broker via\n      Spring if using embedded mode.\n\n      BrokerXmlConfig is the filename which is assumed to be on the classpath unless\n      a URL is specified. So a value of foo/bar.xml would be assumed to be on the\n      classpath whereas file:dir/file.xml would use the file system.\n      Any valid URL string is supported.\n    </description>\n    <config-property-name>BrokerXmlConfig</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <config-property-value>xbean:broker-config.xml</config-property-value>\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Import Broker Data Archive\nDESCRIPTION: This command imports the broker's data from a compressed archive file into the newly installed Apollo broker. This step restores the data after the new version is installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/migration-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n${broker-path}/bin/apollo-broker store-import /tmp/broker-export.tgz\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Connection and Session Statistics\nDESCRIPTION: This Java log snippet provides statistics related to the ActiveMQ Classic connection and session, including message counts, processing times, and pending/expired message metrics. It shows performance characteristics of the messaging system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n[java] connection {\n[java]   session {\n[java]     messageCount{ count: 10 unit: count startTime: 1161062468001 lastSampleTime: \n[java]     1161062468340 description: Number of messages exchanged }\n[java]     messageRateTime{ count: 10 maxTime: 142 minTime: 1 totalTime: 315 averageTime: 31.5 \n[java]     averageTimeExMinMax: 21.5 averagePerSecond: 31.746031746031747\n[java]     averagePerSecondExMinMax: 46.51162790697674 unit: millis startTime: 1161062468002 lastSampleTime: \n[java]     1161062468340 description: Time taken to process a message (thoughtput rate) }\n[java]     pendingMessageCount{ count: 0 unit: count startTime: 1161062468001 lastSampleTime: \n[java]     1161062468001 description: Number of pending messages }\n[java]     expiredMessageCount{ count: 0 unit: count startTime: 1161062468001 lastSampleTime: \n[java]     1161062468001 description: Number of expired messages }\n[java]     messageWaitTime{ count: 0 maxTime: 0 minTime: 0 totalTime: 0 averageTime: 0.0 \n[java]     averageTimeExMinMax: 0.0 averagePerSecond: 0.0\n[java]     averagePerSecondExMinMax: 0.0 unit: millis startTime: 1161062468002 lastSampleTime: 1161062468002 \n[java]     description: Time spent by a message before being delivered }\n[java]     durableSubscriptionCount{ count: 0 unit: count startTime: 1161062468002 lastSampleTime: \n[java]     1161062468002 description: The number of durable\n[java]     subscriptions }\n[java]     producers {\n[java]       producer queue://TEST.FOO {\n[java]         messageCount{ count: 10 unit: count startTime: 1161062468025 lastSampleTime: \n[java]     1161062468340 description: Number of messages processed }\n[java]         messageRateTime{ count: 10 maxTime: 142 minTime: 1 totalTime: 315 averageTime: \n[java]     31.5 averageTimeExMinMax: 21.5 averagePerSecond:\n[java]     31.746031746031747 averagePerSecondExMinMax: 46.51162790697674 unit: millis startTime: 1161062468025 \n[java]     lastSampleTime: 1161062468340 description: Time taken to\n[java]     process a message (thoughtput rate) }\n[java]         pendingMessageCount{ count: 0 unit: count startTime: 1161062468025 lastSampleTime: \n[java]     1161062468025 description: Number of pending messages }\n[java]         messageRateTime{ count: 10 maxTime: 142 minTime: 1 totalTime: 315 averageTime: 31.5 \n[java]     averageTimeExMinMax: 21.5 averagePerSecond:\n[java]     31.746031746031747 averagePerSecondExMinMax: 46.51162790697674 unit: millis startTime: 1161062468025 \n[java]     lastSampleTime: 1161062468340 description: Time taken to\n[java]     process a message (thoughtput rate) }\n[java]         expiredMessageCount{ count: 0 unit: count startTime: 1161062468025 lastSampleTime: \n[java]     1161062468025 description: Number of expired messages }\n[java]         messageWaitTime{ count: 0 maxTime: 0 minTime: 0 totalTime: 0 averageTime: 0.0 \n[java]     averageTimeExMinMax: 0.0 averagePerSecond: 0.0\n[java]     averagePerSecondExMinMax: 0.0 unit: millis startTime: 1161062468025 lastSampleTime: 1161062468025 \n[java]     description: Time spent by a message before being delivered }\n[java]       }\n[java]     }\n[java]     consumers {\n[java]     }\n[java]   }\n[java] }\n```\n\n----------------------------------------\n\nTITLE: Enabling Mirrored Queues in ActiveMQ using XML Configuration\nDESCRIPTION: This code snippet shows how to enable mirrored queues in ActiveMQ by adding a destination interceptor configuration to the broker's XML configuration. The `copyMessage` attribute specifies whether to copy the message or move it, and the `postfix` and `prefix` attributes define the naming convention for the mirrored topics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mirrored-queues.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors>\n    <mirroredQueue copyMessage = \"true\" postfix=\".qmirror\" prefix=\"\"/>\n</destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: In-VM JMS Communication\nDESCRIPTION: This snippet shows how to limit JMS communication to a single JVM using the `vm://localhost` protocol. It allows for segmenting the VM protocol into different groups to create logically separate JMS networks within the same JVM.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-topologies.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvm://localhost\n```\n\n----------------------------------------\n\nTITLE: Setting the MessageListener on a Consumer in C++\nDESCRIPTION: This snippet shows how to set the MessageListener on a MessageConsumer.  An instance of the MessageListener implementation is passed to the `setMessageListener` method.  This enables asynchronous message consumption.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nSimpleListener listener;\n\nmyConsumer->setMessageListener( &listener );\n```\n\n----------------------------------------\n\nTITLE: Queue Details JSON Response with Producers and Consumers\nDESCRIPTION: This JSON snippet shows the structure of the response when querying for the details of a queue. It includes metrics, configuration, producers, and consumers. The values are examples and will depend on the queue's activity and configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"example-5\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314573814532,\n  \"config\": {\n    \"other\": []\n  },\n  \"binding\": {\n    \"@class\": \"queue_destination\",\n    \"path\": [\"example-5\"]\n  },\n  \"metrics\": {\n    \"current_time\": 1314574273342,\n    \"enqueue_item_counter\": 878638,\n    \"enqueue_size_counter\": 975430031,\n    \"enqueue_ts\": 1314574273335,\n    \"dequeue_item_counter\": 878522,\n    \"dequeue_size_counter\": 975301271,\n    \"dequeue_ts\": 1314574273328,\n    \"producer_counter\": 4,\n    \"consumer_counter\": 4,\n    \"producer_count\": 2,\n    \"consumer_count\": 2,\n    \"expired_item_counter\": 0,\n    \"expired_size_counter\": 0,\n    \"expired_ts\": 1314573814488,\n    \"nack_item_counter\": 118,\n    \"nack_size_counter\": 131098,\n    \"nack_ts\": 1314573928240,\n    \"queue_size\": 128760,\n    \"queue_items\": 116,\n    \"swapped_in_size_max\": 688128,\n    \"swapped_in_size\": 688200,\n    \"swapped_in_items\": 620,\n    \"swapping_in_size\": 0,\n    \"swapping_out_size\": 0,\n    \"swap_out_item_counter\": 605,\n    \"swap_out_size_counter\": 671279,\n    \"swap_in_item_counter\": 605,\n    \"swap_in_size_counter\": 671279\n  },\n  \"entries\": [],\n  \"producers\": [{\n        \"kind\": \"connection\",\n        \"id\": \"43\",\n        \"label\": \"/127.0.0.1:51632\",\n        \"enqueue_item_counter\": 12168,\n        \"enqueue_size_counter\": 13495374,\n        \"enqueue_ts\": 1314574273328\n      },\n      {\n        \"kind\": \"connection\",\n        \"id\": \"76\",\n        \"label\": \"/127.0.0.1:51665\",\n        \"enqueue_item_counter\": 13663,\n        \"enqueue_size_counter\": 15154824,\n        \"enqueue_ts\": 1314574273336\n      }],\n  \"consumers\": [{\n        \"kind\": \"connection\",\n        \"id\": \"65\",\n        \"label\": \"/127.0.0.1:51654\",\n        \"enqueue_item_counter\": 12678,\n        \"enqueue_size_counter\": 14060805,\n        \"enqueue_ts\": 1314574273248,\n        \"position\": 878615,\n        \"acquired_count\": 60,\n        \"acquired_size\": 66600,\n        \"total_ack_count\": 12618,\n        \"total_nack_count\": 0,\n        \"waiting_on\": \"ack\"\n      },\n      {\n        \"kind\": \"connection\",\n        \"id\": \"75\",\n        \"label\": \"/127.0.0.1:51664\",\n        \"enqueue_item_counter\": 13397,\n        \"enqueue_size_counter\": 14860500,\n        \"enqueue_ts\": 1314574273248,\n        \"position\": 878639,\n        \"acquired_count\": 56,\n        \"acquired_size\": 62160,\n        \"total_ack_count\": 13341,\n        \"total_nack_count\": 0,\n        \"waiting_on\": \"producer\"\n      }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StatisticsBrokerPlugin in ActiveMQ Classic XML\nDESCRIPTION: This XML snippet demonstrates how to configure the StatisticsBrokerPlugin within the ActiveMQ Classic broker configuration file.  It enables the plugin to collect and expose statistics. The plugin is added within the <plugins> section of the <broker> element.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/statisticsplugin.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker ...>\n  <plugins>\n    <statisticsBrokerPlugin/>\n  </plugins>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages using wget with clientId Parameter\nDESCRIPTION: This snippet shows how to consume messages from a queue using wget with clientId parameter. Using this approach, you don't need to keep sessions alive between requests, you just need to use the same clientId every time.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\nwget --user admin --password admin http://localhost:8161/api/message/test?type=queue&clientId=consumerA\n```\n\n----------------------------------------\n\nTITLE: Receive JMS Message with ActiveMQ Classic Ajax API\nDESCRIPTION: This JavaScript code shows how to receive JMS messages using the ActiveMQ Classic Ajax API. It defines a message handler function (`myHandler.rcvMessage`) that is called when a message is received. The `amq.addListener()` function registers the handler with a specific destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ajax.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myHandler =\n{\n  rcvMessage: function(message)\n  {\n     alert(\"received \"+message);\n  }\n};\n\namq.addListener(myId,myDestination,myHandler.rcvMessage);\n```\n\n----------------------------------------\n\nTITLE: XML Configuration\nDESCRIPTION: This XML snippet demonstrates a basic XML structure. It can be used for configuring various aspects of ActiveMQ or other related components.  No specific dependencies are implied; it's a generic XML example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.14.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Admin Browse Task Usage\nDESCRIPTION: Shows the command-line syntax for browsing messages on a specific destination using either `activemq-admin browse` or `java -jar run.jar browse`, requiring a broker URL and destination as input. The browse operation might not return all messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n_activemq-admin browse --amqurl &lt;broker url> [options] &lt;destinations>_ or _java -jar run.jar browse --amqurl &lt;broker url> [options] &lt;destinations>_\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages in Transaction\nDESCRIPTION: This command configures the ActiveMQ Classic consumer to consume messages within a transaction. The `--transacted` option enables transactional consumption.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq consumer --transacted true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Embedded Broker with VM URI (Java)\nDESCRIPTION: This snippet shows how to create a ConnectionFactory that connects to an embedded broker using the VM transport URI.  The create=false parameter specifies that the broker should already be running.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://embedded-broker?create=false\");\n```\n\n----------------------------------------\n\nTITLE: Display Destination Statistics ActiveMQ Admin\nDESCRIPTION: This command displays statistics for all destinations on the broker using the default JMX context. The activemq-admin tool is invoked with the 'dstat' task.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin dstat\n```\n\n----------------------------------------\n\nTITLE: JMS Selector Example (SQL)\nDESCRIPTION: This code snippet demonstrates a basic JMS selector using SQL 92 syntax. It filters messages based on the JMSType, color, and weight properties. This selector can be used to route messages based on their content.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/selectors.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nJMSType = 'car' AND color = 'blue' AND weight > 2500\n```\n\n----------------------------------------\n\nTITLE: Sybase DataSource Configuration (jConnect)\nDESCRIPTION: This snippet demonstrates the configuration of a Sybase datasource using the jConnect driver.  It sets the driver class name, URL, username, and password properties. It is configured to connect to a Sybase ASE instance running on localhost port 4000, targeting a database named 'activemq'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sybase.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"sybase-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n\n    <!\\-\\- using jConnect -->\n    <property name=\"driverClassName\" value=\"com.sybase.jdbc4.jdbc.SybDriver\"/>\n    <property name=\"url\" value=\"jdbc:sybase:Tds:localhost:4000/activemq\"/>\n    <!\\-\\- using JTDS -->\n    <!\\-\\- <property name=\"driverClassName\" value=\"net.sourceforge.jtds.jdbc.Driver\"/> -->\n    <!\\-\\- <property name=\"url\" value=\"jdbc:jtds:sybase://localhost:4000/activemq\"/> -->\n\n    <property name=\"username\" value=\"XXX\" />\n    <property name=\"password\" value=\"YYY\" />\n    <!\\-\\- and so on with pool config -->\n  </bean>\n```\n\n----------------------------------------\n\nTITLE: SQL Server 2000 Persistence Adapter Configuration (XML)\nDESCRIPTION: Configures the persistence adapter to use SQL Server 2000.  It specifies the journaledJDBC adapter with the imageBasedJDBCAdaptor for data storage and references the mssql-ds bean for the database connection. The journalLogFiles attribute specifies the number of journal log files to use.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sqlserver.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n     <journaledJDBC journalLogFiles=\"5\"\ndataDirectory=\"../activemq-data\" dataSource=\"#mssql-ds\">\n      <adapter><imageBasedJDBCAdaptor/></adapter>\n     </journaledJDBC>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Disabling JMX Creation in ActiveMQ Classic XML\nDESCRIPTION: This snippet configures ActiveMQ Classic not to create its own JMX connector, relying instead on the JMX instance provided by the JBoss application server.  It involves adding a managementContext to the broker tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<managementContext><!-- we'll use an existing one (JBoss) instead of creating one -->\n  <managementContext createConnector=\"false\"/>\n</managementContext>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing a Client using clientId and action Parameter\nDESCRIPTION: This snippet demonstrates how to unsubscribe a client from the JMS broker. This action is achieved by sending a POST request with the clientId and action=unsubscribe parameters.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\nhttp://localhost:8161/demo/message/test?clientId=consumerA&action=unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Network Connector - Broker B and D\nDESCRIPTION: This snippet demonstrates the LDAP network connector configuration for brokers 'srv-b.mydomain.com' and 'srv-d.mydomain.com'.  The LDAP server URI, base DN, anonymous authentication, search filter, and search scope are specified, similar to the other LDAP configurations. This configuration allows these brokers to discover other brokers within a specific LDAP organizational unit.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ldap-broker-discovery-mechanism.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"srv-b.mydomain.com\" ...>\n   ...\n\n   <networkConnectors/>\n      <ldapNetworkConnector uri=\"ldap://myldap.mydomain.com:389\"\n                            base=\"dc=brokers-other,dc=mydomain,dc=com\"\n                            anonymousAuthentication=\"true\"\n                            searchFilter=\"(cn=*)\"\n                            searchScope=\"SUBTREE_SCOPE\"\n                            />\n   </networkConnectors>\n\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker using Maven (pom)\nDESCRIPTION: This snippet shows how to run an ActiveMQ Classic broker using the ActiveMQ Startup Maven Plugin, after including it in the pom.xml.  It allows for execution via a simplified command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/run-broker.md#_snippet_1\n\nLANGUAGE: Maven\nCODE:\n```\nmvn activemq:run\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Admin Query Task Usage\nDESCRIPTION: Illustrates the syntax for using the `activemq-admin query` command to interact with a JMX context to retrieve information about MBeans. This requires JMX to be enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n_activemq-admin query [options]_\n```\n\n----------------------------------------\n\nTITLE: Consume Messages\nDESCRIPTION: Consumes messages from a queue by browsing the subscription, represented as an Atom Feed, and then deleting the message after processing. A GET request to the subscription URI (subscriptionUri) returns a 200 OK response with an Atom Feed containing entries for each message associated with the subscription.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nGET subscriptionUri\n-------------------->\n\n200 OK\nAtom Feed with one entry per message associated to this subscription\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Example with Multiple Priority URIs\nDESCRIPTION: Illustrates how to specify multiple prioritized URIs using the `priorityURIs` option. The client will prioritize either `local1` or `local2` brokers and reconnect to them if they are available. This allows for multiple local brokers to be preferred over a remote broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nfailover:(tcp://local1:61616,tcp://local2:61616,tcp://remote:61616)?randomize=false&priorityBackup=true&priorityURIs=tcp://local1:61616,tcp://local2:61616\n```\n\n----------------------------------------\n\nTITLE: Setting activemq.store.dir System Property in Java\nDESCRIPTION: This example demonstrates how to set the `activemq.store.dir` system property when starting a Java application. This property is used by an embedded ActiveMQ broker to determine the directory where persistent message data is stored.  Setting this property overrides the default location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-the-message-store-directory-for-an-embedded-broker.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava -Dactivemq.store.dir=/temp your.Application\n```\n\n----------------------------------------\n\nTITLE: Testing ActiveMQ Classic Configuration\nDESCRIPTION: This example demonstrates how to test ActiveMQ Classic configurations using the ActiveMQ Classic startup script. It shows how to specify the configuration file using the `xbean:file:` prefix and the path to the XML file. The output displays information about the Java environment, ActiveMQ Classic home and base directories, and the loading of the broker configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd $ACTIVEMQ_HOME  \n$ ./bin/activemq console xbean:file:/Users/bsnyder/SpringSource/clients/Finra/activemq-example-unordered.xml  \nINFO: Using default configuration  \n(you can configure options in one of these file: /etc/default/activemq /Users/bsnyder/.activemqrc)\n\nINFO: Invoke the following command to create a configuration file  \n./bin/activemq setup \\[ /etc/default/activemq | /Users/bsnyder/.activemqrc \\]\n\nINFO: Using java '/System/Library/Frameworks/JavaVM.framework/Home/bin/java'  \nINFO: Starting in foreground, this is just for debugging purposes (stop process by pressing CTRL+C)  \nJava Runtime: Apple Inc. 1.6.0_20 /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home  \nHeap sizes: current=258880k free=253106k max=258880k  \nJVM args: -Xms256M -Xmx256M -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dcom.sun.management.jmxremote -Dactivemq.classpath=/Users/bsnyder/amq/apache-activemq-5.4.1/conf; -Dactivemq.home=/Users/bsnyder/amq/apache-activemq-5.4.1 -Dactivemq.base=/Users/bsnyder/amq/apache-activemq-5.4.1  \nACTIVEMQ_HOME: /Users/bsnyder/amq/apache-activemq-5.4.1  \nACTIVEMQ_BASE: /Users/bsnyder/amq/apache-activemq-5.4.1  \nLoading message broker from: xbean:file:/Users/bsnyder/SpringSource/clients/Finra/activemq-example-unordered.xml  \n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatch Policy in ActiveMQ Classic 4.x (XML)\nDESCRIPTION: This XML snippet configures the dispatch policy for a specific destination (topic). It sets the dispatch policy to `strictOrderDispatchPolicy` for topics matching the pattern `COMMAND.>`. It also configures the subscription recovery policy to `noSubscriptionRecoveryPolicy`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-dispatch-policy.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n   <policyMap><policyEntries> \n      <policyEntry topic=\"COMMAND.>\">\n         <dispatchPolicy>\n           <strictOrderDispatchPolicy />\n         </dispatchPolicy>\n         <subscriptionRecoveryPolicy>\n            <noSubscriptionRecoveryPolicy />\n         </subscriptionRecoveryPolicy>\n      </policyEntry>\n   </policyEntries></policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Extracting Binary Snapshot Archive (Unix)\nDESCRIPTION: This command extracts the files from a gzipped tar archive, typically containing a binary distribution of ActiveMQ Classic, into the current directory.  It assumes the archive is named 'activemq-x.x.x.tar.gz'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntar zxvf activemq-x.x.x.tar.gz\n```\n\n----------------------------------------\n\nTITLE: sun-ejb-jar.xml configuration for MDB\nDESCRIPTION: This XML configuration file (sun-ejb-jar.xml) defines the deployment settings for a Message-Driven Bean (MDB) in SJSAS. It specifies the JNDI name for the connection factory, the resource adapter to use (myapp#genericra), and activation configuration properties like DestinationType and DestinationProperties, pointing to ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE sun-ejb-jar\n  PUBLIC \"-//Sun Microsystems, Inc.//DTD Application Server 8.1 EJB 2.1//EN\"\n    \"http://www.sun.com/software/appserver/dtds/sun-ejb-jar_2_1-1.dtd\">\n<sun-ejb-jar>\n  <enterprise-beans>\n    <ejb>\n      <ejb-name>TestingMessageDrivenBean</ejb-name>\n      <mdb-connection-factory>\n        <jndi-name>jms/SimpleQueueConnectionFactory</jndi-name>\n      </mdb-connection-factory>\n      <mdb-resource-adapter>\n        <resource-adapter-mid>myapp#genericra</resource-adapter-mid>\n        <activation-config>\n          <activation-config-property>\n            <activation-config-property-name>DestinationType</activation-config-property-name>\n            <activation-config-property-value>javax.jms.Queue</activation-config-property-value>\n          </activation-config-property>\n          <activation-config-property>\n            <activation-config-property-name>DestinationProperties</activation-config-property-name>\n            <activation-config-property-value>PhysicalName=Foo.Bar</activation-config-property-value>\n          </activation-config-property>\n        </activation-config>\n      </mdb-resource-adapter>\n    </ejb>\n  </enterprise-beans>\n</sun-ejb-jar>\n```\n\n----------------------------------------\n\nTITLE: Enabling AUTO over TCP in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet configures ActiveMQ Classic to use auto wire format detection over a TCP connection.  It uses the `auto` transport prefix and specifies the URI for the connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto\" uri=\"auto://localhost:5671\"/>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker Connection Metrics (Java)\nDESCRIPTION: This snippet provides metrics related to the ActiveMQ Classic broker's connection, session, and message handling. It includes message counts, processing times, pending/expired message counts, and producer/consumer statistics for the TEST.FOO queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n[java] connection {\n[java]   session {\n[java]     messageCount{ count: 10 unit: count startTime: 1161062468001 lastSampleTime: \n[java]    1161062468340 description: Number of messages exchanged }\n[java]     messageRateTime{ count: 10 maxTime: 142 minTime: 1 totalTime: 315 averageTime: 31.5 \n[java]    averageTimeExMinMax: 21.5 averagePerSecond: 31.746031746031747\n[java]    averagePerSecondExMinMax: 46.51162790697674 unit: millis startTime: 1161062468002 lastSampleTime: \n[java]    1161062468340 description: Time taken to process a message (thoughtput rate) }\n[java]     pendingMessageCount{ count: 0 unit: count startTime: 1161062468001 lastSampleTime: \n[java]    1161062468001 description: Number of pending messages }\n[java]     expiredMessageCount{ count: 0 unit: count startTime: 1161062468001 lastSampleTime: \n[java]    1161062468001 description: Number of expired messages }\n[java]     messageWaitTime{ count: 0 maxTime: 0 minTime: 0 totalTime: 0 averageTime: 0.0 \n[java]    averageTimeExMinMax: 0.0 averagePerSecond: 0.0\n[java]    averagePerSecondExMinMax: 0.0 unit: millis startTime: 1161062468002 lastSampleTime: 1161062468002 \n[java]    description: Time spent by a message before being delivered }\n[java]     durableSubscriptionCount{ count: 0 unit: count startTime: 1161062468002 lastSampleTime: \n[java]    1161062468002 description: The number of durable\n[java]    subscriptions }\n[java]     producers {\n[java]       producer queue://TEST.FOO {\n[java]         messageCount{ count: 10 unit: count startTime: 1161062468025 lastSampleTime: \n[java]    1161062468340 description: Number of messages processed }\n[java]         messageRateTime{ count: 10 maxTime: 142 minTime: 1 totalTime: 315 averageTime: \n[java]    31.5 averageTimeExMinMax: 21.5 averagePerSecond:\n[java]    31.746031746031747 averagePerSecondExMinMax: 46.51162790697674 unit: millis startTime: 1161062468025 \n[java]    lastSampleTime: 1161062468340 description: Time taken to\n[java]    process a message (thoughtput rate) }\n[java]         pendingMessageCount{ count: 0 unit: count startTime: 1161062468025 lastSampleTime: \n[java]    1161062468025 description: Number of pending messages }\n[java]         messageRateTime{ count: 10 maxTime: 142 minTime: 1 totalTime: 315 averageTime: 31.5 \n[java]    averageTimeExMinMax: 21.5 averagePerSecond:\n[java]    31.746031746031747 averagePerSecondExMinMax: 46.51162790697674 unit: millis startTime: 1161062468025 \n[java]    lastSampleTime: 1161062468340 description: Time taken to\n[java]    process a message (thoughtput rate) }\n[java]         expiredMessageCount{ count: 0 unit: count startTime: 1161062468025 lastSampleTime: \n[java]    1161062468025 description: Number of expired messages }\n[java]         messageWaitTime{ count: 0 maxTime: 0 minTime: 0 totalTime: 0 averageTime: 0.0 \n[java]    averageTimeExMinMax: 0.0 averagePerSecond: 0.0\n[java]    averagePerSecondExMinMax: 0.0 unit: millis startTime: 1161062468025 lastSampleTime: 1161062468025 \n[java]    description: Time spent by a message before being delivered }\n[java]       }\n[java]     }\n[java]     consumers {\n[java]     }\n[java]   }\n[java] }\n```\n\n----------------------------------------\n\nTITLE: JDBC Persistence Adapter Configuration with Dedicated Lock DataSource\nDESCRIPTION: This snippet illustrates how to configure the JDBC persistence adapter to use a dedicated datasource for the database lock. This is crucial for preventing transaction log exhaustion when using the Master-Slave feature. It specifies 'sybase-ds' for message persistence and 'another-sybase-ds' specifically for the lock.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sybase.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n  <jdbcPersistenceAdapter dataSource=\"#sybase-ds\" lockDataSource=\"#another-sybase-ds\"/>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Running Producer and Consumer using Java\nDESCRIPTION: These commands run the ActiveMQ Classic producer and consumer tools using the `activemq-all` jar. Replace `5.x.x` with the actual version of the JAR file. This requires Java to be installed and in the system's PATH.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava -jar activemq-all-5.x.x.jar producer\njava -jar activemq-all-5.x.x.jar consumer\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Classic Broker via Maven Plugin (pom)\nDESCRIPTION: This command runs the ActiveMQ Classic broker using the ActiveMQ Maven plugin, assuming it has been configured within the project's pom.xml file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn activemq:run\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Advisory Message in ActiveMQ-CPP\nDESCRIPTION: This code snippet demonstrates how to handle incoming messages, check if they are advisory messages, and extract relevant data from them. It checks the message type and then retrieves the consumer count if it exists as a property in the message.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid AdvisoryProducer::onMessage( const cms::Message* message ) {\n\n   if( message->getCMSType() == \"Advisory\" ) {\n\n       std::cout << \"Received an Advisory Message!\" << std::endl;\n\n       if( message->propertyExists( \"consumerCount\" ) ) {\n\n           std::string consumerCount = message->getStringProperty( \"consumerCount\" );\n           std::cout << \"Number of Consumers = \" << consumerCount << std::endl;\n\n           // Do Something Meaningful here....\n       }\n\n   } else {\n       std::cout << \"Received a Non-Advisory Message!\" << std::endl;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with Client Acknowledgment\nDESCRIPTION: This command configures the ActiveMQ Classic consumer to use client acknowledgment mode. The `--ackMode` option is set to `CLIENT_ACKNOWLEDGE`, requiring the client to explicitly acknowledge messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq consumer --ackMode CLIENT_ACKNOWLEDGE\n```\n\n----------------------------------------\n\nTITLE: Deploying Topics and ConnectionFactory - Geronimo XML\nDESCRIPTION: This XML configuration file is used to deploy two topics (weatherTopic and weatherRequestsTopic) and a ConnectionFactory to the Apache Geronimo application server. It defines the resource adapter settings including the server URL, username, and password for the ActiveMQ Classic broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<connector xmlns=\"http://geronimo.apache.org/xml/ns/j2ee/connector\"\n    version=\"1.5\"\n    configId=\"weather/Topics\"\n    parentId=\"org/apache/geronimo/SystemJMS\">\n    <resourceadapter>\n        <resourceadapter-instance>\n            <resourceadapter-name>ActiveMQ Classic RA</resourceadapter-name>\n            <config-property-setting name=\"ServerUrl\">tcp://localhost:61616</config-property-setting>\n            <config-property-setting name=\"UserName\">geronimo</config-property-setting>\n            <config-property-setting name=\"Password\">geronimo</config-property-setting>\n            <workmanager>\n                <gbean-link>DefaultWorkManager</gbean-link>\n            </workmanager>\n        </resourceadapter-instance>\n        <outbound-resourceadapter>\n            <connection-definition>\n\n<connectionfactory-interface>javax.jms.ConnectionFactory</connectionfactory-interface>\n                <connectiondefinition-instance>\n                    <name>ConnectionFactory</name>\n\n<implemented-interface>javax.jms.QueueConnectionFactory</implemented-interface>\n\n<implemented-interface>javax.jms.TopicConnectionFactory</implemented-interface>\n                    <connectionmanager>\n                        <xa-transaction>\n                            <transaction-caching/>\n                        </xa-transaction>\n                        <single-pool>\n                            <max-size>10</max-size>\n\n<blocking-timeout-milliseconds>5000</blocking-timeout-milliseconds>\n                            <match-one/>\n                        </single-pool>\n                    </connectionmanager>\n                    <global-jndi-name>ConnectionFactory</global-jndi-name>\n                    <!--\n<credential-interface>javax.resource.spi.security.PasswordCredential</credential-interface>\n-->\n                </connectiondefinition-instance>\n            </connection-definition>\n        </outbound-resourceadapter>\n    </resourceadapter>\n    <adminobject>\n        <adminobject-interface>javax.jms.Topic</adminobject-interface>\n\n<adminobject-class>org.codehaus.activemq.message.ActiveMQTopic</adminobject-class>\n        <adminobject-instance>\n            <message-destination-name>weatherTopic</message-destination-name>\n            <config-property-setting\nname=\"PhysicalName\">weatherTopic</config-property-setting>\n        </adminobject-instance>\n    </adminobject>\n    <adminobject>\n        <adminobject-interface>javax.jms.Topic</adminobject-interface>\n\n<adminobject-class>org.codehaus.activemq.message.ActiveMQTopic</adminobject-class>\n        <adminobject-instance>\n\n<message-destination-name>weatherRequestsTopic</message-destination-name>\n            <config-property-setting\nname=\"PhysicalName\">weatherRequestsTopic</config-property-setting>\n        </adminobject-instance>\n    </adminobject>\n\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Invalid ActiveMQ Classic XML Configuration (Pre-5.4 Ordering)\nDESCRIPTION: This XML configuration demonstrates an invalid ordering of elements within the `<broker>` element for ActiveMQ Classic 5.4 and later. Specifically, the `persistenceAdapter` element appears before `plugins` and `destinationPolicy` which leads to a `SAXParseException` due to the XML schema validation introduced in ActiveMQ Classic 5.4.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd   \nhttp://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd      \nhttp://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\">\n  \n  <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"brokerB1\" destroyApplicationContextOnStop=\"true\">\n    \n    <plugins>\n      <loggingBrokerPlugin/>\n    </plugins>\n    \n    <persistenceAdapter>\n      <kahaDB directory=\"${activemq.base}/data/kahadb\" enableJournalDiskSyncs=\"false\" indexWriteBatchSize=\"10000\" indexCacheSize=\"1000\"/>\n    </persistenceAdapter>\n    \n    <destinationPolicy>\n      <policyMap>\n        <policyEntries>\n          <policyEntry queue=\">\" producerFlowControl=\"true\" memoryLimit=\"5mb\">\n            <deadLetterStrategy>\n              <individualDeadLetterStrategy queuePrefix=\"DLQ.\" useQueueForQueueMessages=\"true\"/>\n            </deadLetterStrategy>\n          </policyEntry>\n        </policyEntries>\n      </policyMap>\n    </destinationPolicy>\n    \n    <managementContext>\n      <managementContext createConnector=\"false\"/>\n    </managementContext>\n    \n    <systemUsage>\n      <systemUsage>\n        <memoryUsage>\n          <memoryUsage limit=\"420 mb\"/>\n        </memoryUsage>\n        <storeUsage>\n          <storeUsage limit=\"1 gb\"/>\n        </storeUsage>\n        <tempUsage>\n          <tempUsage limit=\"250 mb\"/>\n        </tempUsage>\n      </systemUsage>\n    </systemUsage>\n    \n    <transportConnectors>\n      <transportConnector name=\"tcp\" uri=\"tcp://0.0.0.0:61616\"/>\n    </transportConnectors>\n    \n  </broker>\n  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Verifying Virtual Threads are Enabled via Log Message\nDESCRIPTION: This log message indicates that the VirtualThreadExecutor has been successfully initialized for the ActiveMQ BrokerService. This message confirms that Virtual Threads are being used by ActiveMQ. Note that this log message is subject to change in future versions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-threads.md#_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nINFO | VirtualThreadExecutor initialized name:ActiveMQ BrokerService[localhost] Task\n```\n\n----------------------------------------\n\nTITLE: Creating a Retroactive Consumer in ActiveMQ\nDESCRIPTION: This code snippet demonstrates how to create an ActiveMQ topic consumer that is marked as retroactive. The 'consumer.retroactive=true' parameter in the topic name indicates that the consumer should attempt to retrieve old messages upon subscribing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/retroactive-consumer.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ntopic = new ActiveMQTopic(\"TEST.Topic?consumer.retroactive=true\");\nconsumer = session.createConsumer(topic);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenWire Connector Attributes\nDESCRIPTION: This XML example demonstrates configuring specific attributes for the OpenWire connector, such as disabling `tight_encoding` and enabling `tcp_no_delay`. These settings affect how data is marshalled and transmitted over the wire.  These options are set within the `openwire` element inside the `connector` element.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <openwire tight_encoding=\"false\" tcp_no_delay=\"true\"/>\n</connector>\n```\n\n----------------------------------------\n\nTITLE: JMX Password File Content\nDESCRIPTION: This snippet shows the contents of a jmx.password file, which defines the usernames and passwords for JMX connections. 'monitorRole' is associated with password 'abc123', and 'controlRole' is associated with password 'abcd1234'. This file is used in conjunction with the access file to secure the JMX connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# The \"monitorRole\" role has password \"abc123\".\n# The \"controlRole\" role has password \"abcd1234\".\nmonitorRole abc123\ncontrolRole abcd1234\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Broker Service on Redhat Bash\nDESCRIPTION: These commands install the ActiveMQ Apollo broker as a service on Redhat, enabling it to run on startup. Requires root privileges (sudo).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /var/lib/mybroker/bin/apollo-broker-service /etc/init.d/apollo\nsudo chkconfig apollo --add\n```\n\n----------------------------------------\n\nTITLE: Getting ConnectionFactory from Embedded Broker (Java)\nDESCRIPTION: Demonstrates how to get a ConnectionFactory from the EmbeddedActiveMQBroker instance.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory connectionFactory = embeddedBroker.createConnectionFactory();\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Maven Dependency (XML)\nDESCRIPTION: This XML snippet defines a Maven dependency for the `activemq-all` artifact. It specifies the group ID, artifact ID, and version required to include ActiveMQ in a Maven project. This is the simplest dependency to use.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-03.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.13.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Wire Format: maxFrameSize\nDESCRIPTION: This snippet shows how to configure the MQTT wire format by setting the `maxFrameSize` option. The `wireFormat.maxFrameSize` parameter limits the maximum size of MQTT frames to prevent OOM DOS attacks. It requires ActiveMQ Classic and proper URI formatting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"mqtt\" uri=\"mqtt://localhost:61612?wireFormat.maxFrameSize=100000\"/>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic with XML config via Java\nDESCRIPTION: This command demonstrates running the broker using the Spring-based Main class, specifying the XML configuration file. This requires Spring dependencies to be in the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njava org.activemq.spring.Main src/sample-conf/default.xml\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS ConnectionFactory in C++\nDESCRIPTION: This code snippet demonstrates how to create a CMS ConnectionFactory using the static method createCMSConnectionFactory. It takes a URI string as a parameter, specifying the connection details (e.g., protocol, address) of the messaging service.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory(\n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n```\n\n----------------------------------------\n\nTITLE: QueryBasedSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Configures a query-based subscription recovery policy. The query attribute specifies a JMS message selector used to retrieve missed messages. This allows for custom logic to determine which messages should be recovered based on message properties.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<queryBasedSubscriptionRecoveryPolicy query=\"JMSType = 'car' AND color = 'blue'\"/>\n```\n\n----------------------------------------\n\nTITLE: Sending Byte Message with Custom Size via ActiveMQ CLI\nDESCRIPTION: This command sends a byte message with a custom size using the ActiveMQ Classic command-line tool. The `--messageSize` parameter specifies the size of the message in bytes and `--messageCount` specifies the number of messages to send.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq producer --messageSize 100 --messageCount 1\n```\n\n----------------------------------------\n\nTITLE: Scheduling Combined CRON, Delay, Repeat ActiveMQ Stomp C#\nDESCRIPTION: This snippet shows how to combine CRON scheduling with delay, period, and repeat properties.  When a CRON expression is used in conjunction with delay, period, and repeat, the scheduler will schedule delivery based on the CRON expression, and then repeat the message delivery according to the delay, period, and repeat values each time the CRON expression fires.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/advanced-features/stomp-delayed-and-scheduled-message-feature.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nmessage.Properties[\"AMQ_SCHEDULED_CRON\"] = \"0 * * * *\";\nmessage.Properties[\"AMQ_SCHEDULED_DELAY\"] = 1000;\nmessage.Properties[\"AMQ_SCHEDULED_PERIOD\"] = 1000;\nmessage.Properties[\"AMQ_SCHEDULED_REPEAT\"] = 9;\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Encrypt Password using ActiveMQ CLI (Bash)\nDESCRIPTION: This command encrypts a password using the ActiveMQ command-line tool. It takes the password to be encrypted using the `--input` argument and a secret key using the `--password` argument. The encrypted output is then displayed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/activemq encrypt --password activemq --input mypassword\n...\nEncrypted text: eeWjNyX6FY8Fjp3E+F6qTytV11bZItDp\n```\n\n----------------------------------------\n\nTITLE: SQL Server 2000 DataSource Configuration (XML)\nDESCRIPTION: Defines a bean for the SQL Server 2000 DataSource using Apache Commons DBCP.  It sets the driver class, JDBC URL, username, and password properties for connecting to the SQL Server database.  The destroy-method=\"close\" ensures the connection pool is properly closed on shutdown.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sqlserver.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mssql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\"\ndestroy-method=\"close\">\n   <property name=\"driverClassName\"\nvalue=\"com.microsoft.jdbc.sqlserver.SQLServerDriver\"/>\n   <property name=\"url\" value=\"jdbc:microsoft:sqlserver://HOSTNAME\n\\\\\\INSTANCE;DataBaseName=DBNAME\"/>\n   <property name=\"username\" value=\"sa\"/>\n   <property name=\"password\" value=\"password\"/>\n </bean>\n```\n\n----------------------------------------\n\nTITLE: SSL Protocol Configuration in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates the configuration of the SSL protocol for secure client-server communication in ActiveMQ Classic.  Clients connect to a message broker using this protocol, typically over SSL. Requires a properly configured SSL certificate on the broker side.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/topologies.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nssl://somehost:port\n```\n\n----------------------------------------\n\nTITLE: Closing a Message Group in ActiveMQ\nDESCRIPTION: This Java code snippet shows how to close a Message Group in ActiveMQ by setting a negative value for the JMSXGroupSeq property. This will cause subsequent messages with the same JMSXGroupID to be reassigned to a new consumer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMesasge message = session.createTextMessage(\"<foo>hey</foo>\");\nmessage.setStringProperty(\"JMSXGroupID\", \"IBM_NASDAQ_20/4/05\");\nmessage.setIntProperty(\"JMSXGroupSeq\", -1);\n...\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Maven commands for testing Zeroconf Discovery\nDESCRIPTION: These Maven commands are used to start two brokers and two clients, with brokers auto-discovering themselves. The clients use fixed URLs to connect.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmaven -o server -Dconfig=src/test/org/activemq/usecases/receiver-zeroconf.xml\nmaven -o server -Dconfig=src/test/org/activemq/usecases/sender-zeroconf.xml\nmaven -o consumer -Durl=tcp://localhost:62002\nmaven -o producer -Durl=tcp://localhost:62001\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Destination Subscriptions on Remote Broker - XML\nDESCRIPTION: This snippet configures the Remote Broker to send advisory messages when consumers subscribe to a destination that matches a Virtual Destination. The `useVirtualDestSubs` attribute set to `true` enables this behavior.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker name=\"remoteBroker\" useVirtualDestSubs=\"true\">  \n     .....\n  </broker>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Multicast URI with Specific Address and Port\nDESCRIPTION: An example URI specifying a custom IP address and port for the multicast transport. This allows configuring multicast on specific networks or ports.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/multicast-transport-reference.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmulticast://224.1.2.3:6255\n```\n\n----------------------------------------\n\nTITLE: Creating Broker Truststore and Importing Client Certificate\nDESCRIPTION: This command creates a truststore for the broker and imports the client's certificate into it. The truststore is named broker.ts and the imported certificate is from the file client_cert with alias 'client'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -import -alias client -keystore broker.ts -file client_cert\n```\n\n----------------------------------------\n\nTITLE: Audit Log Sample Entries\nDESCRIPTION: These log entries demonstrate the format of audit logs generated by ActiveMQ Classic when audit logging is enabled. Each entry contains information about the user, the action performed, the parameters used, and the IP address from which the call was made. The logs show actions taken via both the web console and JMX.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/audit-logging.md#_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n2010-12-22 12:12:07,225 | INFO  | admin requested /admin/createDestination.action [JMSDestination='test' JMSDestinationType='queue' secret='4eb0bc3e-9d7a-4256-844c-24f40fda98f1' ] from 127.0.0.1 | qtp12205619-39\n2010-12-22 12:12:14,512 | INFO  | admin requested /admin/purgeDestination.action [JMSDestination='test' JMSDestinationType='queue' secret='eff6a932-1b58-45da-a64a-1b30b246cfc9' ] from 127.0.0.1 | qtp12205619-36\n2010-12-22 12:12:17,802 | INFO  | admin requested /admin/sendMessage.action [JMSTimeToLive='' JMSXGroupSeq='' AMQ_SCHEDULED_DELAY='' JMSType='' JMSMessageCountHeader='JMSXMessageCounter' JMSXGroupID='' JMSReplyTo='' JMSDestination='test' AMQ_SCHEDULED_PERIOD='' JMSText='Enter some text \nhere for the message body...' JMSDestinationType='queue' AMQ_SCHEDULED_CRON='' JMSCorrelationID='' AMQ_SCHEDULED_REPEAT='' JMSMessageCount='1' secret='a0e1df62-14d6-4425-82a2-17aa01a16e7d' JMSPriority='' ] from 127.0.0.1 | qtp12205619-37\n...\n2010-12-22 12:12:57,553 | INFO  | admin called org.apache.activemq.broker.jmx.QueueView.purge[] | RMI TCP Connection(8)-192.168.1.107\n2010-12-22 12:13:21,976 | INFO  | admin called org.apache.activemq.broker.jmx.QueueView.resetStatistics[] | RMI TCP Connection(8)-192.168.1.107\n2010-12-22 12:13:32,457 | INFO  | admin called org.apache.activemq.broker.jmx.QueueView.sendTextMessage[message] | RMI TCP Connection(6)-192.168.1.107\n```\n\n----------------------------------------\n\nTITLE: TimedSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Configures a timed subscription recovery policy.  The recoverDuration attribute specifies the amount of time (in milliseconds) that messages are retained in memory.  Consumers can recover messages missed within this time window.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<timedSubscriptionRecoveryPolicy recoverDuration=\"60000\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connector with Fixed URIs in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to configure a network connector in ActiveMQ Classic using a fixed list of URIs. It defines a broker named 'receiver' and configures a networkConnector to connect to another broker at tcp://localhost:62001. It also includes the persistence adapter configuration and a transport connector for client connections.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker brokerName=\"receiver\" persistent=\"false\" useJmx=\"false\">  \n    <networkConnectors>\n      <networkConnector uri=\"static:(tcp://localhost:62001)\"/>\n    </networkConnectors>\n\n    <persistenceAdapter>\n      <memoryPersistenceAdapter/>\n    </persistenceAdapter>\n\n   <transportConnectors>\n      <transportConnector uri=\"tcp://localhost:62002\"/>\n    </transportConnectors>\n  </broker>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Create a Queue\nDESCRIPTION: Creates a new queue. The operation is typically idempotent. A POST request to /queues returns a 201 OK response with a Location header containing a unique URL for posting messages to the newly created queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /queues\n-------------------->\n\n201 OK\nLocation: someUniqueUrlForTheNewQueueToBePostedTo\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Broker XML Configuration with Discovery\nDESCRIPTION: Illustrates how to configure a broker to use discovery via XML configuration.  It includes setting the `discoveryUri` attribute on a `transportConnector` element. The discovery URI specifies the discovery agent to use (in this case, multicast).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery-transport-reference.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker name=\"foo\">\n  <transportConnectors>\n    <transportConnector uri=\"tcp://localhost:0\" discoveryUri=\"multicast://default\"/>\n  </transportConnectors>\n\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Acknowledging a Message\nDESCRIPTION: This snippet acknowledges the receipt and processing of a message using an HTTP POST request. The consumer ID and message ID are required to identify the message to acknowledge.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /ack/consumerId/messageId\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Broker with XBean XML (AMQ 4.x)\nDESCRIPTION: This snippet demonstrates how to configure ActiveMQ using an XBean XML file.  It is used to specify the configuration file when starting the ActiveMQ broker from the command line. It is compatible with AMQ 4.x versions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nactivemq xbean:file:myconfig.xml\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Generic XSD\nDESCRIPTION: This XML snippet shows how to configure Spring beans with a generic version of the ActiveMQ Classic XSD. It includes the necessary namespaces and schema locations for Spring beans and ActiveMQ Classic configuration. Using a generic XSD avoids the need to update the XML configuration file with each ActiveMQ Classic release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:amq=\"http://activemq.org/config/1.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n        http://activemq.org/config/1.0 http://activemq.apache.org/schema/activemq-core.xsd\">\n```\n\n----------------------------------------\n\nTITLE: FixedSizedSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Configures a fixed-size subscription recovery policy.  The maximumSize attribute determines the amount of memory allocated for message history. Messages are evicted in time order when the limit is reached.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<fixedSizedSubscriptionRecoveryPolicy maximumSize=\"1024\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring BlazeDS for JMS with ActiveMQ\nDESCRIPTION: This configuration file (messaging-config.xml) configures BlazeDS to use JMS with ActiveMQ. It defines adapters for ActionScript and JMS, specifies default channels, and sets up a destination for inbound SMS messages using dynamic topics. Key properties include the connection factory, destination JNDI name, and initial context environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/blazeds.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<service id=\"message-service\" class=\"flex.messaging.services.MessageService\">\n\n   <adapters>\n       <adapter-definition id=\"actionscript\" class=\"flex.messaging.services.messaging.adapters.ActionScriptAdapter\" default=\"true\" />\n       <adapter-definition id=\"jms\" class=\"flex.messaging.services.messaging.adapters.JMSAdapter\"/>\n   </adapters>\n\n   <default-channels>\n               <channel ref=\"my-streaming-amf\"/>\n               <channel ref=\"my-polling-amf\"/>\n   </default-channels>\n\n  <destination id=\"inbound-sms-destination\">\n\n   <properties>\n   <jms>\n     <destination-type>Topic</destination-type>\n     <message-type>javax.jms.TextMessage</message-type>\n     <connection-factory>topicConnectionFactory</connection-factory>\n     <destination-jndi-name>dynamicTopics/SMSReturnMessages</destination-jndi-name>\n\n     <delivery-mode>NON_PERSISTENT</delivery-mode>\n     <message-priority>DEFAULT_PRIORITY</message-priority>\n     <acknowledge-mode>AUTO_ACKNOWLEDGE</acknowledge-mode>\n     <initial-context-environment>\n       <property>\n         <name>Context.INITIAL_CONTEXT_FACTORY</name>\n         <value>org.apache.activemq.jndi.ActiveMQInitialContextFactory</value>\n       </property>\n       <property>\n         <name>Context.PROVIDER_URL</name>\n         <value>vm://localhost</value>\n\n       </property>\n     </initial-context-environment>\n   </jms>\n   </properties>\n   <adapter ref=\"jms\"/>\n   </destination>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Nested Object Encoding Structure\nDESCRIPTION: This snippet illustrates the structure of nested-object encoding in OpenWire when the nested object is not null. It comprises a 'not-null' byte, a 'type' byte, and variable-sized 'command-specific-fields'. If the nested object is null, it encodes to a single \"0\" byte.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n             [=If not-null is 1===================]\n+----------+ [ +------+-------------------------+ ]\n| not-null | [ | type | command-specific-fields | ]\n+----------+ [ +------+-------------------------+ ]\n| byte     | [ | byte | variable sized          | ]\n+----------+ [ +------+-------------------------+ ]\n             [====================================]\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Broker with Custom XML (AMQ 4.x)\nDESCRIPTION: These commands demonstrate how to start an ActiveMQ Classic broker with a custom XML configuration file using the `activemq` command-line tool (AMQ 4.x).  It uses the XBean configuration mechanism. The first uses a config file in the classpath, the second uses the file path system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nactivemq xbean:myConfig.xml\n```\n\nLANGUAGE: bash\nCODE:\n```\nactivemq xbean:file:../conf/myConfig.xml\n```\n\n----------------------------------------\n\nTITLE: Example java.lang.NoSuchMethodError\nDESCRIPTION: This code snippet demonstrates a common `java.lang.NoSuchMethodError` that arises when using an older JMS API version (1.0.2b). The error occurs because the `createConsumer` method signature changed in JMS 1.1 to accept a `Destination` object directly.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javalangnosuchmethoderror.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njava.lang.NoSuchMethodError:\njavax.jms.Session.createConsumer(Ljavax/jms/Destination;)Ljavax/jms/MessageConsumer;\n```\n\n----------------------------------------\n\nTITLE: Create Resource Adapter Configuration in SJSAS (asadmin)\nDESCRIPTION: This command creates a resource adapter configuration in SJSAS using the asadmin tool. It sets various properties for the GenericJMSRA, including connection factory class names, transaction support, and connection factory properties (broker URL).  Note that all properties should be entered without any spaces around ':'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasadmin create-resource-adapter-config \\\n  --property \\\n      SupportsXA=false\\\n      :RMPolicy=OnePerPhysicalConnection\\\n      :ProviderIntegrationMode=javabean\\\n      :ConnectionFactoryClassName=org.apache.activemq.ActiveMQConnectionFactory\\\n      :QueueConnectionFactoryClassName=org.apache.activemq.ActiveMQConnectionFactory\\\n      :TopicConnectionFactoryClassName=org.apache.activemq.ActiveMQConnectionFactory\\\n      :XAConnectionFactoryClassName=org.apache.activemq.ActiveMQXAConnectionFactory\\\n      :XAQueueConnectionFactoryClassName=org.apache.activemq.ActiveMQXAConnectionFactory\\\n      :XATopicConnectionFactoryClassName=org.apache.activemq.ActiveMQXAConnectionFactory\\\n      :UnifiedDestinationClassName=org.apache.activemq.command.ActiveMQDestination\\\n      :QueueClassName=org.apache.activemq.command.ActiveMQQueue\\\n      :TopicClassName=org.apache.activemq.command.ActiveMQTopic\\\n      :ConnectionFactoryProperties=brokerURL\\\\\\=tcp\\\\\\://127.0.0.1\\\\\\:61616\\\n      :LogLevel=FINE\\\n  myapp#genericra\n```\n\n----------------------------------------\n\nTITLE: Consuming a Large Message via InputStream in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to consume a large message using an InputStream in ActiveMQ Classic. It creates an InputStream associated with a destination queue, reads the stream data, and then closes the stream. Requires an ActiveMQConnection and a Destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-streams.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnection connection = ...;\nDestination destination = new ActiveMQQueue(\"FOO.BAR\");\n\nInputStream in = connection.createInputStream(destination)\n\n// read the stream...\nin.close();\n```\n\n----------------------------------------\n\nTITLE: Controller Test Execution via Maven\nDESCRIPTION: This command initiates the test execution within a Maven project. It typically involves running JUnit tests which then coordinate and manage other processes, such as starting brokers, producers, and consumers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/example-testing-scenario.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Enabling Command Agent in ActiveMQ Classic Configuration (XML)\nDESCRIPTION: This XML snippet demonstrates how to enable the Command Agent in the ActiveMQ Classic broker configuration file (activemq.xml or a Spring configuration file). It involves adding a `<commandAgent>` element and ensuring the `<managementContext>` is properly configured within the `<broker>` element.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/command-agent.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans>\n  <broker useJmx=\"true\" xmlns=\"http://activemq.apache.org/schema/core\">\n    ...\n        <managementContext>\n            <managementContext createConnector=\"true\"/>\n        </managementContext>\n    ...\n  </broker>\n\n  <commandAgent xmlns=\"http://activemq.apache.org/schema/core\"/>\n  ...\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Empty Network Connector Configuration\nDESCRIPTION: This snippet shows an empty network connectors configuration. This signifies that the specified broker, in this case 'srv-b.mydomain.com', will not use any network connectors and thus will not attempt to discover or connect to other brokers automatically. This is often used when a broker should only be connected to directly, or when network connections are managed externally.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ldap-broker-discovery-mechanism.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"srv-b.mydomain.com\" ...>\n   ...\n\n   <networkConnectors/>\n      <!-- NO NETWORK CONNECTORS -->\n   </networkConnectors>\n\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: JAR the Java glue code\nDESCRIPTION: Creates a JAR archive of the compiled MQAdapter.class file.  This packages the Java adapter code for use in the next steps.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nfastjar cf MQAdapter.jar MQAdapter.class\n```\n\n----------------------------------------\n\nTITLE: Enabling AMQP over SSL in ActiveMQ Classic\nDESCRIPTION: This XML snippet illustrates how to configure ActiveMQ Classic to use AMQP over an SSL connection for enhanced security. The `amqp+ssl` transport scheme enables SSL encryption for AMQP traffic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/amqp.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"amqp+ssl\" uri=\"amqp+ssl://localhost:5671\"/>\n```\n\n----------------------------------------\n\nTITLE: Check Apollo Broker Service Status Bash\nDESCRIPTION: Command to check the status of the ActiveMQ Apollo broker service on Unix-like systems.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service status\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic (Unix)\nDESCRIPTION: This command starts the ActiveMQ Classic broker from the installation directory in a Unix command shell. The second option redirects standard output and standard error to a log file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq OR bin/activemq &gt; /tmp/smlog 2&gt;&amp;1 &amp;; Note: /tmp/smlog may be changed to another file name.\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to add the ActiveMQ Classic 5.15.2 dependency to a Maven project using the activemq-all artifact. This is the simplest way to include all ActiveMQ Classic components in your project. If more fine-grained control is needed, individual components like activemq-client or activemq-broker can be specified.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-02.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Example Log Output with ActiveMQ Classic MDC\nDESCRIPTION: This snippet provides example log output when using MDC logging in ActiveMQ Classic. The output demonstrates how the broker name, connector address, and destination are incorporated into each log message, aiding in debugging and monitoring.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mdc-logging.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2011-03-23 13:51:04,919 [127.0.0.1:58146] - TRACE Queue                          - broker-3B  tcp://localhost:6111                      - Message ID:dejan-bosanacs-macbook-pro....\n2011-03-23 13:51:04,935 [oker-3B] Task-1] - DEBUG Queue                          - broker-3B  tcp://localhost:6111 PROD.FUSESOURCE.3.B  - PROD.FUSESOURCE.3.B toPageIn: 1, Inflight...\n2011-03-23 13:51:04,763 [oker-2A] Task-1] - TRACE AbstractStoreCursor            - broker-2A  vm://broker-2A       PROD.FUSESOURCE.3.B  - QueueStorePrefetch611939300 - fillBatch\n2011-03-23 13:51:04,759 [127.0.0.1:58118] - TRACE Queue                          - broker-3A  tcp://localhost:6110                      - Message ID:dejan-bosanacs-macbook-pro.l...\n2011-03-23 13:51:04,937 [oker-2A] Task-1] - TRACE NetworkBridgeFilter            - broker-2A  vm://broker-2A       PROD.FUSESOURCE.3.B  - Message all ready routed once through t...\n2011-03-23 13:51:04,936 [oker-3B] Task-1] - TRACE AbstractStoreCursor            - broker-3B  tcp://localhost:6111 PROD.FUSESOURCE.3.B  - QueueStorePrefetch2047424752 - fillBatch\n2011-03-23 13:51:04,941 [oker-2A] Task-2] - DEBUG DemandForwardingBridgeSupport  - broker-2A                                            - bridging (broker-2A -> broker-1B, consu...\n```\n\n----------------------------------------\n\nTITLE: JXTA Transport Configuration in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the JXTA transport for peer-based JMS network creation in ActiveMQ Classic. JXTA handles NAT traversal and firewall negotiation. It currently requires at least one server for all peers to connect through.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/topologies.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\njxta://hostname:port\n```\n\n----------------------------------------\n\nTITLE: Prefetch Rate Pending Message Limit Strategy Configuration\nDESCRIPTION: This XML snippet configures a PrefetchRatePendingMessageLimitStrategy.  The `multiplier` attribute specifies a factor that, when multiplied by the consumer's prefetch size, determines the maximum number of pending messages to keep. This allows the pending message limit to scale with the prefetch size. In this example, the multiplier is set to 2.5.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-consumer-handling.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<prefetchRatePendingMessageLimitStrategy multiplier=\"2.5\"/>\n```\n\n----------------------------------------\n\nTITLE: Acknowledge Message\nDESCRIPTION: Acknowledges that a message has been processed by deleting the message URI. A DELETE request to the message URI (messageUri) returns a 200 OK response.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE messageUri\n-------------------->\n\n200 OK\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Quick Build with Maven 1\nDESCRIPTION: This snippet demonstrates how to perform a quick build of ActiveMQ Classic using Maven 1. It skips the execution of tests to expedite the build. This is specifically for ActiveMQ Classic versions 4.0.x and older. Make sure Maven 1 is installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/building.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmaven -Dmaven.test.skip.exec=true\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with Durable Topic Subscribers via ActiveMQ CLI\nDESCRIPTION: This command consumes messages using durable topic subscribers with the ActiveMQ Classic command-line tool. The `--durable true` parameter enables durable subscriptions, `--clientId` specifies the client ID, and `--destination` specifies the topic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq consumer --durable true --clientId example --destination topic://TEST\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration (XML)\nDESCRIPTION: This XML snippet shows the Maven dependency configuration required to include the ActiveMQ Classic 5.10.2 `activemq-all` artifact in a Maven project. This is the simplest way to add ActiveMQ to your project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-02.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.10.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Queue - ActiveMQ\nDESCRIPTION: A temporary queue is created using `session.createTemporaryQueue()`.  This destination is only valid for the lifetime of the connection.  It is often used in request-reply messaging patterns.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nDestination replyDest = session.createTemporaryQueue();\n```\n\n----------------------------------------\n\nTITLE: Initializing Failover Connection with ActiveMQConnectionFactory in C++\nDESCRIPTION: This snippet demonstrates how to create an ActiveMQConnectionFactory instance to connect to a broker using the Failover transport. It configures the connection with multiple TCP URIs and sets connection.useAsyncSend=true for asynchronous message sending.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/configuring.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ncf = new ActiveMQConnectionFactory(\n    \"failover://(tcp://localhost:61616,tcp://anotherhost:61616)?connection.useAsyncSend=true\");\n```\n\n----------------------------------------\n\nTITLE: Listing All Running ActiveMQ Brokers in a Specified JMX Context\nDESCRIPTION: This example demonstrates listing the names of all running ActiveMQ Classic brokers within a specified JMX context. It uses a custom JMX URL to connect to a remote broker and list all brokers registered there.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin list --jmxurl service:jmx:rmi:///jndi/rmi://remotehost:1099/jmxrmi\n```\n\n----------------------------------------\n\nTITLE: Configuring Activation Spec in ejb-jar.xml (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure Activation Spec properties within the ejb-jar.xml deployment descriptor for an MDB. It shows setting the destination (queue.testQueue) and destinationType (javax.jms.Queue) using <activation-config-property> elements within the <activation-config> section of a <message-driven> bean.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activation-spec-properties.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activation-config>\n    <activation-config-property>\n       <activation-config-property-name>destination</activation-config-property-name>\n       <activation-config-property-value>queue.testQueue</activation-config-property-value>\n    </activation-config-property>\n    <activation-config-property>\n       <activation-config-property-name>destinationType</activation-config-property-name>\n       <activation-config-property-value>javax.jms.Queue</activation-config-property-value>\n    </activation-config-property>\n</activation-config>\n```\n\n----------------------------------------\n\nTITLE: Configuring TransportConnector with enableStatusMonitor\nDESCRIPTION: This snippet demonstrates how to configure a TransportConnector in ActiveMQ Classic with the enableStatusMonitor option set to true. This allows monitoring of connections to determine if they are blocked. The example uses the 'openwire' name and 'tcp://' URI scheme.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-transports.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n   <!-- ... -->\n\n   <transportConnectors>\n     <transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616\" enableStatusMonitor=\"true\"/> \n   </<transportConnectors>\n\n   <!-- ... -->\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultIOExceptionHandler in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to configure the DefaultIOExceptionHandler in ActiveMQ Classic. It defines a bean for the handler and sets the `ignoreAllErrors` property to true. The broker is then configured to use this handler by referencing the bean id.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configurable-ioexception-handling.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"ioExceptionHandler\" class=\"org.apache.activemq.util.DefaultIOExceptionHandler\">\n  <property name=\"ignoreAllErrors\"><value>true</value></property>\n</bean>\n\n<broker xmlns=\"http://activemq.apache.org/schema/core\" ioExceptionHandler=\"#ioExceptionHandler\">\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatch Async at ConnectionFactory C#\nDESCRIPTION: This snippet demonstrates how to configure the dispatchAsync setting at the ConnectionFactory level. Setting DispatchAsync to false will cause consumers created using this factory to receive messages synchronously by default, unless overridden at a lower level.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/consumer-dispatch-async.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconnectionFactory.DispatchAsync = false;\n```\n\n----------------------------------------\n\nTITLE: STOMP Send Frame to Queue\nDESCRIPTION: This shows a basic STOMP frame used to send a message to a queue. The destination header specifies the target queue.  This is used to send messages to the '/queue/a' queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSEND\ndestination:/queue/a\n\nhello queue a\n^@\n```\n\n----------------------------------------\n\nTITLE: Creating ConnectionFactory with Embedded Broker (Java)\nDESCRIPTION: This snippet demonstrates how to create a JMS ConnectionFactory that automatically creates an embedded ActiveMQ Classic broker with persistence disabled. This is useful for unit testing JMS code without requiring a separate broker process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Network Connector in Older ActiveMQ (pre 5.6)\nDESCRIPTION: This snippet configures a static network connector in older versions of ActiveMQ Classic (prior to 5.6). It sets the `destinationFilter` to an unused advisory topic to prevent the broker from receiving information about remote broker consumers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"static:(tcp://host)\" destinationFilter=\"NO_DESTINATION\">\n        <staticallyIncludedDestinations>\n      \t\t<queue physicalName=\"always.include.queue\"/>\n        </staticallyIncludedDestinations>\n</networkConnector>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic with nohup (Unix)\nDESCRIPTION: This command starts the ActiveMQ Classic broker on Unix-like systems, ensuring that it continues running even after the user logs out.  Standard output and standard error are redirected to `/tmp/smlog`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnohup bin/activemq > /tmp/smlog 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: JBoss Datasource Configuration XML\nDESCRIPTION: This XML configuration defines JMS QueueConnectionFactory and TopicConnectionFactory resources within the JBoss application server, making them accessible through JNDI. It also defines AdminObjects for specifying a topic and a queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE connection-factories\n    PUBLIC \"-//JBoss//DTD JBOSS JCA Config 1.5//EN\"\n    \"http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd\">\n\n<connection-factories>\n\n   <tx-connection-factory>\n      <jndi-name>activemq/QueueConnectionFactory</jndi-name>\n      <xa-transaction/>\n      <track-connection-by-tx/>\n      <rar-name>activemq-ra.rar</rar-name>\n      <connection-definition>javax.jms.QueueConnectionFactory</connection-definition>\n      <ServerUrl>vm://localhost</ServerUrl>\n      <!--\n      <UserName>sa</UserName>\n      <Password></Password>\n      -->\n      <min-pool-size>1</min-pool-size>\n      <max-pool-size>200</max-pool-size>\n      <blocking-timeout-millis>30000</blocking-timeout-millis>\n      <idle-timeout-minutes>3</idle-timeout-minutes>\n   </tx-connection-factory>\n\n   <tx-connection-factory>\n      <jndi-name>activemq/TopicConnectionFactory</jndi-name>\n      <xa-transaction/>\n      <track-connection-by-tx/>\n      <rar-name>activemq-ra.rar</rar-name>\n      <connection-definition>javax.jms.TopicConnectionFactory</connection-definition>\n      <ServerUrl>vm://localhost</ServerUrl>\n      <!--\n      <UserName>sa</UserName>\n      <Password></Password>\n      -->\n      <min-pool-size>1</min-pool-size>\n      <max-pool-size>200</max-pool-size>\n      <blocking-timeout-millis>30000</blocking-timeout-millis>\n      <idle-timeout-minutes>3</idle-timeout-minutes>\n   </tx-connection-factory>\n\n   <mbean code=\"org.jboss.resource.deployment.AdminObject\" name=\"activemq.queue:name=outboundQueue\">\n      <attribute name=\"JNDIName\">activemq/queue/outbound</attribute>\n      <depends optional-attribute-name=\"RARName\">jboss.jca:service=RARDeployment,name='activemq-ra.rar'</depends>\n      <attribute name=\"Type\">javax.jms.Queue</attribute>\n      <attribute name=\"Properties\">PhysicalName=queue.outbound</attribute>\n   </mbean>\n\n   <mbean code=\"org.jboss.resource.deployment.AdminObject\" name=\"activemq.topic:name=inboundTopic\">\n      <attribute name=\"JNDIName\">activemq/topic/inbound</attribute>\n      <depends optional-attribute-name=\"RARName\">jboss.jca:service=RARDeployment,name='activemq-ra.rar'</depends>\n      <attribute name=\"Type\">javax.jms.Topic</attribute>\n      <attribute name=\"Properties\">PhysicalName=topic.inbound</attribute>\n   </mbean>\n\n</connection-factories>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Installation Directory (Unix)\nDESCRIPTION: This command changes the current directory to the ActiveMQ Classic installation directory in a Unix command shell.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]\n```\n\n----------------------------------------\n\nTITLE: Checking ActiveMQ Port (Windows)\nDESCRIPTION: This command checks if ActiveMQ Classic is running by searching for connections on the default port 61616 using `netstat`. The output is filtered using `find` to display only lines containing \"61616\".\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnetstat -an|find \"61616\"\n```\n\n----------------------------------------\n\nTITLE: Running JMX Console (Shell)\nDESCRIPTION: This snippet demonstrates how to launch the JMX console from the command line. The `jconsole` command starts the Java Monitoring and Management Console, which can then be used to connect to and monitor ActiveMQ Classic brokers that have JMX enabled. This command assumes that `jconsole` is in the system's PATH.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ jconsole\n```\n\n----------------------------------------\n\nTITLE: Starting a Blaze Channel in Java\nDESCRIPTION: This code snippet demonstrates how to start a Blaze Channel, which implicitly initializes the channel if it hasn't been already. The `start()` method initiates the underlying communication with its peers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/life-cycle.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBlazeChannelFactory factory = new BlazeChannelFactory();\nBlazeChannel channel = factory.createChannel();\nchannel.start();\n```\n\n----------------------------------------\n\nTITLE: Example Connections Data Response\nDESCRIPTION: An example JSON response showing a page of connection data, including connection IDs, states, and other relevant information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\":0,\n  \"page_size\":100,\n  \"total_pages\":1,\n  \"total_rows\":2,\n  \"headers\":[\n    \"*\"\n  ],\n  \"rows\":[\n    {\n      \"id\":\"4\",\n      \"state\":\"STARTED\",\n      \"state_since\":1306848325102,\n      \"read_counter\":103,\n      \"write_counter\":239110628,\n      \"connector\":\"tcp\",\n      \"protocol\":\"stomp\",\n      \"remote_address\":\"/127.0.0.1:61775\",\n      \"protocol_version\":\"1.0\",\n      \"user\":\"admin\",\n      \"waiting_on\":\"client request\",\n      \"subscription_count\":1\n    },\n    {\n      \"id\":\"5\",\n      \"state\":\"STARTED\",\n      \"state_since\":1306848325102,\n      \"read_counter\":227739229,\n      \"write_counter\":113,\n      \"connector:\"tcp\",\n      \"protocol\":\"stomp\",\n      \"remote_address\":\"/127.0.0.1:61776\",\n      \"protocol_version\":\"1.0\",\n      \"user\":\"admin\",\n      \"waiting_on\":\"blocked sending to: org.apache.activemq.apollo.broker.Queue$$anon$1@13765e9b\",\n      \"subscription_count\":0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing from Tail of Queue - STOMP\nDESCRIPTION: This example demonstrates subscribing to a queue and receiving only new messages (skipping existing messages) by setting `from-seq` to `-1` in the `SUBSCRIBE` frame.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_19\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\ndestination:/queue/foo\nfrom-seq:-1\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variable (Bash)\nDESCRIPTION: This command sets the `ACTIVEMQ_ENCRYPTION_PASSWORD` environment variable. This variable is used by Jasypt to decrypt the passwords stored in the properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/encrypted-passwords.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ export ACTIVEMQ_ENCRYPTION_PASSWORD=activemq\n```\n\n----------------------------------------\n\nTITLE: Stopping Multiple ActiveMQ Brokers by Name (Default JMX Context)\nDESCRIPTION: This example demonstrates how to stop multiple ActiveMQ Classic brokers by their names within the default JMX context. The 'localhost' and 'remotehost' parameters specify the names of the brokers to stop.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin stop localhost remotehost\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Single Broker Configuration (XML)\nDESCRIPTION: This XML configuration defines a single ActiveMQ Classic broker named 'MyBroker'. It includes settings for JMX management, shutdown hook, and plugins for WebLogic security integration. The persistence adapter is configured to use an embedded Derby database, and a transport connector is set up for TCP communication.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://activemq.org/config/1.0\">\n  <!-- Allows us to use system properties as variables in this configuration file -->\n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n  \n  <broker useJmx=\"true\" brokerName=\"MyBroker\" useShutdownHook=\"false\"\n          plugins=\"#WebLogicSecurity\">\n\n    <!-- Register all ActiveMQ Classic MBeans with the WebLogic runtime MBeanServer -->\n    <managementContext>\n      <managementContext>\n          <MBeanServer>\n             <bean class=\"org.springframework.jndi.JndiObjectFactoryBean\" xmlns=\"\">\n                <property name=\"jndiName\" value=\"java:comp/env/jmx/runtime\" />\n                <property name=\"lookupOnStartup\" value=\"true\" />\n                <property name=\"expectedType\" value=\"javax.management.MBeanServer\" />\n             </bean>\n          </MBeanServer>\n      </managementContext>\n    </managementContext>\n  \n    <persistenceAdapter>\n      <!-- By default, use an embedded Derby database -->\n        <journaledJDBC journalLogFiles=\"5\"\n                       dataDirectory=\"/server/bea/weblogic920/domains/jms/activemq-data\"/>\n      <!-- Use this with the WebLogicDataSource below to use a WebLogic\n           database connection pool instead of the embedded Derby database\n        <journaledJDBC journalLogFiles=\"5\"\n                       dataDirectory=\"/server/bea/weblogic920/domains/jms/activemq-data\"\n                       dataSource=\"#WebLogicDataSource\" />\n\n      -->\n    </persistenceAdapter>\n  \n    <transportConnectors>\n        <transportConnector name=\"MyBrokerTCP\" uri=\"tcp://0.0.0.0:61616\" />\n    </transportConnectors>\n  </broker>\n\n  <bean id=\"WebLogicSecurity\"\n        class=\"com.example.activemq.weblogic.ActiveMQToWebLogicSecurity\">\n      <property name=\"authorizedGroup\" value=\"ActiveMQUsers\" />\n  </bean>\n\n<!-- Uncomment and configure this if you want to use a WebLogic database\n     connection pool for persistent messages\n  <bean id=\"WebLogicDataSource\"\n        class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n     <property name=\"jndiName\" value=\"db/pool/jndi/name\"/>\n  </bean>\n-->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic 5.9.0\nDESCRIPTION: This XML snippet defines the Maven dependency configuration required to include ActiveMQ Classic 5.9.0 in a Maven project. It specifies the groupId, artifactId, and version of the ActiveMQ Classic all-in-one artifact. This configuration should be added to the project's pom.xml file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-09-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.9.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sending Text Message from URL Content\nDESCRIPTION: This command sends a text message with content obtained from a URL using the ActiveMQ Classic producer. The `--payloadUrl` option specifies the URL to fetch the content from, and `--messageCount` specifies the number of messages to send.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq producer --payloadUrl http://activemq.apache.org/schema/core/activemq-core.xsd --messageCount 1\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Admin Bstat Task Usage\nDESCRIPTION: Illustrates the syntax for using the `activemq-admin bstat` command to display useful statistics regarding a broker and its components.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n_activemq-admin bstat_ [broker name]\n```\n\n----------------------------------------\n\nTITLE: JNDI Dynamic Destination Lookup (Java)\nDESCRIPTION: This shows an example of looking up a destination via JNDI, using dynamic destinations. This is useful as part of testing, as it avoids hardcoding the destination names.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncontext.lookup(\"dynamicQueues/FOO.BAR\");\n```\n\n----------------------------------------\n\nTITLE: Send to Queue (Single Request)\nDESCRIPTION: Sends a message to a queue using a single request by providing a client-generated unique GUID. A POST request to the queue's URL, including the guid parameter (/queues/foo.bar?guid=clientGeneratedUniqueId), returns a 200 OK response if the message is successfully queued, and the server ignores duplicates based on the GUID.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /queues/foo.bar?guid=clientGeneratedUniqueId\n-------------------->\n\n200 OK\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Network Connector - Larger Network\nDESCRIPTION: This snippet configures an LDAP network connector for a larger network of ActiveMQ Classic brokers. It includes the LDAP server URI, base DN, anonymous authentication, search filter, search scope, and a network TTL (Time To Live).  The networkTTL parameter limits the propagation of messages to prevent routing loops in complex topologies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ldap-broker-discovery-mechanism.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"srv-a.mydomain.com\" ...>\n   ...\n\n   <networkConnectors>\n      <ldapNetworkConnector uri=\"ldap://myldap.mydomain.com:389\"\n                            base=\"dc=brokers-for-srv-a,dc=mydomain,dc=com\"\n                            anonymousAuthentication=\"true\"\n                            searchFilter=\"(cn=*)\"\n                            searchScope=\"SUBTREE_SCOPE\"\n                            networkTTL=\"2\"\n                            />\n      <!-- networkTTL=2 since we want messages to flow from srv-a to srv-c -->\n   </networkConnectors>\n\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic using activemq script\nDESCRIPTION: This snippet demonstrates how to start the ActiveMQ Classic broker using the 'activemq' script with the default configuration.  It's the simplest way to launch the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nactivemq\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP (Alternative)\nDESCRIPTION: These commands are used as an alternative way to verify the integrity of downloaded files using PGP signatures. It involves importing the KEYS file and then verifying the signature file against the downloaded file. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-00.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtered Destinations\nDESCRIPTION: This snippet configures filtered destinations within a composite queue. Messages sent to `MY.QUEUE` are forwarded to `FOO` if the `odd` property is `yes` and to `BAR` if the `i` property is `5`. Selectors are used to conditionally route messages to different destinations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/virtual-destinations.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors>\n  <virtualDestinationInterceptor>\n    <virtualDestinations>\n      <compositeQueue name=\"MY.QUEUE\">\n        <forwardTo>\n          <filteredDestination selector=\"odd = 'yes'\" queue=\"FOO\"/>\n          <filteredDestination selector=\"i = 5\" topic=\"BAR\"/>\n        </forwardTo>\n      </compositeQueue>\n    </virtualDestinations>\n  </virtualDestinationInterceptor>\n</destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: Excluding Destinations in Network Connector\nDESCRIPTION: This snippet shows how to configure a network connector to exclude forwarding messages on specific queues. It excludes forwarding messages on queues matching the pattern `Consumer.*.VirtualTopic.>`, preventing duplicate messages in a network of brokers when using both queue-based and topic-based subscribers to the virtual topic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/virtual-destinations.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors>\n  <networkConnector uri=\"static://(tcp://localhost:61617)\">\n    <excludedDestinations>\n      <queue physicalName=\"Consumer.*.VirtualTopic.>\"/>\n    </excludedDestinations>\n  </networkConnector>\n</networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Initializing ActiveMQConnectionFactory with URI Parameters in C++\nDESCRIPTION: This snippet demonstrates how to initialize an ActiveMQConnectionFactory with URI-encoded parameters to configure the connection.  The URI specifies the connection protocol (tcp), host, port, and wire format options. These options enable tight encoding for optimized wire size.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-activemq-cpp.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ncf = new ActiveMQConnectionFactory(\n    \"tcp://localhost:61616?wireFormat=openwire&wireFormat.tightEncodingEnabled=true\");\n```\n\n----------------------------------------\n\nTITLE: Enabling JMSXUserID via XML Configuration\nDESCRIPTION: This snippet shows how to enable the populateJMSXUserID property on the ActiveMQ broker using XML configuration. This configuration setting instructs the broker to include the JMSXUserID property in JMS messages, indicating the authenticated sender.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmsxuserid.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.org/config/1.0\" populateJMSXUserID=\"true\">\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic with Configured Plugin\nDESCRIPTION: This command executes the ActiveMQ Classic Maven plugin configured in the pom.xml. It assumes the plugin is configured with advanced features like Spring and Camel support.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/maven2-activemq-broker-plugin.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nmvn activemq:run\n```\n\n----------------------------------------\n\nTITLE: Creating Topic with Consumer Options in ActiveMQ (C++)\nDESCRIPTION: This snippet demonstrates how to create a topic in ActiveMQ using the `createTopic` method and configure consumer options via URI parameters. It sets the `prefetchSize` and `noLocal` options for the consumer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/configuring.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nd = session->createTopic(\"com.foo?consumer.prefetchSize=2000&consumer.noLocal=true\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Context for Secure WebSockets in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures the SSL context required for the secure WebSocket transport in ActiveMQ Classic.  It specifies the location and password for the keystore and truststore files. It depends on the `activemq.conf` variable being correctly set.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/websockets.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<sslContext>\n    <sslContext keyStore=\"file:${activemq.conf}/broker.ks\"\n                keyStorePassword=\"password\" trustStore=\"file:${activemq.conf}/broker.ts\"\n                trustStorePassword=\"password\"\n    />\n</sslContext>\n```\n\n----------------------------------------\n\nTITLE: Extending Data Model - Module Class Scala\nDESCRIPTION: This snippet shows how to extend the Apollo data model by creating a custom module class. The module class specifies the DTO package and any extension classes to be included in the data model.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\npackage org.example\nimport org.apache.activemq.apollo.util.DtoModule\n\nclass Module extends DtoModule {\n\n  def dto_package = \"org.apache.activemq.apollo.broker.store.leveldb.dto\"\n  def extension_classes = Array(classOf[LevelDBStoreDTO], classOf[LevelDBStoreStatusDTO])\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TCP Connection with ActiveMQConnectionFactory in C++\nDESCRIPTION: This snippet shows how to create an ActiveMQConnectionFactory instance to connect to a broker using the TCP transport. It configures the connection with wireFormat=openwire and wireFormat.tightEncodingEnabled=true.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/configuring.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ncf = new ActiveMQConnectionFactory(\n    \"tcp://localhost:61616?wireFormat=openwire&wireFormat.tightEncodingEnabled=true\");\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Durable Subscription - STOMP\nDESCRIPTION: This example demonstrates how to send a message directly to a durable subscription using the `/dsub/` prefix on the `destination` header in a STOMP `SEND` frame.  This delivers a message to the queue backing the named durable subscription.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_11\n\nLANGUAGE: STOMP\nCODE:\n```\nSEND\ndestination:/dsub/mysub\n\nhello durable sub!\n^@\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Maven Dependency - XML\nDESCRIPTION: This XML snippet defines a Maven dependency for the activemq-all artifact, which is an uber jar containing all ActiveMQ components. This dependency can be added to a Maven project's pom.xml file to include ActiveMQ in the project. The version specified is 5.13.4.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-04.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.13.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic\nDESCRIPTION: This snippet shows the Maven dependency configuration required to include ActiveMQ Classic 5.10.0 in a Maven project.  It adds the `activemq-all` artifact, which is an uber JAR containing all ActiveMQ components, as a dependency. Alternatively, individual components can be included for finer-grained control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-00.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.10.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQ Persistence Adapter in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows the configuration of the AMQ persistence adapter using a shared directory for data storage. This setup supports a master/slave configuration where brokers share the same data on a shared file system. The `directory` attribute defines the path to the shared directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shared-file-system-master-slave.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n  <amqPersistenceAdapter directory=\"/sharedFileSystem/sharedBrokerData\"/>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL using 'ttl' Header - STOMP\nDESCRIPTION: This example demonstrates setting a message's time-to-live (TTL) using the `ttl` header in a STOMP `SEND` frame. The `ttl` header specifies the number of milliseconds from when the server receives the message until it expires. The broker adds an `expires` header automatically based on this TTL value.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_7\n\nLANGUAGE: STOMP\nCODE:\n```\nSEND\ndestination:/queue/a\nttl:2000\n\nThis message will expire in 2 seconds.\n^@\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven settings.xml\nDESCRIPTION: This XML snippet configures the Maven settings.xml file to set file and directory permissions for deployed artifacts. It ensures that deployed artifacts are group writeable, allowing other developers to overwrite SNAPSHOT releases. The snippet includes server configurations for snapshots, releases, website deployment and staging.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n  ...\n  <servers>\n\n    <server>\n      <id>apache.snapshots.https</id>\n      <username>dejanb</username>\n    </server>\n    <!\\-\\- To publish a website of some part of Maven -->\n    <server>\n      <id>apache.website</id>\n      <username>dejanb</username>\n      <filePermissions>664</filePermissions>\n      <directoryPermissions>775</directoryPermissions>\n    </server>\n    <!\\-\\- To stage a release of some part of Maven -->\n    <server>\n      <id>apache.releases.https</id>\n      <username>dejanb</username>\n    </server>\n    <!\\-\\- To stage a website of some part of Maven -->\n    <server>\n      <id>stagingSite</id> <!-- must match hard-coded repository identifier in site:stage-deploy -->\n      <username>dejanb</username>\n      <filePermissions>664</filePermissions>\n      <directoryPermissions>775</directoryPermissions>\n    </server>\n\n  </servers>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Starting JBoss Server - Shell\nDESCRIPTION: These commands are used to start the JBoss application server with the 'default' configuration.  It involves navigating to the JBoss installation directory and executing the `run.sh` script with the `-c default` option. This script initializes and starts the JBoss server instance.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd jboss-4.0.4.GA\n$ ./bin/run.sh -c default\n=========================================================================\n\n  JBoss Bootstrap Environment\n\n  JBOSS_HOME: /opt/jboss-4.0.4.GA\n\n  JAVA: java\n\n  JAVA_OPTS: -server -Xms128m -Xmx512m -Dsun.rmi.dgc.client.gcInterval=3600000 \n-Dsun.rmi.dgc.server.gcInterval=3600000 -Dprogram.name=run.sh\n\n  CLASSPATH: /opt/jboss-4.0.4.GA/bin/run.jar:/lib/tools.jar\n\n=========================================================================\n\n15:34:47,999 INFO  [Server] Starting JBoss (MX MicroKernel)...\n15:34:48,001 INFO  [Server] Release ID: JBoss [Zion] 4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)\n15:34:48,004 INFO  [Server] Home Dir: /opt/jboss-4.0.4.GA\n15:34:48,005 INFO  [Server] Home URL: file:/opt/jboss-4.0.4.GA/\n15:34:48,007 INFO  [Server] Patch URL: null\n15:34:48,007 INFO  [Server] Server Name: default\n15:34:48,007 INFO  [Server] Server Home Dir: /opt/jboss-4.0.4.GA/server/default\n15:34:48,011 INFO  [Server] Server Home URL: file:/opt/jboss-4.0.4.GA/server/default/\n15:34:48,012 INFO  [Server] Server Log Dir: /opt/jboss-4.0.4.GA/server/default/log\n15:34:48,017 INFO  [Server] Server Temp Dir: /opt/jboss-4.0.4.GA/server/default/tmp\n15:34:48,022 INFO  [Server] Root Deployment Filename: jboss-service.xml\n...\n15:35:17,360 INFO  [Server] JBoss (MX MicroKernel) [4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)] \nStarted in 22s:238ms\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic SSL Connector Configuration\nDESCRIPTION: This XML snippet configures an SSL connector in Jetty to enable secure access to the ActiveMQ Classic Web Console. It defines the port for the secure connector, the keystore location, and the keystore password. It requires the Jetty SSL library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/web-console.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"connectors\">\n    <list>\n        <bean id=\"Connector\" class=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n            <property name=\"port\" value=\"8161\" />\n        </bean>\n        <bean id=\"SecureConnector\" class=\"org.eclipse.jetty.server.ssl.SslSelectChannelConnector\">\n            <property name=\"port\" value=\"8162\" />\n            <property name=\"keystore\" value=\"file:${activemq.conf}/broker.ks\" />\n            <property name=\"password\" value=\"password\" />\n        </bean>\n    </list>\n</property>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Startup Command\nDESCRIPTION: This shell command starts the ActiveMQ Classic broker. The output shows the default logging level is INFO and the various components being initialized. This is a standard startup procedure for ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-the-logging.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./bin/activemq\nACTIVEMQ_HOME: /Users/bsnyder/amq/apache-activemq-5.1.0\nACTIVEMQ_BASE: /Users/bsnyder/amq/apache-activemq-5.1.0\nLoading message broker from: xbean:activemq.xml\nINFO  BrokerService                  - Using Persistence Adapter: AMQPersistenceAdapter(/Users/bsnyder/amq/apache-activemq-5.1.0/data)\nINFO  BrokerService                  - ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting\nINFO  BrokerService                  - For help or more information please see: http://activemq.apache.org/\nINFO  AMQPersistenceAdapter          - AMQStore starting using directory: /Users/bsnyder/amq/apache-activemq-5.1.0/data\nINFO  KahaStore                      - Kaha Store using data directory /Users/bsnyder/amq/apache-activemq-5.1.0/data/kr-store/state\nINFO  AMQPersistenceAdapter          - Active data files: []\nINFO  KahaStore                      - Kaha Store using data directory /Users/bsnyder/amq/apache-activemq-5.1.0/data/kr-store/data\nINFO  TransportServerThreadSupport   - Listening for connections at: tcp://mongoose.local:61616\nINFO  TransportConnector             - Connector openwire Started\nINFO  TransportServerThreadSupport   - Listening for connections at: ssl://mongoose.local:61617\nINFO  TransportConnector             - Connector ssl Started\nINFO  TransportServerThreadSupport   - Listening for connections at: stomp://mongoose.local:61613\nINFO  TransportConnector             - Connector stomp Started\nINFO  TransportServerThreadSupport   - Listening for connections at: xmpp://mongoose.local:61222\nINFO  TransportConnector             - Connector xmpp Started\nINFO  NetworkConnector               - Network Connector default-nc Started\nINFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost, ID:mongoose.local-56138-1224025139259-0:0) started\nINFO  log                            - Logging to org.slf4j.impl.JCLLoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLog\nINFO  log                            - jetty-6.1.9\nINFO  WebConsoleStarter              - ActiveMQ WebConsole initialized.\nINFO  /admin                         - Initializing Spring FrameworkServlet 'dispatcher'\nINFO  log                            - ActiveMQ Console at http://0.0.0.0:8161/admin\nINFO  log                            - ActiveMQ Web Demos at http://0.0.0.0:8161/demo\nINFO  log                            - RESTful file access application at http://0.0.0.0:8161/fileserver\nINFO  log                            - Started SelectChannelConnector@0.0.0.0:8161\nINFO  FailoverTransport              - Successfully connected to tcp://localhost:61616\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker with Maven\nDESCRIPTION: This command downloads the specified version of the ActiveMQ Classic Maven plugin and starts an ActiveMQ Classic broker with a default configuration using a simple configuration URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/maven2-activemq-broker-plugin.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nmvn org.apache.activemq.tooling:maven-activemq-plugin:5.1:run\n```\n\n----------------------------------------\n\nTITLE: Fanout Transport Static URI Example\nDESCRIPTION: Example URI showing how to configure the Fanout transport with a static list of TCP URIs. In this configuration, the client will wait for connections to all three brokers to be established by default.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/fanout-transport-reference.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\nfanout:(static:(tcp://localhost:61629,tcp://localhost:61639,tcp://localhost:61649))\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Deployment Exception\nDESCRIPTION: This code snippet demonstrates a `java.lang.NoSuchMethodException` that occurs during the deployment of the ActiveMQ Classic resource adapter (version 3.0). The exception indicates the absence of the `setUseEmbeddedBroker` method within the `ActiveMQResourceAdapter` class. This issue is resolved by upgrading to ActiveMQ Classic version 3.1-M6 or later.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javalangnosuchmethodexception-orgactivemqraactivemqresourceadaptersetuseembeddedbroker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2005-08-14 17:18:45,618 ERROR [org.jboss.resource.deployment.RARDeployment] Starting failed jboss.jca:service=RARDeployment,name='activemq-ra-3.0.rar' org.jboss.deployment.DeploymentException: Error for resource adapter class org.activemq.ra.ActiveMQResourceAdapter accessing property setter ConfigPropertyMetaData@e62121[name=UseEmbeddedBroker type=java.lang.Boolean value=false descriptions=[DescriptionMetaData@1ad093c[language=en description=Boolean to configure if the connector should create an embedded broker.]]]; - nested throwable: (java.lang.NoSuchMethodException: org.activemq.ra.ActiveMQResourceAdapter.setUseEmbeddedBroker(java.lang.Boolean))\n        at org.jboss.deployment.DeploymentException.rethrowAsDeploymentException(DeploymentException.java:39)\n        at org.jboss.resource.deployment.ResourceAdapterFactory.createResourceAdapter(ResourceAdapterFactory.java:90)\n        at org.jboss.resource.deployment.RARDeployment.startService(RARDeployment.java:101)\n        at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:272)\n        at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:222)\n        at org.jboss.system.ServiceDynamicMBeanSupport.invoke(ServiceDynamicMBeanSupport.java:110)\n        at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:150)\n        at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:644)\n        at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:897)\n```\n\n----------------------------------------\n\nTITLE: Initializing Broker with Lazy Binding in Java\nDESCRIPTION: This Java code snippet showcases lazy binding of the transport connector during the broker's start-up process. It's beneficial when the start() method might block, awaiting a store lock, typically in scenarios involving a slave start. It utilizes a TransportConnector instance to define the URI and then adds it to the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\n\nTransportConnector connector = new TransportConnector();\nconnector.setUri(new URI(\"tcp://localhost:61616\"));\nbroker.addConnector(connector);\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: GCC Configuration\nDESCRIPTION: Configures GCC for compiling Java and C++ code, enabling shared libraries and POSIX threads. This step sets up the environment necessary for building ActiveMQ Classic as a native shared library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd /opt/gccbuild/output\n../gcc-4.0.2/configure --prefix=/opt/gcc402 \\\n                           --enable-shared \\\n                           --enable-threads=posix \\\n                           --enable-languages=c,c++,java\n```\n\n----------------------------------------\n\nTITLE: Spring JNDI ConnectionFactory Lookup\nDESCRIPTION: This Spring bean definition configures a JndiObjectFactoryBean to look up the ConnectionFactory from the JNDI context. It references the jndiTemplate bean and specifies the JNDI name of the ConnectionFactory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"internalJmsQueueConnectionFactory\"\n    class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n    <property name=\"jndiTemplate\">\n        <ref bean=\"jndiTemplate\"/>\n    </property>\n    <property name=\"jndiName\">\n        <value>${jms.connectionFactoryName}</value>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Size for Multiple REST Consumers\nDESCRIPTION: This snippet demonstrates setting the prefetch size to 1 in the `MessageServlet` configuration to ensure fair message distribution among multiple REST consumers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>MessageServlet</servlet-name>       \n    <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n    <init-param>\n            <param-name>destinationOptions</param-name>\n            <param-value>consumer.prefetchSize=1</param-value>\n    </init-param>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Build and Run Integration Tests\nDESCRIPTION: This command navigates to the `systest/itests/client` directory and uses Maven to build and run the integration tests.  The tests verify the functionality of the ActiveMQ Classic Resource Adapter when deployed in Geronimo.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integration-tests.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd systest/itests/client\nmaven\n```\n\n----------------------------------------\n\nTITLE: Running JBoss Application Server\nDESCRIPTION: This snippet illustrates how to start the JBoss application server using a shell script. It includes commands to navigate to the JBoss directory and execute the `run.sh` script with the `default` configuration. Successful startup is indicated by the 'Started in' message.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd jboss-4.0.4.GA\n$ ./bin/run.sh -c default\n=========================================================================\n\n  JBoss Bootstrap Environment\n\n  JBOSS_HOME: /opt/jboss-4.0.4.GA\n\n  JAVA: java\n\n  JAVA_OPTS: -server -Xms128m -Xmx512m -Dsun.rmi.dgc.client.gcInterval=3600000 \n-Dsun.rmi.dgc.server.gcInterval=3600000 -Dprogram.name=run.sh\n\n  CLASSPATH: /opt/jboss-4.0.4.GA/bin/run.jar:/lib/tools.jar\n\n=========================================================================\n\n15:34:47,999 INFO  [Server] Starting JBoss (MX MicroKernel)...\n15:34:48,001 INFO  [Server] Release ID: JBoss [Zion] 4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)\n15:34:48,004 INFO  [Server] Home Dir: /opt/jboss-4.0.4.GA\n15:34:48,005 INFO  [Server] Home URL: file:/opt/jboss-4.0.4.GA/\n15:34:48,007 INFO  [Server] Patch URL: null\n15:34:48,007 INFO  [Server] Server Name: default\n15:34:48,007 INFO  [Server] Server Home Dir: /opt/jboss-4.0.4.GA/server/default\n15:34:48,011 INFO  [Server] Server Home URL: file:/opt/jboss-4.0.4.GA/server/default/\n15:34:48,012 INFO  [Server] Server Log Dir: /opt/jboss-4.0.4.GA/server/default/log\n15:34:48,017 INFO  [Server] Server Temp Dir: /opt/jboss-4.0.4.GA/server/default/tmp\n15:34:48,022 INFO  [Server] Root Deployment Filename: jboss-service.xml\n...\n15:35:17,360 INFO  [Server] JBoss (MX MicroKernel) [4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)] \nStarted in 22s:238ms\n```\n\n----------------------------------------\n\nTITLE: Stopping ActiveMQ Classic as Linux/macOS Daemon\nDESCRIPTION: This snippet describes how to stop the ActiveMQ Classic broker that's running as a daemon in Linux or Unix systems using the activemq script. The script is located in the ACTIVEMQ_HOME/linux or ACTIVEMQ_HOME/macosx directory. Running the script stops the ActiveMQ Classic broker process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/java-service-wrapper.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./activemq stop\n```\n\n----------------------------------------\n\nTITLE: Main Function with ActiveMQ Setup C++\nDESCRIPTION: The `main` function initializes the ActiveMQ CPP library, sets up the producer and consumer threads, and manages their execution.  It configures the broker URI, specifies whether to use topics or queues, and sets the number of messages to be sent. It also handles the proper shutdown of the ActiveMQ CPP library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/example.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc AMQCPP_UNUSED, char* argv[] AMQCPP_UNUSED) {\n\n    activemq::library::ActiveMQCPP::initializeLibrary();\n    {\n    std::cout << \"=====================================================\\n\";\n    std::cout << \"Starting the example:\" << std::endl;\n    std::cout << \"-----------------------------------------------------\\n\";\n\n\n    // Set the URI to point to the IP Address of your broker.\n    // add any optional params to the url to enable things like\n    // tightMarshalling or tcp logging etc.  See the CMS web site for\n    // a full list of configuration options.\n    //\n    //  http://activemq.apache.org/cms/\n    //\n    // Wire Format Options:\n    // =========================\n    // Use either stomp or openwire, the default ports are different for each\n    //\n    // Examples:\n    //    tcp://127.0.0.1:61616                      default to openwire\n    //    tcp://127.0.0.1:61613?wireFormat=stomp     use stomp instead\n    //\n    // SSL:\n    // =========================\n    // To use SSL you need to specify the location of the trusted Root CA or the\n    // certificate for the broker you want to connect to.  Using the Root CA allows\n    // you to use failover with multiple servers all using certificates signed by\n    // the trusted root.  If using client authentication you also need to specify\n    // the location of the client Certificate.\n    //\n    //     System::setProperty( \"decaf.net.ssl.keyStore\", \"<path>/client.pem\" );\n    //     System::setProperty( \"decaf.net.ssl.keyStorePassword\", \"password\" );\n    //     System::setProperty( \"decaf.net.ssl.trustStore\", \"<path>/rootCA.pem\" );\n    //\n    // The you just specify the ssl transport in the URI, for example:\n    //\n    //     ssl://localhost:61617\n    //\n    std::string brokerURI =\n        \"failover:(tcp://localhost:61616)\";\n\n    //============================================================\n    // set to true to use topics instead of queues\n    // Note in the code above that this causes createTopic or\n    // createQueue to be used in both consumer an producer.\n    //============================================================\n    bool useTopics = true;\n    bool sessionTransacted = false;\n    int numMessages = 2000;\n\n    long long startTime = System::currentTimeMillis();\n\n    HelloWorldProducer producer(brokerURI, numMessages, useTopics);\n        HelloWorldConsumer consumer(brokerURI, numMessages, useTopics, sessionTransacted);\n\n    // Start the consumer thread.\n    Thread consumerThread(&consumer);\n    consumerThread.start();\n\n    // Wait for the consumer to indicate that its ready to go.\n    consumer.waitUntilReady();\n\n    // Start the producer thread.\n    Thread producerThread(&producer);\n    producerThread.start();\n\n    // Wait for the threads to complete.\n    producerThread.join();\n    consumerThread.join();\n\n    long long endTime = System::currentTimeMillis();\n    double totalTime = (double)(endTime - startTime) / 1000.0;\n\n    consumer.close();\n    producer.close();\n\n    std::cout << \"Time to completion = \" << totalTime << \" seconds.\" << std::endl;\n    std::cout << \"-----------------------------------------------------\\n\";\n    std::cout << \"Finished with the example.\" << std::endl;\n    std::cout << \"=====================================================\\n\";\n\n    }\n    activemq::library::ActiveMQCPP::shutdownLibrary();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling ShiroPlugin in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to enable or disable the ShiroPlugin in ActiveMQ Classic using the `enabled` property.  You can use Spring's PropertySourcesPlaceholderConfigurer to manage the enabled state via a properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n    <!-- enabled by default.  To disable, uncomment:\n    <property name=\"enabled\" value=\"false\"/> -->\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Customizing EmbeddedActiveMQBroker with XML (Java)\nDESCRIPTION: Demonstrates how to configure EmbeddedActiveMQBroker using an XML configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Rule\nEmbeddedActiveMQBroker customizedBroker = new EmbeddedActiveMQBroker(\"bean:customize-activemq.xml\");\n```\n\n----------------------------------------\n\nTITLE: Configuring invoker-proxy-binding in jboss.xml\nDESCRIPTION: This snippet configures a new `invoker-proxy-binding` in `jboss.xml`, specifying `JBossMessageEndpointFactory` as the `proxy-factory`. This configuration is necessary to use ActiveMQ Classic as the inbound message source for the MDB.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/inbound-communication.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<invoker-proxy-binding>\n   <name>activemq-message-driven-bean</name>\n   <invoker-mbean>default</invoker-mbean>\n   <proxy-factory>org.jboss.ejb.plugins.inflow.JBossMessageEndpointFactory</proxy-factory>\n   ...\n</invoker-proxy-binding>\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer for Temporary Queue - ActiveMQ\nDESCRIPTION: A consumer is created for the temporary queue to receive replies. This consumer listens on the temporary queue specified by `replyDest`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nMessageConsumer replyConsumer = session.createConsumer(replyDest);\n```\n\n----------------------------------------\n\nTITLE: Example Selected Fields Response\nDESCRIPTION: An example JSON response showing only the 'id' and 'read_counter' fields from the connections data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\":0,\n  \"page_size\":100,\n  \"total_pages\":1,\n  \"total_rows\":2,\n  \"headers\":[\n    \"id\",\n    \"read_counter\"\n  ],\n  \"rows\":[\n    [\n      \"7\",\n      110733109\n    ],\n    [\n      \"6\",\n      103\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using GPG signatures. It requires downloading the KEYS file and the asc signature file. gpg is used to import the keys and verify the signature.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-06-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Advanced ActiveMQ Classic Broker Configuration XML\nDESCRIPTION: This XML snippet shows how to configure the ActiveMQ Classic Maven plugin within a pom.xml to use an external configuration file (activemq.xml) and set system properties for SSL and directory prefix.  It also defines dependencies required for Spring, Jetty and Camel support.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/maven2-activemq-broker-plugin.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <build>    \n    <plugins>\n      <plugin>\n        <groupId>org.apache.activemq.tooling</groupId>\n        <artifactId>maven-activemq-plugin</artifactId>\n        <version>5.7.0</version>\n        <configuration>\n          <configUri>xbean:file:../conf/activemq.xml</configUri>\n          <fork>false</fork>\n          <systemProperties>\n            <property>\n              <name>javax.net.ssl.keyStorePassword</name>\n              <value>password</value>\n            </property>\n            <property>\n              <name>org.apache.activemq.default.directory.prefix</name>\n              <value>./target/</value>\n            </property>\n          </systemProperties>\n        </configuration>\n        <dependencies>\n\t\t\t  <dependency>\n\t\t      <groupId>org.springframework</groupId>\n\t\t\t    <artifactId>spring</artifactId>\n\t\t      <version>2.5.5</version>\n\t\t\t  </dependency>\n\t\t\t  <dependency>\n\t\t      <groupId>org.mortbay.jetty</groupId>\n\t\t      <artifactId>jetty-xbean</artifactId>\n\t\t      <version>6.1.11</version>\n\t\t    </dependency> \t\n\t\t    <dependency>\n\t\t      <groupId>org.apache.camel</groupId>\n\t\t      <artifactId>camel-activemq</artifactId>\n\t\t      <version>1.1.0</version>\n        </dependency>\n      </dependencies>\t\t\t\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: TCP Protocol Configuration in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates the configuration of the TCP protocol for client-server communication in ActiveMQ Classic. Clients connect to a message broker using this protocol, typically over TCP. The only requirement is the host and port of the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/topologies.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntcp://somehost:port\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Session with AUTO_ACKNOWLEDGE in C++\nDESCRIPTION: This code snippet demonstrates how to create a CMS session with the default AUTO_ACKNOWLEDGE mode. It first creates a connection factory, then a connection, and finally a session using the connection's createSession() method without any arguments. This creates a Session that is in the AUTO_ACKNOWLEDGE mode.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory( \n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\nstd::auto_ptr<cms::Session> session( connection->createSession() );\n```\n\n----------------------------------------\n\nTITLE: ZeroConf Transport Configuration\nDESCRIPTION: Shows the general syntax for configuring the ZeroConf transport in ActiveMQ Classic.  It allows specifying a service name and optional transport options.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/zeroconf-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nzeroconf:serviceName?transportOptions\n```\n\nLANGUAGE: text\nCODE:\n```\nzeroconf:serviceName\n```\n\n----------------------------------------\n\nTITLE: Web Console Security Constraint (web.xml)\nDESCRIPTION: This XML snippet is intended to be added to the web.xml file for the /admin/ web application. It configures HTTP Authentication using BASIC authentication method and a realm named 'ActiveMQ', matching the activemq.xml configuration for user roles and permissions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/complex-single-broker-configuration-stomp-only.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<security-constraint>\n    <web-resource-collection>\n        <web-resource-name>Web Console</web-resource-name>\n        <url-pattern>/*</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n        <role-name>admins</role-name>\n    </auth-constraint>\n</security-constraint>\n\n<login-config>\n    <auth-method>BASIC</auth-method>\n    <realm-name>ActiveMQ</realm-name>\n</login-config>\n```\n\n----------------------------------------\n\nTITLE: Configure Failover Transport URI\nDESCRIPTION: This URI configures a JMS client to automatically reconnect to the broker if it goes down. The client will attempt to reconnect to the specified host and port.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nfailover:tcp://host:port\n```\n\n----------------------------------------\n\nTITLE: Running configure script on *nix\nDESCRIPTION: This shell script runs the `configure` script, which customizes the build process based on the system's environment and available libraries. It prepares the Makefiles for compilation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./configure\n```\n\n----------------------------------------\n\nTITLE: Failover Transport Example with Randomization Disabled\nDESCRIPTION: Demonstrates how to disable URI randomization in the Failover transport, forcing the client to connect to the first URI in the list initially, and only using the subsequent URIs as backups. This is used to prioritize a primary broker over secondary brokers. Setting randomize to `false` is important for primary-backup configurations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/failover-transport-reference.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nfailover:(tcp://primary:61616,tcp://secondary:61616)?randomize=false\n```\n\n----------------------------------------\n\nTITLE: Run Listener Script (Unix/Linux/OS X)\nDESCRIPTION: Executes the 'listener.rb' script, which acts as a consumer, receiving messages from the ActiveMQ Apollo broker. This script needs the 'stomp' gem to be installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nruby listener.rb\n```\n\n----------------------------------------\n\nTITLE: Enable SimpleMessageGroupMap in ActiveMQ (XML)\nDESCRIPTION: This XML snippet configures ActiveMQ to use `SimpleMessageGroupMap` for message grouping within a specific queue. `SimpleMessageGroupMap` keeps track of every group, ensuring message order, but it can lead to unbounded memory use if the number of groups is very large. It requires no external dependencies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\">\">\n          <messageGroupMapFactory>\n            <simpleMessageGroupMapFactory/>\n          </messageGroupMapFactory>\n      </policyEntry>\n    </policyEntries>\n  </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Plugin XML Configuration Example\nDESCRIPTION: This XML snippet demonstrates how to configure a plugin in ActiveMQ Classic using the Spring Framework. It defines a broker with a plugin referenced by its ID. The plugin bean is then defined, referencing another bean.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/interceptors.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:amq=\"http://activemq.org/config/1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans \nhttp://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.org/config/1.0 \nhttp://activemq.apache.org/schema/activemq-core.xsd http://activemq.apache.org/camel/schema/spring  http://activemq.apache.org/camel/schema/spring/camel-spring.xsd\">\n\n<!-- Allows us to use system properties as variables in this configuration file -->\n<bean  class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\" />\n\n  <broker xmlns=\"http://activemq.org/config/1.0\" brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\" plugins=\"#myPlugin\">\n\n    <!-- The transport connectors ActiveMQ Classic will listen to -->\n    <transportConnectors>\n      <transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\" />\n    </transportConnectors>\n\n  </broker>\n\n  <bean id=\"myPlugin\" class=\"org.myorg.MyPlugin\">\n    <!-- You can reference one or more Spring beans in this file -->\n    <property name=\"myMgr\" ref=\"myManager\"/>\t\t \n  </bean>\n\n  <bean id=\"myManager\" class=\"org.myorg.MyManager\">\n    <property name=\"fooList\">\n      <list>\n        <value>foo</value>\n        <value>foo2</value>\n      </list>\n    </property>\n  </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Running the Stomp Example with Ant\nDESCRIPTION: This shows how to execute the Stomp example included in the ActiveMQ Classic distribution using the Ant build tool. It is located in the example folder.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\nant stomp\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet shows how to add ActiveMQ Classic 5.12.2 as a dependency to a Maven project.  It uses the `activemq-all` artifact, which is an uber jar containing all ActiveMQ Classic components. Alternatively, users can select specific activemq components for finer dependency control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-12-02.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.12.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: JVM Debugging Option for SSL Connections\nDESCRIPTION: This example shows how to enable SSL debugging information by setting the `javax.net.debug` system property. This can assist in troubleshooting SSL connection issues.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n-Djavax.net.debug=ssl\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Dependency to Maven POM\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ Classic 5.15.8 dependency to a Maven project's POM file. By including this dependency, the project can access ActiveMQ Classic's functionality.  It uses the activemq-all uber jar.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-08.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Queue with forwardOnly=false\nDESCRIPTION: This XML snippet shows how to configure a composite queue that also acts as a physical queue. Setting `forwardOnly` to false allows subscribers to consume directly from the composite queue in addition to the forwarded destination. Here, messages sent to `IncomingOrders` are copied and forwarded to `Notifications` before being placed on the `IncomingOrders` queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/virtual-destinations.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<compositeQueue name=\"IncomingOrders\" forwardOnly=\"false\">\n  <forwardTo>\n    <topic physicalName=\"Notifications\" />\n  </forwardTo>\n</compositeQueue>\n```\n\n----------------------------------------\n\nTITLE: Basic Apollo Broker Configuration in apollo.xml\nDESCRIPTION: This XML snippet illustrates a minimal `apollo.xml` configuration file for an Apollo broker. It defines a single virtual host listening on localhost, utilizing a null store, and a single TCP connector bound to port 61613.  The broker, virtual host, and connector are assigned IDs used by the REST-based administration console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/activemq/apollo\">\n\n  <virtual_host id=\"default\">\n    <host_name>localhost</host_name>\n    <null_store/>\n  </virtual_host>\n\n  <connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\"/>\n\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Authentication Filter for WebLogic Security in ActiveMQ Classic (Java)\nDESCRIPTION: This class is a broker filter that authenticates callers against WebLogic security. It's similar to ActiveMQ Classic's JaasAuthenticationBroker but hardcodes the JAAS configuration for WebLogic authentication. The SecurityContext implementation is overridden to handle WebLogic principals, ensuring correct matching of principals even with potential signature data differences.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/**\n * A broker filter that authenticates callers against WebLogic security.\n * This is similar to the ActiveMQ Classic JaasAuthenticationBroker except for two\n * things:\n * <ul>\n *   <li>Instead of reading a JAAS configuration file, it hardcodes the JAAS\n *     configuration to require authentication against WebLogic</li>\n *\n *   <li>The SecurityContext implementation overrides the method used to\n *     compare actual and eligible principals in order to handle the fact\n *     that WebLogic principals (WLSGroupImpl in particular) do not seem\n *     to match according to equals and hashCode even if the principal class\n *     and principal name are the same (perhaps having to do with the\n *     signature data on the WLSAbstractPrincipal).</li>\n * </ul>\n */\npublic class ActiveMQWebLogicAuthenticationFilter extends BrokerFilter {\n    private final static Configuration WEBLOGIC_JAAS_CONFIGURATION = new Configuration() {\n        public AppConfigurationEntry[] getAppConfigurationEntry(String name) {\n            return new AppConfigurationEntry[]{\n                    new AppConfigurationEntry(\"weblogic.security.auth.login.UsernamePasswordLoginModule\",\n                            AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, Collections.EMPTY_MAP)\n            };\n        }\n\n        public void refresh() {\n        }\n    };\n    private final CopyOnWriteArrayList securityContexts = new CopyOnWriteArrayList();\n\n    public ActiveMQWebLogicAuthenticationFilter(Broker next) {\n        super(next);\n    }\n\n    static class JaasSecurityContext extends SecurityContext {\n\n        private final Subject subject;\n\n        public JaasSecurityContext(String userName, Subject subject) {\n            super(userName);\n            this.subject = subject;\n        }\n\n        public Set getPrincipals() {\n            return subject.getPrincipals();\n        }\n\n        /**\n         * This is necessary because WebLogic uses extra logic when comparing principals,\n         * probably to check whether they are cryptographically signed (which WebLogic\n         * supports).  We skip that test because ActiveMQ Classic does not sign the principals\n         * it deals with.\n         */\n        public boolean isInOneOf(Set eligiblePrincipals) {\n            for (Iterator it = getPrincipals().iterator(); it.hasNext();) {\n                Principal test = (Principal) it.next();\n                for (Iterator el = eligiblePrincipals.iterator(); el.hasNext();) {\n                    Principal eligible = (Principal) el.next();\n                    if(test.getName().equals(eligible.getName()) &&\n                            test.getClass().getName().equals(eligible.getClass().getName())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    }\n\n    public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {\n        if( context.getSecurityContext()==null ) {\n            // Do the login.\n            try {\n                LoginContext lc = new LoginContext(\"ActiveMQ\", new Subject(),\n                        new URLCallbackHandler(info.getUserName(), info.getPassword()),\n                        WEBLOGIC_JAAS_CONFIGURATION);\n                lc.login();\n                Subject subject = lc.getSubject();\n\n                SecurityContext s = new JaasSecurityContext(info.getUserName(), subject);\n                context.setSecurityContext(s);\n                securityContexts.add(s);\n            } catch (Exception e) {\n                throw (SecurityException)new SecurityException(\"User name or password is invalid.\").initCause(e);\n            }\n        }\n        super.addConnection(context, info);\n    }\n\n    public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {\n        super.removeConnection(context, info, error);\n        if( securityContexts.remove(context.getSecurityContext()) ) {\n            context.setSecurityContext(null);\n        }\n    }\n\n    /**\n     * Previously logged in users may no longer have the same access anymore.  Refresh\n     * all the logged into users.\n     */\n    public void refresh() {\n        for (Iterator iter = securityContexts.iterator(); iter.hasNext();) {\n            SecurityContext sc = (SecurityContext) iter.next();\n            sc.getAuthorizedReadDests().clear();\n            sc.getAuthorizedWriteDests().clear();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: QueueConnectionFactory Reference in jboss.xml for SenderEJB\nDESCRIPTION: This XML snippet from jboss.xml links the 'jms/MyQueueConnectionFactory' resource reference in the SenderEJB to a local resource name 'queuefactoryref'.  This establishes a connection between the EJB's resource requirement and the JBoss-managed resource.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<enterprise-beans>\n   <session>\n      <ejb-name>SenderEJB</ejb-name>\n      <resource-ref>\n         <res-ref-name>jms/MyQueueConnectionFactory</res-ref-name>\n         <resource-name>queuefactoryref</resource-name>\n      </resource-ref>\n   </session>\n   ...\n</enterprise-beans>\n```\n\n----------------------------------------\n\nTITLE: Discarding DLQ Plugin - Drop All Configuration (XML)\nDESCRIPTION: This XML configuration demonstrates how to configure the DiscardingDLQBrokerPlugin to drop all messages sent to the DLQ, including temporary topics and queues. This configuration uses the `dropAll`, `dropTemporaryTopics`, and `dropTemporaryQueues` attributes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<beans> \n  <broker>\n    <plugins>\n      <discardingDLQBrokerPlugin dropAll=\"true\" dropTemporaryTopics=\"true\" dropTemporaryQueues=\"true\"/>\n    </plugins>\n  </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Creating ActiveMQ Classic Deploy Directory - Shell\nDESCRIPTION: These commands create a directory within the JBoss deploy directory to house the ActiveMQ Classic Resource Adapter (RAR) contents. It makes it easier to manage the extracted files and allows for simple modifications without the need to rebuild a RAR archive during development.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ mkdir /opt/jboss-4.0.4.GA/server/default/deploy/activemq-ra.rar\n$ cd /opt/jboss-4.0.4.GA/server/default/deploy/activemq-ra.rar\n$ pwd\n/opt/jboss-4.0.4.GA/server/default/deploy/activemq-ra.rar\n```\n\n----------------------------------------\n\nTITLE: Dynamic Queue Lookup with JNDI\nDESCRIPTION: This example shows how to dynamically lookup a queue using JNDI.  The queue name, `FOO.BAR`, is specified as part of the JNDI lookup name. This does not require pre-configuration of the queue in `jndi.properties`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jndi-support.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndynamicQueues/FOO.BAR\n```\n\n----------------------------------------\n\nTITLE: Generate Eclipse Project Files with Maven 1\nDESCRIPTION: This command generates Eclipse project files for ActiveMQ Classic using Maven 1. It facilitates importing the project into Eclipse for development and debugging. This command is intended for older versions of ActiveMQ Classic (4.0.x and down) that utilize Maven 1. Ensure you have Maven 1 installed and properly configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/building.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmaven eclipse\n```\n\n----------------------------------------\n\nTITLE: Multicast Discovery Configuration in ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure an ActiveMQ broker to use multicast discovery for network connectors. It sets up a broker named 'sender' with a network connector using the multicast URI. The transport connector also uses multicast discovery to find other brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<beans xmlns=\"http://activemq.org/config/1.0\">\n\n  <broker name=\"sender\" persistent=\"false\" useJmx=\"false\">  \n    <networkConnectors>\n      <networkConnector uri=\"multicast://default\"/>\n    </networkConnectors>\n\n    <persistenceAdapter>\n      <memoryPersistenceAdapter/>\n    </persistenceAdapter>\n\n  <transportConnectors>\n      <transportConnector uri=\"tcp://localhost:0\" discoveryUri=\"multicast://default\"/>\n    </transportConnectors>\n  </broker>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Verify PGP Signature Using gpg\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of downloaded ActiveMQ Classic files using GPG. It imports the KEYS and verifies the signature file against the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-02-00.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Exception: IllegalStateException - Java\nDESCRIPTION: This Java snippet shows an exception that may be encountered when posting messages to the ActiveMQ REST API without correctly specifying the message body. The 'body=...' parameter must be used, or the content type must be explicitly provided in the header.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\njava.lang.IllegalStateException: STREAMED\nat org.eclipse.jetty.server.Request.getReader(Request.java:898)\nat org.apache.activemq.web.MessageServletSupport.getPostedMessageBody(MessageServletSupport.java:347)\nat org.apache.activemq.web.MessageServlet.doPost(MessageServlet.java:126)\n...\n```\n\n----------------------------------------\n\nTITLE: Multicast URI with Custom Group Name\nDESCRIPTION: An example URI that configures the multicast transport with a custom group name.  This is useful for segregating multicast traffic on a network.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/multicast-transport-reference.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmulticast://224.1.2.3:6255?group=mygroupname\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connections Data\nDESCRIPTION: Demonstrates how to retrieve connection data from the Apollo broker using the /broker/connections.json endpoint.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -u \"admin:password\" \\\n    'http://localhost:61680/broker/connections.json'\n```\n\n----------------------------------------\n\nTITLE: Setting LIB environment variable for MSVC\nDESCRIPTION: This shows how to set the LIB environment variable to include the paths to MSVC libs and the platform SDK libs.  This is necessary to allow the MSVC linker to find the library files needed for compilation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nLIB = D:\\Program Files\\Microsoft Visual Studio 8\\VC\\lib;D:\\Program Files\\Microsoft Platform SDK\\Lib\n```\n\n----------------------------------------\n\nTITLE: Generating IDE project files with Maven\nDESCRIPTION: This snippet shows how to use Maven plugins to generate project files for Eclipse or IntelliJ IDEA. It assumes Maven is installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmaven eclipse or maven idea\n```\n\n----------------------------------------\n\nTITLE: Naming Transport Connector in ActiveMQ Classic XML\nDESCRIPTION: This snippet shows how to assign a name to the transportConnector element within the ActiveMQ Classic configuration, linking it to the broker name for clearer identification.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"bruce.broker1\" uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n```\n\n----------------------------------------\n\nTITLE: Main Function: Asynchronous Consumer C++\nDESCRIPTION: This is the main function that drives the asynchronous consumer example. It initializes the ActiveMQ library, sets the broker URI and destination URI, creates a SimpleAsyncConsumer instance, starts the consumer, and waits for the user to press 'q' to quit. Finally, it closes the consumer and shuts down the ActiveMQ library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc AMQCPP_UNUSED, char* argv[] AMQCPP_UNUSED) {\n\n    activemq::library::ActiveMQCPP::initializeLibrary();\n\n    std::cout << \"=====================================================\\n\";\n    std::cout << \"Starting the example:\" << std::endl;\n    std::cout << \"-----------------------------------------------------\\n\";\n\n    // Set the URI to point to the IPAddress of your broker.\n    // add any optional params to the url to enable things like\n    // tightMarshalling or tcp logging etc.  See the CMS web site for\n    // a full list of configuration options.\n    //\n    //  http://activemq.apache.org/cms/\n    //\n    std::string brokerURI =\n        \"failover:(tcp://127.0.0.1:61616)\";\n\n    //============================================================\n    // This is the Destination Name and URI options.  Use this to\n    // customize where the consumer listens, to have the consumer\n    // use a topic or queue set the 'useTopics' flag.\n    //============================================================\n    std::string destURI = \"TEST.FOO\"; //?consumer.prefetchSize=1\";\n\n    //============================================================\n    // set to true to use topics instead of queues\n    // Note in the code above that this causes createTopic or\n    // createQueue to be used in the consumer.\n    //============================================================\n    bool useTopics = false;\n\n    //============================================================\n    // set to true if you want the consumer to use client ack mode\n    // instead of the default auto ack mode.\n    //============================================================\n    bool clientAck = false;\n\n    // Create the consumer\n    SimpleAsyncConsumer consumer( brokerURI, destURI, useTopics, clientAck );\n\n    // Start it up and it will listen forever.\n    consumer.runConsumer();\n\n    // Wait to exit.\n    std::cout << \"Press 'q' to quit\" << std::endl;\n    while( std::cin.get() != 'q') {}\n\n    // All CMS resources should be closed before the library is shutdown.\n    consumer.close();\n\n    std::cout << \"-----------------------------------------------------\\n\";\n    std::cout << \"Finished with the example.\" << std::endl;\n    std::cout << \"=====================================================\\n\";\n\n    activemq::library::ActiveMQCPP::shutdownLibrary();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Service Wrapper Debugging\nDESCRIPTION: This snippet demonstrates how to enable debugging for the Java Service Wrapper by setting the `wrapper.debug` property to `TRUE` in the `wrapper.conf` file. This generates more verbose logging information for troubleshooting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/java-service-wrapper.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nwrapper.debug=TRUE\n```\n\n----------------------------------------\n\nTITLE: Setting Java System Property for IPv4 Preference\nDESCRIPTION: This Java system property forces the Java Runtime to use the IPv4 stack instead of IPv6. This is useful when the network is not configured for IPv6, preventing multicast messages from being dropped.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/multicast-watch-out-for-ipv6-vs-ipv4-support-on-your-operating-system-or-distribution-or-network.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n -Djava.net.preferIPv4Stack=true\n```\n\n----------------------------------------\n\nTITLE: Force Starting Stopped Broker in Java\nDESCRIPTION: This code snippet shows how to force start a stopped ActiveMQ Classic broker using the `start(boolean force)` method, available in version 5.3 and later.  It first stops the broker, and then restarts it using `service.start(true)`. While this provides a direct restart, re-instantiating the broker is generally more reliable.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-restart-embedded-broker.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBrokerService service = BrokerFactory.createBroker(\"xbean:activemq.xml\");\nservice.start();\nservice.waitUntilStarted();\n\nservice.stop();\nservice.waitUntilStopped();\n\nservice.start(true);\n```\n\n----------------------------------------\n\nTITLE: Stopping a Specific ActiveMQ Broker by Name (Default JMX Context)\nDESCRIPTION: This example demonstrates stopping a specific ActiveMQ Classic broker by its name in the default JMX context. The 'localhost' parameter specifies the name of the broker to stop.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin stop localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ-CPP with OpenSSL Path in Shell\nDESCRIPTION: This command configures the ActiveMQ-CPP build process, specifying the location of the OpenSSL installation using the `--with-openssl` option. This is necessary when OpenSSL is installed in a non-standard location, allowing the build process to find the required libraries and headers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/enable-openssl-support-with-autotools.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n./configure --with-openssl=/opt/special/openssl\n```\n\n----------------------------------------\n\nTITLE: Producing and Consuming Messages via Java\nDESCRIPTION: These commands show how to produce and consume messages using the `activemq-all` JAR.  They require the `activemq-all-5.x.x.jar` file to be present in the current directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava -jar activemq-all-5.x.x.jar producer\njava -jar activemq-all-5.x.x.jar consumer\n```\n\n----------------------------------------\n\nTITLE: Shutting Down and Restarting with Configuration Change\nDESCRIPTION: This code snippet demonstrates how to shut down a Blaze Channel, change its configuration, and then restart it. The `shutDown()` method stops communication and de-constructs the channel. Re-initialization allows for configuration changes before restarting the channel with `start()`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/life-cycle.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nBlazeChannelFactory factory = new BlazeChannelFactory();\nBlazeChannel channel = factory.createChannel();\nchannel.shutDown();\n// change the congiguration\nchannel.getConfiguration().setBroadcastURI(\"tcp://localhost:60661\");\n//re-start\nchannel.start();\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Error Message\nDESCRIPTION: This error message indicates that the client and broker are using different versions of the ActiveMQ Classic JARs, leading to a failure in packet reading. The UNKNOWN PACKET TYPE typically signifies a mismatch in the wire format version used by the client and broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/could-not-find-packetreader-for-packet-type-unknown-packet-type.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCould not find PacketReader for packet type: UNKNOWN PACKET TYPE: -102\n```\n\n----------------------------------------\n\nTITLE: Example KahaDB Cleanup Trace Log Output\nDESCRIPTION: This is an example of the TRACE level log output from KahaDB's cleanup process. It shows the garbage collection (gc) candidates and how the set of candidates changes as the cleanup process iterates through transactions and destinations.  The log output helps identify which destinations are preventing the data files from being removed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/why-do-kahadb-log-files-remain-after-cleanup.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTRACE | Last update: 164:41712, full gc candidates set: [86, 87, 163, 164] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after first tx:164:41712, [86, 87, 163] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:0:A, [86, 87, 163] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:1:B, [86, 87, 163] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:0:D, [86, 87, 163] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:0:E, [86, 87] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:0:H, [86, 87] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:0:I, [86, 87] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates after dest:0:J, [87] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nTRACE | gc candidates: [87] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\nDEBUG | Cleanup removing the data files: [87] | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker\n```\n\n----------------------------------------\n\nTITLE: Ordering Connections Data\nDESCRIPTION: Shows how to order the connections data using the 'o' query parameter.  This example sorts by write_counter descending and then by id ascending.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" \\\n    'http://localhost:61680/broker/connections.json?o=write_counter%20DESC&o=id'\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining a Group Channel in ActiveMQ Classic (Java)\nDESCRIPTION: This code snippet demonstrates how to create a group channel using BlazeGroupChannelFactory, join a specific group, start the channel, and listen for member changes using a MemberChangedListener. It requires the 'org.apache.activeblaze.group' package. The channel name is \"My Channel\" and the group name to join is \"test\".\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/group-membership.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activeblaze.group.*;\n\n...\nBlazeGroupChannelFactory factory = new BlazeGroupChannelFactory();\n\nBlazeGroupChannel channel = factory.createGroupChannel(\"My Channel\");\n//join a group\nchannel.addToGroup(\"test\");\nchannel.start();\n\n//listen for other members\n\nchannel.addMemberChangedListener(new MemberChangedListener(){\n\n     public void memberStarted(Member member) {\n         System.out.println(\"Member started\");\n     }\n\n     public void memberStopped(Member member) {\n         System.out.println(\"Member stopped\");\n     }\n            \n });\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet defines a Maven dependency for ActiveMQ Classic 5.15.1 using the activemq-all artifact.  This includes all ActiveMQ Classic components as a single uber jar. It requires a Maven project setup.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-01.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Queue Cursor (XML)\nDESCRIPTION: This XML configuration snippet demonstrates how to configure a `vmQueueCursor` within a destination policy in ActiveMQ Classic.  This forces non-persistent queue messages to be kept in memory up to a specified limit. This configuration allows for controlling memory usage for non-persistent messages and triggering producer flow control when the limit is reached. Requires configuration within the broker's `activemq.xml` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/producer-flow-control.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<policyEntry queue=\">\" producerFlowControl=\"true\" memoryLimit=\"1mb\">    \n  <pendingQueuePolicy>\n    <vmQueueCursor/>\n  </pendingQueuePolicy>\n</policyEntry>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP/GPG\nDESCRIPTION: This snippet shows the commands to verify the integrity of the downloaded ActiveMQ files using PGP or GPG. It requires downloading the KEYS file and the .asc signature file for the distribution. The commands use either pgpk/pgpv, pgp, or gpg, depending on the tool available.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-12-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Setting up Oracle AQ using SQL\nDESCRIPTION: This SQL code provides example statements for setting up Oracle AQ. It creates a queue table, creates a queue, and starts the queue. It uses the DBMS_AQADM package to manage the Oracle AQ configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-bridge-with-oracle-aq.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN\n DBMS_AQADM.CREATE_QUEUE_TABLE( queue_table => 'queue_message_table', queue_payload_type => 'SYS.AQ$_JMS_TEXT_MESSAGE');\nEND;        \n\nBEGIN\n  DBMS_AQADM.CREATE_QUEUE( queue_name => 'ORACLE_QUEUE', queue_table => 'queue_message_table');\nEND;\n\nBEGIN\n  DBMS_AQADM.START_QUEUE(queue_name => 'ORACLE_QUEUE');\nEND;  \n```\n\n----------------------------------------\n\nTITLE: Constant Pending Message Limit Strategy Configuration\nDESCRIPTION: This XML snippet configures a ConstantPendingMessageLimitStrategy. The `limit` attribute specifies the maximum number of pending messages a consumer can have above its prefetch size.  Once this limit is reached, older messages are discarded to prevent slow consumers from overwhelming the broker. A value of 50 is used in this example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-consumer-handling.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constantPendingMessageLimitStrategy limit=\"50\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic from the Assembly Target Directory\nDESCRIPTION: This command sequence extracts the ActiveMQ Classic binary from a zip file and then navigates to the `bin` directory to execute the `activemq` startup script.  It assumes the user is in the `[activemq_install_dir]\\assembly\\target` directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]\\assembly\\target\nunzip activemq-x.x-SNAPSHOT.zip\ncd activemq-x.x-SNAPSHOT\nbin\\activemq\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Classic Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ Classic 5.15.9 dependency to a Maven project. It includes the groupId, artifactId, and version information necessary for Maven to download and manage the ActiveMQ Classic library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-09.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.9</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Wildcard Serializable Packages System Property\nDESCRIPTION: This snippet demonstrates how to allow all packages for ObjectMessage serialization/deserialization in ActiveMQ Classic using the `*` wildcard.  This should only be used for testing or development purposes as it disables security checks.  This approach is generally discouraged in production environments.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/objectmessage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-Dorg.apache.activemq.SERIALIZABLE_PACKAGES=*\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Consumer with Ant\nDESCRIPTION: This snippet demonstrates how to run the ActiveMQ Classic consumer example using Apache Ant.  It navigates to the examples directory and executes the 'ant consumer' command. The consumer connects to the specified URL and consumes messages from a queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /opt/incubator-activemq-4.0.2/examples    #note in activemq v5 the directory is just \"example\" not \"examples\"\n$ ant consumer\n```\n\n----------------------------------------\n\nTITLE: SSL Transport Options via Socket Parameters in ActiveMQ Classic\nDESCRIPTION: This example demonstrates passing SSL transport options using `?socket.XXX`. It shows how to specify enabled cipher suites for the SSL connection using socket parameters in ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?socket.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 3.1.1\nDESCRIPTION: This command checks out the ActiveMQ CMS (C++) library version 3.1.1 from the Apache SVN repository. It uses the `svn co` command to retrieve the code from the specified URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/311-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.1/\n```\n\n----------------------------------------\n\nTITLE: Configuring env ActiveMQ Classic\nDESCRIPTION: Commands to configure the java heap to a size suitable to your system environment and usage\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncp apache-activemq-<version>/bin/env /etc/default/activemq\nsed -i '~s/^ACTIVEMQ\\_USER=\"\"/ACTIVEMQ\\_USER=\"activemq\"/' /etc/default/activemq\nvim /etc/default/activemq\nchmod 644 /etc/default/activemq\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Requirement to Jetty Configuration XML\nDESCRIPTION: This XML snippet shows how to add an authentication requirement to the default Jetty configuration file (conf/jetty.xml) in Apache ActiveMQ 6.x to secure the API web context. This mitigation prevents unauthorized access to the Jolokia JMX REST API and Message REST API. The `pathSpec` is set to \"/\" to apply the constraint to the entire context.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/security-advisories.data/CVE-2024-32114-announcement.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"securityConstraintMapping\" class=\"org.eclipse.jetty.security.ConstraintMapping\">\n  <property name=\"constraint\" ref=\"securityConstraint\" />\n  <property name=\"pathSpec\" value=\"/\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the instantiation of an object of the class 'SomeJava'. It showcases a simple 'new' operator usage in Java for creating an instance of a class. The instantiated object is assigned to a variable 's' of type 'Somejava'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.22.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Using SimpleConsole for Command Agent Interaction (Java)\nDESCRIPTION: This refers to a Java class 'SimpleConsole' within the activemq-core module. The class provides an interactive console for communicating with an ActiveMQ Classic broker over JMS. Users can type commands and receive results directly in the console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/command-agent.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nThe activemq-core module has a simple Java class called SimpleConsole which you can run in your IDE to get an interactive console for communicating with a broker over JMS.\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for ActiveMQ 4.x\nDESCRIPTION: This snippet demonstrates how to configure log4j to enable INFO level logging for the core ActiveMQ Classic code and WARN level logging for the Spring integration in ActiveMQ Classic 4.x. This configuration should be added to the log4j.properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-enable-detailed-logging.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.logger.org.apache.activemq=INFO\nlog4j.logger.org.apache.activemq.spring=WARN\n```\n\n----------------------------------------\n\nTITLE: NIO Transport Configuration Syntax\nDESCRIPTION: Demonstrates the basic syntax for configuring the NIO transport in ActiveMQ Classic using a URI.  This is the fundamental format required for defining the connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/nio-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnio://hostname:port?key=value\n```\n\n----------------------------------------\n\nTITLE: Checkout Git Tag for ActiveMQ-CPP 3.9.1\nDESCRIPTION: This code snippet provides instructions on how to clone the ActiveMQ-CPP repository from Git, navigate to the project directory, and checkout the specific tag for version 3.9.1. This allows users to access the exact source code corresponding to this release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/391-release.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.9.1\n```\n\n----------------------------------------\n\nTITLE: Configuring BlobTransferPolicy via URI - Java\nDESCRIPTION: This snippet shows how to configure the BlobTransferPolicy, specifically the uploadUrl, using the Connection Configuration URI. This allows setting the upload URL when connecting to the broker. Requires understanding of ActiveMQ Connection URIs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/blob-messages.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ntcp://localhost:61616?jms.blobTransferPolicy.uploadUrl=http://foo.com\n```\n\n----------------------------------------\n\nTITLE: Configuring ShiroPlugin with Encrypted Passwords in ActiveMQ Classic\nDESCRIPTION: This XML snippet illustrates how to configure the ShiroPlugin in ActiveMQ Classic to use encrypted passwords. It configures a PasswordMatcher in the [main] section and includes hashed password values in the [users] section. Requires Shiro's Command Line Hasher to generate secure password hashes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n    <!-- enabled by default.  To disable, uncomment:\n    <property name=\"iniConfig\"><value>\n\n    [main]\n    # Shiro object graph configuration here\n    passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher\n    iniRealm.credentialsMatcher = $passwordMatcher\n \n    [users]\n    scott = $shiro1$SHA-256$500000$eWpVX2tGX7WCP2J+jMCNqw==$it/NRclMOHrfOvhAEFZ0mxIZRdbcfqIBdwdwdDXW2dM=, advisory\n    system = $shiro1$SHA-256$500000$eUyGwMGr9GYzB/gg/MoNgw==$WGc0yWFWv8+hLqjzVLgW7Hat2FQTywDXBl5izpqaLSY=, system\n\n    [roles]\n    system = *\n    advisory = topic:ActiveMQ.Advisory*\n    </value></property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Topic Details JSON Response with Producers and Consumers\nDESCRIPTION: This JSON snippet shows the structure of the response when querying for the details of a topic. It includes metrics, producers, and consumers. The values are examples and will depend on the topic's activity and configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"example-2\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314574398831,\n  \"config\": {\n    \"other\": []\n  },\n  \"producers\": [{\n    \"kind\": \"connection\",\n    \"id\": \"78\",\n    \"label\": \"/127.0.0.1:51668\",\n    \"enqueue_item_counter\": 1133674,\n    \"enqueue_size_counter\": 1259289609,\n    \"enqueue_ts\": 1314574422110\n  }],\n  \"consumers\": [{\n    \"kind\": \"connection\",\n    \"id\": \"86\",\n    \"label\": \"/127.0.0.1:51677\",\n    \"enqueue_item_counter\": 566836,\n    \"enqueue_size_counter\": 629643696,\n    \"enqueue_ts\": 1314574422110\n  },\n  {\n    \"kind\": \"connection\",\n    \"id\": \"82\",\n    \"label\": \"/127.0.0.1:51673\",\n    \"enqueue_item_counter\": 566838,\n    \"enqueue_size_counter\": 629645913,\n    \"enqueue_ts\": 1314574422110\n  }],\n  \"dsubs\": [],\n  \"metrics\": {\n    \"current_time\": 0,\n    \"enqueue_item_counter\": 1133674,\n    \"enqueue_size_counter\": 1259289609,\n    \"enqueue_ts\": 1314574422110\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Link Generation using Liquid\nDESCRIPTION: This snippet generates download links based on the 'collection' attribute of each release using Liquid's conditional statements ('if', 'elsif', 'else'). It checks which collection the release belongs to (e.g., 'artemis_console', 'artemis', 'nms_api', 'nms_amqp') and creates the appropriate link.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/news.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if release.collection contains \"artemis_console\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/artemis-console/download/\">{{release.title}}</a></h6>\n{% elsif release.collection contains \"artemis\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/artemis/download/\">{{release.title}}</a></h6>\n{% elsif release.collection contains \"nms_api\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/nms/nms-api-downloads\">{{release.title}}</a></h6>\n{% elsif release.collection contains \"nms_amqp\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/nms/providers/amqp/downloads/\">{{release.title}}</a></h6>\n{% else %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{release.url}}\">{{release.title}}</a></h6>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Plugin (Apache DS)\nDESCRIPTION: Configures the ActiveMQ broker to use the `cachedLDAPAuthorizationMap` plugin.  This snippet shows the minimal configuration needed when using an embedded Apache Directory Server. It adds the plugin to the authorizationPlugin section of the broker's XML configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/cached-ldap-authorization-module.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<authorizationPlugin>\n    <map>\n        <cachedLDAPAuthorizationMap/>\n    </map>\n</authorizationPlugin>\n```\n\n----------------------------------------\n\nTITLE: Setting JMSReplyTo Header - ActiveMQ\nDESCRIPTION: The `JMSReplyTo` header of the request message is set to the temporary queue destination (`replyDest`). The receiving application uses this header to determine the destination to send the reply.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nmessage.setJMSReplyTo(replyDest);\n```\n\n----------------------------------------\n\nTITLE: Multicast Transport Configuration Syntax\nDESCRIPTION: Shows the basic syntax for configuring the multicast transport.  It uses the `multicast://` scheme followed by the address and port, and optional transport options.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/multicast-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmulticast://address:port?transportOptions\n```\n\n----------------------------------------\n\nTITLE: XBean Annotation Example (Java)\nDESCRIPTION: This example demonstrates how to use the XBean annotation to map a POJO to custom XML in ActiveMQ Classic. The `@org.apache.xbean.XBean` annotation is used in the Javadoc comments to instruct XBean on how to map the POJO to XML. The `element` attribute specifies the XML element name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/developing-plugins.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @org.apache.xbean.XBean element=\"foo\"\n */\npublic class MyExtension {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg - Shell\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `gpg` tool.  First, the KEYS file is imported. Then, the signature file is verified against the downloaded distribution file. Replace `<version>` with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-03.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP using pgp\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the public key, and the second verifies the signature of the downloaded file. These commands require the `pgp` utility.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-01.md#_snippet_1\n\nLANGUAGE: PGP\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk/pgpv - Shell\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `pgpk` and `pgpv` tools.  First, the KEYS file is imported. Then, the signature file is verified against the downloaded distribution file.  Replace `<version>` with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-03.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Extracting Binary Files (Unix)\nDESCRIPTION: This command extracts files from a gzipped tar archive, typically a binary distribution of ActiveMQ Classic. It relies on the `tar` and `gzip` utilities being available. This command is used to unpack the pre-built binaries of ActiveMQ Classic for execution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntar zxvf activemq-x.x.x.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring JMS Bridge to TIBCO EMS in ActiveMQ Classic (XML)\nDESCRIPTION: This XML configuration defines a JMS bridge between ActiveMQ Classic and a remote TIBCO EMS broker. It sets up a BridgeConnector with inbound and outbound queue bridges for specific queues and selectors. It requires the tibjms.jar dependency in the ActiveMQ lib directory and defines a bean for the TIBCO connection factory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-bridge-with-remote-tibco-broker.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <!-- Allows us to use system properties as variables in this configuration file -->\n    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n    <broker useJmx=\"true\" persistent=\"false\" xmlns=\"http://activemq.org/config/1.0\"\n            brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\">\n\n        <!-- Dependencies: tibjms.jar must be in the activemq lib directory -->\n\n        <!-- bridging definitions for traffic to/from remote activemq instance -->\n        <jmsBridgeConnectors>\n            <jmsQueueConnector outboundQueueConnectionFactory=\"#tibco\">\n                <inboundQueueBridges>\n                    <inboundQueueBridge\n                            inboundQueueName = \"queue.ping\"\n                            localQueueName   = \"queue.incomingMsgs.ping\"\n                            selector         = \"JMSType LIKE 'foo%'\"/>\n                </inboundQueueBridges>\n                <outboundQueueBridges>\n                    <outboundQueueBridge\n                            outboundQueueName = \"queue.pong\"\n                            localQueueName    = \"queue.incomingMsgs.ping\"\n                            selector          = \"JMSType LIKE 'foo%'\"/>\n                 </outboundQueueBridges>\n            </jmsQueueConnector>\n        </jmsBridgeConnectors>\n    </broker>\n\n    <!-- JMS ConnectionFactory to use for local bridging -->\n    <bean id=\"tibco\" class=\"com.tibco.tibjms.TibjmsQueueConnectionFactory\">\n        <property name=\"serverUrl\" value=\"tcp://remote_tibco:7222\" />\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the command to checkout the Apache.NMS.Stomp v1.5.3 tag from the Apache Subversion repository. It requires SVN to be installed on the system. The command downloads the specified version of the Apache.NMS.Stomp source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v153.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.3/\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 2.2.4\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ CMS 2.2.4 source code from the Apache SVN repository. It utilizes the `svn co` command to download the tagged version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/224-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.4/\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX for Tomcat\nDESCRIPTION: This bash snippet configures JMX for Tomcat, enabling remote monitoring via JConsole or other JMX clients. It sets the necessary CATALINA_OPTS to enable remote JMX access, specifying the port, disabling SSL, and disabling authentication for simplicity. For production environments authentication and SSL should be enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tomcat.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCATALINA_OPTS=\"$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1099 \\\n    -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet illustrates the creation of a new object of the class 'SomeJava'. It declares a variable 's' of type 'SomeJava' and initializes it with a new instance of the class.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.13.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Server-Side Hostname Validation Configuration in ActiveMQ Classic\nDESCRIPTION: This example demonstrates how to configure server-side hostname validation using the `transport.verifyHostName` parameter. When enabled, the client certificate's CN will be compared to the hostname to verify they match during a 2-way SSL connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?transport.verifyHostName=true\n```\n\n----------------------------------------\n\nTITLE: Ant Build Output (Producer)\nDESCRIPTION: This snippet shows the output of running the ActiveMQ Classic producer Ant script. It includes the build file being used, compilation and the producer connecting to the ActiveMQ broker and sending messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\nBuildfile: build.xml\n\ninit:\n\ncompile:\n\nproducer:\n     [echo] Running producer against server at $url = tcp://localhost:61616 for subject $subject = TEST.FOO\n     [java] Connecting to URL: tcp://localhost:61616\n     [java] Publishing a Message with size 1000 to queue: TEST.FOO\n     [java] Using non-durable publishing\n     [java] Sleeping between publish 0 ms\n     [java] Sending message: Message: 0 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 1 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 2 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 3 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 4 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 5 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 6 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 7 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring JNDI Resources in Tomcat context.xml\nDESCRIPTION: Defines JNDI resources for ConnectionFactory, Topic, and Queue within Tomcat's context.xml. This configuration enables applications deployed in Tomcat to access ActiveMQ Classic resources using JNDI lookup. The `brokerURL` attribute specifies the ActiveMQ Classic broker's address, and `physicalName` maps the JNDI name to a specific ActiveMQ Classic destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/setting-up-activemq-classic-with-tomcat-559.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Context antiJARLocking=\"true\">\n    <Resource\n        name=\"jms/ConnectionFactory\"\n        auth=\"Container\"\n        type=\"org.apache.activemq.ActiveMQConnectionFactory\"\n        description=\"JMS Connection Factory\"\n        factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\"\n        brokerURL=\"tcp://localhost:61616\"\n        brokerName=\"LocalActiveMQBroker\"\n        useEmbeddedBroker=\"false\"/>\n\n    <Resource name=\"jms/topic/MyTopic\"\n        auth=\"Container\"\n        type=\"org.apache.activemq.command.ActiveMQTopic\"\n        factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\"\n        physicalName=\"MY.TEST.FOO\"/>\n    <Resource name=\"jms/queue/MyQueue\"\n        auth=\"Container\"\n        type=\"org.apache.activemq.command.ActiveMQQueue\"\n        factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\"\n        physicalName=\"MY.TEST.FOO.QUEUE\"/>\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic Messages with BlazeChannel in Java\nDESCRIPTION: This code demonstrates creating a BlazeChannel, starting it, adding a listener to a specific topic, and then shutting down the channel. The listener implements the BlazeMessageListener interface and prints the received message to the console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broadcasting.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nBlazeChannel receiver = factory.createChannel();\nreceiver.start();\n\n//add a listener\n\nreceiver.addBlazeTopicMessageListener(destination, new BlazeMessageListener() {\n            public void onMessage(BlazeMessage msg) {\n                System.out.println(\"Got a msg: \" + msg);\n            }\n        });\n\nreceiver.shutDown();\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration XML\nDESCRIPTION: This XML snippet defines a Maven dependency for the Apache ActiveMQ Classic 5.14.4 release. By including this dependency in a Maven project's POM file, developers can easily integrate the ActiveMQ library into their applications.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-04.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.14.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: STOMP Receipt Frame\nDESCRIPTION: This STOMP frame is sent by the broker to the client to acknowledge receipt of a message when the client includes a receipt header in the SEND frame. The `receipt-id` matches the value from the SEND frame.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nRECEIPT\nreceipt-id:001\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Nested Transport Options within Failover (AMQP)\nDESCRIPTION: Shows how to include transport or amqp options within the individual broker URIs inside the failover configuration. The options are applied when connecting to their respective hosts.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/amqp/uri-configuration.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nfailover:(amqp://host1:5672?amqp.option=value,amqp://host2:5672?transport.option=value)?nms.clientId=foo\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using gpg\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of a downloaded ActiveMQ binary distribution using the `gpg` tool. The first command imports the public keys from the KEYS file. The second command verifies the downloaded archive using its corresponding `.asc` signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-02.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Setting JMSXGroupID in JMS Message\nDESCRIPTION: This Java code snippet demonstrates how to set the JMSXGroupID property on a JMS message. This header is used by ActiveMQ's Message Groups feature to route messages with the same group ID to the same consumer for ordered processing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMesasge message = session.createTextMessage(\"<foo>hey</foo>\");\nmessage.setStringProperty(\"JMSXGroupID\", \"IBM_NASDAQ_20/4/05\");\n...\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity Using PGP (pgp)\nDESCRIPTION: This snippet illustrates the procedure for verifying the integrity of downloaded files with the `pgp` command.  It starts by importing the KEYS file and then employing `pgp` to verify the downloaded distribution using its respective `.asc` signature file. Replace `<version>` with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Declaring ActiveMQ Classic SNAPSHOT Dependency in Maven\nDESCRIPTION: This XML snippet declares a dependency on a SNAPSHOT version of ActiveMQ Classic. It specifies the groupId, artifactId, and version of the dependency. This allows developers to use the latest pre-release version of ActiveMQ Classic in their projects.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/maven-snapshot-repository-in-your-pom.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-broker</artifactId>\n  <version>5.14.0-SNAPSHOT</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Oldest Message Eviction Strategy Configuration\nDESCRIPTION: This XML snippet configures the default MessageEvictionStrategy, which evicts the oldest message when a slow consumer exceeds its pending message limit. No specific attributes are needed for this strategy.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-consumer-handling.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<oldestMessageEvictionStrategy/>\n```\n\n----------------------------------------\n\nTITLE: Custom VirtualHost Factory Index\nDESCRIPTION: This snippet shows the contents of the `virtual-host-factory.index` resource file, containing the class name of the custom factory for virtual hosts.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nexample.MyVirtualHostFactory\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to include the ActiveMQ Classic 5.13.1 'activemq-all' uber jar as a dependency in a Maven project. It specifies the groupId, artifactId, and version required to pull the dependency from a Maven repository.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-01.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.13.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Initializing Stomp ConnectionFactory Directly - C#\nDESCRIPTION: This snippet demonstrates creating a Stomp ConnectionFactory instance directly using the Apache.NMS.Stomp.ConnectionFactory class. It allows specifying the broker address without explicitly defining the 'stomp:' protocol.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/uri-configuration.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new Apache.NMS.Stomp.ConnectionFactory(\"tcp://localhost:61613\");\n```\n\n----------------------------------------\n\nTITLE: Checkout SVN Tag\nDESCRIPTION: This snippet provides the command to checkout the Apache NMS MSMQ v1.1.0 tag from the Apache SVN repository.  It requires an SVN client to be installed and configured. The command will download the source code for the specified version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_msmq_releases/apachenms-msmq-v110.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.MSMQ/tags/1.1.0/\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven settings.xml for Apache Release\nDESCRIPTION: This XML snippet shows the configuration needed in the ~/.m2/settings.xml file for using the Apache release plugin.  It defines a profile with the id 'apache-release' and includes the gpg.passphrase property. The passphrase is required for signing artifacts during the release process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n    <profiles>\n        <profile>\n          <id>apache-release</id>\n          <properties>\n             <gpg.passphrase>secretPhrase</gpg.passphrase>\n         </properties>\n        </profile>\n    </profiles>\n ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageListener for JMS and JDBC operations\nDESCRIPTION: This Java snippet implements a MessageListener, `EchoBean`, which receives JMS messages, extracts the text content, sends it to another JMS queue, and inserts it into a database table.  It uses `JdbcTemplate` and `JmsTemplate` for database and messaging operations, respectively.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jms-and-jdbc-operations-in-one-transaction.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EchoBean implements MessageListener {\n\n    private Log log = LogFactory.getLog(getClass());\n\n    private JdbcTemplate jdbcTemplate;\n    private JmsTemplate jmsTemplate;\n\n    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void setJmsTemplate(JmsTemplate jmsTemplate) {\n        this.jmsTemplate = jmsTemplate;\n    }\n\n    public void onMessage(Message message) {\n        log.debug(message);\n        if (message instanceof TextMessage) {\n            try {\n                String messageText = ((TextMessage)message).getText();\n                log.debug(\"execute JMS operation\");\n                jmsTemplate.convertAndSend(\"messages.ouptut\", messageText);\n                log.debug(\"execute JDBC operation\");\n                jdbcTemplate.execute(\"insert into t1 values('\"+messageText+\"')\");\n            } catch (JMSException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Metrics\nDESCRIPTION: This snippet shows how to retrieve aggregated messaging metrics for all queue destinations using a GET request to the `/broker/queue-metrics.json` endpoint. The response is a JSON object conforming to the `AggregateDestMetricsDTO` schema.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/queue-metrics.json\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"current_time\": 1314573698381,\n  \"enqueue_item_counter\": 57343,\n  \"enqueue_size_counter\": 63128582,\n  \"enqueue_ts\": 1314573698478,\n  \"dequeue_item_counter\": 55121,\n  \"dequeue_size_counter\": 60681503,\n  \"dequeue_ts\": 1314573698478,\n  \"producer_counter\": 22,\n  \"consumer_counter\": 16,\n  \"producer_count\": 22,\n  \"consumer_count\": 16,\n  \"expired_item_counter\": 0,\n  \"expired_size_counter\": 0,\n  \"expired_ts\": 1314573695015,\n  \"nack_item_counter\": 0,\n  \"nack_size_counter\": 0,\n  \"nack_ts\": 1314573695015,\n  \"queue_size\": 2447079,\n  \"queue_items\": 2222,\n  \"swapped_in_size_max\": 5963776,\n  \"swapped_in_size\": 5278341,\n  \"swapped_in_items\": 4794,\n  \"swapping_in_size\": 0,\n  \"swapping_out_size\": 0,\n  \"swap_out_item_counter\": 60,\n  \"swap_out_size_counter\": 65931,\n  \"swap_in_item_counter\": 60,\n  \"swap_in_size_counter\": 65931,\n  \"objects\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic as Daemon (Unix)\nDESCRIPTION: This set of commands starts the ActiveMQ Classic broker as a background daemon process in a Unix environment.  The `cd` command changes the current directory. `./activemq start` starts the broker process which runs independently in the background.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]/bin\n./activemq start\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Send at the Connection Level in C#\nDESCRIPTION: This code snippet demonstrates how to enable asynchronous message sending at the Connection level using the AsyncSend property of the Apache.NMS.ActiveMQ.Connection object. Configuring the async send setting at this level overrides the settings at the connection factory level, providing granular control over asynchronous message sending.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/async-sends.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n((Apache.NMS.ActiveMQ.Connection)connection).AsyncSend = true;\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ 5.14.0 Dependency in Maven\nDESCRIPTION: This XML snippet demonstrates how to include the ActiveMQ 5.14.0 release as a dependency in a Maven project.  This is done by adding a dependency element to the pom.xml file.  Using activemq-all includes all ActiveMQ components. Consider using more specific dependencies for finer-grained control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.14.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Limiting Connector to Specific Protocols\nDESCRIPTION: This XML snippet demonstrates how to limit a connector to supporting only a specified subset of protocols, in this case, `openwire` and `stomp`.  The `detect` element is used to configure the allowed protocols, enhancing security and potentially improving performance by reducing protocol detection overhead.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<connector bind=\"...\">\n    <detect protocols=\"openwire stomp\" />\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Initializing NMSConnectionFactory with URI - C#\nDESCRIPTION: This code snippet demonstrates how to initialize an NMSConnectionFactory using a URI with specific parameters. It configures the connection to use the ActiveMQ protocol over TCP at localhost on port 61616 and enables tight encoding for the wire format. It leverages the NMSConnectionFactory class for initialization.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/uri-configuration.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new NMSConnectionFactory(\"activemq:tcp://localhost:61616?wireFormat.tightEncodingEnabled=true\");\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command checks out the ActiveMQ 5.3.0 source code from the Apache Subversion repository. It retrieves a specific tag, 'activemq-5.3.0', allowing developers to access the exact source code for that release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-00.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring KahaDB with Lease-Based Locker and Statements (XML)\nDESCRIPTION: This XML snippet configures the KahaDB persistence adapter with a lease-based database locker. It includes a `<statements/>` child element which is required when using KahaDB with the lease database locker.  It demonstrates how to override default locker attributes, such as `lockTableName`, using `<statements>`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pluggable-storage-lockers.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n\t<kahaDB directory=\"target/activemq-data\" lockKeepAlivePeriod=\"5000\">\n\t\t<locker>\n            <!\\-\\- When used with the KahaDB persistence adapter the 'dataSource' attribute must be defined on the locker itself: -->\n            <lease-database-locker lockAcquireSleepInterval=\"10000\" dataSource=\"#mysql-ds\">\n                <statements>\n                    <!\\-\\- Default locker attributes and SQL statements may be overridden here \n                         using one or more <statements attribute\\_or\\_statement=\"value\"/> entries: -->  \n                    <statements lockTableName=\"activemq_lock\"/>\n                </statements>\n            </lease-database-locker>\n\t\t</locker>\n\t</kahaDB>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic 5.15.10\nDESCRIPTION: This snippet provides the Maven dependency configuration needed to include ActiveMQ Classic 5.15.10 in a Maven project. It uses the `activemq-all` uber jar.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-10.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.10</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Modify configuration variables ActiveMQ Classic\nDESCRIPTION: Commands to modify configuration variables\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nACTIVEMQ_HOME=\"/srv/activemq/current/\"\nACTIVEMQ_CONF=\"/srv/activemq/instance1/conf\"\nACTIVEMQ_DATA=\"/srv/activemq/instance1/data\"\nACTIVEMQ_TMP=\"/srv/activemq/instance1/tmp\"\n```\n\n----------------------------------------\n\nTITLE: Including Message Sequence Number in Messages - STOMP\nDESCRIPTION: This example shows how to include a message sequence number in messages delivered to subscribers by adding the `include-seq` header to the `SUBSCRIBE` frame. The header's value specifies the header name that will contain the sequence number in delivered `MESSAGE` frames.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_16\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\ndestination:/queue/foo\ninclude-seq:seq\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Performing a Release Dry Run with Maven Release Plugin\nDESCRIPTION: This command performs a dry run of the Maven release preparation. It simulates the release process without actually making any changes, allowing you to check for potential problems. After the dry run, you typically clean up the temporary files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn release:prepare -DdryRun=true\nmvn release:clean\n```\n\n----------------------------------------\n\nTITLE: QueueConnectionFactory Definition in ra.xml for ActiveMQ Classic\nDESCRIPTION: This XML snippet from ra.xml defines the QueueConnectionFactory for ActiveMQ Classic. It specifies the connectionfactory interface, implementation class, and connection interface used for connecting to the queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<outbound-resourceadapter>\n   ...\n   <connection-definition>\n      ...\n      <connectionfactory-interface>javax.jms.QueueConnectionFactory</connectionfactory-interface>\n      <connectionfactory-impl-class>org.activemq.ra.ActiveMQConnectionFactory</connectionfactory-impl-class>\n      <connection-interface>javax.jms.QueueConnection</connection-interface>\n      ...\n   </connection-definition>\n   ...\n</outbound-resourceadapter>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP\nDESCRIPTION: These shell snippets demonstrate how to verify the integrity of downloaded files using PGP or GPG. They involve importing the KEYS file and then verifying the signature file against the downloaded archive. These commands help ensure the authenticity and integrity of the downloaded ActiveMQ Classic distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-09.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with pgpk/pgpv - Shell\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using PGP with the `pgpk` and `pgpv` commands.  It first imports the KEYS file and then verifies the signature file. The <version> placeholder needs to be replaced with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-02.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Adding User ActiveMQ Classic\nDESCRIPTION: Commands for adding the user activemq, seting directory and defining permissions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nuseradd -m activemq -d /srv/activemq\ncd /srv/activemq\ntar zxvf apache-activemq-<version>-bin.tar.gz$ ln -snf apache-activemq-<version> current\nchown -R activemq:users apache-activemq-<version>\n```\n\n----------------------------------------\n\nTITLE: Send to Queue (Double Request)\nDESCRIPTION: Sends a message to a queue using a double-request pattern. First, a POST to the queue's URL (/queues/foo.bar) retrieves a unique URL for the new message. Then, the message is POSTed to this unique URL. Repeated POSTs to the message URL until a 200 OK is received avoids duplicates.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /queues/foo.bar\n-------------------->\n\n201 OK\nLocation: someUniqueUrlForTheNewMessageToBePostedTo\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Authenticating with HTTP Basic Authentication\nDESCRIPTION: Demonstrates how to authenticate with the Apollo Management API using HTTP basic authentication with curl. Replace 'admin' and 'password' with appropriate credentials.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -u \"admin:password\" http://localhost:61680/broker\n```\n\n----------------------------------------\n\nTITLE: Postgres DataSource Sample Setup (Commented)\nDESCRIPTION: This commented-out example shows how to configure a Postgres DataSource for use with ActiveMQ Classic. It defines a bean using `org.postgresql.ds.PGPoolingDataSource` and sets the connection properties such as server name, database name, port number, username, and password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-master-slave.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- \n  <bean id=\"postgres-ds\" class=\"org.postgresql.ds.PGPoolingDataSource\">\n    <property name=\"serverName\" value=\"localhost\"/>\n    <property name=\"databaseName\" value=\"activemq\"/>\n    <property name=\"portNumber\" value=\"0\"/>\n    <property name=\"user\" value=\"activemq\"/>\n    <property name=\"password\" value=\"activemq\"/>\n    <property name=\"dataSourceName\" value=\"postgres\"/>\n    <property name=\"initialConnections\" value=\"1\"/>\n    <property name=\"maxConnections\" value=\"10\"/>\n  </bean>\n  -->\n```\n\n----------------------------------------\n\nTITLE: End of Browse Message - STOMP\nDESCRIPTION: This example shows the format of the 'end of browse' message sent by the broker to a browsing subscription. It indicates that all messages in the queue have been browsed. It includes the `browser:end` header.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_14\n\nLANGUAGE: STOMP\nCODE:\n```\nMESSAGE\nsubscription:mysub\ndestination:\nmessage-id:\nbrowser:end\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveMQ Classic using Homebrew on OSX\nDESCRIPTION: This command installs ActiveMQ Classic using the Homebrew package manager on macOS.  It assumes that Homebrew is already installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install apache-activemq\n```\n\n----------------------------------------\n\nTITLE: SSLServerSocket Options in ActiveMQ Classic\nDESCRIPTION: These examples show how to configure `SSLServerSocket` options on a `TransportConnection` via `?transport.XXX`. It demonstrates setting enabled cipher suites and requiring client authentication for the SSL connection in ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ssl-transport-reference.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\n```\n\nLANGUAGE: text\nCODE:\n```\nssl://localhost:61616?transport.needClientAuth=true\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to Composite Destinations in STOMP\nDESCRIPTION: This snippet demonstrates how to send a message to multiple destinations simultaneously using composite destinations in the STOMP protocol. Destinations are comma-separated in the `destination` header of the `SEND` frame. This allows sending one message to multiple queues and/or topics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nSEND\ndestination:/queue/a,/queue/b,/topic/c\n\nComposites rock!\n^@\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL DataSource in activemq.xml (AMQ 3.x)\nDESCRIPTION: This XML snippet configures a MSSQL DataSource specifically for ActiveMQ Classic 3.x within the activemq.xml file.  It defines the connection properties, including the driver class, URL, username, password, and whether to pool prepared statements. The Microsoft JDBC driver is used, and the connection URL specifies the database name and port. This snippet utilizes property/value nested structure.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-configure-a-new-database.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mssql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n        <property name=\"driverClassName\">\n            <value>com.microsoft.jdbc.sqlserver.SQLServerDriver</value>\n        </property>\n        <property name=\"url\">\n            <value>jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=activedb</value>\n        </property>\n        <property name=\"username\">\n            <value>sa</value>\n        </property>\n        <property name=\"password\">\n            <value></value>\n        </property>\n        <property name=\"poolPreparedStatements\">\n            <value>true</value>\n        </property>\n    </bean>\n```\n\n----------------------------------------\n\nTITLE: Enabling Property Placeholder Configuration in ActiveMQ Classic XML\nDESCRIPTION: This snippet enables Spring's PropertyPlaceholderConfigurer, which allows the use of system properties within the ActiveMQ Classic configuration file.  This is added as a child of the beans element.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<bean xmlns=\"\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n```\n\n----------------------------------------\n\nTITLE: Performing the Release with Maven Release Plugin\nDESCRIPTION: This command performs the release using the Maven release plugin. It builds the artifacts, signs them, and deploys them to the staging repository. It uses the activemq-release profile for building and the settings release profile for deploying.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn release:perform\n```\n\n----------------------------------------\n\nTITLE: Generating configure script on *nix\nDESCRIPTION: This shell script generates the `./configure` script required for building the ActiveMQ-CPP library on *nix systems. It uses autoconf, automake, and libtool to create the Makefiles based on the `configure.ac` and `Makefile.am` files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./autogen.sh\n```\n\n----------------------------------------\n\nTITLE: Exporting ActiveMQ Classic Data\nDESCRIPTION: Exports a stopped broker's data files to an archive file. Requires the `--file` parameter to specify the archive file name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/activemq export --file=archivefile\n```\n\n----------------------------------------\n\nTITLE: Storing Encrypted Passwords in properties file\nDESCRIPTION: This is an example of storing encrypted passwords in the `etc/apollo.xml.properties` file. These values will be referenced by the broker configuration using the `${}` syntax.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\nstore.pass=ENC(6r7HKCib0H8S+OuSfV+muQ==)\nkey.pass=ENC(FP+H2FIg++sSaOxg/ISknw==)\n```\n\n----------------------------------------\n\nTITLE: Killing ActiveMQ Process (Unix)\nDESCRIPTION: These commands find and kill the ActiveMQ Classic process on Unix-like systems. First, it uses `ps` and `grep` to find the process ID (PID) of the ActiveMQ Classic process, then uses `kill` to terminate the process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nps -ef|grep activemq\nkill [PID]\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Destination Policy Configuration\nDESCRIPTION: This XML snippet configures destination policies for ActiveMQ. It defines policies for topics (PRICES.>) and enables advisory messages for temporary topics and queues. The configuration includes pending message limit strategies and subscription recovery policies based on time duration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/per-destination-policies.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<policyEntry topic=\"PRICES.>\">\n  <!-- Force pending messages to be discarded for slow consumers -->\n  <pendingMessageLimitStrategy>\n    <constantPendingMessageLimitStrategy limit=\"10\"/>\n  </pendingMessageLimitStrategy>\n \n  <!-- 10 seconds worth -->\n  <subscriptionRecoveryPolicy>\n    <timedSubscriptionRecoveryPolicy recoverDuration=\"10000\"/>\n  </subscriptionRecoveryPolicy>\n             \n</policyEntry>\n<policyEntry tempTopic=\"true\" advisoryForConsumed=\"true\"/>\n<policyEntry tempQueue=\"true\" advisoryForConsumed=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Build and Install ActiveMQ Classic Resource Adapter (RAR)\nDESCRIPTION: This command navigates to the `activemq-ra` directory and uses Maven to build and install a snapshot version of the ActiveMQ Classic Resource Adapter (RAR file). This RAR file can then be deployed in a J2EE application server like Geronimo.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integration-tests.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd activemq-ra\nmaven rar:install-snapshot\n```\n\n----------------------------------------\n\nTITLE: Deploy Geronimo Resource Adapter\nDESCRIPTION: This command deploys the ActiveMQ Classic resource adapter to the Geronimo server. It uses the deployer tool to deploy the XML configuration file and the ActiveMQ Classic RAR file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nD:\\geronimo>java -jar bin\\deployer.jar deploy d:\\projects\\weather\\src\\resources\\\ngeronimo-activemq.xml repository\\activemq\\rars\\activemq-ra-3.1-SNAPSHOT.rar\nUsername: system\nPassword: manager\nDeployed weather/Topics\n```\n\n----------------------------------------\n\nTITLE: SQL Server 2005 Persistence Adapter Configuration (XML)\nDESCRIPTION: Configures the persistence adapter to use SQL Server 2005.  It is similar to the SQL Server 2000 configuration, utilizing the journaledJDBC adapter with the imageBasedJDBCAdaptor and referencing the mssql-ds bean. The dataDirectory attribute specifies the location of the data files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sqlserver.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n  <journaledJDBC journalLogFiles=\"5\" dataDirectory=\"../activemq-data\" dataSource=\"#mssql-ds\">\n    <adapter><imageBasedJDBCAdaptor/></adapter>\n  </journaledJDBC>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Extracting a tar.gz Archive\nDESCRIPTION: This snippet shows how to extract a `tar.gz` archive using the `tar` command in a Unix environment. This is commonly used to extract the ActiveMQ Classic distribution after downloading it.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\\> tar zxvf activemq-x.x.x.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination URI Parameters - C#\nDESCRIPTION: This snippet demonstrates configuring destination URI parameters when creating a topic. It sets consumer-specific options such as prefetch size and noLocal flag directly in the topic name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/uri-configuration.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nd = session.CreateTopic(\"com.foo?consumer.prefetchSize=2000&consumer.noLocal=true\");\n```\n\n----------------------------------------\n\nTITLE: Oldest Message with Lowest Priority Eviction Strategy Configuration\nDESCRIPTION: This XML snippet configures the OldestMessageWithLowestPriorityEvictionStrategy.  This strategy evicts the oldest message with the lowest priority when a slow consumer exceeds its pending message limit. This allows for prioritizing higher priority messages over older, lower priority ones.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/slow-consumer-handling.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<oldestMessageWithLowestPriorityEvictionStrategy/>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet demonstrates a basic Java object instantiation. It creates a new instance of the SomeJava class, showcasing a simple Java code usage example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.15.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic (Windows)\nDESCRIPTION: This command starts the ActiveMQ Classic broker in a Windows environment. It executes the `activemq start` command within the `bin` directory of the installation.  This initiates the ActiveMQ Classic broker as a foreground process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_12\n\nLANGUAGE: Batchfile\nCODE:\n```\nbin\\activemq start\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Topic Configuration Example\nDESCRIPTION: This example shows how to configure a topic within a virtual host in ActiveMQ Apollo. It sets the `slow_consumer_policy` to `queue` and configures a nested subscription with a specific tail buffer size.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n...\n  <virtual_host id=\"default\">\n    ...\n    <topic id=\"example\" slow_consumer_policy=\"queue\">\n      <subscription tail_buffer=\"4k\"/>\n    </topic>\n    ...\n  </virtual_host>\n...\n```\n\n----------------------------------------\n\nTITLE: Building the Site with Maven Site Plugin\nDESCRIPTION: This command builds the project's website using the Maven site plugin. The -Prelease profile is specified to configure the staging location from the settings.xml file. This step is performed from the checked-out tag in target/checkout.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd target/checkout\nmvn site -Prelease\n```\n\n----------------------------------------\n\nTITLE: Building the ActiveMQ Classic Performance Plugin with Maven (Shell)\nDESCRIPTION: These commands are used to build and install the ActiveMQ Classic Performance plugin from the source code. First navigate to the `activemq-tooling` directory, then execute the maven `clean install` goal.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-performance-module-users-manual.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd activemq-tooling\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatch Async at Consumer using Destination URI C#\nDESCRIPTION: This snippet demonstrates how to configure the dispatchAsync setting for a specific consumer using the Destination URI. This overrides settings configured at the Connection and ConnectionFactory levels. Setting consumer.dispatchAsync=false will cause this consumer to receive messages synchronously.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/consumer-dispatch-async.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar queue = new ActiveMQQueue(\"TEST.QUEUE?consumer.dispatchAsync=false\");\nvar consumer = session.CreateConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP\nDESCRIPTION: These commands are used to verify the integrity of the downloaded ActiveMQ files using PGP. First, the KEYS file is added to the keyring, then the signature file is verified against the downloaded archive. This process ensures that the downloaded file has not been tampered with.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-01.md#_snippet_0\n\nLANGUAGE: PGP\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Delete a Queue\nDESCRIPTION: Deletes a queue. A DELETE request to the queue's URL, like /queues/foo.bar, returns a 200 OK response indicating successful deletion.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /queues/foo.bar\n-------------------->\n\n200 OK\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: FrameTranslator Implementation in ActiveMQ Classic\nDESCRIPTION: This Java code illustrates how to create a custom `FrameTranslator` in ActiveMQ Classic for message transformations. It shows the necessary class entry in the `META-INF/services` directory to associate a custom transformer with a specific header value.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclass=org.apache.activemq.transport.stomp.XStreamFrameTranslator\n```\n\n----------------------------------------\n\nTITLE: Custom VirtualHost Module Index\nDESCRIPTION: This snippet shows the contents of the virtual host `dto-module.index` resource file, containing the class name of the DtoModule implementation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nexample.Module\n```\n\n----------------------------------------\n\nTITLE: SSL Client-Server Connection\nDESCRIPTION: This snippet demonstrates how to secure the connection between clients and a Message Broker using SSL. SSL provides encrypted communication for sensitive data transmission.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-topologies.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nssl://somehost:port\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for KahaDB Cleanup Tracing\nDESCRIPTION: This log4j configuration enables TRACE level logging for the `org.apache.activemq.store.kahadb.MessageDatabase` class. This provides detailed insight into the KahaDB cleanup process, allowing you to determine why specific data files are considered in-use and not cleaned up. The logs are written to `data/kahadb.log`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/why-do-kahadb-log-files-remain-after-cleanup.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.appender.kahadb=org.apache.log4j.RollingFileAppender\nlog4j.appender.kahadb.file=${activemq.base}/data/kahadb.log\nlog4j.appender.kahadb.maxFileSize=1024KB\nlog4j.appender.kahadb.maxBackupIndex=5\nlog4j.appender.kahadb.append=true\nlog4j.appender.kahadb.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kahadb.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\nlog4j.logger.org.apache.activemq.store.kahadb.MessageDatabase=TRACE, kahadb\n```\n\n----------------------------------------\n\nTITLE: Throwable Type Encoding in OpenWire\nDESCRIPTION: This snippet describes how Throwable objects (exceptions) are encoded in OpenWire. Null Throwables are represented by a single '0' byte. Non-null Throwables include the exception class name, message, and optionally stack trace information (if the StackTraceEnabled option is enabled).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n             [=If not-null is 1===========================================================================]\n             [                               [=If StackTraceEnabled option is enabled.==================] ]\n             [                               [             [=Repeated size times======================] ] ]\n+----------+ [ +----------------+---------+  [ +-------+ [ +--------+--------+--------+-------------+ ] ] ]\n| not-null | [ | exception-name | message |  [ | size  | [ | class  | method | file   | line-number | ] ] ]\n+----------+ [ +----------------+---------+  [ +-------+ [ +--------+--------+--------+-------------+ ] ] ]\n| byte     | [ | string         | string  |  [ | short | [ | string | string | string | int         | ] ] ]\n+----------+ [ +----------------+---------+  [ +-------+ [ +--------+--------+--------+-------------+ ] ] ]\n             [                               [           [============================================] ] ]\n             [                               [==========================================================] ]\n             [============================================================================================]\n```\n\n----------------------------------------\n\nTITLE: Fully Configuring Broker in Java\nDESCRIPTION: This snippet demonstrates how to fully configure a broker through application code, including setting the broker name, disabling the shutdown hook, adding plugins (like JaasAuthenticationPlugin), and adding network connectors. It emphasizes the importance of adding plugins before connectors for proper initialization.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\nbroker.setBrokerName(\"fred\");\nbroker.setUseShutdownHook(false);\n//Add plugin\nbroker.setPlugins(new BrokerPlugin[]{new JaasAuthenticationPlugin()});\n//Add a network connection\nNetworkConnector connector = answer.addNetworkConnector(\"static://\"+\"tcp://somehost:61616\");\nconnector.setDuplex(true);\nbroker.addConnector(\"tcp://localhost:61616\");\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet provides the Maven dependency configuration required to include the ActiveMQ Classic core library in a Maven project. It specifies the groupId, artifactId, and version of the dependency.  The version is set to 5.4.2.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-02.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.4.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Store Status JSON Response\nDESCRIPTION: This JSON snippet shows the structure of the response when querying for the store status of a virtual host.  The `@class` field indicates the store implementation (e.g., bdb_store_status). The other fields represent metrics related to message storage and retrieval.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@class\": \"bdb_store_status\",\n  \"id\": \"bdb store at /Users/chirino/opt/default/data\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314573798939,\n  \"canceled_message_counter\": 0,\n  \"flushed_message_counter\": 581034,\n  \"canceled_enqueue_counter\": 0,\n  \"flushed_enqueue_counter\": 581034,\n  \"message_load_latency\": {\n    \"count\": 0,\n    \"total\": 0,\n    \"max\": 0,\n    \"min\": 0\n  },\n  \"flush_latency\": {\n    \"count\": 0,\n    \"total\": 0,\n    \"max\": 0,\n    \"min\": 0\n  },\n  \"pending_stores\": 0,\n  \"message_load_batch_size\": {\n    \"count\": 0,\n    \"total\": 0,\n    \"max\": -2147483648,\n    \"min\": 2147483647\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Protocol Detection for MQTT and Openwire\nDESCRIPTION: This snippet shows how to limit protocol detection on a connector to only MQTT and Openwire.  This configuration allows the connector to automatically detect only these specified protocols. Other protocols will be ignored. The `protocols` attribute is space delimited.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt-manual.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <detect protocols=\"mqtt openwire\" />\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Creating Browsing Subscription - STOMP\nDESCRIPTION: This example shows how to create a browsing subscription using the `browser:true` header in a STOMP `SUBSCRIBE` frame. Browsing subscriptions allow reading messages from a queue without consuming them.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_13\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\nbrowser:true\ndestination:/queue/foo\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP/GPG\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of downloaded files using PGP or GPG.  The user must first download the KEYS file and the .asc signature file. The commands import the keys and then verify the signature against the downloaded file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-12-02.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Integration Test EAR Module\nDESCRIPTION: This command navigates to the `systest/itests/ear` directory and uses Maven to build and deploy the Integration Test EAR module. The `-Dgeronimo.home=geronimo-home` option specifies the Geronimo home directory, which is needed for deployment configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integration-tests.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd systest/itests/ear\nmaven -Dgeronimo.home=geronimo-home\n```\n\n----------------------------------------\n\nTITLE: Git Tag Checkout\nDESCRIPTION: This snippet provides instructions on how to clone the ActiveMQ-cpp repository and checkout the specific tag for the 3.8.2 release using Git. This allows users to obtain the exact source code version associated with the CMS 3.8.2 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/382-release.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/activemq-cpp-3.8.2\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Debug Logging Output\nDESCRIPTION: This snippet demonstrates the output in the console after enabling DEBUG level logging. Notice the additional DEBUG messages compared to the INFO level output. This is helpful for troubleshooting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-the-logging.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nINFO  WebConsoleStarter              - ActiveMQ WebConsole initialized.\nINFO  /admin                         - Initializing Spring FrameworkServlet 'dispatcher'\nINFO  log                            - ActiveMQ Console at http://0.0.0.0:8161/admin\nINFO  log                            - ActiveMQ Web Demos at http://0.0.0.0:8161/demo\nINFO  log                            - RESTful file access application at http://0.0.0.0:8161/fileserver\nINFO  log                            - Started SelectChannelConnector@0.0.0.0:8161\nINFO  FailoverTransport              - Successfully connected to tcp://localhost:61616\nDEBUG InactivityMonitor              - 10000 ms elapsed since last write check.\nDEBUG InactivityMonitor              - 10000 ms elapsed since last write check.\nDEBUG AbstractRegion                 - Removing consumer: ID:mongoose.local-56517-1224026019987-0:0:-1:1\nDEBUG AbstractRegion                 - Removing consumer: ID:mongoose.local-56511-1224026011897-0:0:1:1\nDEBUG TransportConnection            - Stopping connection: /127.0.0.1:56518\nDEBUG TcpTransport                   - Stopping transport tcp:///127.0.0.1:56518\nDEBUG TransportConnection            - Stopped connection: /127.0.0.1:56518\nDEBUG TransportConnection            - Connection Stopped: /127.0.0.1:56518\nDEBUG AbstractRegion                 - Removing consumer: ID:mongoose.local-56511-1224026011897-0:0:-1:1\nDEBUG TransportConnection            - Stopping connection: /127.0.0.1:56512\nDEBUG TcpTransport                   - Stopping transport tcp:///127.0.0.1:56512\nDEBUG TransportConnection            - Stopped connection: /127.0.0.1:56512\nDEBUG TransportConnection            - Connection Stopped: /127.0.0.1:56512\nDEBUG InactivityMonitor              - 9999 ms elapsed since last write check.\nDEBUG InactivityMonitor              - 10000 ms elapsed since last write check.\nDEBUG InactivityMonitor              - 29999 ms elapsed since last read check.\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet shows the instantiation of a `SomeJava` object. It assumes that the `SomeJava` class is defined elsewhere in the project and accessible in the current scope. This code demonstrates a basic object creation in Java.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.21.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Extracting ActiveMQ Classic RAR - Shell\nDESCRIPTION: This command extracts the contents of the ActiveMQ Classic Resource Adapter (RAR) file into the directory created in the previous step. The `jar xvf` command is used to expand the RAR archive, making its configuration files and libraries directly accessible for modification and deployment within the JBoss environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\njar xvf /opt/incubator-activemq-4.0.2/lib/optional/activemq-ra-4.0.2.rar\n  created: META-INF/\n inflated: META-INF/MANIFEST.MF\n inflated: META-INF/DISCLAIMER.txt\n inflated: META-INF/LICENSE.txt\n inflated: META-INF/ra.xml\n inflated: broker-config.xml\n inflated: activemq-ra-4.0.2.jar\n inflated: activemq-core-4.0.2.jar\n inflated: activeio-core-3.0-beta4.jar\n inflated: derby-10.1.1.0.jar\n inflated: spring-1.2.6.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO Transport in ActiveMQ Classic Broker XML\nDESCRIPTION: This snippet demonstrates how to configure the NIO transport within an ActiveMQ Classic broker's XML configuration file. The `uri` attribute specifies the address and port for the NIO transport connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-4-connection-uris.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio\" uri=\"nio://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures (GPG)\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures and GPG.  It involves importing the KEYS file and then verifying the signature of the downloaded archive. Replace `<version>` with the appropriate version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Encrypting Text with ActiveMQ Classic\nDESCRIPTION: Encrypts the given text using the provided password.  Requires the `--password` and `--input` parameters.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq encrypt --password TESTPASSWORD --input FOOBAR\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout for ActiveMQ CPP 3.2.3\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ CPP 3.2.3 tag from the Apache Subversion repository. It uses the `svn co` command to copy the specified tag URL to the local machine. This allows developers to access the exact version of the codebase corresponding to the 3.2.3 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/323-release.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.3/\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Domains in ActiveMQ Apollo (XML)\nDESCRIPTION: This XML snippet shows how to configure authentication domains at the broker and virtual host levels in ActiveMQ Apollo. It demonstrates how to specify different authentication domains for different virtual hosts and how to disable authentication for a specific virtual host. The `authentication` element specifies the JAAS domain to use for authentication, and the `enabled` attribute can be used to disable authentication.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/activemq/apollo\">\n  <authentication domain=\"internal\"/>\n\n  <virtual_host id=\"wine.com\">\n    <authentication domain=\"external\"/>\n    <host_name>wine.com</host_name>\n  </virtual_host>\n\n  <virtual_host id=\"internal.wine.com\">\n    <host_name>internal.wine.com</host_name>\n  </virtual_host>\n\n  <virtual_host id=\"test\">\n    <authentication enabled=\"false\"/>\n    <host_name>cheeze.com</host_name>\n  </virtual_host>\n\n  <connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\"/>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Startup Log Output\nDESCRIPTION: This is an example of the log output that indicates ActiveMQ Classic has successfully started. It shows the broker version, the URL to the ActiveMQ Classic website, the database driver, journal persistence information, and the transport connector configuration.  The logs indicate successful startup and connection details.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nINFO  BrokerService                  - ActiveMQ 4.0.1 JMS Message Broker (localhost) is starting\nINFO  BrokerService                  - For help or more information please see:\n                                           http://incubator.apache.org/activemq/\nINFO  JDBCPersistenceAdapter         - Database driver recognized: \\[apache_derby_embedded_jdbc_driver\\]\nINFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active Journal: using 5 x 20.0 Megs at:\n                                           /data/server/bea/weblogic920/domains/test/activemq-data/journal\nINFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in transactions recovered.\nINFO  TransportServerThreadSupport   - Listening for connections at: tcp://0.0.0.0:60010\nINFO  TransportConnector             - Connector default Started\nINFO  BrokerService                  - ActiveMQ JMS Message Broker\n                                           (localhost, ID:remus-28763-1156532531109-1:0) started\n```\n\n----------------------------------------\n\nTITLE: Adding JMS Selector to Listener - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to add a JMS selector to an `amq.addListener` call. The selector filters messages so that the client only receives messages with the `identifier` header set to `TEST`. This allows clients to subscribe to a subset of messages based on message properties.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ajax.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\namq.addListener( myId, myDestination, myHandler.rcvMessage, { selector:\"identifier='TEST'\" } );\n```\n\n----------------------------------------\n\nTITLE: Copying Release Files to SVN Dist Release Folder\nDESCRIPTION: This SVN command copies the staged release files from the SVN dist dev folder to the SVN dist release folder. This makes the release available for download by users.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsvn cp -m \"add files for activemq-<version>\" https://dist.apache.org/repos/dist/dev/activemq/activemq/<version> https://dist.apache.org/repos/dist/release/activemq/<version>\n# Example: svn cp -m \"add files for activemq-5.15.1\" https://dist.apache.org/repos/dist/dev/activemq/activemq/5.15.1 https://dist.apache.org/repos/dist/release/activemq/5.15.1\n```\n\n----------------------------------------\n\nTITLE: Running Tests via Maven (Headless)\nDESCRIPTION: These commands execute different goals within a Maven project for ActiveMQ. The 'activemq:broker' goal likely starts a broker instance as part of the integration test. The 'activemq:perf-producer' and 'activemq:perf-consumer' goals execute producer and consumer applications, respectively, with configurable parameters like message count, queue destination, and broker URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/example-testing-scenario.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn activemq:broker\nmvn activemq:perf-producer -Dmessage-count=5000 -Dqueue=true -Ddestination=org.foo.bar -Durl=tcp://$hostA:61616\nmvn activemq:perf-consumer -Dmessage-count=5000 -Dqueue=true -Ddestination=org.foo.bar -Durl=tcp://$hostA:61616\n```\n\n----------------------------------------\n\nTITLE: Initializing ShiroPlugin with Custom SecurityManager (Spring XML)\nDESCRIPTION: This snippet illustrates how to initialize the ShiroPlugin with a custom SecurityManager in a Spring XML configuration. The `shiroSecurityManager` bean defines realms and other security settings, which are then referenced by the `shiroPlugin` bean. This configuration allows for fine-grained control over security policies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<beans ...>\n    <broker ...>\n        <plugins>\n        \n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <property name=\"securityManager\" ref=\"shiroSecurityManager\"/>\n            </bean>\n \n        </plugins>\n    </broker>\n\n    <bean id=\"shiroSecurityManager\" class=\"org.apache.shiro.mgt.DefaultSecurityManager\">\n        <property name=\"realms\">\n            <list>\n                <bean id=\"myRealm\" class=\"...\">\n                    ...\n                </bean>\n                ... maybe more Realm beans ...\n            </list>\n        </property>\n    </bean>\n    <bean class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Deploy Application (asadmin)\nDESCRIPTION: This command deploys the EAR file (myapp.ear) to SJSAS using the asadmin tool.  The '--name myapp' option specifies the application name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasadmin deploy --name myapp myapp.ear\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveMQ Classic as Windows NT Service\nDESCRIPTION: This snippet describes how to install the ActiveMQ Classic broker as a Windows NT service using the InstallService.bat script. The batch file is located in the ACTIVEMQ_HOME/bin/win32 directory. Running the script adds the ActiveMQ Classic service to the list of NT services.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/java-service-wrapper.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nACTIVEMQ_HOME/bin/win32/InstallService.bat\n```\n\n----------------------------------------\n\nTITLE: Cloning ActiveMQ Classic Git Repository\nDESCRIPTION: This command clones the ActiveMQ Classic source code from the Apache Git repository. It requires Git to be installed on your system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/source.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone [https://git-wip-us.apache.org/repos/asf/activemq.git](https://git-wip-us.apache.org/repos/asf/activemq.git)\n```\n\n----------------------------------------\n\nTITLE: Embedded Derby DataSource Sample Setup (Commented)\nDESCRIPTION: This commented-out example shows how to configure an Embedded Derby DataSource for ActiveMQ Classic.  It defines a bean using `org.apache.derby.jdbc.EmbeddedDataSource` and sets the database name and create database properties. This configuration is often used for testing or development purposes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-master-slave.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- \n  <bean id=\"derby-ds\" class=\"org.apache.derby.jdbc.EmbeddedDataSource\">\n    <property name=\"databaseName\" value=\"derbydb\"/>\n    <property name=\"createDatabase\" value=\"create\"/>\n  </bean>\n  -->\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer with Message Selector - ActiveMQ\nDESCRIPTION: A consumer is created with a message selector that filters messages based on properties. Only messages where the 'intended' property has a value of 'me' will be delivered to this consumer. The selector string uses SQL92 syntax.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nsession.createConsumer(destination, \"intended = 'me'\");\n```\n\n----------------------------------------\n\nTITLE: Disabling ActiveMQ File Server in jetty.xml\nDESCRIPTION: This snippet demonstrates how to disable the fileserver functionality in Apache ActiveMQ to mitigate CVE-2015-1830. By commenting out or removing this configuration block from the `conf\\jetty.xml` file, the vulnerable fileserver component is disabled, preventing unauthorized file uploads and potential remote code execution. This is a viable workaround if upgrading to a patched version is not immediately possible.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/security-advisories.data/CVE-2015-1830-announcement.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean class=\"org.eclipse.jetty.webapp.WebAppContext\">\n    <property name=\"contextPath\" value=\"/fileserver\" />\n    <property name=\"resourceBase\" value=\"${activemq.home}/webapps/fileserver\" />\n    <property name=\"logUrlOnStart\" value=\"true\" />\n    <property name=\"parentLoaderPriority\" value=\"true\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connector with Destination Filter in ActiveMQ\nDESCRIPTION: This snippet shows how to configure a network connector with a specific destination filter to control which consumers the broker is interested in. This is useful for managing advisory traffic and load on the brokers, especially in large networks. Requires ActiveMQ Classic prior to 5.6 configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector uri=\"static:(tcp://host)\" destinationFilter=\"Queue.include.test.foo,ActiveMQ.Advisory.Consumer.Topic.include.test.bar\">\n  <dynamicallyIncludedDestinations>\n    <queue physicalName=\"include.test.foo\"/>\n    <topic physicalName=\"include.test.bar\"/>\n  </dynamicallyIncludedDestinations>\n</networkConnector>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: A simple Java code snippet showing instantiation of SomeJava object. Assumed usage within ActiveMQ project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.6.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Initializing ActiveMQ Classic with JavaScript\nDESCRIPTION: This JavaScript snippet initializes the ActiveMQ Classic connection using the `org.activemq.Amq.init` function. It sets the URI, enables logging, sets a timeout, and assigns a client ID.  The `org.activemq.Chat.init` function is also called to initialize the chat application.  It is typically called during the window's onload event.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/chat.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note, normally you wouldn't just add an onload function in this \n// manner. In fact, you typically want to fire this method on the \n// document.onready event, however this type of functionality is verbose // and best left to the domain of your favorite js library. \n// \n// For example, in jQuery the following onload would be replaced with: \n// jQuery(function() { \n// org.activemq.Amq.init({ uri: 'amq' }); \n// org.activemq.Chat.init(); \n// } window.onload = function() { org.activemq.Amq.init({ uri: 'amq', logging: true, timeout: 45, clientId:(new Date()).getTime().toString() }); org.activemq.Chat.init(); };\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic Broker\nDESCRIPTION: Starts the ActiveMQ Classic broker in the background using the specified configuration file.  It saves the process ID in the `${ACTIVEMQ_DATA_DIR}/activemq.pid` file. The command takes command-line arguments similar to the original `activemq` script.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq start xbean:conf/activemq-stomp.xml\n```\n\n----------------------------------------\n\nTITLE: Scheduling Message with CRON ActiveMQ Stomp C#\nDESCRIPTION: This code demonstrates how to schedule a message for delivery using a CRON expression. It sets the `AMQ_SCHEDULED_CRON` property to a CRON expression that specifies the delivery schedule. In this example, the message is scheduled to be delivered every hour (0 * * * *).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/stomp/advanced-features/stomp-delayed-and-scheduled-message-feature.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nmessage.Properties[\"AMQ_SCHEDULED_CRON\"] = \"0 * * * *\";\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic from Maven\nDESCRIPTION: This snippet shows how to run the ActiveMQ Classic broker from within Maven. It assumes you are in the correct directory within the source distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd modules/assembly\nmaven server\n```\n\n----------------------------------------\n\nTITLE: JMS Server Response Handling\nDESCRIPTION: This snippet shows the server-side implementation for handling a request and sending a response. It retrieves the correlation ID from the request, sets it on the response, and sends the response to the destination specified in the JMSReplyTo field of the request. This ensures the client receives the response corresponding to its request.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-should-i-implement-request-response-with-jms.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void onMessage(Message request) {\n\n  Message response = session.createMessage();\n  response.setJMSCorrelationID(request.getJMSCorrelationID())\n\n  producer.send(request.getJMSReplyTo(), response)\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet demonstrates an XML configuration example, likely for ActiveMQ. It shows a basic XML structure that could be used to configure various aspects of the message broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.19.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Configuring Journaled JDBC Data Directory Using Property Placeholder\nDESCRIPTION: This snippet modifies the `dataDirectory` attribute of the `journaledJDBC` element to use a system property (`${jboss.server.data.dir}`) for the location of the data directory. This allows the data directory to be configured dynamically based on the JBoss server configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n${jboss.server.data.dir}/activemq\n```\n\n----------------------------------------\n\nTITLE: Configuring MDB with ActiveMQ Classic RA in EJB3 (JBoss)\nDESCRIPTION: This code snippet demonstrates how to configure a Message-Driven Bean (MDB) to consume messages from an ActiveMQ Classic queue on a JBoss application server. It utilizes annotations to define the destination type, destination name, and acknowledgement mode. The `@ResourceAdapter` annotation specifies the ActiveMQ Classic Resource Adapter (RA) file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/using-activemq-with-ejb3-jboss-example.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.jboss.annotation.ejb.ResourceAdapter;\n\n@MessageDriven(activationConfig = {  \n   @ActivationConfigProperty(propertyName=\"destinationType\", propertyValue=\"javax.jms.Queue\"),  \n   @ActivationConfigProperty(propertyName=\"destination\", propertyValue=\"FOO.TEST\"),  \n   @ActivationConfigProperty(propertyName=\"acknowledgeMode\", propertyValue=\"Auto-acknowledge\")  \n})  \n@ResourceAdapter(\"activemq-rar-4.1.1.rar\")  \npublic class TestBean implements MessageListener {\n\n   public TestBean() {  \n   }\n\n   public void onMessage(Message message) {  \n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Destinations Plugin in ActiveMQ\nDESCRIPTION: This XML snippet configures the `destinationsPlugin` in ActiveMQ. It specifies the location where the broker will save the destination configurations. The plugin saves all destinations to the defined location when the broker stops, and if a file exists in the specified location on startup, the listed destinations will be pre-created.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/destinations-plugin.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n    <destinationsPlugin location=\"/workspace/destinations\"/>\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 2.1.3\nDESCRIPTION: This snippet provides the SVN command to checkout the ActiveMQ-CPP client library version 2.1.3 from the Apache repository. It allows users to directly access the source code for this specific release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/213-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1.3/\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Activation Specification in ra.xml\nDESCRIPTION: This snippet from `ra.xml` defines the `ActiveMQActivationSpec` and its required configuration properties: `Destination` and `DestinationType`. These properties are linked to the activation configuration in the `ejb-jar.xml` file, facilitating the connection between the MDB and the ActiveMQ Classic resource adapter.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/inbound-communication.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<inbound-resourceadapter>\n  ...\n     <activationspec>\n        <activationspec-class>org.activemq.ra.ActiveMQActivationSpec</activationspec-class>\n        <required-config-property>\n           <config-property-name>Destination</config-property-name>\n        </required-config-property>\n        <required-config-property>\n           <config-property-name>DestinationType</config-property-name>\n        </required-config-property>\n     </activationspec>\n  ...\n</inbound-resourceadapter>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg (Shell)\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `gpg` tool. It imports the KEYS file and then verifies the signature against the distribution file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-03.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Detection Timeout (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure the protocol detection timeout for the AUTO transport. It sets the `protocolDetectionTimeOut` parameter to 5000 milliseconds (5 seconds), allowing the broker to kill connections that do not complete protocol initialization within that timeframe.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto\" uri=\"auto://localhost:5671?protocolDetectionTimeOut=5000\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Eclipse Project Files with Maven\nDESCRIPTION: This snippet demonstrates how to use the Maven Eclipse plugin to generate project files for the Eclipse IDE. This facilitates importing the ActiveMQ Classic source code into Eclipse for development and debugging.  It relies on the `eclipse:eclipse` goal of the Maven Eclipse plugin.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn eclipse:eclipse\n```\n\n----------------------------------------\n\nTITLE: application.xml Configuration for EAR Deployment\nDESCRIPTION: This XML configuration file (application.xml) defines the structure of the EAR file for deployment in SJSAS. It specifies the modules included in the EAR, such as the EJB module (mymodules.jar) containing the MDB and the connector module (genericra.rar) representing the GenericJMSRA.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<application\n    xmlns=\"http://java.sun.com/xml/ns/javaee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/application_5.xsd\"\n    version=\"5\">\n  <description>Example DD</description>\n  <display-name>sample app with amq and genericra</display-name>\n  <module>\n    <ejb>mymodules.jar</ejb>\n  </module>\n  <module>\n    <connector>genericra.rar</connector>\n  </module>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ-CPP 3.8.0 from Git\nDESCRIPTION: This snippet demonstrates how to clone the ActiveMQ-CPP repository from Apache's Gitbox, navigate to the repository directory, and checkout the specific tag for version 3.8.0. This allows developers to obtain the exact source code for the 3.8.0 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/380-release.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/activemq-cpp-3.8.0\n```\n\n----------------------------------------\n\nTITLE: Navigating to ActiveMQ Install Directory (Windows)\nDESCRIPTION: This command changes the current directory in the command prompt to the ActiveMQ Classic installation directory on Windows. This is a prerequisite for running the ActiveMQ Classic startup script.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Session with CLIENT_ACKNOWLEDGE in C++\nDESCRIPTION: This code snippet shows how to create a CMS session with the CLIENT_ACKNOWLEDGE mode. It initializes a connection factory and connection, then creates a session by calling the createSession() method with the cms::Session::CLIENT_ACKNOWLEDGE argument. This allows the client to manually acknowledge messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory( \n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\nstd::auto_ptr<cms::Session> session( connection->createSession( cms::Session::CLIENT_ACKNOWLEDGE ) );\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version - Shell\nDESCRIPTION: This snippet checks the installed Java version. It's crucial to verify that Java 1.5 or later is correctly installed and accessible in the system's PATH before proceeding with the JBoss and ActiveMQ Classic installation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ java -version\njava version \"1.5.0_06\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_06-112)\nJava HotSpot(TM) Client VM (build 1.5.0_06-64, mixed mode, sharing)\n```\n\n----------------------------------------\n\nTITLE: Java Object Initialization\nDESCRIPTION: This snippet initializes a Java object. It creates a new instance of the `SomeJava` class. The class `SomeJava` needs to be defined elsewhere in the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.17.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Broker Service - Accessing Options Scala\nDESCRIPTION: This snippet demonstrates how to access the `<options>` element defined within the service configuration using the `config.other` field.  It shows how to cast the configuration to a DOM `Element`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nval options = config.other.get(1).asInstanceOf[Element]\n```\n\n----------------------------------------\n\nTITLE: Changing Permissions of activemq Script (Unix)\nDESCRIPTION: This command changes the permissions of the `activemq` script to make it executable. It uses the `chmod` command with the 755 permission set.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]/bin where [activemq_install_dir] is the directory in which ActiveMQ Classic was installed. chmod 755 activemq\n```\n\n----------------------------------------\n\nTITLE: String Type Encoding in OpenWire\nDESCRIPTION: This snippet shows how strings are encoded in OpenWire. A null string is represented by a single '0' byte. Non-null strings are prefixed with a not-null byte (1) and a short indicating the size of the UTF-8 encoded string, followed by the string data itself.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n             [=If not-null is 1===========]\n+----------+ [ +-------+----------------+ ]\n| not-null | [ | size  | encoded-string | ]\n+----------+ [ +-------+----------------+ ]\n| byte     | [ | short | size octects   | ]\n+----------+ [ +-------+----------------+ ]\n             [============================]\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ-CPP 3.6.0 tag from the Apache SVN repository. It allows developers to obtain the exact source code corresponding to this release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/360-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.6.0/\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Cursors in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows how to configure the cursor policy for a queue in ActiveMQ Classic.  It configures the queue to use a vmQueueCursor. It also sets up a deadLetterStrategy for handling failed messages with a specified queuePrefix.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-cursors.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n      <policyMap>\n        <policyEntries>\n          <policyEntry queue=\"org.apache.>\">\n            <deadLetterStrategy>\n              <individualDeadLetterStrategy queuePrefix=\"Test.DLQ.\"/>\n            </deadLetterStrategy>\n            <pendingQueuePolicy>\n            \t<vmQueueCursor />\n            </pendingQueuePolicy>\n          </policyEntry>\n        </policyEntries>\n      </policyMap>\n </destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with GPG\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using GPG signatures. The first command imports the public key, and the second verifies the signature of the downloaded file. These commands require the `gpg` utility.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-01.md#_snippet_2\n\nLANGUAGE: GPG\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Creating ActiveMQ Classic Deploy Directory\nDESCRIPTION: This snippet demonstrates how to create a directory within the JBoss deploy directory for the ActiveMQ Classic resource adapter. This is done to facilitate easy configuration changes during development. Creating a directory isn't mandatory, but it is the simplest approach for initial setup and testing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir /opt/jboss-4.0.4.GA/server/default/deploy/activemq-ra.rar\n$ cd /opt/jboss-4.0.4.GA/server/default/deploy/activemq-ra.rar\n$ pwd\n/opt/jboss-4.0.4.GA/server/default/deploy/activemq-ra.rar\n```\n\n----------------------------------------\n\nTITLE: Disabling Broker Auto-Creation in Java\nDESCRIPTION: This Java code creates an ActiveMQConnectionFactory and disables the automatic creation of the broker using the create=false flag. This allows to control when the broker is created and is useful in test scenarios or when the broker is managed by another part of the application.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"vm://localhost?create=false\");\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CPP 1.0\nDESCRIPTION: This command checks out the ActiveMQ CPP version 1.0 source code from the Apache Subversion repository.  It retrieves the code from the specified SVN URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/10-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-1.0/\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Broker with Custom XML (AMQ 3.x)\nDESCRIPTION: This command demonstrates how to start an ActiveMQ Classic broker with a custom XML configuration file using the `activemq` command-line tool (AMQ 3.x). It requires the `myConfig.xml` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-configuration.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nactivemq myConfig.xml\n```\n\n----------------------------------------\n\nTITLE: Checkout SVN Tag for ActiveMQ CPP 3.4.0\nDESCRIPTION: This command checks out the ActiveMQ-CPP 3.4.0 tag from the Apache SVN repository. This allows developers to obtain the specific version of the source code associated with the 3.4.0 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/340-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.0/\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic (Unix)\nDESCRIPTION: This command starts the ActiveMQ Classic broker on Unix-like systems.  It executes the `activemq` script located in the `bin` directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq start\n```\n\n----------------------------------------\n\nTITLE: Enabling Advisory for Consumed Messages in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to enable the message consumed advisory for all topics in the ActiveMQ Classic Broker Configuration using the destination policy.  It configures the advisoryForConsumed attribute to true for all topics using a wildcard.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n<destinationPolicy>\n    <policyMap>\n       <policyEntries> \n           <policyEntry topic=\">\" advisoryForConsumed=\"true\"/>\n       </policyEntries>\n    </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Inactive Destination Log Message\nDESCRIPTION: This example shows the log message that ActiveMQ will print when an inactive destination is removed. It provides information about the queue name and the inactivity duration before removal.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/delete-inactive-destinations.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nINFO  Queue                          - TEST.QUEUE Inactive for longer than 30000 ms - removing ...\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic BrokerPlugin Implementation (Java)\nDESCRIPTION: This Java code snippet demonstrates the implementation of a simple `BrokerPlugin`. The `installPlugin` method is implemented to return an instance of a custom broker class (`MyBroker`), wrapping the original broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/interceptors.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activemq.broker.Broker;\nimport org.apache.activemq.broker.BrokerPlugin;\n\npublic class MyPlugin implements BrokerPlugin {\t\n        \n        public Broker installPlugin(Broker broker) throws Exception {            \n             return new MyBroker(broker);\n        }\t\n\n}\n```\n\n----------------------------------------\n\nTITLE: XML example\nDESCRIPTION: An example XML snippet, likely configuration or data representation for ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.6.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Logging via System Property (Bash)\nDESCRIPTION: This code snippet demonstrates how to enable audit logging in ActiveMQ Classic by setting the `org.apache.activemq.audit` system property. This property can be set in the ActiveMQ startup script. When set to 'true', 'entry', 'exit' or 'all', ActiveMQ will log all management actions performed through JMX or the Web Console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/audit-logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACTIVEMQ_OPTS=\"$ACTIVEMQ_OPTS -Dorg.apache.activemq.audit=true\"\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic in Background (Unix)\nDESCRIPTION: This command starts ActiveMQ Classic in the background using `nohup`, redirecting standard output and standard error to a log file. This allows ActiveMQ Classic to continue running even after the shell is closed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnohup bin/activemq &gt; /tmp/smlog 2&gt;&amp;1 &amp;\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with pgp Shell Commands\nDESCRIPTION: These commands verify the integrity of downloaded files using PGP signatures. They require the KEYS file and the corresponding .asc signature file for the distribution. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-01.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Defining Message Destination in ejb-jar.xml for ActiveMQ Classic\nDESCRIPTION: This XML snippet from ejb-jar.xml defines a message destination named 'LoggingQueue' within the assembly descriptor. This is a standard EJB deployment descriptor element used for defining message destinations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<assembly-descriptor>\n   ...\n   <message-destination>\n      <message-destination-name>LoggingQueue</message-destination-name>\n   </message-destination>\n   ...\n</assembly-descriptor>\n```\n\n----------------------------------------\n\nTITLE: Running Consumer via Command Line (Headless/Controller)\nDESCRIPTION: This command initiates a consumer application that listens for messages on a specified destination. It can be configured to consume from either a queue or a topic, and it supports specifying the number of messages to consume. The consumer connects to a broker instance at the given URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/example-testing-scenario.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava org.apache.activemq.test.ConsumerMain --message-count=5000 --queue=true --destination=org.foo.bar tcp://$hostA:61616\n```\n\n----------------------------------------\n\nTITLE: Browsing Subscription without End Message - STOMP\nDESCRIPTION: This example demonstrates how to create a browsing subscription that remains active and continues to listen for messages after the last message in the queue is reached. This is done by adding the `browser-end:false` header to the `SUBSCRIBE` frame.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_15\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\nbrowser:true\ndestination:/queue/foo\nbrowser-end:false\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Path Separator Plugin in ActiveMQ\nDESCRIPTION: This snippet demonstrates how to configure the DestinationPathSeparatorPlugin in ActiveMQ to use a custom path separator. It shows the XML configuration to add the plugin to the <plugins> section of the ActiveMQ configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/wildcards.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n   .....\n   <destinationPathSeparatorPlugin/>\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Destination\nDESCRIPTION: This snippet shows how a consumer can unsubscribe from a destination using an HTTP POST request. The consumer ID is used to identify the subscription to remove.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /unsubscribe/consumerId/Destination\n```\n\n----------------------------------------\n\nTITLE: Configuring reliable transport URI\nDESCRIPTION: This shows a URI that enables automatic reconnection if the broker goes down. This configuration should be set in the client connection string.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nreliable:tcp://host:port\n```\n\n----------------------------------------\n\nTITLE: Configuring Samplers with Maven\nDESCRIPTION: This command demonstrates how to configure Throughput and CPU samplers differently for a single test run using Maven. It overrides the default duration for each sampler using the sampler-specific prefixes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-performance-module-users-manual.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn activemq-perf:producer -DtpSampler.duration=10000 -DcpuSampler.duration=15000\n```\n\n----------------------------------------\n\nTITLE: PGP Signature Verification using pgp\nDESCRIPTION: These bash commands show how to verify the PGP signature of a downloaded file using the `pgp` tool. The KEYS file is imported, and then the signature file is verified against the downloaded binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-01-00.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Disabling Advisory Support in ActiveMQ Classic Broker\nDESCRIPTION: This snippet shows how to disable advisory support directly on the ActiveMQ Classic broker using XML configuration. This prevents the broker from generating advisory messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n<broker advisorySupport=\"false\">\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CPP 3.2.1\nDESCRIPTION: This command checks out the ActiveMQ CPP 3.2.1 tag from the Apache SVN repository.  It downloads the specified version of the codebase to the user's local machine, enabling developers to work with that specific release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/321-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.1/\n```\n\n----------------------------------------\n\nTITLE: Checkout Apache.NMS.ActiveMQ SVN Tag\nDESCRIPTION: This snippet provides the SVN command to checkout the Apache.NMS.ActiveMQ version 1.1.0 tag from the Apache SVN repository. It allows users to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v110.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.ActiveMQ/tags/1.1.0/\n```\n\n----------------------------------------\n\nTITLE: Spring JNDI Template Configuration\nDESCRIPTION: This Spring bean definition configures a JndiTemplate for accessing JNDI resources. It sets the environment properties, including the JNDI context factory, broker URL, and topic names.  This is ActiveMQ Classic's specific JNDI setup.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"jndiTemplate\" class=\"org.springframework.jndi.JndiTemplate\">\n    <property name=\"environment\">\n        <props>\n            <prop key=\"java.naming.factory.initial\">${jms.jndiContextFactory}</prop>\n\n\t\t\t<!\\-\\- Specific to ActiveMQ Classic -->\n\n\t\t\t<!\\-\\- the address of the ActiveMQ Classic broker -->\n            <prop key=\"brokerURL\">${jms.jndiProviderUrl}</prop>\n\t\t\t<!\\-\\- Some Topics Registration, since we are using a fake JNDI implementation -->\n            <prop key=\"topic.${jms.weatherTopic}\">${jms.weatherTopic}</prop>\n            <prop key=\"topic.${jms.weatherRequestsTopic}\">${jms.weatherRequestsTopic}</prop>\n\t\t</props>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Maven commands for clients using Zeroconf Discovery\nDESCRIPTION: These Maven commands show how clients can use Zeroconf discovery to locate brokers instead of using fixed URLs.  The broker needs to be running with Zeroconf enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/discovery.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmaven -o consumer -Durl=zeroconf:_activemq.broker.development.\nmaven -o producer  -Durl=zeroconf:_activemq.broker.development.\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with GPG\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded ActiveMQ files using GPG. It first imports the KEYS file and then verifies the signature of the downloaded archive. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-10.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with gpg Shell Commands\nDESCRIPTION: These commands verify the integrity of downloaded files using GPG signatures. They require the KEYS file and the corresponding .asc signature file for the distribution. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-01.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg (Shell)\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `gpg` command. It first imports the KEYS file and then verifies the signature of the specified archive file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-02.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: NAnt Shell Script\nDESCRIPTION: Creates a shell script named 'nant' that executes the NAnt.exe executable using Mono. This is a workaround for issues with running NAnt directly on some OS X systems.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/building.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\nexec /usr/bin/mono /path/to/nant/NAnt.exe \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ivy for ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet demonstrates the configuration of Ivy for managing dependencies in an ActiveMQ Classic project. It includes defining resolvers for local and remote repositories, specifying module-resolver rules, and setting default configurations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ivy-with-activemq-classic.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ivyconf>\n        <!--loads properties file as ivy variables, 0..n-->\n        <properties file=\"${ivy.conf.dir}/ivyconf-file.properties\" />\n        <!--configures ivy with some defaults, 0..1-->\n        <conf defaultResolver=\"localChain\" checkUpToDate=\"false\" />\n\n        <!--typedef:defines new types in ivy-->\n        <!--latest-strategies: defines latest strategies-->\n        <!--conflict-managers: defines conflicts managers-->\n\n        <!--defines dependency resolvers-->\n        <resolvers>\n             <chain name=\"localChain\" returnFirst=\"false\">\n                 <filesystem name=\"internal\" latest=\"latest-revision\">\n                        <ivy pattern=\"${repository.dir}/[organisation]/[module]/[type]s/ivy-[revision].xml\" />\n                        <artifact pattern=\"${repository.dir}/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]\" />\n                </filesystem>\n                <ivyrep name=\"ivyrep\"/>\n             </chain>\n             <ibiblio name=\"ibiblio\" pattern=\"[organisation]/jars/[module]-[revision].[ext]\"/>\n        </resolvers>\n\n        <!--defines rules between modules and dependency resolvers-->\n        <modules>\n                <module organisation=\"verticon\" name=\".*\" resolver=\"internal\" />\n                <module organisation=\"mandarax\" name=\".*\" resolver=\"internal\" />\n                <module organisation=\"geronimo-spec\" name=\".*\" resolver=\"ibiblio\" />\n                <module organisation=\"tomcat\" name=\".*\" resolver=\"ibiblio\" />\n        </modules>\n\n</ivyconf>\n```\n\n----------------------------------------\n\nTITLE: Using JMS resources with Apache TomEE\nDESCRIPTION: This code demonstrates how to inject JMS resources (Topic, Queue, ConnectionFactory) in a servlet within Apache TomEE, which comes pre-integrated with ActiveMQ Classic. It leverages the @Resource annotation for dependency injection, simplifying JMS resource access without manual JNDI lookups.  No additional configuration is needed as the integration is already done.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tomcat.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServlet;\nimport javax.jms.Topic;\nimport javax.jms.Queue;\nimport javax.jms.ConnectionFactory;\n\npublic class MyServet extends HttpServlet {\n\n    @Resource(name = \"foo\")\n    private Topic fooTopic;\n\n    @Resource(name = \"bar\")\n    private Queue barQueue;\n\n    @Resource\n    private ConnectionFactory connectionFactory;\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Dead Letter Strategy in ActiveMQ Classic (XML)\nDESCRIPTION: This XML configuration snippet shows how to set an individual dead letter strategy in the destination policy map of the `activemq.xml` file. It configures a dead letter queue prefix for all queues using a wildcard.  This allows for dedicated dead letter queues for each queue, enhancing manageability.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  \n  <destinationPolicy>\n    <policyMap>\n      <policyEntries>\n        <!-- Set the following policy on all queues using the '>' wildcard -->\n        <policyEntry queue=\">\">\n          <deadLetterStrategy>\n            <!--\n              Use the prefix 'DLQ.' for the destination name, and make\n              the DLQ a queue rather than a topic\n            -->\n            <individualDeadLetterStrategy queuePrefix=\"DLQ.\" useQueueForQueueMessages=\"true\"/>\n          </deadLetterStrategy>\n        </policyEntry>\n      </policyEntries>\n    </policyMap>\n  </destinationPolicy>\n  \n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL DataSource in activemq.xml\nDESCRIPTION: This XML snippet configures a MySQL DataSource for ActiveMQ Classic within the activemq.xml file. It defines the connection properties such as driver class, URL, username, password, and prepared statement pooling. The bean is defined using the Apache Commons DBCP library and is configured with a destroy-method to ensure proper resource cleanup.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-configure-a-new-database.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n  <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n  <property name=\"url\" value=\"jdbc:mysql://localhost/activemq\"/>\n  <property name=\"username\" value=\"activemq\"/>\n  <property name=\"password\" value=\"activemq\"/>\n  <property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker with XBean XML\nDESCRIPTION: This XML snippet demonstrates how to configure an ActiveMQ Classic broker using XBean. It defines the broker's persistence factory and transport connectors within a Spring bean configuration. This approach allows for mixing Spring and ActiveMQ Classic configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<beans \n  xmlns=\"http://www.springframework.org/schema/beans\" \n  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n\n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n  <broker useJmx=\"true\" xmlns=\"http://activemq.apache.org/schema/core\">\n\n    <persistenceFactory>\n      <kahaDB directory=\"${basedir}/target\" />\n    </persistenceFactory>\n\n    <transportConnectors>\n      <transportConnector uri=\"tcp://localhost:61636\" />\n    </transportConnectors>\n\n  </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Connector with Receive Buffer and Read Rate in ActiveMQ\nDESCRIPTION: This snippet demonstrates configuring a TCP connector in ActiveMQ with specific receive buffer size and maximum read rate.  The `receive_buffer_size` parameter sets the initial size of the socket receive buffer, and the `max_read_rate` parameter sets the maximum bytes per second that the transport will receive data at, throttling reads if necessary. These options are specified as query parameters in the `bind` URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613?receive_buffer_size=1024&amp;max_read_rate=65536\"/>\n```\n\n----------------------------------------\n\nTITLE: Deploying Resource Adapter - ActiveMQ Classic - Shell\nDESCRIPTION: Deploys the ActiveMQ resource adapter to Glassfish, allowing the application server to interact with the ActiveMQ broker. This command specifies the type as 'rar', assigns the name 'activemq-rar', and provides the path to the resource adapter file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-glassfish.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/asadmin deploy --type rar --name activemq-rar /tmp/activemq-rar-5.11.1.rar\n```\n\n----------------------------------------\n\nTITLE: Setting EXT_POST_CLASSPATH in startWebLogic.sh\nDESCRIPTION: This code snippet shows how to set the EXT_POST_CLASSPATH environment variable in the startWebLogic.sh file to include the ActiveMQ Classic configuration directory. This ensures that WebLogic can find the ActiveMQ Classic configuration files. The DOMAIN_HOME variable is assumed to be defined in the script before this line.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport EXT_POST_CLASSPATH=${DOMAIN_HOME}/activemq/config\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Durable Subscription - STOMP\nDESCRIPTION: This example shows how to subscribe to a durable subscription directly using the `/dsub/` prefix on the `destination` header in a STOMP `SUBSCRIBE` frame. This allows multiple clients to connect to the same durable subscription.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_12\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:0\ndestination:/dsub/mysub\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP (GPG)\nDESCRIPTION: These commands demonstrate how to verify the integrity of downloaded ActiveMQ files using PGP or GPG. The first command imports the KEYS file, and the second command verifies the downloaded archive using the corresponding .asc signature file. Replace `<version>` with the actual version number of the ActiveMQ release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Get Connection Details Example (JSON)\nDESCRIPTION: This example shows how to retrieve details about a specific connection using the REST API. It utilizes `curl` to send a GET request with authentication to the `/broker/connections/{connection}.json` endpoint and returns a JSON response containing connection details such as ID, state, addresses, protocol, user, and connection statistics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/connections/108.json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"108\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314574636579,\n  \"last_read_size\": 0,\n  \"last_write_size\": 32973,\n  \"read_counter\": 106,\n  \"write_counter\": 632923992,\n  \"connector: \"tcp\",\n  \"protocol\": \"stomp\",\n  \"protocol_version\": \"1.0\",\n  \"remote_address\": \"/127.0.0.1:51733\",\n  \"local_address\": \"/127.0.0.1:61613\",\n  \"user\": \"admin\",\n  \"waiting_on\": \"client request\",\n  \"subscription_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the SVN command to check out the ActiveMQ-CPP 3.5.0 tag from the Apache Subversion repository. It allows users to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/350-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.5.0/\n```\n\n----------------------------------------\n\nTITLE: Initializing ShiroPlugin with Custom Environment (Spring XML)\nDESCRIPTION: This snippet shows how to initialize the ShiroPlugin with a custom Shiro Environment instance in a Spring XML configuration. The `shiroEnvironment` bean, containing Shiro's configuration, is referenced by the `shiroPlugin` bean.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<beans ...>\n    <broker ...>\n        <plugins>\n        \n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <property name=\"environment\" ref=\"shiroEnvironment\"/>\n            </bean>\n \n        </plugins>\n    </broker>\n\n    <bean id=\"shiroEnvironment\" class=\"..\">\n        ... config here ...\n    </bean>\n    <bean class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout for ActiveMQ-CPP 1.1\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ-CPP 1.1 tag from the Apache Subversion repository. It allows users to access the specific version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/11-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-1.1/\n```\n\n----------------------------------------\n\nTITLE: Setting up ActiveMQ Classic Defaults\nDESCRIPTION: Creates a system-wide defaults file to configure the ActiveMQ Classic broker.  This is used in versions prior to 5.11.0.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./activemq setup /etc/default/activemq\n```\n\n----------------------------------------\n\nTITLE: Stopping and Restarting a Blaze Channel in Java\nDESCRIPTION: This code snippet shows how to stop and restart a Blaze Channel.  The `stop()` method halts communication, but the channel can be restarted later using the `start()` method.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/life-cycle.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBlazeChannelFactory factory = new BlazeChannelFactory();\nBlazeChannel channel = factory.createChannel();\nchannel.stop();\n// do something else\n...\n//re-start\nchannel.start();\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ Classic 5.4.2\nDESCRIPTION: This command checks out the ActiveMQ Classic 5.4.2 source code from the Apache SVN repository. It uses the `svn co` command to copy the source code from the specified URL into a local directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-02.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Expiry Check Period in ActiveMQ\nDESCRIPTION: This snippet demonstrates how to configure the broker to check for expired messages every 5 minutes using a destination policy. The `expireMessagesPeriod` attribute is set to 300000 milliseconds within a `policyEntry` element for a topic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/manage-durable-subscribers.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<policyEntry topic=\">\" expireMessagesPeriod=\"300000\"/>\n```\n\n----------------------------------------\n\nTITLE: Working with Date objects in BlazeMessage using Java\nDESCRIPTION: This snippet illustrates how to store and retrieve Date objects within a BlazeMessage. It demonstrates creating a BlazeMessage directly with a Date object and using setObject/getObject methods. The code requires the 'org.apache.activeblaze' package.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/the-activeblaze-message-type.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activeblaze.*;\n...\n\nDate date = new Date();\nBlazeMessage msg = new BlazeMessage(date);\nDate result = msg.getObject();\n\nBlazeMessage msg = new BlazeMessage();\nmsg.setObject(date);\nObject result = msg.getObject();\n```\n\n----------------------------------------\n\nTITLE: IOException: Journal is already opened - Java\nDESCRIPTION: This code snippet shows the stack trace of the IOException: Journal is already opened by this application. This error occurs when two brokers are trying to access the same journal files or when a JMS client initializes before the broker when using vm://localhost transport.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/journal-is-already-opened-by-this-application.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.io.IOException: Journal is already opened by this application.\n       at org.apache.activeio.journal.active.ControlFile.lock(ControlFile.java:71)\n       at org.apache.activeio.journal.active.LogFileManager.initialize(LogFileManager.java:120)\n       at org.apache.activeio.journal.active.LogFileManager.<init>(LogFileManager.java:101)\n       at org.apache.activeio.journal.active.JournalImpl.<init>(JournalImpl.java:99)\n       at org.apache.activemq.store.DefaultPersistenceAdapterFactory.createJournal(DefaultPersistenceAdapterFactory.java:198)\n       at org.apache.activemq.store.DefaultPersistenceAdapterFactory.getJournal(DefaultPersistenceAdapterFactory.java:134)\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Classic 5.14.2 Maven Dependency\nDESCRIPTION: This XML snippet shows how to add ActiveMQ Classic 5.14.2 as a dependency to a Maven project using the activemq-all uber jar. This simplifies the inclusion of all ActiveMQ components. Alternatively, more specific components like activemq-client or activemq-broker can be included for finer-grained control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-02.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.14.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP\nDESCRIPTION: These commands demonstrate how to verify the integrity of downloaded ActiveMQ Classic binaries using PGP or GPG.  The process involves downloading the KEYS file, the asc signature file, and then using pgpk, pgpv, pgp, or gpg commands to verify the signature against the downloaded file.  Replace `<version>` with the actual version number of the release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-08-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Building a WAR for Servlet Engine deployment\nDESCRIPTION: These commands show how to build a WAR file from the ActiveMQ Classic distribution for deployment into a servlet engine such as Tomcat or Jetty.  It requires Ant.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd example\nant war\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Broker with XML (AMQ 3.x)\nDESCRIPTION: This snippet demonstrates how to configure ActiveMQ using an XML file.  It is used to specify the configuration file when starting the ActiveMQ broker from the command line. It is compatible with AMQ 3.x versions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/persistence.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nactivemq myconfig.xml\n```\n\n----------------------------------------\n\nTITLE: 64-bit libstdc++.la Content for Solaris 10\nDESCRIPTION: This snippet provides the correct content for the libstdc++.la file in /usr/sfw/lib/64/ on Solaris 10 when using the GNU compiler. This file is essential for linking the 64-bit version of the library correctly and resolving build failures caused by an empty libstdc++.la file. The file defines the library's name, dependencies, version information, and installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/errors-from-libstdla-on-solaris-10-using-the-gnu-compiler.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# libstdc++.la - a libtool library file\n# Generated by ltmain.sh - GNU libtool 1.4a-GCC3.0 (1.641.2.256 2001/05/28 20:09:07 with GCC-local changes)\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='libstdc++.so.6'\n\n# Names of this library.\nlibrary_names='libstdc++.so.6.0.3 libstdc++.so.6 libstdc++.so'\n\n# The name of the static archive.\nold_library='libstdc++.a'\n\n# Libraries that this one depends upon.\ndependency_libs='-L/lib/64 -lc -lm -L/usr/sfw/lib/64 -lgcc_s'\n\n# Version information for libstdc++.\ncurrent=6\nage=0\nrevision=3\n\n# Is this an already installed library?\ninstalled=yes\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='/usr/sfw/lib/64'\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic in Console (Unix)\nDESCRIPTION: This command starts the ActiveMQ Classic broker as a foreground process in a Unix environment. The `cd` command navigates to the `bin` directory.  `./activemq console` then launches the broker and displays its output directly in the terminal.  This is useful for debugging and monitoring.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]/bin\n./activemq console\n```\n\n----------------------------------------\n\nTITLE: Navigating to Installation Directory (Windows)\nDESCRIPTION: This command changes the current directory in the command prompt to the ActiveMQ Classic installation directory. This is required before running the `activemq` command. `[activemq_install_dir]` is a placeholder for the actual installation path, such as `c:\\Program Files\\ActiveMQ-5.x`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_11\n\nLANGUAGE: Batchfile\nCODE:\n```\ncd [activemq_install_dir]\n```\n\n----------------------------------------\n\nTITLE: Creating JMS Destinations in Tomcat 5.5+\nDESCRIPTION: This XML snippet demonstrates how to create JMS destinations (Topic and Queue) in Tomcat 5.5 and later. It uses the JNDIReferenceFactory and specifies the physical name of the destination. The ActiveMQ classes for Topic and Queue are used as the resource types. The defined resources can be looked up via JNDI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/tomcat.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Context>\n    ...\n  <Resource name=\"jms/someTopic\" auth=\"Container\" type=\"org.apache.activemq.command.ActiveMQTopic\" description=\"my Topic\"\n        factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\" physicalName=\"FOO.BAR\"/>\n\n  <Resource name=\"jms/aQueue\" auth=\"Container\" type=\"org.apache.activemq.command.ActiveMQQueue\" description=\"my Queue\"\n        factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\" physicalName=\"FOO.BAR\"/>\n    ....\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the instantiation of a `SomeJava` object.  It shows the basic syntax for creating an instance of a class using the `new` keyword. The code assumes the existence of a class named `SomeJava`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.5.0/syntax.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Encrypting Passwords in ActiveMQ Apollo Configuration (XML)\nDESCRIPTION: This XML snippet shows how to encrypt passwords in the ActiveMQ Apollo configuration file.  The `${<property-name>}` syntax is used to reference properties defined in the `etc/apollo.xml.properties` file, which contains the encrypted passwords. The `APOLLO_ENCRYPTION_PASSWORD` environment variable must be set before starting the broker for decryption to work.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<key_storage \n   file=\"${apollo.base}/etc/keystore\" \n   password=\"${store.pass}\" \n   key_password=\"${key.pass}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX via /etc/activemq.conf (Windows)\nDESCRIPTION: This snippet shows an alternative configuration by setting properties inside `/etc/activemq.conf` on a Windows system. The snippet defines `ACTIVEMQ_HOME`, `ACTIVEMQ_BASE`, and `ACTIVEMQ_SUNJMX_START`. The `ACTIVEMQ_SUNJMX_START` property sets the JMX port, disables SSL, and specifies the password and access file paths.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nACTIVEMQ_HOME=DRIVE_LETTER:/where/ActiveMQ/is/installed\nACTIVEMQ_BASE=%ACTIVEMQ_HOME%\nACTIVEMQ_SUNJMX_START=-Dcom.sun.management.jmxremote.port=1616 -Dcom.sun.management.jmxremote.ssl=false \\\n    -Dcom.sun.management.jmxremote.password.file=%ACTIVEMQ_BASE%/conf/jmx.password \\\n    -Dcom.sun.management.jmxremote.access.file=%ACTIVEMQ_BASE%/conf/jmx.access\n```\n\n----------------------------------------\n\nTITLE: AdvisoryProducer Header Definition C++\nDESCRIPTION: Defines the header file for the AdvisoryProducer class. It includes necessary headers for CMS (Client Messaging System), decaf (a cross-platform C++ library), and standard C++ libraries. The class inherits from decaf::lang::Runnable and cms::MessageListener, allowing it to run in its own thread and receive messages asynchronously.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#ifndef _ACTIVEMQCPP_EXAMPLES_ADVISORIES_ADVISORYPRODUCER_H_\n#define _ACTIVEMQCPP_EXAMPLES_ADVISORIES_ADVISORYPRODUCER_H_\n\n#include <string>\n#include <memory>\n\n#include <cms/Session.h>\n#include <cms/MessageProducer.h>\n#include <cms/MessageConsumer.h>\n#include <cms/MessageListener.h>\n\n#include <decaf/lang/Runnable.h>\n#include <decaf/util/concurrent/CountDownLatch.h>\n\nnamespace activemqcpp {\nnamespace examples {\nnamespace advisories {\n\n    /**\n     * A sample Producer that will only send Messages on its Topic when it has\n     * received an advisory indicating that there is an active MessageConsumer\n     * on the Topic.  Once another message comes in indicating that there is no\n     * longer a consumer then this Producer stops producing again.\n     * \n     * @since 3.0\n     */\n    class AdvisoryProducer : public decaf::lang::Runnable,\n                             public cms::MessageListener {\n    private:\n\n        volatile bool consumerOnline;\n        volatile bool shutdown;\n        decaf::util::concurrent::CountDownLatch shutdownLatch;\n\n        cms::Session* session;\n        std::auto_ptr<cms::MessageConsumer> consumer;\n        std::auto_ptr<cms::MessageProducer> producer;\n\n    public:\n\n        AdvisoryProducer( cms::Session* session );\n        virtual ~AdvisoryProducer();\n\n        /**\n         * Shut down the processing that occurs in the Run method.\n         */\n        void stop();\n\n        /**\n         * Run the producer code.\n         */\n        virtual void run();\n\n        /**\n         * Async Message callback.\n         */\n        virtual void onMessage( const cms::Message* message );\n\n    };\n\n}}}\n\n#endif /* _ACTIVEMQCPP_EXAMPLES_ADVISORIES_ADVISORYPRODUCER_H_ */\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP with pgp\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using PGP with the pgp command. It first imports the KEYS file and then verifies the signature file against the downloaded archive. Replace <version> with the actual ActiveMQ version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-03.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.4.3\nDESCRIPTION: This code snippet shows how to checkout the ActiveMQ-CPP 3.4.3 source code from the Apache Subversion repository. It uses the 'svn co' command followed by the repository URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/343-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.3/\n```\n\n----------------------------------------\n\nTITLE: XML Configuration\nDESCRIPTION: This snippet shows a basic XML configuration. It is used for configuration purposes.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.17.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Get User Principals Example (JSON)\nDESCRIPTION: This example demonstrates how to retrieve the principals associated with the currently authenticated user. It uses `curl` to make a GET request with authentication to the `/broker/whoami.json` endpoint, and the response is a JSON array of principal objects, including the user's name and kind.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u “admin:password” http://localhost:61680/broker/whoami.json\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"name\": \"admin\",\n  \"kind\": \"org.apache.activemq.jaas.UserPrincipal\"\n}, {\n  \"name\": \"admins\",\n  \"kind\": \"org.apache.activemq.jaas.GroupPrincipal\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Configure Spring Context Listener in web.xml\nDESCRIPTION: This XML snippet configures a Spring ContextLoaderListener in the web.xml file. This listener is responsible for starting a Spring application context when the web application is deployed or started in WebLogic. The Spring context will then be responsible for starting and stopping ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<web-app version=\"2.4\"\n         xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\" >\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with pgp - Shell\nDESCRIPTION: This snippet demonstrates how to verify the integrity of downloaded files using PGP with the `pgp` command. It first imports the KEYS file and then verifies the signature file.  The <version> placeholder should be replaced with the specific ActiveMQ version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-02.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Generate CNI header for MQAdapter.class\nDESCRIPTION: Generates the CNI (C Native Interface) header file for the MQAdapter class using gcjh. This header allows C++ code to interact with Java code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngcjh MQAdapter\n```\n\n----------------------------------------\n\nTITLE: OpenWire Command Structure\nDESCRIPTION: This diagram illustrates the general structure of OpenWire commands as they appear on a TCP network connection. Multiple commands are transmitted back-to-back without delimiters. Each command is variable in size.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+---------+  +---------+      +---------+\n| command |  | command | .... | command |\n+---------+  +---------+      +---------+\n```\n\n----------------------------------------\n\nTITLE: JNDI Configuration (Properties)\nDESCRIPTION: This snippet configures JNDI to use ActiveMQ's JNDI implementation and an embedded broker. Place this configuration in a `jndi.properties` file in the classpath (e.g., `src/test/resources` for Maven). This allows applications to lookup JMS resources via JNDI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory\njava.naming.provider.url = vm://localhost?broker.persistent=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Administration Bind Address XML\nDESCRIPTION: This XML snippet shows how to configure the ActiveMQ Apollo broker to bind the web administration interface to a specific address and port, allowing remote administration. It also includes options for enabling CORS using the cors_origin query parameter.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/activemq/apollo\">\n  ...\n  <web_admin bind=\"http://0.0.0.0:61680\"/>\n  <web_admin bind=\"https://0.0.0.0:61681\"/>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet shows the instantiation of a `SomeJava` object. It demonstrates a basic object creation pattern in Java. It requires the existence of a `SomeJava` class in the project's classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.18.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Setting Message Expiration using 'expires' Header - STOMP\nDESCRIPTION: This example demonstrates how to set a message's expiration time using the `expires` header in a STOMP `SEND` frame. The `expires` header specifies the number of milliseconds since the Unix epoch when the message should expire. Unconsumed expired messages are removed from the queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_6\n\nLANGUAGE: STOMP\nCODE:\n```\nSEND\ndestination:/queue/a\nexpires:1308690148000\n\nthis message will expire on Tue Jun 21 17:02:28 EDT 2011\n^@\n```\n\n----------------------------------------\n\nTITLE: Combined Allow and Deny Access Rule (XML)\nDESCRIPTION: This XML snippet shows an example where a single rule defines both `allow` and `deny` attributes, and they both match. In this case, the action is denied. This is because when both `allow` and `deny` match, the explicit `deny` takes precedence.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<access_rule deny=\"blue\" allow=\"red\" action=\"send\"/>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk (Shell)\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `pgpk` tool. It imports the KEYS file and then verifies the signature against the distribution file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-03.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Custom VirtualHost DTO Scala\nDESCRIPTION: This snippet shows how to create a custom `VirtualHostDTO` to define a new XML element for your custom virtual host type.  The `@XmlRootElement` annotation defines the XML element name, and the `@XmlAttribute` annotation defines an example configuration attribute.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\npackage example;\nimport javax.xml.bind.annotation._\n@XmlRootElement(name = \"my_virtual_host\")\n@XmlAccessorType(XmlAccessType.FIELD)\nclass MyVirtualHostDTO extends VirtualHostDTO {\n  // example config attribute\n  @XmlAttribute(name=\"trace\")\n  public Boolean trace;\n}\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java code snippet showcases object instantiation. It demonstrates how Java code can be included in website content, potentially for documentation or examples related to ActiveMQ's Java API.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.11.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized Acknowledgements at Connection Level in ActiveMQ Classic\nDESCRIPTION: This code snippet shows how to enable optimized acknowledgements in ActiveMQ Classic at the Connection level. It casts the Connection to an `ActiveMQConnection` and uses the `setOptimizeAcknowledge(true)` method to enable the feature. This approach configures the acknowledgement optimization at the connection level.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/optimized-acknowledgement.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n((ActiveMQConnection)connection).setOptimizeAcknowledge(true);\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet demonstrates a simple XML structure. It includes the XML declaration and a root element named 'xml' with a text node 'somexml'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.13.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet shows the correct Maven dependency configuration required to use ActiveMQ Classic 5.8.0 in a Maven project. It specifies the groupId, artifactId, and version of the ActiveMQ Classic 'all' module. Add this to your project's `pom.xml` file within the `<dependencies>` section to include ActiveMQ Classic as a dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-08-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.8.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Consumer Class Definition C++\nDESCRIPTION: Defines a `HelloWorldConsumer` class that acts as a message consumer, connecting to an ActiveMQ broker and listening for messages on either a queue or a topic. The class manages its own connection, session, and consumer resources, ensuring proper cleanup. It implements the CMS API for message reception and acknowledgment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/example.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass HelloWorldConsumer : public ExceptionListener, public Runnable {\nprivate:\n\n    std::string brokerURI;\n    int numMessages;\n    bool useTopics;\n    bool sessionTransacted;\n    CountDownLatch latch;\n    Connection* connection;\n    Session* session;\n    Destination* destination;\n    MessageConsumer* consumer;\n    long long receiveTimeout;\n    bool ready;\n\nprivate:\n\n    HelloWorldConsumer(const HelloWorldConsumer&);\n    HelloWorldConsumer& operator=(const HelloWorldConsumer&);\n\npublic:\n\n    HelloWorldConsumer(std::string brokerURI, int numMessages, bool useTopics, bool sessionTransacted = false, long long receiveTimeout = 20000) :\n        brokerURI(brokerURI), numMessages(numMessages), useTopics(useTopics), sessionTransacted(sessionTransacted), receiveTimeout(receiveTimeout),\n        latch(numMessages), connection(NULL), session(NULL), destination(NULL), consumer(NULL), ready(false) {\n    }\n\n    virtual ~HelloWorldConsumer() {\n        cleanup();\n    }\n\n    void close() {\n        this->cleanup();\n    }\n\n    virtual void run() {\n\n        try {\n\n            // Create a ConnectionFactory\n            auto_ptr<ConnectionFactory> connectionFactory(ConnectionFactory::createCMSConnectionFactory(brokerURI));\n\n            // Create a Connection\n            connection = connectionFactory->createConnection();\n            connection->setExceptionListener(this);\n            connection->start();\n\n            // Create a Session\n            if (sessionTransacted) {\n                session = connection->createSession(Session::SESSION_TRANSACTED);\n            } else {\n                session = connection->createSession(Session::AUTO_ACKNOWLEDGE);\n            }\n\n            // Create the destination (Topic or Queue)\n            if (useTopics) {\n                destination = session->createTopic(\"TEST.FOO\");\n            } else {\n                destination = session->createQueue(\"TEST.FOO\");\n            }\n\n            // Create a MessageConsumer from the Session to the Topic or Queue\n            consumer = session->createConsumer(destination);\n\n            // Set the readylistener to let the main thread know we are ready.\n            ready = true;\n\n            std::cout << \"Consumer [\" << Thread::getCurrentThreadName() << \"] is now ready.\" << std::endl;\n\n            while (true) {\n\n                Message* message = consumer->receive(receiveTimeout);\n\n                if (message != NULL) {\n\n                    const TextMessage* textMessage = dynamic_cast<const TextMessage*>(message);\n                    std::string text = \"ERROR: Message was not a text message.\";\n\n                    if (textMessage != NULL) {\n                        text = textMessage->getText();\n                    }\n\n                    std::cout << \"Consumer [\" << Thread::getCurrentThreadName() << \"] Received message: \" << text << std::endl;\n\n                    latch.countDown();\n\n                    if (sessionTransacted) {\n                        session->commit();\n                    }\n                }\n\n                delete message;\n\n                if (latch.getCount() == 0) {\n                    break;\n                }\n            }\n\n            // Indicate all messages have been processed.\n            std::cout << \"Consumer [\" << Thread::getCurrentThreadName() << \"] is done processing.\" << std::endl;\n\n        } catch (CMSException& e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Called automatically when the connection is lost or a fault occurs.\n    virtual void onException(const CMSException& ex) {\n        std::cout << \"Consumer [\" << Thread::getCurrentThreadName() << \"] caught an exception: \" << ex.getMessage() << std::endl;\n    }\n\n    void waitUntilReady() {\n        while (!ready) {\n            Threads::sleep(100);\n        }\n    }\n\nprotected:\n\n    void cleanup() {\n        try {\n            if (consumer != NULL) {\n                delete consumer;\n                consumer = NULL;\n            }\n            if (destination != NULL) {\n                delete destination;\n                destination = NULL;\n            }\n            if (session != NULL) {\n                session->close();\n                delete session;\n                session = NULL;\n            }\n            if (connection != NULL) {\n                connection->close();\n                delete connection;\n              connection = NULL;\n        } catch (CMSException& e) {\n            e.printStackTrace();\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Run Publisher Script (Unix/Linux/OS X)\nDESCRIPTION: Executes the 'publisher.rb' script, which acts as a producer, sending messages to the ActiveMQ Apollo broker. This script also requires the 'stomp' gem to be installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nruby publisher.rb\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Message Sending Log\nDESCRIPTION: This log extract shows the ActiveMQ Classic message producer sending messages to the TEST.FOO queue. It includes timestamps and message sequence numbers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n[java] Sending message: Message: 8 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n[java] Sending message: Message: 9 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n[java] Done.\n```\n\n----------------------------------------\n\nTITLE: Verifying Headers with Apache RAT Maven Plugin\nDESCRIPTION: These shell commands use the Apache RAT Maven plugin to check for missing license headers in the project files. The first command runs the check, and the second command greps the output to find files without licenses.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn -e apache-rat:check\ngrep -e ' !?????' target/rat.txt -- will show any files without licenses\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This snippet shows the Maven dependency configuration required to include ActiveMQ Classic 5.13.0 in a Maven project. It uses the activemq-all uber jar, providing a simple way to include all core ActiveMQ dependencies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-00.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.13.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generate IntelliJ IDEA Project Files with Maven 3\nDESCRIPTION: This command generates IntelliJ IDEA project files for ActiveMQ Classic using the Maven IDEA plugin.  It enables importing the project into IntelliJ IDEA for development. Ensure the IDEA plugin is properly configured within the Maven environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/building.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn idea:idea\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet shows the Maven dependency configuration required to include ActiveMQ Classic 5.5.1 in a Maven project. It defines the groupId, artifactId, and version for the dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-01.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.5.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: LastImageSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Configures the last image subscription recovery policy.  This policy retains only the last message sent on a topic.  When a new consumer subscribes, it receives the last image (the most recent message) before receiving any subsequent updates.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<lastImageSubscriptionRecoveryPolicy/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Security Check with setTrustAllPackages (Java)\nDESCRIPTION: This code snippet demonstrates how to disable the security check for ObjectMessage deserialization by setting `trustAllPackages` to `true` on the `ActiveMQConnectionFactory`.  This allows deserialization of objects from any package. It is recommended for testing purposes only as it completely bypasses security restrictions. Requires activemq-client library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/objectmessage.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustAllPackages(true);\n```\n\n----------------------------------------\n\nTITLE: Listing Available ActiveMQ Brokers in Karaf\nDESCRIPTION: This command lists all available ActiveMQ brokers in the specified JMX context.  The `--jmxlocal` parameter is used to address local brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkaraf@root> activemq:list --jmxlocal\nBrokerName = mybroker\n```\n\n----------------------------------------\n\nTITLE: Extracting Source Files (Unix)\nDESCRIPTION: This command extracts the files from a gzipped tar archive (typically a source distribution of ActiveMQ Classic) into a specified directory.  It requires the `tar` and `gzip` utilities to be installed. It's commonly used to unpack the source code before building ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntar zxvf activemq.x.x-src.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Broker Service on Ubuntu Bash\nDESCRIPTION: These commands install the ActiveMQ Apollo broker as a service on Ubuntu, enabling it to run on startup. Requires root privileges (sudo).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /var/lib/mybroker/bin/apollo-broker-service /etc/init.d/apollo\nsudo update-rc.d apollo defaults\n```\n\n----------------------------------------\n\nTITLE: Using Consumer Count Selector in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to use a message selector to be notified when there are no active consumers on a given destination. It leverages the consumerCount header available in consumer start/stop advisory messages. The selector filters messages based on the consumerCount property.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nconsumerCount = 0\n```\n\n----------------------------------------\n\nTITLE: Java Class Instantiation\nDESCRIPTION: This snippet shows how to instantiate a Java class named 'SomeJava'.  It assumes that the 'SomeJava' class is defined and available in the classpath. This could represent a component initialization within the ActiveMQ system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.4.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Publishing a Test Message to ActiveMQ Classic Topic (Java)\nDESCRIPTION: This Java code snippet demonstrates how to publish a test message to an ActiveMQ Classic topic using JNDI lookup. It retrieves the ConnectionFactory and Topic from the JNDI context, creates a connection, session, and producer, and then sends a simple message. The code requires JMS and JNDI libraries and proper JNDI configuration in Tomcat.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/setting-up-activemq-classic-with-tomcat-559.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    InitialContext initCtx = new InitialContext();\n    Context envContext = (Context) initCtx.lookup(\"java:comp/env\");\n    ConnectionFactory connectionFactory = (ConnectionFactory) envContext.lookup(\"jms/ConnectionFactory\");\n    Connection connection = connectionFactory.createConnection();\n    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    MessageProducer producer = session.createProducer((Destination) envContext.lookup(\"jms/topic/MyTopic\"));\n\n    Message testMessage = session.createMessage();\n    testMessage.setStringProperty(\"testKey\", \"testValue\");\n    producer.send(testMessage);\n} catch (NamingException e) {\n    // TODO handle exception\n} catch (JMSException e) {\n    // TODO handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ShiroPlugin as a Spring Bean in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows how to configure the ShiroPlugin as a Spring bean within ActiveMQ Classic. Configuration properties can be set via standard JavaBeans-compatible getter and setter methods.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shiro.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:amq=\"http://activemq.apache.org/schema/core\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n\n    <broker xmlns=\"http://activemq.apache.org/schema/core\" ... other attributes here ...>\n\n        <plugins>\n    \n            <bean id=\"shiroPlugin\" class=\"org.apache.activemq.shiro.ShiroPlugin\" xmlns=\"http://www.springframework.org/schema/beans\">\n                <!-- Config properties via getters/setters as necessary: -->\n            </bean>\n\n        </plugins>\n\n    </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker XML Config in ra.xml (Initial)\nDESCRIPTION: This XML snippet from the ra.xml file defines the configuration property for the ActiveMQ Classic broker XML configuration file. Initially, it has an empty config-property-value, meaning no broker configuration file is specified. The goal is to point to the broker-config.xml file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      Sets the XML configuration file used to configure the embedded ActiveMQ Classic broker via\n      Spring if using embedded mode.\n\n      BrokerXmlConfig is the filename which is assumed to be on the classpath unless\n      a URL is specified. So a value of foo/bar.xml would be assumed to be on the\n      classpath whereas file:dir/file.xml would use the file system.\n      Any valid URL string is supported.\n    </description>\n    <config-property-name>BrokerXmlConfig</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <config-property-value></config-property-value>\n    <!--\n    <config-property-value>xbean:broker-config.xml</config-property-value>\n    -->\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Checking out ActiveMQ Classic using SVN\nDESCRIPTION: This command checks out the ActiveMQ Classic 5.3.1 source code from the Apache Subversion repository. This allows developers to access and modify the source code for the specified version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-01.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.1\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads using PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP or GPG signatures. The commands import the KEYS file and then verify the signature of the downloaded file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-01.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java code snippet shows the instantiation of a 'SomeJava' object using the 'new' keyword. It's a simple example demonstrating object creation in Java.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.1/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Example Snippet\nDESCRIPTION: This snippet presents a basic XML structure example. It includes a root element named 'xml' with the content 'somexml'. This demonstrates how XML code is represented within the documentation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.3/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This XML snippet provides a basic example of an XML configuration. It could represent a part of an ActiveMQ configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.29.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Building ActiveMQ Classic with Maven\nDESCRIPTION: This snippet shows the command to build ActiveMQ Classic using Maven after navigating to the installation directory. It assumes Maven is correctly configured and that the user has sufficient permissions to execute Maven commands within the directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Ant Build Output for ActiveMQ Producer\nDESCRIPTION: This snippet shows the expected output from the 'ant producer' command. It details the steps of the build process, including creating directories (though some are skipped in the output), compiling source files (also skipped in the output), and running the producer. The producer connects to the ActiveMQ broker and publishes messages to a queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\nBuildfile: build.xml\n\ninit:\n\ncompile:\n\nproducer:\n     [echo] Running producer against server at $url = tcp://localhost:61616 for subject $subject = TEST.FOO\n     [java] Connecting to URL: tcp://localhost:61616\n     [java] Publishing a Message with size 1000 to queue: TEST.FOO\n     [java] Using non-durable publishing\n     [java] Sleeping between publish 0 ms\n     [java] Sending message: Message: 0 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 1 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 2 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 3 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 4 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 5 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 6 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n     [java] Sending message: Message: 7 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n```\n\n----------------------------------------\n\nTITLE: C++ Compile Bootstrap.cpp\nDESCRIPTION: Compiles the Bootstrap.cpp file into an object file using g++. This prepares the C++ code for linking.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ng++ -c Bootstrap.cpp\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ Source Code Using SVN\nDESCRIPTION: This command demonstrates how to check out the source code for ActiveMQ Classic 5.5.0 using SVN. This allows developers to access and modify the source code, build custom versions, and contribute to the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.5.0\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for Apache.NMS.ActiveMQ 1.4.0\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ version 1.4.0 source code from the Apache Subversion repository. It allows developers to access the codebase for inspection, modification, or contribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v141.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.4.0/\n```\n\n----------------------------------------\n\nTITLE: Start Apollo Broker Service Windows\nDESCRIPTION: Command to start the ActiveMQ Apollo broker service on Windows.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service start\n```\n\n----------------------------------------\n\nTITLE: Instantiating Java Object\nDESCRIPTION: This snippet shows a simple instantiation of a Java object. It demonstrates how Java code can be included within the content for examples or explanations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.2.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n Somejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Details JSON Response\nDESCRIPTION: This JSON snippet shows the structure of the response when querying for the details of a virtual host.  It includes the id, state, topics, queues, and other configuration information. The values are examples and will vary based on the virtual host's configuration and status.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"default\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314573798989,\n  \"topics\": [],\n  \"queues\": [\"example-4\", \"example-7\", \"example-6\", \"example-0\", \n             \"example-3\", \"example-8\", \"example-1\", \"example-5\", \n             \"example-9\", \"example-2\"],\n  \"dsubs\": [],\n  \"store\": true,\n  \"host_names\": [\"default\", \"localhost\", \"127.0.0.1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Detection Timeout in ActiveMQ Connector\nDESCRIPTION: This snippet shows how to configure the protocol detection timeout for an ActiveMQ connector.  The `detect` element, placed within the `connector` element, sets the maximum time in milliseconds that protocol detection is allowed to take.  If a client doesn't send an initial request within the timeout, the connection closes. The timeout value is set using the `timeout` attribute.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <detect timeout=\"30000\"/>\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Classic for Kaffe JVM\nDESCRIPTION: This XML configuration file shows how to configure ActiveMQ Classic to run under the Kaffe JVM.  It disables JMX by setting `useJmx=\"false\"` and disables the journal in the `journaledJDBC` persistence adapter by setting `useJournal=\"false\"`. It also specifies the data directory for persistence.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-run-activemq-classic-under-the-kaffe-jvm.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n\n <broker useJmx=\"false\" xmlns=\"http://activemq.org/config/1.0\">\n\n  <persistenceAdapter>\n     <journaledJDBC useJournal=\"false\" dataDirectory=\"activemq-data\"/>\n  </persistenceAdapter>\n\n  <transportConnectors>\n     <transportConnector name=\"default\" uri=\"tcp://localhost:61616\"/>\n     <transportConnector name=\"stomp\"   uri=\"stomp://localhost:61613\"/>\n  </transportConnectors>\n\n </broker>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Setting java.rmi.server.hostname on Windows\nDESCRIPTION: This code snippet demonstrates how to set the `java.rmi.server.hostname` property for ActiveMQ Classic on Windows. It sets the `ACTIVEMQ_OPTS` environment variable using the `SET` command, adding the `-Djava.rmi.server.hostname` option, replacing `<hostname>` with the correct hostname or IP address. This configuration allows JConsole to establish a connection to the ActiveMQ Classic instance via RMI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/i-cannot-connect-to-activemq-classic-from-jconsole.md#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nSET ACTIVEMQ\\_OPTS=%ACTIVEMQ\\_OPTS% -Djava.rmi.server.hostname=<hostname> \nactivemq\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Data Directory for Scheduler Support\nDESCRIPTION: This XML snippet configures the broker's `dataDirectory` attribute, which is essential for scheduler support in a shared file system setup. By explicitly defining the data directory, ActiveMQ Classic can correctly store scheduler information, ensuring that scheduled tasks are properly managed across master and slave brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shared-file-system-master-slave.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/core\"\ndataDirectory=\"/some/location\"\nbrokerName=\"mmuserb2\" useJmx=\"true\" advisorySupport=\"false\"\npersistent=\"true\" deleteAllMessagesOnStartup=\"false\"\nuseShutdownHook=\"false\" schedulerSupport=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Setting Data Directory Programmatically in ActiveMQ using Java\nDESCRIPTION: This Java snippet demonstrates how to programmatically set the data directory for an ActiveMQ broker. It creates a new directory named \"foo\" and then sets it as the data directory for the broker using the `setDataDirectory` method.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javaioioexception-failed-to-create-database-derbydb-see-the-next-exception-for-details.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFile dir = new File(\"foo\");\ndir.mkdir();\nbroker.setDataDirectory(dir);\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ source from SVN\nDESCRIPTION: This command is used to checkout the source code of ActiveMQ version 5.4.0 from the Apache Subversion repository. It creates a local copy of the code at the specified tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.0\n```\n\n----------------------------------------\n\nTITLE: Checkout CMS 3.8.4 using Git\nDESCRIPTION: This snippet provides the commands to clone the ActiveMQ-cpp repository, navigate into the directory, and checkout the specific tag for the 3.8.4 release using Git. This allows users to obtain the exact version of the code corresponding to this release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/384-release.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.8.4\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet represents a placeholder XML structure.  It demonstrates how XML code blocks might be included within the website content. No specific schema or context is provided.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.0.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Configuring LevelDB Persistence Adapter in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures the LevelDB persistence adapter to use a shared directory for storing broker data. This configuration is suitable for a shared file system master/slave setup. The `directory` attribute points to the shared location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/shared-file-system-master-slave.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<persistenceAdapter>\n  <levelDB directory=\"/sharedFileSystem/sharedBrokerData\"/>\n</persistenceAdapter>\n```\n\n----------------------------------------\n\nTITLE: Incrementing a counter in Liquid\nDESCRIPTION: This snippet increments a counter variable 'i' by 1 using Liquid's 'plus' filter.  The 'i' variable is used to limit the number of releases displayed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/news.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign i = i | plus:1 %}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration (XML)\nDESCRIPTION: This snippet shows how to add ActiveMQ Classic 5.13.2 as a dependency in a Maven project. The dependency configuration includes the groupId, artifactId, and version of the ActiveMQ library, which is required for using ActiveMQ in the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-02.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.13.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Example Message Selector SQL 92 Syntax\nDESCRIPTION: This example shows an example message selector using SQL 92 syntax.  This selector filters messages based on the message properties `type`, `color`, and `weight`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\ntype = 'car' AND color = 'blue' AND weight > 2500\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the instantiation of a `SomeJava` object.  It highlights a simple use case of creating an instance of a Java class.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.29.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Initializing a Blaze Channel in Java\nDESCRIPTION: This code snippet demonstrates how to initialize a Blaze Channel using the `BlazeChannelFactory` and `BlazeChannel` classes.  The `init()` method must be explicitly invoked to initialize the channel and set its configuration after creation, prior to being started.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/life-cycle.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlazeChannelFactory factory = new BlazeChannelFactory();\nBlazeChannel channel = factory.createChannel();\nchannel.init();\n```\n\n----------------------------------------\n\nTITLE: PMC Invitation Template\nDESCRIPTION: This template is used to invite a candidate to join the Apache ActiveMQ PMC. It directs invitees to review the ASF documentation for details regarding PMC responsibilities.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nTo: <INVITEE EMAIL>  \nCc: [private@activemq.apache.org](mailto:private@activemq.apache.org)  \nSubject: Invitation to join the Apache ActiveMQ Project Management Committee\n\n<INVITEE>,  \nIn recognition of your continued contributions to the project, the Apache ActiveMQ PMC has voted to offer you membership to the PMC. I am writing on behalf of the PMC to give you the opportunity to either accept or reject this offer by replying to [private@activemq.apache.org](mailto:private@activemq.apache.org).\n\nIn making your decision, please see the following URL for more information on PMCs:\n\n[https://www.apache.org/dev/pmc.html](https://www.apache.org/dev/pmc.html)\n\nIf you have questions before making a decision, please let us know.\n```\n\n----------------------------------------\n\nTITLE: AdvisoryProducer Implementation C++\nDESCRIPTION: Implements the AdvisoryProducer class methods. The constructor creates a topic and subscribes to the corresponding advisory topic. The run method sends heartbeat messages only when a consumer is online. The onMessage method processes advisory messages to update the consumerOnline status based on the consumer count.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include \"AdvisoryProducer.h\"\n\n#include <cms/Topic.h>\n#include <cms/Message.h>\n#include <cms/TextMessage.h>\n#include <decaf/lang/exceptions/NullPointerException.h>\n#include <decaf/lang/Integer.h>\n\nusing namespace std;\nusing namespace activemqcpp;\nusing namespace activemqcpp::examples;\nusing namespace activemqcpp::examples::advisories;\nusing namespace decaf;\nusing namespace decaf::lang;\nusing namespace decaf::lang::exceptions;\n\n////////////////////////////////////////////////////////////////////////////////\nAdvisoryProducer::AdvisoryProducer( cms::Session* session ) : shutdownLatch(1) {\n\n    if( session == NULL ) {\n        throw NullPointerException(\n            __FILE__, __LINE__, \"Session Object passed was Null.\" );\n    }\n\n    std::auto_ptr<cms::Topic> destination( session->createTopic(\n        \"HEART-BEAT-CHANNEL\" ) );\n    std::auto_ptr<cms::Topic> advisories( session->createTopic(\n        \"ActiveMQ.Advisory.Consumer.Topic.HEART-BEAT-CHANNEL\" ) );\n\n    this->shutdown = false;\n    this->consumerOnline = false;\n\n    this->session = session;\n    this->producer.reset( session->createProducer( destination.get() ) );\n    this->consumer.reset( session->createConsumer( advisories.get() ) );\n    this->consumer->setMessageListener( this );\n}\n\n////////////////////////////////////////////////////////////////////////////////\nAdvisoryProducer::~AdvisoryProducer() {\n}\n\n////////////////////////////////////////////////////////////////////////////////\nvoid AdvisoryProducer::stop() {\n    this->shutdown = true;\n    this->shutdownLatch.await( 3000 );\n}\n\n////////////////////////////////////////////////////////////////////////////////\nvoid AdvisoryProducer::run() {\n\n    while( !this->shutdown ) {\n\n        if( this->consumerOnline ) {\n\n            std::auto_ptr<cms::TextMessage> message(\n                this->session->createTextMessage( \"Alive\" ) );\n\n            this->producer->send( message.get() );\n\n            Thread::sleep( 1000 );\n        }\n    }\n\n    this->shutdownLatch.countDown();\n}\n\n////////////////////////////////////////////////////////////////////////////////\nvoid AdvisoryProducer::onMessage( const cms::Message* message ) {\n\n    if( message->getCMSType() == \"Advisory\" ) {\n\n        std::cout << \"Received an Advisory Message!\" << std::endl;\n\n        if( message->propertyExists( \"consumerCount\" ) ) {\n\n            std::string consumerCount = message->getStringProperty( \"consumerCount\" );\n            std::cout << \"Number of Consumers = \" << consumerCount << std::endl;\n            this->consumerOnline = Integer::parseInt( consumerCount ) > 0 ? true : false;\n        }\n\n    } else {\n        std::cout << \"Received a Non-Advisory Message!\" << std::endl;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JBoss Startup Script Example\nDESCRIPTION: This snippet shows an example of how to start JBoss from the command line. The command specifies the configuration set to use (default) and includes various Java options such as memory settings and system properties.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ cd jboss-4.0.4.GA\n$ ./bin/run.sh -c default\n=========================================================================\n\n  JBoss Bootstrap Environment\n\n  JBOSS_HOME: /opt/jboss-4.0.4.GA\n\n  JAVA: java\n\n  JAVA_OPTS: -server -Xms128m -Xmx512m -Dsun.rmi.dgc.client.gcInterval=3600000 \n-Dsun.rmi.dgc.server.gcInterval=3600000 -Dprogram.name=run.sh\n\n  CLASSPATH: /opt/jboss-4.0.4.GA/bin/run.jar:/lib/tools.jar\n\n=========================================================================\n\n15:34:47,999 INFO  [Server] Starting JBoss (MX MicroKernel)...\n15:34:48,001 INFO  [Server] Release ID: JBoss [Zion] 4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)\n15:34:48,004 INFO  [Server] Home Dir: /opt/jboss-4.0.4.GA\n15:34:48,005 INFO  [Server] Home URL: file:/opt/jboss-4.0.4.GA/\n15:34:48,007 INFO  [Server] Patch URL: null\n15:34:48,007 INFO  [Server] Server Name: default\n15:34:48,007 INFO  [Server] Server Home Dir: /opt/jboss-4.0.4.GA/server/default\n15:34:48,011 INFO  [Server] Server Home URL: file:/opt/jboss-4.0.4.GA/server/default/\n15:34:48,012 INFO  [Server] Server Log Dir: /opt/jboss-4.0.4.GA/server/default/log\n15:34:48,017 INFO  [Server] Server Temp Dir: /opt/jboss-4.0.4.GA/server/default/tmp\n15:34:48,022 INFO  [Server] Root Deployment Filename: jboss-service.xml\n...\n15:35:17,360 INFO  [Server] JBoss (MX MicroKernel) [4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)] \nStarted in 28s:576ms\n```\n\n----------------------------------------\n\nTITLE: Spring Property Placeholder Configuration\nDESCRIPTION: This Spring bean definition configures a PropertyPlaceholderConfigurer to load properties from the bootstrap.properties file.  It allows referencing the properties defined in the bootstrap.properties file within the Spring configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"placeholderConfig\" \n      class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\"><value>classpath:/bootstrap.properties</value></property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Embedding Broker in Spring 2.0 XML\nDESCRIPTION: This XML snippet shows how to embed an ActiveMQ Classic broker directly within a Spring 2.0 XML file using the 'amq:broker' tag. It defines the broker's transport connectors and other properties. This simplifies the configuration process by eliminating the need for a separate factory bean.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<beans \n  xmlns=\"http://www.springframework.org/schema/beans\" \n  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n  \n  <!--  lets create an embedded ActiveMQ Classic Broker -->\n  <amq:broker useJmx=\"false\" persistent=\"false\">\n    <amq:transportConnectors>\n      <amq:transportConnector uri=\"tcp://localhost:0\" />\n    </amq:transportConnectors>\n  </amq:broker>\n\n   <!--  ActiveMQ Classic destinations to use  -->\n  <amq:queue id=\"destination\"  physicalName=\"org.apache.activemq.spring.Test.spring.embedded\"/>\n\n  <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->\n  <amq:connectionFactory id=\"jmsFactory\" brokerURL=\"vm://localhost\"/>\n  \n\n  <!-- Spring JMS Template -->\n  <bean id=\"myJmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n    <property name=\"connectionFactory\">\n      <!-- lets wrap in a pool to avoid creating a connection per send -->\n      <bean class=\"org.springframework.jms.connection.SingleConnectionFactory\">\n        <property name=\"targetConnectionFactory\">\n          <ref local=\"jmsFactory\" />\n        </property>\n      </bean>\n    </property>\n  </bean>\n\n  <bean id=\"consumerJmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n    <property name=\"connectionFactory\" ref=\"jmsFactory\"/>\n  </bean>\n\n  <!-- a sample POJO which uses a Spring JmsTemplate -->\n  <bean id=\"producer\" class=\"org.apache.activemq.spring.SpringProducer\">\n    <property name=\"template\">\n      <ref bean=\"myJmsTemplate\"></ref>\n    </property>\n\n    <property name=\"destination\">\n      <ref bean=\"destination\" />\n    </property>\n\n    <property name=\"messageCount\">\n      <value>10</value>\n    </property>\n  </bean>\n\n  <!-- a sample POJO consumer -->\n  <bean id=\"consumer\" class=\"org.apache.activemq.spring.SpringConsumer\">\n    <property name=\"template\" ref=\"consumerJmsTemplate\"/>\n    <property name=\"destination\" ref=\"destination\"/>\n  </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Generate IntelliJ IDEA Project Files with Maven 1\nDESCRIPTION: This command generates IntelliJ IDEA project files for ActiveMQ Classic using Maven 1. It allows importing the project into IntelliJ IDEA for easier development. This is used for legacy versions of ActiveMQ Classic, specifically 4.0.x and earlier, that were built with Maven 1. Make sure Maven 1 is set up correctly.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/building.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmaven idea\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet shows how to checkout the Apache.NMS.ActiveMQ version 1.6.0 source code from the Apache Subversion repository. It uses the svn command-line tool with the provided repository URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v160.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.0/\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic after Source Installation\nDESCRIPTION: This snippet describes the steps to start ActiveMQ Classic after building from source. It involves navigating to the assembly target directory, unzipping the distribution, and then running the `activemq` script. It assumes the user is in a bash-like environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]\\assembly\\target\nunzip activemq-x.x-SNAPSHOT.zip\ncd activemq-x.x-SNAPSHOT\nbin\\activemq\n```\n\n----------------------------------------\n\nTITLE: Strict Schema Validation in apollo.xml\nDESCRIPTION: This XML snippet demonstrates how to enable strict schema validation for the `apollo.xml` configuration file. By setting the `validation` attribute of the `broker` element to `strict`, the broker will abort startup if any schema validation issues are detected. This ensures that the broker starts with a valid configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<broker validation=\"strict\" \n   xmlns=\"http://activemq.apache.org/schema/activemq/apollo\">\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Disabling Security Check in Camel Context (XML)\nDESCRIPTION: This XML configuration demonstrates how to disable the ObjectMessage security check within a Camel context, using Spring beans.  It defines an `ActiveMQConnectionFactory` bean and sets the `trustAllPackages` property to `true`.  This is strongly discouraged for production use.  Requires activemq-spring and camel-jms libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/objectmessage.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"connectionFactory\" class=\"org.apache.activemq.spring.ActiveMQConnectionFactory\">\n    <property name=\"brokerURL\" value=\"tcp://localhost:61616\"/>\n<property name=\"trustAllPackages\" value=\"true\"/>\n</bean>\n<bean id=\"jmsConfig\" class=\"org.apache.camel.component.jms.JmsConfiguration\">\n    <property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n</bean>\n<bean id=\"activemq\" class=\"org.apache.activemq.camel.component.ActiveMQComponent\">\n    <property name=\"configuration\" ref=\"jmsConfig\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Embedding XML Content\nDESCRIPTION: This snippet demonstrates how to embed XML content within a document.  It's a simple example to show the formatting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.0.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version\nDESCRIPTION: This snippet demonstrates how to check the installed Java version using the command line. It is used to verify that Java 1.5 or higher is installed correctly before proceeding with the integration of ActiveMQ Classic and JBoss. The expected output includes the Java version information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ java -version\njava version \"1.5.0_06\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_06-112)\nJava HotSpot(TM) Client VM (build 1.5.0_06-64, mixed mode, sharing)\n```\n\n----------------------------------------\n\nTITLE: Ant Build Output (Consumer)\nDESCRIPTION: This snippet shows the output of running the ActiveMQ Classic consumer Ant script.  It includes the build file being used, directory creation, compilation and the consumer connecting to the ActiveMQ broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\nBuildfile: build.xml\n\ninit:\n    [mkdir] Created dir: /opt/incubator-activemq-4.0.2/example/target/classes\n    [mkdir] Created dir: /opt/incubator-activemq-4.0.2/example/src/ddl\n\ncompile:\n    [javac] Compiling 6 source files to /opt/incubator-activemq-4.0.2/example/target/classes\n\nconsumer:\n     [echo] Running consumer against server at $url = tcp://localhost:61616 for subject $subject = TEST.FOO\n     [java] Connecting to URL: tcp://localhost:61616\n     [java] Consuming queue: TEST.FOO\n     [java] Using non-durable subscription\n     [java] We are about to wait until we consume: 10 message(s) then we will shutdown\n```\n\n----------------------------------------\n\nTITLE: Build NMS modules with NAnt\nDESCRIPTION: Builds the NMS API and provider libraries using NAnt. It starts by building the Apache.NMS module and then proceeds to build the individual provider modules. The paths should be modified to target specific tag releases instead of trunk if needed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/building.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd activemq-dotnetcd Apache.NMS\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.ActiveMQ\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.AMQP\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.EMS\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.MQTT\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.MSMQ\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.Stomp\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.WCF\\trunk\nnant\n\ncd ..\\..\\Apache.NMS.ZMQ\\trunk\nnant\n```\n\n----------------------------------------\n\nTITLE: LDAP Suffix Configuration\nDESCRIPTION: Configures the suffix, rootdn, and rootpw within the `slapd.conf` file for OpenLDAP.  It defines the base distinguished name (DN) for entries, the administrative DN, and the administrative password.  Cleartext passwords should be avoided, and strong authentication is encouraged.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/cached-ldap-authorization-module.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsuffix          \"dc=activemq,dc=apache,dc=org\"\nrootdn          \"cn=admin,dc=activemq,dc=apache,dc=org\"\n# Cleartext passwords, especially for the rootdn, should\n# be avoid.  See slappasswd(8) and slapd.conf(5) for details.\n# Use of strong authentication encouraged.\nrootpw          {SSHA}lfAYn54xCFghgQv5B2Kqn3d3eLojqxtS\n```\n\n----------------------------------------\n\nTITLE: SSL/TLS Key Storage Configuration (XML)\nDESCRIPTION: This XML snippet configures the key storage for SSL/TLS transport security. It specifies the path to the keystore file, the keystore password, and optionally, the key password and key alias. This configuration is required to enable secure communication between the broker and its clients.  The `${apollo.base}/etc/keystore` path is a placeholder for the actual keystore file location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<key_storage \n   file=\"${apollo.base}/etc/keystore\" \n   password=\"password\" \n   key_password=\"password\"/>\n\n<connector id=\"stomp-secure\" bind=\"ssl://0.0.0.0:61614\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Exceptions with Timeout (XML)\nDESCRIPTION: This XML configuration demonstrates how to configure ActiveMQ Classic to throw a `javax.jms.ResourceAllocationException` on the client side after a specified timeout. Setting `sendFailIfNoSpaceAfterTimeout` causes the `send()` operation to block for the given time before failing.  Configuration occurs in the `activemq.xml` file. Timeout is defined in milliseconds.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/producer-flow-control.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<systemUsage>\n <systemUsage sendFailIfNoSpaceAfterTimeout=\"3000\">\n   <memoryUsage>\n     <memoryUsage limit=\"20 mb\"/>\n   </memoryUsage>\n </systemUsage>\n</systemUsage>\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP (GPG)\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP or GPG signatures. The user needs to first download the KEYS file and the corresponding .asc signature file for the distribution. The commands import the keys and then verify the signature against the downloaded file. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-02.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Network Broker 1 Configuration (XML)\nDESCRIPTION: This XML configuration represents the first broker ('FirstBroker') in a network of two ActiveMQ Classic brokers. Similar to the single broker config, it includes JMX, shutdown hook, and WebLogic security.  It configures a network connector to the second broker and uses an embedded Derby database for persistence.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://activemq.org/config/1.0\">\n  <!-- Allows us to use system properties as variables in this configuration file -->\n  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n  \n  <broker useJmx=\"true\" brokerName=\"FirstBroker\" useShutdownHook=\"false\"\n          plugins=\"#WebLogicSecurity\">\n\n    <!-- Register all ActiveMQ Classic MBeans with the WebLogic runtime MBeanServer -->\n    <managementContext>\n      <managementContext>\n          <MBeanServer>\n             <bean class=\"org.springframework.jndi.JndiObjectFactoryBean\" xmlns=\"\">\n                <property name=\"jndiName\" value=\"java:comp/env/jmx/runtime\" />\n                <property name=\"lookupOnStartup\" value=\"true\" />\n                <property name=\"expectedType\" value=\"javax.management.MBeanServer\" />\n             </bean>\n          </MBeanServer>\n      </managementContext>\n    </managementContext>\n  \n    <persistenceAdapter>\n      <!-- By default, use an embedded Derby database -->\n        <journaledJDBC journalLogFiles=\"5\"\n                       dataDirectory=\"/server/bea/weblogic920/domains/jms/activemq-b1-data\"/>\n      <!-- Use this with the WebLogicDataSource below to use a WebLogic\n           database connection pool instead of the embedded Derby database\n        <journaledJDBC journalLogFiles=\"5\"\n                       dataDirectory=\"/server/bea/weblogic920/domains/jms/activemq-b1-data\"\n                       dataSource=\"#WebLogicDataSource\" />\n\n      -->\n    </persistenceAdapter>\n  \n    <transportConnectors>\n        <transportConnector name=\"FirstBrokerTCP\" uri=\"tcp://0.0.0.0:60010\" />\n    </transportConnectors>\n    \n    <networkConnectors>\n        <networkConnector name=\"Broker1ToBroker2\"\n                          uri=\"static://(tcp://localhost:60011)\" failover=\"true\"\n                          userName=\"fixme\" password=\"fixme\"/>\n    </networkConnectors>\n  </broker>\n\n  <bean id=\"WebLogicSecurity\"\n        class=\"com.example.activemq.weblogic.ActiveMQToWebLogicSecurity\">\n      <property name=\"authorizedGroup\" value=\"ActiveMQUsers\" />\n  </bean>\n\n<!-- Uncomment and configure this if you want to use a WebLogic database\n     connection pool for persistent messages\n  <bean id=\"WebLogicDataSource\"\n        class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n     <property name=\"jndiName\" value=\"db/pool/jndi/name\"/>\n  </bean>\n-->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bundler\nDESCRIPTION: This command uses Bundler to install all the dependencies specified in the Gemfile for the ActiveMQ website.\nSOURCE: https://github.com/apache/activemq-website/blob/main/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for CMS API 1.1\nDESCRIPTION: This command allows users to checkout the CMS API 1.1 source code from the Apache Subversion repository. It retrieves the code from the specified SVN URL, enabling developers to access and modify the codebase.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/cms-api-11-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/cms-1.1/\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages using wget with Session Management\nDESCRIPTION: This snippet shows how to consume messages from a queue using wget while maintaining a session to avoid creating multiple consumers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\nwget --user admin --password admin --save-cookies cookies.txt --load-cookies cookies.txt --keep-session-cookies  http://localhost:8161/api/message/TEST1?type=queue\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the instantiation of a SomeJava object. This could be part of an example illustrating how to use ActiveMQ's Java API.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.27.1/syntax.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Creating a Retroactive Consumer in NMS.ActiveMQ\nDESCRIPTION: This code snippet demonstrates how to create a retroactive consumer in NMS.ActiveMQ using the NMS API. It involves getting a topic with the 'consumer.retroactive=true' parameter and then creating a consumer on that topic. The session object is assumed to be an existing NMS session.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/retroactive-consumers.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar topic = session.GetTopic(\"TEST.Topic?consumer.retroactive=true\");\nvar consumer = session.CreateConsumer(topic);\n```\n\n----------------------------------------\n\nTITLE: Committer Vote Result Template\nDESCRIPTION: This template is used to announce the results of a committer vote. It includes the number of +1, 0, and -1 votes, and indicates whether the vote passed or failed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [RESULT][VOTE] Offer <CANDIDATE> to become an ActiveMQ committer.\n\nThis vote has been open for <X> days and is now closed with the following results:\n\n* Number of +1s  \n* Number of 0s  \n* Number of -1s\n\nThe vote <passes|does not pass>.\n```\n\n----------------------------------------\n\nTITLE: Jekyll: Looping through Artemis Releases\nDESCRIPTION: This snippet uses Jekyll's templating language to loop through a collection of Artemis releases and render information for each release. It retrieves releases, reverses their order, and iterates through them to display relevant data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/download/past_releases.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% assign reversed_releases = site[\"artemis_releases\"] | reverse %}\n{% assign current_releases = \"\" | split: ',' %}\n\n{% for current_release_prefix in site.data.current_releases[\"artemis\"] %}\n    {% for release in reversed_releases %}\n        {% if release.version contains current_release_prefix %}\n            {% assign current_releases = current_releases | push: release.version %}\n            {% break %}\n        {% endif %}\n    {% endfor %}\n{% endfor %}\n\n{% for release in reversed_releases %}\n    {% unless current_releases contains release.version %}\n{% include artemis_release.md release=release is_current_release=false %}\n<br/>\n    {% endunless %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Local Install Path\nDESCRIPTION: This command configures Bundler to install dependencies in a local directory (vendor/bundle) within the site's checkout, isolating the project's dependencies from the global environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbundle config set path --local vendor/bundle\n```\n\n----------------------------------------\n\nTITLE: Customizing Principal Kinds in ActiveMQ Apollo (XML)\nDESCRIPTION: This XML snippet demonstrates how to customize the principal kinds used for authentication and authorization in ActiveMQ Apollo. The `user_principal_kind` and `acl_principal_kind` elements specify the class names of the principals to recognize. This is useful when using custom JAAS login modules that produce principals of different class types. The first principal who's type matches the `user_principal_kind` list will be selected as the user's identity.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<authentication domain=\"apollo\">\n  <user_principal_kind>com.sun.security.auth.UnixPrincipal</user_principal_kind>\n  <user_principal_kind>com.sun.security.auth.LdapPrincipal</user_principal_kind>\n  <acl_principal_kind>com.sun.security.auth.UnixPrincipal</acl_principal_kind>\n  <acl_principal_kind>com.sun.security.auth.LdapPrincipal</acl_principal_kind>\n</authentication>\n```\n\n----------------------------------------\n\nTITLE: PMC Discussion Template\nDESCRIPTION: This template is used to initiate a discussion about inviting a committer to join the ActiveMQ PMC. It includes fields for providing evidence of the candidate's contributions as a committer.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [DISCUSS] Invite <CANDIDATE> to join ActiveMQ PMC\n\nConsidering <CANDIDATE>’s contributions to the ActiveMQ project as a committer...\n\n<INSERT EVIDENCE HERE>\n\nBased on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.\n\nPlease remember that this is not a vote for this person to become a committer, at this point it is only a discussion.\n```\n\n----------------------------------------\n\nTITLE: Initialize ActiveMQ Classic Ajax API with jQuery\nDESCRIPTION: This JavaScript code snippet initializes the ActiveMQ Classic Ajax API using jQuery as the adapter. It includes the necessary JavaScript files for jQuery, the jQuery adapter, and the core `amq.js` file. The `amq.init()` function configures the connection URI, logging, and timeout settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ajax.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\" src=\"js/jquery-1.4.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/amq_jquery_adapter.js\"></script>\n<script type=\"text/javascript\" src=\"js/amq.js\"></script>\n<script type=\"text/javascript\">\n  var amq = org.activemq.Amq;\n  amq.init({ \n    uri: 'amq', \n    logging: true,\n    timeout: 20\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic with Web Examples\nDESCRIPTION: This command starts an ActiveMQ Classic broker with web examples using the `activemq-demo.xml` configuration file. This configuration includes demos that were previously included in the default configuration but are now excluded from version 5.8 onwards. It utilizes the `activemq` script with the `console` argument and specifies the configuration file via the `xbean:` prefix.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/web-samples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console xbean:examples/conf/activemq-demo.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connector with Binary Transfers Disabled in ActiveMQ\nDESCRIPTION: This snippet shows how to configure a WebSocket connector in ActiveMQ with binary transfers disabled.  The `binary_transfers` parameter, set to `false` as a query parameter in the `bind` URI, specifies whether data should be sent to the client as binary blobs.  This is important because not all browsers support binary WebSocket data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"ws\" bind=\"ws://0.0.0.0:61623?binary_transfers=false\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in ra.xml (Initial)\nDESCRIPTION: This XML snippet from the ra.xml file defines the configuration property for the ActiveMQ Classic server URL. It initially uses the tcp:// protocol for connecting to ActiveMQ Classic on localhost. The goal is to change this to vm:// protocol for embedded brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      The URL to the ActiveMQ Classic server that you want this connection to connect to.  If using\n      an embedded broker, this value should be 'vm://localhost'.\n    </description>\n    <config-property-name>ServerUrl</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <config-property-value>tcp://localhost:61616</config-property-value>\n<!-- <config-property-value>vm://localhost</config-property-value> -->\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ 5.12.0 Dependency in Maven POM\nDESCRIPTION: This snippet demonstrates how to add the ActiveMQ 5.12.0 dependency to a Maven project's pom.xml file. It uses the activemq-all artifact, which is an uber jar containing all ActiveMQ components. Alternatively, individual components like activemq-client or activemq-broker can be specified for finer-grained control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-12-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.12.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Verifying ActiveMQ Classic RAR Contents\nDESCRIPTION: This snippet demonstrates how to verify the contents of the ActiveMQ Classic RAR file using the `jar tvf` command. It checks if the RAR file is complete and contains the necessary files for integration with JBoss. An incomplete download of ActiveMQ Classic can cause this to fail.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ./incubator-activemq-4.0.2.tar.gz\n$ jar tvf /opt/incubator-activemq-4.0.2/lib/optional/activemq-ra-4.0.2.rar\n     0 Mon Sep 25 19:00:50 MDT 2006 META-INF/\n   399 Mon Sep 25 19:00:48 MDT 2006 META-INF/MANIFEST.MF\n   523 Mon Sep 25 13:07:40 MDT 2006 META-INF/DISCLAIMER.txt\n 11359 Mon Sep 25 13:07:40 MDT 2006 META-INF/LICENSE.txt\n 20305 Mon Sep 25 13:07:40 MDT 2006 META-INF/ra.xml\n  2334 Mon Sep 25 13:07:40 MDT 2006 broker-config.xml\n 70023 Mon Sep 25 19:00:48 MDT 2006 activemq-ra-4.0.2.jar\n1351744 Mon Sep 25 19:00:14 MDT 2006 activemq-core-4.0.2.jar\n232107 Mon Sep 25 18:22:48 MDT 2006 activeio-core-3.0-beta4.jar\n2143211 Tue Aug 01 11:44:50 MDT 2006 derby-10.1.1.0.jar\n1901653 Tue Aug 01 11:47:08 MDT 2006 spring-1.2.6.jar\n 94713 Tue Aug 01 11:47:22 MDT 2006 xbean-spring-2.2.jar\n 52915 Tue Aug 01 12:22:16 MDT 2006 commons-logging-1.1.jar\n 16030 Tue Aug 01 12:22:32 MDT 2006 geronimo-j2ee-management_1.0_spec-1.0.jar\n329586 Tue Aug 01 12:22:54 MDT 2006 backport-util-concurrent-2.1.jar\n358085 Tue Aug 01 12:23:26 MDT 2006 log4j-1.2.12.jar\n   523 Mon Sep 25 19:00:50 MDT 2006 META-INF/DISCLAIMER.txt\n 11359 Mon Sep 25 19:00:50 MDT 2006 META-INF/LICENSE.txt\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ-CPP 3.2.4\nDESCRIPTION: This snippet provides the SVN command to checkout the ActiveMQ-CPP 3.2.4 release from the Apache repository. It allows users to obtain the source code directly from the Subversion repository.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/324-release.md#_snippet_0\n\nLANGUAGE: SVN\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.4/\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO SSL Transport in ActiveMQ Classic Broker XML\nDESCRIPTION: This snippet demonstrates configuring the NIO SSL transport within an ActiveMQ Classic broker's XML configuration file. The `uri` attribute specifies the address and port for the NIO SSL transport connector.  This transport is server-side only.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-4-connection-uris.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio+ssl\" uri=\"nio+ssl://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Setting Maven Options for Memory\nDESCRIPTION: This snippet shows how to set Maven options to increase the memory available to Maven. This is necessary if Maven crashes with a `java.lang.OutOfMemoryError` during the build process.  The `-Xmx1024M` option sets the maximum heap size to 1024MB.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport MAVEN_OPTS=-Xmx1024M\n```\n\n----------------------------------------\n\nTITLE: Remove multicast discovery URI from transportConnector - XML\nDESCRIPTION: This snippet shows how to remove the multicast discovery URI attribute from the transportConnector element in the ActiveMQ Classic configuration file. This prevents the broker from advertising its connection URI on the multicast network.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-disable-multicast-discovery.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet creates an instance of the `SomeJava` class. It demonstrates basic object instantiation.  The snippet assumes the existence of a class named `SomeJava`. The code creates an object named `s` of type `SomeJava`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.16.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with GPG\nDESCRIPTION: These commands are used to verify the integrity of the downloaded ActiveMQ files using GPG. First, the KEYS file is imported, then the signature file is verified against the downloaded archive. This ensures the authenticity and integrity of the downloaded ActiveMQ distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-01.md#_snippet_2\n\nLANGUAGE: GPG\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveMQ Broker Feature in Karaf\nDESCRIPTION: This command installs the `activemq-broker` feature in Karaf, which includes the full broker and web console. This is equivalent to starting the standalone ActiveMQ Classic distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkaraf@root> features:install activemq-broker\n```\n\n----------------------------------------\n\nTITLE: Committer Vote Template\nDESCRIPTION: This template is used to initiate a formal vote on offering committer status to a candidate. It references previous discussions and requires at least three binding +1 votes with no vetoes to pass.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [VOTE] Offer <CANDIDATE> to become an ActiveMQ committer\n\nAfter positive discussion about <CANDIDATE>’s contributions to the project, I would like to initiate a formal vote.\n\nConsidering <INSERT EVIDENCE HERE> as raised in the discussion thread...\n\nThis vote will follow the ASF process for committer votes and consensus approval (at least three binding +1 votes and no vetoes)The vote will be open for 72 hours.\n\n[ ] +1 Accept <CANDIDATE> as a committer of Apache ActiveMQ  \n[ ] +0  \n[ ] -1 Do not accept at this time because...\n```\n\n----------------------------------------\n\nTITLE: BDB Store Configuration in virtual_host (XML)\nDESCRIPTION: This XML snippet configures the BDB message store within a virtual host. It sets the directory for data files using the `directory` attribute.  Note that the BDB library (je-5.0.34.jar) needs to be downloaded and placed in the `${APOLLO_HOME}/lib` directory before enabling this store. The `${apollo.base}/data` is a placeholder for the base directory of the Apollo installation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<virtual_host id=\"default\">\n  ...\n  <bdb_store directory=\"${apollo.base}/data\"/>\n  ..\n</virtual_host>\n```\n\n----------------------------------------\n\nTITLE: Example Broker Properties File - ActiveMQ Classic\nDESCRIPTION: Presents an example properties file used for configuring an ActiveMQ Classic broker. It shows properties such as disabling JMX, setting persistence to false, and defining the broker name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-properties-uri.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n## ---------------------------------------------------------------------------\n## Licensed to the Apache Software Foundation (ASF) under one or more\n## contributor license agreements.  See the NOTICE file distributed with\n## this work for additional information regarding copyright ownership.\n## The ASF licenses this file to You under the Apache License, Version 2.0\n## (the \"License\"); you may not use this file except in compliance with\n## the License.  You may obtain a copy of the License at\n## \n## http://www.apache.org/licenses/LICENSE-2.0\n## \n## Unless required by applicable law or agreed to in writing, software\n## distributed under the License is distributed on an \"AS IS\" BASIS,\n## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n## See the License for the specific language governing permissions and\n## limitations under the License.\n## ---------------------------------------------------------------------------\n# START SNIPPET: example\nuseJmx = false\npersistent = false\nbrokerName = Cheese\n# END SNIPPET: example\n```\n\n----------------------------------------\n\nTITLE: Get Connector Details Example (JSON)\nDESCRIPTION: This example demonstrates how to retrieve details about a specific connector (tcp) using the REST API. It uses `curl` to make a GET request with authentication credentials to the `/broker/connectors/{connector}.json` endpoint and returns a JSON response containing connector information like ID, state, address, and connection statistics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/connectors/tcp.json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"tcp\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314573798510,\n  \"local_address\": \"/0.0.0.0:61613\",\n  \"protocol\": \"any\",\n  \"connection_counter\": 100,\n  \"connected\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscription Statistics using StatisticsPlugin in ActiveMQ Classic (Java)\nDESCRIPTION: This Java code snippet demonstrates how to retrieve subscription statistics using the ActiveMQ Classic StatisticsPlugin.  It sends a message to the ActiveMQ.Statistics.Subscription destination and receives one or more messages, each containing the statistics for exactly one subscription on the Broker. It then iterates through the MapMessage to print subscription statistics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/statisticsplugin.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nQueue replyTo = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(replyTo);\n\nString queueName = \"ActiveMQ.Statistics.Subscription\";\nQueue testQueue = session.createQueue(queueName);\nMessageProducer producer = session.createProducer(testQueue);\nMessage msg = session.createMessage();\nmsg.setJMSReplyTo(replyTo);\nproducer.send(msg);\n\nMapMessage reply = (MapMessage) consumer.receive();\nassertNotNull(reply);\n\nfor (Enumeration e = reply.getMapNames();e.hasMoreElements();) {\n  String name = e.nextElement().toString();\n  System.out.println(name + \"=\" + reply.getObject(name));\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to a Queue/Topic using URL-Encoded Destination with curl\nDESCRIPTION: These snippets demonstrate publishing messages to a specific queue or topic using an alternative syntax with the 'destination' parameter URL-encoded. Includes HTTP method specification and authentication.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n# Send to queue orders.input:\ncurl -XPOST -d \"body=message\" http://admin:admin@localhost:8161/api/message?destination=queue://orders.input\n```\n\nLANGUAGE: curl\nCODE:\n```\n# Send to topic orders.input:\ncurl -XPOST -d \"body=message\" http://admin:admin@localhost:8161/api/message?destination=topic://orders.input\n```\n\n----------------------------------------\n\nTITLE: TCP Client-Server Connection\nDESCRIPTION: This snippet illustrates how to establish a TCP connection between clients and a Message Broker, enabling a diverse range of communication options such as publish/subscribe and queue-based messaging.  Clients can be load balanced across brokers with failover support.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-topologies.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntcp://somehost:port\n```\n\n----------------------------------------\n\nTITLE: Restarting by Re-instantiating Broker in Java\nDESCRIPTION: This code snippet demonstrates how to restart an embedded ActiveMQ Classic broker by first stopping the existing broker, then creating a new broker instance from the configuration file 'activemq.xml', and finally starting the new broker. This approach is recommended for a more reliable restart as it avoids potential state corruption.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-restart-embedded-broker.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBrokerService service = BrokerFactory.createBroker(\"xbean:activemq.xml\");\nservice.start();\nservice.waitUntilStarted();\n\nservice.stop();\nservice.waitUntilStopped();\n\nservice = BrokerFactory.createBroker(\"xbean:activemq.xml\");\nservice.start();\n```\n\n----------------------------------------\n\nTITLE: Changing Permissions for ActiveMQ Script (Unix)\nDESCRIPTION: This set of commands changes the permissions of the `activemq` script to make it executable. `cd` changes the directory to the `bin` directory within the ActiveMQ Classic installation directory. `chmod 755 activemq` sets the execute permission for the owner, group, and others. This is required to allow the script to be run to start and stop the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]/bin\nchmod 755 activemq\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Connection using Discovery and Multicast in ActiveMQ Classic\nDESCRIPTION: This XML snippet shows an example of client-side configuration using the 'discovery' transport with multicast. The client uses a discovery agent to locate available brokers by listening to advertisements on the specified multicast address. If a broker is unavailable, it will attempt to connect to another broker found via multicast.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/what-is-the-difference-between-discovery-multicast-and-zeroconf.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <transportConnectors>\n      <transportConnector name=\"default\" uri=\"discovery:(multicast://default)\"/>\n   </transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Broker XML Configuration - Initial\nDESCRIPTION: This XML snippet from META-INF/ra.xml initially has an empty value for the BrokerXmlConfig property. The commented-out line shows the desired configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      Sets the XML configuration file used to configure the embedded ActiveMQ Classic broker via\n      Spring if using embedded mode.\n\n      BrokerXmlConfig is the filename which is assumed to be on the classpath unless\n      a URL is specified. So a value of foo/bar.xml would be assumed to be on the\n      classpath whereas file:dir/file.xml would use the file system.\n      Any valid URL string is supported.\n    </description>\n    <config-property-name>BrokerXmlConfig</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <config-property-value></config-property-value>\n    <!--\n    <config-property-value>xbean:broker-config.xml</config-property-value>\n    -->\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Message with CRON Expression in ActiveMQ using NMS (C#)\nDESCRIPTION: This code snippet demonstrates how to schedule a message using a CRON expression via the `AMQ_SCHEDULED_CRON` property. It sets the CRON expression to \"0 * * * *\", which means the message will be delivered every hour. The ActiveMQ broker must have scheduler support enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/delay-and-schedule-message-feature.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nmessage.Properties[\"AMQ_SCHEDULED_CRON\"] = \"0 * * * *\";\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Setting Broker Name in ActiveMQ Classic XML\nDESCRIPTION: This snippet demonstrates how to set the brokerName attribute within the ActiveMQ Classic broker XML configuration. This is important for identifying the broker within the network.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<broker useJmx=\"true\" brokerName=\"bruce.broker1\">\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Core\nDESCRIPTION: This XML snippet shows the correct Maven dependency configuration required to include ActiveMQ Core version 5.4.3 in a Maven project. It specifies the groupId, artifactId, and version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-03.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.4.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Classic 5.15.0 Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ Classic 5.15.0 dependency to a Maven project using the activemq-all uber jar. This simplifies including all ActiveMQ components. It requires Maven to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-00.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet configures the Maven dependency for ActiveMQ Classic 5.4.1. It specifies the groupId, artifactId, and version required to include the activemq-core library in a Maven project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-01.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.4.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Producer with Ant\nDESCRIPTION: This snippet shows how to run the ActiveMQ Classic producer using Apache Ant. It navigates to the examples directory and executes the `ant producer` command. The output displays the build process and the producer connecting to the specified URL and sending messages to the TEST.FOO queue. This requires Apache Ant to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /opt/incubator-activemq-4.0.2/examples\n$ ant producer\n```\n\n----------------------------------------\n\nTITLE: VM Transport Simple Broker Configuration URI\nDESCRIPTION: This snippet shows the basic syntax for configuring a VM transport connection with limited broker options. The broker name and transport options can be specified in the URI. If the broker does not exist, it will be created unless create=false is set. Connecting to an existing broker requires matching the brokerName in the vm:// URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/vm-transport-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvm://brokerName?transportOptions\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP using pgpk\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the KEYS file, and the second command verifies the downloaded file using the corresponding .asc signature file.  It assumes you are using the `pgpk` command-line tool.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-02.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Classic Dependency - Maven\nDESCRIPTION: This snippet shows how to add the ActiveMQ Classic 5.14.5 dependency to a Maven project using the `<dependency>` tag in the `pom.xml` file.  The `groupId` is `org.apache.activemq`, the `artifactId` is `activemq-all`, and the `version` is `5.14.5`.  This will include the complete ActiveMQ Classic library in the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-05.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.14.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ-CPP 3.9.3 Tag using Git\nDESCRIPTION: This snippet demonstrates how to clone the ActiveMQ-CPP repository from Apache Gitbox, navigate to the cloned directory, and checkout the specific tag for version 3.9.3. This allows developers to access the exact source code corresponding to the 3.9.3 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/393-release.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.9.3\n```\n\n----------------------------------------\n\nTITLE: STOMP Send Frame with Retain Header\nDESCRIPTION: This STOMP frame demonstrates how to send a message to a topic with the `retain` header set to `true`.  This allows the topic to retain the last message for new subscribers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSEND\ndestination:/topic/stock/IBM\nretain:true\n\n112.12\n^@\n```\n\n----------------------------------------\n\nTITLE: Installing the Stomp gem in Ruby\nDESCRIPTION: This command installs the Stomp gem, which is a Ruby client for the Stomp protocol, allowing Ruby applications to interact with message brokers like ActiveMQ. It uses the `gem install` command, which is part of the RubyGems package manager.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ruby.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem install stomp\n```\n\n----------------------------------------\n\nTITLE: Navigating to Installation Directory (Windows)\nDESCRIPTION: This command changes the current directory to the ActiveMQ Classic installation directory in a Windows console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\ncd [activemq_install_dir]\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Plugin XML Definition within Broker\nDESCRIPTION: This XML snippet shows an alternative method for defining plugins directly within the `<plugins>` element of the broker configuration. This allows for in-place instantiation and configuration of plugins.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/interceptors.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:amq=\"http://activemq.org/config/1.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.org/config/1.0 \nhttp://activemq.apache.org/schema/activemq-core.xsd http://activemq.apache.org/camel/schema/spring\nhttp://activemq.apache.org/camel/schema/spring/camel-spring.xsd\">\n\n <!-- Allows us to use system properties as variables in this configuration file -->\n <bean  class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\" />\n\n <broker xmlns=\"http://activemq.org/config/1.0\" brokerName=\"localhost\" dataDirectory=\"${activemq.base}/data\">\n\n  <!-- The transport connectors ActiveMQ Classic will listen to -->\n  <transportConnectors>\n     <transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\" />\n  </transportConnectors>\n\n  <plugins>\n      <bean xmlns=\"http://www.springframework.org/schema/beans\" id=\"myPlugin\" class=\"org.myorg.MyPlugin\"/>    \n  </plugins>\n\n </broker>\n \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Cloning ActiveMQ Classic GIT Repository\nDESCRIPTION: This command clones the ActiveMQ Classic git repository from the Apache Software Foundation's git server.  It requires git to be installed on your system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/git.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [https://git-wip-us.apache.org/repos/asf/activemq.git](https://git-wip-us.apache.org/repos/asf/activemq.git)\n```\n\n----------------------------------------\n\nTITLE: Log4J Configuration (Properties)\nDESCRIPTION: This Log4J configuration file sets up logging for ActiveMQ Classic. It defines the root logger level as INFO, configures logging to both stdout (console) and a rolling file appender. The configuration specifies the layout patterns for log messages, the log file path, maximum file size, and the number of backup files to retain.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# Can change this to \"INFO, out\" or \"INFO, out, stdout\"\n# to enable logging to the file defined down below\nlog4j.rootLogger=INFO, stdout\nlog4j.logger.org.apache.activemq.spring=WARN\nlog4j.logger.org.springframework=WARN\nlog4j.logger.org.apache.xbean.spring=WARN\n\n# Configuration to log to stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%-5p %-30.30c{1} - %m%n\nlog4j.appender.stdout.threshold=INFO\n\n# Configuration for a log file (in addition to or instead of stdout)\nlog4j.appender.out=org.apache.log4j.RollingFileAppender\nlog4j.appender.out.file=/server/bea/weblogic920/domains/test/activemq.log\nlog4j.appender.out.maxFileSize=1024KB\nlog4j.appender.out.maxBackupIndex=5\nlog4j.appender.out.append=true\nlog4j.appender.out.layout=org.apache.log4j.PatternLayout\nlog4j.appender.out.layout.ConversionPattern=%d \\[%-15.15t\\] %-5p %-30.30c{1} - %m%n\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP - Shell\nDESCRIPTION: These shell commands are used to verify the integrity of downloaded files using PGP signatures. The commands import the public key and then verify the downloaded file against the signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-12-01.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Get Topic Details with Producers and Consumers\nDESCRIPTION: This example shows how to retrieve details about a specific topic on a virtual host, including the lists of producers and consumers using curl.  Authentication is required and the `producers=true` and `consumers=true` query parameters are used to include those lists in the response.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/virtual-hosts/default/topics/example-2.json?producers=true&consumers=true\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic - XML\nDESCRIPTION: This snippet defines the Maven dependency for using ActiveMQ Classic 5.11.2 in a Maven project.  It includes the groupId, artifactId, and version. Using activemq-all includes all activemq components.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-02.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.11.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: RetainedMessageSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Configures a retained message subscription recovery policy. This policy retains the last message with the ActiveMQ.Retain property set to true. New subscribers receive only these retained messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<retainedMessageSubscriptionRecoveryPolicy/>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ 5.11.1 dependency to a Maven project. It includes the groupId, artifactId, and version of the ActiveMQ all-in-one jar. Add this to the dependencies section of your pom.xml file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-01.md#_snippet_3\n\nLANGUAGE: Maven\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.11.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Navigating to ActiveMQ Install Directory (Unix)\nDESCRIPTION: This command changes the current directory in the command shell to the ActiveMQ Classic installation directory on Unix-like systems. This is a prerequisite for running the ActiveMQ Classic startup script.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]\n```\n\n----------------------------------------\n\nTITLE: JMSException Stack Trace\nDESCRIPTION: This stack trace indicates a wire format negotiation timeout issue in ActiveMQ Classic. It typically occurs during the initial connection setup between the client and the broker, suggesting a problem with the communication or configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javaxjmsjmsexception-wire-format-negociation-timeout-peer-did-not-send-his-wire-format.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njavax.jms.JMSException: Wire format negociation timeout: peer did not send his wire format.\n    at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:58)\n    at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1185)\n    at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1263)\n    at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:449)\n```\n\n----------------------------------------\n\nTITLE: Generate Eclipse Project Files with Maven 3\nDESCRIPTION: This command generates Eclipse project files for ActiveMQ Classic using the Maven Eclipse plugin. It allows users to import the project into Eclipse and work with the source code in an IDE environment.  Ensure the Eclipse plugin is configured in your Maven settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/building.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn eclipse:eclipse\n```\n\n----------------------------------------\n\nTITLE: Minimal Maven POM Configuration XML\nDESCRIPTION: This snippet shows a minimal pom.xml file required to use the ActiveMQ Classic Maven plugin. It defines the project's groupId, artifactId, and version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/maven2-activemq-broker-plugin.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.acme</groupId>\n  <artifactId>run-amq</artifactId>\n  <version>1.0-SNAPSHOT</version>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stomp Connector with User Header in ActiveMQ\nDESCRIPTION: This snippet demonstrates how to configure a connector in ActiveMQ to set the `user_id` header of messages to the ID of the user that sent the message when using the STOMP protocol.  It requires the `stomp` element to be nested within the `connector` element. The `add_user_header` attribute is set to \"user_id\".\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <stomp add_user_header=\"user_id\"/>\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Enabling Mirrored Queues via XML Configuration\nDESCRIPTION: This snippet demonstrates how to enable Mirrored Queues in ActiveMQ by configuring the destination interceptors within the broker's XML configuration file. It sets up a mirrored topic for each queue, allowing monitoring of messages sent to that queue. The `copyMessage` attribute specifies if the original message should be copied.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/mirrored-queues.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <destinationInterceptors>\n        <mirroredQueue copyMessage = \"true\" postfix=\".qmirror\" prefix=\"\"/>\n    </destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ 5.15.4 dependency to a Maven project using the activemq-all uber jar.  This simplifies dependency management for basic use cases. Consider using more specific dependencies (activemq-client, activemq-broker, etc.) for finer-grained control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-04.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for ActiveMQ Classic 5.2\nDESCRIPTION: This XML snippet demonstrates the configuration for ActiveMQ Classic version 5.2, specifying the correct namespace and schema location. It's crucial to use the appropriate namespace based on the ActiveMQ Classic version being used. It requires Spring.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:amq=\"http://activemq.apache.org/schema/core\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://activemq.apache.org/schema/core\n        http://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd\n    \">\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP/GPG Shell\nDESCRIPTION: These shell commands are used to verify the integrity of downloaded files using PGP or GPG signatures. It involves importing the KEYS file and then verifying the signature file against the downloaded file. This ensures the downloaded file has not been tampered with.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-04.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: OpenWire Command Encoding\nDESCRIPTION: This snippet describes the encoding structure of a command in OpenWire. It includes an optional size prefix, the command type, and command-specific fields. The size prefix indicates the number of subsequent bytes in the command, and the type identifies the specific command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[=If SizePrefixDisabled =] \n[ option is not enabled. ]\n[ +------+               ] +------+-------------------------+\n[ | size |               ] | type | command-specific-fields |\n[ +------+               ] +------+-------------------------+\n[ | int  |               ] | byte | (size-1) octects        |\n[ +------+               ] +------+-------------------------+\n[========================]\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO+SSL Transport in Broker XML - ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the NIO+SSL transport within the broker's XML configuration file. It defines a transport connector named 'nio+ssl' that listens on all interfaces (0.0.0.0) on port 61616 using the NIO+SSL protocol. It is a server-side configuration to allow for a large number of SSL clients.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-connection-uris.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio+ssl\" uri=\"nio+ssl://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Creating an Apollo Broker Instance\nDESCRIPTION: This snippet shows how to create a new broker instance directory, typically under `/var/lib` on Unix systems. This involves navigating to the desired directory and using the `apollo create` command. The broker instance will contain subdirectories for binaries, configuration, data, logs, and temporary files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd /var/lib\napollo create mybroker\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests During Maven Build\nDESCRIPTION: This snippet shows the command to build ActiveMQ Classic using Maven while skipping the tests. This is useful when some tests are failing and a quick build is needed. This command assumes that Maven is correctly configured and that the user has sufficient permissions to execute Maven commands within the directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]\nmvn clean install -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Get Queue Details with Producers and Consumers\nDESCRIPTION: This example demonstrates how to retrieve details about a specific queue on a virtual host, including lists of producers and consumers using curl.  Authentication is required and the `producers=true` and `consumers=true` query parameters are used to include those lists in the response.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/virtual-hosts/default/queues/example-5.json?producers=true&consumers=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Queue with forwardOnly=false\nDESCRIPTION: This XML snippet configures a composite queue named \"IncomingOrders\" with the `forwardOnly` attribute set to `false`. This configuration means that messages sent to \"IncomingOrders\" will be copied and forwarded to the topic \"Notifications\", and also placed on the physical \"IncomingOrders\" queue for consumption by subscribers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/virtual-destinations.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<compositeQueue name=\"IncomingOrders\" forwardOnly=\"false\"> \n   <forwardTo>\n    <topic physicalName=\"Notifications\" />\n   </forwardTo>\n </compositeQueue>\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule Ordering Example (XML)\nDESCRIPTION: This XML snippet demonstrates the importance of rule ordering in ActiveMQ Apollo access control. The first rule that matches determines the access decision. In the first example, the deny rule for 'blue' is matched before the allow rule for 'red', resulting in access denial. In the second example, the allow rule is matched first, granting access.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<access_rule deny=\"blue\" action=\"send\"/>\n<access_rule allow=\"red\" action=\"send\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<access_rule allow=\"red\" action=\"send\"/>\n<access_rule deny=\"blue\" action=\"send\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to add a dependency to your Maven project's POM file for ActiveMQ Classic 5.14.3. It specifies the groupId, artifactId, and version required to include ActiveMQ Classic in your project. Using this dependency will include the activemq-all uber jar.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-03.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.14.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures using gpg\nDESCRIPTION: This snippet illustrates how to verify the integrity of downloaded ActiveMQ files using PGP signatures with the gpg command-line tool.  It downloads the KEYS file and the asc signature file for the distribution and verifies the signature. Replace <version> with the actual ActiveMQ version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-01.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom IOExceptionHandler in ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to configure a custom IOExceptionHandler in ActiveMQ Classic. It defines a bean for a custom handler class (`com.mycompany.MyIOExceptionHandler`) and sets the `ignoreAllErrors` property to true. The broker is then configured to use this handler by referencing the bean id.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configurable-ioexception-handling.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"ioExceptionHandler\" class=\"com.mycompany.MyIOExceptionHandler\">\n  <property name=\"ignoreAllErrors\"><value>true</value></property>\n</bean>\n\n<broker xmlns=\"http://activemq.apache.org/schema/core\" ioExceptionHandler=\"#ioExceptionHandler\">\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO Transport in Broker XML - ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the NIO transport within the broker's XML configuration file. It defines a transport connector named 'nio' that listens on all interfaces (0.0.0.0) on port 61616 using the NIO protocol.  It is a server-side configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-connection-uris.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio\" uri=\"nio://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: JMS Client Request with Temporary Queue\nDESCRIPTION: This code snippet demonstrates the client-side implementation for sending a request using a temporary queue for the response. It creates a temporary queue, a consumer for that queue, sets the JMSReplyTo property of the message to the temporary queue, and sets a correlation ID for matching responses to requests.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-should-i-implement-request-response-with-jms.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// client side\nDestination tempDest = session.createTemporaryQueue();\nMessageConsumer responseConsumer = session.createConsumer(tempDest);\n...\n\n// send a request..\nmessage.setJMSReplyTo(tempDest)\nmessage.setJMSCorrelationID(myCorrelationID);\n\nproducer.send(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Administration with CORS XML\nDESCRIPTION: This XML snippet configures the ActiveMQ Apollo broker to allow Cross-Origin Resource Sharing (CORS) for the web administration APIs.  The `cors_origin` parameter specifies the allowed domains or `*` for any domain.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<broker xmlns=\"http://activemq.apache.org/schema/activemq/apollo\">\n  ...\n  <web_admin bind=\"http://0.0.0.0:61680?cors_origin=*\"/>\n  <web_admin bind=\"https://0.0.0.0:61681?cors_origin=www.foo.com,bar.com\"/>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Signatures (Shell)\nDESCRIPTION: These snippets demonstrate how to verify the integrity of downloaded files using PGP or GPG. The commands import the KEYS file and verify the signature of the downloaded distribution.  The <version> placeholder should be replaced with the actual version number of the ActiveMQ distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-02.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This snippet provides the XML configuration needed to include ActiveMQ Classic 5.9.1 as a dependency in a Maven project.  It specifies the groupId, artifactId, and version to be used within the <dependencies> section of a pom.xml file. This allows Maven to automatically download and manage the ActiveMQ Classic 5.9.1 library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-09-01.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.9.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Connector with Discovery URI in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures a transport connector in the broker to advertise itself on a specified multicast address. This allows other brokers to discover and establish connections to this broker. The `discoveryUri` attribute specifies the multicast address for advertisement.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/what-is-the-difference-between-discovery-multicast-and-zeroconf.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n <transportConnectors>\n      <transportConnector name=\"default\" uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n   </transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Subscribing from Specific Sequence Number - STOMP\nDESCRIPTION: This example shows how to subscribe to a queue starting from a specific sequence number using the `from-seq` header in the `SUBSCRIBE` frame. This allows resuming from a known point in the message sequence.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_18\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\ndestination:/queue/foo\nfrom-seq:10\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Producer Class Definition C++\nDESCRIPTION: Defines a `HelloWorldProducer` class responsible for sending messages to either a queue or a topic on an ActiveMQ broker. The class uses the CMS API for message creation and sending.  It takes the broker URI, the number of messages to send, and a boolean indicating whether to use topics or queues as parameters.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/example.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass HelloWorldProducer : public Runnable {\nprivate:\n\n    std::string brokerURI;\n    int numMessages;\n    bool useTopics;\n    bool sessionTransacted;\n    long long sleepInterval;\n    CountDownLatch latch;\n    Connection* connection;\n    Session* session;\n    Destination* destination;\n    MessageProducer* producer;\n\nprivate:\n\n    HelloWorldProducer(const HelloWorldProducer&);\n    HelloWorldProducer& operator=(const HelloWorldProducer&);\n\npublic:\n\n    HelloWorldProducer(std::string brokerURI, int numMessages, bool useTopics, bool sessionTransacted = false, long long sleepInterval = 0) :\n        brokerURI(brokerURI), numMessages(numMessages), useTopics(useTopics), sessionTransacted(sessionTransacted), sleepInterval(sleepInterval),\n        latch(numMessages), connection(NULL), session(NULL), destination(NULL), producer(NULL) {\n    }\n\n    virtual ~HelloWorldProducer() {\n        cleanup();\n    }\n\n    void close() {\n        this->cleanup();\n    }\n\n    virtual void run() {\n\n        try {\n\n            // Create a ConnectionFactory\n            auto_ptr<ConnectionFactory> connectionFactory(ConnectionFactory::createCMSConnectionFactory(brokerURI));\n\n            // Create a Connection\n            connection = connectionFactory->createConnection();\n            connection->start();\n\n            // Create a Session\n            if (sessionTransacted) {\n                session = connection->createSession(Session::SESSION_TRANSACTED);\n            } else {\n                session = connection->createSession(Session::AUTO_ACKNOWLEDGE);\n            }\n\n            // Create the destination (Topic or Queue)\n            if (useTopics) {\n                destination = session->createTopic(\"TEST.FOO\");\n            } else {\n                destination = session->createQueue(\"TEST.FOO\");\n            }\n\n            // Create a MessageProducer from the Session to the Topic or Queue\n            producer = session->createProducer(destination);\n            producer->setDeliveryMode(DeliveryMode::NON_PERSISTENT);\n\n            // Create the messages\n            std::string text = \"Hello world! From: producer [\" + Thread::getCurrentThreadName() + \"] id: \";\n\n            for (int i = 1; i <= numMessages; ++i) {\n                TextMessage* message = session->createTextMessage(text + String::valueOf(i));\n\n                message->setIntProperty(\"messageNumber\", i);\n\n                producer->send(message);\n                latch.countDown();\n\n                if (sessionTransacted && (i % 100) == 0) {\n                    session->commit();\n                }\n\n                delete message;\n                Threads::sleep(sleepInterval);\n            }\n\n            // Indicate all messages have been sent.\n            std::cout << \"Producer [\" << Thread::getCurrentThreadName() << \"] is done producing.\" << std::endl;\n\n        } catch (CMSException& e) {\n            e.printStackTrace();\n        }\n    }\n\n    void waitUntilReady() {\n    }\n\nprotected:\n\n    void cleanup() {\n        try {\n            if (producer != NULL) {\n                delete producer;\n                producer = NULL;\n            }\n            if (destination != NULL) {\n                delete destination;\n                destination = NULL;\n            }\n            if (session != NULL) {\n                session->close();\n                delete session;\n                session = NULL;\n            }\n            if (connection != NULL) {\n                connection->close();\n                delete connection;\n                connection = NULL;\n            }\n        } catch (CMSException& e) {\n            e.printStackTrace();\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Liquid: Assign Releases and Flags\nDESCRIPTION: This snippet assigns the `nms_amqp_releases` from the site data to a variable called `releases` and reverses the order. It also initializes a boolean variable called `isCurrentRelease` to `false`. This setup is preparatory for checking if the current page represents the latest release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/nms_amqp_release.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign releases = site[\"nms_amqp_releases\"] | reverse %}\n{% assign isCurrentRelease = false %}\n```\n\n----------------------------------------\n\nTITLE: Restart Apollo Broker Service Windows\nDESCRIPTION: Command to restart the ActiveMQ Apollo broker service on Windows.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service restart\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Classic Broker via Maven Plugin (execute)\nDESCRIPTION: This command downloads and executes the ActiveMQ Classic Startup Maven Plugin to start the broker. It assumes a pom.xml file is present in the current directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn org.apache.activemq.tooling:maven-activemq-plugin:5.0-SNAPSHOT:run\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp - Shell\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `pgp` tool. First, the KEYS file is imported.  Then, the signature file is verified against the downloaded distribution file. Replace `<version>` with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-03.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Broker Lifecycle - Service Definition XML\nDESCRIPTION: This XML snippet shows how to define a custom service in the `apollo.xml` file. The `id` attribute is a unique service name, and the `kind` attribute is the class name of the service.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<service id='myservice' kind='org.example.MyService'/>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity Using PGP (GPG)\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using GPG.  It includes importing the KEYS file and then using the `gpg --verify` command along with the downloaded distribution and its corresponding `.asc` signature file. Replace `<version>` with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Running Producer via Command Line (Headless/Controller)\nDESCRIPTION: This command starts a producer application that sends messages to a specified destination. It can be configured to send messages to either a queue or a topic, and it allows specifying the number of messages to send. The producer connects to a broker instance at the given URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/example-testing-scenario.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava org.apache.activemq.test.ProducerMain --message-count=5000 --queue=true --destination=org.foo.bar tcp://$hostA:61616\n```\n\n----------------------------------------\n\nTITLE: Fanout Transport Configuration Syntax\nDESCRIPTION: Shows the two possible syntaxes for configuring the Fanout transport: with and without transport options included in the URI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/fanout-transport-reference.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\nfanout:(discoveryURI)?transportOptions\n```\n\nLANGUAGE: N/A\nCODE:\n```\nfanout:discoveryURI\n```\n\n----------------------------------------\n\nTITLE: Building ActiveMQ Classic using Maven\nDESCRIPTION: This snippet shows the recommended way to build ActiveMQ Classic from source using Maven. It first cleans the project and runs tests, then skips the tests if necessary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nThe recommended method of building ActiveMQ Classic is the following: cd [activemq_install_dir] where [activemq_install_dir] is the directory in which ActiveMQ Classic was installed. maven clean test If the above build fails on some tests, type the following: `cd [activemq_install_dir] maven -Dmaven.test.skip=true`\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for activemq-junit (XML)\nDESCRIPTION: This snippet shows the maven dependency needed to add the `activemq-junit` library for the JUnit Rule `EmbeddedActiveMQBroker`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.activemq.tooling</groupId>\n    <artifactId>activemq-junit</artifactId>\n    <version>${activemq-junit-version}</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.activemq</groupId>\n    <artifactId>activemq-broker</artifactId>\n    <version>${activemq-version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Load Test with Maven\nDESCRIPTION: This snippet demonstrates how to execute a load test using Maven. It specifies the test class to run and triggers the test execution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/load-testing-with-camel.md#_snippet_0\n\nLANGUAGE: Maven\nCODE:\n```\nactivemq/activemq-camel-loadtest> mvn test -Dtest=LocalBrokerParallelProducerLoadTest\n```\n\n----------------------------------------\n\nTITLE: Configure Kaha Persistence Adapter (ActiveMQ 4.1 and earlier)\nDESCRIPTION: Configures the Kaha persistence adapter within the ActiveMQ broker XML configuration for ActiveMQ Classic versions 4.1 and earlier.  It specifies the directory for storing data and sets the maximum data file length, using the 'dir' attribute instead of 'directory'.  Required for enabling persistent messaging in older versions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/kaha-persistence.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<broker brokerName=\"broker\" persistent=\"true\" useShutdownHook=\"false\">\n  <transportConnectors>\n    <transportConnector uri=\"tcp://localhost:61616\"/>\n  </transportConnectors>\n  <persistenceAdapter>\n    <kahaPersistenceAdapter dir=\"activemq-data\" maxDataFileLength=\"33554432\"/>\n  </persistenceAdapter>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic - XML\nDESCRIPTION: This XML snippet provides the Maven dependency configuration for using ActiveMQ Classic 5.15.6 in a Maven project. It includes the groupId, artifactId, and version required to add the activemq-all uber jar as a dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-06.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Consuming Message via GET (Non-Idempotent)\nDESCRIPTION: This snippet demonstrates a flawed method for consuming a message from a queue using an HTTP GET request.  It's considered bad practice because GET requests should be idempotent, which fetching and removing a message is not. It includes an attempt to maintain state using jsessionId.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /queue/Destination\nGET /queue/Destination?jsessionId=....\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connector using Multicast in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures a network connector in the broker to automatically establish connections with other brokers advertising themselves on a specified multicast address. When a discovery event is received from another broker, a network connector is established using the provided information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/what-is-the-difference-between-discovery-multicast-and-zeroconf.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <networkConnectors>\n   <networkConnector name=\"default\" uri=\"multicast://default\"/>\n </networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Committer Announcement Email Template\nDESCRIPTION: This template is used to announce a new committer to the developer mailing list. It includes the subject, recipient (dev list), and a message welcoming the new committer and acknowledging their contributions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nTo: [dev@activemq.apache.org](mailto:dev@activemq.apache.org)  \nSubject: [ANNOUNCE] New Apache ActiveMQ Committer <INVITEE>\n\nOn behalf of the Apache ActiveMQ PMC, I am very pleased to announce that <INVITEE> has accepted an invitation to become a committer. We greatly appreciate all of <INVITEE>'s hard work and generous contributions to the project. We look forward to <her/his> continued involvement in the project.\n\nWelcome <INVITEE> and congratulations!\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using GPG - Shell\nDESCRIPTION: These commands are used to verify the integrity of downloaded ActiveMQ files using GPG signatures. First, the KEYS file containing public keys is imported. Then, the signature file (.asc) is verified against the downloaded file using the imported keys. These commands are executed in a shell environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-04.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: compile.sh: Compile Script\nDESCRIPTION: Shell script to compile ActiveMQ Classic JARs into native shared libraries using GCJ and create a class map database. This improves performance by precompiling the Java bytecode to native code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\n\n# Create new classmap database\ngcj-dbtool -n classmap.db\n\nfor JAR_FILE in `find -iname \"*.jar\"`\ndo\n    echo \"Compiling ${JAR_FILE} to native\"\n    gcj -shared -findirect-dispatch -fjni -fPIC -Wl,-symbolic -o ${JAR_FILE}.so ${JAR_FILE}\n    gcj-dbtool -a classmap.db ${JAR_FILE} ${JAR_FILE}.so\ndone\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP - Shell\nDESCRIPTION: These commands are used to verify the integrity of downloaded ActiveMQ files using PGP signatures. First, the KEYS file containing public keys is imported. Then, the signature file (.asc) is verified against the downloaded file using the imported keys. These commands are executed in a shell environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-04.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Creating Broker with Spring Bean\nDESCRIPTION: This XML configuration creates an embedded ActiveMQ Classic broker using a Spring bean. It references an external ActiveMQ Classic XML configuration file using the 'config' property. The 'start' property ensures the broker is started when the Spring context is initialized. It uses xbean.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"broker\" class=\"org.apache.activemq.xbean.BrokerFactoryBean\">\n  <property name=\"config\" value=\"classpath:org/apache/activemq/xbean/activemq.xml\" />\n  <property name=\"start\" value=\"true\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures using pgp\nDESCRIPTION: This snippet demonstrates the process of verifying downloaded ActiveMQ files using PGP signatures with the pgp command-line tool. It involves downloading the KEYS file and the asc signature file for the distribution, followed by signature verification.  Replace <version> with the actual ActiveMQ version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-01.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using GPG\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using GPG. It first imports the KEYS file and then verifies the signature file against the downloaded archive. Replace <version> with the actual ActiveMQ version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-03.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Core Dependency via Maven\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ core dependency to a Maven project using the activemq-core artifact with version 5.0.0. Adding this to your Maven POM file will allow you to use ActiveMQ in your Java projects.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-00-00.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Example Message Received with Updated Reply-To in STOMP\nDESCRIPTION: This code shows an example of a `MESSAGE` frame that has been received in response to a `SEND` with a `reply-to` header. Note how the `reply-to` header has been updated by the broker to reflect the actual destination of the temporary queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nMESSAGE\nsubscription:foo\nreply-to:/queue/temp.default.23.example\ndestination:/queue/PO.REQUEST\nreply-to:/temp-queue/example\n\nPO145\n```\n\n----------------------------------------\n\nTITLE: Acknowledging a Message (Batch)\nDESCRIPTION: This snippet acknowledges a specific message in a batch using an HTTP DELETE request. The consumer ID and message ID are part of the URL, indicating the message to be removed/acknowledged.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /consumerId/messages/messageId\n```\n\n----------------------------------------\n\nTITLE: Checking Ant Version\nDESCRIPTION: This snippet shows how to check the installed Apache Ant version using the command line. It verifies that Ant is installed and configured correctly, which is necessary for testing the integration at the end of the process. The expected output displays the Ant version information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jboss-integration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ant -version\nApache Ant version 1.6.2 compiled on July 16 2004\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Connections Data\nDESCRIPTION: Shows how to select specific fields (id and read_counter) from the connections data using the 'f' query parameter.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -u \"admin:password\" \\\n    'http://localhost:61680/broker/connections.json?f=id&f=read_counter'\n```\n\n----------------------------------------\n\nTITLE: Define ActiveMQ BrokerFactoryBean in applicationContext.xml\nDESCRIPTION: This XML snippet defines a bean named 'brokerService' in the applicationContext.xml file using the 'BrokerFactoryBean' from the ActiveMQ XBean library. The 'config' property specifies the location of the ActiveMQ Classic configuration file ('activemq-config.xml') which will be loaded to configure the broker. This allows Spring to manage the lifecycle of the ActiveMQ Classic broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n<beans>\n    <bean id=\"brokerService\" class=\"org.apache.activemq.xbean.BrokerFactoryBean\">\n        <property name=\"config\" value=\"classpath:activemq-config.xml\"/>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker\nDESCRIPTION: This snippet demonstrates how to start the ActiveMQ Classic broker from the command line after unpacking the distribution. It requires navigating to the 'bin' directory within the ActiveMQ Classic installation directory and executing the 'activemq' command. The broker will start with default configurations unless an XML configuration file is specified.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd bin\nactivemq\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using pgp\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of a downloaded ActiveMQ binary distribution using the `pgp` tool. The first command imports the public keys from the KEYS file. The second command verifies the downloaded archive using its corresponding `.asc` signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-02.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Downloading BDB Library (Shell)\nDESCRIPTION: This shell command downloads the BDB library (je-5.0.34.jar) from the Oracle website and saves it to the `${APOLLO_HOME}/lib` directory. This step is required before enabling the BDB store.  The `${APOLLO_HOME}` is a placeholder for the Apollo installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://download.oracle.com/maven/com/sleepycat/je/5.0.34/je-5.0.34.jar > ${APOLLO_HOME}/lib/je-5.0.34.jar\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ Tag\nDESCRIPTION: This command allows you to check out the Apache.NMS.ActiveMQ source code from the Apache Subversion repository using the specified tag (1.6.5). It fetches the code associated with that particular release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v165.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co [https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.5/](https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.4/)\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Web Console Configuration Example\nDESCRIPTION: This is an example of the `org.apache.activemq.webconsole.cfg` file, which configures the ActiveMQ web console.  It specifies the JMS and JMX URLs, along with the JMX user and password for connecting to Karaf.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_4\n\nLANGUAGE: cfg\nCODE:\n```\nwebconsole.jms.url=tcp://localhost:61616\nwebconsole.jmx.url=service:jmx:rmi:///jndi/rmi://localhost:1099/karaf-root\nwebconsole.jmx.user=karaf\nwebconsole.jmx.password=karaf\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk - Shell\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures with the `pgpk` tool. The first command imports the public keys, and the second command verifies the downloaded file against the signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-03.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. It involves importing the KEYS file and then verifying the signature file against the downloaded file. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Filtering Connections by Remote Address\nDESCRIPTION: Demonstrates how to filter connections based on their remote address using a SQL 92-style where clause with the 'q' query parameter.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" \\\n    'http://localhost:61680/broker/connections.json?q=remote_address%20LIKE%20\"/127.0.0.1:%\"'\n```\n\n----------------------------------------\n\nTITLE: Running Maven Server in Offline Mode\nDESCRIPTION: This snippet shows how to run a Maven server in offline mode, specifically within the assembly module. The '-o' switch is combined with the 'server' goal to prevent automatic JAR downloads.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-avoid-maven-downloading-latest-jars.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmaven -o server\n```\n\n----------------------------------------\n\nTITLE: Example Compilation Command\nDESCRIPTION: This command shows how to compile the example application. The specific command may vary by platform, but this provides a basic example using g++. The flags ensure proper linking with required libraries, including pthreads, uuid, apr, ssl, and crypto.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ng++ -o main -pthread -I ../main main.cpp ../../src/main/.libs/libactivemq-cpp.a -luuid -I /usr/include/apr-1.0/ -lssl -lcrypto -lapr-1\n```\n\n----------------------------------------\n\nTITLE: Remove default multicast networkConnector - XML\nDESCRIPTION: This snippet shows how to remove the entire networkConnector element that uses multicast discovery. This prevents the broker from automatically networking with other brokers on the same multicast address.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-disable-multicast-discovery.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnector name=\"default-nc\" uri=\"multicast://default\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing Keys and Verifying Signature with pgp\nDESCRIPTION: This snippet illustrates the process of importing the KEYS file and verifying the signature of a downloaded file using pgp. Requires pgp. Input files are KEYS and the downloaded file with its .asc signature. Output is a pgp message confirming signature validity.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/verify_download.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp <file-name>.asc\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Plugin for WebLogic Security (Java)\nDESCRIPTION: This class is an ActiveMQ Classic plugin that installs authentication and authorization filters to use WebLogic security realms for login and user/group principals. It uses a specified WebLogic group for authorization, granting members full access to ActiveMQ Classic. The class implements the BrokerPlugin interface and configures authorization entries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * An ActiveMQ Classic security plugin that installs two security filters\n * (authentication and authorization) that use WebLogic security realms to\n * handle the login and provide user and group principals.\n */\npublic class ActiveMQToWebLogicSecurity implements BrokerPlugin {\n    private String authorizedGroup;\n\n    public Broker installPlugin(Broker broker) {\n        // Install the first filter for authentication\n        Broker first = new ActiveMQWebLogicAuthenticationFilter(broker);\n        // Configure and install the second filter for authorization\n        AuthorizationEntry entry = new AuthorizationEntry();\n        Set acls = new HashSet();\n        acls.add(new WLSGroupImpl(authorizedGroup));\n        entry.setAdminACLs(acls);\n        entry.setReadACLs(acls);\n        entry.setWriteACLs(acls);\n        DefaultAuthorizationMap map = new DefaultAuthorizationMap();\n        map.setDefaultEntry(entry);\n        //todo: if finer-grained access is required, add more entries to the authorization map\n        Broker second = new AuthorizationBroker(first, map);\n        return second;\n    }\n\n    public String getAuthorizedGroup() {\n        return authorizedGroup;\n    }\n\n    /**\n     * Called by XBean at configuration time to set the authorized group from a\n     * property in the main ActiveMQ Classic configuration file.\n     */\n    public void setAuthorizedGroup(String authorizedGroup) {\n        this.authorizedGroup = authorizedGroup;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP or GPG. The first command imports the KEYS file, and the subsequent commands verify the signature of the downloaded archive using the KEYS file. This ensures that the downloaded file has not been tampered with.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-01.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Temporary Queue in STOMP\nDESCRIPTION: This snippet illustrates how to subscribe to a temporary queue using the STOMP protocol. Temporary queues are used for request/response scenarios.  The `destination` header is set to a temporary queue name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nSUBSCRIBE\nid:mysub\ndestination:/temp-queue/example\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Producing and Consuming Messages in Karaf\nDESCRIPTION: These commands show how to produce and consume messages when running inside a Karaf container.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nactivemq:producer\nactivemq:consumer\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Garbage Collection in apollo.xml\nDESCRIPTION: This XML snippet shows how to configure automatic garbage collection (GC) cycles within the Apollo broker.  An `auto_gc` element with an `interval` attribute specifies the time in seconds between forced GC cycles. This can be useful for monitoring heap usage accurately.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <auto_gc interval=\"10\">\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Exporting Client Certificate for Broker\nDESCRIPTION: This command exports the client's certificate from the keystore client.ks. The certificate is exported with the alias 'client' and saved to the file client_cert.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-use-ssl.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -export -alias client -keystore client.ks -file client_cert\n```\n\n----------------------------------------\n\nTITLE: Customizing EmbeddedActiveMQBroker with Java (Java)\nDESCRIPTION: This snippet demonstrates how to extend the EmbeddedActiveMQBroker to configure the broker with Java code. Override the configure() method to add custom logic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Rule\nEmbeddedActiveMQBroker customizedBroker = new EmbeddedActiveMQBroker() {\n    @Override\n    protected void configure() {\n        // Perform additional configuration here...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker Log Example\nDESCRIPTION: This code snippet demonstrates example log messages from an ActiveMQ Classic broker that might appear when a resource adapter is used in an application server. The messages indicate the addition and removal of clients, which can be misleading and appear as if connections are not being pooled when they actually are. The client IDs are reused, demonstrating connection pooling.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/resource-adapter-does-not-seem-to-pool-connections.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n16:43:07 INFO  Adding new client: ID:localhost-58375-1120682586690-1:0 on transport: TcpTransportChannel: Socket[addr=/127.0.0.1,port=58376,localport=61616]\n16:43:08 INFO  Removing client: ID:localhost-58375-1120682586690-1:0 on transport: TcpTransportChannel: Socket[addr=/127.0.0.1,port=58376,localport=61616]\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic with XML config via Maven\nDESCRIPTION: This snippet shows how to start ActiveMQ Classic from Maven, specifying the configuration file using the -Dconfig parameter.  It's similar to the 'activemq foo.xml' command but uses Maven.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmaven server -Dconfig=src/sample-conf/default.xml\n```\n\n----------------------------------------\n\nTITLE: Running Apollo Broker in Foreground Bash\nDESCRIPTION: This command starts the ActiveMQ Apollo broker instance in the foreground.  It assumes the user is in the broker's installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n/var/lib/mybroker/bin/apollo-broker run\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Name in ActiveMQ XML Configuration\nDESCRIPTION: This snippet configures the brokerName attribute within the <broker> element of the ActiveMQ Classic configuration file. Setting a broker name is crucial for identifying the broker instance within a network of brokers and is used in other configuration elements like transport connectors.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<broker useJmx=\"true\" brokerName=\"bruce.broker1\">\n```\n\n----------------------------------------\n\nTITLE: Purging ActiveMQ Classic Messages\nDESCRIPTION: Deletes messages from the selected destination that match the message selector.  Can use the JMX access data from the configuration or a specified JMX URL with user and password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq purge FOO.BAR # use jmx access data from configuration\nbin/activemq purge --jmxurl service:jmx:rmi:///jndi/rmi://127.0.0.1:11098/jmxrmi --jmxuser controlRole --jmxpassword abcd1234 FOO.BAR\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatch Async at Connection C#\nDESCRIPTION: This snippet demonstrates how to configure the dispatchAsync setting at the Connection level. Configuring at this level will override any settings made at the ConnectionFactory. Setting DispatchAsync to false will cause consumers created using this connection to receive messages synchronously by default, unless overridden at the consumer level.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/consumer-dispatch-async.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconnection.DispatchAsync = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Default MQTT Keep Alive\nDESCRIPTION: This snippet demonstrates how to configure a default server-side MQTT keep-alive interval. The `transport.defaultKeepAlive` parameter sets a default keep-alive value in milliseconds, which is used if the client requests a keep-alive value of 0. Requires ActiveMQ Classic and proper URI formatting.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"mqtt\" uri=\"mqtt://localhost:1883?transport.defaultKeepAlive=60000\"/>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk (Shell)\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `pgpk` command. It first imports the KEYS file and then verifies the signature of the specified archive file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-02.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO+SSL Transport in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to configure the NIO+SSL transport in ActiveMQ Classic using XML configuration. NIO+SSL provides SSL transport over NIO, enabling a large number of SSL clients to connect to a single broker instance. It is a server-side transport option.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-version-5-transports.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  ...\n  <transportConnectors>\n    <transportConnector name=\"nio+ssl\" uri=\"nio+ssl://0.0.0.0:61616\"/>  \n  </<transportConnectors>\n  ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: STOMP Configuration in apollo.xml\nDESCRIPTION: This snippet demonstrates how to configure STOMP-specific settings within the `apollo.xml` configuration file. It shows an example of setting the `max_header_length` and adding a user header with a specified separator.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <stomp max_header_length=\"10000\">\n    <add_user_header separator=\",\">user</add_user_header>\n  </stomp>\n</connector>\n```\n\n----------------------------------------\n\nTITLE: JNDI Configuration - bootstrap.properties\nDESCRIPTION: This properties file defines the JNDI configuration for connecting to the ActiveMQ Classic broker. It specifies the connection factory name, JNDI provider URL, and JNDI context factory, as well as the names of the weatherTopic and weatherRequestsTopic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\njms.connectionFactoryName=ConnectionFactory\njms.jndiProviderUrl=tcp://localhost:61616\njms.jndiContextFactory=org.activemq.jndi.ActiveMQInitialContextFactory\n\njms.weatherTopic=weatherTopic\njms.weatherRequestsTopic=weatherRequestsTopic\n```\n\n----------------------------------------\n\nTITLE: Create Connector Connection Pool (asadmin)\nDESCRIPTION: This command creates a connector connection pool in SJSAS using the asadmin tool. It associates the pool with the GenericJMSRA (myapp#genericra), specifies the connection definition (javax.jms.QueueConnectionFactory), and sets the transaction support to LocalTransaction.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasadmin create-connector-connection-pool \\\n  --raname myapp#genericra \\\n  --connectiondefinition javax.jms.QueueConnectionFactory \\\n  --transactionsupport LocalTransaction \\\n  ActiveMQQueueConnectionFactoryPool\n```\n\n----------------------------------------\n\nTITLE: Web Console Connection Factory Configuration\nDESCRIPTION: Configures the connection factory for the ActiveMQ Classic web console to use specific credentials.  This configuration is located in `webapps/admin/WEB-INF/webconsole-embeded.xml` and includes brokerURL, userName, and password properties. It provides secure access to the web console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/security.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"connectionFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n  <property name=\"brokerURL\" value=\"vm://localhost\"/>\n  <property name=\"userName\" value=\"system\"/>\n  <property name=\"password\" value=\"manager\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Broker with Transport and Network Connectors (No Persistence)\nDESCRIPTION: This example shows how to start a broker with one transport connector (tcp://localhost:61616) and one network connector (network:tcp://localhost:5000), with persistence disabled. This is useful for testing or scenarios where data durability is not required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nactivemq broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Queue Configuration Example\nDESCRIPTION: This example demonstrates how to configure a queue within a virtual host in ActiveMQ Apollo. It sets the dead letter queue (dlq), the number of negative acknowledgements allowed (nak_limit), and the auto-delete-after timeout.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n...\n  <virtual_host id=\"default\">\n    ...\n    <queue id=\"app1.**\" dlq=\"dlq.*\" nak_limit=\"3\" auto_delete_after=\"0\"/>\n    ...\n  </virtual_host>\n...\n```\n\n----------------------------------------\n\nTITLE: Export Broker Data Archive\nDESCRIPTION: This command exports the broker's data to a compressed archive file. This is necessary when migrating between certain versions of Apollo, especially when using LevelDB.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/migration-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n${broker-path}/bin/apollo-broker store-export /tmp/broker-export.tgz\n```\n\n----------------------------------------\n\nTITLE: JXTA Transport Configuration\nDESCRIPTION: This snippet shows the URI for configuring the JXTA transport in ActiveMQ. The JXTA transport is used for creating a true peer-based JMS network, which can handle NAT traversal and firewall penetration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-topologies.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\njxta://hostname:port\n```\n\n----------------------------------------\n\nTITLE: Delete a Subscription\nDESCRIPTION: Deletes a subscription. A DELETE request to the subscription URI (subscriptionUri) returns a 200 OK response indicating successful deletion.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE subscriptionUri\n-------------------->\n\n200 OK\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Clustering Log Output\nDESCRIPTION: This is an example of the log output indicating successful network connection between two ActiveMQ Classic brokers in a cluster. The log shows the establishment of a network connection between two brokers identified by their vm and tcp URLs. Successful output indicates that the brokers are clustered correctly.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/weblogic-integration.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nINFO  DemandForwardingBridge         - Network connection between vm://FirstBroker#0 and\n                                           tcp://localhost:63222(SecondBroker) has been established.\n```\n\n----------------------------------------\n\nTITLE: Segmenting VM Protocol in ActiveMQ Classic\nDESCRIPTION: This snippet shows how to segment the VM protocol in ActiveMQ Classic to create logically distinct JMS networks within the same JVM. This prevents interference between different segments by using different URIs. There are no direct dependencies, but it assumes an existing VM protocol configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/topologies.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvm://localhost/foo\n```\n\n----------------------------------------\n\nTITLE: Creating Durable Subscription - STOMP\nDESCRIPTION: This example shows how to create a durable subscription using the `id` and `persistent:true` headers in a STOMP `SUBSCRIBE` frame. Durable subscriptions persist even if the client disconnects, ensuring messages are delivered when the client reconnects.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_9\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\npersistent:true\ndestination:/topic/foo\n\n^@\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Authentication Configuration\nDESCRIPTION: This XML snippet shows how to enable basic access authentication for the ActiveMQ Classic Web Console. By changing the 'authenticate' property to 'true' in the jetty.xml file, the web console will require users to authenticate using credentials defined in the jetty-realm.properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/web-console.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"authenticate\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ\nDESCRIPTION: This XML snippet defines the Maven dependency configuration required to include ActiveMQ core in a Maven project. It specifies the groupId, artifactId, and version of the ActiveMQ dependency. This needs to be added to the project's pom.xml file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.4.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Client Failover Transport Configuration in ActiveMQ\nDESCRIPTION: This snippet shows how to configure a failover transport for clients connecting to the master and slave brokers. The `randomize=false` option ensures that the client always tries the master broker first before failing over to the slave.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pure-master-slave.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nfailover://(tcp://masterhost:61616,tcp://slavehost:61616)?randomize=false\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP Using pgpk\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded ActiveMQ files using PGP with the `pgpk` command. It first imports the KEYS file and then verifies the signature of the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-10.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Configuring maxPageSize for Message Groups in ActiveMQ\nDESCRIPTION: This XML configuration snippet demonstrates how to set the maxPageSize for destinations in ActiveMQ to control memory usage when using Message Groups. This helps prevent large backlogs of messages for a single group from blocking others.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-groups.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n    <policyMap>\n       <policyEntries>\n           <policyEntry queue=\">\" maxPageSize=\"1000\"/>\n       </policyEntries>\n    </policyMap>\n</destinationPolicy>\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic with Consumer Options using ActiveMQ C++\nDESCRIPTION: This snippet shows how to create a topic with consumer-specific options using ActiveMQ C++. The URI-encoded parameters are appended to the topic name to configure the consumer's prefetch size and disable local message delivery.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/configuring-activemq-cpp.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nd = session->createTopic(\"com.foo?consumer.prefetchSize=2000&consumer.noLocal=true\");\n```\n\n----------------------------------------\n\nTITLE: Checking Ant Version - Shell\nDESCRIPTION: This snippet checks the installed Apache Ant version. Ant is used at the end of the integration process to test the setup. The command verifies that Ant is correctly installed and its `bin` directory is in the system's PATH.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ant -version\nApache Ant version 1.6.2 compiled on July 16 2004\n```\n\n----------------------------------------\n\nTITLE: Preparing the Release with Maven Release Plugin\nDESCRIPTION: This command prepares the release using the Maven release plugin. It prompts for the release version, tag, and next development version, then updates the pom.xml files, creates a tag in the version control system, and prepares the project for the perform phase.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn release:prepare\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ CPP 2.2.6\nDESCRIPTION: This command allows you to checkout the ActiveMQ CPP 2.2.6 release from the Apache Subversion repository. It fetches the code from the specified SVN tag URL, enabling you to work with the exact version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/226-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.6/\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Connector with Protocol Enforcement\nDESCRIPTION: This snippet demonstrates how to configure an Apollo connector to enforce the MQTT protocol specifically, disabling protocol detection for other protocols.  It sets the protocol attribute of the connector element to 'mqtt'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt-manual.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\" protocol=\"mqtt\"/>\n```\n\n----------------------------------------\n\nTITLE: PMC Vote Email Template\nDESCRIPTION: This template is used for initiating a formal vote on inviting a committer to become a member of the ActiveMQ PMC.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org) \nSubject: [VOTE] Offer Apache ActiveMQ PMC Membership to <CANDIDATE>\n\nAfter positive discussion considering <CANDIDATE>’s contributions as a committer, I would like to initiate a formal vote.\n\n<INSERT EVIDENCE HERE>\n\nThis vote will follow the ASF process for committer votes and consensus approval (at least three binding +1 votes and no vetoes)\n\nThe vote will be open for 72 hours.\n\n[ ] +1 Accept <CANDIDATE> as a PMC member of Apache ActiveMQ  \n[ ] +0  \n[ ] -1 Do not accept at this time because...\n```\n\n----------------------------------------\n\nTITLE: Writing EIP Rules using XML\nDESCRIPTION: This XML snippet demonstrates how to define a simple Camel route directly within the `activemq.xml` file using Camel's Spring XML format. The route takes messages from an ActiveMQ queue and sends them to another queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/enterprise-integration-patterns.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext xmlns=\"http://activemq.apache.org/camel/schema/spring\">\n  <route>\n    <from uri=\"activemq:com.acme.MyQueue\"/>\n    <to uri=\"activemq:com.acme.SomeOtherQueue\"/>\n  </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity via PGP - Shell\nDESCRIPTION: These shell commands are used to verify the integrity of downloaded files using PGP signatures. The commands import the public key and then verify the downloaded file using the corresponding .asc signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-06.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Server URL Configuration - Initial\nDESCRIPTION: This XML snippet from META-INF/ra.xml configures the URL for the ActiveMQ Classic server. It defaults to the TCP protocol on localhost port 61616.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n    <description>\n      The URL to the ActiveMQ Classic server that you want this connection to connect to.  If using\n      an embedded broker, this value should be 'vm://localhost'.\n    </description>\n    <config-property-name>ServerUrl</config-property-name>\n    <config-property-type>java.lang.String</config-property-type>\n    <config-property-value>tcp://localhost:61616</config-property-value>\n<!-- <config-property-value>vm://localhost</config-property-value> -->\n  </config-property>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker XML in ra.xml for ActiveMQ Classic\nDESCRIPTION: This XML snippet demonstrates how to configure the BrokerXmlConfig property within the ra.xml file for ActiveMQ Classic when deploying to WebLogic. It specifies the location of the broker-config.xml file using a file URL. This configuration is used to configure the ActiveMQ Classic broker via Spring in embedded mode. Requires the broker-config.xml file to be present at the specified location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-deploy-activemq-ra-versionrar-to-weblogic.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<config-property>\n  <description>\n    Sets the XML configuration file used to configure the ActiveMQ Classic broker via\n    Spring if using embedded mode.\n\n    BrokerXmlConfig is the filename which is assumed to be on the classpath unless\n    a URL is specified. So a value of foo/bar.xml would be assumed to be on the\n    classpath whereas file:dir/file.xml would use the file system.\n    Any valid URL string is supported.\n  </description>\n  <config-property-name>BrokerXmlConfig</config-property-name>\n  <config-property-type>java.lang.String</config-property-type>\n  <config-property-value>xbean:file:C:\\\\broker-config.xml</config-property-value>\n</config-property>\n```\n\n----------------------------------------\n\nTITLE: Detailed debug information ActiveMQ Classic\nDESCRIPTION: Commands for the detailed debug information\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport PS4=' ${BASH_SOURCE}:${LINENO}(${FUNCNAME[0]}) '\nbash -x ./activemq <argument> 2>&1 |tee /tmp/detailed-debugging.log\n```\n\n----------------------------------------\n\nTITLE: Running Broker via Command Line (Headless/Controller)\nDESCRIPTION: This command starts an ActiveMQ Classic broker instance, binding it to a specified TCP address and port. The broker is configured to listen for connections on the provided URL, allowing producers and consumers to interact with it.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/example-testing-scenario.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava org.apache.activemq.broker.console.Main tcp://$hostA:61616\n```\n\n----------------------------------------\n\nTITLE: MQAdapter.java: Java Glue Code\nDESCRIPTION: Java class that acts as an adapter for interacting with ActiveMQ Classic. It sets up the JMS connection, sends messages, and handles the lifecycle of the ActiveMQ Classic connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport org.activemq.*;\nimport java.util.Hashtable ;\nimport javax.jms.*;\nimport javax.naming.*;\n\npublic class MQAdapter\n{\n    private InitialContext         jndiContext ;\n    private QueueConnectionFactory factory ;\n    private QueueConnection        connection ;\n    private QueueSession           session ;\n    private QueueSender            sender ;\n    private Queue                  queue ;\n\n    public MQAdapter()\n    {\n    }\n\n    public void start()\n    {\n        try\n        {\n            Hashtable props = new Hashtable() ;\n            props.put(Context.INITIAL_CONTEXT_FACTORY, \"org.activemq.jndi.ActiveMQInitialContextFactory\") ;\n            props.put(Context.PROVIDER_URL, \"tcp://localhost:61616\") ;\n            props.put(\"queue.MyQueue\", \"example.MyQueue\") ;\n\n            jndiContext = new InitialContext(props) ;\n        \n            // Create and configure JMS connection factory\n            factory = (QueueConnectionFactory)jndiContext.lookup(\"ConnectionFactory\") ;\n\n            // Lookup Queue\n            queue = (Queue)jndiContext.lookup(\"MyQueue\") ;\n\n            // Create a JMS connection\n            connection = (QueueConnection)factory.createQueueConnection() ;\n            System.out.println(\"Created connection: \" + connection) ;\n\n            // Create a JMS session\n            session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE) ;\n            System.out.println(\"Created session: \" + session) ;\n\n            // Create JMS sender\n            sender  = session.createSender(queue) ;\n        }\n        catch( Exception e )\n        {\n            e.printStackTrace() ;\n\n            try\n            {\n                if( connection != null )\n                    connection.close() ;\n            } catch( JMSException jmse )\n            { /* ignore */ }\n        }\n    }\n\n    public void stop()\n    {\n        try\n        {\n            if( connection != null )\n                connection.close() ;\n        } catch( JMSException e )\n        { /* ignore */ }\n    }\n\n    public void send(String msg)\n    {\n        TextMessage message ;\n\n        try\n        {\n            message = session.createTextMessage(msg) ;\n            sender.send(message) ;\n        }\n        catch( JMSException e )\n        {\n            e.printStackTrace() ;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the command to check out the ActiveMQ CMS 3.0.1 source code from the Apache Subversion repository. It allows users to access the specific version of the codebase.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/301-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.0.1/\n```\n\n----------------------------------------\n\nTITLE: Enabling Prioritized Messages in ActiveMQ Classic (XML)\nDESCRIPTION: This configuration enables prioritized messages for all queues in ActiveMQ Classic. The 'prioritizedMessages' attribute is set to 'true' within the <policyEntry> tag to enable this feature. This configuration is part of the per-destination policies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-support-priority-queues.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationPolicy>\n  <policyMap>\n    <policyEntries>\n      <policyEntry queue=\">\" prioritizedMessages=\"true\"/>\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration in panacya-jms-ds.xml\nDESCRIPTION: This XML snippet from panacya-jms-ds.xml configures the Queue and binds it to the JNDI name 'activemq/queue/outbound'. It defines the physical name of the ActiveMQ Classic destination using the 'Properties' attribute.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mbean code=\"org.jboss.resource.deployment.AdminObject\" name=\"activemq.queue:name=outboundQueue\">\n   <attribute name=\"JNDIName\">activemq/queue/outbound</attribute>\n   <depends optional-attribute-name=\"RARName\">jboss.jca:service=RARDeployment,name='activemq-ra-1.2-SNAPSHOT.rar'</depends>\n   <attribute name=\"Type\">javax.jms.Queue</attribute>\n   <attribute name=\"Properties\">\n      PhysicalName=queue.outbound\n   </attribute>\n</mbean>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Dependency to Maven POM - XML\nDESCRIPTION: This XML snippet shows the dependency declaration required to include ActiveMQ Classic 5.15.3 in a Maven project. This includes the `activemq-all` uber jar. This dependency will allow the project to utilize ActiveMQ's features.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-03.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generating IDE Project Files with Maven\nDESCRIPTION: These commands use Maven plugins to generate project files for Eclipse or IntelliJ IDEA. This allows users to import the ActiveMQ Classic project into their preferred IDE.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmaven eclipse or maven idea\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized Acknowledgements at ConnectionFactory Level in ActiveMQ Classic\nDESCRIPTION: This code snippet illustrates how to enable optimized acknowledgements in ActiveMQ Classic at the ConnectionFactory level. It casts the ConnectionFactory to an `ActiveMQConnectionFactory` and uses the `setOptimizeAcknowledge(true)` method to enable the feature. This approach configures the acknowledgement optimization at the factory level.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/optimized-acknowledgement.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n((ActiveMQConnectionFactory)connectionFactory).setOptimizeAcknowledge(true);\n```\n\n----------------------------------------\n\nTITLE: Sending a Message with a Reply-To Header in STOMP\nDESCRIPTION: This example shows how to send a message with the `reply-to` header set to a temporary destination using the STOMP protocol. This is part of a request/response pattern where the recipient knows where to send the response message.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nSEND\ndestination:/queue/PO.REQUEST\nreply-to:/temp-queue/example\n\nPO145\n^@\n```\n\n----------------------------------------\n\nTITLE: Creating Broker with BrokerFactory in Java\nDESCRIPTION: This Java code utilizes the BrokerFactory class to create a broker using a URI for configuration. The URI specifies the configuration source, such as an XML file or a broker configuration URI. This provides a more declarative way to configure the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = BrokerFactory.createBroker(new URI(someURI));\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP Using pgp\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded ActiveMQ files using PGP with the `pgp` command. It first imports the KEYS file and then verifies the signature of the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-10.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet shows the necessary dependency configuration to include ActiveMQ Classic version 5.1.0 in a Maven project. It defines the groupId, artifactId, and version to be used. This configuration is added to the project's POM file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-01-00.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp (Shell)\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `pgp` tool. It imports the KEYS file and then verifies the signature against the distribution file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-03.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout for Apache.NMS.ActiveMQ 1.6.3\nDESCRIPTION: This snippet provides the SVN command to checkout the Apache.NMS.ActiveMQ version 1.6.3 tag from the Apache repository. It allows developers to obtain the specific source code version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v163.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co [https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.3/](https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.3/)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: This command executes the integration tests after navigating to the `src/test-integration` directory.  These tests validate the ActiveMQ CPP distribution against a running AMQ broker instance.  Assumes a broker is running at tcp://localhost:61613 for stomp and tcp://localhost:61616 for openwire.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncd src/test-integration\n./activemq-test-integration\n```\n\n----------------------------------------\n\nTITLE: Changing file permissions for ActiveMQ startup script\nDESCRIPTION: This command changes the permissions of the activemq startup script to make it executable, by giving the owner read, write and execute permissions, and the group and others read and execute permissions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]/bin where [activemq_install_dir] is the directory in which ActiveMQ was installed. chmod 755 activemq\n```\n\n----------------------------------------\n\nTITLE: Xalan Dependency (Maven)\nDESCRIPTION: This code snippet shows the Maven dependency required for XPath support in ActiveMQ Classic.  The Xalan library is not included in the ActiveMQ Classic distribution and needs to be added manually. This dependency needs to be added to the project's pom.xml file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/selectors.md#_snippet_2\n\nLANGUAGE: Maven\nCODE:\n```\n<dependency>\n    <groupId>xalan</groupId>\n    <artifactId>xalan</artifactId>\n    <version>2.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Transport Connector in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures a secure WebSocket transport connector in ActiveMQ Classic, enabling secure communication using the 'wss' protocol on port 61614. It requires an SSL context to be properly configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/websockets.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n  <transportConnector name=\"secure_websocket\" uri=\"wss://0.0.0.0:61614\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Broker with Relative File Path Configuration\nDESCRIPTION: This example demonstrates running an ActiveMQ Classic broker with a configuration file located at a relative file path. The 'xbean:file:./conf/broker1.xml' syntax specifies that the 'broker1.xml' file is in the './conf/' directory relative to the current working directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nactivemq xbean:file:./conf/broker1.xml\n```\n\n----------------------------------------\n\nTITLE: Querying ActiveMQ Classic Broker\nDESCRIPTION: Displays selected broker component's attributes and statistics.  Can use JMX access data from configuration or a specified JMX URL with user and password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq query # use jmx access data from configuration\nbin/activemq query --jmxurl service:jmx:rmi:///jndi/rmi://127.0.0.1:11098/jmxrmi --jmxuser controlRole --jmxpassword abcd1234\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using GPG\nDESCRIPTION: This snippet demonstrates how to verify the integrity of downloaded files using GPG. It assumes you have already downloaded the KEYS file and the .asc signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-03.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure a Maven project to use ActiveMQ Classic 5.5.0 by adding the correct dependency configuration to the project's POM file.  This allows Maven to automatically manage the ActiveMQ dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.5.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Spring JNDI Topic Lookup\nDESCRIPTION: These Spring bean definitions configure JndiObjectFactoryBean beans to look up the weatherTopic and weatherRequestTopic from the JNDI context. They reference the jndiTemplate bean and specify the JNDI names of the topics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/geronimo.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"weatherTopic\"\n\t\tclass=\"org.springframework.jndi.JndiObjectFactoryBean\"\n\t\tsingleton=\"true\">\n    <property name=\"jndiTemplate\">\n        <ref bean=\"jndiTemplate\"/>\n    </property>\n    <property name=\"jndiName\">\n        <value>${jms.weatherTopic}</value>\n    </property>\n\t</bean>\n\n<bean id=\"weatherRequestTopic\"\n\t\tclass=\"org.springframework.jndi.JndiObjectFactoryBean\"\n\t\tsingleton=\"true\">\n      <property name=\"jndiTemplate\">\n          <ref bean=\"jndiTemplate\"/>\n      </property>\n      <property name=\"jndiName\">\n          <value>${jms.weatherRequestsTopic}</value>\n      </property>\n\t</bean>\n```\n\n----------------------------------------\n\nTITLE: Maven Plugin Configuration for ActiveMQ Classic Performance Testing (XML)\nDESCRIPTION: Defines the Maven plugin configuration for using the ActiveMQ Classic Performance Module. This configuration includes the groupId, artifactId, and version of the plugin. Prior to ActiveMQ Classic 5.8, the artifactId was `maven-activemq-perf-plugin`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-performance-module-users-manual.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.activemq.tooling</groupId>\n  <artifactId>activemq-perf-maven-plugin</artifactId>\n  <version>${activemq-version}</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Classic Dependency - Maven POM\nDESCRIPTION: This XML snippet shows how to add the ActiveMQ Classic 5.12.1 dependency to a Maven project using the activemq-all uber jar. It includes the groupId, artifactId, and version of the dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-12-01.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.12.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Static Discovery Configuration in ActiveMQ\nDESCRIPTION: This XML snippet shows how to configure a network connector in ActiveMQ using static discovery. It defines a network connector with a URI that lists specific broker URLs. The network connector establishes connections to each of the specified brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/networks-of-brokers.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<networkConnectors>\n  <networkConnector uri=\"static:(tcp://host1:61616,tcp://host2:61616,tcp://..)\"/>\n</networkConnectors>\n```\n\n----------------------------------------\n\nTITLE: Duplicate Message Handling Pseudocode\nDESCRIPTION: This pseudocode demonstrates how to handle duplicate messages using regular JMS transactions. It checks if a message has been processed before, performs database operations if not, and commits both the JDBC and JMS transactions. Rollback is performed in case of any exception.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/should-i-use-xa.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nonMessage\ntry {\n  if I have not processed this message successfully before {\n    do some stuff in the database / with EJBs etc\n    jdbc.commit() (unless auto-commit is enabled on the JDBC)\n  }\n  jms.commit()\n} catch (Exception e) {\n  jms.rollback()\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Unit Tests with Maven\nDESCRIPTION: This command skips the unit tests during the Maven build process. It uses the `-Dmaven.test.skip=true` flag to disable test execution. This is useful for faster builds when testing is not immediately required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-build-but-disable-the-unit-tests.md#_snippet_0\n\nLANGUAGE: Maven\nCODE:\n```\nmvn install -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Extracting Source Snapshot Archive (Unix)\nDESCRIPTION: This command extracts the files from a gzipped tar archive, typically containing the source code distribution of ActiveMQ Classic, into the current directory.  It assumes the archive is named 'activemq-x.x.x-src.tar.gz'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntar zxvf activemq-x.x.x-src.tar.gz\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Jetty Resource Import\nDESCRIPTION: This XML snippet imports the Jetty configuration file, which is required to start the embedded Jetty container and run the Web Console. It needs to be included within the ActiveMQ Classic broker configuration. This snippet enables the web console by loading the jetty configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/web-console.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<import resource=\"${activemq.base}/conf/jetty.xml\" />\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ-CPP 3.8.1 Tag with Git\nDESCRIPTION: This snippet shows how to clone the ActiveMQ-CPP repository, navigate to the directory, and checkout the specific tag for version 3.8.1 using Git. It requires Git to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/381-release.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/activemq-cpp-3.8.1\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ v1.7.0\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ v1.7.0 source code from the Apache Subversion repository. It allows developers to obtain the source code for this specific version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v170.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co [https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.7.0/](https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.7.0/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Connector Name in ActiveMQ XML\nDESCRIPTION: This snippet configures the name attribute for the <transportConnector> element in the ActiveMQ Classic configuration. The transport connector name should match the broker name for consistency and proper identification within the network.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"bruce.broker1\" uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Transport Connector in ActiveMQ Classic\nDESCRIPTION: This XML snippet configures a WebSocket transport connector in ActiveMQ Classic, allowing clients to connect using the 'ws' protocol on port 61614. It specifies the URI for the WebSocket endpoint.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/websockets.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnectors>\n  <transportConnector name=\"websocket\" uri=\"ws://0.0.0.0:61614\"/>\n</transportConnectors>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet demonstrates how to configure the Maven POM file to include the ActiveMQ Classic 5.2.0 core dependency. It specifies the groupId, artifactId, and version for the dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-02-00.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ Classic dependency using Maven\nDESCRIPTION: This snippet demonstrates how to add the ActiveMQ Classic 5.15.7 dependency to a Maven project using the activemq-all uber jar. It simplifies dependency management by including all necessary components.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-07.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ as Background Process with Custom Config (5.9+)\nDESCRIPTION: This command starts ActiveMQ Classic as a background process using a custom configuration file, `examples/conf/activemq-demo.xml`. The `xbean:` prefix specifies that the configuration file is an XBean XML configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq start xbean:examples/conf/activemq-demo.xml\n```\n\n----------------------------------------\n\nTITLE: Extending Wire Format Negotiation Timeout - ActiveMQ Classic\nDESCRIPTION: This example demonstrates how to extend the wire format negotiation timeout by setting the `wireFormat.maxInactivityDurationInitalDelay` property in the connection URL. This can be useful when the broker is under heavy load or the network connection is unreliable, as it allows more time for the connection setup to complete.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javaxjmsjmsexception-wire-format-negociation-timeout-peer-did-not-send-his-wire-format.md#_snippet_1\n\nLANGUAGE: url\nCODE:\n```\ntcp://localhost:61616?wireFormat.maxInactivityDurationInitalDelay=30000\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet shows a basic XML example. It is a single XML tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.3.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Consuming Producer Advisory Messages in ActiveMQ Classic\nDESCRIPTION: This snippet demonstrates how to subscribe to a producer advisory destination and process the received `ObjectMessage`. The message contains a `ProducerInfo` object with details about the producer.  It includes error handling for potential `JMSException` during object retrieval.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-support-in-activemq-3.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n... \nString advisoryName = ActiveMQDestination.PRODUCER_ADVISORY_PREFIX + destination.getPhysicalName(); \nDestination advisoryDestination = ActiveMQDestination.createDestination(destination.getDestinationType(), advisoryName); \nMessageConsumer consumer = session.createConsumer(advisoryDestination); \nconsumer.setMessageListener(this); \n.... \n\npublic void onMessage(Message msg) {\n   if (msg instanceof ObjectMessage) {\n      try {\n         ProducerInfo info = (ProducerInfo)((ObjectMessage)msg).getObject();\n      } catch (JMSException e) {\n         log.error(\"Failed to process message: \" + msg); \n      } \n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded ActiveMQ files using PGP or GPG. It involves importing the KEYS file and then verifying the signature file associated with the downloaded distribution. The <version> placeholder needs to be replaced with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-07-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Connection in C++\nDESCRIPTION: This code snippet shows how to create a CMS Connection from a ConnectionFactory using the createConnection method. The Connection object manages the client's connection to the CMS provider.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n```\n\n----------------------------------------\n\nTITLE: Getting a Message by URL\nDESCRIPTION: This snippet retrieves a specific message using its URL via an HTTP GET request. The consumer ID and message ID are included in the URL path.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest-protocols.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nGET message/consumerId/messageId\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Status\nDESCRIPTION: This snippet shows how to retrieve general information about the broker, JVM, and OS status using a GET request to the `/broker.json` endpoint. The response is a JSON object conforming to the `BrokerStatusDTO` schema.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker.json\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"default\",\n  \"state\": \"STARTED\",\n  \"state_since\": 1314573353753,\n  \"version\": \"1.7.1\",\n  \"jvm_metrics\": {\n    \"heap_memory\": {\n      \"used\": 22165160,\n      \"alloc\": 162201600,\n      \"max\": 954466304\n    },\n    \"non_heap_memory\": {\n      \"used\": 44522128,\n      \"alloc\": 45944832,\n      \"max\": 136314880\n    },\n    \"classes_loaded\": 5776,\n    \"classes_unloaded\": 0,\n    \"threads_current\": 21,\n    \"threads_peak\": 22,\n    \"os_arch\": \"x86_64\",\n    \"os_name\": \"Mac OS X 10.7\",\n    \"os_memory_total\": 8589934592,\n    \"os_memory_free\": 3339231232,\n    \"os_swap_total\": 0,\n    \"os_swap_free\": 2147483648,\n    \"os_fd_open\": 111,\n    \"os_fd_max\": 10240,\n    \"os_load_average\": 0.99267578125,\n    \"os_cpu_time\": 5630000000,\n    \"os_processors\": 4,\n    \"runtime_name\": \"86739@chirino-mbp.local\",\n    \"jvm_name\": \"Java HotSpot(TM) 64-Bit Server VM 1.6.0_26 (Apple Inc.)\",\n    \"uptime\": 37761,\n    \"start_time\": 1314573351000\n  },\n  \"current_time\": 1314573388707,\n  \"virtual_hosts\": [\"default\"],\n  \"connectors\": [\"tls\", \"tcp\"],\n  \"connection_counter\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Consumer Count via Jolokia - Bash\nDESCRIPTION: This `wget` command uses the Jolokia API to retrieve the total consumer count from ActiveMQ. It includes authentication, sets the `Origin` header to prevent CSRF, and specifies the MBean attribute to query.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nwget --user admin --password admin --header \"Origin: http://localhost\" --auth-no-challenge http://localhost:8161/api/jolokia/read/org.apache.activemq:type=Broker,brokerName=localhost/TotalConsumerCount\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 3.1.2\nDESCRIPTION: This command checks out the ActiveMQ CMS 3.1.2 source code from the Apache Subversion repository. It uses the svn co command followed by the SVN repository URL to download the specified tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/312-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.2/\n```\n\n----------------------------------------\n\nTITLE: Set JMS Priority using Broker Component with XML\nDESCRIPTION: This example shows how to use the `broker` component to intercept messages published to a Topic, set the JMSPriority header to 9, and then publish them to a Queue.  It demonstrates how messages can be intercepted and modified before being persisted or delivered. The intercepted messages are JMS Messages. After intercept, the message has to be explicitly sent back to the broker component.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-camel-component.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<route id=\"setPriority\">\n   <from uri=\"broker:topic:test.broker.>\"/>\n      <setHeader headerName=\"JMSPriority\">\n         <constant>9</constant>\n      </setHeader>\n   <to uri=\"broker:queue:test.broker.component.queue\"/>\n</route>\n```\n\n----------------------------------------\n\nTITLE: Committer Vote Email Template\nDESCRIPTION: This template is used for initiating a formal vote on inviting a candidate to become an ActiveMQ committer. It includes the subject, recipient (private PMC list), evidence of the candidate's contributions, and voting options (+1, +0, -1).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [VOTE] Offer <CANDIDATE> to become an ActiveMQ committer\n\nAfter positive discussion about <CANDIDATE>’s contributions to the project, I would like to initiate a formal vote.\n\nConsidering <INSERT EVIDENCE HERE> as raised in the discussion thread...\n\nThis vote will follow the ASF process for committer votes and consensus approval (at least three binding +1 votes and no vetoes)The vote will be open for 72 hours.\n\n[ ] +1 Accept <CANDIDATE> as a committer of Apache ActiveMQ  \n[ ] +0  \n[ ] -1 Do not accept at this time because...\n```\n\n----------------------------------------\n\nTITLE: Suppressing MBean Registration (XML)\nDESCRIPTION: This snippet configures the `managementContext` to selectively suppress the registration of certain MBeans.  The `suppressMBean` attribute takes a comma-separated list of MBean name patterns to exclude from registration, which can improve performance when dealing with a large number of connections, destinations, and consumers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jmx.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<managementContext>\n  <managementContext suppressMBean=\"endpoint=dynamicProducer,endpoint=Consumer,connectionName=*,destinationName=ActiveMQ.Advisory.*\"/>\n</managementContext>\n```\n\n----------------------------------------\n\nTITLE: Handling byte array data in BlazeMessage using Java\nDESCRIPTION: This snippet demonstrates how to handle byte array data within a BlazeMessage. It includes creating a message directly from a byte array and using setBytes/getData methods. Requires import of the 'org.apache.activeblaze' package.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/the-activeblaze-message-type.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activeblaze.*;\n...\n\nbyte[] data = getSomeData();\nBlazeMessage msg = new BlazeMessage(data);\nbyte[] result  = msg.getBytes();\n\nBlazeMessage msg = new BlazeMessage();\nmsg.setBytes(\"data\");\nbyte[] result = msg.getData();\n```\n\n----------------------------------------\n\nTITLE: Enabling Property Placeholder Configuration in ActiveMQ XML\nDESCRIPTION: This snippet adds a Spring PropertyPlaceholderConfigurer bean to the ActiveMQ Classic XML configuration. This enables the use of system properties within the configuration file, allowing for dynamic configuration based on the environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<bean xmlns=\"\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ with Custom Config (5.9+)\nDESCRIPTION: This command starts ActiveMQ Classic in console mode using a custom configuration file, `examples/conf/activemq-demo.xml`. The `xbean:` prefix specifies that the configuration file is an XBean XML configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq console xbean:examples/conf/activemq-demo.xml\n```\n\n----------------------------------------\n\nTITLE: Start Geronimo with Integration Test EAR Configuration\nDESCRIPTION: These commands navigate to the Geronimo home directory and start the server using a specific EAR configuration (`org/activemq/ear/itest`). This configuration loads the necessary components for running the integration tests.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integration-tests.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd geronimo-home\njava -jar bin/server.jar org/activemq/ear/itest\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ Tag\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ version 1.7.1 tag from the Apache Subversion repository. It allows users to access the specific version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v171.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co [https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.7.1/](https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.7.1/)\n```\n\n----------------------------------------\n\nTITLE: Handling Error Responses\nDESCRIPTION: Illustrates how an invalid query syntax can result in a 400 Bad Request error and the JSON response provides more details about the cause.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i -u \"admin:password\" `echo 'http://localhost:61680/broker/virtual-hosts/apollo-01/queues.json?f=id&q=foo(id==\"foo\")'`\n```\n\n----------------------------------------\n\nTITLE: Stopping ActiveMQ Classic (Unix)\nDESCRIPTION: This command stops the ActiveMQ Classic broker on Unix-like systems.  It executes the `activemq` script located in the `bin` directory with the `stop` argument. It assumes the current directory is the ActiveMQ Classic installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]\nbin/activemq stop\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CPP 2.2.3\nDESCRIPTION: This command checks out the ActiveMQ-CPP version 2.2.3 source code from the Apache Subversion repository. It downloads the specific tag associated with this release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/223-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.3/\n```\n\n----------------------------------------\n\nTITLE: Destroying Durable Subscription - STOMP\nDESCRIPTION: This example shows how to destroy a durable subscription using the `id` and `persistent:true` headers in a STOMP `UNSUBSCRIBE` frame. This permanently removes the durable subscription, not just disconnects the client.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_10\n\nLANGUAGE: STOMP\nCODE:\n```\nUNSUBSCRIBE\nid:mysub\npersistent:true\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Java Snippet: Instantiating SomeJava\nDESCRIPTION: This Java snippet demonstrates the instantiation of a class named 'SomeJava'. It creates a new object 's' of the 'SomeJava' class using the 'new' keyword and the default constructor.  The 'SomeJava' class must be defined elsewhere.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.8.0/syntax.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Install Hawtio with JBang\nDESCRIPTION: This shell command uses JBang to install the latest Hawtio application. JBang is a tool that allows you to run Java applications directly from source code or as pre-built applications.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njbang app install hawtio@hawtio/hawtio\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 2.0.1\nDESCRIPTION: This command checks out the ActiveMQ CMS 2.0.1 source code from the Apache Subversion repository. It allows users to download the specific version of the code for building and modification.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/201-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.0.1/\n```\n\n----------------------------------------\n\nTITLE: Generating IntelliJ IDEA Project Files with Maven\nDESCRIPTION: This snippet shows how to generate IntelliJ IDEA project files using the Maven IDEA plugin. This simplifies importing the ActiveMQ Classic project into IntelliJ IDEA for development. It relies on the `idea:idea` goal of the Maven IDEA plugin.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn idea:idea\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet shows how to instantiate a Java object.  It creates an instance of the SomeJava class using the 'new' keyword and assigns it to the variable 's'. Assumes that the SomeJava class is defined elsewhere in the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.6/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n Somejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic 5.10.1\nDESCRIPTION: This snippet demonstrates how to declare a Maven dependency for ActiveMQ Classic 5.10.1 in your project's POM file. This will include the `activemq-all` uber jar in your project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-01.md#_snippet_3\n\nLANGUAGE: Maven\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.10.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Broker Configuration File Example\nDESCRIPTION: This shows an example of the `org.apache.activemq.server-default.cfg` file used to configure the ActiveMQ broker in Karaf. It defines the broker name, data directory, and XML configuration file location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_3\n\nLANGUAGE: cfg\nCODE:\n```\nbroker-name=amq-broker\ndata=${karaf.data}/${broker-name}\nconfig=${karaf.base}/etc/activemq.xml\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic as Linux/macOS Daemon\nDESCRIPTION: This snippet describes how to start the ActiveMQ Classic broker as a daemon in Linux or Unix systems using the activemq script. The script is located in the ACTIVEMQ_HOME/linux or ACTIVEMQ_HOME/macosx directory. Running the script starts the ActiveMQ Classic broker in the background.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/java-service-wrapper.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./activemq start\n```\n\n----------------------------------------\n\nTITLE: Checking ActiveMQ Port (Unix)\nDESCRIPTION: This command checks if ActiveMQ Classic is running by searching for connections on the default port 61616 using `netstat`. The output is filtered using `grep` to display only lines containing \"61616\".\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnetstat -an|grep 61616\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic 5.3.2\nDESCRIPTION: This XML snippet provides the Maven dependency configuration required to use ActiveMQ Classic 5.3.2 in a Maven project. It specifies the groupId, artifactId, and version of the ActiveMQ core library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-02.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.3.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet showcases a sample XML configuration.  It provides a basic XML structure example for configuring components. It requires no external dependencies.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.10.1/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Classic Proxy Connector\nDESCRIPTION: This XML configuration snippet demonstrates how to configure an ActiveMQ Classic broker with a proxy connector. It accepts connections on `tcp://localhost:6002` and proxies them to a remote broker at `fanout:static:(tcp://localhost:61616)`. The broker uses a journaled JDBC persistence adapter and listens for normal connections on port 6001 via a transport connector.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/the-proxy-connector.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://activemq.org/config/1.0\">\n  <broker>\n\n    <persistenceAdapter>\n      <journaledJDBC dataDirectory=\"../data\"/>\n    </persistenceAdapter>\n\n    <transportConnectors>\n      <transportConnector uri=\"tcp://localhost:6001\"/>\n    </transportConnectors>\n\n    <proxyConnectors>\n      <proxyConnector bind=\"tcp://localhost:6002\" remote=\"fanout:static:(tcp://localhost:61616)\"/>\n    </proxyConnectors>\n\n  </broker>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Querying ActiveMQ Broker Details in Karaf\nDESCRIPTION: This command queries the ActiveMQ broker for detailed information, such as connectors and queue lists. The `--jmxlocal` parameter is used to address local brokers.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkaraf@root> activemq:query --jmxlocal\n```\n\n----------------------------------------\n\nTITLE: Discarding DLQ Strategy (XML)\nDESCRIPTION: This XML snippet shows how to configure a discarding dead letter strategy on a per-destination basis, effectively preventing messages from reaching the DLQ for a specific destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/message-redelivery-and-dlq-handling.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<deadLetterStrategy>\n  <discarding/>\n</deadLetterStrategy>\n```\n\n----------------------------------------\n\nTITLE: Consuming with a One-Shot Consumer\nDESCRIPTION: This snippet demonstrates how to consume a single message from a destination and then immediately close the associated consumer by using the `oneShot=true` option.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl -XGET http://admin:admin@localhost:8161/api/message?destination=queue://orders.input&oneShot=true\n```\n\n----------------------------------------\n\nTITLE: Fanout Transport with minAckCount Example\nDESCRIPTION: Example URI demonstrating the use of the minAckCount transport option to override the default number of required broker connections. This example sets minAckCount to 1, allowing the producer to run after connecting to just one broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/fanout-transport-reference.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\nfanout:(multicast://default)?minAckCount=1\n```\n\n----------------------------------------\n\nTITLE: Extracting Source Distribution (Unix)\nDESCRIPTION: This command extracts the files from the source distribution archive (tar.gz) into a specified directory. It uses the `tar` command with options to decompress and extract the archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntar zxvf activemq.x.x-src.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating a Queue with Consumer Options in C#\nDESCRIPTION: This code snippet demonstrates how to create a queue with consumer options using the NMS API in C#. It configures the dispatchAsync and prefetchSize options for the consumer associated with the queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/destination-options.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar queue = session.GetQueue(\"TEST.QUEUE?consumer.dispatchAsync=false&consumer.prefetchSize=10\");\nvar consumer = session.CreateConsumer(queue);\n```\n\n----------------------------------------\n\nTITLE: Downloading a File using wget\nDESCRIPTION: This snippet shows how to download a file from a URL using the `wget` command in a Unix environment.  It's used here to download the ActiveMQ Classic gzip file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\\> wget http://activemq.apache.org/path/tofile/apache-activemq-5.8-tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for ActiveMQ 3.x\nDESCRIPTION: This snippet demonstrates how to configure log4j to enable TRACE level logging for the core ActiveMQ Classic code in ActiveMQ Classic 3.x.  This configuration should be added to the log4j.properties file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-can-i-enable-detailed-logging.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.logger.org.activemq=TRACE\n```\n\n----------------------------------------\n\nTITLE: Disable ActiveMQ Classic Logging in log4j.properties\nDESCRIPTION: This snippet demonstrates how to disable INFO level logging for the org.apache.activemq package by modifying the log4j.properties file. This configuration change reduces the amount of logged information related to ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-the-logging.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.logger.org.apache.activemq=WARN\n```\n\n----------------------------------------\n\nTITLE: Optional JMS Authentication Configuration\nDESCRIPTION: These configurations set the username and password for the JMS connection of the web console. This is necessary when the broker is configured with authentication.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_5\n\nLANGUAGE: cfg\nCODE:\n```\nwebconsole.jms.user=system\nwebconsole.jms.password=manager\n```\n\n----------------------------------------\n\nTITLE: Cleaning Jekyll Cache and Output\nDESCRIPTION: These commands remove the Jekyll metadata/cache and the generated `_site` directory, effectively cleaning the build environment. This is useful when encountering build issues or needing a fresh start.\nSOURCE: https://github.com/apache/activemq-website/blob/main/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nrm -rf src/.jekyll-*\nrm -rf _site\n```\n\n----------------------------------------\n\nTITLE: Get Store Status\nDESCRIPTION: This example shows how to retrieve the status of the message store used by a virtual host using curl.  Authentication is required. The store status depends on the specific store implementation being used.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/virtual-hosts/default/store.json\n```\n\n----------------------------------------\n\nTITLE: Changing File Permissions in Unix\nDESCRIPTION: This snippet demonstrates how to change the permissions of a file to make it executable using the `chmod` command in a Unix environment. This is necessary to make the `activemq` startup script executable.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\\> cd [activemq_install_dir]/bin\n\\> chmod 755 activemq\n```\n\n----------------------------------------\n\nTITLE: Enabling AUTO over SSL in ActiveMQ Classic (XML)\nDESCRIPTION: This XML snippet configures ActiveMQ Classic to use auto wire format detection over an SSL connection.  It uses the `auto+ssl` transport prefix and specifies the URI for the secure connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/auto.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<transportConnector name=\"auto+ssl\" uri=\"auto+ssl://localhost:5671\"/>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the SVN command to checkout the Apache.NMS.Stomp v1.5.2 tag from the Apache Subversion repository. It allows developers to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v152.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.2/\n```\n\n----------------------------------------\n\nTITLE: VM Transport with Broker URI Properties\nDESCRIPTION: This example shows how to use the Broker URI properties within the VM transport in ActiveMQ Classic. This allows configuring broker options directly within the VM transport URI. It disables persistence for a broker accessed via the VM transport.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-uri.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvm://localhost?broker.persistent=false\n```\n\n----------------------------------------\n\nTITLE: Fanout Transport Example URI with initialReconnectDelay\nDESCRIPTION: Example URI showing how to configure the Fanout transport with a static list of TCP URIs and the initialReconnectDelay parameter. Demonstrates how to apply parameters to discovered transports via the Discovery transport.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/fanout-transport-reference.md#_snippet_4\n\nLANGUAGE: N/A\nCODE:\n```\nfanout:(static:(tcp://localhost:61616,tcp://remotehost:61616))?initialReconnectDelay=100\n```\n\n----------------------------------------\n\nTITLE: Disabling Advisory Support via Java Code\nDESCRIPTION: This snippet demonstrates disabling advisory support programmatically in ActiveMQ Classic using Java code. It shows how to set the advisorySupport flag to false on the BrokerService instance before starting the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-message.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\nbroker.setAdvisorySupport(false);\n// ...\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: Extending Data Model - Module Index\nDESCRIPTION: This snippet shows the contents of the `dto-module.index` resource file. It specifies the class name of the module that defines the extension to the data model. This file is used by Apollo to discover the extension.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\norg.example.Module\n```\n\n----------------------------------------\n\nTITLE: Stopping the Only Running ActiveMQ Broker (Default JMX Context)\nDESCRIPTION: This example demonstrates how to stop the only running ActiveMQ Classic broker in the default JMX context. It assumes there's only one broker running and uses default JMX connection settings.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nactivemq-admin stop\n```\n\n----------------------------------------\n\nTITLE: Build Integration Test EJB Module\nDESCRIPTION: This command navigates to the `systest/itests/ejb` directory and uses Maven to build the Integration Test EJB module.  This EJB module provides a set of EJBs that are used to execute the integration tests.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integration-tests.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd systest/itests/ejb\nmaven\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This XML snippet demonstrates a simple XML configuration. It requires no external dependencies and serves as a basic example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.21.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Creating a TextMessage and Setting Properties in C++\nDESCRIPTION: This example demonstrates how to create a TextMessage using a CMS Session and how to set the message payload and properties. It first creates a connection factory, connection, and session. Then, it creates a TextMessage, sets its text payload, and sets string and integer properties on the message. Dependencies include the CMS library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n// Create the ConnectionFactory\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory(\n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\n// Create a Connection\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\n// Create a new Session from our Connection\nstd::auto_ptr<cms::Session> session( connection->createSession() );\n\n// Now create a TextMessage\nstd::auto_ptr<cms::TextMessage> textMessage( session->createTextMessage() );\n\n// Set the payload\ntextMessage->setText( \"Payload Text\" );\n\n// Set some Properties\ntextMessage->setStringProperty( \"USER_NAME\", \"Steve\" );\ntextMessage->setIntProperty( \"USER_CODE\", 42 );\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP (pgp)\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using PGP with the `pgp` command. It assumes you have already downloaded the KEYS file and the .asc signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-03.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Failover URI Configuration (AMQP)\nDESCRIPTION: Illustrates the structure of a failover URI, including the failover prefix, a list of broker URIs within parentheses, and the application of NMS and transport options. This allows for automatic reconnection to alternative servers in case of connection loss.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/amqp/uri-configuration.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nfailover:(amqp://host1:5672,amqp://host2:5672)?nms.clientId=foo&failover.maxReconnectAttempts=20\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic (Windows 5.10+)\nDESCRIPTION: This command starts the ActiveMQ Classic broker on Windows systems for versions 5.10 and later. It uses the `activemq.bat` script located in the `bin` directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nbin\\activemq start\n```\n\n----------------------------------------\n\nTITLE: No Network Connector - Broker C\nDESCRIPTION: This snippet shows that 'srv-c.mydomain.com' has no network connectors configured.  This broker will not attempt to automatically discover or connect to other brokers.  Connections to this broker will need to be established directly from other brokers, or using a different mechanism.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ldap-broker-discovery-mechanism.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<broker brokerName=\"srv-c.mydomain.com\" ...>\n   ...\n\n   <networkConnectors/>\n      <!-- NO NETWORK CONNECTORS -->\n   </networkConnectors>\n\n   ...\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Sending Byte Message with Custom Size\nDESCRIPTION: This command sends a byte message of custom length using the ActiveMQ Classic producer. The `--messageSize` option specifies the size of the message in bytes, and `--messageCount` specifies the number of messages to send.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq producer --messageSize 100 --messageCount 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP\nDESCRIPTION: This snippet demonstrates how to verify the integrity of downloaded ActiveMQ files using PGP or GPG. It involves downloading the KEYS file, the .asc signature file, and then using pgpk, pgpv, pgp, or gpg commands to verify the signature against the downloaded file. The <version> placeholder should be replaced with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-09-01.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Linking LoggingQueue to Global JNDI in jboss.xml\nDESCRIPTION: This XML snippet from jboss.xml links the 'LoggingQueue' message destination to the global JNDI name 'activemq/queue/outbound'. This makes the queue accessible to the EJB via JNDI lookup.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<assembly-descriptor>\n   <message-destination>\n      <message-destination-name>LoggingQueue</message-destination-name>\n      <jndi-name>activemq/queue/outbound</jndi-name>\n   </message-destination>\n</assembly-descriptor>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveMQ dependency using Maven\nDESCRIPTION: This XML snippet shows the dependency configuration for including ActiveMQ Classic 5.15.5 in a Maven project.  The activemq-all artifact is an uber jar containing all ActiveMQ components.  It's used within the project's pom.xml to manage the ActiveMQ library as a project dependency. Using more granular dependencies such as activemq-client or activemq-broker is possible for more control.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-05.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.15.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Repeated Message Delivery with CRON and Delay in ActiveMQ using NMS (C#)\nDESCRIPTION: This code snippet shows how to combine a CRON expression with delay, period, and repeat properties. This example sets a CRON expression for every hour, an initial delay of 1 second, a period of 1 second, and repeats the delivery 9 times.  CRON scheduling takes priority but uses delay, period, and repeat when given. The ActiveMQ broker must have scheduler support enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/delay-and-schedule-message-feature.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIMessageProducer producer = session.CreateProducer(destination);\nITextMessage message = session.CreateTextMessage(\"test msg\");\nmessage.Properties[\"AMQ_SCHEDULED_CRON\"] = \"0 * * * *\";\nmessage.Properties[\"AMQ_SCHEDULED_DELAY\"] = 1000;\nmessage.Properties[\"AMQ_SCHEDULED_PERIOD\"] = 1000;\nmessage.Properties[\"AMQ_SCHEDULED_REPEAT\"] = 9;\nproducer.Send(message);\n```\n\n----------------------------------------\n\nTITLE: Displaying Help on a Specific ActiveMQ Karaf Command\nDESCRIPTION: This command provides detailed help on a specific ActiveMQ Karaf command. Replace `[command]` with the actual command name (e.g., browse, query).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/osgi-integration.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nactivemq:[command] --help \n```\n\n----------------------------------------\n\nTITLE: Get Hawtio Configuration Help\nDESCRIPTION: This shell command displays the available configuration options for Hawtio when run with JBang. It shows a full list of command-line arguments and their usage.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhawtio --help\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet provides a basic example of XML structure. It demonstrates the use of tags to define elements within an XML document. There are no dependencies or prerequisites for using this snippet, as it is a standalone example.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.5.0/syntax.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command checks out the Apache.NMS.Stomp v1.4.0 tag from the Apache Subversion repository. It allows developers to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v140.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.4.0/\n```\n\n----------------------------------------\n\nTITLE: Run ActiveMQ Classic Broker with Broker Configuration URI\nDESCRIPTION: This command starts an ActiveMQ Classic broker using a Broker Configuration URI.  The URI specifies connection details, persistence settings, JMX usage and network configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-run-broker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console broker:(tcp://localhost:61616,network:static:tcp://remotehost:61616)?persistent=false&useJmx=true\n```\n\n----------------------------------------\n\nTITLE: Running Producer and Consumer using ActiveMQ CLI\nDESCRIPTION: These commands run the ActiveMQ Classic producer and consumer tools from the command line. `ACTIVEMQ_HOME` environment variable should be set to the ActiveMQ Classic installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n${ACTIVEMQ_HOME}/bin/activemq producer\n${ACTIVEMQ_HOME}/bin/activemq consumer\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the creation of a new object instance. It declares a variable 's' of type 'SomeJava' and instantiates it using the 'new' keyword, calling the default constructor.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.30.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.0\nDESCRIPTION: This command checks out the ActiveMQ-CPP library version 3.0 from the Apache Subversion repository. It retrieves the source code for the specified tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/30-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-library-3.0/\n```\n\n----------------------------------------\n\nTITLE: Setting PKG_CONFIG_PATH for Mono\nDESCRIPTION: Sets the PKG_CONFIG_PATH environment variable to include the Mono packages directory. This is necessary on some operating systems like OS X for NAnt to find the required Mono libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/building.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport PKG_CONFIG_PATH=\"/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig/:${PKG_CONFIG_PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Text Message with Producer\nDESCRIPTION: This command sends a text message with custom text using the ActiveMQ Classic producer. The `--message` option specifies the message content, and `--messageCount` specifies the number of messages to send.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq producer --message \"My message\" --messageCount 1\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet demonstrates a basic XML structure. It showcases a simple XML element named 'xml' containing the text 'somexml'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.30.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. It requires downloading the KEYS file and the asc signature file. pgpk and pgpv are used to import the keys and verify the signature respectively.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-06-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Connection URI Format (AMQP)\nDESCRIPTION: Defines the basic structure of the AMQP connection URI, including the scheme, hostname, port, and optional parameters. The scheme 'amqps' indicates the use of SSL/TLS.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/amqp/uri-configuration.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\namqp[s]://hostname:port[?option=value[&option2=value...]]\n```\n\n----------------------------------------\n\nTITLE: Producing and Consuming Messages via Ant (Older Versions)\nDESCRIPTION: These commands show how to produce and consume messages using Ant scripts in older versions of ActiveMQ Classic.  These scripts were typically located in the `examples/` or `examples/openwire/swissarmy/` directories.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nant producer\nant consumer\n```\n\n----------------------------------------\n\nTITLE: Run Listener Script (Windows)\nDESCRIPTION: Executes the 'listener.rb' script, which acts as a consumer, receiving messages from the ActiveMQ Apollo broker on Windows. This script needs the 'stomp' gem to be installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nruby listener.rb\n```\n\n----------------------------------------\n\nTITLE: STOMP Send Frame with Receipt\nDESCRIPTION: This STOMP frame sends a message to a queue with a receipt header.  This enables reliable messaging by allowing the client to verify the message was received by the broker.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nSEND\ndestination:/queue/a\nreceipt:001\n\nhello queue a\n^@\n```\n\n----------------------------------------\n\nTITLE: Serving the Site Locally with Jekyll\nDESCRIPTION: This command builds the Jekyll site from the `src` directory to the `_site` directory and serves it locally, enabling live reloading of the site as changes are made.\nSOURCE: https://github.com/apache/activemq-website/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbundle exec jekyll serve --livereload\n```\n\n----------------------------------------\n\nTITLE: Example Message with Sequence Number - STOMP\nDESCRIPTION: This example shows the format of a STOMP `MESSAGE` frame that includes a sequence number. The sequence number is added as a header based on the `include-seq` configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_17\n\nLANGUAGE: STOMP\nCODE:\n```\nMESSAGE\nsubscription:mysub\ndestination:/queue/foo\nseq:1\n\nHello\n^@\n```\n\nLANGUAGE: STOMP\nCODE:\n```\nMESSAGE\nsubscription:mysub\ndestination:/queue/foo\nseq:2\n\nWorld\n^@\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker (Bash)\nDESCRIPTION: This snippet shows the commands required to start the ActiveMQ Classic broker after downloading and unpacking the distribution. It navigates to the 'bin' directory and executes the 'activemq' command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd bin\nactivemq\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the creation of a new instance of the SomeJava class. It shows the basic syntax for object instantiation in Java using the 'new' keyword and the class constructor.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.24.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic (Windows 5.9 and older)\nDESCRIPTION: This command starts the ActiveMQ Classic broker on Windows systems for versions 5.9 and older. It executes the `activemq.bat` script in the `bin` directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nbin\\activemq\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This shell command shows how to checkout the ActiveMQ Classic 5.2.0 source code from the Apache SVN repository.  It checks out the tagged release branch.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-02-00.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.2.0\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Snippet\nDESCRIPTION: This XML snippet represents a configuration example. It is intended to be used as a placeholder within a larger XML configuration file for ActiveMQ or a related project.  No specific dependencies are mentioned within the provided content.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.18.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command is used to checkout the ActiveMQ Classic 5.4.1 source code from the Apache Subversion repository.  It downloads the source code tagged as activemq-5.4.1.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-01.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.1\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the instantiation of a class named 'SomeJava'. It showcases a simple example of creating an object in Java, which might be used for initializing components within ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.20.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet demonstrates a simple XML configuration.  It likely represents a configuration element used within ActiveMQ. No specific dependencies are mentioned. The expected output is a valid XML structure.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.16.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This XML snippet shows a basic XML structure, likely representing a configuration file or data structure used within the ActiveMQ project. It demonstrates the use of XML tags for defining data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.20.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet shows the instantiation of a `SomeJava` object. It demonstrates a basic example of creating a new instance of a Java class, which could represent an ActiveMQ component or related utility.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.19.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Java Compile MQAdapter.java\nDESCRIPTION: Compiles the MQAdapter.java file using GCJ, including necessary classpath dependencies.  This prepares the Java code for native compilation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngcj --classpath=./geronimo-spec-jms-1.1-rc4.jar:./activemq-core-3.2.jar -C MQAdapter.java\n```\n\n----------------------------------------\n\nTITLE: Killing ActiveMQ Process (Unix)\nDESCRIPTION: This command finds and kills the ActiveMQ Classic process. It uses `ps` to find the process ID (PID) and `kill` to terminate the process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nps -ef|grep activemq kill [PID] where [PID] is the process id of the ActiveMQ Classic process.\n```\n\n----------------------------------------\n\nTITLE: Changing the Selector Header Name\nDESCRIPTION: This snippet demonstrates how to change the name of the selector header using the `org.apache.activemq.selectorName` Servlet context property in `WEB-INF/web.xml`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<context-param>\n    <param-name>org.apache.activemq.selectorName</param-name>\n    <param-value>activemq-selector</param-value>\n</context-param>\n```\n\n----------------------------------------\n\nTITLE: Requesting JSON Content Type - Bash\nDESCRIPTION: This `wget` command retrieves a message from an ActiveMQ queue and specifies that the response should be in JSON format using the `json=true` URL parameter. It includes authentication credentials and queue details.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwget --user admin --password admin http://localhost:8161/api/message/TEST?type=queue\\\\&clientId=A\\\\&json=true\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout for Apache.NMS.ActiveMQ\nDESCRIPTION: This snippet provides the SVN command to checkout the Apache.NMS.ActiveMQ version 1.5.2 from the Apache Subversion repository. It allows developers to access the specific version of the code for inspection, modification, or contribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v152.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.2/\n```\n\n----------------------------------------\n\nTITLE: Liquid: Display Warning for Older Releases\nDESCRIPTION: This conditional statement checks if `isCurrentRelease` is false. If it is, it displays an alert message indicating that the current page is for an older release and provides a link to the download page for the current release. The alert uses Bootstrap's `alert alert-warning` classes for styling.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/nms_amqp_release.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% unless isCurrentRelease %}\n<div class=\"alert alert-warning\">\n  This is an older release. To get the current release, please see the <a href=\"{{site.baseurl}}/components/nms/providers/amqp/downloads\" class=\"alert-link\">download page</a>.\n</div>\n{% endunless %}\n```\n\n----------------------------------------\n\nTITLE: Disable ActiveMQ Fileserver in jetty.xml\nDESCRIPTION: This code snippet shows the configuration block in `conf\\jetty.xml` that needs to be commented out to disable the ActiveMQ Fileserver web application. This action mitigates the CVE-2016-3088 vulnerability. Requires access to the ActiveMQ configuration directory and the ability to edit the `jetty.xml` file. This snippet should be commented out or removed completely.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/security-advisories.data/CVE-2016-3088-announcement.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean class=\"org.eclipse.jetty.webapp.WebAppContext\">\n    <property name=\"contextPath\" value=\"/fileserver\" />\n    <property name=\"resourceBase\" value=\"${activemq.home}/webapps/fileserver\" />\n    <property name=\"logUrlOnStart\" value=\"true\" />\n    <property name=\"parentLoaderPriority\" value=\"true\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Navigate to Ruby Examples Directory (Windows)\nDESCRIPTION: Changes the current directory to the location of the Ruby examples included in the Apollo distribution on Windows. The %APOLLO_HOME% environment variable should be set to the installation directory of Apollo.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd %APOLLO_HOME%\\examples\\stomp\\ruby\n```\n\n----------------------------------------\n\nTITLE: Accessing Advisory Destination Constants in ActiveMQ Classic\nDESCRIPTION: This snippet showcases how to access the destination string constants for advisories in ActiveMQ Classic, using the `ActiveMQDestination` class. These constants are used to define the prefixes for consumer, producer, connection, and temporary destination advisory topics.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/advisory-support-in-activemq-3.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActiveMQDestination.CONSUMER_ADVISORY_PREFIX\nActiveMQDestination.PRODUCER_ADVISORY_PREFIX\nActiveMQDestination.CONNECTION_ADVISORY_PREFIX\nActiveMQDestination.TEMP_DESTINATION_ADVISORY_PREFIX\n```\n\n----------------------------------------\n\nTITLE: Creating Transacted Session - ActiveMQ\nDESCRIPTION: A JMS session is created in transactional mode by setting the first parameter of `createSession()` to `true`.  The second parameter specifies the acknowledgement mode.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nSession session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n```\n\n----------------------------------------\n\nTITLE: Cloning ActiveMQ Artemis GIT Repository\nDESCRIPTION: This command clones the ActiveMQ Artemis git repository from Github. It requires git to be installed on your system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/git.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [https://github.com/apache/activemq-artemis](https://github.com/apache/activemq-artemis)\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS MessageProducer in C++\nDESCRIPTION: This code demonstrates how to create a MessageProducer in CMS using C++. It is similar to creating a MessageConsumer, requiring a ConnectionFactory, Connection, Session, and a Destination.  The producer is then created using the Session, targeting the specified Destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n// Create the ConnectionFactory\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory(\n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\n// Create a Connection\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\n// Create a new Session from our Connection\nstd::auto_ptr<cms::Session> session( connection->createSession() );\n\n// Now create a Topic\nstd::auto_ptr<cms::Topic> myTopic( session->createTopic( \"EXAMPLE-TOPIC\" ) );\n\n// Now create the Consumer\nstd::auto_ptr<cms::MessageProducer> myProducer( session->createProducer( myTopic ) );\n```\n\n----------------------------------------\n\nTITLE: SimpleProducer Class Definition C++\nDESCRIPTION: Defines the `SimpleProducer` class, which implements the `Runnable` interface. This class is responsible for creating a connection to the ActiveMQ broker, creating a session, defining a destination (queue or topic), creating a message producer, and sending a specified number of text messages. The class also includes a cleanup method to release allocated resources.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nclass SimpleProducer : public Runnable {\nprivate:\n\n    Connection* connection;\n    Session* session;\n    Destination* destination;\n    MessageProducer* producer;\n    bool useTopic;\n    bool clientAck;\n    unsigned int numMessages;\n    std::string brokerURI;\n    std::string destURI;\n\nprivate:\n\n    SimpleProducer( const SimpleProducer& );\n    SimpleProducer& operator= ( const SimpleProducer& );\n\npublic:\n\n    SimpleProducer( const std::string& brokerURI, unsigned int numMessages,\n                    const std::string& destURI, bool useTopic = false, bool clientAck = false ) :\n        connection(NULL),\n        session(NULL),\n        destination(NULL),\n        producer(NULL),\n        useTopic(useTopic),\n        clientAck(clientAck),\n        numMessages(numMessages),\n        brokerURI(brokerURI),\n        destURI(destURI) {\n    }\n\n    virtual ~SimpleProducer(){\n        cleanup();\n    }\n\n    void close() {\n        this->cleanup();\n    }\n\n    virtual void run() {\n        try {\n\n            // Create a ConnectionFactory\n            auto_ptr<ActiveMQConnectionFactory> connectionFactory(\n                new ActiveMQConnectionFactory( brokerURI ) );\n\n            // Create a Connection\n            try{\n                connection = connectionFactory->createConnection();\n                connection->start();\n            } catch( CMSException& e ) {\n                e.printStackTrace();\n                throw e;\n            }\n\n            // Create a Session\n            if( clientAck ) {\n                session = connection->createSession( Session::CLIENT_ACKNOWLEDGE );\n            } else {\n                session = connection->createSession( Session::AUTO_ACKNOWLEDGE );\n            }\n\n            // Create the destination (Topic or Queue)\n            if( useTopic ) {\n                destination = session->createTopic( destURI );\n            } else {\n                destination = session->createQueue( destURI );\n            }\n\n            // Create a MessageProducer from the Session to the Topic or Queue\n            producer = session->createProducer( destination );\n            producer->setDeliveryMode( DeliveryMode::NON_PERSISTENT );\n\n            // Create the Thread Id String\n            string threadIdStr = Long::toString( Thread::currentThread()->getId() );\n\n            // Create a messages\n            string text = (string)\"Hello world! from thread \" + threadIdStr;\n\n            for( unsigned int ix=0; ix<numMessages; ++ix ){\n                TextMessage* message = session->createTextMessage( text );\n\n                message->setIntProperty( \"Integer\", ix );\n\n                // Tell the producer to send the message\n                printf( \"Sent message #%d from thread %s\\n\", ix+1, threadIdStr.c_str() );\n                producer->send( message );\n\n                delete message;\n            }\n\n        }catch ( CMSException& e ) {\n            e.printStackTrace();\n        }\n    }\n\nprivate:\n\n    void cleanup(){\n\n        try {\n            if( connection != NULL ) {\n                connection->close();\n            }\n        } catch ( CMSException& e ) { \n            e.printStackTrace(); \n        }\n\n        delete destination;\n        delete producer;\n        delete session;\n        delete connection;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Producing Messages - ActiveMQ\nDESCRIPTION: This snippet demonstrates how to produce and send messages to a destination.  It creates a producer, sends a specified number of text messages with a small delay between them.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = session.createProducer(destination);\n\nfor (int i = 0; i < NUM_MESSAGES_TO_SEND; i++) {\n    TextMessage message = session.createTextMessage(\"Message #\" + i);\n    LOG.info(\"Sending message #\" + i);\n    producer.send(message);\n    Thread.sleep(DELAY);\n}\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ\nDESCRIPTION: This command is used to checkout the Apache.NMS.ActiveMQ code from the Apache Subversion repository at the specified tag (version 1.5.5).  It allows users to access the specific version of the source code for inspection, modification, or building.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v155.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.5/\n```\n\n----------------------------------------\n\nTITLE: Queue Definition in ra.xml for ActiveMQ Classic\nDESCRIPTION: This XML snippet from ra.xml defines the Queue admin object for ActiveMQ Classic. It specifies the adminobject interface, implementation class, and a configuration property 'PhysicalName' which defines the physical queue name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<adminobject>\n   <adminobject-interface>javax.jms.Queue</adminobject-interface>\n   <adminobject-class>org.activemq.message.ActiveMQQueue</adminobject-class>\n   <config-property>\n      <config-property-name>PhysicalName</config-property-name>\n      <config-property-type>java.lang.String</config-property-type>\n   </config-property>\n</adminobject>\n```\n\n----------------------------------------\n\nTITLE: Broker Service - Configuration Example XML\nDESCRIPTION: This XML snippet shows an example of configuring a service with additional options, demonstrating how custom XML elements can be passed to the service.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<service id='myservice' kind='org.example.MyService'/>\n  <options xmlns=\"http://example.org/myservice\">\n    <search>google.com</search>\n  </options>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Running Maven in Offline Mode\nDESCRIPTION: This snippet demonstrates how to run Maven in offline mode to prevent it from automatically downloading new snapshot JAR files. The '-o' switch is used to achieve this.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-avoid-maven-downloading-latest-jars.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmaven -o\n```\n\n----------------------------------------\n\nTITLE: Delete ActiveMQ Destination in C#\nDESCRIPTION: This code snippet demonstrates how to delete a destination (queue) on the ActiveMQ broker using the Apache.NMS.ActiveMQ client. It creates a connection, session, and queue object, then attempts to delete the destination using the DeleteDestination method on the connection object.  It uses a try-catch block to handle potential exceptions during the deletion process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/destination-management.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected static void DeleteDestination() \n{\n    IConnectionFactory factory = new ConnectionFactory(ReplaceEnvVar(connectionURI));\n    using (Connection connection = factory.CreateConnection() as Connection)\n    {\n        using (ISession session = connection.CreateSession())\n        {\n            IQueue queue = session.GetQueue(testQueueName);\n            try\n            {\n                connection.DeleteDestination(queue);\n            }\n            catch\n            {\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BlazeMessage instance in Java\nDESCRIPTION: This snippet demonstrates how to create a new instance of the BlazeMessage class and set a float value. It requires the 'org.apache.activeblaze' package to be imported. The 'setFloatValue' method is used to associate a float value with a string key.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/the-activeblaze-message-type.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.activeblaze.*;\n...\n\nBlazeMessage msg = new BlazeMessage();\nmsg.setFloatValue(\"rate\",0.94f);\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.1.3\nDESCRIPTION: This snippet shows how to checkout the ActiveMQ-CPP 3.1.3 source code from the Apache SVN repository. It provides the complete SVN checkout command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/313-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.3/\n```\n\n----------------------------------------\n\nTITLE: Broker Properties URI Examples - ActiveMQ Classic\nDESCRIPTION: Shows examples of how to use the Broker Properties URI to specify different locations for the properties file, including local files, classpath resources, and remote URLs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/broker-properties-uri.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nproperties:/foo/bar.properties\nproperties:foo.properties\nproperties:http://foo.com/foo.properties\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Broker\nDESCRIPTION: This command starts the ActiveMQ Classic broker in the console. It assumes that the ActiveMQ Classic binary distribution has been installed and the `bin` directory is accessible from the current shell.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console\n```\n\n----------------------------------------\n\nTITLE: Building the Site with Jekyll\nDESCRIPTION: This command builds the Jekyll site from the source files into the `_site` output directory. This is useful for generating the site without serving it.\nSOURCE: https://github.com/apache/activemq-website/blob/main/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbundle exec jekyll build\n```\n\n----------------------------------------\n\nTITLE: Running Producer and Consumer in Karaf\nDESCRIPTION: These commands run the ActiveMQ Classic producer and consumer tools within the Karaf OSGi container. This assumes that the ActiveMQ Classic features are installed in Karaf.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nactivemq:producer\nactivemq:consumer\n```\n\n----------------------------------------\n\nTITLE: Export Apollo Broker Store Bash\nDESCRIPTION: This command exports the message store of the first virtual host in the broker configuration to a TGZ archive.  The broker configuration is loaded from the default location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n/var/lib/mybroker/bin/apollo-broker store-export myarchive.tgz\n```\n\n----------------------------------------\n\nTITLE: Running Producer and Consumer using Ant\nDESCRIPTION: These commands run the ActiveMQ Classic producer and consumer examples using Ant. This requires Ant to be installed and configured, and the examples directory to contain the appropriate `build.xml` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-examples.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nant producer\nant consumer\n```\n\n----------------------------------------\n\nTITLE: Committer Discussion Template\nDESCRIPTION: This template is used to initiate a discussion about inviting a candidate to become an ActiveMQ committer. It includes fields for providing evidence of the candidate's contributions to the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [DISCUSS] Invite <CANDIDATE> to become an ActiveMQ committer\n\nConsidering <CANDIDATE>’s contributions to the ActiveMQ project...<INSERT EVIDENCE HERE>\n\nBased on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.\n\nPlease remember that this is not a vote for this person to become a committer, at this point it is only a discussion.\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents in Bash\nDESCRIPTION: This bash command lists the contents of the current directory in long format, showing file permissions, owner, size, and modification date.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -l\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures\nDESCRIPTION: This snippet shows the commands used to verify the PGP signatures of the downloaded files using either pgpk, pgp, or gpg. It requires downloading the KEYS file and the .asc signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-00.md#_snippet_0\n\nLANGUAGE: PGP\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: PGP\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: GPG\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with pgpk Shell Commands\nDESCRIPTION: These commands verify the integrity of downloaded files using PGP signatures. They require the KEYS file and the corresponding .asc signature file for the distribution. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-01.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: XML Snippet\nDESCRIPTION: This XML snippet provides a simple example of XML structure.  It shows a basic XML element with a name \"xml\" containing the text \"somexml\".  No dependencies are required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.8.0/syntax.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Accessing ActiveMQ-CPP Git Repository via Web\nDESCRIPTION: Provides the URL for browsing the ActiveMQ-CPP Git repository via a web interface. This allows read-only access to the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/source.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://gitbox.apache.org/repos/asf?p=activemq-cpp.git\n```\n\n----------------------------------------\n\nTITLE: Generating Eclipse Project Files with Maven\nDESCRIPTION: This command generates Eclipse project files for ActiveMQ Classic using the Maven Eclipse plugin.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn eclipse:eclipse\n```\n\n----------------------------------------\n\nTITLE: Generate Apollo Module Dependency Graph using Maven\nDESCRIPTION: This command uses Maven with the 'graph' profile to generate a dependency graph of the Apollo project. It hides test scope dependencies, transitive dependencies, external dependencies, version information, group IDs, and types to produce a cleaner visual representation of the module relationships. The generated graph is then copied to the website's image directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/module-organization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn -P graph graph:reactor -Dhide-scope=test -Dhide-transitive=true -Dhide-external=true -Dgraph.label= -Dhide-version=true -Dhide-group-id=true -Dhide-type=true\ncp target/reactor-graph.png apollo-website/src/images/module-deps-graph.png\n```\n\n----------------------------------------\n\nTITLE: Navigate to Ruby Examples Directory (Unix/Linux/OS X)\nDESCRIPTION: Changes the current directory to the location of the Ruby examples included in the Apollo distribution. The ${APOLLO_HOME} environment variable should be set to the installation directory of Apollo.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ${APOLLO_HOME}/examples/stomp/ruby\n```\n\n----------------------------------------\n\nTITLE: Setting java.rmi.server.hostname on Unix\nDESCRIPTION: This code snippet demonstrates how to set the `java.rmi.server.hostname` property for ActiveMQ Classic on Unix-like operating systems (OS X, Linux, Solaris).  It exports the `ACTIVEMQ_OPTS` environment variable with the `-Djava.rmi.server.hostname` option, replacing `<hostname>` with the actual hostname or IP address of the server.  This ensures that RMI connections from JConsole can correctly resolve the server's address.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/i-cannot-connect-to-activemq-classic-from-jconsole.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ACTIVEMQ\\_OPTS=$ACTIVEMQ\\_OPTS -Djava.rmi.server.hostname=<hostname> \nactivemq\n```\n\n----------------------------------------\n\nTITLE: Custom VirtualHost Implementation Scala\nDESCRIPTION: This is an example of extending the `VirtualHost` class.  It provides a basic outline to customize the behavior of a virtual host within the Apollo broker. You need to provide custom logic to override the default behavior.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage example;\nclass MyVirtualHost(broker: Broker, id:String) extends VirtualHost(broker, id) {\n  // ... todo: override\n}\n```\n\n----------------------------------------\n\nTITLE: Create Resource Adapter Configuration (single line)\nDESCRIPTION: This command creates the resource adapter configuration in SJSAS using the asadmin tool. It provides the same functionality as the previous snippet, but condenses the entire command into a single line. This is required for execution in some environments such as DOS prompt. Note that the number of '/' for escaping special characters may vary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sjsas-with-genericjmsra.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasadmin create-resource-adapter-config --property SupportsXA=false:ConnectionFactoryProperties=brokerURL=tcp://127.0.0.1:61616 myapp#genericra\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: Shows an example of the JSON response for a 400 Bad Request error, providing a message describing the cause of the failure.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Unable to find function (method): \\\"foo(java.lang.Boolean)\\\" in any user-defined function handlers or the default function handler\"}\n```\n\n----------------------------------------\n\nTITLE: Changing Permissions of ActiveMQ Script (Unix)\nDESCRIPTION: This command changes the permissions of the `activemq` script to make it executable. It first navigates to the `bin` directory within the ActiveMQ Classic installation directory. This is necessary for starting ActiveMQ Classic after extracting a binary snapshot.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]/bin\nchmod 755 activemq\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA-512 Checksum\nDESCRIPTION: This snippet demonstrates how to verify the SHA-512 checksum of a downloaded file using the `sha512sum` command. The `sha512sum` tool must be installed.  The input is the downloaded file along with its .sha512 checksum file.  The output is a message indicating whether the checksum is valid.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/verify_download.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sha512sum -c <file-name>.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Queue\nDESCRIPTION: This snippet demonstrates how to configure a composite queue in ActiveMQ using XML. It defines a composite queue named `MY.QUEUE` that forwards messages to the physical queue `FOO` and the topic `BAR`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/virtual-destinations.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors>\n  <virtualDestinationInterceptor>\n    <virtualDestinations>\n      <compositeQueue name=\"MY.QUEUE\">\n        <forwardTo>\n          <queue physicalName=\"FOO\" />\n          <topic physicalName=\"BAR\" />\n        </forwardTo>\n      </compositeQueue>\n    </virtualDestinations>\n  </virtualDestinationInterceptor>\n</destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: Declaring Session Bean in ejb-jar.xml for ActiveMQ Classic Communication\nDESCRIPTION: This XML snippet from ejb-jar.xml declares the SenderEJB, specifying its EJB class and resource references to a QueueConnectionFactory and a Queue. It defines the JNDI names used by the EJB to lookup these resources and links the message destination to a defined destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/outbound-communication.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<session>\n   ...\n   <ejb-name>SenderEJB</ejb-name>\n   ...\n   <ejb-class>com.panacya.platform.service.bus.sender.SenderBean</ejb-class>\n   ...\n   <resource-ref>\n      <res-ref-name>jms/MyQueueConnectionFactory</res-ref-name>\n      <res-type>javax.jms.QueueConnectionFactory</res-type>\n      ...\n   </resource-ref>\n   <message-destination-ref>\n      <message-destination-ref-name>jms/LogQueue</message-destination-ref-name>\n      <message-destination-type>javax.jms.Queue</message-destination-type>\n      ...\n      <message-destination-link>LoggingQueue</message-destination-link>\n   </message-destination-ref>\n</session>\n```\n\n----------------------------------------\n\nTITLE: Implement TempDestinationAdvisoryConsumer Class C++\nDESCRIPTION: This source file implements the TempDestinationAdvisoryConsumer class, which listens for advisory messages related to temporary destination creation and destruction. It subscribes to the ActiveMQ advisory topic for temporary topics and queues, and prints messages to standard output when temporary destinations are added or removed.  It requires the ActiveMQ-CPP library and depends on the header file 'TempDestinationAdvisoryConsumer.h'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n#include \"TempDestinationAdvisoryConsumer.h\"\n\n#include <cms/Topic.h>\n#include <cms/Message.h>\n#include <cms/TextMessage.h>\n#include <activemq/core/ActiveMQConstants.h>\n#include <activemq/commands/ActiveMQMessage.h>\n#include <activemq/commands/DestinationInfo.h>\n#include <decaf/lang/exceptions/NullPointerException.h>\n#include <decaf/lang/exceptions/ClassCastException.h>\n#include <decaf/lang/Integer.h>\n\nusing namespace std;\nusing namespace activemqcpp;\nusing namespace activemqcpp::examples;\nusing namespace activemqcpp::examples::advisories;\nusing namespace activemq;\nusing namespace activemq::commands;\nusing namespace activemq::core;\nusing namespace decaf;\nusing namespace decaf::lang;\nusing namespace decaf::lang::exceptions;\n\n////////////////////////////////////////////////////////////////////////////////\nTempDestinationAdvisoryConsumer::TempDestinationAdvisoryConsumer( cms::Session* session ) {\n\n    if( session == NULL ) {\n        throw NullPointerException(\n            __FILE__, __LINE__, \"Session Object passed was Null.\" );\n    }\n\n    std::auto_ptr<cms::Topic> advisories( session->createTopic(\n        \"ActiveMQ.Advisory.TempTopic,ActiveMQ.Advisory.TempQueue\" ) );\n\n    this->session = session;\n    this->consumer.reset( session->createConsumer( advisories.get() ) );\n    this->consumer->setMessageListener( this );\n}\n\n////////////////////////////////////////////////////////////////////////////////\nTempDestinationAdvisoryConsumer::~TempDestinationAdvisoryConsumer() {\n}\n\n////////////////////////////////////////////////////////////////////////////////\nvoid TempDestinationAdvisoryConsumer::onMessage( const cms::Message* message ) {\n\n    if( message->getCMSType() == \"Advisory\" ) {\n\n        std::cout << \"Received an Advisory Message!\" << std::endl;\n\n        const ActiveMQMessage* amqMessage =\n            dynamic_cast<const ActiveMQMessage*>( message );\n\n        if( amqMessage != NULL && amqMessage->getDataStructure() != NULL ) {\n            std::cout << \"Advisory Message contains a Command Object!\" << std::endl;\n\n            try {\n\n                Pointer<DestinationInfo> info =\n                    amqMessage->getDataStructure().dynamicCast<DestinationInfo>();\n\n                unsigned char operationType = info->getOperationType();\n\n                if( operationType == ActiveMQConstants::DESTINATION_REMOVE_OPERATION ) {\n                    std::cout << \"Temporary Destination {\"\n                              << info->getDestination()->getPhysicalName()\n                              << \"} Removed.\"\n                              << std::endl;\n                } else if( operationType == ActiveMQConstants::DESTINATION_ADD_OPERATION ) {\n                    std::cout << \"Temporary Destination {\"\n                              << info->getDestination()->getPhysicalName()\n                              << \"} Added.\"\n                              << std::endl;\n                } else {\n                    std::cout << \"ERROR: I have no Idea what just happened!\"\n                              << std::endl;\n                }\n\n            } catch( ClassCastException& ex ) {\n                std::cout << \"ERROR: Expected the Command to be a DestinationInfo, \"\n                          << \"it wasn't so PANIC!!\"\n                          << std::endl;\n            }\n        }\n\n    } else {\n        std::cout << \"Received a Non-Advisory Message!\" << std::endl;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example ActiveIO Server Transport Configuration in ActiveMQ Classic\nDESCRIPTION: This XML snippet provides an example of configuring the ActiveIO server transport in ActiveMQ Classic using a specific IP address and port.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-configure-activemq-classic-to-use-aio-server-transport.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<connector>\n <serverTransport uri=\"activeio:aio://192.168.0.162:61616\" />\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Subscription Flow Control using 'credit' Header - STOMP\nDESCRIPTION: This example demonstrates how to control message flow to a client using the `credit` header in a STOMP `SUBSCRIBE` frame. The `credit` header specifies the number of messages and the total content size (in bytes) that can be sent to the client before an ACK is required. The format is `count[,size]`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_8\n\nLANGUAGE: STOMP\nCODE:\n```\nSUBSCRIBE\nid:mysub\ndestination:/queue/foo\ncredit:5,0\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Generating SHA384 Hash for Integrity Attribute (OpenSSL)\nDESCRIPTION: This command generates a SHA384 hash of a JavaScript file using OpenSSL. The hash is then base64 encoded for use in the integrity attribute of a `<script>` tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl dgst -sha384 -binary FILE.js | openssl base64 -A\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Performance Test Report XML Structure\nDESCRIPTION: This XML snippet demonstrates the structure of a performance test report generated for ActiveMQ Classic.  It includes sections for system settings, test properties (like number of clients and destinations), detailed performance data for each client, and a performance summary providing aggregated throughput metrics.  The report uses properties and lists to organize the data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sample-report.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<testResult>\n  <property name='systemSettings'>\n    <props>\n      <prop key='java.runtime.name'>Java(TM) 2 Runtime Environment, Standard Edition</prop>\n      <prop key='java.vm.version'>1.4.2_10-b03</prop>\n                     .\n                     .\n                     .\n      <prop key='os.arch'>x86</prop>\n      <prop key='os.name'>Windows XP</prop>\n      <prop key='sun.cpu.isalist'>pentium i486 i386</prop>\n    </props>\n  </property>\n\n  <property name='testProperties'>\n    <props>\n      <prop key='sysTest.numClients'>5</prop>\n                     .\n                     .\n                     .\n      <prop key='sysTest.destDistro'>all</prop>\n      <prop key='sysTest.totalDests'>2</prop>\n    </props>\n  </property>\n\n  <property name='performanceData'>\n    <list>\n      <value index='0' clientName='TestProducer0'>1035</value>\n      <value index='0' clientName='TestProducer3'>255</value>\n      <value index='0' clientName='TestProducer4'>727</value>\n      <value index='0' clientName='TestProducer2'>347</value>\n      <value index='0' clientName='TestProducer1'>527</value>\n      <value index='1' clientName='TestProducer0'>947</value>\n      <value index='1' clientName='TestProducer3'>615</value>\n      <value index='1' clientName='TestProducer4'>712</value>\n      <value index='1' clientName='TestProducer2'>864</value>\n      <value index='1' clientName='TestProducer1'>187</value>\n                     .\n                     .\n                     .\n      <value index='171' clientName='TestProducer0'>1364</value>\n      <value index='171' clientName='TestProducer3'>395</value>\n      <value index='171' clientName='TestProducer4'>716</value>\n      <value index='171' clientName='TestProducer2'>377</value>\n      <value index='171' clientName='TestProducer1'>515</value>\n    </list>\n  </property>\n\n  <property name='perfSummary'>\n    <props>\n      <prop key='SystemTotalTP'>552114</prop>\n      <prop key='SystemTotalClients'>5</prop>\n      <prop key='SystemAveTP'>3209.9651162790697</prop>\n      <prop key='SystemAveEMMTP'>3161.9651162790697</prop>\n      <prop key='SystemAveClientTP'>641.9930232558139</prop>\n      <prop key='SystemAveClientEMMTP'>632.3930232558139</prop>\n      <prop key='MinClientTP'>clientName=TestProducer4,value=36</prop>\n      <prop key='MaxClientTP'>clientName=TestProducer4,value=1764</prop>\n      <prop key='MinClientTotalTP'>clientName=TestProducer1,value=107409</prop>\n      <prop key='MaxClientTotalTP'>clientName=TestProducer0,value=116751</prop>\n      <prop key='MinClientAveTP'>clientName=TestProducer1,value=624.4709302325581</prop>\n      <prop key='MaxClientAveTP'>clientName=TestProducer0,value=678.7848837209302</prop>\n      <prop key='MinClientAveEMMTP'>clientName=TestProducer1,value=615.2732558139535</prop>\n      <prop key='MaxClientAveEMMTP'>clientName=TestProducer0,value=668.9418604651163</prop>\n    </props>\n  </property>\n</testResult>\n```\n\n----------------------------------------\n\nTITLE: Browse Available Queues\nDESCRIPTION: Retrieves a list of available queues in a hierarchical structure, represented as an Atom Feed. The GET request to /queues returns a 200 OK response with an Atom Feed containing entries for each directory, category, or queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /queues\n-------------------->\n\n200 OK\nAtom Feed with one entry per directory/category/queue\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Specifying JDBC Adapter Class in AMQ 3.x\nDESCRIPTION: This snippet demonstrates how to specify the JDBC adapter class in ActiveMQ 3.x versions.  The `adapterClass` attribute is used within the `<jdbcPersistence>` element to define the specific JDBC adapter to be used. This approach is different from later versions of ActiveMQ where the `adapter` attribute is used directly in the jdbcPersistenceAdapter tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-support.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<jdbcPersistence adapterClass=\"org.activemq.store.jdbc.adapter.ImageBasedJDBCAdaptor\">\n    ...\n</jdbcPersistence>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Snippet\nDESCRIPTION: This XML snippet demonstrates a sample XML configuration. It shows how XML elements might be used within the ActiveMQ website content to provide structured data or configurations.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.11.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Initializing SomeJava Object\nDESCRIPTION: This snippet demonstrates how to initialize an object of the SomeJava class in Java. It showcases a basic Java code example for object instantiation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.2.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: ZeroConf Client URI Example\nDESCRIPTION: Provides an example URI for a client connecting to an ActiveMQ broker using ZeroConf. The URI specifies the ZeroConf service name to use for discovery.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/zeroconf-transport-reference.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nzeroconf:_activemq_development.\n```\n\n----------------------------------------\n\nTITLE: Accessing API with HTTP\nDESCRIPTION: Shows how to access the Apollo Management API via HTTP. This requires an Apollo broker running on the local machine.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:61680\nhttps://localhost:61681\n```\n\n----------------------------------------\n\nTITLE: Creating Instance ActiveMQ Classic\nDESCRIPTION: Commands to create an instance\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /srv/activemq/instance1\ncp -av /srv/activemq/current/conf/ /srv/activemq/instance1/\nmkdir /srv/activemq/instance1/{data,tmp}\nln -snf  /srv/activemq/current/bin/activemq /etc/init.d/activemq-instance-test1\ncp /srv/activemq/install/bin/env /etc/default/activemq-instance-instance-test1\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet demonstrates instantiating an object of the class `SomeJava`. It illustrates a simple Java class instantiation example.  It assumes the existence of a class named `SomeJava`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.10.1/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Multicast URI with Default Values\nDESCRIPTION: An example URI using the default address and port, and the default multicast group name. This is the simplest way to configure multicast discovery.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/multicast-transport-reference.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmulticast://default\n```\n\n----------------------------------------\n\nTITLE: Search Box HTML\nDESCRIPTION: This is a simple HTML form element that provides a search functionality within the webpage. It doesn't contain the actual search implementation, likely relies on backend server logic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/test.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n    \n  \n```\n\n----------------------------------------\n\nTITLE: Generating Doxygen documentation\nDESCRIPTION: This command generates API documentation for the project in HTML format using Doxygen.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmake doxygen-run\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet shows how to declare a dependency on the ActiveMQ 'all' artifact in a Maven project. Replace 5.11.0 with the appropriate version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.11.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Checking ActiveMQ Classic Port (Windows)\nDESCRIPTION: This command uses `netstat` to check if ActiveMQ Classic is listening on its default port (61616) in a Windows environment.  It filters the output of `netstat -an` to display only lines containing \"61616\". It confirms that the broker is running and listening for connections.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_15\n\nLANGUAGE: Batchfile\nCODE:\n```\nnetstat -an|find \"61616\"\n```\n\n----------------------------------------\n\nTITLE: Cloning ActiveMQ-CPP Git Repository\nDESCRIPTION: This command allows users to clone the ActiveMQ-CPP Git repository to their local machine. This provides a full copy of the source code and its history for development or inspection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/source.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler with RubyGems\nDESCRIPTION: This command installs the Bundler gem, which is used to manage the dependencies for the Jekyll site.\nSOURCE: https://github.com/apache/activemq-website/blob/main/README.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Install Stomp Ruby Gem\nDESCRIPTION: Installs the 'stomp' gem, which is required for the Ruby examples to interact with the ActiveMQ Apollo broker using the Stomp protocol. This gem provides the necessary classes and methods for sending and receiving messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngem install stomp\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The user needs to download the KEYS file and the asc signature file for the distribution. The commands import the KEYS and then verify the signature against the downloaded file. Replace <version> with the actual ActiveMQ version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-05.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ\nDESCRIPTION: This XML snippet demonstrates how to configure a Maven project to include ActiveMQ Classic 5.7.0 as a dependency.  It specifies the group ID, artifact ID, and version required to incorporate ActiveMQ functionality into a Maven project. This configuration should be placed within the <dependencies> section of the project's POM file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-07-00.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.7.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Message Sending Output (Java)\nDESCRIPTION: This snippet shows the standard output from a Java-based ActiveMQ Classic message producer, indicating successful message sending. It displays the message content and timestamp.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n[java] Sending message: Message: 8 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n[java] Sending message: Message: 9 sent at: Mon Oct 16 23:21:08 MDT 2006  ...\n[java] Done.\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout of ActiveMQ Source Code\nDESCRIPTION: This command is used to checkout the source code for ActiveMQ Classic version 5.7.0 from the Apache Subversion (SVN) repository.  It downloads the complete source tree, allowing developers to examine, modify, and build the ActiveMQ project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-07-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.7.0\n```\n\n----------------------------------------\n\nTITLE: Peer Transport URI Example\nDESCRIPTION: This example demonstrates a concrete URI for the Peer transport. It specifies a peer group named 'groupa', a broker named 'broker1', and sets the 'persistent' option to 'false'. This configuration indicates that messages are not persisted to disk.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/peer-transport-reference.md#_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\npeer://groupa/broker1?persistent=false\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache NMS Stomp 1.3.0\nDESCRIPTION: This command checks out the Apache NMS Stomp v1.3.0 source code from the Apache Subversion repository. It retrieves the code located in the specified SVN path.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v130.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.3.0/\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This command executes the suite of unit tests to verify the library's functionality on the target platform. It also generates the integration tests binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Consuming from a Queue/Topic using URL-Encoded Destination with curl\nDESCRIPTION: These snippets show consuming messages from a specified queue or topic by using URL-encoded destination with curl.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\n# Send to queue orders.input:\ncurl -XGET http://admin:admin@localhost:8161/api/message?destination=queue://orders.input\n```\n\nLANGUAGE: curl\nCODE:\n```\n# Send to topic orders.input:\ncurl -XGET http://admin:admin@localhost:8161/api/message?destination=topic://orders.input\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the public key, and the second command verifies the signature file against the downloaded binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-02.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Shutting down ActiveMQ Apollo Broker\nDESCRIPTION: This snippet demonstrates how to shut down the ActiveMQ Apollo broker's JVM using a POST request to the `/broker/action/shutdown.json` endpoint. It requires authentication and returns a `303` status code on success.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST\n/broker/action/shutdown.json\n\n303\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Rebuilding Maven Project\nDESCRIPTION: This snippet demonstrates how to clean the Maven project, remove the local Maven repository, and then rebuild the project using Maven.  It's a common troubleshooting step for resolving build errors in multi-module Maven projects like ActiveMQ. It ensures a fresh build by removing any cached artifacts or build outputs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/i-get-errors-building-the-code-whats-wrong.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean\nrm -rf ~/.m2/repository\nmvn\n```\n\n----------------------------------------\n\nTITLE: Java Instance Creation\nDESCRIPTION: This code snippet demonstrates the creation of an instance of a Java class named 'SomeJava'. It showcases basic Java object instantiation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.25.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Snippet Example\nDESCRIPTION: This snippet showcases a simple XML structure. It provides an example of how XML code can be included in documentation or configuration files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.2.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic (Windows)\nDESCRIPTION: This command starts the ActiveMQ Classic broker from the installation directory in a Windows console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_11\n\nLANGUAGE: batch\nCODE:\n```\nbin\\activemq\n```\n\n----------------------------------------\n\nTITLE: XML snippet\nDESCRIPTION: This snippet presents an XML code block. It demonstrates a simple XML structure that can be used for data representation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.1.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Broker Service on Other Unix Bash\nDESCRIPTION: These commands install the ActiveMQ Apollo broker as a service on other Unix-like systems, enabling it to run on startup. Requires root privileges (sudo).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /var/lib/mybroker/bin/apollo-broker-service /etc/init.d/apollo\nsudo ln -s /etc/init.d/apollo /etc/rc0.d/K80apollo\nsudo ln -s /etc/init.d/apollo /etc/rc1.d/K80apollo\nsudo ln -s /etc/init.d/apollo /etc/rc3.d/S20apollo\nsudo ln -s /etc/init.d/apollo /etc/rc5.d/S20apollo\nsudo ln -s /etc/init.d/apollo /etc/rc6.d/K80apollo\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Session in C++\nDESCRIPTION: This code snippet demonstrates the entire process of creating a ConnectionFactory, Connection, and Session. It combines the previous examples to showcase the complete setup. The Session is then created from the established connection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory( \n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\nstd::auto_ptr<cms::Session> session( connection->createSession() );\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP (pgpk)\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using PGP with the `pgpk` command. It assumes you have already downloaded the KEYS file and the .asc signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-03.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Protocol Factory Index Example\nDESCRIPTION: Shows an example of a `protocol-codec-factory.index` file that is used to register protocol codec factories within the Apollo broker. These factories are implementations of the `ProtocolFactory` interface.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\norg.apache.activemq.apollo.broker.protocol.AnyProtocolFactory\norg.apache.activemq.apollo.broker.protocol.UdpProtocolFactory\norg.apache.activemq.apollo.broker.protocol.RawProtocolFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Directory in ActiveMQ using XML\nDESCRIPTION: This XML snippet shows how to configure the data directory for an ActiveMQ broker using XML configuration. The `dataDirectory` attribute of the `<broker>` element is set to \"foo\", specifying the directory where the broker will store its data files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javaioioexception-failed-to-create-database-derbydb-see-the-next-exception-for-details.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<broker dataDirectory=\"foo\">...</broker>\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic from the target directory\nDESCRIPTION: This snippet demonstrates how to start ActiveMQ Classic after building it from source. It navigates to the installation directory and executes the activemq script.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd [activemq_install_dir]\\activemq-assembly\\target\\activemq-x.x-SNAPSHOT\\ bin\\activemq\n```\n\n----------------------------------------\n\nTITLE: Verifying Download with PGP - Shell\nDESCRIPTION: This snippet illustrates how to verify the integrity of downloaded ActiveMQ files using PGP or GPG. It involves importing the KEYS file and then verifying the signature file (.asc) against the downloaded binary or source archive. The commands differ slightly based on whether `pgpk`, `pgp`, or `gpg` is used.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-05.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: NoSubscriptionRecoveryPolicy Configuration\nDESCRIPTION: Disables message recovery for a subscription.  When this policy is in effect, consumers will not receive any messages that were missed during a disconnection.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/subscription-recovery-policy.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<noSubscriptionRecoveryPolicy/>\n```\n\n----------------------------------------\n\nTITLE: JNDI Initial Context Factory Configuration (properties)\nDESCRIPTION: This snippet configures the initial context factory for JNDI, which is essential for the application to locate and access resources through JNDI. It specifies the class name of the factory that will be used to create the initial context.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/sun-jndi.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\njava.naming.factory.initial = com.sun.jndi.fscontext.RefFSContextFactory\n```\n\n----------------------------------------\n\nTITLE: Importing Keys and Verifying Signature with pgpk\nDESCRIPTION: This snippet shows how to import the KEYS file and verify a file's signature using pgpk. It requires pgpk to be installed.  The input is the KEYS file and the downloaded file along with its .asc signature file.  The output is a verification message from pgpk indicating the signature's validity.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/verify_download.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv <file-name>.asc\n```\n\n----------------------------------------\n\nTITLE: Including Maven Dependency for ActiveMQ\nDESCRIPTION: This snippet demonstrates how to include the ActiveMQ all-in-one dependency in a Maven project. It specifies the groupId, artifactId, and version, which is dynamically populated using Jekyll's page.version variable.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/classic_release.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>{{page.version}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Broker Service - Config Injection Scala\nDESCRIPTION: This snippet shows how to define a `config` field within your service class to get access to the service configuration. Apollo will inject the configuration element into the service before starting it.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nvar config: CustomServiceDTO\n```\n\n----------------------------------------\n\nTITLE: Display ActiveMQ Version\nDESCRIPTION: Illustrates how to display the ActiveMQ version information using the `activemq --version` command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-command-line-tools-reference.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nactivemq --version\n```\n\n----------------------------------------\n\nTITLE: Removing SVN directories in *nix\nDESCRIPTION: This command recursively finds and removes all .svn directories within the current directory. This is a common step before creating a release archive to exclude version control metadata.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/creating-distributions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \\`find . -type d -name .svn\\`\n```\n\n----------------------------------------\n\nTITLE: Creating ActiveMQ Classic Instance\nDESCRIPTION: Creates a new ActiveMQ Classic instance with its own configuration files and data directory. It copies the configuration files to the specified directory and prepares it for running the broker using the scripts in the new instance.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq create /path/to/brokers/mybroker\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.4.5\nDESCRIPTION: This command checks out the ActiveMQ-CPP library version 3.4.5 from the Apache SVN repository. It downloads the source code to your local machine, allowing you to build and use the library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/345-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.5/\n```\n\n----------------------------------------\n\nTITLE: XML Snippet\nDESCRIPTION: This snippet provides a sample XML configuration. It demonstrates basic XML structure. No dependencies are required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.28.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Generating Release Information with Liquid\nDESCRIPTION: This snippet dynamically generates release information for ActiveMQ Artemis. It includes the release version, release date, links to release notes, git report, and documentation, and indicates Java compatibility.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/artemis_release.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n#### ActiveMQ Artemis {{include.release.version}}  ({{include.release.release_date | date_to_string: \"ordinal\", \"US\"}})\n[Release Notes](release-notes-{{include.release.version}}) | [Git Report](commit-report-{{include.release.version}}) | [Documentation:](../documentation/{{docs_version}}) [HTML](../documentation/{{docs_version}}) / [PDF](../documentation/{{docs_version}}/book.pdf) |{% if include.examples_link %} [Examples](https://github.com/apache/activemq-artemis-examples/) |{% endif %} Java compatibility: **{{java_version}}**\n```\n\n----------------------------------------\n\nTITLE: Setting INCLUDE environment variable for MSVC\nDESCRIPTION: This shows how to set the INCLUDE environment variable to include the paths to MSVC includes and the platform SDK includes.  This is necessary to allow the MSVC compiler to find the header files needed for compilation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nINCLUDE = D:\\Program Files\\Microsoft Visual Studio 8\\VC\\include;D:\\Program Files\\Microsoft Platform SDK\\Include\\*\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP (Alternative) - Shell\nDESCRIPTION: These commands are used as an alternative method to verify the integrity of downloaded ActiveMQ files using PGP signatures. They perform the same function as the previous snippet but use slightly different pgp commands. These commands are executed in a shell environment.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-04.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verify PGP Signature Using pgp\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of downloaded ActiveMQ Classic files using PGP with the `pgp` command. It imports the KEYS and verifies the signature file against the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-02-00.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ-CPP 3.4.2 from SVN\nDESCRIPTION: This command checks out the ActiveMQ-CPP 3.4.2 source code from the Apache Subversion repository.  It uses the `svn co` command to copy the contents of the specified SVN tag to the local machine, allowing developers to access and work with the codebase.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/342-release.md#_snippet_0\n\nLANGUAGE: Subversion\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.2/\n```\n\n----------------------------------------\n\nTITLE: Activating ActiveMQ Classic\nDESCRIPTION: Commands to activate ActiveMQ Classic startup.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# RHEL\nchkconfig --add activemq\nchkconfig activemq on\n\n# Debian/Ubuntu\nupdate-rc.d defaults activemq\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP using pgp\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the KEYS file, and the second command verifies the downloaded file using the corresponding .asc signature file. It assumes you are using the `pgp` command-line tool.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-02.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveMQ Classic init script\nDESCRIPTION: Commands to Install the init script.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nln -snf  /srv/activemq/current/bin/activemq /etc/init.d/activemq\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for Temp Storage Cleanup Tracing\nDESCRIPTION: This log4j configuration enables TRACE level logging for temp storage cleanup and INFO level logging for the `org.apache.activemq.store.kahadb.MessageDatabase`. This setup is useful for debugging cleanup issues related to non-persistent messages that are swapped to temp storage when the broker's memory usage limit is exceeded.  Make sure to analyze the logs carefully to avoid mixing the output from KahaDB and temp storage.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/why-do-kahadb-log-files-remain-after-cleanup.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.appender.kahadb=org.apache.log4j.RollingFileAppender\nlog4j.appender.kahadb.file=${activemq.base}/data/kahadb.log\nlog4j.appender.kahadb.maxFileSize=1024KB\nlog4j.appender.kahadb.maxBackupIndex=5\nlog4j.appender.kahadb.append=true\nlog4j.appender.kahadb.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kahadb.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\nlog4j.logger.org.apache.activemq.store.kahadb=TRACE, kahadb\nlog4j.logger.org.apache.activemq.store.kahadb.MessageDatabase=INFO, kahadb\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg - Shell\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures with the `gpg` tool. The first command imports the public keys, and the second command verifies the downloaded file against the signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-03.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic with URL parameter\nDESCRIPTION: This snippet demonstrates how to run the ActiveMQ Classic broker by specifying a URL to listen on as a parameter. Requires the full class name and the appropriate classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava org.activemq.broker.impl.Main tcp://localhost:61626\n```\n\n----------------------------------------\n\nTITLE: GCC Make and Install\nDESCRIPTION: Compiles and installs the configured GCC. This step builds the compiler with the specified options and installs it to the designated prefix.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake bootstrap\nmake install\n```\n\n----------------------------------------\n\nTITLE: Download testsuite ActiveMQ Classic\nDESCRIPTION: Commands to download testsuite ActiveMQ Classic\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp\nwget -c \"https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=blob_plain;f=assembly/src/test/scripts/init-script-testsuite;hb=HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Execute testsuite ActiveMQ Classic\nDESCRIPTION: Commands to execute the testsuite ActiveMQ Classic\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd <Installation Dir of the ActiveMQ Classic Script>\n./activemq stop\n/tmp/init-script-testsuite 2>&1| tee /tmp/test-suite.log\n```\n\n----------------------------------------\n\nTITLE: Conditional Download Links with Liquid\nDESCRIPTION: This snippet conditionally generates download links for binary and source distributions of ActiveMQ Artemis. If `include.is_current_release` is true, it uses the apache.org download server; otherwise, it uses the archive.apache.org download server. It includes links for tar.gz, ZIP, and source distributions, along with SHA512 checksums and GPG signatures.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/artemis_release.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if include.is_current_release %}\ntar.gz:|[apache-artemis-{{include.release.version}}-bin.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz&action=download)|[SHA512](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.sha512)|[GPG Signature](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.asc)\nZIP:|[apache-artemis-{{include.release.version}}-bin.zip](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip&action=download)|[SHA512](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.sha512)|[GPG Signature](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.asc)\nSource Distribution:|[apache-artemis-{{include.release.version}}-source-release.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz&action=download)|[SHA512](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.sha512)|[GPG Signature](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.asc)|\n{% else %}\ntar.gz:|[apache-artemis-{{include.release.version}}-bin.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz)|[SHA512](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.sha512)|[GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.asc)\nZIP:|[apache-artemis-{{include.release.version}}-bin.zip](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip)|[SHA512](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.sha512)|[GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.asc)\nSource Distribution:|[apache-artemis-{{include.release.version}}-source-release.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz)|[SHA512](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.sha512)|[GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.asc)|\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures and the `gpg` tool. The first command imports the public keys from the KEYS file. The second command verifies the signature of the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-01.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Stop Apollo Broker Service Bash\nDESCRIPTION: Command to stop the ActiveMQ Apollo broker service on Unix-like systems.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service stop\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ 1.4.0\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ version 1.4.0 tag from the Apache Subversion repository. It allows users to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v140.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.4.0/\n```\n\n----------------------------------------\n\nTITLE: Install Apollo Broker Service on Windows\nDESCRIPTION: Command to install ActiveMQ Apollo as a Windows service.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nc:\\mybroker\\bin\\apollo-broker-service install\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Name in Java\nDESCRIPTION: This Java code configures the name of the embedded broker. Setting a unique name is important when running multiple brokers in the same JVM. Clients can then connect to a specific broker using the 'vm://' transport with the broker's name.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-embed-a-broker-inside-a-connection.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBrokerService broker = new BrokerService();\n// configure the broker\nbroker.setBrokerName(\"fred\");\nbroker.addConnector(\"tcp://localhost:61616\");\nbroker.start();\n```\n\n----------------------------------------\n\nTITLE: Control instance ActiveMQ Classic\nDESCRIPTION: Commands to control instances\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n/etc/init.d/activemq-instance1 start|stop|restart|console|....\n```\n\n----------------------------------------\n\nTITLE: Stop Apollo Broker Service Windows\nDESCRIPTION: Command to stop the ActiveMQ Apollo broker service on Windows.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service stop\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with gpg\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using GPG signatures. The first command imports the public key, and the second command verifies the signature file against the downloaded binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-02.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Starting ActiveMQ Classic with Logging (Unix)\nDESCRIPTION: This command starts the ActiveMQ Classic broker on Unix-like systems and redirects both standard output and standard error to a log file located at `/tmp/smlog`. The process runs in the background.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/version-5-getting-started.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nbin/activemq start > /tmp/smlog  2>&1 &;\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures (PGP alternative)\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures.  It involves adding the KEYS file and then verifying the signature of the downloaded archive. Replace `<version>` with the appropriate version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with GPG\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using GPG signatures. The first command imports the KEYS file, and the second command verifies the downloaded file using the corresponding .asc signature file.  The `<version>` placeholder should be replaced with the specific ActiveMQ version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-02.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Checkout from SVN\nDESCRIPTION: This command checks out the activemq-cpp-2.2.1 tag from the Apache SVN repository. It requires SVN to be installed on the system and network access to the Apache SVN server.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/221-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.1/\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ActiveMQ Classic Windows NT Service\nDESCRIPTION: This snippet describes how to uninstall the ActiveMQ Classic broker as a Windows NT service using the UninstallService.bat script. Running this script removes the ActiveMQ Classic service from the list of NT services.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/java-service-wrapper.md#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nACTIVEMQ_HOME/bin/win32/UninstallService.bat\n```\n\n----------------------------------------\n\nTITLE: Checkout NMS vendor directory using SVN\nDESCRIPTION: Checks out the vendor directory from the Apache ActiveMQ SVN repository. This directory contains the necessary dependencies for building the NMS API and provider libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/building.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/vendor/\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS MessageConsumer in C++\nDESCRIPTION: This code snippet shows how to create a MessageConsumer in CMS using C++. It requires a ConnectionFactory, Connection, Session, and a Destination (Topic in this example). The consumer is then created by the Session, listening to the specified Destination.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// Create the ConnectionFactory\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory(\n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\n// Create a Connection\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\n// Create a new Session from our Connection\nstd::auto_ptr<cms::Session> session( connection->createSession() );\n\n// Now create a Topic\nstd::auto_ptr<cms::Topic> myTopic( session->createTopic( \"EXAMPLE-TOPIC\" ) );\n\n// Now create the Consumer\nstd::auto_ptr<cms::MessageConsumer> myConsumer( session->createConsumer( myTopic ) );\n```\n\n----------------------------------------\n\nTITLE: Staging Release Artifacts in SVN Dist Dev Area\nDESCRIPTION: These shell and SVN commands check out the SVN dist dev area, run the prepare-release.sh script to stage the release artifacts, and add the new content to SVN for testing and voting. The script requires the Nexus staging repository URL and the release version as parameters.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsvn co https://dist.apache.org/repos/dist/dev/activemq/activemq/\ncd activemq\n./prepare-release.sh <nexus-staging-repo-url> <version>\n# Example: ./prepare-release.sh https://repository.apache.org/content/repositories/orgapacheactivemq-1149 5.15.1\nsvn add <version>\n```\n\n----------------------------------------\n\nTITLE: STOMP Connect Frame\nDESCRIPTION: This is an example STOMP frame to connect to the broker with default credentials.  It requires the login and passcode headers to be set to the admin user and password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/stomp-manual.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCONNECT\n\nlogin:admin\npasscode:password\n\n^@\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity Using GPG\nDESCRIPTION: These commands are used to verify the integrity of the downloaded ActiveMQ distribution using GPG. They involve importing the KEYS file and verifying the signature file associated with the downloaded binary distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-01.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 2.1\nDESCRIPTION: This snippet provides the SVN command to checkout the ActiveMQ CMS (C++) version 2.1 tag from the Apache Subversion repository. This allows developers to obtain the exact version of the code corresponding to the 2.1 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/21-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1/\n```\n\n----------------------------------------\n\nTITLE: Custom VirtualHost Module Scala\nDESCRIPTION: This snippet shows the module class used when extending the data model for virtual hosts. It specifies the package where the DTO resides and the class to be included in the Apollo data model.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\npackage example;\nimport org.apache.activemq.apollo.util.DtoModule\nclass Module extends DtoModule {\n  def dto_package = \"example\"\n  def extension_classes = Array(classOf[MyVirtualHostDTO])\n}\n```\n\n----------------------------------------\n\nTITLE: Git Checkout for ActiveMQ-CPP 3.8.3\nDESCRIPTION: This snippet provides instructions on how to clone the ActiveMQ-CPP repository from the Apache Git repository and checkout the 3.8.3 tag. This allows users to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/383-release.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://git-wip-us.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.8.3\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for Apache NMS EMS 1.1.0\nDESCRIPTION: This command checks out the Apache NMS EMS 1.1.0 source code from the Apache Subversion repository. It requires an SVN client to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_ems_releases/apachenms-ems-v110.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.EMS/tags/1.1.0/\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Command for ActiveMQ Classic Source Code\nDESCRIPTION: This command is used to checkout the ActiveMQ Classic 5.5.1 source code from the Apache Subversion repository. It specifies the SVN repository URL and the tag for the 5.5.1 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-01.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.5.1\n```\n\n----------------------------------------\n\nTITLE: MySQL DataSource Sample Setup (Commented)\nDESCRIPTION: This commented-out example demonstrates how to configure a MySQL DataSource for ActiveMQ Classic. It uses `org.apache.commons.dbcp.BasicDataSource` and includes settings for the driver class name, JDBC URL, username, password, and connection pooling.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/jdbc-master-slave.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- \n  <bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n    <property name=\"url\" value=\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"/>\n    <property name=\"username\" value=\"activemq\"/>\n    <property name=\"password\" value=\"activemq\"/>\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n  </bean>\n  -->\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command allows users to checkout the specific tag (version 1.5.6) of the Apache.NMS.ActiveMQ project from the Apache Subversion (SVN) repository. This enables developers to access the exact source code corresponding to this release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v156.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.6/\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp - Shell\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures with the `pgp` tool. The first command imports the public keys, and the second command verifies the downloaded file against the signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-03.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP\nDESCRIPTION: These commands demonstrate how to verify the integrity of downloaded files using PGP or GPG. They involve importing the KEYS file and then verifying the signature file associated with the downloaded distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for XBean Configuration (XML)\nDESCRIPTION: Shows the maven dependencies needed to support XBean configuration of ActiveMQ Classic for use with XML-based broker configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-to-unit-test-jms-code.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>Appropriate version for activemq-version</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.activemq</groupId>\n    <artifactId>activemq-spring</artifactId>\n    <version>${activemq-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with GPG (alternative)\nDESCRIPTION: These commands are an alternative way to verify the integrity of the downloaded ActiveMQ files using GPG. First, the KEYS file is added to the keyring, then the signature file is verified against the downloaded archive. Replace <version> with the appropriate version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-01.md#_snippet_1\n\nLANGUAGE: GPG\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Topic Destination in C++\nDESCRIPTION: This code snippet demonstrates how to create a Topic destination in CMS using the C++ API. It involves creating a ConnectionFactory, Connection, and Session before finally creating the Topic itself.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n// Create the ConnectionFactory\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory(\n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616\" ) );\n\n// Create a Connection\nstd::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );\n\n// Create a new Session from our Connection\nstd::auto_ptr<cms::Session> session( connection->createSession() );\n\n// Now create a Topic\nstd::auto_ptr<cms::Topic> myTopic( session->createTopic( \"EXAMPLE-TOPIC\" ) );\n```\n\n----------------------------------------\n\nTITLE: Getting Broker Data via Jolokia - Bash\nDESCRIPTION: This `wget` command uses the Jolokia API to retrieve basic broker data from ActiveMQ. It includes authentication, sets the `Origin` header to prevent CSRF, and specifies the MBean to query.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/rest.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwget --user admin --password admin --header \"Origin: http://localhost\" --auth-no-challenge http://localhost:8161/api/jolokia/read/org.apache.activemq:type=Broker,brokerName=localhost\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity Using PGP (pgpk)\nDESCRIPTION: This snippet demonstrates how to verify the integrity of downloaded files using the `pgpk` tool. It involves importing the KEYS file and subsequently using `pgpv` to verify the downloaded distribution against its accompanying `.asc` signature file. Replace `<version>` with the specific version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-00.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic Producer with Ant\nDESCRIPTION: This snippet demonstrates how to run the ActiveMQ Classic producer example using Apache Ant. It navigates to the examples directory and executes the 'ant producer' command. The producer connects to the specified URL and publishes messages to a queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /opt/incubator-activemq-4.0.2/examples\n$ ant producer\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet defines the Maven dependency configuration required to include ActiveMQ Classic 5.6.0 in a Maven project. It specifies the groupId, artifactId, and version of the ActiveMQ core library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-06-00.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet configures the Maven dependency for ActiveMQ Classic 5.3.0 in a Maven project. It specifies the groupId, artifactId, and version for the activemq-core dependency, which is required to use ActiveMQ Classic in a Java project managed by Maven.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-00.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ-CPP 3.4.4 source code from the Apache Subversion repository. It allows developers to obtain a specific version of the code for inspection, modification, or building.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/344-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.4/\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ version 1.5.4 source code from the Apache Subversion repository. It retrieves the code from the specified SVN URL to a local directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v154.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.4/\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the command to check out the ActiveMQ CPP 2.0 source code from the Apache Subversion repository. It allows developers to obtain the specific version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/20-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.0/\n```\n\n----------------------------------------\n\nTITLE: Committer Invitation Email Template\nDESCRIPTION: This template is used to send a formal invitation to a candidate to become an ActiveMQ committer. It includes the subject, recipient (candidate's email), a copy to the private PMC list, and information about committer privileges, ICLA registration, and ASF ID.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nTo: <INVITEE EMAIL>  \nCc: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: Invitation to become Apache Active committer\n\nHello <INVITEE>,\n\nThe Apache ActiveMQ Project Management Committee (PMC) hereby offers you committer privileges to the project. These privileges are offered on the understanding that you'll use them reasonably and with common sense. We like to work on trust rather than unnecessary constraints.\n\nBeing a committer enables you to more easily make changes without needing to go through the patch submission process. Although you will be granted commit access to project repositories, you will be expected to adhere to project best practices when committing. The following URL some good resources regarding expectations and processes:\n\n[http://www.apache.org/dev/new-committers-guide.html](http://www.apache.org/dev/new-committers-guide.html)\n\nThis is a personal invitation for you to accept or decline in private. Please reply to the [private@activemq.apache.org](mailto:private@activemq.apache.org) address only.\n\nIf you accept the invitation, the next step is to register an Individual Contributor License Agreement (ICLA) with the Apache Software Foundation if you have not already. Details of the ICLA and the forma can be found at the following URL:\n\n[http://www.apache.org/licenses/#clas](http://www.apache.org/licenses/#clas)\n\nThe form provides instructions for its completion and submittal to the Secretary of the ASF.\n\nWhen you submit the completed ICLA, please request to notify the Apache ActiveMQ project upon official receipt.Once your ICLA has been acknowledged by the Secretary, you will need to choose a unique ASF ID. You can check to see if your preferred id is already taken by browsing the following list of ASF committers:\n\n[http://people.apache.org/committer-index.html](http://people.apache.org/committer-index.html)\n\nWhen your ICLA is recognized by the Secretary, you will receive a follow-up message with the next steps for establishing you as a committer.\n\nWe look forward to your response!\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with GPG\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using GPG signatures. It involves importing the KEYS file and then verifying the signature file against the downloaded file. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ Classic 5.3.2 Source Code\nDESCRIPTION: This command retrieves the source code for ActiveMQ Classic 5.3.2 from the Apache Subversion repository.  It checks out the specified tag into a local directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-02.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-parent-5.3.2\n```\n\n----------------------------------------\n\nTITLE: Get Virtual Host Details\nDESCRIPTION: This example demonstrates how to retrieve details about a specific virtual host using curl. It requires authentication with a username and password.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u \"admin:password\" http://localhost:61680/broker/virtual-hosts/default.json\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command is used to checkout the Apache.NMS.ActiveMQ v1.3.0 tag from the Apache Subversion repository.  It downloads the specified version of the code into a local directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v130.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.ActiveMQ/tags/1.3.0/\n```\n\n----------------------------------------\n\nTITLE: Disabling IPv6 in Linux\nDESCRIPTION: This command disables IPv6 support on a Linux machine by adding a line to the /etc/modprobe.conf file.  This prevents the Java Runtime from using IPv6 sockets by disabling IPv6 at the OS level. Requires root privileges to modify the /etc/modprobe.conf file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/multicast-watch-out-for-ipv6-vs-ipv4-support-on-your-operating-system-or-distribution-or-network.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nalias net-pf-10 off # disable IPV6\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic with specific XML configuration\nDESCRIPTION: This snippet demonstrates how to run the ActiveMQ Classic broker using a specific XML configuration file. Replace `foo.xml` with the path to your desired configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nactivemq foo.xml\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with gpg - Shell\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using GPG. It imports the KEYS file and then verifies the signature file.  The <version> part of the command should be substituted with the correct version of ActiveMQ being used.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-02.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageListener Interface in C++\nDESCRIPTION: This code demonstrates how to implement the MessageListener interface for asynchronous message consumption. The `onMessage` method is called when a new message arrives, allowing message processing in a separate thread. The example demonstrates casting to a TextMessage and handling potential type mismatches.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nclass SimpleListener : public cms::MessageListener {\n\n    virtual void onMessage( const Message* message ) {\n\n        const TextMessage* textMessage =\n            dynamic_cast< const TextMessage* >( message );\n        std::string text = \"\";\n\n        if( textMessage != NULL ) {\n            text = textMessage->getText();\n        } else {\n            text = \"NOT A TEXTMESSAGE!\";\n        }\n\n        printf( \"Message Received: %s\\n\", text.c_str() );\n\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling XML Validation in ActiveMQ Classic\nDESCRIPTION: This command demonstrates how to disable XML validation when starting ActiveMQ Classic from the command line. By appending the `validate=false` query parameter to the XBean URL, you can bypass XML schema validation and reuse existing XML configurations without modification. This is useful for maintaining compatibility with older configurations or when strict adherence to the schema is not required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/xml-reference.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq console xbean:conf/activemq.xml?validate=false\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout for Apache.NMS.Stomp\nDESCRIPTION: This snippet provides the SVN command to checkout the Apache.NMS.Stomp version 1.5.1 tag. It retrieves the specified version of the source code from the Apache Subversion repository.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v151.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.1/\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures and the `pgpk` tool. The first command imports the public keys from the KEYS file. The second command verifies the signature of the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-01.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Checkout SVN Tag\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ-CPP 3.2.5 tag from the Apache Subversion repository. It allows developers to access the specific version of the codebase for inspection, modification, or building.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/325-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.5/\n```\n\n----------------------------------------\n\nTITLE: Checking out ActiveMQ CMS 2.2 from SVN\nDESCRIPTION: This snippet shows how to checkout the ActiveMQ CMS 2.2 code from the Apache Subversion repository. This command retrieves the complete source code associated with the activemq-cpp-2.2 tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/22-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2/\n```\n\n----------------------------------------\n\nTITLE: PMC Discussion Email Template\nDESCRIPTION: This template is for initiating a discussion about inviting a committer to join the ActiveMQ PMC.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [DISCUSS] Invite <CANDIDATE> to join ActiveMQ PMC\n\nConsidering <CANDIDATE>’s contributions to the ActiveMQ project as a committer...\n\n<INSERT EVIDENCE HERE>\n\nBased on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.\n\nPlease remember that this is not a vote for this person to become a committer, at this point it is only a discussion.\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Distribution Links\nDESCRIPTION: This Jekyll/HTML snippet conditionally renders download links for ActiveMQ source distributions. If it's the current release, links to Apache's dynamic closer are used; otherwise, links to the archive are used. The page.version variable is utilized to dynamically construct the download URLs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/classic_release.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% if isCurrentRelease %}\nSource Release:|[activemq-parent-{{page.version}}-source-release.zip](https://www.apache.org/dyn/closer.cgi?filename=/activemq/{{page.version}}/activemq-parent-{{page.version}}-source-release.zip&action=download)|[ASC](https://downloads.apache.org/activemq/{{page.version}}/activemq-parent-{{page.version}}-source-release.zip.asc), [SHA512](https://downloads.apache.org/activemq/{{page.version}}/activemq-parent-{{page.version}}-source-release.zip.sha512)|{% else %}\nSource Release|[activemq-parent-{{page.version}}-source-release.zip](https://archive.apache.org/dist/activemq/{{page.version}}/activemq-parent-{{page.version}}-source-release.zip)|[ASC](https://archive.apache.org/dist/activemq/{{page.version}}/activemq-parent-{{page.version}}-source-release.zip.asc), [SHA512](https://archive.apache.org/dist/activemq/{{page.version}}/activemq-parent-{{page.version}}-source-release.zip.sha512)\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ version 1.5.3 source code from the Apache Subversion (SVN) repository. It uses the 'svn co' command to retrieve the code from the specified URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v153.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.3/\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.Stomp\nDESCRIPTION: This snippet provides the SVN command to checkout the Apache.NMS.Stomp version 1.2.0 tag from the Apache Subversion repository. It allows users to access the specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v120.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.2.0/\n```\n\n----------------------------------------\n\nTITLE: JBoss Startup Output Example\nDESCRIPTION: This snippet shows an example of the output when starting JBoss. It includes information about the JBoss environment, Java version, and the initialization process. This output can be used to verify that JBoss is starting up correctly and that ActiveMQ Classic is being initialized.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/integrating-apache-activemq-classic-with-jboss.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n=========================================================================\n\n  JBoss Bootstrap Environment\n\n  JBOSS_HOME: /opt/jboss\n\n  JAVA: java\n\n  JAVA_OPTS: -server -Xms128m -Xmx512m -Dsun.rmi.dgc.client.gcInterval=3600000 \n-Dsun.rmi.dgc.server.gcInterval=3600000 -Dprogram.name=run.sh\n\n  CLASSPATH: /opt/jboss/bin/run.jar:/lib/tools.jar\n\n=========================================================================\n\n22:55:48,686 INFO  [Server] Starting JBoss (MX MicroKernel)...\n22:55:48,688 INFO  [Server] Release ID: JBoss [Zion] 4.0.4.GA (build: CVSTag=JBoss_4_0_4_GA date=200605151000)\n22:55:48,690 INFO  [Server] Home Dir: /opt/jboss-4.0.4.GA\n22:55:48,692 INFO  [Server] Home URL: file:/opt/jboss-4.0.4.GA/\n22:55:48,695 INFO  [Server] Patch URL: null\n22:55:48,697 INFO  [Server] Server Name: default\n22:55:48,698 INFO  [Server] Server Home Dir: /opt/jboss-4.0.4.GA/server/default\n22:55:48,701 INFO  [Server] Server Home URL: file:/opt/jboss-4.0.4.GA/server/default/\n22:55:48,702 INFO  [Server] Server Log Dir: /opt/jboss-4.0.4.GA/server/default/log\n22:55:48,704 INFO  [Server] Server Temp Dir: /opt/jboss-4.0.4.GA/server/default/tmp\n22:55:48,706 INFO  [Server] Root Deployment Filename: jboss-service.xml\n22:55:49,092 INFO  [ServerInfo] Java version: 1.5.0_06,Apple Computer, Inc.\n22:55:49,101 INFO  [ServerInfo] Java VM: Java HotSpot(TM) Server VM 1.5.0_06-64,\"Apple Computer, Inc.\"\n22:55:49,102 INFO  [ServerInfo] OS-System: Mac OS X 10.4.8,i386\n22:55:49,803 INFO  [Server] Core system initialized\n22:55:53,379 INFO  [WebService] Using RMI server codebase: http://rattlesnake:8083/\n22:55:53,400 INFO  [Log4jService$URLWatchTimerTask] Configuring from URL: resource:log4j.xml\n22:55:54,034 INFO  [NamingService] JNDI bootstrap JNP=/0.0.0.0:1099, RMI=/0.0.0.0:1098, backlog=50, \nno client SocketFactory, Server SocketFactory=class\norg.jboss.net.sockets.DefaultSocketFactory\n22:55:58,475 INFO  [Embedded] Catalina naming disabled\n```\n\n----------------------------------------\n\nTITLE: Running ActiveMQ Classic with URL parameter via Maven\nDESCRIPTION: This snippet demonstrates how to run the ActiveMQ Classic broker from Maven while specifying a URL. This uses Maven's `-D` flag to pass a system property.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/running-a-3x-broker.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmaven server -Durl=tcp://localhost:61626\n```\n\n----------------------------------------\n\nTITLE: Define TempDestinationAdvisoryConsumer Class Header C++\nDESCRIPTION: This header file defines the TempDestinationAdvisoryConsumer class, which is responsible for monitoring the creation and destruction of temporary destinations in ActiveMQ.  It inherits from cms::MessageListener and overrides the onMessage method to handle advisory messages. It also includes necessary header files for ActiveMQ-CPP and Decaf.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#ifndef _ACTIVEMQCPP_EXAMPLES_ADVISORIES_TEMPDESTINATIONADVISORYCONSUMER_H_\n#define _ACTIVEMQCPP_EXAMPLES_ADVISORIES_TEMPDESTINATIONADVISORYCONSUMER_H_\n\n#include <string>\n#include <memory>\n\n#include <cms/Session.h>\n#include <cms/MessageProducer.h>\n#include <cms/MessageConsumer.h>\n#include <cms/MessageListener.h>\n\n#include <decaf/lang/Runnable.h>\n\nnamespace activemqcpp {\nnamespace examples {\nnamespace advisories {\n\n    /**\n     * Monitors a Broker for Temporary Topic creation and destruction.\n     * \n     * @since 3.0\n     */\n    class TempDestinationAdvisoryConsumer : public cms::MessageListener {\n    private:\n\n        cms::Session* session;\n        std::auto_ptr<cms::MessageConsumer> consumer;\n\n    public:\n\n        TempDestinationAdvisoryConsumer( cms::Session* session );\n        virtual ~TempDestinationAdvisoryConsumer();\n\n        /**\n         * Async Message callback.\n         */\n        virtual void onMessage( const cms::Message* message );\n\n    };\n\n}}}\n\n#endif /* _ACTIVEMQCPP_EXAMPLES_ADVISORIES_TEMPDESTINATIONADVISORYCONSUMER_H_ */\n```\n\n----------------------------------------\n\nTITLE: Importing Keys and Verifying Signature with GPG\nDESCRIPTION: This snippet demonstrates how to import the KEYS file and verify the signature of a downloaded file using GPG.  It requires GPG to be installed. The input is the KEYS file and the downloaded file along with its .asc signature file. The output is a verification message from GPG indicating whether the signature is valid.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/verify_download.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify <file-name>.asc <file-name>\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet provides the command to checkout the Apache.NMS.WCF v1.1.0 release from the Apache Subversion repository. It allows users to obtain a local copy of the source code for inspection, modification, or building.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_wcf_releases/apachenmswcf-v110.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.WCF/tags/1.1.0/\n```\n\n----------------------------------------\n\nTITLE: Sending JMS Messages to Different Destinations in Java\nDESCRIPTION: This code snippet demonstrates how to create a JMS MessageProducer with a null destination. This allows you to send messages to different destinations by specifying the destination each time you call the `send` method. The `session.createProducer(null)` creates a producer without a default destination, enabling flexible routing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-send-messages-to-different-destinations-from-a-single-messageproducer.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessageProducer producer = session.createProducer(null);\n...\nproducer.send(someDestination, message);\n...\nproducer.send(anotherDestination, message);\n```\n\n----------------------------------------\n\nTITLE: Checking out ActiveMQ 5.0.0 via SVN\nDESCRIPTION: This shell command demonstrates how to check out the ActiveMQ 5.0.0 source code from the Apache Subversion repository. It utilizes the svn co command to retrieve the tagged version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-00-00.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.0.0\n```\n\n----------------------------------------\n\nTITLE: Conditional Binary Distribution Links\nDESCRIPTION: This Jekyll/HTML snippet conditionally renders download links for ActiveMQ binary distributions based on whether the current release is the latest. If it's the current release, links to Apache's dynamic closer are used; otherwise, links to the archive are used. The page.version variable is utilized to dynamically construct the download URLs.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/classic_release.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% if isCurrentRelease %}\nWindows Distribution|[apache-activemq-{{page.version}}-bin.zip](https://www.apache.org/dyn/closer.cgi?filename=/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.zip&action=download)|[ASC](https://downloads.apache.org/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.zip.asc), [SHA512](https://downloads.apache.org/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.zip.sha512)\nUnix/Linux/Cygwin Distribution|[apache-activemq-{{page.version}}-bin.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.tar.gz&action=download)|[ASC](https://downloads.apache.org/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.tar.gz.asc), [SHA512](https://downloads.apache.org/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.tar.gz.sha512){% else %}\nWindows Distribution|[apache-activemq-{{page.version}}-bin.zip](https://archive.apache.org/dist/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.zip)|[ASC](https://archive.apache.org/dist/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.zip.asc), [SHA512](https://archive.apache.org/dist/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.zip.sha512)\nUnix/Linux/Cygwin Distribution|[apache-activemq-{{page.version}}-bin.tar.gz](https://archive.apache.org/dist/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.tar.gz)|[ASC](https://archive.apache.org/dist/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.tar.gz.asc), [SHA512](https://archive.apache.org/dist/activemq/{{page.version}}/apache-activemq-{{page.version}}-bin.tar.gz.sha512)\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP\nDESCRIPTION: These commands demonstrate how to verify the integrity of downloaded ActiveMQ files using PGP or GPG. They involve importing the KEYS file and then verifying the signature of the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-04.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the public key, and the second command verifies the signature of the downloaded file against the public key. Replace <version> with the actual version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ 1.6.4\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ version 1.6.4 source code from the Apache SVN repository. It allows developers to access the specific version of the code for inspection, modification, or contribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v164.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co [https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.4/](https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.4/)\n```\n\n----------------------------------------\n\nTITLE: Committer Announcement Template\nDESCRIPTION: This template is used to announce a new Apache ActiveMQ committer to the developer mailing list. It expresses appreciation for the committer's contributions and welcomes them to the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nTo: [dev@activemq.apache.org](mailto:dev@activemq.apache.org)  \nSubject: [ANNOUNCE] New Apache ActiveMQ Committer <INVITEE>\n\nOn behalf of the Apache ActiveMQ PMC, I am very pleased to announce that <INVITEE> has accepted an invitation to become a committer. We greatly appreciate all of <INVITEE>'s hard work and generous contributions to the project. We look forward to <her/his> continued involvement in the project.\n\nWelcome <INVITEE> and congratulations!\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ Classic Source Code using SVN\nDESCRIPTION: This command is used to check out the ActiveMQ Classic 5.8.0 source code from the Apache SVN repository. This command will download a local copy of the source code to your machine allowing you to build and modify it. The svn client needs to be installed and available on your system.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-08-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.8.0\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CPP 2.2.2\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ C++ client library version 2.2.2 from the Apache Subversion repository. It allows developers to obtain the source code directly from the tagged release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/222-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.2/\n```\n\n----------------------------------------\n\nTITLE: Populating the Javadocs Site in SVN\nDESCRIPTION: These shell and SVN commands check out the website's content from SVN, create a version-specific directory for the Javadocs, link the apidocs folder, and add the new content to SVN.  It publishes javadocs to the Apache ActiveMQ website.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsvn co https://svn.apache.org/repos/infra/websites/production/activemq/content\ncd content/maven\nmkdir <version>\n#copy over apidocs folder that was created by the site plugin to <version>/apidocs\nsvn add <version>\nsvn rm apidocs\nln -s <version>/apidocs apidocs\nsvn add apidocs\n# and commit once it looks good.\n```\n\n----------------------------------------\n\nTITLE: Generating IntelliJ IDEA Project Files with Maven\nDESCRIPTION: This command generates IntelliJ IDEA project files for ActiveMQ Classic using the Maven IDEA plugin.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn idea:idea\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Consumption Loop in C++\nDESCRIPTION: This example demonstrates a synchronous message consumption loop using the `receive()` method of the MessageConsumer.  The loop blocks until a message is received. This is appropriate when no other processing is needed until a message arrives.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nwhile( !done ) {\n\n   std::auto_ptr<Message> message( myConsumer->receive() );\n\n   ...Do Something with the message...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signature with gpg\nDESCRIPTION: This snippet illustrates how to verify the PGP signature of an Apache ActiveMQ distribution using the `gpg` command. It imports the KEYS file and then verifies the signature file against the downloaded distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verify-downloads.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Apache.NMS.ActiveMQ Tag\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ tag 1.6.2 from the Apache Subversion repository. It retrieves the source code for the specified version, allowing users to inspect, modify, or build the library from source.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v162.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co [https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.2/](https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.2/)\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ-CPP 3.7.0\nDESCRIPTION: This command checks out the ActiveMQ-CPP 3.7.0 source code from the Apache SVN repository. It allows developers to access the specific version of the code for building, testing, or contributing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/370-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.7.0/\n```\n\n----------------------------------------\n\nTITLE: Git Remote Configuration\nDESCRIPTION: This git command adds a new remote named 'apache' pointing to the Apache ActiveMQ Git repository. This allows the user to push commits to the official Apache repository.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add apache [https://git-wip-us.apache.org/repos/asf/activemq.git](https://git-wip-us.apache.org/repos/asf/activemq.git)\n```\n\n----------------------------------------\n\nTITLE: PGP Signature Verification using pgpk\nDESCRIPTION: These bash commands demonstrate how to verify the PGP signature of a downloaded file using the `pgpk` tool. First, the KEYS file is imported, and then the signature file is verified against the downloaded binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-01-00.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Initializing NMSConnectionFactory with ActiveMQ URI in C#\nDESCRIPTION: This code snippet demonstrates how to initialize an NMSConnectionFactory with an ActiveMQ URI using the TCP transport.  It sets up a connection to a local ActiveMQ broker on port 61616.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/nms-uri-configuration.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ncf = new NMSConnectionFactory(\"activemq:tcp://localhost:61616\");\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet shows an example XML configuration. It demonstrates the basic structure of an XML configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.9.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Run Hawtio with JBang\nDESCRIPTION: This shell command starts the Hawtio console using JBang, specifying the location of the WAR file and the context path. It allows deploying Artemis Console from CLI.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhawtio --war-location /pathto/artemis-console-war.war --context-path /console\n```\n\n----------------------------------------\n\nTITLE: Building ActiveMQ Classic with Maven\nDESCRIPTION: These commands build ActiveMQ Classic using Maven. The first command cleans and tests the project. If tests fail, the subsequent commands clean and skip the tests during the build process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nThe preferred method of building ActiveMQ Classic is the following: cd [activemq_install_dir] where [activemq_install_dir] is the directory in which ActiveMQ Classic was installed. maven clean test If the above build fails on some tests, do the following: cd [activemq_install_dir] maven m:clean maven -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ CMS 3.9.0 Source Code using Git\nDESCRIPTION: This snippet demonstrates how to clone the ActiveMQ C++ repository from the Apache Gitbox, navigate to the cloned directory, and checkout the 3.9.0 tag to obtain the source code for the CMS client library version 3.9.0. This allows developers to build and modify the library.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/390-release.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.9.0\n```\n\n----------------------------------------\n\nTITLE: Liquid: Include Download Links\nDESCRIPTION: This snippet includes the `nms_amqp_download_links.md` partial, passing the `page` and `isCurrentRelease` variables as parameters. This partial is responsible for generating the download links for the release, potentially varying based on whether it's the current release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/nms_amqp_release.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% include nms_amqp_download_links.md release=page is_current_release=isCurrentRelease %}\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signature with pgp\nDESCRIPTION: This snippet shows how to verify the PGP signature of an Apache ActiveMQ distribution using the `pgp` command. It imports the KEYS file and then verifies the signature file against the downloaded distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verify-downloads.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Checking out ActiveMQ 5.4.3 using SVN\nDESCRIPTION: This command checks out the ActiveMQ 5.4.3 tag from the Apache SVN repository.  It uses the `svn co` command to download the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-04-03.md#_snippet_4\n\nLANGUAGE: Shell Script\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.3\n```\n\n----------------------------------------\n\nTITLE: Move Old Broker Data Directory\nDESCRIPTION: This command moves the existing broker data directory to a temporary location. This is done before installing the new version of Apollo and importing the data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/migration-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv ${broker-path}/data /tmp/broker-data\n```\n\n----------------------------------------\n\nTITLE: Run Publisher Script (Windows)\nDESCRIPTION: Executes the 'publisher.rb' script, which acts as a producer, sending messages to the ActiveMQ Apollo broker on Windows. This script requires the 'stomp' gem to be installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verification.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nruby publisher.rb\n```\n\n----------------------------------------\n\nTITLE: Decrypting Text with ActiveMQ Classic\nDESCRIPTION: Decrypts the given text using the provided password. Requires the `--input` and `--password` parameters.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/unix-shell-script.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq decrypt --input 'BkiT42A0CZfL1SanJIgxvQ==' --password asdasdasdasd\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ Classic Source Code\nDESCRIPTION: This bash command checks out the source code for ActiveMQ Classic version 5.1.0 from the Apache SVN repository. The 'svn co' command retrieves the specified tag from the repository, allowing access to the complete source code for that release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-01-00.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.1.0\n```\n\n----------------------------------------\n\nTITLE: Example java.lang.AbstractMethodError\nDESCRIPTION: This code snippet demonstrates a common `java.lang.AbstractMethodError` that arises when using an older JMS API version. The error occurs because the `createConnection` method signature might be incompatible with the JMS provider's implementation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javalangnosuchmethoderror.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\njava.lang.AbstractMethodError: \njavax.jms.ConnectionFactory.createConnection()Ljavax/jms/Connection;\n```\n\n----------------------------------------\n\nTITLE: Cloning ActiveMQ Artemis Github Repository\nDESCRIPTION: This command clones the ActiveMQ Artemis source code from the Github repository.  Git must be installed to execute the command.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/source.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit clone [https://github.com/apache/activemq-artemis](https://github.com/apache/activemq-artemis)\n```\n\n----------------------------------------\n\nTITLE: Checkout CMS 1.2 from SVN\nDESCRIPTION: This command checks out the CMS 1.2 source code from the Apache ActiveMQ SVN repository. It provides a way to access the specific version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/cms-api-12-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/cms-1.2/\n```\n\n----------------------------------------\n\nTITLE: Getting help for configure script on *nix\nDESCRIPTION: This shell command displays help information about the `configure` script, listing available options for customizing the build process.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./configure --help\n```\n\n----------------------------------------\n\nTITLE: Java Instantiation\nDESCRIPTION: This snippet demonstrates how to create a new instance of a Java class. It assumes that a class named `SomeJava` is available in the classpath. No specific dependencies are listed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.28.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Checking out Git Tag for ActiveMQ-CPP 3.9.2\nDESCRIPTION: This snippet demonstrates how to clone the ActiveMQ-CPP repository from Apache, navigate into the cloned directory, and checkout the specific tag (3.9.2) for the 3.9.2 release. This allows users to access the exact codebase corresponding to this release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/392-release.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git  \ncd activemq-cpp  \ngit checkout tags/3.9.2\n```\n\n----------------------------------------\n\nTITLE: Extracting ActiveMQ archive\nDESCRIPTION: This command extracts the contents of a gzipped tar archive into a specified directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar zxvf activemq-x.x.x.tar.gz\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet provides an example of XML content. It demonstrates a simple XML structure.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.25.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This XML snippet provides an example XML configuration element. It demonstrates the basic structure of an XML element and can be used as a template or reference.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.24.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Embedding XML content\nDESCRIPTION: This snippet demonstrates how to embed XML content within a markdown document. It shows a basic XML structure. No dependencies are explicitly required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.4.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet provides a simple XML configuration example, potentially related to ActiveMQ broker or client configuration. It shows a basic XML structure with a root element named 'xml' containing some content 'somexml'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.22.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Initialize OpenLDAP with ldif\nDESCRIPTION: Initializes OpenLDAP by adding entries from an LDIF file. The `ldapadd` command connects to the LDAP server using the specified administrative DN and password, then adds the entries defined in `activemq-openldap.ldif`. Requires the `ldapadd` utility to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/cached-ldap-authorization-module.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nldapadd -x -D \"cn=admin,dc=activemq,dc=apache,dc=org\" -w sunflower -f activemq-openldap.ldif\n```\n\n----------------------------------------\n\nTITLE: Bootstrap.cpp: C++ Main Function\nDESCRIPTION: C++ code that initializes the Java Virtual Machine (JVM) using GCJ, starts the ActiveMQ Classic adapter, sends a message, and then shuts down the adapter. This serves as the entry point for the application and bridges the C++ and Java code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <gcj/cni.h>\n#include <iostream>\n#include <java/lang/System.h>\n#include <java/lang/Throwable.h>\n#include <java/io/PrintStream.h>\n#include \"MQAdapter.h\"\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n    cout << \"Entering main\" << endl;\n    using namespace java::lang;\n\n    try\n    {\n        // Create and startup Java VM\n        JvCreateJavaVM(NULL) ;\n        JvAttachCurrentThread(NULL, NULL) ;\n\n        System::out->println(JvNewStringLatin1(\"Java println\")) ;\n\n        // Start ActiveMQ Classic\n        MQAdapter* pAdapter = new MQAdapter() ;\n        pAdapter->start() ;\n\n        // Send a message\n        pAdapter->send(JvNewStringLatin1(\"Hello World!\")) ;\n\n        // Shutdown ActiveMQ Classic\n        pAdapter->stop() ;\n     \n        JvDetachCurrentThread() ;\n    }\n    catch( Throwable *t )\n    {\n        System::err->println(JvNewStringLatin1(\"Exception\")) ;\n        t->printStackTrace() ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating the Schema Site in SVN\nDESCRIPTION: These shell and SVN commands download the schema files, rename them to match the core naming convention, and update the schema site in SVN. It fetches schema and related files from the Apache repository for a specified version, renaming them for consistency and creating symbolic links.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsvn co https://svn.apache.org/repos/infra/websites/production/activemq/content\ncd content/schema/core\ncurl --remote-name-all https://repository.apache.org/content/repositories/releases/org/apache/activemq/activemq-spring/<version>/activemq-spring-<version>{-schema.html,.xsd}{.asc,.asc.md5,.asc.sha1,.sha1,.md5,}\nfor i in activemq-spring-5.9.0*; do mv -- \"$i\" \"${i//spring/core}\"; done;\nsvn add activemq-core-5.9.0*\nsvn rm activemq-core.xsd\nln -s activemq-core-5.9.0.xsd activemq-core.xsd\nsvn add activemq-core.xsd\n# and commit once it looks good.\n```\n\n----------------------------------------\n\nTITLE: Jetty Context XML Configuration\nDESCRIPTION: This XML configuration file sets up the context for the ActiveMQ Artemis console within a Jetty web server. It defines the context path and the location of the WAR file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE Configure PUBLIC \"-//Jetty//Configure//EN\" \"https://jetty.org/configure_10_0.dtd\">\n\n<Configure class=\"org.eclipse.jetty.ee10.webapp.WebAppContext\"> \n  <Set name=\"contextPath\">/console</Set> \n  <Set name=\"war\">/myapps/artemis-console-war.war</Set> \n</Configure>\n```\n\n----------------------------------------\n\nTITLE: Tomcat Context Configuration in server.xml\nDESCRIPTION: This XML snippet configures the context path and document base for the ActiveMQ Artemis console in Tomcat's server.xml file. It maps the `/console` path to the specified WAR file location.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Context path=\"/console\" docBase=\"/myapps/artemis-console-war.war\"/>\n```\n\n----------------------------------------\n\nTITLE: Looping and Limiting Release Display using Liquid\nDESCRIPTION: This snippet iterates through the sorted 'releases' collection and limits the displayed releases to a maximum of three using a counter variable 'i' and a 'break' statement. The 'for' loop processes each release until the counter exceeds 2.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/news.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign i = 0 %}\n<div class=\"card-group w-100\">\n{% for release in releases %} {% if i > 2 %} {% break %} {% endif %}\n<div class=\"card card-grey-small\">\n<div class=\"card-body ml-0 p-2\">\n{% if release.collection contains \"artemis_console\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/artemis-console/download/\">{{release.title}}</a></h6>\n{% elsif release.collection contains \"artemis\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/artemis/download/\">{{release.title}}</a></h6>\n{% elsif release.collection contains \"nms_api\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/nms/nms-api-downloads\">{{release.title}}</a></h6>\n{% elsif release.collection contains \"nms_amqp\" %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{site.baseurl}}/components/nms/providers/amqp/downloads/\">{{release.title}}</a></h6>\n{% else %}\n    <h6 class=\"card-title\"><a class=\"text-blue\" href=\"{{release.url}}\">{{release.title}}</a></h6>\n{% endif %}\n\n{% if release.collection contains \"artemis_console\" %}\n    {{release.shortDescription }}<a style=\"display: unset;\" class=\"nav-link pl-0 ml-0\" href=\"{{site.baseurl}}/components/artemis-console/download/\">...more</a>\n{% elsif release.collection contains \"artemis\" %}\n    {{release.shortDescription }}<a style=\"display: unset;\" class=\"nav-link pl-0 ml-0\" href=\"{{site.baseurl}}/components/artemis/download/\">...more</a>\n{% elsif release.collection contains \"nms_api\" %}\n    {{release.shortDescription }}<a style=\"display: unset;\" class=\"nav-link pl-0 ml-0\" href=\"{{site.baseurl}}/components/nms/nms-api-downloads\">...more</a>\n{% elsif release.collection contains \"nms_amqp\" %}\n    {{release.shortDescription }}<a style=\"display: unset;\" class=\"nav-link pl-0 ml-0\" href=\"{{site.baseurl}}/components/nms/providers/amqp/downloads/\">...more</a>\n{% else %}\n    {{release.shortDescription }}<a style=\"display: unset;\" class=\"nav-link pl-0 ml-0\" href=\"{{release.url}}\">...more</a>\n{% endif %}\n    <p class=\"small text-muted text-right font-italic mb-0\">{{release.release_date | date_to_string: \"ordinal\", \"US\" }}</p>\n</div>\n</div>\n{% assign i = i | plus:1 %}\n{% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building ActiveMQ-CPP on *nix\nDESCRIPTION: This shell command initiates the build process after the `configure` script has been successfully executed. It compiles the ActiveMQ-CPP source code into libraries and executables.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/building.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Java Example\nDESCRIPTION: This Java snippet demonstrates the instantiation of a `SomeJava` object.  It represents a basic example of Java code likely used in ActiveMQ examples or tutorials.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.2/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP\nDESCRIPTION: This snippet demonstrates the commands used to verify the integrity of downloaded files using PGP or GPG. It requires the KEYS file and the .asc signature file for the distribution. The commands import the KEYS file and then verify the signature file against the downloaded distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-09-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout CMS API 1.0\nDESCRIPTION: This command checks out the CMS API 1.0 source code from the Apache ActiveMQ SVN repository. It uses the `svn co` command to retrieve the code from the specified URL, allowing developers to access and modify the CMS API 1.0 source.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/cms-api-10-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/cms-1.0/\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet shows the instantiation of a `SomeJava` object. It assumes that the `SomeJava` class is defined and available in the current scope. This type of code might appear in an ActiveMQ component for internal object creation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.14.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Snippet\nDESCRIPTION: This XML snippet shows a simple XML structure. It is likely a configuration example for ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.7.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Java Object Initialization\nDESCRIPTION: This Java code snippet demonstrates the instantiation of a `SomeJava` object.  It assumes the existence of a `SomeJava` class in the current context. The example is for illustrative purposes and may not be functional without the corresponding class definition and imports.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.0.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Configuring Build with Static Libraries\nDESCRIPTION: This snippet shows how to configure the build process to create only static libraries. This is a workaround when shared library dependencies cannot be resolved, even after fixing the libstdc++.la file. The `--enable-shared=no` option passed to the configure script disables the creation of shared libraries.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/errors-from-libstdla-on-solaris-10-using-the-gnu-compiler.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./configure --enable-shared=no\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet provides a sample XML structure. It is a basic example and may represent configuration data or data structure within the ActiveMQ project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.26.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenWire Connector in Apollo XML\nDESCRIPTION: This XML snippet shows how to configure the OpenWire protocol within a connector in the Apollo `apollo.xml` configuration file. It demonstrates setting the `buffer_size` attribute. The connector is configured to bind to a TCP address and port.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <openwire attribute=\"value\"/>\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Cloning ActiveMQ CPP Repository with Git\nDESCRIPTION: This snippet demonstrates how to clone the ActiveMQ CPP repository from Github using the git command. It checks out the repository to your local machine, allowing you to work with the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/downloading-activemq-cpp.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit checkout https://github.com/apache/activemq-cpp.git\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet demonstrates the instantiation of a Java object named 'SomeJava'. It creates a new instance of the 'SomeJava' class and assigns it to the variable 's'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.12.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: HTML Download Links (Archived Release)\nDESCRIPTION: This HTML snippet provides download links for an archived release of ActiveMQ Artemis Console. Similar to the current release links, it includes links for binary and source distributions, SHA512 checksums, and GPG signatures. The primary difference is that these links point to the Apache archive rather than the dynamically updated closer.cgi.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/artemis_console_release.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\ntar.gz | [apache-artemis-console-{{include.release.version}}-bin.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.asc) |\nZIP | [apache-artemis-console-{{include.release.version}}-bin.zip](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console/{{include.release.version}}-bin.zip.asc) |\nSource tar.gz | [apache-artemis-console-{{include.release.version}}-source-release.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.asc) |\nSource ZIP | [apache-artemis-console-{{include.release.version}}-source-release.zip](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.asc)|\n```\n\n----------------------------------------\n\nTITLE: Disable stdout Logging in log4j.properties\nDESCRIPTION: This snippet demonstrates how to completely disable standard output (stdout) logging by removing the 'stdout' appender from the root logger configuration in the log4j.properties file. This can be useful to prevent logs from being displayed in the console.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-change-the-logging.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.rootLogger=INFO, out\n```\n\n----------------------------------------\n\nTITLE: Sorting and Reversing Release Data using Liquid\nDESCRIPTION: This snippet sorts a collection of release documents by 'release_date' in reverse order using the Liquid templating engine. It first assigns 'site.documents' to the 'releases' variable and then sorts them based on the specified field and direction.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/news.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign releases = site.documents %} {% assign releases = releases | sort: \"release_date\" | reverse %}\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet demonstrates a simple XML structure. It's likely used as a configuration example or demonstration of XML usage within ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.27.1/syntax.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Snippet\nDESCRIPTION: This snippet provides a basic XML structure example. It demonstrates a simple XML tag named 'xml' containing the text 'somexml'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.12.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgpk\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the public key, and the second command verifies the signature file against the downloaded binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-02.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Requesting JSON Representation with Accept Header\nDESCRIPTION: Shows how to request the JSON representation of data from the Apollo Management API by setting the HTTP Accept header to application/json.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -H \"Accept: application/json\" -u \"admin:password\" \\\n    http://localhost:61680/broker\n```\n\n----------------------------------------\n\nTITLE: Liquid: Link to Release Notes\nDESCRIPTION: This snippet creates a link to the release notes page for the current release. It uses the `page.release_notes` variable to construct the URL. The link text is \"release notes\".\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/nms_amqp_release.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n[release notes]({{page.release_notes}})\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java code snippet demonstrates the instantiation of a `SomeJava` object.  It shows basic Java syntax and object creation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.7.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet demonstrates a simple XML configuration. It shows a basic XML structure that might be used for configuring ActiveMQ components or services.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.4.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity Using PGP (pgpk)\nDESCRIPTION: These commands are used to verify the integrity of the downloaded ActiveMQ distribution using PGP. They involve importing the KEYS file and verifying the signature file associated with the downloaded binary distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-01.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Java Object Initialization\nDESCRIPTION: This Java code snippet demonstrates the instantiation of a 'SomeJava' object.  It assumes the existence of a class named 'SomeJava'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.26.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control Rules in ActiveMQ Apollo (XML)\nDESCRIPTION: This XML snippet shows how to configure access control rules in ActiveMQ Apollo using the `access_rule` element. The `allow` and `deny` attributes specify the principals that are allowed or denied access. The `action` attribute specifies the action that the rule applies to (e.g., send, receive).  Rules are evaluated in order, with the first matching rule determining the access decision.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<broker>\n  <access_rule deny=\"guest\" action=\"send\"/>\n  <access_rule allow=\"*\"    action=\"send\"/>\n  <access_rule allow=\"app1\" action=\"receive\"/>\n</broker>\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Download Page\nDESCRIPTION: This Markdown snippet shows the structure of a release download page created in the src/_releases/ directory. It includes Front Matter specifying the version, release notes link, release date, and title. The page also contains content displaying the release information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/release-guide.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n---\nversion: 5.16.1\nrelease_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311210&version=12347027\nrelease_date: Jan 20, 2021\ntitle: ActiveMQ Classic 5.16.1 Release \n---\nApache ActiveMQ Classic {{ page.version }} was released on {{ page.release_date }}. It fully supports JDK 9+ at runtime and includes several resolved [issues]({{ page.release_notes }}) and bug fixes.\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This snippet shows how to checkout the Apache NMS Stomp v1.5.0 release from the Apache Subversion repository. It allows developers to access the specific version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_stomp_releases/apachenmsstomp-v150.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.0/\n```\n\n----------------------------------------\n\nTITLE: Sending Message from URL via ActiveMQ CLI\nDESCRIPTION: This command sends a text message with content obtained from a URL using the ActiveMQ Classic command-line tool. The `--payloadUrl` parameter specifies the URL of the content and `--messageCount` specifies the number of messages to send.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/examples.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/activemq producer --payloadUrl http://activemq.apache.org/schema/core/activemq-core.xsd --messageCount 1\n```\n\n----------------------------------------\n\nTITLE: IOException Example\nDESCRIPTION: This code snippet illustrates an example of the IOException that occurs when a class cannot be found for a resource in ActiveMQ Classic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/ioexception-could-not-find-class-for-resource.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nReason:  java.io.exception : could not find class for resource: META-INF/services/org/apache/activemq/transport/tcp\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet demonstrates how to instantiate a Java object.  It creates an instance of the SomeJava class.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.5/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP\nDESCRIPTION: This command checks out the ActiveMQ-CPP version 3.2.0 from the Apache Subversion repository. This allows you to obtain a local copy of the source code for building or contributing to the project.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/320-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.0/\n```\n\n----------------------------------------\n\nTITLE: Embedding XML snippet\nDESCRIPTION: This snippet demonstrates embedding an XML code block within the content. It showcases how XML can be included for configuration or data examples.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.2.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Import Apollo Broker Store Bash\nDESCRIPTION: This command imports a message store from a TGZ archive into the first virtual host in the broker configuration. The broker configuration is loaded from the default location.  Warning:  The existing message store will be purged before importing.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n/var/lib/mybroker/bin/apollo-broker store-import myarchive.tgz\n```\n\n----------------------------------------\n\nTITLE: Requesting JSON Representation with .json Extension\nDESCRIPTION: Demonstrates how to request the JSON representation of data from the Apollo Management API by appending .json to the URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/management-api.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -u \"admin:password\" http://localhost:61680/broker.json\n```\n\n----------------------------------------\n\nTITLE: Java Class Instantiation\nDESCRIPTION: This Java code snippet demonstrates the instantiation of a class named 'SomeJava'. It creates a new object 's' of the 'SomeJava' class. It assumes that the 'SomeJava' class is already defined and accessible in the current context.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.4/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This code snippet demonstrates how to instantiate an object of the SomeJava class in Java.  It assumes that the SomeJava class is defined elsewhere.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.1.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: PGP Signature Verification using gpg\nDESCRIPTION: These bash commands illustrate how to verify the PGP signature of a downloaded file using the `gpg` tool. First, the KEYS file is imported, followed by the verification of the signature file against the downloaded binary.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-01-00.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: NoClassDefFoundError Exception\nDESCRIPTION: This code snippet shows the java.lang.NoClassDefFoundError exception that occurs when the Spring library is missing from the classpath. It indicates that the org.springframework.core.io.Resource class cannot be found during runtime.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/noclassdeffounderror-orgspringframeworkcoreioresource.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njava.lang.NoClassDefFoundError - org/springframework/core/io/Resource\n```\n\n----------------------------------------\n\nTITLE: Run Jetty with Hawtio Authentication Disabled\nDESCRIPTION: This shell command starts the Jetty web server with Hawtio authentication disabled, allowing connection to the Artemis broker to handle authentication. The command assumes `$JETTY_HOME` is set to the Jetty installation directory.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis-console/documentation/deploying.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -Dhawtio.authenticationEnabled=false -jar $JETTY_HOME/start.jar\n```\n\n----------------------------------------\n\nTITLE: Cached Object Encoding Structure (Enabled)\nDESCRIPTION: This snippet depicts the structure of cached-object encoding when the CacheEnabled option is enabled. It includes a 'new-value' byte, a 'key' short, and 'command-specific-fields'. The 'new-value' indicates whether the value is new to the cache.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[=If CacheEnabled option is enabled=====================]\n[                       [=If new-value is 1===========] ]\n[ +-----------+-------+ [ +-------------------------+ ] ]\n[ | new-value | key   | [ | command-specific-fields | ] ]\n[ +-----------+-------+ [ +-------------------------+ ] ]\n[ | byte      | short | [ | nested-object           | ] ]\n[ +-----------+-------+ [=============================] ]\n[=====================================================]\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ CMS 3.2.2 from SVN\nDESCRIPTION: This command checks out the ActiveMQ CMS 3.2.2 source code from the Apache SVN repository.  It requires an SVN client to be installed and configured.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/322-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.2/\n```\n\n----------------------------------------\n\nTITLE: Git Tag Checkout\nDESCRIPTION: This snippet shows how to clone the ActiveMQ-CPP repository and checkout the 3.9.5 tag using Git. It requires Git to be installed. The first line clones the repository, the second navigates into the cloned directory, and the third checks out the specified tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/395-release.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.9.5\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This XML snippet demonstrates a basic XML structure. It is used to showcase XML configuration or data representation within the ActiveMQ documentation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.2/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: N Sized Byte Array Type Encoding in OpenWire\nDESCRIPTION: This snippet describes the encoding of fixed-size byte arrays in OpenWire. These byte arrays cannot be null and must have a length of N bytes. The encoding simply consists of the N bytes of data.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+-----------+\n| data      |\n+-----------+\n| N octects |\n+-----------+\n```\n\n----------------------------------------\n\nTITLE: Log4j No Appenders Warning\nDESCRIPTION: This code snippet shows the Log4j warning message that indicates that no appenders are configured for the logger. The resolution involves properly initializing Log4j with a configuration file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/log4j-warn-no-appenders-could-be-found-for-logger.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlog4j:WARN No appenders could be found for logger\n(org.activemq.transport.tcp.TcpTransportChannel).\nlog4j:WARN Please initialize the log4j system properly.\n```\n\n----------------------------------------\n\nTITLE: Committer Onboarding Template\nDESCRIPTION: This template provides guidance to new committers on how to set up their environment and access resources. It includes links to documentation, mailing lists, and Git repository information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nTo: [private@acctivemq.apache.org](mailto:private@acctivemq.apache.org), <NEW COMMITTER>  \nSubject: [committer]: What to do now that you're a committer?\n\n<COMMITTER>, the ASF Infrastructure has set up your user account as the '<ASF USER ID>'.\n\nTo learn more about how the ASF works, please visit the following URL and read the items in the 'Committers and Contributors' section:\n\n[https://www.apache.org/dev/#committers](https://www.apache.org/dev/#committers)\n\nIt is especially important to read through the New Committers Guide at the following URL:\n\n[https://www.apache.org/dev/new-committers-guide.html](https://www.apache.org/dev/new-committers-guide.html)\n\nPlease ensure that you subscribed to the Apache ActiveMQ Developers mailing list [dev@activemq.apache.org](mailto:dev@activemq.apache.org). We also recommend subscribing to the users@ and commits@ mailing lists at [users@activemq.apache.org](mailto:users@activemq.apache.org) and [commits@activemq.apache.org](mailto:commits@activemq.apache.org). Please see the following page for more info about the mailing lists:\n\n[http://activemq.apache.orgCommunity/mailing-lists.md](http://activemq.apache.orgCommunity/mailing-lists.md)  \n  \nTo push commits, ensure that you use HTTPS or SSH in your git remotes, or if you've been pulling from a mirror like Github, you'll need to add a remote such as:\n\n  \n$ git remote add apache [https://git-wip-us.apache.org/repos/asf/activemq.git](https://git-wip-us.apache.org/repos/asf/activemq.git)\n\n  \nIf you have any questions please ask on the dev@activemq list.\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for ActiveMQ Classic\nDESCRIPTION: This XML snippet shows the Maven dependency configuration required to include ActiveMQ Classic version 5.3.1 in a Maven project.  It specifies the groupId, artifactId, and version for the activemq-core dependency.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-01.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-core</artifactId>\n  <version>5.3.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet demonstrates a basic XML example. It showcases a simple XML structure within the documentation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.1/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Java Object Initialization\nDESCRIPTION: This code snippet demonstrates the initialization of a Java object. It creates an instance of the SomeJava class and assigns it to the variable 's'. This is a fundamental operation in Java programming.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.1.0/syntax.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n Somejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.4.1\nDESCRIPTION: This snippet shows how to checkout the ActiveMQ-CPP version 3.4.1 source code from the Apache Subversion repository. It provides the complete SVN command to retrieve the specific tag.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/341-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.1/\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 2.1.2\nDESCRIPTION: This snippet provides the command to checkout the ActiveMQ CMS 2.1.2 source code from the Apache Subversion repository. It allows developers to obtain a local copy of the source code for inspection, modification, or contribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/212-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1.2/\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Classic Broker Startup Logs Showing IOException\nDESCRIPTION: This code snippet shows the logs generated when starting an ActiveMQ Classic broker that results in an IOException due to failure to create the Derby database. The exception details indicate that the JDBC driver could not write to the persistent file area. This usually happens because the broker doesn't have permission to create the directory or the default directory doesn't exist.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/javaioioexception-failed-to-create-database-derbydb-see-the-next-exception-for-details.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nJun 19, 2006 10:35:27 PM org.apache.activemq.broker.BrokerService getBroker\nINFO: ActiveMQ Classic 4.0 JMS Message Broker (localhost) is starting\nJun 19, 2006 10:35:27 PM org.apache.activemq.broker.BrokerService getBroker\nINFO: For help or more information please see: http://incubator.apache.org/activemq/\njava.io.IOException: Failed to create database 'derbydb', see the next exception for details.\n       at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:42)\n       at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58)\n       at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.createAdapter(JDBCPersistenceAdapter.java:229)\n       at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.getAdapter(JDBCPersistenceAdapter.java:213)\n       at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.start(JDBCPersistenceAdapter.java:139)\n       at org.apache.activemq.store.journal.JournalPersistenceAdapter.start(JournalPersistenceAdapter.java:215)\n       at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:930)\n       at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:888)\n       at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:458)\n       at org.apache.activemq.broker.BrokerService.addConnector(BrokerService.java:143)\n       at org.apache.activemq.broker.BrokerService.addConnector(BrokerService.java:133)\n       at com.ic.ntn.message.HelloWorld$HelloWorldBroker.run(HelloWorld.java:92)\n       at java.lang.Thread.run(Thread.java:595)\nCaused by: SQL Exception: Failed to create database 'derbydb', see the next exception for details.\n       at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)\n       at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)\n       at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\n       at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source)\n       at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(Unknown Source)\n       at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\n       at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\n       at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Unknown Source)\n       at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\n       at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source)\n       at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source)\n       at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:54)\n       ... 11 more\n```\n\n----------------------------------------\n\nTITLE: Jekyll: Sorting Documents by Release Date\nDESCRIPTION: This snippet uses Jekyll's `sort` filter to order the site's documents by their `release_date` property in reverse chronological order. It assumes the `site.documents` variable is already populated with the documents to be displayed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/news/index.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% assign documents = site.documents %}\n{% assign documents = documents | sort: \"release_date\" | reverse %}\n```\n\n----------------------------------------\n\nTITLE: Stomp Message Handling with Transactions in Java\nDESCRIPTION: This Java code snippet demonstrates how to send messages to a queue, subscribe to it with a prefetch size of 1, and handle acknowledgements within transactions. It shows that aborting a transaction requires re-acknowledgement in a subsequent transaction to receive the next message. The snippet uses the StompConnection class from ActiveMQ.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-unack-the-message-with-stomp.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nStompConnection connection = new StompConnection();\nconnection.open(\"localhost\", 61613);\n\t\t\nconnection.connect(\"system\", \"manager\");\n\t\t\nconnection.send(\"/queue/test\", \"message 1\");\nconnection.send(\"/queue/test\", \"message 2\");\nconnection.send(\"/queue/test\", \"message 3\");\n\t\t\nHashMap<String, String> headers = new HashMap<String, String>();\nheaders.put(\"activemq.prefetchSize\", \"1\");\nconnection.subscribe(\"/queue/test\", \"client\", headers);\n\t\t\nconnection.begin(\"tx1\");\nStompFrame frame = connection.receive();\nSystem.out.println(frame.getBody());\nconnection.ack(frame, \"tx1\");\nconnection.abort(\"tx1\");\n\t\t\nconnection.begin(\"tx2\");\nconnection.ack(frame, \"tx2\");        //sending the ack again\nframe = connection.receive();\nSystem.out.println(frame.getBody());\nconnection.ack(frame, \"tx2\");\nconnection.commit(\"tx2\");\n\t\t\nconnection.begin(\"tx3\");\nframe = connection.receive();\nSystem.out.println(frame.getBody());\nconnection.ack(frame, \"tx3\");\nconnection.commit(\"tx3\");\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command allows users to checkout the Apache.NMS.ActiveMQ version 1.5.0 from the Apache SVN repository.  It retrieves the code located at the specified URL. No specific dependencies are needed besides having an SVN client installed.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v150.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.0/\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer for Advisory Topic in ActiveMQ-CPP\nDESCRIPTION: This code snippet demonstrates how to create a CMS MessageConsumer to listen for advisory messages on a previously created advisory topic. It sets a message listener to asynchronously process incoming advisory messages.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstd::auto_ptr<cms::MessageConsumer> consumer;\nconsumer.reset( session->createConsumer( advisories.get() ) );\nconsumer->setMessageListener( this );\n```\n\n----------------------------------------\n\nTITLE: Checking ActiveMQ Port (Unix)\nDESCRIPTION: This command uses `netstat` to check if ActiveMQ Classic's default port (61616) is open on Unix.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnetstat -an|grep 61616\n```\n\n----------------------------------------\n\nTITLE: Link Bootstrap\nDESCRIPTION: Links the Bootstrap object file with the Java shared libraries and GCJ runtime libraries to create the final executable. This step creates the executable that runs the ActiveMQ Classic application.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/compile-activemq-with-gcj.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngcj -o Bootstrap Bootstrap.o -L /opt/app -lgcj -lstdc++ activeio-1.1.jar.so activemq-core-3.2.jar.so\n        commons-logging-1.0.3.jar.so concurrent-1.3.4.jar.so geronimo-spec-jms-1.1-rc4.jar.so\n        geronimo-spec-j2ee-management-1.0-rc4.jar.so geronimo-spec-j2ee-jacc-1.0-rc4.jar.so\n        geronimo-spec-jta-1.0.1B-rc4.jar.so log4j-1.2.8.jar.so MQAdapter.so\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS ConnectionFactory with URI Authentication in C++\nDESCRIPTION: This code snippet illustrates creating a CMS ConnectionFactory with login data embedded in the URI. The username and password are read from system environment variables.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/overview.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstd::auto_ptr<cms::ConnectionFactory> connectionFactory(\n    cms::ConnectionFactory::createCMSConnectionFactory( \"tcp://127.0.0.1:61616?username=${USERNAME}&password=${PASSWORD}\" ) );\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet showcases a basic XML structure. It demonstrates a simple XML tag structure used for data representation.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.23.1/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet demonstrates a simple XML example. It shows a basic XML structure and content.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.5/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures using pgpk\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded ActiveMQ files using PGP signatures with the pgpk command-line tool. It downloads the KEYS file and the asc signature file for the distribution and then verifies the signature. Replace <version> with the actual ActiveMQ version.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-01.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Cached Object Encoding Structure (Disabled)\nDESCRIPTION: This snippet shows the structure of cached-object encoding when the CacheEnabled option is disabled. In this case, only 'command-specific-fields' are included, following the nested-object structure.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[=If CacheEnabled option is disabled =]\n[ +-------------------------+         ]\n[ | command-specific-fields |         ]\n[ +-------------------------+         ]\n[ | nested-object           |         ]\n[ +-------------------------+         ]\n[=====================================]\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet demonstrates the instantiation of a `SomeJava` object in Java. It requires the `SomeJava` class to be defined elsewhere.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.3.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Encrypting Passwords using Apollo Command Line (Shell)\nDESCRIPTION: These shell commands demonstrate how to encrypt passwords using the `apollo encrypt` command. The `APOLLO_ENCRYPTION_PASSWORD` environment variable must be set before running the command.  The encrypted passwords are then stored in the `etc/apollo.xml.properties` file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ export APOLLO_ENCRYPTION_PASSWORD='keepmesafe'\n$ apollo encrypt open\nENC(6r7HKCib0H8S+OuSfV+muQ==)\n$ apollo encrypt sesame\nENC(FP+H2FIg++sSaOxg/ISknw==)\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.1.0\nDESCRIPTION: This snippet provides the SVN command to checkout the ActiveMQ-CPP 3.1.0 source code from the Apache repository. It allows developers to obtain a local copy of the code for building, modification, or contribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/310-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.0/\n```\n\n----------------------------------------\n\nTITLE: Jekyll: Reversing and Filtering NMS API Releases\nDESCRIPTION: This Jekyll code snippet iterates through NMS API releases in reverse order, filtering out current releases and displaying information for past releases. It utilizes Jekyll's templating language to assign variables, loop through releases, check for membership in a list of current releases, and include a partial for download links.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/nms-api-past-releases.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% assign reversed_releases = site[\"nms_api_releases\"] | reverse %}\n{% assign current_releases = \"\" | split: ',' %}\n\n{% for current_release_prefix in site.data.current_releases[\"nms_api\"] %}\n    {% for release in reversed_releases %}\n        {% if release.version contains current_release_prefix %}\n            {% assign current_releases = current_releases | push: release.version %}\n            {% break %}\n        {% endif %}\n    {% endfor %}\n{% endfor %}\n\n{% for release in reversed_releases %}\n    {% unless current_releases contains release.version %}\n#### NMS API {{release.version}} ({{release.release_date | date_to_string: \"ordinal\", \"US\"}})\n{{ release.shortDescription }}\n\n{% include nms_api_download_links.md release=release is_current_release=false %}\n\n###### Changelog\n\nFor a detailed view of new features and bug fixes, see the [Release Notes]({{ release.release_notes }})\n\n<br/>\n    {% endunless %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Broker Service - Broker Injection Scala\nDESCRIPTION: This Scala snippet shows how to declare a `broker` field within your service class, allowing Apollo to inject a reference to the running `Broker` instance.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nvar broker:Broker = null\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet shows an example of XML code.  It demonstrates the syntax for including XML within the website content. No specific dependencies are required.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.10.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 3.3.0\nDESCRIPTION: This command allows you to checkout the ActiveMQ CMS 3.3.0 source code from the Apache Subversion repository. It retrieves the source code from the specified SVN URL.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/330-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.3.0/\n```\n\n----------------------------------------\n\nTITLE: Byte Array Type Encoding in OpenWire\nDESCRIPTION: This code describes how byte arrays are encoded in OpenWire. A null byte array is represented by a single '0' byte. Non-null byte arrays are prefixed with a not-null byte (1) and an integer indicating the size of the byte array, followed by the data itself.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-version-2-specification.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n             [=If not-null is 1========]\n+----------+ [ +------+--------------+ ]\n| not-null | [ | size | data         | ]\n+----------+ [ +------+--------------+ ]\n| byte     | [ | int  | size octects | ]\n+----------+ [ +------+--------------+ ]\n             [=========================]\n```\n\n----------------------------------------\n\nTITLE: Java Example\nDESCRIPTION: This snippet provides an example of Java code. It showcases how to instantiate a `SomeJava` object. It assumes a class named `SomeJava` is available in the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.10.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet demonstrates a simple XML structure.  It showcases a basic XML element named 'xml' containing the text 'somexml'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.4/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Creating Advisory Topic in ActiveMQ-CPP\nDESCRIPTION: This code snippet demonstrates how to create a CMS Topic object for subscribing to ActiveMQ advisory messages related to producers on a specific topic. It creates a topic named 'ActiveMQ.Advisory.Producer.Topic.TOPIC.FOO' using the CMS Session.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/tutorials/handling-advisory-messages.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::auto_ptr<cms::Topic> advisories( session->createTopic(\n    \"ActiveMQ.Advisory.Producer.Topic.TOPIC.FOO\" ) );\n```\n\n----------------------------------------\n\nTITLE: Fanout Transport Multicast Example\nDESCRIPTION: Example URI showing how to configure the Fanout transport using a multicast discovery URI.  By default the producer using this configuration will wait until connections to 2 brokers have been established before proceeding.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/fanout-transport-reference.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\nfanout:(multicast://default)\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for ActiveMQ CMS 2.1.1\nDESCRIPTION: This snippet provides the SVN command to checkout the ActiveMQ CMS 2.1.1 source code from the Apache repository. It allows developers to obtain the specific version of the code for inspection, modification, or contribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/211-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1.1/\n```\n\n----------------------------------------\n\nTITLE: Committer Onboarding Email Template\nDESCRIPTION: This template is used to onboard a new committer. It includes information about the ASF, the New Committer Guide, mailing lists, and git repository access.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nTo: [private@acctivemq.apache.org](mailto:private@acctivemq.apache.org), <NEW COMMITTER>  \nSubject: [committer]: What to do now that you're a committer?\n\n<COMMITTER>, the ASF Infrastructure has set up your user account as the '<ASF USER ID>'.\n\nTo learn more about how the ASF works, please visit the following URL and read the items in the 'Committers and Contributors' section:\n\n[https://www.apache.org/dev/#committers](https://www.apache.org/dev/#committers)\n\nIt is especially important to read through the New Committers Guide at the following URL:\n\n[https://www.apache.org/dev/new-committers-guide.html](https://www.apache.org/dev/new-committers-guide.html)\n\nPlease ensure that you subscribed to the Apache ActiveMQ Developers mailing list [dev@activemq.apache.org](mailto:dev@activemq.apache.org). We also recommend subscribing to the users@ and commits@ mailing lists at [users@activemq.apache.org](mailto:users@activemq.apache.org) and [commits@activemq.apache.org](mailto:commits@activemq.apache.org). Please see the following page for more info about the mailing lists:\n\n[http://activemq.apache.orgCommunity/mailing-lists.md](http://activemq.apache.orgCommunity/mailing-lists.md)  \n  \nTo push commits, ensure that you use HTTPS or SSH in your git remotes, or if you've been pulling from a mirror like Github, you'll need to add a remote such as:\n\n  \n$ git remote add apache [https://git-wip-us.apache.org/repos/asf/activemq.git](https://git-wip-us.apache.org/repos/asf/activemq.git)\n\n  \nIf you have any questions please ask on the dev@activemq list.\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity Using PGP (pgp)\nDESCRIPTION: These commands are used to verify the integrity of the downloaded ActiveMQ distribution using PGP. They involve importing the KEYS file and verifying the signature file associated with the downloaded binary distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-05-01.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures and the `pgp` tool. The first command imports the public keys from the KEYS file. The second command verifies the signature of the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-13-01.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenSSL with Autoconf\nDESCRIPTION: This snippet demonstrates how to disable OpenSSL support during the configure process when building from source. The `--disable-ssl` option is passed to the `configure` script to prevent the inclusion of OpenSSL support in the build.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/how-do-i-prevent-autoconf-from-enabling-openssl-support.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n./configure --disable-ssl\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP or GPG. They involve importing the KEYS file and verifying the signature file against the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-00.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Creating Queue Browser - ActiveMQ\nDESCRIPTION: A queue browser is created to examine messages in a queue without consuming them. This allows for inspection of messages for debugging or monitoring purposes. It requires casting the destination to a Queue object.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/openwire-manual.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nQueueBrowser browser = session.createBrowser((Queue) destination);\n```\n\n----------------------------------------\n\nTITLE: Jekyll: Iterating and Displaying Documents\nDESCRIPTION: This snippet iterates through the sorted documents and displays each document's title, release date, and short description. It also includes a conditional block to create a 'Read More' link that varies depending on which collection the document belongs to.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/news/index.md#_snippet_1\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% for document in documents %}\n{% if document.release_date == nil or document.release_date == \"\" %}\n{% continue %}\n{% endif %}\n### {{ document.title }} \n<span class=\"text-secondary\"> {{ document.release_date | date_to_string: \"ordinal\", \"US\"}}</span>\n\n{{document.shortDescription}}\n\n{% if document.collection contains \"artemis_console\" %}\n[Read More]({{site.baseurl}}/components/artemis-console/download/)\n{% elsif document.collection contains \"artemis\" %}\n[Read More]({{site.baseurl}}/components/artemis/download/)\n{% elsif document.collection contains \"nms_api\" %}\n[Read More]({{site.baseurl}}/components/nms/nms-api-downloads)\n{% elsif document.collection contains \"nms_amqp\" %}\n[Read More]({{site.baseurl}}/components/nms/providers/amqp/downloads/)\n{% elsif document.collection contains \"classic\" %}\n[Read More]({{site.baseurl}}/components/classic/download/)\n{% else %}\n[Read More]({{document.url}})\n{% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command is used to check out the ActiveMQ Classic 5.6.0 source code from the Apache Subversion (SVN) repository. It downloads the specified tag to the local machine.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-06-00.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsvn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.6.0\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout Apache.NMS.ActiveMQ\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ project from the Apache Subversion repository at the specified tag (version 1.5.1). This allows developers to obtain a specific version of the source code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v151.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.1/\n```\n\n----------------------------------------\n\nTITLE: Setting Docs Version with Liquid\nDESCRIPTION: This snippet assigns the documentation version based on the `include.release.docs_version` variable. If `include.latest_docs` is true, it sets `docs_version` to 'latest'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_includes/artemis_release.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign docs_version = include.release.docs_version %}\n{% assign java_version = include.release.java_version %}\n{% if include.latest_docs %}\n  {% assign docs_version = \"latest\" %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Topics\nDESCRIPTION: This snippet demonstrates how to configure virtual topics in ActiveMQ using XML. It defines a virtual topic named \">\" (matching all topics) and specifies that consumer queues should be named `VirtualTopicConsumers.*.`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/providers/activemq/advanced-features/virtual-destinations.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<destinationInterceptors>\n  <virtualDestinationInterceptor>\n    <virtualDestinations>\n      <virtualTopic name=\">\" prefix=\"VirtualTopicConsumers.*.\" selectorAware=\"false\"/>\n    </virtualDestinations>\n  </virtualDestinationInterceptor>\n</destinationInterceptors>\n```\n\n----------------------------------------\n\nTITLE: Tuning MQTT Defaults using the mqtt Configuration Element\nDESCRIPTION: This snippet illustrates how to tune the MQTT defaults using the `mqtt` configuration element within a connector. It configures the maximum message length to 1000 bytes. Other attributes like `protocol_filters` and `die_delay` can also be configured within this element.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/mqtt-manual.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"tcp\" bind=\"tcp://0.0.0.0:61613\">\n  <mqtt max_message_length=\"1000\" />\n</connector>\n```\n\n----------------------------------------\n\nTITLE: Start Apollo Broker Service Bash\nDESCRIPTION: Command to start the ActiveMQ Apollo broker service on Unix-like systems.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service start\n```\n\n----------------------------------------\n\nTITLE: Signing distribution files with GPG\nDESCRIPTION: These commands use GPG (GNU Privacy Guard) to create detached signatures for distribution files. The --armor option creates ASCII-armored signatures, making them suitable for distribution alongside the files. The signatures are output to .asc files.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/cms/developers/creating-distributions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngpg --armor --output foo.tar.gz.asc --detach-sig foo.tar.gz\ngpg --armor --output foo.zip.asc --detach-sig foo.zip\n```\n\n----------------------------------------\n\nTITLE: Install Vendor Libraries using NAnt\nDESCRIPTION: Navigates to the NUnit vendor library directory and runs the 'install' target in the NAnt build script to install the libraries into the local NAnt repository. Requires nant-0.91 or higher.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/building.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd ./activemq-dotnet/vendor/NUnit/2.5.8\nnant install\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signature with pgpk\nDESCRIPTION: This snippet demonstrates how to verify the PGP signature of an Apache ActiveMQ distribution using the `pgpk` command. It imports the KEYS file and then verifies the signature file against the downloaded distribution.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/verify-downloads.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Committer Invitation Template\nDESCRIPTION: This template is used to invite a candidate to become an Apache ActiveMQ committer. It outlines the privileges and responsibilities of a committer, and provides links to resources such as the new-committers-guide and ICLA information.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nTo: <INVITEE EMAIL>  \nCc: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: Invitation to become Apache Active committer\n\nHello <INVITEE>,\n\nThe Apache ActiveMQ Project Management Committee (PMC) hereby offers you committer privileges to the project. These privileges are offered on the understanding that you'll use them reasonably and with common sense. We like to work on trust rather than unnecessary constraints.\n\nBeing a committer enables you to more easily make changes without needing to go through the patch submission process. Although you will be granted commit access to project repositories, you will be expected to adhere to project best practices when committing. The following URL some good resources regarding expectations and processes:\n\n[http://www.apache.org/dev/new-committers-guide.html](http://www.apache.org/dev/new-committers-guide.html)\n\nThis is a personal invitation for you to accept or decline in private. Please reply to the [private@activemq.apache.org](mailto:private@activemq.apache.org) address only.\n\nIf you accept the invitation, the next step is to register an Individual Contributor License Agreement (ICLA) with the Apache Software Foundation if you have not already. Details of the ICLA and the forma can be found at the following URL:\n\n[http://www.apache.org/licenses/#clas](http://www.apache.org/licenses/#clas)\n\nThe form provides instructions for its completion and submittal to the Secretary of the ASF.\n\nWhen you submit the completed ICLA, please request to notify the Apache ActiveMQ project upon official receipt.Once your ICLA has been acknowledged by the Secretary, you will need to choose a unique ASF ID. You can check to see if your preferred id is already taken by browsing the following list of ASF committers:\n\n[http://people.apache.org/committer-index.html](http://people.apache.org/committer-index.html)\n\nWhen your ICLA is recognized by the Secretary, you will receive a follow-up message with the next steps for establishing you as a committer.\n\nWe look forward to your response!\n```\n\n----------------------------------------\n\nTITLE: PMC Vote Template\nDESCRIPTION: This template is used to initiate a formal vote on offering PMC membership to a candidate. It references previous discussions and requires at least three binding +1 votes with no vetoes to pass.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/pmc-templates.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org) \nSubject: [VOTE] Offer Apache ActiveMQ PMC Membership to <CANDIDATE>\n\nAfter positive discussion considering <CANDIDATE>’s contributions as a committer, I would like to initiate a formal vote.\n\n<INSERT EVIDENCE HERE>\n\nThis vote will follow the ASF process for committer votes and consensus approval (at least three binding +1 votes and no vetoes)\n\nThe vote will be open for 72 hours.\n\n[ ] +1 Accept <CANDIDATE> as a PMC member of Apache ActiveMQ  \n[ ] +0  \n[ ] -1 Do not accept at this time because...\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Prefetch in ActiveMQConnectionFactory (ClassLoaderSPI)\nDESCRIPTION: This code snippet demonstrates how to set the queue prefetch value for `ActiveMQConnectionFactory` using `ActiveMQClassLoaderSPI`. It is equivalent to calling `factory.getPrefetchPolicy().setQueuePrefetch(1)`.  It requires the existence of getter and setter methods for `PrefetchPolicy` and `queuePrefetch`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/activemq-classic-performance-module-users-manual.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nfactory.prefetchPolicy.queuePrefetch=1\n```\n\n----------------------------------------\n\nTITLE: PMC Invite Email Template\nDESCRIPTION: This template is used for sending a formal invitation to a candidate to join the ActiveMQ PMC. It includes the subject, recipient (candidate's email), a copy to the private PMC list, and information about PMC membership.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nTo: <INVITEE EMAIL>  \nCc: [private@activemq.apache.org](mailto:private@activemq.apache.org)  \nSubject: Invitation to join the Apache ActiveMQ Project Management Committee\n\n<INVITEE>,  \nIn recognition of your continued contributions to the project, the Apache ActiveMQ PMC has voted to offer you membership to the PMC. I am writing on behalf of the PMC to give you the opportunity to either accept or reject this offer by replying to [private@activemq.apache.org](mailto:private@activemq.apache.org).\n\nIn making your decision, please see the following URL for more information on PMCs:\n\n[https://www.apache.org/dev/pmc.html](https://www.apache.org/dev/pmc.html)\n\nIf you have questions before making a decision, please let us know.\n```\n\n----------------------------------------\n\nTITLE: Extracting ActiveMQ Classic Binary on Unix\nDESCRIPTION: This command sequence changes the directory to the installation directory and extracts the ActiveMQ Classic binary distribution from the zipped tarball.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd [activemq_install_dir]\ntar zxvf activemq-x.x.x-bin.tar.gz\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ-CPP 3.7.1\nDESCRIPTION: This command checks out the ActiveMQ-CPP version 3.7.1 source code from the Apache Subversion repository. It provides a way to obtain the specific version of the codebase for building or examining the source.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/371-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.7.1/\n```\n\n----------------------------------------\n\nTITLE: SVN Tag Checkout\nDESCRIPTION: This command checks out the Apache.NMS.ActiveMQ source code from the Apache Subversion repository for version 1.2.0. It allows developers to access and work with a specific version of the codebase.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_nms_activemq_releases/apachenmsactivemq-v120.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.2.0/\n```\n\n----------------------------------------\n\nTITLE: Committer Vote Result Email Template\nDESCRIPTION: This template is used to announce the results of a committer vote. It includes the subject, recipient (private PMC list), the number of +1s, 0s, and -1s, and the final result (pass/fail).\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [RESULT][VOTE] Offer <CANDIDATE> to become an ActiveMQ committer.\n\nThis vote has been open for <X> days and is now closed with the following results:\n\n* Number of +1s  \n* Number of 0s  \n* Number of -1s\n\nThe vote <passes|does not pass>.\n```\n\n----------------------------------------\n\nTITLE: Committer Discussion Email Template\nDESCRIPTION: This template is used for initiating a discussion about inviting a candidate to become an ActiveMQ committer. It includes fields for the subject, recipient (private PMC list), and evidence of the candidate's contributions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/pmc-templates.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nTo: [private@activemq.apache.org](mailto:private@activemq.apache.org)\nSubject: [DISCUSS] Invite <CANDIDATE> to become an ActiveMQ committer\n\nConsidering <CANDIDATE>’s contributions to the ActiveMQ project...<INSERT EVIDENCE HERE>\n\nBased on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.\n\nPlease remember that this is not a vote for this person to become a committer, at this point it is only a discussion.\n```\n\n----------------------------------------\n\nTITLE: Liquid: Include Verify Download Instructions\nDESCRIPTION: This snippet includes the `verify_download.md` partial, presumably to display instructions on how to verify the integrity of the downloaded files. This partial likely contains information about checksums or signatures.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/nms_amqp_release.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% include verify_download.md %}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven SNAPSHOT Repository for ActiveMQ Classic\nDESCRIPTION: This XML snippet defines the Apache snapshot repository in Maven's pom.xml. It allows the project to access and use SNAPSHOT versions of artifacts. The repository URL is configured to point to the Apache snapshot repository, with releases disabled and snapshots enabled.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/maven-snapshot-repository-in-your-pom.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<repository>\n  <id>apache.snapshots</id>\n  <name>Apache Development Snapshot Repository</name>\n  <url>https://repository.apache.org/content/repositories/snapshots/</url>\n  <releases>\n    <enabled>false</enabled>\n  </releases>\n  <snapshots>\n    <enabled>true</enabled>\n  </snapshots>\n</repository>\n```\n\n----------------------------------------\n\nTITLE: Extracting Binary Developer Snapshot (Unix)\nDESCRIPTION: This command extracts the files from a binary developer snapshot archive (tar.gz) into a specified directory. It uses the `tar` command with options to decompress and extract the archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nFor a binary developer's snapshot: tar zxvf activemq-x.x.x.tar.gz For a source developer's snapshot: tar zxvf activemq-x.x.x-src.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Checking ActiveMQ Port (Windows)\nDESCRIPTION: This command uses `netstat` to check if ActiveMQ Classic's default port (61616) is open on Windows.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/getting-started-3x.md#_snippet_15\n\nLANGUAGE: batch\nCODE:\n```\nnetstat -an|find &amp;quot;61616&amp;quot;\n```\n\n----------------------------------------\n\nTITLE: Run NMS Unit Tests with NAnt\nDESCRIPTION: Runs the unit tests for a specific provider module using NAnt. It assumes that an ActiveMQ broker is running on tcp://localhost:61616. The command is executed from the 'trunk' folder of the provider module.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/nms/building.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnant test\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity with PGP\nDESCRIPTION: These commands demonstrate how to verify the integrity of downloaded ActiveMQ files using PGP or GPG. It involves downloading the KEYS file and the .asc signature file, then using either pgpk/pgpv, pgp, or gpg commands to verify the signature against the downloaded file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-08.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import KEYS\n$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using PGP with pgpk\nDESCRIPTION: This snippet shows how to verify the integrity of downloaded files using PGP with the pgpk command. It first imports the KEYS file and then verifies the signature file against the downloaded archive. Replace <version> with the actual ActiveMQ version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-14-03.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java snippet demonstrates the instantiation of a `SomeJava` object. It showcases how to create a new instance of a class in Java, and assigns it to variable `s`.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.23.1/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Initializing SomeJava Class\nDESCRIPTION: This snippet shows how to initialize an instance of a class named 'SomeJava' in Java. It assumes the existence of a class named 'SomeJava'.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.0.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n Somejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Creating a Java object\nDESCRIPTION: This snippet demonstrates creating an object in Java.  It shows a simple instantiation of a `SomeJava` class. It requires the existence of a `SomeJava` class in the classpath.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.4.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Verifying Download Integrity using pgpk\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of a downloaded ActiveMQ binary distribution using the `pgpk` tool. The first command imports the public keys from the KEYS file. The second command verifies the downloaded archive using its corresponding `.asc` signature file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-15-02.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: XML Sample\nDESCRIPTION: This snippet shows a sample XML structure. It's a simple XML element with a tag name 'xml' containing the text 'somexml'. It demonstrates basic XML syntax.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.6/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example\nDESCRIPTION: This snippet shows a basic XML configuration snippet, likely used for configuring ActiveMQ or related components. It demonstrates a placeholder for XML configuration.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.15.0/syntax.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Verifying Downloads with PGP using pgpk\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. The first command imports the public key, and the second verifies the signature of the downloaded file. These commands require the `pgpk` utility.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-01.md#_snippet_0\n\nLANGUAGE: PGP\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures. It requires downloading the KEYS file and the asc signature file. pgp is used to import the keys and verify the signature.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-06-00.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures (PGP)\nDESCRIPTION: These commands are used to verify the integrity of downloaded files using PGP signatures.  It involves adding the KEYS file and then verifying the signature of the downloaded archive. Replace `<version>` with the appropriate version number.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-03-00.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures with pgp (Shell)\nDESCRIPTION: These commands are used to verify the PGP signature of the downloaded ActiveMQ distribution using the `pgp` command. It first imports the KEYS file and then verifies the signature of the specified archive file.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-10-02.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pgp -ka KEYS\n$ pgp apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Verify PGP Signature Using pgpk\nDESCRIPTION: These shell commands demonstrate how to verify the integrity of downloaded ActiveMQ Classic files using PGP with the `pgpk` command. It imports the KEYS and verifies the signature file against the downloaded archive.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-02-00.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pgpk -a KEYS\n$ pgpv apache-activemq-<version>-bin.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Checkout ActiveMQ CMS 3.9.4 using Git\nDESCRIPTION: This code snippet provides instructions on how to clone the ActiveMQ-CPP repository using Git, navigate into the directory, and then checkout the specific tag for version 3.9.4. This allows users to obtain the exact source code corresponding to the 3.9.4 release.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/394-release.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/activemq-cpp.git\ncd activemq-cpp\ngit checkout tags/3.9.4\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout ActiveMQ CMS 2.2.5\nDESCRIPTION: This command checks out the ActiveMQ CMS 2.2.5 source code from the Apache Subversion repository.  It retrieves the specified tag, allowing users to access the exact version of the code.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_cms_releases/225-release.md#_snippet_0\n\nLANGUAGE: svn\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.5/\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for ActiveMQ Classic - XML\nDESCRIPTION: This XML snippet shows the Maven dependency configuration for using ActiveMQ Classic 5.11.3 in a Maven project. It includes the group ID, artifact ID, and version of the ActiveMQ all-in-one JAR.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_classic_releases/classic-05-11-03.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-all</artifactId>\n  <version>5.11.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Custom VirtualHost Factory Scala\nDESCRIPTION: This code shows a factory for creating custom `VirtualHost` instances. It checks the DTO type and creates an instance of the custom `MyVirtualHost` if a corresponding `MyVirtualHostDTO` is found.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/extending-guide.md#_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\npackage example;\nimport org.apache.activemq.apollo.broker._\nimport org.apache.activemq.apollo.dto._\nobject MyVirtualHostFactory extends VirtualHostFactory {\n\n  def create(broker: Broker, dto: VirtualHostDTO): VirtualHost = dto match {\n    case dto:MyVirtualHostDTO =>\n      val rc = new MyVirtualHost(broker, dto.id)\n      rc.config = dto\n      rc\n    case _ => null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a UDP Connector with UDP Protocol in ActiveMQ\nDESCRIPTION: This snippet demonstrates configuring a UDP connector in ActiveMQ with the `udp` protocol handler.  The `protocol` attribute of the `connector` element is set to `udp`, specifying that the connector should use the UDP-specific protocol handler. This configuration forwards all data in a received UDP datagram as a binary message to a configured topic.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<connector id=\"udp\" bind=\"udp://0.0.0.0:61615\" protocol=\"udp\"/>\n```\n\n----------------------------------------\n\nTITLE: Browse Queue Messages\nDESCRIPTION: Retrieves messages from a specific queue, represented as an Atom Feed. A GET request to a queue's URL, like /queues/uk/products/books/computers, returns a 200 OK response with an Atom Feed containing entries for each pending message in the queue.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/restful-queue.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /queues/uk/products/books/computers\n-------------------->\n\n200 OK\nAtom Feed with one entry per pending message\n<--------------------\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This snippet shows an example of instantiating a Java object. It assumes the existence of a class named SomeJava and creates a new instance of it.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.9.0/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: Java Object Instantiation\nDESCRIPTION: This Java code snippet demonstrates the creation of a new `SomeJava` object. The snippet assumes the existence of a `SomeJava` class. This is a basic example of object instantiation in Java.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/1.5.3/syntax.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSomejava s = new SomeJava();\n```\n\n----------------------------------------\n\nTITLE: XML Example\nDESCRIPTION: This snippet illustrates a basic XML example. It shows a simple XML structure with a root element containing text.  It demonstrates the markup convention of XML.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/artemis/documentation/2.1.0/syntax.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<xml>somexml</xml>\n```\n\n----------------------------------------\n\nTITLE: Uninstall Apollo Broker Service on Windows\nDESCRIPTION: Command to uninstall ActiveMQ Apollo Windows service.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nc:\\mybroker\\bin\\apollo-broker-service uninstall\n```\n\n----------------------------------------\n\nTITLE: Restart Apollo Broker Service Bash\nDESCRIPTION: Command to restart the ActiveMQ Apollo broker service on Unix-like systems.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/components/classic/documentation/user-manual.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\napollo-broker-service restart\n```\n\n----------------------------------------\n\nTITLE: Liquid: Determine Current Release\nDESCRIPTION: This code iterates through the current releases data to determine if the current page's version matches the latest release. If a match is found, it sets `isCurrentRelease` to `true` and breaks out of the loops. The `site.data.current_releases[\"nms_amqp\"]` is expected to contain a list of the latest release versions.\nSOURCE: https://github.com/apache/activemq-website/blob/main/src/_layouts/nms_amqp_release.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% for current_release in site.data.current_releases[\"nms_amqp\"] %}\n    {% for release in releases %}\n        {% if release.version contains current_release %}\n                    {% if release.version == page.version %}\n                        {% assign isCurrentRelease = true %}\n                    {% endif %}\n            {% break %}\n        {% endif %}\n    {% endfor %}\n    {% if isCurrentRelease %} {% break %} {% endif %}\n{% endfor %}\n```"
  }
]