[
  {
    "owner": "react-native-webrtc",
    "repo": "react-native-callkeep",
    "content": "TITLE: Handling answerCall Event in React Native CallKeep\nDESCRIPTION: This event is triggered when the user answers an incoming call. It provides the callUUID of the answered call. Implement your normal 'Answering' actions here.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('answerCall', ({ callUUID }) => {\n  // Do your normal `Answering` actions here.\n});\n```\n\n----------------------------------------\n\nTITLE: Handling didDisplayIncomingCall Event in React Native CallKeep\nDESCRIPTION: This event is a callback for RNCallKeep.displayIncomingCall. It provides details about the incoming call, including error information, call UUID, caller details, and push notification data.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didDisplayIncomingCall', ({ error, callUUID, handle, localizedCallerName, hasVideo, fromPushKit, payload }) => {\n  // you might want to do following things when receiving this event:\n  // - Start playing ringback if it is an outgoing call\n});\n```\n\n----------------------------------------\n\nTITLE: Reporting Call End with Reason in JavaScript\nDESCRIPTION: Reports that a call has ended without user initiation, providing a reason code to indicate why the call ended (e.g., failed, remote end, no answer).\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.reportEndCallWithUUID(uuid, reason);\n```\n\n----------------------------------------\n\nTITLE: Implementing CallKeep in React Native Component\nDESCRIPTION: A comprehensive example showing how to set up and use RNCallKeep in a React Native component. It demonstrates event listener configuration, call initialization, and handling various call-related actions.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport RNCallKeep from 'react-native-callkeep';\nimport uuid from 'uuid';\n\nclass RNCallKeepExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.currentCallId = null;\n\n    // Add RNCallKeep Events\n    RNCallKeep.addEventListener('didReceiveStartCallAction', this.didReceiveStartCallAction);\n    RNCallKeep.addEventListener('answerCall', this.onAnswerCallAction);\n    RNCallKeep.addEventListener('endCall', this.onEndCallAction);\n    RNCallKeep.addEventListener('didDisplayIncomingCall', this.onIncomingCallDisplayed);\n    RNCallKeep.addEventListener('didPerformSetMutedCallAction', this.onToggleMute);\n    RNCallKeep.addEventListener('didToggleHoldCallAction', this.onToggleHold);\n    RNCallKeep.addEventListener('didPerformDTMFAction', this.onDTMFAction);\n    RNCallKeep.addEventListener('didActivateAudioSession', this.audioSessionActivated);\n  }\n\n  // Initialise RNCallKeep\n  setup = () => {\n    const options = {\n      ios: {\n        appName: 'ReactNativeWazoDemo',\n        imageName: 'sim_icon',\n        supportsVideo: false,\n        maximumCallGroups: '1',\n        maximumCallsPerCallGroup: '1'\n      },\n      android: {\n        alertTitle: 'Permissions Required',\n        alertDescription:\n          'This application needs to access your phone calling accounts to make calls',\n        cancelButton: 'Cancel',\n        okButton: 'ok',\n        imageName: 'sim_icon',\n        additionalPermissions: [PermissionsAndroid.PERMISSIONS.READ_CONTACTS]\n      }\n    };\n\n    try {\n      RNCallKeep.setup(options);\n      RNCallKeep.setAvailable(true); // Only used for Android, see doc above.\n    } catch (err) {\n      console.error('initializeCallKeep error:', err.message);\n    }\n  }\n\n  // Use startCall to ask the system to start a call - Initiate an outgoing call from this point\n  startCall = ({ handle, localizedCallerName }) => {\n    // Your normal start call action\n    RNCallKeep.startCall(this.getCurrentCallId(), handle, localizedCallerName);\n  };\n\n  reportEndCallWithUUID = (callUUID, reason) => {\n    RNCallKeep.reportEndCallWithUUID(callUUID, reason);\n  }\n\n  // Event Listener Callbacks\n\n  didReceiveStartCallAction = (data) => {\n    let { handle, callUUID, name } = data;\n    // Get this event after the system decides you can start a call\n    // You can now start a call from within your app\n  };\n\n  onAnswerCallAction = (data) => {\n    let { callUUID } = data;\n    // Called when the user answers an incoming call\n  };\n\n  onEndCallAction = (data) => {\n    let { callUUID } = data;\n    RNCallKeep.endCall(this.getCurrentCallId());\n\n    this.currentCallId = null;\n  };\n\n  // Currently iOS only\n  onIncomingCallDisplayed = (data) => {\n    let { error } = data;\n    // You will get this event after RNCallKeep finishes showing incoming call UI\n    // You can check if there was an error while displaying\n  };\n\n  onToggleMute = (data) => {\n    let { muted, callUUID } = data;\n    // Called when the system or user mutes a call\n  };\n\n  onToggleHold = (data) => {\n    let { hold, callUUID } = data;\n    // Called when the system or user holds a call\n  };\n\n  onDTMFAction = (data) => {\n    let { digits, callUUID } = data;\n    // Called when the system or user performs a DTMF action\n  };\n\n  audioSessionActivated = (data) => {\n    // you might want to do following things when receiving this event:\n    // - Start playing ringback if it is an outgoing call\n  };\n\n  getCurrentCallId = () => {\n    if (!this.currentCallId) {\n      this.currentCallId = uuid.v4();\n    }\n\n    return this.currentCallId;\n  };\n\n  render() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ending a Specific Call in JavaScript\nDESCRIPTION: Terminates an active call identified by its UUID. This is used when the user actively chooses to end a call from the app's UI.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.endCall(uuid);\n```\n\n----------------------------------------\n\nTITLE: Basic CallKeep Setup in React Native\nDESCRIPTION: Initial setup configuration for RNCallKeep with customizable options for both iOS and Android platforms. Includes permissions handling and foreground service configuration.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RNCallKeep from 'react-native-callkeep';\n\nconst options = {\n  ios: {\n    appName: 'My app name',\n  },\n  android: {\n    alertTitle: 'Permissions required',\n    alertDescription: 'This application needs to access your phone accounts',\n    cancelButton: 'Cancel',\n    okButton: 'ok',\n    imageName: 'phone_account_icon',\n    additionalPermissions: [PermissionsAndroid.PERMISSIONS.example],\n    foregroundService: {\n      channelId: 'com.company.my',\n      channelName: 'Foreground service for my app',\n      notificationTitle: 'My app is running on background',\n      notificationIcon: 'Path to the resource icon of the notification',\n    }, \n  }\n};\n\nRNCallKeep.setup(options).then(accepted => {});\n```\n\n----------------------------------------\n\nTITLE: Handling didPerformSetMutedCallAction Event in React Native CallKeep\nDESCRIPTION: This event is triggered when a call is muted by the system or the user. It provides the mute status and the callUUID of the affected call.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didPerformSetMutedCallAction', ({ muted, callUUID }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Handling didToggleHoldCallAction Event in React Native CallKeep\nDESCRIPTION: This event is triggered when a call is held or unheld by the current user. It provides the hold status and the callUUID of the affected call.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didToggleHoldCallAction', ({ hold, callUUID }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Handling didChangeAudioRoute Event in React Native CallKeep\nDESCRIPTION: This event is triggered when the audio route has been changed. It provides information about the new audio output and additional details for iOS and Android platforms.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didChangeAudioRoute', ({ output }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Incoming Call UI with RNCallKeep in JavaScript\nDESCRIPTION: Displays the system UI for incoming calls. This method shows the native call interface with caller information and call controls.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.displayIncomingCall(uid, handle, localizedCallerName = '', handleType = 'number', hasVideo = false, options = null);\n```\n\n----------------------------------------\n\nTITLE: Updating Call Display Information in JavaScript\nDESCRIPTION: Updates the display information for an active call. This can be used to change the caller name or number after a call has started.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.updateDisplay(uuid, displayName, handle)\n```\n\n----------------------------------------\n\nTITLE: Setting Mute State for Call in JavaScript\nDESCRIPTION: Toggles the microphone mute state for an active call. Used to implement mute/unmute functionality in the app's call UI.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.setMutedCall(uuid, true);\n```\n\n----------------------------------------\n\nTITLE: Handling didReceiveStartCallAction Event in React Native CallKeep\nDESCRIPTION: This event is triggered when the device allows the app to start a call. It provides the handle, callUUID, and name of the callee. Use this to initiate your app's call action.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didReceiveStartCallAction', ({ handle, callUUID, name }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using Constants for End Call Reasons in JavaScript\nDESCRIPTION: Demonstrates how to use predefined constants for end call reasons rather than raw numbers, improving code readability and maintainability.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CONSTANTS as CK_CONSTANTS, RNCallKeep } from 'react-native-callkeep';\n\nRNCallKeep.reportEndCallWithUUID(uuid, CK_CONSTANTS.END_CALL_REASONS.FAILED);\n```\n\n----------------------------------------\n\nTITLE: Handling endCall Event in React Native CallKeep\nDESCRIPTION: This event is triggered when the user ends a call. It provides the callUUID of the ended call. Implement your normal 'Hang Up' actions here.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('endCall', ({ callUUID }) => {\n  // Do your normal `Hang Up` actions here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling didPerformDTMFAction Event in React Native CallKeep\nDESCRIPTION: This event is triggered when the user types a number on their dialer. It provides the digits entered and the callUUID of the affected call.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didPerformDTMFAction', ({ digits, callUUID }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Answering Incoming Call Programmatically in JavaScript\nDESCRIPTION: Tells the CallKeep SDK that a user has answered a call from the app UI. This updates the call state in the native call UI.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.answerIncomingCall(uuid)\n```\n\n----------------------------------------\n\nTITLE: Implementing PushKit for iOS Background Calls\nDESCRIPTION: Implementation of didReceiveIncomingPushWithPayload method in AppDelegate.m for handling VoIP push notifications on iOS. Required for iOS 13+ to report incoming calls that wake up the application.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_57\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)pushRegistry:(PKPushRegistry *)registry didReceiveIncomingPushWithPayload:(PKPushPayload *)payload forType:(PKPushType)type withCompletionHandler:(void (^)(void))completion {\n  // Process the received push\n  [RNVoipPushNotificationManager didReceiveIncomingPushWithPayload:payload forType:(NSString *)type];\n\n  // Retrieve information like handle and callerName here\n  // NSString *uuid = /* fetch for payload or ... */ [[[NSUUID UUID] UUIDString] lowercaseString];\n  // NSString *callerName = @\"caller name here\";\n  // NSString *handle = @\"caller number here\";\n  // NSDictionary *extra = [payload.dictionaryPayload valueForKeyPath:@\"custom.path.to.data\"]; /* use this to pass any special data (ie. from your notification) down to RN. Can also be `nil` */\n\n  [RNCallKeep reportNewIncomingCall: uuid\n                             handle: handle\n                         handleType: @\"generic\"\n                           hasVideo: NO\n                localizedCallerName: callerName\n                    supportsHolding: YES\n                       supportsDTMF: YES\n                   supportsGrouping: YES\n                 supportsUngrouping: YES\n                        fromPushKit: YES\n                            payload: extra\n              withCompletionHandler: completion];\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Incoming Call in JavaScript\nDESCRIPTION: Rejects an incoming call identified by its UUID. This differs from endCall as it specifically handles the rejection flow for calls that haven't been answered.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.rejectCall(uuid);\n```\n\n----------------------------------------\n\nTITLE: Handling showIncomingCallUi Event in React Native CallKeep\nDESCRIPTION: Android only, for self-managed mode. This event signals that the app must show an incoming call UI. It provides the handle, callUUID, and name of the incoming caller.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('showIncomingCallUi', ({ handle, callUUID, name }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Ending All Active Calls in JavaScript\nDESCRIPTION: Terminates all ongoing calls at once. Useful for cleanup operations or when needing to reset call state across the application.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.endAllCalls();\n```\n\n----------------------------------------\n\nTITLE: Setting Call Availability in Android ConnectionService\nDESCRIPTION: Tells ConnectionService that the device is ready to make outgoing calls via the native Phone app. This should be set to false when disconnected from the SIP client.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.setAvailable(true);\n```\n\n----------------------------------------\n\nTITLE: Starting Outgoing Call with iOS-specific Parameters in JavaScript\nDESCRIPTION: Initiates an outgoing call on iOS, notifying the device that a call is occurring with caller information and optional video support.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.startCall(uuid, handle, contactIdentifier, handleType, hasVideo);\n```\n\n----------------------------------------\n\nTITLE: Getting Initial CallKeep Events in React Native\nDESCRIPTION: Retrieves events that were triggered before the JavaScript context was created. This is an alternative to the \"didLoadWithEvents\" event.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.getInitialEvents();\n```\n\n----------------------------------------\n\nTITLE: Starting Outgoing Call with Android-specific Parameters in JavaScript\nDESCRIPTION: Initiates an outgoing call on Android with a simplified parameter set, notifying the device that a call is occurring.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.startCall(uuid, handle, contactIdentifier);\n```\n\n----------------------------------------\n\nTITLE: Toggling Speaker Mode on Android in JavaScript\nDESCRIPTION: Android-specific method to toggle the speaker mode for an active call, enabling control of audio routing.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.toggleAudioRouteSpeaker(uuid, true);\n```\n\n----------------------------------------\n\nTITLE: iOS CallKeep Setup in AppDelegate\nDESCRIPTION: Alternative setup method for iOS implementation in AppDelegate.m, allowing event capture before React Native bridge initialization.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n@implementation AppDelegate\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{ \n  self.bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n\n  [RNCallKeep setup:@{\n    @\"appName\": @\"Awesome App\",\n    @\"maximumCallGroups\": @3,\n    @\"maximumCallsPerCallGroup\": @1,\n    @\"supportsVideo\": @NO,\n  }];\n\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:self.bridge\n                                                   moduleName:@\"App\"\n                                            initialProperties:nil];\n\n  return YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling checkReachability Event in React Native CallKeep\nDESCRIPTION: Android only. This event is used to check if the application is reachable before making a call from the native phone application when the app is in the background.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('checkReachability', () => {\n  RNCallKeep.setReachable();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Hold State for Call in JavaScript\nDESCRIPTION: Toggles the hold state for an active call. Allows implementing hold/resume functionality in the app's call UI.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.setOnHold(uuid, true)\n```\n\n----------------------------------------\n\nTITLE: Registering Android Events in JavaScript\nDESCRIPTION: Android-specific method to register UI events without calling setup(). Used in custom initialization flows when full setup isn't needed.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.registerAndroidEvents();\n```\n\n----------------------------------------\n\nTITLE: Handling didActivateAudioSession Event in React Native CallKeep\nDESCRIPTION: This event is triggered when the AudioSession has been activated by RNCallKeep. Use this to start playing ringback for outgoing calls.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didActivateAudioSession', () => {\n  // you might want to do following things when receiving this event:\n  // - Start playing ringback if it is an outgoing call\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for react-native-callkeep\nDESCRIPTION: This XML snippet shows the necessary permissions and service declarations required in the AndroidManifest.xml file for react-native-callkeep to function properly. It includes permissions for phone state, call handling, and audio recording.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/android-installation.md#2025-04-19_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.BIND_TELECOM_CONNECTION_SERVICE\"/>\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n<uses-permission android:name=\"android.permission.CALL_PHONE\" />\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n// Use this to target android >= 14\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_MICROPHONE\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_CAMERA\" />\n\n<application>\n    // ...\n    <service android:name=\"io.wazo.callkeep.VoiceConnectionService\"\n        android:label=\"Wazo\"\n        android:permission=\"android.permission.BIND_TELECOM_CONNECTION_SERVICE\"\n        // Use this to target android >= 11\n        android:foregroundServiceType=\"camera|microphone\"\n        // For android < 11\n        android:foregroundServiceType=\"phoneCall\"\n    >\n        \n        <intent-filter>\n            <action android:name=\"android.telecom.ConnectionService\" />\n        </intent-filter>\n    </service>\n    // ....\n</application>\n```\n\n----------------------------------------\n\nTITLE: CallKeep Constants Definition\nDESCRIPTION: Definition of constants used for handling call end reasons and other call-related states in the application.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CONSTANTS = {\n  END_CALL_REASONS: {\n    FAILED: 1,\n    REMOTE_ENDED: 2,\n    UNANSWERED: 3,\n    ANSWERED_ELSEWHERE: 4,\n    DECLINED_ELSEWHERE: 5,\n    MISSED: 6\n  }\n};\n\nconst { CONSTANTS as CK_CONSTANTS, RNCallKeep } from 'react-native-callkeep';\n\nconsole.log(CK_CONSTANTS.END_CALL_REASONS.FAILED) // outputs 1\n```\n\n----------------------------------------\n\nTITLE: Registering Background Task for Outgoing Calls in index.android.js\nDESCRIPTION: This JavaScript code registers a headless task for handling background messages related to outgoing calls. It allows the application to wake up and make calls even when it's killed.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/android-installation.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAppRegistry.registerHeadlessTask('RNCallKeepBackgroundMessage', () => ({ name, callUUID, handle }) => {\n  // Make your call here\n  \n  return Promise.resolve();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener in JavaScript\nDESCRIPTION: Removes a registered event listener from CallKeep. Useful for cleanup when components unmount or when listeners are no longer needed.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.removeEventListener('checkReachability');\n```\n\n----------------------------------------\n\nTITLE: Importing and Adding RNCallKeepPackage in MainApplication.java\nDESCRIPTION: This code snippet demonstrates how to import the RNCallKeepPackage and add it to the list of packages in the MainApplication.java file.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/android-installation.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.wazo.callkeep.RNCallKeepPackage; // Add this import line\n//...\n\nprivate static List<ReactPackage> getPackages() {\n    return Arrays.<ReactPackage>asList(\n        new MainReactPackage(),\n        new RNCallKeepPackage() // Add this line\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Available Audio Routes in JavaScript\nDESCRIPTION: Retrieves a list of available audio routes such as bluetooth, wired headset, speaker, or phone earpiece. Returns an array of AudioRoute objects.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nawait RNCallKeep.getAudioRoutes(): AudioRoute;\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-callkeep Package in Android\nDESCRIPTION: This command automatically links the react-native-callkeep package to your Android project.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/android-installation.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nreact-native link react-native-callkeep\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Route in JavaScript\nDESCRIPTION: Sets the audio route for a call using a route name obtained from getAudioRoutes(). Allows redirecting audio to specific output devices.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nawait RNCallKeep.setAudioRoute(uuid, routeName);\n```\n\n----------------------------------------\n\nTITLE: Importing RNCallKeep in AppDelegate.m\nDESCRIPTION: Code diff showing how to import the RNCallKeep library in the AppDelegate.m file.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/ios-installation.md#2025-04-19_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+ #import \"RNCallKeep.h\"\n```\n\n----------------------------------------\n\nTITLE: UIBackgroundModes configuration for VoIP support\nDESCRIPTION: XML configuration for Info.plist file to enable VoIP background mode, which is required for CallKeep to function properly when the app is in the background.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/ios-installation.md#2025-04-19_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>voip</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Running CocoaPods installation for iOS\nDESCRIPTION: Commands to navigate to the iOS directory and install the pods for React Native CallKeep.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/ios-installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Getting All Current Calls on iOS\nDESCRIPTION: Returns a Promise with an array of all current calls and their states, including UUID, connection status, and call properties.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.getCalls();\n\nresponse:\n[{\n  callUUID: \"E26B14F7-2CDF-48D0-9925-532199AE7C48\",\n  hasConnected: true,\n  hasEnded: false,\n  onHold: false,\n  outgoing: false,\n}]\n```\n\n----------------------------------------\n\nTITLE: Adding Android Import Statements - Java Diff\nDESCRIPTION: Additional imports required in MainActivity.java for CallKeep v3 integration.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/MIGRATION_v2_v3.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ import android.support.annotation.NonNull;\n+ import android.support.annotation.Nullable;\n```\n\n----------------------------------------\n\nTITLE: Checking for Active Calls on iOS in JavaScript\nDESCRIPTION: iOS-specific method that checks if there are any active calls on the device. Returns a promise with a boolean result.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.checkIfBusy();\n```\n\n----------------------------------------\n\nTITLE: Running the React Native CallKeep Example\nDESCRIPTION: Commands to start the Metro bundler and launch the application on Android or iOS devices/emulators.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/example/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Start metro bundler\nyarn start\n\n# Start the application (in another term)\nyarn android # or yarn ios\n```\n\n----------------------------------------\n\nTITLE: Checking if a Call is Active on iOS\nDESCRIPTION: Returns true if the UUID passed matches an existing and answered call. Will return false if the call does not exist or has not been answered.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.isCallActive(uuid);\n```\n\n----------------------------------------\n\nTITLE: Bringing App to Foreground on Android in JavaScript\nDESCRIPTION: Android-specific method to bring the application to the foreground. Opens the app if it was closed or in background state.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.backToForeground();\n```\n\n----------------------------------------\n\nTITLE: Handling didLoadWithEvents Event in React Native CallKeep\nDESCRIPTION: iOS only. This event is called when JS context initializes if there were user actions performed before JS context creation. It provides an array of events that occurred.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('didLoadWithEvents', (events) => {\n  // `events` is passed as an Array chronologically, handle or ignore events based on the app's logic\n  // see example usage in https://github.com/react-native-webrtc/react-native-callkeep/pull/169 or https://github.com/react-native-webrtc/react-native-callkeep/pull/205\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreground Service Settings for Android\nDESCRIPTION: Configures the Foreground Service used for Android 11+ to get microphone access in the background. This is similar to setting the foregroundService key in the setup() method.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.setForegroundServiceSettings({\n    channelId: 'com.company.my',\n    channelName: 'Foreground service for my app',\n    notificationTitle: 'My app is running on background',\n    notificationIcon: 'Path to the resource icon of the notification',\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Initial CallKeep Events in React Native\nDESCRIPTION: Clears all pending actions that were returned by the getInitialEvents() method.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.clearInitialEvents();\n```\n\n----------------------------------------\n\nTITLE: Registering Phone Account on Android in JavaScript\nDESCRIPTION: Android-specific method to register the phone account manually. Useful for custom permission flows when not using the setup() method.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.registerPhoneAccount(options);\n```\n\n----------------------------------------\n\nTITLE: Checking ConnectionService Availability on Android in JavaScript\nDESCRIPTION: Android-specific method to check if the device supports ConnectionService. Used to determine if call features will work on the device.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.checkPhoneAccountEnabled();\n```\n\n----------------------------------------\n\nTITLE: Checking ConnectionService Support on Android in JavaScript\nDESCRIPTION: Android-specific method to check if the ConnectionService API is available on the device. Returns a boolean indicating support.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.supportConnectionService();\n```\n\n----------------------------------------\n\nTITLE: Checking Default Phone Account on Android in JavaScript\nDESCRIPTION: Android-specific method to check if a default phone account is set. Shows an alert prompting the user to set one if not configured.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  alertTitle: 'Default not set',\n  alertDescription: 'Please set the default phone account'\n};\n\nRNCallKeep.hasDefaultPhoneAccount(options);\n```\n\n----------------------------------------\n\nTITLE: Checking Phone Account Enabled Status on Android in JavaScript\nDESCRIPTION: Android-specific method that checks if a default phone account is set and enabled. Useful for custom permission prompts.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.checkPhoneAccountEnabled();\n```\n\n----------------------------------------\n\nTITLE: Checking Phone Account Status on Android in JavaScript\nDESCRIPTION: Android-specific method to check if the user has enabled the phone account for the application. Returns a promise with a boolean result.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nawait RNCallKeep.hasPhoneAccount();\n```\n\n----------------------------------------\n\nTITLE: Checking Speaker State on iOS in JavaScript\nDESCRIPTION: iOS-specific method that checks if the device speaker is currently on. Returns a promise with a boolean result.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.checkSpeaker();\n```\n\n----------------------------------------\n\nTITLE: Setting Connection State for Call in Android\nDESCRIPTION: Android-specific method to change the state of a call. Refers to Connection.STATE_* constants from Android's telecom package.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.setConnectionState(uuid, state)\n```\n\n----------------------------------------\n\nTITLE: Checking for Outgoing Calls on Android in JavaScript\nDESCRIPTION: Android-specific method to check if there's an ongoing outgoing call when the app wakes up in background mode. Returns a promise with a boolean result.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasOutgoingCall = await RNCallKeep.hasOutgoingCall();\n```\n\n----------------------------------------\n\nTITLE: Handling silenceIncomingCall Event in React Native CallKeep\nDESCRIPTION: Android only, for self-managed mode. This event corresponds to the native onSilence event. The implementor should silence the corresponding incoming calls notification sound.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('silenceIncomingCall', ({ handle, callUUID, name }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Handling createIncomingConnectionFailed Event in React Native CallKeep\nDESCRIPTION: Android only, for self-managed mode. This event corresponds to the native onCreateIncomingConnectionFailed callback. The implementor should reject the incoming SIP INVITE with an appropriate status code.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('createIncomingConnectionFailed', ({ handle, callUUID, name }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Handling onHasActiveCall Event in React Native CallKeep\nDESCRIPTION: Android only. This event is a listener that informs the JS side if a native call has been answered while there was an active self-managed call.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nRNCallKeep.addEventListener('onHasActiveCall', () => {\n  // eg: End active app call if native call is answered\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing continueUserActivity in AppDelegate.m for CallKit\nDESCRIPTION: Implementation of the application:continueUserActivity:restorationHandler: method in AppDelegate.m to handle call actions from the native Phone app.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/ios-installation.md#2025-04-19_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n+ - (BOOL)application:(UIApplication *)application\n+ continueUserActivity:(NSUserActivity *)userActivity\n+   restorationHandler:(void(^)(NSArray<id<UIUserActivityRestoring>> * __nullable restorableObjects))restorationHandler\n+ {\n+   return [RNCallKeep application:application\n+            continueUserActivity:userActivity\n+              restorationHandler:restorationHandler];\n+ }\n```\n\n----------------------------------------\n\nTITLE: Adding READ_CALL_LOG Permission in Android Manifest\nDESCRIPTION: Adds the READ_CALL_LOG permission to the Android manifest file, which is required for using the self-managed mode in react-native-callkeep.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALL_LOG\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Result Listener in MainActivity.java\nDESCRIPTION: This code adds a permission result listener to the MainActivity.java file. It handles the REQUEST_READ_PHONE_STATE permission result for the RNCallKeepModule.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/android-installation.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.wazo.callkeep.RNCallKeepModule; // Add these import lines\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\n\npublic class MainActivity extends ReactActivity {\n    // ...\n\n    // Permission results\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode) {\n            case RNCallKeepModule.REQUEST_READ_PHONE_STATE:\n                RNCallKeepModule.onRequestPermissionsResult(requestCode, permissions, grantResults);\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Active Native Calls in Android\nDESCRIPTION: Returns true if there is an active native call being managed by CallKeep.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.checkIsInManagedCall();\n```\n\n----------------------------------------\n\nTITLE: Setting Current Call as Active in Android\nDESCRIPTION: Marks the current call as active, which is necessary to set the correct Android capabilities (hold, mute) once the call is ready for two-way audio.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.setCurrentCallActive(uuid);\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Calls Capability in Android\nDESCRIPTION: Disables the \"Add call\" button in the ConnectionService UI. This is enabled by default.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nRNCallKeep.canMakeMultipleCalls(false); // Enabled by default\n```\n\n----------------------------------------\n\nTITLE: Updated reportNewIncomingCall Method for iOS in CallKeep v4\nDESCRIPTION: This code shows the updated signature for the reportNewIncomingCall method in AppDelegate.m when migrating from CallKeep v3 to v4. The method now includes additional parameters for supporting features like holding, DTMF, grouping, and ungrouping calls.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/MIGRATION_v3_v4.md#2025-04-19_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\n[RNCallKeep reportNewIncomingCall: uuidString\n                           handle: handle\n                       handleType: handleType\n                         hasVideo: YES\n              localizedCallerName: localizedCallerName\n                  supportsHolding: YES\n                     supportsDTMF: YES\n                 supportsGrouping: YES\n               supportsUngrouping: YES\n                      fromPushKit: YES\n                          payload: nil\n            withCompletionHandler: nil];\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native CallKeep Example\nDESCRIPTION: Commands to install the dependencies for the example project and set up the iOS environment using CocoaPods.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/example/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install dependancies\nyarn install\n\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Automatically linking React Native CallKeep in iOS\nDESCRIPTION: Command to automatically link the React Native CallKeep library to your iOS project using react-native link.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/ios-installation.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nreact-native link react-native-callkeep\n```\n\n----------------------------------------\n\nTITLE: Installing React Native CallKeep with CocoaPods\nDESCRIPTION: CocoaPod dependency definition for adding React Native CallKeep to your iOS project's Podfile.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/ios-installation.md#2025-04-19_snippet_1\n\nLANGUAGE: podfile\nCODE:\n```\npod 'RNCallKeep', :path => '../node_modules/react-native-callkeep'\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New React Native CallKeep Project\nDESCRIPTION: Commands that were used to create this example project from scratch, including initializing with Expo, ejecting, and linking the CallKeep library.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/example/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexpo init CallKeepDemo\nexpo eject\nyarn add react-native-callkeep\n./node_modules/.bin/react-native link react-native-callkeep\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Results Handler - Java\nDESCRIPTION: Implementation of onRequestPermissionsResult method in MainActivity.java to handle phone state permissions for CallKeep.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/MIGRATION_v2_v3.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n    switch (requestCode) {\n        case RNCallKeepModule.REQUEST_READ_PHONE_STATE:\n            RNCallKeepModule.onRequestPermissionsResult(requestCode, permissions, grantResults);\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding react-native-callkeep to Android Gradle Settings\nDESCRIPTION: This snippet shows how to include the react-native-callkeep project in the Android settings.gradle file. It specifies the project directory path.\nSOURCE: https://github.com/react-native-webrtc/react-native-callkeep/blob/master/docs/android-installation.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ninclude ':react-native-callkeep'\nproject(':react-native-callkeep').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-callkeep/android')\n```"
  }
]